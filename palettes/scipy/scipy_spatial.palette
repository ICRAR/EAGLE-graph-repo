{
    "modelData": {
        "filePath": "scipy_spatial.palette",
        "fileType": "Palette",
        "shortDescription": "",
        "detailedDescription": "=============================================================\nSpatial algorithms and data structures (:mod:`scipy.spatial`)\n=============================================================\n\n.. currentmodule:: scipy.spatial\n\n.. toctree::\n   :hidden:\n\n   spatial.distance\n\nSpatial transformations\n=======================\n\nThese are contained in the `scipy.spatial.transform` submodule.\n\nNearest-neighbor queries\n========================\n.. autosummary::\n   :toctree: generated/\n\n   KDTree      -- class for efficient nearest-neighbor queries\n   cKDTree     -- class for efficient nearest-neighbor queries (faster implementation)\n   Rectangle\n\nDistance metrics\n================\n\nDistance metrics are contained in the :mod:`scipy.spatial.distance` submodule.\n\nDelaunay triangulation, convex hulls, and Voronoi diagrams\n==========================================================\n\n.. autosummary::\n   :toctree: generated/\n\n   Delaunay    -- compute Delaunay triangulation of input points\n   ConvexHull  -- compute a convex hull for input points\n   Voronoi     -- compute a Voronoi diagram hull from input points\n   SphericalVoronoi -- compute a Voronoi diagram from input points on the surface of a sphere\n   HalfspaceIntersection -- compute the intersection points of input halfspaces\n\nPlotting helpers\n================\n\n.. autosummary::\n   :toctree: generated/\n\n   delaunay_plot_2d     -- plot 2-D triangulation\n   convex_hull_plot_2d  -- plot 2-D convex hull\n   voronoi_plot_2d      -- plot 2-D Voronoi diagram\n\n.. seealso:: :ref:`Tutorial <qhulltutorial>`\n\n\nSimplex representation\n======================\nThe simplices (triangles, tetrahedra, etc.) appearing in the Delaunay\ntessellation (N-D simplices), convex hull facets, and Voronoi ridges\n(N-1-D simplices) are represented in the following scheme::\n\n    tess = Delaunay(points)\n    hull = ConvexHull(points)\n    voro = Voronoi(points)\n\n    # coordinates of the jth vertex of the ith simplex\n    tess.points[tess.simplices[i, j], :]        # tessellation element\n    hull.points[hull.simplices[i, j], :]        # convex hull facet\n    voro.vertices[voro.ridge_vertices[i, j], :] # ridge between Voronoi cells\n\nFor Delaunay triangulations and convex hulls, the neighborhood\nstructure of the simplices satisfies the condition:\n``tess.neighbors[i,j]`` is the neighboring simplex of the ith\nsimplex, opposite to the ``j``-vertex. It is -1 in case of no neighbor.\n\nConvex hull facets also define a hyperplane equation::\n\n    (hull.equations[i,:-1] * coord).sum() + hull.equations[i,-1] == 0\n\nSimilar hyperplane equations for the Delaunay triangulation correspond\nto the convex hull facets on the corresponding N+1-D\nparaboloid.\n\nThe Delaunay triangulation objects offer a method for locating the\nsimplex containing a given point, and barycentric coordinate\ncomputations.\n\nFunctions\n---------\n\n.. autosummary::\n   :toctree: generated/\n\n   tsearch\n   distance_matrix\n   minkowski_distance\n   minkowski_distance_p\n   procrustes\n   geometric_slerp\n\nWarnings / Errors used in :mod:`scipy.spatial`\n----------------------------------------------\n.. autosummary::\n   :toctree: generated/\n\n   QhullError",
        "repoService": "",
        "repoBranch": "",
        "repo": "",
        "generatorName": "dlg_paletteGen",
        "generatorVersion": "0.6.3",
        "generatorCommitHash": "",
        "schemaVersion": "AppRef",
        "readonly": true,
        "repositoryUrl": "scipy",
        "commitHash": "0.1",
        "downloadUrl": "",
        "signature": "e341501461c2e264c09034fcc39efae55aada3b4a301eaebe669f2ba13bcc167",
        "lastModifiedName": "wici",
        "lastModifiedEmail": "",
        "lastModifiedDatetime": 1755100439.503536,
        "numLGNodes": 124
    },
    "nodeDataArray": [
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "au590zxb",
            "name": "ConvexHull.__init__",
            "description": "\nConvexHull(points, incremental=False, qhull_options=None)\n    \n    Convex hulls in N dimensions.\n    \n    .. versionadded:: 0.12.0\n    \n    Parameters\n    ----------\n    points : ndarray of floats, shape (npoints, ndim)\n        Coordinates of points to construct a convex hull from\n    incremental : bool, optional\n        Allow adding new points incrementally. This takes up some additional\n        resources.\n    qhull_options : str, optional\n        Additional options to pass to Qhull. See Qhull manual\n        for details. (Default: \"Qx\" for ndim > 4 and \"\" otherwise)\n        Option \"Qt\" is always enabled.\n    \n    Attributes\n    ----------\n    points : ndarray of double, shape (npoints, ndim)\n        Coordinates of input points.\n    vertices : ndarray of ints, shape (nvertices,)\n        Indices of points forming the vertices of the convex hull.\n        For 2-D convex hulls, the vertices are in counterclockwise order.\n        For other dimensions, they are in input order.\n    simplices : ndarray of ints, shape (nfacet, ndim)\n        Indices of points forming the simplical facets of the convex hull.\n    neighbors : ndarray of ints, shape (nfacet, ndim)\n        Indices of neighbor facets for each facet.\n        The kth neighbor is opposite to the kth vertex.\n        -1 denotes no neighbor.\n    equations : ndarray of double, shape (nfacet, ndim+1)\n        [normal, offset] forming the hyperplane equation of the facet\n        (see `Qhull documentation <http://www.qhull.org/>`__  for more).\n    coplanar : ndarray of int, shape (ncoplanar, 3)\n        Indices of coplanar points and the corresponding indices of\n        the nearest facets and nearest vertex indices.  Coplanar\n        points are input points which were *not* included in the\n        triangulation due to numerical precision issues.\n    \n        If option \"Qc\" is not specified, this list is not computed.\n    good : ndarray of bool or None\n        A one-dimensional Boolean array indicating which facets are\n        good. Used with options that compute good facets, e.g. QGn\n        and QG-n. Good facets are defined as those that are\n        visible (n) or invisible (-n) from point n, where\n        n is the nth point in 'points'. The 'good' attribute may be\n        used as an index into 'simplices' to return the good (visible)\n        facets: simplices[good]. A facet is visible from the outside\n        of the hull only, and neither coplanarity nor degeneracy count\n        as cases of visibility.\n    \n        If a \"QGn\" or \"QG-n\" option is not specified, None is returned.\n    \n        .. versionadded:: 1.3.0\n    area : float\n        Surface area of the convex hull when input dimension > 2.\n        When input `points` are 2-dimensional, this is the perimeter of the convex hull.\n    \n        .. versionadded:: 0.17.0\n    volume : float\n        Volume of the convex hull when input dimension > 2.\n        When input `points` are 2-dimensional, this is the area of the convex hull.\n    \n        .. versionadded:: 0.17.0\n    \n    Raises\n    ------\n    QhullError\n        Raised when Qhull encounters an error condition, such as\n        geometrical degeneracy when options to resolve are not enabled.\n    ValueError\n        Raised if an incompatible array is given as input.\n    \n    Notes\n    -----\n    The convex hull is computed using the\n    `Qhull library <http://www.qhull.org/>`__.\n    \n    Examples\n    --------\n    \n    Convex hull of a random set of points:\n    \n    >>> from scipy.spatial import ConvexHull, convex_hull_plot_2d\n    >>> import numpy as np\n    >>> rng = np.random.default_rng()\n    >>> points = rng.random((30, 2))   # 30 random points in 2-D\n    >>> hull = ConvexHull(points)\n    \n    Plot it:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> plt.plot(points[:,0], points[:,1], 'o')\n    >>> for simplex in hull.simplices:\n    ...     plt.plot(points[simplex, 0], points[simplex, 1], 'k-')\n    \n    We could also have directly used the vertices of the hull, which\n    for 2-D are guaranteed to be in counterclockwise order:\n    \n    >>> plt.plot(points[hull.vertices,0], points[hull.vertices,1], 'r--', lw=2)\n    >>> plt.plot(points[hull.vertices[0],0], points[hull.vertices[0],1], 'ro')\n    >>> plt.show()\n    \n    Facets visible from a point:\n    \n    Create a square and add a point above the square.\n    \n    >>> generators = np.array([[0.2, 0.2],\n    ...                        [0.2, 0.4],\n    ...                        [0.4, 0.4],\n    ...                        [0.4, 0.2],\n    ...                        [0.3, 0.6]])\n    \n    Call ConvexHull with the QG option. QG4 means\n    compute the portions of the hull not including\n    point 4, indicating the facets that are visible\n    from point 4.\n    \n    >>> hull = ConvexHull(points=generators,\n    ...                   qhull_options='QG4')\n    \n    The \"good\" array indicates which facets are\n    visible from point 4.\n    \n    >>> print(hull.simplices)\n        [[1 0]\n         [1 2]\n         [3 0]\n         [3 2]]\n    >>> print(hull.good)\n        [False  True False False]\n    \n    Now plot it, highlighting the visible facets.\n    \n    >>> fig = plt.figure()\n    >>> ax = fig.add_subplot(1,1,1)\n    >>> for visible_facet in hull.simplices[hull.good]:\n    ...     ax.plot(hull.points[visible_facet, 0],\n    ...             hull.points[visible_facet, 1],\n    ...             color='violet',\n    ...             lw=6)\n    >>> convex_hull_plot_2d(hull, ax=ax)\n        <Figure size 640x480 with 1 Axes> # may vary\n    >>> plt.show()\n    \n    References\n    ----------\n    .. [Qhull] http://www.qhull.org/",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4205083ab25bc1dc12561333d8f6cc48775751246fb0d9afad1355faf67d7fdc",
            "fields": [
                {
                    "id": "0na8275a",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to ConvexHull object",
                    "type": "Object:scipy.spatial._qhull.ConvexHull",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vcr86o8q",
                    "encoding": "",
                    "name": "points",
                    "value": "",
                    "defaultValue": "",
                    "description": "Coordinates of input points.",
                    "type": "ndarray of double, shape (npoints, ndim)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "inygk6ka",
                    "encoding": "",
                    "name": "incremental",
                    "value": false,
                    "defaultValue": false,
                    "description": "Allow adding new points incrementally. This takes up some additional\nresources.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vtd5glkj",
                    "encoding": "",
                    "name": "qhull_options",
                    "value": "",
                    "defaultValue": "",
                    "description": "Additional options to pass to Qhull. See Qhull manual\nfor details. (Default: \"Qx\" for ndim > 4 and \"\" otherwise)\nOption \"Qt\" is always enabled.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bkk8fm7e",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial._qhull.ConvexHull.__init__",
                    "defaultValue": "scipy.spatial._qhull.ConvexHull.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "16p66gzd",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bq3lk09o",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "f_qxlmyk",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_0vh4tiw",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial._qhull.ConvexHull",
                    "defaultValue": "scipy.spatial._qhull.ConvexHull",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jn5_g6fk",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0or4q7gy",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "83s59gw7",
            "name": "ConvexHull.add_points",
            "description": "add_points(points, restart=False)\n    \n    Process a set of additional new points.\n    \n    Parameters\n    ----------\n    points : ndarray\n        New points to add. The dimensionality should match that of the\n        initial points.\n    restart : bool, optional\n        Whether to restart processing from scratch, rather than\n        adding points incrementally.\n    \n    Raises\n    ------\n    QhullError\n        Raised when Qhull encounters an error condition, such as\n        geometrical degeneracy when options to resolve are not enabled.\n    \n    See Also\n    --------\n    close\n    \n    Notes\n    -----\n    You need to specify ``incremental=True`` when constructing the\n    object to be able to add points incrementally. Incremental addition\n    of points is also not possible after `close` has been called.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b1ebf495ddce0a7f552fed89ae542c360e2068c58068dc36b9e46e432029fbf8",
            "fields": [
                {
                    "id": "c86ymh6c",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.spatial._qhull.ConvexHull.add_points object",
                    "type": "Object:scipy.spatial._qhull.ConvexHull",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ah2vu12n",
                    "encoding": "",
                    "name": "points",
                    "value": "",
                    "defaultValue": "",
                    "description": "New points to add. The dimensionality should match that of the\ninitial points.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_iplt6zk",
                    "encoding": "",
                    "name": "restart",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to restart processing from scratch, rather than\nadding points incrementally.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4_guw616",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial._qhull.ConvexHull.add_points",
                    "defaultValue": "scipy.spatial._qhull.ConvexHull.add_points",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bvgjn28a",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "71dfg689",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "4bh59kkr",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "408uohbw",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial._qhull.ConvexHull",
                    "defaultValue": "scipy.spatial._qhull.ConvexHull",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4tcn81_u",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e32nzd3c",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "ucx1qn1v",
            "name": "ConvexHull.close",
            "description": "close()\n    \n    Finish incremental processing.\n    \n    Call this to free resources taken up by Qhull, when using the\n    incremental mode. After calling this, adding more points is no\n    longer possible.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "cf3897a1f574d84e2301211949f6fc3fdb25fa5c8fbd5bbc09c7c5d8e4cf1118",
            "fields": [
                {
                    "id": "og26aswh",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.spatial._qhull.ConvexHull.close object",
                    "type": "Object:scipy.spatial._qhull.ConvexHull",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7dh1mv4y",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial._qhull.ConvexHull.close",
                    "defaultValue": "scipy.spatial._qhull.ConvexHull.close",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2miuzw1l",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pe4v974m",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "cgplkogt",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l2164ucn",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial._qhull.ConvexHull",
                    "defaultValue": "scipy.spatial._qhull.ConvexHull",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kh46bzn1",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bfcay9sx",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "5o6e82st",
            "name": "Delaunay.__init__",
            "description": "\nDelaunay(points, furthest_site=False, incremental=False, qhull_options=None)\n    \n    Delaunay tessellation in N dimensions.\n    \n    .. versionadded:: 0.9\n    \n    Parameters\n    ----------\n    points : ndarray of floats, shape (npoints, ndim)\n        Coordinates of points to triangulate\n    furthest_site : bool, optional\n        Whether to compute a furthest-site Delaunay triangulation.\n        Default: False\n    \n        .. versionadded:: 0.12.0\n    incremental : bool, optional\n        Allow adding new points incrementally. This takes up some additional\n        resources.\n    qhull_options : str, optional\n        Additional options to pass to Qhull. See Qhull manual for\n        details. Option \"Qt\" is always enabled.\n        Default:\"Qbb Qc Qz Qx Q12\" for ndim > 4 and \"Qbb Qc Qz Q12\" otherwise.\n        Incremental mode omits \"Qz\".\n    \n        .. versionadded:: 0.12.0\n    \n    Attributes\n    ----------\n    points : ndarray of double, shape (npoints, ndim)\n        Coordinates of input points.\n    simplices : ndarray of ints, shape (nsimplex, ndim+1)\n        Indices of the points forming the simplices in the triangulation.\n        For 2-D, the points are oriented counterclockwise.\n    neighbors : ndarray of ints, shape (nsimplex, ndim+1)\n        Indices of neighbor simplices for each simplex.\n        The kth neighbor is opposite to the kth vertex.\n        For simplices at the boundary, -1 denotes no neighbor.\n    equations : ndarray of double, shape (nsimplex, ndim+2)\n        [normal, offset] forming the hyperplane equation of the facet\n        on the paraboloid\n        (see `Qhull documentation <http://www.qhull.org/>`__ for more).\n    paraboloid_scale, paraboloid_shift : float\n        Scale and shift for the extra paraboloid dimension\n        (see `Qhull documentation <http://www.qhull.org/>`__ for more).\n    transform : ndarray of double, shape (nsimplex, ndim+1, ndim)\n        Affine transform from ``x`` to the barycentric coordinates ``c``.\n        This is defined by::\n    \n            T c = x - r\n    \n        At vertex ``j``, ``c_j = 1`` and the other coordinates zero.\n    \n        For simplex ``i``, ``transform[i,:ndim,:ndim]`` contains\n        inverse of the matrix ``T``, and ``transform[i,ndim,:]``\n        contains the vector ``r``.\n    \n        If the simplex is degenerate or nearly degenerate, its\n        barycentric transform contains NaNs.\n    vertex_to_simplex : ndarray of int, shape (npoints,)\n        Lookup array, from a vertex, to some simplex which it is a part of.\n        If qhull option \"Qc\" was not specified, the list will contain -1\n        for points that are not vertices of the tessellation.\n    convex_hull : ndarray of int, shape (nfaces, ndim)\n        Vertices of facets forming the convex hull of the point set.\n        The array contains the indices of the points belonging to\n        the (N-1)-dimensional facets that form the convex hull\n        of the triangulation.\n    \n        .. note::\n    \n           Computing convex hulls via the Delaunay triangulation is\n           inefficient and subject to increased numerical instability.\n           Use `ConvexHull` instead.\n    coplanar : ndarray of int, shape (ncoplanar, 3)\n        Indices of coplanar points and the corresponding indices of\n        the nearest facet and the nearest vertex.  Coplanar\n        points are input points which were *not* included in the\n        triangulation due to numerical precision issues.\n    \n        If option \"Qc\" is not specified, this list is not computed.\n    \n        .. versionadded:: 0.12.0\n    vertex_neighbor_vertices : tuple of two ndarrays of int; (indptr, indices)\n        Neighboring vertices of vertices. The indices of neighboring\n        vertices of vertex `k` are ``indices[indptr[k]:indptr[k+1]]``.\n    furthest_site\n        True if this was a furthest site triangulation and False if not.\n    \n        .. versionadded:: 1.4.0\n    \n    Raises\n    ------\n    QhullError\n        Raised when Qhull encounters an error condition, such as\n        geometrical degeneracy when options to resolve are not enabled.\n    ValueError\n        Raised if an incompatible array is given as input.\n    \n    Notes\n    -----\n    The tessellation is computed using the Qhull library\n    `Qhull library <http://www.qhull.org/>`__.\n    \n    .. note::\n    \n       Unless you pass in the Qhull option \"QJ\", Qhull does not\n       guarantee that each input point appears as a vertex in the\n       Delaunay triangulation. Omitted points are listed in the\n       `coplanar` attribute.\n    \n    Examples\n    --------\n    Triangulation of a set of points:\n    \n    >>> import numpy as np\n    >>> points = np.array([[0, 0], [0, 1.1], [1, 0], [1, 1]])\n    >>> from scipy.spatial import Delaunay\n    >>> tri = Delaunay(points)\n    \n    We can plot it:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> plt.triplot(points[:,0], points[:,1], tri.simplices)\n    >>> plt.plot(points[:,0], points[:,1], 'o')\n    >>> plt.show()\n    \n    Point indices and coordinates for the two triangles forming the\n    triangulation:\n    \n    >>> tri.simplices\n    array([[2, 3, 0],                 # may vary\n           [3, 1, 0]], dtype=int32)\n    \n    Note that depending on how rounding errors go, the simplices may\n    be in a different order than above.\n    \n    >>> points[tri.simplices]\n    array([[[ 1. ,  0. ],            # may vary\n            [ 1. ,  1. ],\n            [ 0. ,  0. ]],\n           [[ 1. ,  1. ],\n            [ 0. ,  1.1],\n            [ 0. ,  0. ]]])\n    \n    Triangle 0 is the only neighbor of triangle 1, and it's opposite to\n    vertex 1 of triangle 1:\n    \n    >>> tri.neighbors[1]\n    array([-1,  0, -1], dtype=int32)\n    >>> points[tri.simplices[1,1]]\n    array([ 0. ,  1.1])\n    \n    We can find out which triangle points are in:\n    \n    >>> p = np.array([(0.1, 0.2), (1.5, 0.5), (0.5, 1.05)])\n    >>> tri.find_simplex(p)\n    array([ 1, -1, 1], dtype=int32)\n    \n    The returned integers in the array are the indices of the simplex the\n    corresponding point is in. If -1 is returned, the point is in no simplex.\n    Be aware that the shortcut in the following example only works correctly\n    for valid points as invalid points result in -1 which is itself a valid\n    index for the last simplex in the list.\n    \n    >>> p_valids = np.array([(0.1, 0.2), (0.5, 1.05)])\n    >>> tri.simplices[tri.find_simplex(p_valids)]\n    array([[3, 1, 0],                 # may vary\n           [3, 1, 0]], dtype=int32)\n    \n    We can also compute barycentric coordinates in triangle 1 for\n    these points:\n    \n    >>> b = tri.transform[1,:2].dot(np.transpose(p - tri.transform[1,2]))\n    >>> np.c_[np.transpose(b), 1 - b.sum(axis=0)]\n    array([[ 0.1       ,  0.09090909,  0.80909091],\n           [ 1.5       , -0.90909091,  0.40909091],\n           [ 0.5       ,  0.5       ,  0.        ]])\n    \n    The coordinates for the first point are all positive, meaning it\n    is indeed inside the triangle. The third point is on an edge,\n    hence its null third coordinate.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "aa2edd6c265022380330f8b82430c4cc85321a9ac6c4bdc6e66233b27c0aa069",
            "fields": [
                {
                    "id": "eqi0qu_i",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to Delaunay object",
                    "type": "Object:scipy.spatial._qhull.Delaunay",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4_4yrkku",
                    "encoding": "",
                    "name": "points",
                    "value": "",
                    "defaultValue": "",
                    "description": "Coordinates of input points.",
                    "type": "ndarray of double, shape (npoints, ndim)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "628k0wwj",
                    "encoding": "",
                    "name": "furthest_site",
                    "value": false,
                    "defaultValue": false,
                    "description": "True if this was a furthest site triangulation and False if not.\n\n.. versionadded:: 1.4.0",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hui1mh1l",
                    "encoding": "",
                    "name": "incremental",
                    "value": false,
                    "defaultValue": false,
                    "description": "Allow adding new points incrementally. This takes up some additional\nresources.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3j1lmcv6",
                    "encoding": "",
                    "name": "qhull_options",
                    "value": "",
                    "defaultValue": "",
                    "description": "Additional options to pass to Qhull. See Qhull manual for\ndetails. Option \"Qt\" is always enabled.\nDefault:\"Qbb Qc Qz Qx Q12\" for ndim > 4 and \"Qbb Qc Qz Q12\" otherwise.\nIncremental mode omits \"Qz\".\n\n.. versionadded:: 0.12.0",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a0oglfnn",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial._qhull.Delaunay.__init__",
                    "defaultValue": "scipy.spatial._qhull.Delaunay.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "89fu0x7n",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cy3eq6kn",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "_lqtc202",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dmvp3row",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial._qhull.Delaunay",
                    "defaultValue": "scipy.spatial._qhull.Delaunay",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qfldrtt7",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8izzsk2g",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "azwna0id",
            "name": "Delaunay.add_points",
            "description": "add_points(points, restart=False)\n    \n    Process a set of additional new points.\n    \n    Parameters\n    ----------\n    points : ndarray\n        New points to add. The dimensionality should match that of the\n        initial points.\n    restart : bool, optional\n        Whether to restart processing from scratch, rather than\n        adding points incrementally.\n    \n    Raises\n    ------\n    QhullError\n        Raised when Qhull encounters an error condition, such as\n        geometrical degeneracy when options to resolve are not enabled.\n    \n    See Also\n    --------\n    close\n    \n    Notes\n    -----\n    You need to specify ``incremental=True`` when constructing the\n    object to be able to add points incrementally. Incremental addition\n    of points is also not possible after `close` has been called.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "0505847b124e770086fb803a28938d79e95f784a7e668db0d49d987e36566999",
            "fields": [
                {
                    "id": "ii5x5mj4",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.spatial._qhull.Delaunay.add_points object",
                    "type": "Object:scipy.spatial._qhull.Delaunay",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "30x_u4tr",
                    "encoding": "",
                    "name": "points",
                    "value": "",
                    "defaultValue": "",
                    "description": "New points to add. The dimensionality should match that of the\ninitial points.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r07av65w",
                    "encoding": "",
                    "name": "restart",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to restart processing from scratch, rather than\nadding points incrementally.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4bnbsipm",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial._qhull.Delaunay.add_points",
                    "defaultValue": "scipy.spatial._qhull.Delaunay.add_points",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7xfn8h1x",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ad072wgb",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "vpclenkq",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tl4gqbkb",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial._qhull.Delaunay",
                    "defaultValue": "scipy.spatial._qhull.Delaunay",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "724_bd1t",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "upnoxh6h",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "jnxn9py1",
            "name": "Delaunay.close",
            "description": "close()\n    \n    Finish incremental processing.\n    \n    Call this to free resources taken up by Qhull, when using the\n    incremental mode. After calling this, adding more points is no\n    longer possible.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "666a3bdf857e269e25b24d01f0321743fa8c306ea71413b3261cdc9bf7627dec",
            "fields": [
                {
                    "id": "s4udgwft",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.spatial._qhull.Delaunay.close object",
                    "type": "Object:scipy.spatial._qhull.Delaunay",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5of045p8",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial._qhull.Delaunay.close",
                    "defaultValue": "scipy.spatial._qhull.Delaunay.close",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3v_qz227",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l0uhxbaj",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "1t_m7nvj",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n3nmx0_k",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial._qhull.Delaunay",
                    "defaultValue": "scipy.spatial._qhull.Delaunay",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4qdqhuyy",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zkladt2v",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "xex85sq4",
            "name": "Delaunay.find_simplex",
            "description": "find_simplex(self, xi, bruteforce=False, tol=None)\n    \n    Find the simplices containing the given points.\n    \n    Parameters\n    ----------\n    xi : ndarray of double, shape (..., ndim)\n        Points to locate\n    bruteforce : bool, optional\n        Whether to only perform a brute-force search\n    tol : float, optional\n        Tolerance allowed in the inside-triangle check.\n        Default is ``100*eps``.\n    \n    Returns\n    -------\n    i : ndarray of int, same shape as `xi`\n        Indices of simplices containing each point.\n        Points outside the triangulation get the value -1.\n    \n    Notes\n    -----\n    This uses an algorithm adapted from Qhull's ``qh_findbestfacet``,\n    which makes use of the connection between a convex hull and a\n    Delaunay triangulation. After finding the simplex closest to\n    the point in N+1 dimensions, the algorithm falls back to\n    directed search in N dimensions.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d20e8b77bdce174dcb087794062c2b4c6af48797de76d8b0481a2758843e8401",
            "fields": [
                {
                    "id": "p4qt2jlf",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.spatial._qhull.Delaunay.find_simplex object",
                    "type": "Object:scipy.spatial._qhull.Delaunay",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6w8sipw9",
                    "encoding": "",
                    "name": "xi",
                    "value": "",
                    "defaultValue": "",
                    "description": "Points to locate",
                    "type": "ndarray of double, shape (..., ndim)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k7mfxlrz",
                    "encoding": "",
                    "name": "bruteforce",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to only perform a brute-force search",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "re1htzfd",
                    "encoding": "",
                    "name": "tol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Tolerance allowed in the inside-triangle check.\nDefault is ``100*eps``.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zt8stofy",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial._qhull.Delaunay.find_simplex",
                    "defaultValue": "scipy.spatial._qhull.Delaunay.find_simplex",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y02qsx2p",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9zar9fqa",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "pbe2yruy",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tofuefod",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial._qhull.Delaunay",
                    "defaultValue": "scipy.spatial._qhull.Delaunay",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fflts9xl",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fq41azsd",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "g1o0r8v9",
            "name": "Delaunay.lift_points",
            "description": "lift_points(self, x)\n    \n    Lift points to the Qhull paraboloid.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4ed582c6ec5a4a0195e6b2ab4b4771e39d972a7b6fe69591dc6ec82708eabf6b",
            "fields": [
                {
                    "id": "u8ibxi21",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.spatial._qhull.Delaunay.lift_points object",
                    "type": "Object:scipy.spatial._qhull.Delaunay",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_tcyvyz4",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k4bc4ye1",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial._qhull.Delaunay.lift_points",
                    "defaultValue": "scipy.spatial._qhull.Delaunay.lift_points",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_yxuk76q",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8648glkm",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "vavni7ak",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m477db5v",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial._qhull.Delaunay",
                    "defaultValue": "scipy.spatial._qhull.Delaunay",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gvfo534k",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q2eaj9pk",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "b4pir97d",
            "name": "Delaunay.plane_distance",
            "description": "plane_distance(self, xi)\n    \n    Compute hyperplane distances to the point `xi` from all simplices.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "677b60e2176fa07211955e48a45b4ff139caa34e29c484b6f2012bfcf687ad5b",
            "fields": [
                {
                    "id": "1h3v7618",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.spatial._qhull.Delaunay.plane_distance object",
                    "type": "Object:scipy.spatial._qhull.Delaunay",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ibx9jxr6",
                    "encoding": "",
                    "name": "xi",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "631q9ybn",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial._qhull.Delaunay.plane_distance",
                    "defaultValue": "scipy.spatial._qhull.Delaunay.plane_distance",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8abbgyq5",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3brazjq3",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "eh2tzc9z",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fxd63jwe",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial._qhull.Delaunay",
                    "defaultValue": "scipy.spatial._qhull.Delaunay",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sgz566fd",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fpy04b6p",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "vz913m01",
            "name": "HalfspaceIntersection.__init__",
            "description": "\nHalfspaceIntersection(halfspaces, interior_point, incremental=False, qhull_options=None)\n    \n    Halfspace intersections in N dimensions.\n    \n    .. versionadded:: 0.19.0\n    \n    Parameters\n    ----------\n    halfspaces : ndarray of floats, shape (nineq, ndim+1)\n        Stacked Inequalities of the form Ax + b <= 0 in format [A; b]\n    interior_point : ndarray of floats, shape (ndim,)\n        Point clearly inside the region defined by halfspaces. Also called a feasible\n        point, it can be obtained by linear programming.\n    incremental : bool, optional\n        Allow adding new halfspaces incrementally. This takes up some additional\n        resources.\n    qhull_options : str, optional\n        Additional options to pass to Qhull. See Qhull manual\n        for details. (Default: \"Qx\" for ndim > 4 and \"\" otherwise)\n        Option \"H\" is always enabled.\n    \n    Attributes\n    ----------\n    halfspaces : ndarray of double, shape (nineq, ndim+1)\n        Input halfspaces.\n    interior_point :ndarray of floats, shape (ndim,)\n        Input interior point.\n    intersections : ndarray of double, shape (ninter, ndim)\n        Intersections of all halfspaces.\n    dual_points : ndarray of double, shape (nineq, ndim)\n        Dual points of the input halfspaces.\n    dual_facets : list of lists of ints\n        Indices of points forming the (non necessarily simplicial) facets of\n        the dual convex hull.\n    dual_vertices : ndarray of ints, shape (nvertices,)\n        Indices of halfspaces forming the vertices of the dual convex hull.\n        For 2-D convex hulls, the vertices are in counterclockwise order.\n        For other dimensions, they are in input order.\n    dual_equations : ndarray of double, shape (nfacet, ndim+1)\n        [normal, offset] forming the hyperplane equation of the dual facet\n        (see `Qhull documentation <http://www.qhull.org/>`__  for more).\n    dual_area : float\n        Area of the dual convex hull\n    dual_volume : float\n        Volume of the dual convex hull\n    \n    Raises\n    ------\n    QhullError\n        Raised when Qhull encounters an error condition, such as\n        geometrical degeneracy when options to resolve are not enabled.\n    ValueError\n        Raised if an incompatible array is given as input.\n    \n    Notes\n    -----\n    The intersections are computed using the\n    `Qhull library <http://www.qhull.org/>`__.\n    This reproduces the \"qhalf\" functionality of Qhull.\n    \n    Examples\n    --------\n    \n    Halfspace intersection of planes forming some polygon\n    \n    >>> from scipy.spatial import HalfspaceIntersection\n    >>> import numpy as np\n    >>> halfspaces = np.array([[-1, 0., 0.],\n    ...                        [0., -1., 0.],\n    ...                        [2., 1., -4.],\n    ...                        [-0.5, 1., -2.]])\n    >>> feasible_point = np.array([0.5, 0.5])\n    >>> hs = HalfspaceIntersection(halfspaces, feasible_point)\n    \n    Plot halfspaces as filled regions and intersection points:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> fig = plt.figure()\n    >>> ax = fig.add_subplot(1, 1, 1, aspect='equal')\n    >>> xlim, ylim = (-1, 3), (-1, 3)\n    >>> ax.set_xlim(xlim)\n    >>> ax.set_ylim(ylim)\n    >>> x = np.linspace(-1, 3, 100)\n    >>> symbols = ['-', '+', 'x', '*']\n    >>> signs = [0, 0, -1, -1]\n    >>> fmt = {\"color\": None, \"edgecolor\": \"b\", \"alpha\": 0.5}\n    >>> for h, sym, sign in zip(halfspaces, symbols, signs):\n    ...     hlist = h.tolist()\n    ...     fmt[\"hatch\"] = sym\n    ...     if h[1]== 0:\n    ...         ax.axvline(-h[2]/h[0], label='{}x+{}y+{}=0'.format(*hlist))\n    ...         xi = np.linspace(xlim[sign], -h[2]/h[0], 100)\n    ...         ax.fill_between(xi, ylim[0], ylim[1], **fmt)\n    ...     else:\n    ...         ax.plot(x, (-h[2]-h[0]*x)/h[1], label='{}x+{}y+{}=0'.format(*hlist))\n    ...         ax.fill_between(x, (-h[2]-h[0]*x)/h[1], ylim[sign], **fmt)\n    >>> x, y = zip(*hs.intersections)\n    >>> ax.plot(x, y, 'o', markersize=8)\n    \n    By default, qhull does not provide with a way to compute an interior point.\n    This can easily be computed using linear programming. Considering halfspaces\n    of the form :math:`Ax + b \\leq 0`, solving the linear program:\n    \n    .. math::\n    \n        max \\: y\n    \n        s.t. Ax + y ||A_i|| \\leq -b\n    \n    With :math:`A_i` being the rows of A, i.e. the normals to each plane.\n    \n    Will yield a point x that is furthest inside the convex polyhedron. To\n    be precise, it is the center of the largest hypersphere of radius y\n    inscribed in the polyhedron. This point is called the Chebyshev center\n    of the polyhedron (see [1]_ 4.3.1, pp148-149). The\n    equations outputted by Qhull are always normalized.\n    \n    >>> from scipy.optimize import linprog\n    >>> from matplotlib.patches import Circle\n    >>> norm_vector = np.reshape(np.linalg.norm(halfspaces[:, :-1], axis=1),\n    ...     (halfspaces.shape[0], 1))\n    >>> c = np.zeros((halfspaces.shape[1],))\n    >>> c[-1] = -1\n    >>> A = np.hstack((halfspaces[:, :-1], norm_vector))\n    >>> b = - halfspaces[:, -1:]\n    >>> res = linprog(c, A_ub=A, b_ub=b, bounds=(None, None))\n    >>> x = res.x[:-1]\n    >>> y = res.x[-1]\n    >>> circle = Circle(x, radius=y, alpha=0.3)\n    >>> ax.add_patch(circle)\n    >>> plt.legend(bbox_to_anchor=(1.6, 1.0))\n    >>> plt.show()\n    \n    References\n    ----------\n    .. [Qhull] http://www.qhull.org/\n    .. [1] S. Boyd, L. Vandenberghe, Convex Optimization, available\n           at http://stanford.edu/~boyd/cvxbook/",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e246e0e6322356b3fc304c6610ce46fbb62bf9b71cdf0e05f3e6dc48219da038",
            "fields": [
                {
                    "id": "wljlbk04",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to HalfspaceIntersection object",
                    "type": "Object:scipy.spatial._qhull.HalfspaceIntersection",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dqahbanj",
                    "encoding": "",
                    "name": "halfspaces",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input halfspaces.",
                    "type": "ndarray of double, shape (nineq, ndim+1)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zvf_unkz",
                    "encoding": "",
                    "name": "interior_point",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input interior point.",
                    "type": "ndarray of floats, shape (ndim,)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7jio4xrj",
                    "encoding": "",
                    "name": "incremental",
                    "value": false,
                    "defaultValue": false,
                    "description": "Allow adding new halfspaces incrementally. This takes up some additional\nresources.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0xacxifo",
                    "encoding": "",
                    "name": "qhull_options",
                    "value": "",
                    "defaultValue": "",
                    "description": "Additional options to pass to Qhull. See Qhull manual\nfor details. (Default: \"Qx\" for ndim > 4 and \"\" otherwise)\nOption \"H\" is always enabled.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "862jciej",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial._qhull.HalfspaceIntersection.__init__",
                    "defaultValue": "scipy.spatial._qhull.HalfspaceIntersection.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ptbsh_3_",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pfh8_n6s",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "yn18lndu",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m8txa22h",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial._qhull.HalfspaceIntersection",
                    "defaultValue": "scipy.spatial._qhull.HalfspaceIntersection",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mlny7tct",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tzm5v4aj",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "46gmecn8",
            "name": "HalfspaceIntersection.add_halfspaces",
            "description": "add_halfspaces(halfspaces, restart=False)\n    \n    Process a set of additional new halfspaces.\n    \n    Parameters\n    ----------\n    halfspaces : ndarray of double, shape (n_new_ineq, ndim+1)\n        New halfspaces to add. The dimensionality (ndim) should match that of the\n        initial halfspaces. Like in the constructor, these are stacked \n        inequalites of the form Ax + b <= 0 in format [A; b]. The original\n        feasible point must also be feasible for these new inequalities.\n    restart : bool, optional\n        Whether to restart processing from scratch, rather than\n        adding halfspaces incrementally.\n    \n    Raises\n    ------\n    QhullError\n        Raised when Qhull encounters an error condition, such as\n        geometrical degeneracy when options to resolve are not enabled.\n    \n    See Also\n    --------\n    close\n    \n    Notes\n    -----\n    You need to specify ``incremental=True`` when constructing the\n    object to be able to add halfspaces incrementally. Incremental addition\n    of halfspaces is also not possible after `close` has been called.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5ded309bc54a7cbb8631745adfafeb8a9729cc6759fd8dfa8f807242f1a194da",
            "fields": [
                {
                    "id": "e67b78wm",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.spatial._qhull.HalfspaceIntersection.add_halfspaces object",
                    "type": "Object:scipy.spatial._qhull.HalfspaceIntersection",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dahih7ak",
                    "encoding": "",
                    "name": "halfspaces",
                    "value": "",
                    "defaultValue": "",
                    "description": "New halfspaces to add. The dimensionality (ndim) should match that of the\ninitial halfspaces. Like in the constructor, these are stacked \ninequalites of the form Ax + b <= 0 in format [A; b]. The original\nfeasible point must also be feasible for these new inequalities.",
                    "type": "ndarray of double, shape (nnewineq, ndim+1)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yybnq1zi",
                    "encoding": "",
                    "name": "restart",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to restart processing from scratch, rather than\nadding halfspaces incrementally.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7r3ywelb",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial._qhull.HalfspaceIntersection.add_halfspaces",
                    "defaultValue": "scipy.spatial._qhull.HalfspaceIntersection.add_halfspaces",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "af5j8tcf",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sy9745o4",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "1rtdql2x",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ced2tr4i",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial._qhull.HalfspaceIntersection",
                    "defaultValue": "scipy.spatial._qhull.HalfspaceIntersection",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iozctdju",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fl12ykiv",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "fuwj3j3i",
            "name": "HalfspaceIntersection.close",
            "description": "close()\n    \n    Finish incremental processing.\n    \n    Call this to free resources taken up by Qhull, when using the\n    incremental mode. After calling this, adding more points is no\n    longer possible.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "622fb3c2a86ff2d9b5ef45af1d98724627f992c7766450fac263548024478a73",
            "fields": [
                {
                    "id": "sszrnfk_",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.spatial._qhull.HalfspaceIntersection.close object",
                    "type": "Object:scipy.spatial._qhull.HalfspaceIntersection",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f7802me3",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial._qhull.HalfspaceIntersection.close",
                    "defaultValue": "scipy.spatial._qhull.HalfspaceIntersection.close",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "35ws_t9i",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r6lccimx",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "z9j_pppl",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r8lpxke6",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial._qhull.HalfspaceIntersection",
                    "defaultValue": "scipy.spatial._qhull.HalfspaceIntersection",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mdqph2p8",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tjaavjqb",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "ho9gmcts",
            "name": "KDTree.__init__",
            "description": "\nkd-tree for quick nearest-neighbor lookup.\n    \n    This class provides an index into a set of k-dimensional points\n    which can be used to rapidly look up the nearest neighbors of any\n    point.\n    \n    Parameters\n    ----------\n    data : array_like, shape (n,m)\n        The n data points of dimension m to be indexed. This array is\n        not copied unless this is necessary to produce a contiguous\n        array of doubles, and so modifying this data will result in\n        bogus results. The data are also copied if the kd-tree is built\n        with copy_data=True.\n    leafsize : positive int, optional\n        The number of points at which the algorithm switches over to\n        brute-force.  Default: 10.\n    compact_nodes : bool, optional\n        If True, the kd-tree is built to shrink the hyperrectangles to\n        the actual data range. This usually gives a more compact tree that\n        is robust against degenerated input data and gives faster queries\n        at the expense of longer build time. Default: True.\n    copy_data : bool, optional\n        If True the data is always copied to protect the kd-tree against\n        data corruption. Default: False.\n    balanced_tree : bool, optional\n        If True, the median is used to split the hyperrectangles instead of\n        the midpoint. This usually gives a more compact tree and\n        faster queries at the expense of longer build time. Default: True.\n    boxsize : array_like or scalar, optional\n        Apply a m-d toroidal topology to the KDTree.. The topology is generated\n        by :math:`x_i + n_i L_i` where :math:`n_i` are integers and :math:`L_i`\n        is the boxsize along i-th dimension. The input data shall be wrapped\n        into :math:`[0, L_i)`. A ValueError is raised if any of the data is\n        outside of this bound.\n    \n    Notes\n    -----\n    The algorithm used is described in Maneewongvatana and Mount 1999.\n    The general idea is that the kd-tree is a binary tree, each of whose\n    nodes represents an axis-aligned hyperrectangle. Each node specifies\n    an axis and splits the set of points based on whether their coordinate\n    along that axis is greater than or less than a particular value.\n    \n    During construction, the axis and splitting point are chosen by the\n    \"sliding midpoint\" rule, which ensures that the cells do not all\n    become long and thin.\n    \n    The tree can be queried for the r closest neighbors of any given point\n    (optionally returning only those within some maximum distance of the\n    point). It can also be queried, with a substantial gain in efficiency,\n    for the r approximate closest neighbors.\n    \n    For large dimensions (20 is already large) do not expect this to run\n    significantly faster than brute force. High-dimensional nearest-neighbor\n    queries are a substantial open problem in computer science.\n    \n    Attributes\n    ----------\n    data : ndarray, shape (n,m)\n        The n data points of dimension m to be indexed. This array is\n        not copied unless this is necessary to produce a contiguous\n        array of doubles. The data are also copied if the kd-tree is built\n        with ``copy_data=True``.\n    leafsize : positive int\n        The number of points at which the algorithm switches over to\n        brute-force.\n    m : int\n        The dimension of a single data-point.\n    n : int\n        The number of data points.\n    maxes : ndarray, shape (m,)\n        The maximum value in each dimension of the n data points.\n    mins : ndarray, shape (m,)\n        The minimum value in each dimension of the n data points.\n    size : int\n        The number of nodes in the tree.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "14530f2853aac2a2580bd3f69b655106882dcd64c721c686b0c9f67ea69f4e8a",
            "fields": [
                {
                    "id": "kyxxe4uk",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to KDTree object",
                    "type": "Object:scipy.spatial._kdtree.KDTree",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "povx3x5b",
                    "encoding": "",
                    "name": "data",
                    "value": "",
                    "defaultValue": "",
                    "description": "The n data points of dimension m to be indexed. This array is\nnot copied unless this is necessary to produce a contiguous\narray of doubles. The data are also copied if the kd-tree is built\nwith ``copy_data=True``.",
                    "type": "ndarray, shape (n,m)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "itam_urp",
                    "encoding": "",
                    "name": "leafsize",
                    "value": 10,
                    "defaultValue": 10,
                    "description": "The number of points at which the algorithm switches over to\nbrute-force.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a1vjcffe",
                    "encoding": "",
                    "name": "compact_nodes",
                    "value": true,
                    "defaultValue": true,
                    "description": "If True, the kd-tree is built to shrink the hyperrectangles to\nthe actual data range. This usually gives a more compact tree that\nis robust against degenerated input data and gives faster queries\nat the expense of longer build time. Default: True.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "doegcb03",
                    "encoding": "",
                    "name": "copy_data",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True the data is always copied to protect the kd-tree against\ndata corruption. Default: False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cau8revj",
                    "encoding": "",
                    "name": "balanced_tree",
                    "value": true,
                    "defaultValue": true,
                    "description": "If True, the median is used to split the hyperrectangles instead of\nthe midpoint. This usually gives a more compact tree and\nfaster queries at the expense of longer build time. Default: True.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_aaj5hy8",
                    "encoding": "",
                    "name": "boxsize",
                    "value": "",
                    "defaultValue": "",
                    "description": "Apply a m-d toroidal topology to the KDTree.. The topology is generated\nby :math:`x_i + n_i L_i` where :math:`n_i` are integers and :math:`L_i`\nis the boxsize along i-th dimension. The input data shall be wrapped\ninto :math:`[0, L_i)`. A ValueError is raised if any of the data is\noutside of this bound.",
                    "type": "arraylike or scalar",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nzh6clib",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial._kdtree.KDTree.__init__",
                    "defaultValue": "scipy.spatial._kdtree.KDTree.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9ft1t2nh",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vtj_q56s",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "9l_p6737",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "67psw0oo",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial._kdtree.KDTree",
                    "defaultValue": "scipy.spatial._kdtree.KDTree",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9s05tw2v",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "937l8hpg",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "_nbfpi1f",
            "name": "KDTree.count_neighbors",
            "description": "Count how many nearby pairs can be formed.\n    \n    Count the number of pairs ``(x1,x2)`` can be formed, with ``x1`` drawn\n    from ``self`` and ``x2`` drawn from ``other``, and where\n    ``distance(x1, x2, p) <= r``.\n    \n    Data points on ``self`` and ``other`` are optionally weighted by the\n    ``weights`` argument. (See below)\n    \n    This is adapted from the \"two-point correlation\" algorithm described by\n    Gray and Moore [1]_.  See notes for further discussion.\n    \n    Parameters\n    ----------\n    other : KDTree\n        The other tree to draw points from, can be the same tree as self.\n    r : float or one-dimensional array of floats\n        The radius to produce a count for. Multiple radii are searched with\n        a single tree traversal.\n        If the count is non-cumulative(``cumulative=False``), ``r`` defines\n        the edges of the bins, and must be non-decreasing.\n    p : float, optional\n        1<=p<=infinity.\n        Which Minkowski p-norm to use.\n        Default 2.0.\n        A finite large p may cause a ValueError if overflow can occur.\n    weights : tuple, array_like, or None, optional\n        If None, the pair-counting is unweighted.\n        If given as a tuple, weights[0] is the weights of points in\n        ``self``, and weights[1] is the weights of points in ``other``;\n        either can be None to indicate the points are unweighted.\n        If given as an array_like, weights is the weights of points in\n        ``self`` and ``other``. For this to make sense, ``self`` and\n        ``other`` must be the same tree. If ``self`` and ``other`` are two\n        different trees, a ``ValueError`` is raised.\n        Default: None\n    \n        .. versionadded:: 1.6.0\n    cumulative : bool, optional\n        Whether the returned counts are cumulative. When cumulative is set\n        to ``False`` the algorithm is optimized to work with a large number\n        of bins (>10) specified by ``r``. When ``cumulative`` is set to\n        True, the algorithm is optimized to work with a small number of\n        ``r``. Default: True\n    \n        .. versionadded:: 1.6.0\n    \n    Returns\n    -------\n    result : scalar or 1-D array\n        The number of pairs. For unweighted counts, the result is integer.\n        For weighted counts, the result is float.\n        If cumulative is False, ``result[i]`` contains the counts with\n        ``(-inf if i == 0 else r[i-1]) < R <= r[i]``\n    \n    Notes\n    -----\n    Pair-counting is the basic operation used to calculate the two point\n    correlation functions from a data set composed of position of objects.\n    \n    Two point correlation function measures the clustering of objects and\n    is widely used in cosmology to quantify the large scale structure\n    in our Universe, but it may be useful for data analysis in other fields\n    where self-similar assembly of objects also occur.\n    \n    The Landy-Szalay estimator for the two point correlation function of\n    ``D`` measures the clustering signal in ``D``. [2]_\n    \n    For example, given the position of two sets of objects,\n    \n    - objects ``D`` (data) contains the clustering signal, and\n    \n    - objects ``R`` (random) that contains no signal,\n    \n    .. math::\n    \n         \\xi(r) = \\frac{<D, D> - 2 f <D, R> + f^2<R, R>}{f^2<R, R>},\n    \n    where the brackets represents counting pairs between two data sets\n    in a finite bin around ``r`` (distance), corresponding to setting\n    `cumulative=False`, and ``f = float(len(D)) / float(len(R))`` is the\n    ratio between number of objects from data and random.\n    \n    The algorithm implemented here is loosely based on the dual-tree\n    algorithm described in [1]_. We switch between two different\n    pair-cumulation scheme depending on the setting of ``cumulative``.\n    The computing time of the method we use when for\n    ``cumulative == False`` does not scale with the total number of bins.\n    The algorithm for ``cumulative == True`` scales linearly with the\n    number of bins, though it is slightly faster when only\n    1 or 2 bins are used. [5]_.\n    \n    As an extension to the naive pair-counting,\n    weighted pair-counting counts the product of weights instead\n    of number of pairs.\n    Weighted pair-counting is used to estimate marked correlation functions\n    ([3]_, section 2.2),\n    or to properly calculate the average of data per distance bin\n    (e.g. [4]_, section 2.1 on redshift).\n    \n    .. [1] Gray and Moore,\n           \"N-body problems in statistical learning\",\n           Mining the sky, 2000,\n           https://arxiv.org/abs/astro-ph/0012333\n    \n    .. [2] Landy and Szalay,\n           \"Bias and variance of angular correlation functions\",\n           The Astrophysical Journal, 1993,\n           http://adsabs.harvard.edu/abs/1993ApJ...412...64L\n    \n    .. [3] Sheth, Connolly and Skibba,\n           \"Marked correlations in galaxy formation models\",\n           Arxiv e-print, 2005,\n           https://arxiv.org/abs/astro-ph/0511773\n    \n    .. [4] Hawkins, et al.,\n           \"The 2dF Galaxy Redshift Survey: correlation functions,\n           peculiar velocities and the matter density of the Universe\",\n           Monthly Notices of the Royal Astronomical Society, 2002,\n           http://adsabs.harvard.edu/abs/2003MNRAS.346...78H\n    \n    .. [5] https://github.com/scipy/scipy/pull/5647#issuecomment-168474926\n    \n    Examples\n    --------\n    You can count neighbors number between two kd-trees within a distance:\n    \n    >>> import numpy as np\n    >>> from scipy.spatial import KDTree\n    >>> rng = np.random.default_rng()\n    >>> points1 = rng.random((5, 2))\n    >>> points2 = rng.random((5, 2))\n    >>> kd_tree1 = KDTree(points1)\n    >>> kd_tree2 = KDTree(points2)\n    >>> kd_tree1.count_neighbors(kd_tree2, 0.2)\n    1\n    \n    This number is same as the total pair number calculated by\n    `query_ball_tree`:\n    \n    >>> indexes = kd_tree1.query_ball_tree(kd_tree2, r=0.2)\n    >>> sum([len(i) for i in indexes])\n    1",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1f0ea30b5149178aefb5587d2ae4097cd24d98e6f196c37558ca83f1daac90c8",
            "fields": [
                {
                    "id": "7xi04fje",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.spatial._kdtree.KDTree.count_neighbors object",
                    "type": "Object:scipy.spatial._kdtree.KDTree",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6j37_u86",
                    "encoding": "",
                    "name": "other",
                    "value": "",
                    "defaultValue": "",
                    "description": "The other tree to draw points from, can be the same tree as self.",
                    "type": "KDTree",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "unc90huf",
                    "encoding": "",
                    "name": "r",
                    "value": "",
                    "defaultValue": "",
                    "description": "The radius to produce a count for. Multiple radii are searched with\na single tree traversal.\nIf the count is non-cumulative(``cumulative=False``), ``r`` defines\nthe edges of the bins, and must be non-decreasing.",
                    "type": "float or one-dimensional array of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o18qf53j",
                    "encoding": "",
                    "name": "p",
                    "value": 2.0,
                    "defaultValue": 2.0,
                    "description": "1<=p<=infinity.\nWhich Minkowski p-norm to use.\nDefault 2.0.\nA finite large p may cause a ValueError if overflow can occur.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lz77a8jn",
                    "encoding": "",
                    "name": "weights",
                    "value": "",
                    "defaultValue": "",
                    "description": "If None, the pair-counting is unweighted.\nIf given as a tuple, weights[0] is the weights of points in\n``self``, and weights[1] is the weights of points in ``other``;\neither can be None to indicate the points are unweighted.\nIf given as an array_like, weights is the weights of points in\n``self`` and ``other``. For this to make sense, ``self`` and\n``other`` must be the same tree. If ``self`` and ``other`` are two\ndifferent trees, a ``ValueError`` is raised.\nDefault: None\n\n.. versionadded:: 1.6.0",
                    "type": "tuple, arraylike, or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qpd76b23",
                    "encoding": "",
                    "name": "cumulative",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether the returned counts are cumulative. When cumulative is set\nto ``False`` the algorithm is optimized to work with a large number\nof bins (>10) specified by ``r``. When ``cumulative`` is set to\nTrue, the algorithm is optimized to work with a small number of\n``r``. Default: True\n\n.. versionadded:: 1.6.0",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5zfpkj8y",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial._kdtree.KDTree.count_neighbors",
                    "defaultValue": "scipy.spatial._kdtree.KDTree.count_neighbors",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zhey7u8j",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "33650yg0",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "aeu88b33",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ewkhxcna",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial._kdtree.KDTree",
                    "defaultValue": "scipy.spatial._kdtree.KDTree",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x73lzxyh",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "521_3nti",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "vdf7vsht",
            "name": "KDTree.query",
            "description": "Query the kd-tree for nearest neighbors.\n    \n    Parameters\n    ----------\n    x : array_like, last dimension self.m\n        An array of points to query.\n    k : int or Sequence[int], optional\n        Either the number of nearest neighbors to return, or a list of the\n        k-th nearest neighbors to return, starting from 1.\n    eps : nonnegative float, optional\n        Return approximate nearest neighbors; the kth returned value\n        is guaranteed to be no further than (1+eps) times the\n        distance to the real kth nearest neighbor.\n    p : float, 1<=p<=infinity, optional\n        Which Minkowski p-norm to use.\n        1 is the sum-of-absolute-values distance (\"Manhattan\" distance).\n        2 is the usual Euclidean distance.\n        infinity is the maximum-coordinate-difference distance.\n        A large, finite p may cause a ValueError if overflow can occur.\n    distance_upper_bound : nonnegative float, optional\n        Return only neighbors within this distance. This is used to prune\n        tree searches, so if you are doing a series of nearest-neighbor\n        queries, it may help to supply the distance to the nearest neighbor\n        of the most recent point.\n    workers : int, optional\n        Number of workers to use for parallel processing. If -1 is given\n        all CPU threads are used. Default: 1.\n    \n        .. versionadded:: 1.6.0\n    \n    Returns\n    -------\n    d : float or array of floats\n        The distances to the nearest neighbors.\n        If ``x`` has shape ``tuple+(self.m,)``, then ``d`` has shape\n        ``tuple+(k,)``.\n        When k == 1, the last dimension of the output is squeezed.\n        Missing neighbors are indicated with infinite distances.\n        Hits are sorted by distance (nearest first).\n    \n        .. versionchanged:: 1.9.0\n           Previously if ``k=None``, then `d` was an object array of\n           shape ``tuple``, containing lists of distances. This behavior\n           has been removed, use `query_ball_point` instead.\n    \n    i : integer or array of integers\n        The index of each neighbor in ``self.data``.\n        ``i`` is the same shape as d.\n        Missing neighbors are indicated with ``self.n``.\n    \n    Examples\n    --------\n    \n    >>> import numpy as np\n    >>> from scipy.spatial import KDTree\n    >>> x, y = np.mgrid[0:5, 2:8]\n    >>> tree = KDTree(np.c_[x.ravel(), y.ravel()])\n    \n    To query the nearest neighbours and return squeezed result, use\n    \n    >>> dd, ii = tree.query([[0, 0], [2.2, 2.9]], k=1)\n    >>> print(dd, ii, sep='\\n')\n    [2.         0.2236068]\n    [ 0 13]\n    \n    To query the nearest neighbours and return unsqueezed result, use\n    \n    >>> dd, ii = tree.query([[0, 0], [2.2, 2.9]], k=[1])\n    >>> print(dd, ii, sep='\\n')\n    [[2.        ]\n     [0.2236068]]\n    [[ 0]\n     [13]]\n    \n    To query the second nearest neighbours and return unsqueezed result,\n    use\n    \n    >>> dd, ii = tree.query([[0, 0], [2.2, 2.9]], k=[2])\n    >>> print(dd, ii, sep='\\n')\n    [[2.23606798]\n     [0.80622577]]\n    [[ 6]\n     [19]]\n    \n    To query the first and second nearest neighbours, use\n    \n    >>> dd, ii = tree.query([[0, 0], [2.2, 2.9]], k=2)\n    >>> print(dd, ii, sep='\\n')\n    [[2.         2.23606798]\n     [0.2236068  0.80622577]]\n    [[ 0  6]\n     [13 19]]\n    \n    or, be more specific\n    \n    >>> dd, ii = tree.query([[0, 0], [2.2, 2.9]], k=[1, 2])\n    >>> print(dd, ii, sep='\\n')\n    [[2.         2.23606798]\n     [0.2236068  0.80622577]]\n    [[ 0  6]\n     [13 19]]",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b81ba6ef53ba41aa5b43575ce327ebeafefcebdcb5c23dad2b799e928fcdb9e5",
            "fields": [
                {
                    "id": "j4_prkv9",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.spatial._kdtree.KDTree.query object",
                    "type": "Object:scipy.spatial._kdtree.KDTree",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w4nowdte",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "An array of points to query.",
                    "type": "arraylike, last dimension self.m",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0lb6ab1_",
                    "encoding": "",
                    "name": "k",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Either the number of nearest neighbors to return, or a list of the\nk-th nearest neighbors to return, starting from 1.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g3ketb1e",
                    "encoding": "",
                    "name": "eps",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Return approximate nearest neighbors; the kth returned value\nis guaranteed to be no further than (1+eps) times the\ndistance to the real kth nearest neighbor.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pvyyvrjr",
                    "encoding": "",
                    "name": "p",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Which Minkowski p-norm to use.\n1 is the sum-of-absolute-values distance (\"Manhattan\" distance).\n2 is the usual Euclidean distance.\ninfinity is the maximum-coordinate-difference distance.\nA large, finite p may cause a ValueError if overflow can occur.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d6dxd5d7",
                    "encoding": "",
                    "name": "distance_upper_bound",
                    "value": "inf",
                    "defaultValue": "inf",
                    "description": "Return only neighbors within this distance. This is used to prune\ntree searches, so if you are doing a series of nearest-neighbor\nqueries, it may help to supply the distance to the nearest neighbor\nof the most recent point.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ygbqaazc",
                    "encoding": "",
                    "name": "workers",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of workers to use for parallel processing. If -1 is given\nall CPU threads are used. Default: 1.\n\n.. versionadded:: 1.6.0",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2d4_tbqh",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial._kdtree.KDTree.query",
                    "defaultValue": "scipy.spatial._kdtree.KDTree.query",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eou7tuft",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i3mo80lf",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "8idgm09s",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3k2utcv0",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial._kdtree.KDTree",
                    "defaultValue": "scipy.spatial._kdtree.KDTree",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6s5zlx0h",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jjd6uql5",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "b5rkg1ri",
            "name": "KDTree.query_ball_point",
            "description": "Find all points within distance r of point(s) x.\n    \n    Parameters\n    ----------\n    x : array_like, shape tuple + (self.m,)\n        The point or points to search for neighbors of.\n    r : array_like, float\n        The radius of points to return, must broadcast to the length of x.\n    p : float, optional\n        Which Minkowski p-norm to use.  Should be in the range [1, inf].\n        A finite large p may cause a ValueError if overflow can occur.\n    eps : nonnegative float, optional\n        Approximate search. Branches of the tree are not explored if their\n        nearest points are further than ``r / (1 + eps)``, and branches are\n        added in bulk if their furthest points are nearer than\n        ``r * (1 + eps)``.\n    workers : int, optional\n        Number of jobs to schedule for parallel processing. If -1 is given\n        all processors are used. Default: 1.\n    \n        .. versionadded:: 1.6.0\n    return_sorted : bool, optional\n        Sorts returned indices if True and does not sort them if False. If\n        None, does not sort single point queries, but does sort\n        multi-point queries which was the behavior before this option\n        was added.\n    \n        .. versionadded:: 1.6.0\n    return_length : bool, optional\n        Return the number of points inside the radius instead of a list\n        of the indices.\n    \n        .. versionadded:: 1.6.0\n    \n    Returns\n    -------\n    results : list or array of lists\n        If `x` is a single point, returns a list of the indices of the\n        neighbors of `x`. If `x` is an array of points, returns an object\n        array of shape tuple containing lists of neighbors.\n    \n    Notes\n    -----\n    If you have many points whose neighbors you want to find, you may save\n    substantial amounts of time by putting them in a KDTree and using\n    query_ball_tree.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy import spatial\n    >>> x, y = np.mgrid[0:5, 0:5]\n    >>> points = np.c_[x.ravel(), y.ravel()]\n    >>> tree = spatial.KDTree(points)\n    >>> sorted(tree.query_ball_point([2, 0], 1))\n    [5, 10, 11, 15]\n    \n    Query multiple points and plot the results:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> points = np.asarray(points)\n    >>> plt.plot(points[:,0], points[:,1], '.')\n    >>> for results in tree.query_ball_point(([2, 0], [3, 3]), 1):\n    ...     nearby_points = points[results]\n    ...     plt.plot(nearby_points[:,0], nearby_points[:,1], 'o')\n    >>> plt.margins(0.1, 0.1)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "01e628de4dcf63906a4b39a2d4633ef6558dd57f0972a3be5d8deb9a17510343",
            "fields": [
                {
                    "id": "nkglj933",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.spatial._kdtree.KDTree.query_ball_point object",
                    "type": "Object:scipy.spatial._kdtree.KDTree",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rh_s9gve",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "The point or points to search for neighbors of.",
                    "type": "arraylike, shape tuple + (self.m,)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gcvtipsv",
                    "encoding": "",
                    "name": "r",
                    "value": "",
                    "defaultValue": "",
                    "description": "The radius of points to return, must broadcast to the length of x.",
                    "type": "arraylike, float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jp0idujt",
                    "encoding": "",
                    "name": "p",
                    "value": 2.0,
                    "defaultValue": 2.0,
                    "description": "Which Minkowski p-norm to use.  Should be in the range [1, inf].\nA finite large p may cause a ValueError if overflow can occur.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o59wwfrw",
                    "encoding": "",
                    "name": "eps",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Approximate search. Branches of the tree are not explored if their\nnearest points are further than ``r / (1 + eps)``, and branches are\nadded in bulk if their furthest points are nearer than\n``r * (1 + eps)``.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8dr1gqv2",
                    "encoding": "",
                    "name": "workers",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of jobs to schedule for parallel processing. If -1 is given\nall processors are used. Default: 1.\n\n.. versionadded:: 1.6.0",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "823xfhdl",
                    "encoding": "",
                    "name": "return_sorted",
                    "value": "",
                    "defaultValue": "",
                    "description": "Sorts returned indices if True and does not sort them if False. If\nNone, does not sort single point queries, but does sort\nmulti-point queries which was the behavior before this option\nwas added.\n\n.. versionadded:: 1.6.0",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "we6iwp0p",
                    "encoding": "",
                    "name": "return_length",
                    "value": false,
                    "defaultValue": false,
                    "description": "Return the number of points inside the radius instead of a list\nof the indices.\n\n.. versionadded:: 1.6.0",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z_h4mmd0",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial._kdtree.KDTree.query_ball_point",
                    "defaultValue": "scipy.spatial._kdtree.KDTree.query_ball_point",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r24n35pg",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i6edu_rs",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "yfb7kc94",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "znq8d_a8",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial._kdtree.KDTree",
                    "defaultValue": "scipy.spatial._kdtree.KDTree",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zag508o3",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sgneb92j",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "alhcpfv7",
            "name": "KDTree.query_ball_tree",
            "description": "Find all pairs of points between `self` and `other` whose distance is\n    at most r.\n    \n    Parameters\n    ----------\n    other : KDTree instance\n        The tree containing points to search against.\n    r : float\n        The maximum distance, has to be positive.\n    p : float, optional\n        Which Minkowski norm to use.  `p` has to meet the condition\n        ``1 <= p <= infinity``.\n    eps : float, optional\n        Approximate search.  Branches of the tree are not explored\n        if their nearest points are further than ``r/(1+eps)``, and\n        branches are added in bulk if their furthest points are nearer\n        than ``r * (1+eps)``.  `eps` has to be non-negative.\n    \n    Returns\n    -------\n    results : list of lists\n        For each element ``self.data[i]`` of this tree, ``results[i]`` is a\n        list of the indices of its neighbors in ``other.data``.\n    \n    Examples\n    --------\n    You can search all pairs of points between two kd-trees within a distance:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> import numpy as np\n    >>> from scipy.spatial import KDTree\n    >>> rng = np.random.default_rng()\n    >>> points1 = rng.random((15, 2))\n    >>> points2 = rng.random((15, 2))\n    >>> plt.figure(figsize=(6, 6))\n    >>> plt.plot(points1[:, 0], points1[:, 1], \"xk\", markersize=14)\n    >>> plt.plot(points2[:, 0], points2[:, 1], \"og\", markersize=14)\n    >>> kd_tree1 = KDTree(points1)\n    >>> kd_tree2 = KDTree(points2)\n    >>> indexes = kd_tree1.query_ball_tree(kd_tree2, r=0.2)\n    >>> for i in range(len(indexes)):\n    ...     for j in indexes[i]:\n    ...         plt.plot([points1[i, 0], points2[j, 0]],\n    ...             [points1[i, 1], points2[j, 1]], \"-r\")\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "0765d0476f05ebd820ad29887cbf81276e90c4125a1b1dcc872ed719d035cc5a",
            "fields": [
                {
                    "id": "3ndj76bf",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.spatial._kdtree.KDTree.query_ball_tree object",
                    "type": "Object:scipy.spatial._kdtree.KDTree",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "opch192h",
                    "encoding": "",
                    "name": "other",
                    "value": "",
                    "defaultValue": "",
                    "description": "The tree containing points to search against.",
                    "type": "KDTree instance",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g69ep3__",
                    "encoding": "",
                    "name": "r",
                    "value": "",
                    "defaultValue": "",
                    "description": "The maximum distance, has to be positive.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hho0h316",
                    "encoding": "",
                    "name": "p",
                    "value": 2.0,
                    "defaultValue": 2.0,
                    "description": "Which Minkowski norm to use.  `p` has to meet the condition\n``1 <= p <= infinity``.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uyja352s",
                    "encoding": "",
                    "name": "eps",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Approximate search.  Branches of the tree are not explored\nif their nearest points are further than ``r/(1+eps)``, and\nbranches are added in bulk if their furthest points are nearer\nthan ``r * (1+eps)``.  `eps` has to be non-negative.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bs22g0v_",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial._kdtree.KDTree.query_ball_tree",
                    "defaultValue": "scipy.spatial._kdtree.KDTree.query_ball_tree",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ixfhb64j",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4clq9l31",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "zc1vb4j5",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "av37yfcg",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial._kdtree.KDTree",
                    "defaultValue": "scipy.spatial._kdtree.KDTree",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m1041191",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i2al25jc",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "bg79s0_v",
            "name": "KDTree.query_pairs",
            "description": "Find all pairs of points in `self` whose distance is at most r.\n    \n    Parameters\n    ----------\n    r : positive float\n        The maximum distance.\n    p : float, optional\n        Which Minkowski norm to use.  `p` has to meet the condition\n        ``1 <= p <= infinity``.\n    eps : float, optional\n        Approximate search.  Branches of the tree are not explored\n        if their nearest points are further than ``r/(1+eps)``, and\n        branches are added in bulk if their furthest points are nearer\n        than ``r * (1+eps)``.  `eps` has to be non-negative.\n    output_type : string, optional\n        Choose the output container, 'set' or 'ndarray'. Default: 'set'\n    \n        .. versionadded:: 1.6.0\n    \n    Returns\n    -------\n    results : set or ndarray\n        Set of pairs ``(i,j)``, with ``i < j``, for which the corresponding\n        positions are close. If output_type is 'ndarray', an ndarry is\n        returned instead of a set.\n    \n    Examples\n    --------\n    You can search all pairs of points in a kd-tree within a distance:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> import numpy as np\n    >>> from scipy.spatial import KDTree\n    >>> rng = np.random.default_rng()\n    >>> points = rng.random((20, 2))\n    >>> plt.figure(figsize=(6, 6))\n    >>> plt.plot(points[:, 0], points[:, 1], \"xk\", markersize=14)\n    >>> kd_tree = KDTree(points)\n    >>> pairs = kd_tree.query_pairs(r=0.2)\n    >>> for (i, j) in pairs:\n    ...     plt.plot([points[i, 0], points[j, 0]],\n    ...             [points[i, 1], points[j, 1]], \"-r\")\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7ea8f6587de7e8e090a04cac663aaf1724f20fdf40fb51a55749b5b3001c800d",
            "fields": [
                {
                    "id": "h4sl0cu0",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.spatial._kdtree.KDTree.query_pairs object",
                    "type": "Object:scipy.spatial._kdtree.KDTree",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bm0i7925",
                    "encoding": "",
                    "name": "r",
                    "value": "",
                    "defaultValue": "",
                    "description": "The maximum distance.",
                    "type": "positive float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zgmw2cmt",
                    "encoding": "",
                    "name": "p",
                    "value": 2.0,
                    "defaultValue": 2.0,
                    "description": "Which Minkowski norm to use.  `p` has to meet the condition\n``1 <= p <= infinity``.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yswl2afc",
                    "encoding": "",
                    "name": "eps",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Approximate search.  Branches of the tree are not explored\nif their nearest points are further than ``r/(1+eps)``, and\nbranches are added in bulk if their furthest points are nearer\nthan ``r * (1+eps)``.  `eps` has to be non-negative.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sh7rk0_5",
                    "encoding": "",
                    "name": "output_type",
                    "value": "set",
                    "defaultValue": "set",
                    "description": "Choose the output container, 'set' or 'ndarray'. Default: 'set'\n\n.. versionadded:: 1.6.0",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5dq9z0hi",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial._kdtree.KDTree.query_pairs",
                    "defaultValue": "scipy.spatial._kdtree.KDTree.query_pairs",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2u9fy_um",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v0qyq27o",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "dizo_a13",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w03hp6n4",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial._kdtree.KDTree",
                    "defaultValue": "scipy.spatial._kdtree.KDTree",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lsc1wvyq",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "287to411",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "yqpqcn5x",
            "name": "KDTree.sparse_distance_matrix",
            "description": "Compute a sparse distance matrix.\n    \n    Computes a distance matrix between two KDTrees, leaving as zero\n    any distance greater than max_distance.\n    \n    Parameters\n    ----------\n    other : KDTree\n    \n    max_distance : positive float\n    \n    p : float, 1<=p<=infinity\n        Which Minkowski p-norm to use.\n        A finite large p may cause a ValueError if overflow can occur.\n    \n    output_type : string, optional\n        Which container to use for output data. Options: 'dok_matrix',\n        'coo_matrix', 'dict', or 'ndarray'. Default: 'dok_matrix'.\n    \n        .. versionadded:: 1.6.0\n    \n    Returns\n    -------\n    result : dok_matrix, coo_matrix, dict or ndarray\n        Sparse matrix representing the results in \"dictionary of keys\"\n        format. If a dict is returned the keys are (i,j) tuples of indices.\n        If output_type is 'ndarray' a record array with fields 'i', 'j',\n        and 'v' is returned,\n    \n    Examples\n    --------\n    You can compute a sparse distance matrix between two kd-trees:\n    \n    >>> import numpy as np\n    >>> from scipy.spatial import KDTree\n    >>> rng = np.random.default_rng()\n    >>> points1 = rng.random((5, 2))\n    >>> points2 = rng.random((5, 2))\n    >>> kd_tree1 = KDTree(points1)\n    >>> kd_tree2 = KDTree(points2)\n    >>> sdm = kd_tree1.sparse_distance_matrix(kd_tree2, 0.3)\n    >>> sdm.toarray()\n    array([[0.        , 0.        , 0.12295571, 0.        , 0.        ],\n       [0.        , 0.        , 0.        , 0.        , 0.        ],\n       [0.28942611, 0.        , 0.        , 0.2333084 , 0.        ],\n       [0.        , 0.        , 0.        , 0.        , 0.        ],\n       [0.24617575, 0.29571802, 0.26836782, 0.        , 0.        ]])\n    \n    You can check distances above the `max_distance` are zeros:\n    \n    >>> from scipy.spatial import distance_matrix\n    >>> distance_matrix(points1, points2)\n    array([[0.56906522, 0.39923701, 0.12295571, 0.8658745 , 0.79428925],\n       [0.37327919, 0.7225693 , 0.87665969, 0.32580855, 0.75679479],\n       [0.28942611, 0.30088013, 0.6395831 , 0.2333084 , 0.33630734],\n       [0.31994999, 0.72658602, 0.71124834, 0.55396483, 0.90785663],\n       [0.24617575, 0.29571802, 0.26836782, 0.57714465, 0.6473269 ]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d47ab9983dc7ca863e37786adc4e57590c3f200a5a7e2a453c981e3193353461",
            "fields": [
                {
                    "id": "fpdj53z3",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.spatial._kdtree.KDTree.sparse_distance_matrix object",
                    "type": "Object:scipy.spatial._kdtree.KDTree",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b8dv93aa",
                    "encoding": "",
                    "name": "other",
                    "value": "",
                    "defaultValue": "",
                    "description": null,
                    "type": "KDTree",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2ebzlqfp",
                    "encoding": "",
                    "name": "max_distance",
                    "value": "",
                    "defaultValue": "",
                    "description": null,
                    "type": "positive float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n1_3afjx",
                    "encoding": "",
                    "name": "p",
                    "value": 2.0,
                    "defaultValue": 2.0,
                    "description": "Which Minkowski p-norm to use.\nA finite large p may cause a ValueError if overflow can occur.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k9dmmwcn",
                    "encoding": "",
                    "name": "output_type",
                    "value": "dok_matrix",
                    "defaultValue": "dok_matrix",
                    "description": "Which container to use for output data. Options: 'dok_matrix',\n'coo_matrix', 'dict', or 'ndarray'. Default: 'dok_matrix'.\n\n.. versionadded:: 1.6.0",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_gqlvpm1",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial._kdtree.KDTree.sparse_distance_matrix",
                    "defaultValue": "scipy.spatial._kdtree.KDTree.sparse_distance_matrix",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x06ghkxf",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n854l0c2",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "_tokgksq",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ea4l0sst",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial._kdtree.KDTree",
                    "defaultValue": "scipy.spatial._kdtree.KDTree",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m7k0v4qi",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ik0el86i",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "pu8bwt47",
            "name": "QhullError.add_note",
            "description": "Exception.add_note(note) --\nadd a note to the exception",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2993872829180df4426749ba1080f092e204ef87213df83fd92cd85c5a5d60e5",
            "fields": [
                {
                    "id": "vsa8a57o",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.spatial._qhull.QhullError.add_note object",
                    "type": "Object:scipy.spatial._qhull.QhullError",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xz__d5om",
                    "encoding": "",
                    "name": "note",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p7hnajgx",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial._qhull.QhullError.add_note",
                    "defaultValue": "scipy.spatial._qhull.QhullError.add_note",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oefoortx",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fgf945s2",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "566zyfgb",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9572uf8x",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial._qhull.QhullError",
                    "defaultValue": "scipy.spatial._qhull.QhullError",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6ggbo4bt",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qsskgqa3",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "5o4bf8oi",
            "name": "QhullError.with_traceback",
            "description": "Exception.with_traceback(tb) --\nset self.__traceback__ to tb and return self.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7684a0ab9a0b55e770c59b833aad9c1298297563e921f4ae666cc24c101adad9",
            "fields": [
                {
                    "id": "r01i32de",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.spatial._qhull.QhullError.with_traceback object",
                    "type": "Object:scipy.spatial._qhull.QhullError",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1s8_8eu4",
                    "encoding": "",
                    "name": "tb",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g1_qz7jy",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial._qhull.QhullError.with_traceback",
                    "defaultValue": "scipy.spatial._qhull.QhullError.with_traceback",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "otc3ohv7",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dxy_0j4a",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "7fv202t9",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2l92vf_e",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial._qhull.QhullError",
                    "defaultValue": "scipy.spatial._qhull.QhullError",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q3516wat",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o1jcynyc",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "o874t9i2",
            "name": "Rectangle.__init__",
            "description": "Construct a hyperrectangle.\nHyperrectangle class.\n    \n    Represents a Cartesian product of intervals.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8408833a3f6368671af45a3563078fc07783cc3d8d816c67621fe8a99c16cafa",
            "fields": [
                {
                    "id": "w6rf_vk3",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.spatial._kdtree.Rectangle.__init__ object",
                    "type": "Object:scipy.spatial._kdtree.Rectangle",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a9e1ktem",
                    "encoding": "",
                    "name": "maxes",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r0_0yicq",
                    "encoding": "",
                    "name": "mins",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4ijjj17x",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial._kdtree.Rectangle.__init__",
                    "defaultValue": "scipy.spatial._kdtree.Rectangle.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "60mzxc80",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8z49hxcm",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "11_7f_p6",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3d0g5ifr",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial._kdtree.Rectangle",
                    "defaultValue": "scipy.spatial._kdtree.Rectangle",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dcm4w5sg",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ctbcmh6s",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "5eohaghh",
            "name": "Rectangle.max_distance_point",
            "description": "Return the maximum distance between input and points in the hyperrectangle.\n    \n    Parameters\n    ----------\n    x : array_like\n        Input array.\n    p : float, optional\n        Input.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7e7c4ec78bd5ccc3a3f87d8e59ff3ef8b3d2a393f856e6559d30324471bfa95b",
            "fields": [
                {
                    "id": "tpdiysuh",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.spatial._kdtree.Rectangle.max_distance_point object",
                    "type": "Object:scipy.spatial._kdtree.Rectangle",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9_gbnc0z",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pku0rn7y",
                    "encoding": "",
                    "name": "p",
                    "value": 2.0,
                    "defaultValue": 2.0,
                    "description": "Input.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o_ts776n",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial._kdtree.Rectangle.max_distance_point",
                    "defaultValue": "scipy.spatial._kdtree.Rectangle.max_distance_point",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jl93j_jw",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f_gdgr1f",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "bsnin6fr",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rbh0eo5k",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial._kdtree.Rectangle",
                    "defaultValue": "scipy.spatial._kdtree.Rectangle",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mmwm8f_t",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ans903qp",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "m4thsren",
            "name": "Rectangle.max_distance_rectangle",
            "description": "Compute the maximum distance between points in the two hyperrectangles.\n    \n    Parameters\n    ----------\n    other : hyperrectangle\n        Input.\n    p : float, optional\n        Input.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4318148d87d1b016ddea2f35f525af5df5531cb5bd0b241659595c09dfa9391b",
            "fields": [
                {
                    "id": "xkvfa18b",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.spatial._kdtree.Rectangle.max_distance_rectangle object",
                    "type": "Object:scipy.spatial._kdtree.Rectangle",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vumcldtz",
                    "encoding": "",
                    "name": "other",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input.",
                    "type": "hyperrectangle",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p9xx1412",
                    "encoding": "",
                    "name": "p",
                    "value": 2.0,
                    "defaultValue": 2.0,
                    "description": "Input.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "odb1lh_5",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial._kdtree.Rectangle.max_distance_rectangle",
                    "defaultValue": "scipy.spatial._kdtree.Rectangle.max_distance_rectangle",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kktfwlya",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v5jupwua",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "2jgq67g9",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jh3fqbwb",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial._kdtree.Rectangle",
                    "defaultValue": "scipy.spatial._kdtree.Rectangle",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f331spd0",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "62tx50wo",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "mf7clzx3",
            "name": "Rectangle.min_distance_point",
            "description": "Return the minimum distance between input and points in the\n    hyperrectangle.\n    \n    Parameters\n    ----------\n    x : array_like\n        Input.\n    p : float, optional\n        Input.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "41c0d8425a39be672729caa2abf29c7dab10d32f2179d12e0d89a6ce70e2136c",
            "fields": [
                {
                    "id": "8qbxhafx",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.spatial._kdtree.Rectangle.min_distance_point object",
                    "type": "Object:scipy.spatial._kdtree.Rectangle",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_q2gblsz",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zvivqr1t",
                    "encoding": "",
                    "name": "p",
                    "value": 2.0,
                    "defaultValue": 2.0,
                    "description": "Input.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ju39wbaj",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial._kdtree.Rectangle.min_distance_point",
                    "defaultValue": "scipy.spatial._kdtree.Rectangle.min_distance_point",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hfye0xz_",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mcxi7b22",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "nqi0f6mz",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9swlcuv3",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial._kdtree.Rectangle",
                    "defaultValue": "scipy.spatial._kdtree.Rectangle",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "73v2bfqc",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j1_6aa8t",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "x9jtcq9k",
            "name": "Rectangle.min_distance_rectangle",
            "description": "Compute the minimum distance between points in the two hyperrectangles.\n    \n    Parameters\n    ----------\n    other : hyperrectangle\n        Input.\n    p : float\n        Input.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a1b0b3844e5b87e1b9f7881fda2196a9d091236989447bef1c41fed5556423ef",
            "fields": [
                {
                    "id": "_bn1b5tv",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.spatial._kdtree.Rectangle.min_distance_rectangle object",
                    "type": "Object:scipy.spatial._kdtree.Rectangle",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tkb7raeb",
                    "encoding": "",
                    "name": "other",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input.",
                    "type": "hyperrectangle",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qxccy0s5",
                    "encoding": "",
                    "name": "p",
                    "value": 2.0,
                    "defaultValue": 2.0,
                    "description": "Input.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o_4msyu0",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial._kdtree.Rectangle.min_distance_rectangle",
                    "defaultValue": "scipy.spatial._kdtree.Rectangle.min_distance_rectangle",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7wxokh7m",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vojmc_gm",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "bgqe1tdw",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "axdti_tj",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial._kdtree.Rectangle",
                    "defaultValue": "scipy.spatial._kdtree.Rectangle",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jrsb8de7",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "joh7aev4",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "kbwouco5",
            "name": "Rectangle.split",
            "description": "Produce two hyperrectangles by splitting.\n    \n    In general, if you need to compute maximum and minimum\n    distances to the children, it can be done more efficiently\n    by updating the maximum and minimum distances to the parent.\n    \n    Parameters\n    ----------\n    d : int\n        Axis to split hyperrectangle along.\n    split : float\n        Position along axis `d` to split at.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "71a4abef9d0d8ed4e3b2af66ec6e23269a2f71458584e99adda9f8c23739fbc0",
            "fields": [
                {
                    "id": "poc55vwx",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.spatial._kdtree.Rectangle.split object",
                    "type": "Object:scipy.spatial._kdtree.Rectangle",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tzpj7zo4",
                    "encoding": "",
                    "name": "d",
                    "value": "",
                    "defaultValue": "",
                    "description": "Axis to split hyperrectangle along.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h0cgfjrp",
                    "encoding": "",
                    "name": "split",
                    "value": "",
                    "defaultValue": "",
                    "description": "Position along axis `d` to split at.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a6dz524l",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial._kdtree.Rectangle.split",
                    "defaultValue": "scipy.spatial._kdtree.Rectangle.split",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ayrtb_9e",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c64cq9zb",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "1ee0wb3a",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mstt4cw0",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial._kdtree.Rectangle",
                    "defaultValue": "scipy.spatial._kdtree.Rectangle",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_i4gxx38",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "90g0mbvx",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "4thy_185",
            "name": "Rectangle.volume",
            "description": "Total volume.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "191744d6ac0b0cd5e68bf749854f906cce38e31c951ea1877df9a11d554549c6",
            "fields": [
                {
                    "id": "j0m3vt8n",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.spatial._kdtree.Rectangle.volume object",
                    "type": "Object:scipy.spatial._kdtree.Rectangle",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4jzh4qo4",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial._kdtree.Rectangle.volume",
                    "defaultValue": "scipy.spatial._kdtree.Rectangle.volume",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sag43qv9",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ak97u2_0",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "flydw9qo",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8svus6_p",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial._kdtree.Rectangle",
                    "defaultValue": "scipy.spatial._kdtree.Rectangle",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ndilpjj9",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wvlcszj6",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "81mngc8j",
            "name": "SphericalVoronoi.__init__",
            "description": "\nVoronoi diagrams on the surface of a sphere.\n    \n    .. versionadded:: 0.18.0\n    \n    Parameters\n    ----------\n    points : ndarray of floats, shape (npoints, ndim)\n        Coordinates of points from which to construct a spherical\n        Voronoi diagram.\n    radius : float, optional\n        Radius of the sphere (Default: 1)\n    center : ndarray of floats, shape (ndim,)\n        Center of sphere (Default: origin)\n    threshold : float\n        Threshold for detecting duplicate points and\n        mismatches between points and sphere parameters.\n        (Default: 1e-06)\n    \n    Attributes\n    ----------\n    points : double array of shape (npoints, ndim)\n        the points in `ndim` dimensions to generate the Voronoi diagram from\n    radius : double\n        radius of the sphere\n    center : double array of shape (ndim,)\n        center of the sphere\n    vertices : double array of shape (nvertices, ndim)\n        Voronoi vertices corresponding to points\n    regions : list of list of integers of shape (npoints, _ )\n        the n-th entry is a list consisting of the indices\n        of the vertices belonging to the n-th point in points\n    \n    Methods\n    -------\n    calculate_areas\n        Calculates the areas of the Voronoi regions. For 2D point sets, the\n        regions are circular arcs. The sum of the areas is ``2 * pi * radius``.\n        For 3D point sets, the regions are spherical polygons. The sum of the\n        areas is ``4 * pi * radius**2``.\n    \n    Raises\n    ------\n    ValueError\n        If there are duplicates in `points`.\n        If the provided `radius` is not consistent with `points`.\n    \n    Notes\n    -----\n    The spherical Voronoi diagram algorithm proceeds as follows. The Convex\n    Hull of the input points (generators) is calculated, and is equivalent to\n    their Delaunay triangulation on the surface of the sphere [Caroli]_.\n    The Convex Hull neighbour information is then used to\n    order the Voronoi region vertices around each generator. The latter\n    approach is substantially less sensitive to floating point issues than\n    angle-based methods of Voronoi region vertex sorting.\n    \n    Empirical assessment of spherical Voronoi algorithm performance suggests\n    quadratic time complexity (loglinear is optimal, but algorithms are more\n    challenging to implement).\n    \n    References\n    ----------\n    .. [Caroli] Caroli et al. Robust and Efficient Delaunay triangulations of\n                points on or close to a sphere. Research Report RR-7004, 2009.\n    \n    .. [VanOosterom] Van Oosterom and Strackee. The solid angle of a plane\n                     triangle. IEEE Transactions on Biomedical Engineering,\n                     2, 1983, pp 125--126.\n    \n    See Also\n    --------\n    Voronoi : Conventional Voronoi diagrams in N dimensions.\n    \n    Examples\n    --------\n    Do some imports and take some points on a cube:\n    \n    >>> import numpy as np\n    >>> import matplotlib.pyplot as plt\n    >>> from scipy.spatial import SphericalVoronoi, geometric_slerp\n    >>> from mpl_toolkits.mplot3d import proj3d\n    >>> # set input data\n    >>> points = np.array([[0, 0, 1], [0, 0, -1], [1, 0, 0],\n    ...                    [0, 1, 0], [0, -1, 0], [-1, 0, 0], ])\n    \n    Calculate the spherical Voronoi diagram:\n    \n    >>> radius = 1\n    >>> center = np.array([0, 0, 0])\n    >>> sv = SphericalVoronoi(points, radius, center)\n    \n    Generate plot:\n    \n    >>> # sort vertices (optional, helpful for plotting)\n    >>> sv.sort_vertices_of_regions()\n    >>> t_vals = np.linspace(0, 1, 2000)\n    >>> fig = plt.figure()\n    >>> ax = fig.add_subplot(111, projection='3d')\n    >>> # plot the unit sphere for reference (optional)\n    >>> u = np.linspace(0, 2 * np.pi, 100)\n    >>> v = np.linspace(0, np.pi, 100)\n    >>> x = np.outer(np.cos(u), np.sin(v))\n    >>> y = np.outer(np.sin(u), np.sin(v))\n    >>> z = np.outer(np.ones(np.size(u)), np.cos(v))\n    >>> ax.plot_surface(x, y, z, color='y', alpha=0.1)\n    >>> # plot generator points\n    >>> ax.scatter(points[:, 0], points[:, 1], points[:, 2], c='b')\n    >>> # plot Voronoi vertices\n    >>> ax.scatter(sv.vertices[:, 0], sv.vertices[:, 1], sv.vertices[:, 2],\n    ...                    c='g')\n    >>> # indicate Voronoi regions (as Euclidean polygons)\n    >>> for region in sv.regions:\n    ...    n = len(region)\n    ...    for i in range(n):\n    ...        start = sv.vertices[region][i]\n    ...        end = sv.vertices[region][(i + 1) % n]\n    ...        result = geometric_slerp(start, end, t_vals)\n    ...        ax.plot(result[..., 0],\n    ...                result[..., 1],\n    ...                result[..., 2],\n    ...                c='k')\n    >>> ax.azim = 10\n    >>> ax.elev = 40\n    >>> _ = ax.set_xticks([])\n    >>> _ = ax.set_yticks([])\n    >>> _ = ax.set_zticks([])\n    >>> fig.set_size_inches(4, 4)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "450edb2d5b98da8f1d65b0fe817d89abc1085444d65466388838a6ec9a5e9066",
            "fields": [
                {
                    "id": "ijjq3gxv",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to SphericalVoronoi object",
                    "type": "Object:scipy.spatial._spherical_voronoi.SphericalVoronoi",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "crpjugyq",
                    "encoding": "",
                    "name": "points",
                    "value": "",
                    "defaultValue": "",
                    "description": "the points in `ndim` dimensions to generate the Voronoi diagram from",
                    "type": "double array of shape (npoints, ndim)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t03bblwj",
                    "encoding": "",
                    "name": "radius",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "radius of the sphere",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "demjhxqz",
                    "encoding": "",
                    "name": "center",
                    "value": "",
                    "defaultValue": "",
                    "description": "center of the sphere",
                    "type": "double array of shape (ndim,)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6csq6v_n",
                    "encoding": "",
                    "name": "threshold",
                    "value": 1e-06,
                    "defaultValue": 1e-06,
                    "description": "Threshold for detecting duplicate points and\nmismatches between points and sphere parameters.\n(Default: 1e-06)",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c_p8cwf9",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial._spherical_voronoi.SphericalVoronoi.__init__",
                    "defaultValue": "scipy.spatial._spherical_voronoi.SphericalVoronoi.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ovtxj5ts",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uaxtbwae",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "6fx6zpq2",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g0zbah2z",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial._spherical_voronoi.SphericalVoronoi",
                    "defaultValue": "scipy.spatial._spherical_voronoi.SphericalVoronoi",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fv7f412t",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fqk5b57h",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "3uhl4jad",
            "name": "SphericalVoronoi.calculate_areas",
            "description": "Calculates the areas of the Voronoi regions.\n    \n    For 2D point sets, the regions are circular arcs. The sum of the areas\n    is ``2 * pi * radius``.\n    \n    For 3D point sets, the regions are spherical polygons. The sum of the\n    areas is ``4 * pi * radius**2``.\n    \n    .. versionadded:: 1.5.0\n    \n    Returns\n    -------\n    areas : double array of shape (npoints,)\n        The areas of the Voronoi regions.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f9b038aa18fee7034a21b3bc48fb59a116a4bb6fd25ee9fceb116d4ceb0085f0",
            "fields": [
                {
                    "id": "fxx17ano",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.spatial._spherical_voronoi.SphericalVoronoi.calculate_areas object",
                    "type": "Object:scipy.spatial._spherical_voronoi.SphericalVoronoi",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "13cvr6ci",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial._spherical_voronoi.SphericalVoronoi.calculate_areas",
                    "defaultValue": "scipy.spatial._spherical_voronoi.SphericalVoronoi.calculate_areas",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t9x6gadb",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mkflthqx",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ot_uxrv3",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b6ngj65j",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial._spherical_voronoi.SphericalVoronoi",
                    "defaultValue": "scipy.spatial._spherical_voronoi.SphericalVoronoi",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mwt_unes",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wn2hfrwv",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "fkulj980",
            "name": "SphericalVoronoi.sort_vertices_of_regions",
            "description": "Sort indices of the vertices to be (counter-)clockwise ordered.\n    \n    Raises\n    ------\n    TypeError\n        If the points are not three-dimensional.\n    \n    Notes\n    -----\n    For each region in regions, it sorts the indices of the Voronoi\n    vertices such that the resulting points are in a clockwise or\n    counterclockwise order around the generator point.\n    \n    This is done as follows: Recall that the n-th region in regions\n    surrounds the n-th generator in points and that the k-th\n    Voronoi vertex in vertices is the circumcenter of the k-th triangle\n    in self._simplices.  For each region n, we choose the first triangle\n    (=Voronoi vertex) in self._simplices and a vertex of that triangle\n    not equal to the center n. These determine a unique neighbor of that\n    triangle, which is then chosen as the second triangle. The second\n    triangle will have a unique vertex not equal to the current vertex or\n    the center. This determines a unique neighbor of the second triangle,\n    which is then chosen as the third triangle and so forth. We proceed\n    through all the triangles (=Voronoi vertices) belonging to the\n    generator in points and obtain a sorted version of the vertices\n    of its surrounding region.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d67c5ede1ff0ea4cb17a0388d2ce71e19cc6cd40642f8b788a889d7bd4e509c3",
            "fields": [
                {
                    "id": "9vw34tfc",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.spatial._spherical_voronoi.SphericalVoronoi.sort_vertices_of_regions object",
                    "type": "Object:scipy.spatial._spherical_voronoi.SphericalVoronoi",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lr54jw85",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial._spherical_voronoi.SphericalVoronoi.sort_vertices_of_regions",
                    "defaultValue": "scipy.spatial._spherical_voronoi.SphericalVoronoi.sort_vertices_of_regions",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ald6iplm",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4m198lym",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "z8hq3jlb",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6zj446x1",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial._spherical_voronoi.SphericalVoronoi",
                    "defaultValue": "scipy.spatial._spherical_voronoi.SphericalVoronoi",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n6qzsn_e",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "234p8lqi",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "tkaejyxc",
            "name": "Voronoi.__init__",
            "description": "\nVoronoi(points, furthest_site=False, incremental=False, qhull_options=None)\n    \n    Voronoi diagrams in N dimensions.\n    \n    .. versionadded:: 0.12.0\n    \n    Parameters\n    ----------\n    points : ndarray of floats, shape (npoints, ndim)\n        Coordinates of points to construct a Voronoi diagram from\n    furthest_site : bool, optional\n        Whether to compute a furthest-site Voronoi diagram. Default: False\n    incremental : bool, optional\n        Allow adding new points incrementally. This takes up some additional\n        resources.\n    qhull_options : str, optional\n        Additional options to pass to Qhull. See Qhull manual\n        for details. (Default: \"Qbb Qc Qz Qx\" for ndim > 4 and\n        \"Qbb Qc Qz\" otherwise. Incremental mode omits \"Qz\".)\n    \n    Attributes\n    ----------\n    points : ndarray of double, shape (npoints, ndim)\n        Coordinates of input points.\n    vertices : ndarray of double, shape (nvertices, ndim)\n        Coordinates of the Voronoi vertices.\n    ridge_points : ndarray of ints, shape ``(nridges, 2)``\n        Indices of the points between which each Voronoi ridge lies.\n    ridge_vertices : list of list of ints, shape ``(nridges, *)``\n        Indices of the Voronoi vertices forming each Voronoi ridge.\n    regions : list of list of ints, shape ``(nregions, *)``\n        Indices of the Voronoi vertices forming each Voronoi region.\n        -1 indicates vertex outside the Voronoi diagram.\n        When qhull option \"Qz\" was specified, an empty sublist\n        represents the Voronoi region for a point at infinity that\n        was added internally.\n    point_region : array of ints, shape (npoints)\n        Index of the Voronoi region for each input point.\n        If qhull option \"Qc\" was not specified, the list will contain -1\n        for points that are not associated with a Voronoi region.\n        If qhull option \"Qz\" was specified, there will be one less\n        element than the number of regions because an extra point\n        at infinity is added internally to facilitate computation.\n    furthest_site\n        True if this was a furthest site triangulation and False if not.\n    \n        .. versionadded:: 1.4.0\n    \n    Raises\n    ------\n    QhullError\n        Raised when Qhull encounters an error condition, such as\n        geometrical degeneracy when options to resolve are not enabled.\n    ValueError\n        Raised if an incompatible array is given as input.\n    \n    Notes\n    -----\n    The Voronoi diagram is computed using the\n    `Qhull library <http://www.qhull.org/>`__.\n    \n    Examples\n    --------\n    Voronoi diagram for a set of point:\n    \n    >>> import numpy as np\n    >>> points = np.array([[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2],\n    ...                    [2, 0], [2, 1], [2, 2]])\n    >>> from scipy.spatial import Voronoi, voronoi_plot_2d\n    >>> vor = Voronoi(points)\n    \n    Plot it:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> fig = voronoi_plot_2d(vor)\n    >>> plt.show()\n    \n    The Voronoi vertices:\n    \n    >>> vor.vertices\n    array([[0.5, 0.5],\n           [0.5, 1.5],\n           [1.5, 0.5],\n           [1.5, 1.5]])\n    \n    There is a single finite Voronoi region, and four finite Voronoi\n    ridges:\n    \n    >>> vor.regions\n    [[], [-1, 0], [-1, 1], [1, -1, 0], [3, -1, 2], [-1, 3], [-1, 2], [0, 1, 3, 2], [2, -1, 0], [3, -1, 1]]\n    >>> vor.ridge_vertices\n    [[-1, 0], [-1, 0], [-1, 1], [-1, 1], [0, 1], [-1, 3], [-1, 2], [2, 3], [-1, 3], [-1, 2], [1, 3], [0, 2]]\n    \n    The ridges are perpendicular between lines drawn between the following\n    input points:\n    \n    >>> vor.ridge_points\n    array([[0, 3],\n           [0, 1],\n           [2, 5],\n           [2, 1],\n           [1, 4],\n           [7, 8],\n           [7, 6],\n           [7, 4],\n           [8, 5],\n           [6, 3],\n           [4, 5],\n           [4, 3]], dtype=int32)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4e117fd4eda603b5dc9e00ad74060b7bf83f4b247c146a1047bb51c12708fe20",
            "fields": [
                {
                    "id": "uns_9fqk",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to Voronoi object",
                    "type": "Object:scipy.spatial._qhull.Voronoi",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mljg27wq",
                    "encoding": "",
                    "name": "points",
                    "value": "",
                    "defaultValue": "",
                    "description": "Coordinates of input points.",
                    "type": "ndarray of double, shape (npoints, ndim)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bka0jlcb",
                    "encoding": "",
                    "name": "furthest_site",
                    "value": false,
                    "defaultValue": false,
                    "description": "True if this was a furthest site triangulation and False if not.\n\n.. versionadded:: 1.4.0",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eomqk9sc",
                    "encoding": "",
                    "name": "incremental",
                    "value": false,
                    "defaultValue": false,
                    "description": "Allow adding new points incrementally. This takes up some additional\nresources.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3c0lzwdj",
                    "encoding": "",
                    "name": "qhull_options",
                    "value": "",
                    "defaultValue": "",
                    "description": "Additional options to pass to Qhull. See Qhull manual\nfor details. (Default: \"Qbb Qc Qz Qx\" for ndim > 4 and\n\"Qbb Qc Qz\" otherwise. Incremental mode omits \"Qz\".)",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_8xk5tm2",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial._qhull.Voronoi.__init__",
                    "defaultValue": "scipy.spatial._qhull.Voronoi.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ajun6fjc",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q0ipaekt",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "c1rxndlb",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ku7j43_0",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial._qhull.Voronoi",
                    "defaultValue": "scipy.spatial._qhull.Voronoi",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "555_f5aq",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kkibynsi",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "in4jqniv",
            "name": "Voronoi.add_points",
            "description": "add_points(points, restart=False)\n    \n    Process a set of additional new points.\n    \n    Parameters\n    ----------\n    points : ndarray\n        New points to add. The dimensionality should match that of the\n        initial points.\n    restart : bool, optional\n        Whether to restart processing from scratch, rather than\n        adding points incrementally.\n    \n    Raises\n    ------\n    QhullError\n        Raised when Qhull encounters an error condition, such as\n        geometrical degeneracy when options to resolve are not enabled.\n    \n    See Also\n    --------\n    close\n    \n    Notes\n    -----\n    You need to specify ``incremental=True`` when constructing the\n    object to be able to add points incrementally. Incremental addition\n    of points is also not possible after `close` has been called.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7c676fce6fb10c6559a26b50eadb9b07c4679271818f3b2a1ba8f8b860f94d1f",
            "fields": [
                {
                    "id": "j2nk7bb7",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.spatial._qhull.Voronoi.add_points object",
                    "type": "Object:scipy.spatial._qhull.Voronoi",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "icrmehfp",
                    "encoding": "",
                    "name": "points",
                    "value": "",
                    "defaultValue": "",
                    "description": "New points to add. The dimensionality should match that of the\ninitial points.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cm80f21a",
                    "encoding": "",
                    "name": "restart",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to restart processing from scratch, rather than\nadding points incrementally.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jlojottb",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial._qhull.Voronoi.add_points",
                    "defaultValue": "scipy.spatial._qhull.Voronoi.add_points",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "59z_if0s",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kgjl3abg",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "hz7g449i",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xfa8xhvp",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial._qhull.Voronoi",
                    "defaultValue": "scipy.spatial._qhull.Voronoi",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jt0kfkmm",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kt6_0ntc",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "wbxjjr69",
            "name": "Voronoi.close",
            "description": "close()\n    \n    Finish incremental processing.\n    \n    Call this to free resources taken up by Qhull, when using the\n    incremental mode. After calling this, adding more points is no\n    longer possible.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9665ccfe9f617ebd4fe25ec2bcf94fe850811fd3056a5baa9ae93c4eaeac86c1",
            "fields": [
                {
                    "id": "ackvb2_2",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.spatial._qhull.Voronoi.close object",
                    "type": "Object:scipy.spatial._qhull.Voronoi",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "virbepwp",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial._qhull.Voronoi.close",
                    "defaultValue": "scipy.spatial._qhull.Voronoi.close",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5s9wjcam",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mal9a72j",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "9geh8lqp",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pifi5msj",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial._qhull.Voronoi",
                    "defaultValue": "scipy.spatial._qhull.Voronoi",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "70enye7f",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p31quzp6",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "2__qqnov",
            "name": "cKDTree.__init__",
            "description": "\ncKDTree(data, leafsize=16, compact_nodes=True, copy_data=False,\n            balanced_tree=True, boxsize=None)\n    \n    kd-tree for quick nearest-neighbor lookup\n    \n    This class provides an index into a set of k-dimensional points\n    which can be used to rapidly look up the nearest neighbors of any\n    point.\n    \n    .. note::\n       `cKDTree` is functionally identical to `KDTree`. Prior to SciPy\n       v1.6.0, `cKDTree` had better performance and slightly different\n       functionality but now the two names exist only for\n       backward-compatibility reasons. If compatibility with SciPy < 1.6 is not\n       a concern, prefer `KDTree`.\n    \n    Parameters\n    ----------\n    data : array_like, shape (n,m)\n        The n data points of dimension m to be indexed. This array is\n        not copied unless this is necessary to produce a contiguous\n        array of doubles, and so modifying this data will result in\n        bogus results. The data are also copied if the kd-tree is built\n        with copy_data=True.\n    leafsize : positive int, optional\n        The number of points at which the algorithm switches over to\n        brute-force. Default: 16.\n    compact_nodes : bool, optional\n        If True, the kd-tree is built to shrink the hyperrectangles to\n        the actual data range. This usually gives a more compact tree that\n        is robust against degenerated input data and gives faster queries\n        at the expense of longer build time. Default: True.\n    copy_data : bool, optional\n        If True the data is always copied to protect the kd-tree against\n        data corruption. Default: False.\n    balanced_tree : bool, optional\n        If True, the median is used to split the hyperrectangles instead of\n        the midpoint. This usually gives a more compact tree and\n        faster queries at the expense of longer build time. Default: True.\n    boxsize : array_like or scalar, optional\n        Apply a m-d toroidal topology to the KDTree.. The topology is generated\n        by :math:`x_i + n_i L_i` where :math:`n_i` are integers and :math:`L_i`\n        is the boxsize along i-th dimension. The input data shall be wrapped\n        into :math:`[0, L_i)`. A ValueError is raised if any of the data is\n        outside of this bound.\n    \n    Notes\n    -----\n    The algorithm used is described in Maneewongvatana and Mount 1999.\n    The general idea is that the kd-tree is a binary tree, each of whose\n    nodes represents an axis-aligned hyperrectangle. Each node specifies\n    an axis and splits the set of points based on whether their coordinate\n    along that axis is greater than or less than a particular value.\n    \n    During construction, the axis and splitting point are chosen by the\n    \"sliding midpoint\" rule, which ensures that the cells do not all\n    become long and thin.\n    \n    The tree can be queried for the r closest neighbors of any given point\n    (optionally returning only those within some maximum distance of the\n    point). It can also be queried, with a substantial gain in efficiency,\n    for the r approximate closest neighbors.\n    \n    For large dimensions (20 is already large) do not expect this to run\n    significantly faster than brute force. High-dimensional nearest-neighbor\n    queries are a substantial open problem in computer science.\n    \n    Attributes\n    ----------\n    data : ndarray, shape (n,m)\n        The n data points of dimension m to be indexed. This array is\n        not copied unless this is necessary to produce a contiguous\n        array of doubles. The data are also copied if the kd-tree is built\n        with ``copy_data=True``.\n    leafsize : positive int\n        The number of points at which the algorithm switches over to\n        brute-force.\n    m : int\n        The dimension of a single data-point.\n    n : int\n        The number of data points.\n    maxes : ndarray, shape (m,)\n        The maximum value in each dimension of the n data points.\n    mins : ndarray, shape (m,)\n        The minimum value in each dimension of the n data points.\n    tree : object, class cKDTreeNode\n        This attribute exposes a Python view of the root node in the cKDTree\n        object. A full Python view of the kd-tree is created dynamically\n        on the first access. This attribute allows you to create your own\n        query functions in Python.\n    size : int\n        The number of nodes in the tree.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "526dda614579a7fe0b1dfb2d636082cb7438295300ecbf9862732869113b8df6",
            "fields": [
                {
                    "id": "a47ocxsq",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to cKDTree object",
                    "type": "Object:scipy.spatial._ckdtree.cKDTree",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "id": "sviiglgw",
                    "encoding": "",
                    "name": "args",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z03qw6s8",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o9wekcwv",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial._ckdtree.cKDTree.__init__",
                    "defaultValue": "scipy.spatial._ckdtree.cKDTree.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ijfhp81i",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xc4k4ikm",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "uiyw6iae",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7gndr7_6",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial._ckdtree.cKDTree",
                    "defaultValue": "scipy.spatial._ckdtree.cKDTree",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pa2w8i8v",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wv5lsx_o",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "rsr0zvdl",
            "name": "cKDTree.count_neighbors",
            "description": "count_neighbors(self, other, r, p=2., weights=None, cumulative=True)\n    \n    Count how many nearby pairs can be formed.\n    \n    Count the number of pairs ``(x1,x2)`` can be formed, with ``x1`` drawn\n    from ``self`` and ``x2`` drawn from ``other``, and where\n    ``distance(x1, x2, p) <= r``.\n    \n    Data points on ``self`` and ``other`` are optionally weighted by the\n    ``weights`` argument. (See below)\n    \n    This is adapted from the \"two-point correlation\" algorithm described by\n    Gray and Moore [1]_.  See notes for further discussion.\n    \n    Parameters\n    ----------\n    other : cKDTree instance\n        The other tree to draw points from, can be the same tree as self.\n    r : float or one-dimensional array of floats\n        The radius to produce a count for. Multiple radii are searched with\n        a single tree traversal.\n        If the count is non-cumulative(``cumulative=False``), ``r`` defines\n        the edges of the bins, and must be non-decreasing.\n    p : float, optional\n        1<=p<=infinity.\n        Which Minkowski p-norm to use.\n        Default 2.0.\n        A finite large p may cause a ValueError if overflow can occur.\n    weights : tuple, array_like, or None, optional\n        If None, the pair-counting is unweighted.\n        If given as a tuple, weights[0] is the weights of points in ``self``, and\n        weights[1] is the weights of points in ``other``; either can be None to\n        indicate the points are unweighted.\n        If given as an array_like, weights is the weights of points in ``self``\n        and ``other``. For this to make sense, ``self`` and ``other`` must be the\n        same tree. If ``self`` and ``other`` are two different trees, a ``ValueError``\n        is raised.\n        Default: None\n    cumulative : bool, optional\n        Whether the returned counts are cumulative. When cumulative is set to ``False``\n        the algorithm is optimized to work with a large number of bins (>10) specified\n        by ``r``. When ``cumulative`` is set to True, the algorithm is optimized to work\n        with a small number of ``r``. Default: True\n    \n    Returns\n    -------\n    result : scalar or 1-D array\n        The number of pairs. For unweighted counts, the result is integer.\n        For weighted counts, the result is float.\n        If cumulative is False, ``result[i]`` contains the counts with\n        ``(-inf if i == 0 else r[i-1]) < R <= r[i]``\n    \n    Notes\n    -----\n    Pair-counting is the basic operation used to calculate the two point\n    correlation functions from a data set composed of position of objects.\n    \n    Two point correlation function measures the clustering of objects and\n    is widely used in cosmology to quantify the large scale structure\n    in our Universe, but it may be useful for data analysis in other fields\n    where self-similar assembly of objects also occur.\n    \n    The Landy-Szalay estimator for the two point correlation function of\n    ``D`` measures the clustering signal in ``D``. [2]_\n    \n    For example, given the position of two sets of objects,\n    \n    - objects ``D`` (data) contains the clustering signal, and\n    \n    - objects ``R`` (random) that contains no signal,\n    \n    .. math::\n    \n         \\xi(r) = \\frac{<D, D> - 2 f <D, R> + f^2<R, R>}{f^2<R, R>},\n    \n    where the brackets represents counting pairs between two data sets\n    in a finite bin around ``r`` (distance), corresponding to setting\n    ``cumulative=False``, and ``f = float(len(D)) / float(len(R))`` is the\n    ratio between number of objects from data and random.\n    \n    The algorithm implemented here is loosely based on the dual-tree\n    algorithm described in [1]_. We switch between two different\n    pair-cumulation scheme depending on the setting of ``cumulative``.\n    The computing time of the method we use when for\n    ``cumulative == False`` does not scale with the total number of bins.\n    The algorithm for ``cumulative == True`` scales linearly with the\n    number of bins, though it is slightly faster when only\n    1 or 2 bins are used. [5]_.\n    \n    As an extension to the naive pair-counting,\n    weighted pair-counting counts the product of weights instead\n    of number of pairs.\n    Weighted pair-counting is used to estimate marked correlation functions\n    ([3]_, section 2.2),\n    or to properly calculate the average of data per distance bin\n    (e.g. [4]_, section 2.1 on redshift).\n    \n    .. [1] Gray and Moore,\n           \"N-body problems in statistical learning\",\n           Mining the sky, 2000, :arxiv:`astro-ph/0012333`\n    \n    .. [2] Landy and Szalay,\n           \"Bias and variance of angular correlation functions\",\n           The Astrophysical Journal, 1993, :doi:`10.1086/172900`\n    \n    .. [3] Sheth, Connolly and Skibba,\n           \"Marked correlations in galaxy formation models\",\n           2005, :arxiv:`astro-ph/0511773`\n    \n    .. [4] Hawkins, et al.,\n           \"The 2dF Galaxy Redshift Survey: correlation functions,\n           peculiar velocities and the matter density of the Universe\",\n           Monthly Notices of the Royal Astronomical Society, 2002,\n           :doi:`10.1046/j.1365-2966.2003.07063.x`\n    \n    .. [5] https://github.com/scipy/scipy/pull/5647#issuecomment-168474926\n    \n    Examples\n    --------\n    You can count neighbors number between two kd-trees within a distance:\n    \n    >>> import numpy as np\n    >>> from scipy.spatial import cKDTree\n    >>> rng = np.random.default_rng()\n    >>> points1 = rng.random((5, 2))\n    >>> points2 = rng.random((5, 2))\n    >>> kd_tree1 = cKDTree(points1)\n    >>> kd_tree2 = cKDTree(points2)\n    >>> kd_tree1.count_neighbors(kd_tree2, 0.2)\n    1\n    \n    This number is same as the total pair number calculated by\n    `query_ball_tree`:\n    \n    >>> indexes = kd_tree1.query_ball_tree(kd_tree2, r=0.2)\n    >>> sum([len(i) for i in indexes])\n    1",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9bf8d4aca2ffd6cee3b8c2ebc97a281f16cb7a11de9adce605ced897a0e54883",
            "fields": [
                {
                    "id": "1m0cyqfu",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.spatial._ckdtree.cKDTree.count_neighbors object",
                    "type": "Object:scipy.spatial._ckdtree.cKDTree",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aamwbf2m",
                    "encoding": "",
                    "name": "other",
                    "value": "",
                    "defaultValue": "",
                    "description": "The other tree to draw points from, can be the same tree as self.",
                    "type": "cKDTree instance",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0dq8to4v",
                    "encoding": "",
                    "name": "r",
                    "value": "",
                    "defaultValue": "",
                    "description": "The radius to produce a count for. Multiple radii are searched with\na single tree traversal.\nIf the count is non-cumulative(``cumulative=False``), ``r`` defines\nthe edges of the bins, and must be non-decreasing.",
                    "type": "float or one-dimensional array of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cqvsn_ye",
                    "encoding": "",
                    "name": "p",
                    "value": 2.0,
                    "defaultValue": 2.0,
                    "description": "1<=p<=infinity.\nWhich Minkowski p-norm to use.\nDefault 2.0.\nA finite large p may cause a ValueError if overflow can occur.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3iyb49lc",
                    "encoding": "",
                    "name": "weights",
                    "value": "",
                    "defaultValue": "",
                    "description": "If None, the pair-counting is unweighted.\nIf given as a tuple, weights[0] is the weights of points in ``self``, and\nweights[1] is the weights of points in ``other``; either can be None to\nindicate the points are unweighted.\nIf given as an array_like, weights is the weights of points in ``self``\nand ``other``. For this to make sense, ``self`` and ``other`` must be the\nsame tree. If ``self`` and ``other`` are two different trees, a ``ValueError``\nis raised.\nDefault: None",
                    "type": "tuple, arraylike, or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jmkqniz4",
                    "encoding": "",
                    "name": "cumulative",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether the returned counts are cumulative. When cumulative is set to ``False``\nthe algorithm is optimized to work with a large number of bins (>10) specified\nby ``r``. When ``cumulative`` is set to True, the algorithm is optimized to work\nwith a small number of ``r``. Default: True",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "msojk9y0",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial._ckdtree.cKDTree.count_neighbors",
                    "defaultValue": "scipy.spatial._ckdtree.cKDTree.count_neighbors",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sg7cqpjz",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eeazp6id",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "19gmos1o",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j6yk1_z8",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial._ckdtree.cKDTree",
                    "defaultValue": "scipy.spatial._ckdtree.cKDTree",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "adofafrm",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zrbc5mci",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "dc8ucyqs",
            "name": "cKDTree.query",
            "description": "query(self, x, k=1, eps=0, p=2, distance_upper_bound=np.inf, workers=1)\n    \n    Query the kd-tree for nearest neighbors\n    \n    Parameters\n    ----------\n    x : array_like, last dimension self.m\n        An array of points to query.\n    k : list of integer or integer\n        The list of k-th nearest neighbors to return. If k is an\n        integer it is treated as a list of [1, ... k] (range(1, k+1)).\n        Note that the counting starts from 1.\n    eps : non-negative float\n        Return approximate nearest neighbors; the k-th returned value\n        is guaranteed to be no further than (1+eps) times the\n        distance to the real k-th nearest neighbor.\n    p : float, 1<=p<=infinity\n        Which Minkowski p-norm to use.\n        1 is the sum-of-absolute-values \"Manhattan\" distance\n        2 is the usual Euclidean distance\n        infinity is the maximum-coordinate-difference distance\n        A finite large p may cause a ValueError if overflow can occur.\n    distance_upper_bound : nonnegative float\n        Return only neighbors within this distance.  This is used to prune\n        tree searches, so if you are doing a series of nearest-neighbor\n        queries, it may help to supply the distance to the nearest neighbor\n        of the most recent point.\n    workers : int, optional\n        Number of workers to use for parallel processing. If -1 is given\n        all CPU threads are used. Default: 1.\n    \n        .. versionchanged:: 1.9.0\n           The \"n_jobs\" argument was renamed \"workers\". The old name\n           \"n_jobs\" was deprecated in SciPy 1.6.0 and was removed in\n           SciPy 1.9.0.\n    \n    Returns\n    -------\n    d : array of floats\n        The distances to the nearest neighbors.\n        If ``x`` has shape ``tuple+(self.m,)``, then ``d`` has shape ``tuple+(k,)``.\n        When k == 1, the last dimension of the output is squeezed.\n        Missing neighbors are indicated with infinite distances.\n    i : ndarray of ints\n        The index of each neighbor in ``self.data``.\n        If ``x`` has shape ``tuple+(self.m,)``, then ``i`` has shape ``tuple+(k,)``.\n        When k == 1, the last dimension of the output is squeezed.\n        Missing neighbors are indicated with ``self.n``.\n    \n    Notes\n    -----\n    If the KD-Tree is periodic, the position ``x`` is wrapped into the\n    box.\n    \n    When the input k is a list, a query for arange(max(k)) is performed, but\n    only columns that store the requested values of k are preserved. This is\n    implemented in a manner that reduces memory usage.\n    \n    Examples\n    --------\n    \n    >>> import numpy as np\n    >>> from scipy.spatial import cKDTree\n    >>> x, y = np.mgrid[0:5, 2:8]\n    >>> tree = cKDTree(np.c_[x.ravel(), y.ravel()])\n    \n    To query the nearest neighbours and return squeezed result, use\n    \n    >>> dd, ii = tree.query([[0, 0], [2.2, 2.9]], k=1)\n    >>> print(dd, ii, sep='\\n')\n    [2.         0.2236068]\n    [ 0 13]\n    \n    To query the nearest neighbours and return unsqueezed result, use\n    \n    >>> dd, ii = tree.query([[0, 0], [2.2, 2.9]], k=[1])\n    >>> print(dd, ii, sep='\\n')\n    [[2.        ]\n     [0.2236068]]\n    [[ 0]\n     [13]]\n    \n    To query the second nearest neighbours and return unsqueezed result,\n    use\n    \n    >>> dd, ii = tree.query([[0, 0], [2.2, 2.9]], k=[2])\n    >>> print(dd, ii, sep='\\n')\n    [[2.23606798]\n     [0.80622577]]\n    [[ 6]\n     [19]]\n    \n    To query the first and second nearest neighbours, use\n    \n    >>> dd, ii = tree.query([[0, 0], [2.2, 2.9]], k=2)\n    >>> print(dd, ii, sep='\\n')\n    [[2.         2.23606798]\n     [0.2236068  0.80622577]]\n    [[ 0  6]\n     [13 19]]\n    \n    or, be more specific\n    \n    >>> dd, ii = tree.query([[0, 0], [2.2, 2.9]], k=[1, 2])\n    >>> print(dd, ii, sep='\\n')\n    [[2.         2.23606798]\n     [0.2236068  0.80622577]]\n    [[ 0  6]\n     [13 19]]",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ca84a0079e97ea43a165faf568e57ad473b8be6335527dbabd74e700c983f18c",
            "fields": [
                {
                    "id": "743jzztv",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.spatial._ckdtree.cKDTree.query object",
                    "type": "Object:scipy.spatial._ckdtree.cKDTree",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oxotcfpv",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "An array of points to query.",
                    "type": "arraylike, last dimension self.m",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yxw0nlsg",
                    "encoding": "",
                    "name": "k",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "The list of k-th nearest neighbors to return. If k is an\ninteger it is treated as a list of [1, ... k] (range(1, k+1)).\nNote that the counting starts from 1.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z_2zl26o",
                    "encoding": "",
                    "name": "eps",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Return approximate nearest neighbors; the k-th returned value\nis guaranteed to be no further than (1+eps) times the\ndistance to the real k-th nearest neighbor.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a7ol458z",
                    "encoding": "",
                    "name": "p",
                    "value": 2.0,
                    "defaultValue": 2.0,
                    "description": "Which Minkowski p-norm to use.\n1 is the sum-of-absolute-values \"Manhattan\" distance\n2 is the usual Euclidean distance\ninfinity is the maximum-coordinate-difference distance\nA finite large p may cause a ValueError if overflow can occur.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e30r3c46",
                    "encoding": "",
                    "name": "distance_upper_bound",
                    "value": "inf",
                    "defaultValue": "inf",
                    "description": "Return only neighbors within this distance.  This is used to prune\ntree searches, so if you are doing a series of nearest-neighbor\nqueries, it may help to supply the distance to the nearest neighbor\nof the most recent point.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m4mjqzbg",
                    "encoding": "",
                    "name": "workers",
                    "value": "",
                    "defaultValue": "",
                    "description": "Number of workers to use for parallel processing. If -1 is given\nall CPU threads are used. Default: 1.\n\n.. versionchanged:: 1.9.0\n   The \"n_jobs\" argument was renamed \"workers\". The old name\n   \"n_jobs\" was deprecated in SciPy 1.6.0 and was removed in\n   SciPy 1.9.0.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gfz0_87h",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b5k6fqsj",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial._ckdtree.cKDTree.query",
                    "defaultValue": "scipy.spatial._ckdtree.cKDTree.query",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t8b5hbfo",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "57_ojqql",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "0c483ljw",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6h0ww3g1",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial._ckdtree.cKDTree",
                    "defaultValue": "scipy.spatial._ckdtree.cKDTree",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ios7pi3_",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "whq3xl4g",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "zowsiuxe",
            "name": "cKDTree.query_ball_point",
            "description": "query_ball_point(self, x, r, p=2., eps=0, workers=1, return_sorted=None,\n                     return_length=False)\n    \n    Find all points within distance r of point(s) x.\n    \n    Parameters\n    ----------\n    x : array_like, shape tuple + (self.m,)\n        The point or points to search for neighbors of.\n    r : array_like, float\n        The radius of points to return, shall broadcast to the length of x.\n    p : float, optional\n        Which Minkowski p-norm to use.  Should be in the range [1, inf].\n        A finite large p may cause a ValueError if overflow can occur.\n    eps : nonnegative float, optional\n        Approximate search. Branches of the tree are not explored if their\n        nearest points are further than ``r / (1 + eps)``, and branches are\n        added in bulk if their furthest points are nearer than\n        ``r * (1 + eps)``.\n    workers : int, optional\n        Number of jobs to schedule for parallel processing. If -1 is given\n        all processors are used. Default: 1.\n    \n        .. versionchanged:: 1.9.0\n           The \"n_jobs\" argument was renamed \"workers\". The old name\n           \"n_jobs\" was deprecated in SciPy 1.6.0 and was removed in\n           SciPy 1.9.0.\n    \n    return_sorted : bool, optional\n        Sorts returned indices if True and does not sort them if False. If\n        None, does not sort single point queries, but does sort\n        multi-point queries which was the behavior before this option\n        was added.\n    \n        .. versionadded:: 1.2.0\n    return_length: bool, optional\n        Return the number of points inside the radius instead of a list\n        of the indices.\n        .. versionadded:: 1.3.0\n    \n    Returns\n    -------\n    results : list or array of lists\n        If `x` is a single point, returns a list of the indices of the\n        neighbors of `x`. If `x` is an array of points, returns an object\n        array of shape tuple containing lists of neighbors.\n    \n    Notes\n    -----\n    If you have many points whose neighbors you want to find, you may save\n    substantial amounts of time by putting them in a cKDTree and using\n    query_ball_tree.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy import spatial\n    >>> x, y = np.mgrid[0:4, 0:4]\n    >>> points = np.c_[x.ravel(), y.ravel()]\n    >>> tree = spatial.cKDTree(points)\n    >>> tree.query_ball_point([2, 0], 1)\n    [4, 8, 9, 12]\n    \n    Query multiple points and plot the results:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> points = np.asarray(points)\n    >>> plt.plot(points[:,0], points[:,1], '.')\n    >>> for results in tree.query_ball_point(([2, 0], [3, 3]), 1):\n    ...     nearby_points = points[results]\n    ...     plt.plot(nearby_points[:,0], nearby_points[:,1], 'o')\n    >>> plt.margins(0.1, 0.1)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "30894284b5bd32857f939f47e8f3f76f39ee2f8f9a40d830b65379249cc5f9f7",
            "fields": [
                {
                    "id": "wtfu0iz6",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.spatial._ckdtree.cKDTree.query_ball_point object",
                    "type": "Object:scipy.spatial._ckdtree.cKDTree",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x0skpwpd",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "The point or points to search for neighbors of.",
                    "type": "arraylike, shape tuple + (self.m,)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ve81srby",
                    "encoding": "",
                    "name": "r",
                    "value": "",
                    "defaultValue": "",
                    "description": "The radius of points to return, shall broadcast to the length of x.",
                    "type": "arraylike, float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4agc3i3w",
                    "encoding": "",
                    "name": "p",
                    "value": 2.0,
                    "defaultValue": 2.0,
                    "description": "Which Minkowski p-norm to use.  Should be in the range [1, inf].\nA finite large p may cause a ValueError if overflow can occur.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wj1npn86",
                    "encoding": "",
                    "name": "eps",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Approximate search. Branches of the tree are not explored if their\nnearest points are further than ``r / (1 + eps)``, and branches are\nadded in bulk if their furthest points are nearer than\n``r * (1 + eps)``.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iwlfwmgp",
                    "encoding": "",
                    "name": "workers",
                    "value": "",
                    "defaultValue": "",
                    "description": "Number of jobs to schedule for parallel processing. If -1 is given\nall processors are used. Default: 1.\n\n.. versionchanged:: 1.9.0\n   The \"n_jobs\" argument was renamed \"workers\". The old name\n   \"n_jobs\" was deprecated in SciPy 1.6.0 and was removed in\n   SciPy 1.9.0.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tilyxayp",
                    "encoding": "",
                    "name": "return_sorted",
                    "value": "",
                    "defaultValue": "",
                    "description": "Sorts returned indices if True and does not sort them if False. If\nNone, does not sort single point queries, but does sort\nmulti-point queries which was the behavior before this option\nwas added.\n\n.. versionadded:: 1.2.0",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h5m76rex",
                    "encoding": "",
                    "name": "return_length",
                    "value": false,
                    "defaultValue": false,
                    "description": "Return the number of points inside the radius instead of a list\nof the indices.\n.. versionadded:: 1.3.0",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jjnfi9py",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mqo_acdm",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial._ckdtree.cKDTree.query_ball_point",
                    "defaultValue": "scipy.spatial._ckdtree.cKDTree.query_ball_point",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0z6n9uob",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "djnvswa1",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "cefe3on9",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e6bb5iqc",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial._ckdtree.cKDTree",
                    "defaultValue": "scipy.spatial._ckdtree.cKDTree",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uzmj2scg",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4rmfd9ap",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "sp085n9s",
            "name": "cKDTree.query_ball_tree",
            "description": "query_ball_tree(self, other, r, p=2., eps=0)\n    \n    Find all pairs of points between `self` and `other` whose distance is at most r\n    \n    Parameters\n    ----------\n    other : cKDTree instance\n        The tree containing points to search against.\n    r : float\n        The maximum distance, has to be positive.\n    p : float, optional\n        Which Minkowski norm to use.  `p` has to meet the condition\n        ``1 <= p <= infinity``.\n        A finite large p may cause a ValueError if overflow can occur.\n    eps : float, optional\n        Approximate search.  Branches of the tree are not explored\n        if their nearest points are further than ``r/(1+eps)``, and\n        branches are added in bulk if their furthest points are nearer\n        than ``r * (1+eps)``.  `eps` has to be non-negative.\n    \n    Returns\n    -------\n    results : list of lists\n        For each element ``self.data[i]`` of this tree, ``results[i]`` is a\n        list of the indices of its neighbors in ``other.data``.\n    \n    Examples\n    --------\n    You can search all pairs of points between two kd-trees within a distance:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> import numpy as np\n    >>> from scipy.spatial import cKDTree\n    >>> rng = np.random.default_rng()\n    >>> points1 = rng.random((15, 2))\n    >>> points2 = rng.random((15, 2))\n    >>> plt.figure(figsize=(6, 6))\n    >>> plt.plot(points1[:, 0], points1[:, 1], \"xk\", markersize=14)\n    >>> plt.plot(points2[:, 0], points2[:, 1], \"og\", markersize=14)\n    >>> kd_tree1 = cKDTree(points1)\n    >>> kd_tree2 = cKDTree(points2)\n    >>> indexes = kd_tree1.query_ball_tree(kd_tree2, r=0.2)\n    >>> for i in range(len(indexes)):\n    ...     for j in indexes[i]:\n    ...         plt.plot([points1[i, 0], points2[j, 0]],\n    ...             [points1[i, 1], points2[j, 1]], \"-r\")\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "84e752a0b0182a831dce33eade3610919a65721cebe362b123f40a98078499aa",
            "fields": [
                {
                    "id": "29ydbyyh",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.spatial._ckdtree.cKDTree.query_ball_tree object",
                    "type": "Object:scipy.spatial._ckdtree.cKDTree",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4g3t6czs",
                    "encoding": "",
                    "name": "other",
                    "value": "",
                    "defaultValue": "",
                    "description": "The tree containing points to search against.",
                    "type": "cKDTree instance",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5pi2ob2l",
                    "encoding": "",
                    "name": "r",
                    "value": "",
                    "defaultValue": "",
                    "description": "The maximum distance, has to be positive.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "906w7e4g",
                    "encoding": "",
                    "name": "p",
                    "value": 2.0,
                    "defaultValue": 2.0,
                    "description": "Which Minkowski norm to use.  `p` has to meet the condition\n``1 <= p <= infinity``.\nA finite large p may cause a ValueError if overflow can occur.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "21cg3zwh",
                    "encoding": "",
                    "name": "eps",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Approximate search.  Branches of the tree are not explored\nif their nearest points are further than ``r/(1+eps)``, and\nbranches are added in bulk if their furthest points are nearer\nthan ``r * (1+eps)``.  `eps` has to be non-negative.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xclbm_ca",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial._ckdtree.cKDTree.query_ball_tree",
                    "defaultValue": "scipy.spatial._ckdtree.cKDTree.query_ball_tree",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2q4cd850",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_q_rig6u",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "6x61bzqs",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "91yqssxv",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial._ckdtree.cKDTree",
                    "defaultValue": "scipy.spatial._ckdtree.cKDTree",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4i9u41jh",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "anxnfg8x",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "xcq_95kb",
            "name": "cKDTree.query_pairs",
            "description": "query_pairs(self, r, p=2., eps=0, output_type='set')\n    \n    Find all pairs of points in `self` whose distance is at most r.\n    \n    Parameters\n    ----------\n    r : positive float\n        The maximum distance.\n    p : float, optional\n        Which Minkowski norm to use.  ``p`` has to meet the condition\n        ``1 <= p <= infinity``.\n        A finite large p may cause a ValueError if overflow can occur.\n    eps : float, optional\n        Approximate search.  Branches of the tree are not explored\n        if their nearest points are further than ``r/(1+eps)``, and\n        branches are added in bulk if their furthest points are nearer\n        than ``r * (1+eps)``.  `eps` has to be non-negative.\n    output_type : string, optional\n        Choose the output container, 'set' or 'ndarray'. Default: 'set'\n    \n    Returns\n    -------\n    results : set or ndarray\n        Set of pairs ``(i,j)``, with ``i < j``, for which the corresponding\n        positions are close. If output_type is 'ndarray', an ndarry is\n        returned instead of a set.\n    \n    Examples\n    --------\n    You can search all pairs of points in a kd-tree within a distance:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> import numpy as np\n    >>> from scipy.spatial import cKDTree\n    >>> rng = np.random.default_rng()\n    >>> points = rng.random((20, 2))\n    >>> plt.figure(figsize=(6, 6))\n    >>> plt.plot(points[:, 0], points[:, 1], \"xk\", markersize=14)\n    >>> kd_tree = cKDTree(points)\n    >>> pairs = kd_tree.query_pairs(r=0.2)\n    >>> for (i, j) in pairs:\n    ...     plt.plot([points[i, 0], points[j, 0]],\n    ...             [points[i, 1], points[j, 1]], \"-r\")\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2c542961e57b4f5fcea880b48acbd17716fdbcd80a1c20077029af89665d6600",
            "fields": [
                {
                    "id": "nffmc_09",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.spatial._ckdtree.cKDTree.query_pairs object",
                    "type": "Object:scipy.spatial._ckdtree.cKDTree",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jwhanr7a",
                    "encoding": "",
                    "name": "r",
                    "value": "",
                    "defaultValue": "",
                    "description": "The maximum distance.",
                    "type": "positive float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tsjhw0_u",
                    "encoding": "",
                    "name": "p",
                    "value": 2.0,
                    "defaultValue": 2.0,
                    "description": "Which Minkowski norm to use.  ``p`` has to meet the condition\n``1 <= p <= infinity``.\nA finite large p may cause a ValueError if overflow can occur.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3g6bz0ch",
                    "encoding": "",
                    "name": "eps",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Approximate search.  Branches of the tree are not explored\nif their nearest points are further than ``r/(1+eps)``, and\nbranches are added in bulk if their furthest points are nearer\nthan ``r * (1+eps)``.  `eps` has to be non-negative.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ufo29ldo",
                    "encoding": "",
                    "name": "output_type",
                    "value": "set",
                    "defaultValue": "set",
                    "description": "Choose the output container, 'set' or 'ndarray'. Default: 'set'",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jbsfue74",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial._ckdtree.cKDTree.query_pairs",
                    "defaultValue": "scipy.spatial._ckdtree.cKDTree.query_pairs",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4mdj9wd1",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nr4k2a61",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "z9ph8zq2",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8nxqm7ku",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial._ckdtree.cKDTree",
                    "defaultValue": "scipy.spatial._ckdtree.cKDTree",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vj_8gx6d",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u_2b7bvt",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "esi2_k1u",
            "name": "cKDTree.sparse_distance_matrix",
            "description": "sparse_distance_matrix(self, other, max_distance, p=2.)\n    \n    Compute a sparse distance matrix\n    \n    Computes a distance matrix between two cKDTrees, leaving as zero\n    any distance greater than max_distance.\n    \n    Parameters\n    ----------\n    other : cKDTree\n    \n    max_distance : positive float\n    \n    p : float, 1<=p<=infinity\n        Which Minkowski p-norm to use.\n        A finite large p may cause a ValueError if overflow can occur.\n    \n    output_type : string, optional\n        Which container to use for output data. Options: 'dok_matrix',\n        'coo_matrix', 'dict', or 'ndarray'. Default: 'dok_matrix'.\n    \n    Returns\n    -------\n    result : dok_matrix, coo_matrix, dict or ndarray\n        Sparse matrix representing the results in \"dictionary of keys\"\n        format. If a dict is returned the keys are (i,j) tuples of indices.\n        If output_type is 'ndarray' a record array with fields 'i', 'j',\n        and 'v' is returned,\n    \n    Examples\n    --------\n    You can compute a sparse distance matrix between two kd-trees:\n    \n    >>> import numpy as np\n    >>> from scipy.spatial import cKDTree\n    >>> rng = np.random.default_rng()\n    >>> points1 = rng.random((5, 2))\n    >>> points2 = rng.random((5, 2))\n    >>> kd_tree1 = cKDTree(points1)\n    >>> kd_tree2 = cKDTree(points2)\n    >>> sdm = kd_tree1.sparse_distance_matrix(kd_tree2, 0.3)\n    >>> sdm.toarray()\n    array([[0.        , 0.        , 0.12295571, 0.        , 0.        ],\n       [0.        , 0.        , 0.        , 0.        , 0.        ],\n       [0.28942611, 0.        , 0.        , 0.2333084 , 0.        ],\n       [0.        , 0.        , 0.        , 0.        , 0.        ],\n       [0.24617575, 0.29571802, 0.26836782, 0.        , 0.        ]])\n    \n    You can check distances above the `max_distance` are zeros:\n    \n    >>> from scipy.spatial import distance_matrix\n    >>> distance_matrix(points1, points2)\n    array([[0.56906522, 0.39923701, 0.12295571, 0.8658745 , 0.79428925],\n       [0.37327919, 0.7225693 , 0.87665969, 0.32580855, 0.75679479],\n       [0.28942611, 0.30088013, 0.6395831 , 0.2333084 , 0.33630734],\n       [0.31994999, 0.72658602, 0.71124834, 0.55396483, 0.90785663],\n       [0.24617575, 0.29571802, 0.26836782, 0.57714465, 0.6473269 ]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7bd9d4273fd3f6558ff0e2c4443d08623c0c2bff8db2d6ea56f864aa564df594",
            "fields": [
                {
                    "id": "wje5sl9u",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.spatial._ckdtree.cKDTree.sparse_distance_matrix object",
                    "type": "Object:scipy.spatial._ckdtree.cKDTree",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lah4ysjs",
                    "encoding": "",
                    "name": "other",
                    "value": "",
                    "defaultValue": "",
                    "description": null,
                    "type": "cKDTree",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hjzkd2wk",
                    "encoding": "",
                    "name": "max_distance",
                    "value": "",
                    "defaultValue": "",
                    "description": null,
                    "type": "positive float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q_gmq3se",
                    "encoding": "",
                    "name": "p",
                    "value": 2.0,
                    "defaultValue": 2.0,
                    "description": "Which Minkowski p-norm to use.\nA finite large p may cause a ValueError if overflow can occur.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0mobxr3b",
                    "encoding": "",
                    "name": "output_type",
                    "value": "dok_matrix",
                    "defaultValue": "dok_matrix",
                    "description": "Which container to use for output data. Options: 'dok_matrix',\n'coo_matrix', 'dict', or 'ndarray'. Default: 'dok_matrix'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k21_ucv1",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial._ckdtree.cKDTree.sparse_distance_matrix",
                    "defaultValue": "scipy.spatial._ckdtree.cKDTree.sparse_distance_matrix",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w07giido",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x6b_7rat",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ds_h39fm",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "isjoxkpo",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial._ckdtree.cKDTree",
                    "defaultValue": "scipy.spatial._ckdtree.cKDTree",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1rp60nle",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "da_y0et4",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "onqdi8pj",
            "name": "spatial.convex_hull_plot_2d",
            "description": "Plot the given convex hull diagram in 2-D\n    \n    Parameters\n    ----------\n    hull : scipy.spatial.ConvexHull instance\n        Convex hull to plot\n    ax : matplotlib.axes.Axes instance, optional\n        Axes to plot on\n    \n    Returns\n    -------\n    fig : matplotlib.figure.Figure instance\n        Figure for the plot\n    \n    See Also\n    --------\n    ConvexHull\n    \n    Notes\n    -----\n    Requires Matplotlib.\n    \n    \n    Examples\n    --------\n    \n    >>> import numpy as np\n    >>> import matplotlib.pyplot as plt\n    >>> from scipy.spatial import ConvexHull, convex_hull_plot_2d\n    \n    The convex hull of a random set of points:\n    \n    >>> rng = np.random.default_rng()\n    >>> points = rng.random((30, 2))\n    >>> hull = ConvexHull(points)\n    \n    Plot it:\n    \n    >>> _ = convex_hull_plot_2d(hull)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "87494bdb14e67443b9865540bf52e19a11ff2da7817ac258da0580196de896a9",
            "fields": [
                {
                    "id": "_t018sw8",
                    "encoding": "",
                    "name": "hull",
                    "value": "",
                    "defaultValue": "",
                    "description": "Convex hull to plot",
                    "type": "scipy.spatial.ConvexHull instance",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6j3sdd37",
                    "encoding": "",
                    "name": "ax",
                    "value": "",
                    "defaultValue": "",
                    "description": "Axes to plot on",
                    "type": "matplotlib.axes.Axes instance",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "enszsv54",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.convex_hull_plot_2d",
                    "defaultValue": "scipy.spatial.convex_hull_plot_2d",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0s5_oh_d",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gkdc8ab3",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "dqsuog7n",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8ccxckpv",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial",
                    "defaultValue": "scipy.spatial",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8umyjmon",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jgylhdmq",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "123gjg5m",
            "name": "spatial.delaunay_plot_2d",
            "description": "Plot the given Delaunay triangulation in 2-D\n    \n    Parameters\n    ----------\n    tri : scipy.spatial.Delaunay instance\n        Triangulation to plot\n    ax : matplotlib.axes.Axes instance, optional\n        Axes to plot on\n    \n    Returns\n    -------\n    fig : matplotlib.figure.Figure instance\n        Figure for the plot\n    \n    See Also\n    --------\n    Delaunay\n    matplotlib.pyplot.triplot\n    \n    Notes\n    -----\n    Requires Matplotlib.\n    \n    Examples\n    --------\n    \n    >>> import numpy as np\n    >>> import matplotlib.pyplot as plt\n    >>> from scipy.spatial import Delaunay, delaunay_plot_2d\n    \n    The Delaunay triangulation of a set of random points:\n    \n    >>> rng = np.random.default_rng()\n    >>> points = rng.random((30, 2))\n    >>> tri = Delaunay(points)\n    \n    Plot it:\n    \n    >>> _ = delaunay_plot_2d(tri)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7eba51f333930a813ee8aa1b38e5aaeb86dc0903cefe595043eb3f3abf6ca54e",
            "fields": [
                {
                    "id": "gjp2j9zo",
                    "encoding": "",
                    "name": "tri",
                    "value": "",
                    "defaultValue": "",
                    "description": "Triangulation to plot",
                    "type": "scipy.spatial.Delaunay instance",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ayj8_83l",
                    "encoding": "",
                    "name": "ax",
                    "value": "",
                    "defaultValue": "",
                    "description": "Axes to plot on",
                    "type": "matplotlib.axes.Axes instance",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hmvqncox",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.delaunay_plot_2d",
                    "defaultValue": "scipy.spatial.delaunay_plot_2d",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "89acy17y",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n81e3tmn",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "7ao851s_",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h1o0ijtw",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial",
                    "defaultValue": "scipy.spatial",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ua90y509",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1qst_39y",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "kltf62uw",
            "name": "spatial.distance_matrix",
            "description": "Compute the distance matrix.\n    \n    Returns the matrix of all pair-wise distances.\n    \n    Parameters\n    ----------\n    x : (M, K) array_like\n        Matrix of M vectors in K dimensions.\n    y : (N, K) array_like\n        Matrix of N vectors in K dimensions.\n    p : float, 1 <= p <= infinity\n        Which Minkowski p-norm to use.\n    threshold : positive int\n        If ``M * N * K`` > `threshold`, algorithm uses a Python loop instead\n        of large temporary arrays.\n    \n    Returns\n    -------\n    result : (M, N) ndarray\n        Matrix containing the distance from every vector in `x` to every vector\n        in `y`.\n    \n    Examples\n    --------\n    >>> from scipy.spatial import distance_matrix\n    >>> distance_matrix([[0,0],[0,1]], [[1,0],[1,1]])\n    array([[ 1.        ,  1.41421356],\n           [ 1.41421356,  1.        ]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "74e0764b6cef4272a82399d3a81af1d7b35ea8099d073841af6794c283789c36",
            "fields": [
                {
                    "id": "7obkl7g9",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "Matrix of M vectors in K dimensions.",
                    "type": "(M, K) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fekfipge",
                    "encoding": "",
                    "name": "y",
                    "value": "",
                    "defaultValue": "",
                    "description": "Matrix of N vectors in K dimensions.",
                    "type": "(N, K) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5025dt4u",
                    "encoding": "",
                    "name": "p",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Which Minkowski p-norm to use.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7xcqo1oi",
                    "encoding": "",
                    "name": "threshold",
                    "value": 1000000,
                    "defaultValue": 1000000,
                    "description": "If ``M * N * K`` > `threshold`, algorithm uses a Python loop instead\nof large temporary arrays.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "krpc0vzi",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.distance_matrix",
                    "defaultValue": "scipy.spatial.distance_matrix",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "acb1q180",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nt3i95sj",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "q353ouan",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wva6me7j",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial",
                    "defaultValue": "scipy.spatial",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dw8ry39b",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iwfe6s3s",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "7iz8o_mo",
            "name": "spatial.geometric_slerp",
            "description": "Geometric spherical linear interpolation.\n    \n    The interpolation occurs along a unit-radius\n    great circle arc in arbitrary dimensional space.\n    \n    Parameters\n    ----------\n    start : (n_dimensions, ) array-like\n        Single n-dimensional input coordinate in a 1-D array-like\n        object. `n` must be greater than 1.\n    end : (n_dimensions, ) array-like\n        Single n-dimensional input coordinate in a 1-D array-like\n        object. `n` must be greater than 1.\n    t : float or (n_points,) 1D array-like\n        A float or 1D array-like of doubles representing interpolation\n        parameters, with values required in the inclusive interval\n        between 0 and 1. A common approach is to generate the array\n        with ``np.linspace(0, 1, n_pts)`` for linearly spaced points.\n        Ascending, descending, and scrambled orders are permitted.\n    tol : float\n        The absolute tolerance for determining if the start and end\n        coordinates are antipodes.\n    \n    Returns\n    -------\n    result : (t.size, D)\n        An array of doubles containing the interpolated\n        spherical path and including start and\n        end when 0 and 1 t are used. The\n        interpolated values should correspond to the\n        same sort order provided in the t array. The result\n        may be 1-dimensional if ``t`` is a float.\n    \n    Raises\n    ------\n    ValueError\n        If ``start`` and ``end`` are antipodes, not on the\n        unit n-sphere, or for a variety of degenerate conditions.\n    \n    See Also\n    --------\n    scipy.spatial.transform.Slerp : 3-D Slerp that works with quaternions\n    \n    Notes\n    -----\n    The implementation is based on the mathematical formula provided in [1]_,\n    and the first known presentation of this algorithm, derived from study of\n    4-D geometry, is credited to Glenn Davis in a footnote of the original\n    quaternion Slerp publication by Ken Shoemake [2]_.\n    \n    .. versionadded:: 1.5.0\n    \n    References\n    ----------\n    .. [1] https://en.wikipedia.org/wiki/Slerp#Geometric_Slerp\n    .. [2] Ken Shoemake (1985) Animating rotation with quaternion curves.\n           ACM SIGGRAPH Computer Graphics, 19(3): 245-254.\n    \n    Examples\n    --------\n    Interpolate four linearly-spaced values on the circumference of\n    a circle spanning 90 degrees:\n    \n    >>> import numpy as np\n    >>> from scipy.spatial import geometric_slerp\n    >>> import matplotlib.pyplot as plt\n    >>> fig = plt.figure()\n    >>> ax = fig.add_subplot(111)\n    >>> start = np.array([1, 0])\n    >>> end = np.array([0, 1])\n    >>> t_vals = np.linspace(0, 1, 4)\n    >>> result = geometric_slerp(start,\n    ...                          end,\n    ...                          t_vals)\n    \n    The interpolated results should be at 30 degree intervals\n    recognizable on the unit circle:\n    \n    >>> ax.scatter(result[...,0], result[...,1], c='k')\n    >>> circle = plt.Circle((0, 0), 1, color='grey')\n    >>> ax.add_artist(circle)\n    >>> ax.set_aspect('equal')\n    >>> plt.show()\n    \n    Attempting to interpolate between antipodes on a circle is\n    ambiguous because there are two possible paths, and on a\n    sphere there are infinite possible paths on the geodesic surface.\n    Nonetheless, one of the ambiguous paths is returned along\n    with a warning:\n    \n    >>> opposite_pole = np.array([-1, 0])\n    >>> with np.testing.suppress_warnings() as sup:\n    ...     sup.filter(UserWarning)\n    ...     geometric_slerp(start,\n    ...                     opposite_pole,\n    ...                     t_vals)\n    array([[ 1.00000000e+00,  0.00000000e+00],\n           [ 5.00000000e-01,  8.66025404e-01],\n           [-5.00000000e-01,  8.66025404e-01],\n           [-1.00000000e+00,  1.22464680e-16]])\n    \n    Extend the original example to a sphere and plot interpolation\n    points in 3D:\n    \n    >>> from mpl_toolkits.mplot3d import proj3d\n    >>> fig = plt.figure()\n    >>> ax = fig.add_subplot(111, projection='3d')\n    \n    Plot the unit sphere for reference (optional):\n    \n    >>> u = np.linspace(0, 2 * np.pi, 100)\n    >>> v = np.linspace(0, np.pi, 100)\n    >>> x = np.outer(np.cos(u), np.sin(v))\n    >>> y = np.outer(np.sin(u), np.sin(v))\n    >>> z = np.outer(np.ones(np.size(u)), np.cos(v))\n    >>> ax.plot_surface(x, y, z, color='y', alpha=0.1)\n    \n    Interpolating over a larger number of points\n    may provide the appearance of a smooth curve on\n    the surface of the sphere, which is also useful\n    for discretized integration calculations on a\n    sphere surface:\n    \n    >>> start = np.array([1, 0, 0])\n    >>> end = np.array([0, 0, 1])\n    >>> t_vals = np.linspace(0, 1, 200)\n    >>> result = geometric_slerp(start,\n    ...                          end,\n    ...                          t_vals)\n    >>> ax.plot(result[...,0],\n    ...         result[...,1],\n    ...         result[...,2],\n    ...         c='k')\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a3b540192c1d54f25b1bb7395c2717c9710a640e2fcc823c86213135d87589ad",
            "fields": [
                {
                    "id": "3zriyoo7",
                    "encoding": "",
                    "name": "start",
                    "value": "",
                    "defaultValue": "",
                    "description": "Single n-dimensional input coordinate in a 1-D array-like\nobject. `n` must be greater than 1.",
                    "type": "npt.ArrayLike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uwkfrki4",
                    "encoding": "",
                    "name": "end",
                    "value": "",
                    "defaultValue": "",
                    "description": "Single n-dimensional input coordinate in a 1-D array-like\nobject. `n` must be greater than 1.",
                    "type": "npt.ArrayLike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lhhdnzu_",
                    "encoding": "",
                    "name": "t",
                    "value": "",
                    "defaultValue": "",
                    "description": "A float or 1D array-like of doubles representing interpolation\nparameters, with values required in the inclusive interval\nbetween 0 and 1. A common approach is to generate the array\nwith ``np.linspace(0, 1, n_pts)`` for linearly spaced points.\nAscending, descending, and scrambled orders are permitted.",
                    "type": "npt.ArrayLike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rrdqq45v",
                    "encoding": "",
                    "name": "tol",
                    "value": 1e-07,
                    "defaultValue": 1e-07,
                    "description": "The absolute tolerance for determining if the start and end\ncoordinates are antipodes.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tw7qmnkb",
                    "encoding": "dill",
                    "name": "result",
                    "value": null,
                    "defaultValue": null,
                    "description": "An array of doubles containing the interpolated\nspherical path and including start and\nend when 0 and 1 t are used. The\ninterpolated values should correspond to the\nsame sort order provided in the t array. The result\nmay be 1-dimensional if ``t`` is a float.",
                    "type": "ndarray",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "udrepylk",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.geometric_slerp",
                    "defaultValue": "scipy.spatial.geometric_slerp",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "99f5sizx",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zbro292n",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ewx8kuu5",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ksmtp6nb",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial",
                    "defaultValue": "scipy.spatial",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "upbjric7",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eywh29wd",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ovg7dbjb",
            "name": "spatial.minkowski_distance",
            "description": "Compute the L**p distance between two arrays.\n    \n    The last dimensions of `x` and `y` must be the same length.  Any\n    other dimensions must be compatible for broadcasting.\n    \n    Parameters\n    ----------\n    x : (..., K) array_like\n        Input array.\n    y : (..., K) array_like\n        Input array.\n    p : float, 1 <= p <= infinity\n        Which Minkowski p-norm to use.\n    \n    Returns\n    -------\n    dist : ndarray\n        Distance between the input arrays.\n    \n    Examples\n    --------\n    >>> from scipy.spatial import minkowski_distance\n    >>> minkowski_distance([[0, 0], [0, 0]], [[1, 1], [0, 1]])\n    array([ 1.41421356,  1.        ])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "3486abff32d3a3df13dfdb1c1162bea63c3720f34492ab0e49aba09d4d1bb17f",
            "fields": [
                {
                    "id": "eef2zeqx",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array.",
                    "type": "(..., K) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "glsxkkb9",
                    "encoding": "",
                    "name": "y",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array.",
                    "type": "(..., K) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aeoz59_u",
                    "encoding": "",
                    "name": "p",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Which Minkowski p-norm to use.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w_15qywg",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.minkowski_distance",
                    "defaultValue": "scipy.spatial.minkowski_distance",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3tgx64i5",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qbp9ovhr",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "vchjona4",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xfcou03w",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial",
                    "defaultValue": "scipy.spatial",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "te2wczsx",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gwb89pzp",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "3tkwmc29",
            "name": "spatial.minkowski_distance_p",
            "description": "Compute the pth power of the L**p distance between two arrays.\n    \n    For efficiency, this function computes the L**p distance but does\n    not extract the pth root. If `p` is 1 or infinity, this is equal to\n    the actual L**p distance.\n    \n    The last dimensions of `x` and `y` must be the same length.  Any\n    other dimensions must be compatible for broadcasting.\n    \n    Parameters\n    ----------\n    x : (..., K) array_like\n        Input array.\n    y : (..., K) array_like\n        Input array.\n    p : float, 1 <= p <= infinity\n        Which Minkowski p-norm to use.\n    \n    Returns\n    -------\n    dist : ndarray\n        pth power of the distance between the input arrays.\n    \n    Examples\n    --------\n    >>> from scipy.spatial import minkowski_distance_p\n    >>> minkowski_distance_p([[0, 0], [0, 0]], [[1, 1], [0, 1]])\n    array([2., 1.])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e0ba92842341888c82b7aacfc28fc800da59f47e7ce7d4b991ac3fb952cdaa99",
            "fields": [
                {
                    "id": "v5xf035b",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array.",
                    "type": "(..., K) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ooxjlaa6",
                    "encoding": "",
                    "name": "y",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array.",
                    "type": "(..., K) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aw7g2b06",
                    "encoding": "",
                    "name": "p",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Which Minkowski p-norm to use.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kvdg628_",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.minkowski_distance_p",
                    "defaultValue": "scipy.spatial.minkowski_distance_p",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k_yiijgi",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xxlvm94m",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "o5_aq1b1",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dqmkb8ut",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial",
                    "defaultValue": "scipy.spatial",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dakuhi4f",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "48p8ko4d",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "c_qh2glz",
            "name": "spatial.procrustes",
            "description": "Procrustes analysis, a similarity test for two data sets.\n    \n    Each input matrix is a set of points or vectors (the rows of the matrix).\n    The dimension of the space is the number of columns of each matrix. Given\n    two identically sized matrices, procrustes standardizes both such that:\n    \n    - :math:`tr(AA^{T}) = 1`.\n    \n    - Both sets of points are centered around the origin.\n    \n    Procrustes ([1]_, [2]_) then applies the optimal transform to the second\n    matrix (including scaling/dilation, rotations, and reflections) to minimize\n    :math:`M^{2}=\\sum(data1-data2)^{2}`, or the sum of the squares of the\n    pointwise differences between the two input datasets.\n    \n    This function was not designed to handle datasets with different numbers of\n    datapoints (rows).  If two data sets have different dimensionality\n    (different number of columns), simply add columns of zeros to the smaller\n    of the two.\n    \n    Parameters\n    ----------\n    data1 : array_like\n        Matrix, n rows represent points in k (columns) space `data1` is the\n        reference data, after it is standardised, the data from `data2` will be\n        transformed to fit the pattern in `data1` (must have >1 unique points).\n    data2 : array_like\n        n rows of data in k space to be fit to `data1`.  Must be the  same\n        shape ``(numrows, numcols)`` as data1 (must have >1 unique points).\n    \n    Returns\n    -------\n    mtx1 : array_like\n        A standardized version of `data1`.\n    mtx2 : array_like\n        The orientation of `data2` that best fits `data1`. Centered, but not\n        necessarily :math:`tr(AA^{T}) = 1`.\n    disparity : float\n        :math:`M^{2}` as defined above.\n    \n    Raises\n    ------\n    ValueError\n        If the input arrays are not two-dimensional.\n        If the shape of the input arrays is different.\n        If the input arrays have zero columns or zero rows.\n    \n    See Also\n    --------\n    scipy.linalg.orthogonal_procrustes\n    scipy.spatial.distance.directed_hausdorff : Another similarity test\n      for two data sets\n    \n    Notes\n    -----\n    - The disparity should not depend on the order of the input matrices, but\n      the output matrices will, as only the first output matrix is guaranteed\n      to be scaled such that :math:`tr(AA^{T}) = 1`.\n    \n    - Duplicate data points are generally ok, duplicating a data point will\n      increase its effect on the procrustes fit.\n    \n    - The disparity scales as the number of points per input matrix.\n    \n    References\n    ----------\n    .. [1] Krzanowski, W. J. (2000). \"Principles of Multivariate analysis\".\n    .. [2] Gower, J. C. (1975). \"Generalized procrustes analysis\".\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.spatial import procrustes\n    \n    The matrix ``b`` is a rotated, shifted, scaled and mirrored version of\n    ``a`` here:\n    \n    >>> a = np.array([[1, 3], [1, 2], [1, 1], [2, 1]], 'd')\n    >>> b = np.array([[4, -2], [4, -4], [4, -6], [2, -6]], 'd')\n    >>> mtx1, mtx2, disparity = procrustes(a, b)\n    >>> round(disparity)\n    0",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "71c1220ebdde4c4286fe26baef54a07f3bc718e40fa52d074b002e4404ae09b4",
            "fields": [
                {
                    "id": "vvfcz6fv",
                    "encoding": "",
                    "name": "data1",
                    "value": "",
                    "defaultValue": "",
                    "description": "Matrix, n rows represent points in k (columns) space `data1` is the\nreference data, after it is standardised, the data from `data2` will be\ntransformed to fit the pattern in `data1` (must have >1 unique points).",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "la9cnfnx",
                    "encoding": "",
                    "name": "data2",
                    "value": "",
                    "defaultValue": "",
                    "description": "n rows of data in k space to be fit to `data1`.  Must be the  same\nshape ``(numrows, numcols)`` as data1 (must have >1 unique points).",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a15o9nol",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.procrustes",
                    "defaultValue": "scipy.spatial.procrustes",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4uwbhe5m",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9rvk1150",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "kk2nfmai",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vrwtmjsd",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial",
                    "defaultValue": "scipy.spatial",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y0jx7lrn",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xu4nuxy2",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "hx3fltq3",
            "name": "spatial.tsearch",
            "description": "tsearch(tri, xi)\n    \n    Find simplices containing the given points. This function does the\n    same thing as `Delaunay.find_simplex`.\n    \n    Parameters\n    ----------\n    tri : DelaunayInfo\n        Delaunay triangulation\n    xi : ndarray of double, shape (..., ndim)\n        Points to locate\n    \n    Returns\n    -------\n    i : ndarray of int, same shape as `xi`\n        Indices of simplices containing each point.\n        Points outside the triangulation get the value -1.\n    \n    See Also\n    --------\n    Delaunay.find_simplex\n    \n    Notes\n    -----\n    .. versionadded:: 0.9\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> import matplotlib.pyplot as plt\n    >>> from scipy.spatial import Delaunay, delaunay_plot_2d, tsearch\n    >>> rng = np.random.default_rng()\n    \n    The Delaunay triangulation of a set of random points:\n    \n    >>> pts = rng.random((20, 2))\n    >>> tri = Delaunay(pts)\n    >>> _ = delaunay_plot_2d(tri)\n    \n    Find the simplices containing a given set of points:\n    \n    >>> loc = rng.uniform(0.2, 0.8, (5, 2))\n    >>> s = tsearch(tri, loc)\n    >>> plt.triplot(pts[:, 0], pts[:, 1], tri.simplices[s], 'b-', mask=s==-1)\n    >>> plt.scatter(loc[:, 0], loc[:, 1], c='r', marker='x')\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "42ef31cd096db5f937e2d7dd3e03544fb5ca95acf4c96a6ace73c5e546ea952a",
            "fields": [
                {
                    "id": "y9gwm_b1",
                    "encoding": "",
                    "name": "tri",
                    "value": "",
                    "defaultValue": "",
                    "description": "Delaunay triangulation",
                    "type": "DelaunayInfo",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qmsn3zq2",
                    "encoding": "",
                    "name": "xi",
                    "value": "",
                    "defaultValue": "",
                    "description": "Points to locate",
                    "type": "ndarray of double, shape (..., ndim)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "33_o36pd",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.tsearch",
                    "defaultValue": "scipy.spatial.tsearch",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b1hepjvr",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ktgmz5cs",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "yo1fn2xa",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mcz3b6wf",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial",
                    "defaultValue": "scipy.spatial",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zir9b90y",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9wrn0eyy",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "1nm540b4",
            "name": "spatial.voronoi_plot_2d",
            "description": "Plot the given Voronoi diagram in 2-D\n    \n    Parameters\n    ----------\n    vor : scipy.spatial.Voronoi instance\n        Diagram to plot\n    ax : matplotlib.axes.Axes instance, optional\n        Axes to plot on\n    show_points : bool, optional\n        Add the Voronoi points to the plot.\n    show_vertices : bool, optional\n        Add the Voronoi vertices to the plot.\n    line_colors : string, optional\n        Specifies the line color for polygon boundaries\n    line_width : float, optional\n        Specifies the line width for polygon boundaries\n    line_alpha : float, optional\n        Specifies the line alpha for polygon boundaries\n    point_size : float, optional\n        Specifies the size of points\n    \n    Returns\n    -------\n    fig : matplotlib.figure.Figure instance\n        Figure for the plot\n    \n    See Also\n    --------\n    Voronoi\n    \n    Notes\n    -----\n    Requires Matplotlib. For degenerate input, including collinearity and\n    other violations of general position, it may be preferable to\n    calculate the Voronoi diagram with Qhull options ``QJ`` for random\n    joggling, or ``Qt`` to enforce triangulated output. Otherwise, some\n    Voronoi regions may not be visible.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> import matplotlib.pyplot as plt\n    >>> from scipy.spatial import Voronoi, voronoi_plot_2d\n    \n    Create a set of points for the example:\n    \n    >>> rng = np.random.default_rng()\n    >>> points = rng.random((10,2))\n    \n    Generate the Voronoi diagram for the points:\n    \n    >>> vor = Voronoi(points)\n    \n    Use `voronoi_plot_2d` to plot the diagram:\n    \n    >>> fig = voronoi_plot_2d(vor)\n    \n    Use `voronoi_plot_2d` to plot the diagram again, with some settings\n    customized:\n    \n    >>> fig = voronoi_plot_2d(vor, show_vertices=False, line_colors='orange',\n    ...                       line_width=2, line_alpha=0.6, point_size=2)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4b61d6d2fbebd7f10278336f1fce37c5496434ee882b109cbde4818af17da865",
            "fields": [
                {
                    "id": "467auh_k",
                    "encoding": "",
                    "name": "vor",
                    "value": "",
                    "defaultValue": "",
                    "description": "Diagram to plot",
                    "type": "scipy.spatial.Voronoi instance",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v4qs0oe1",
                    "encoding": "",
                    "name": "ax",
                    "value": "",
                    "defaultValue": "",
                    "description": "Axes to plot on",
                    "type": "matplotlib.axes.Axes instance",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ij80e9hj",
                    "encoding": "",
                    "name": "kw",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o0mnqizo",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.voronoi_plot_2d",
                    "defaultValue": "scipy.spatial.voronoi_plot_2d",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jnnwkm43",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vuf0_cdu",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ib82l136",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qv8_rath",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial",
                    "defaultValue": "scipy.spatial",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "45plwpjj",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tux286a_",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "jdagkvf_",
            "name": "distance.braycurtis",
            "description": "Compute the Bray-Curtis distance between two 1-D arrays.\n    \n    Bray-Curtis distance is defined as\n    \n    .. math::\n    \n       \\sum{|u_i-v_i|} / \\sum{|u_i+v_i|}\n    \n    The Bray-Curtis distance is in the range [0, 1] if all coordinates are\n    positive, and is undefined if the inputs are of length zero.\n    \n    Parameters\n    ----------\n    u : (N,) array_like\n        Input array.\n    v : (N,) array_like\n        Input array.\n    w : (N,) array_like, optional\n        The weights for each value in `u` and `v`. Default is None,\n        which gives each value a weight of 1.0\n    \n    Returns\n    -------\n    braycurtis : double\n        The Bray-Curtis distance between 1-D arrays `u` and `v`.\n    \n    Examples\n    --------\n    >>> from scipy.spatial import distance\n    >>> distance.braycurtis([1, 0, 0], [0, 1, 0])\n    1.0\n    >>> distance.braycurtis([1, 1, 0], [0, 1, 0])\n    0.33333333333333331",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4190359dcb478c0fc20f305c07fa42ca304d2bed8e9dcd3f568a0faccbfab5d9",
            "fields": [
                {
                    "id": "h_lvqdv_",
                    "encoding": "",
                    "name": "u",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array.",
                    "type": "(N,) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iuecqr7l",
                    "encoding": "",
                    "name": "v",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array.",
                    "type": "(N,) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2wx5ifyc",
                    "encoding": "",
                    "name": "w",
                    "value": "",
                    "defaultValue": "",
                    "description": "The weights for each value in `u` and `v`. Default is None,\nwhich gives each value a weight of 1.0",
                    "type": "(N,) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pxzp0ts8",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.distance.braycurtis",
                    "defaultValue": "scipy.spatial.distance.braycurtis",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ozwpktgk",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v281syox",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "iu60oy35",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1mlzf9el",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.distance",
                    "defaultValue": "scipy.spatial.distance",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zhcb9rsp",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uzke_f82",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "2nuxc4ax",
            "name": "distance.canberra",
            "description": "Compute the Canberra distance between two 1-D arrays.\n    \n    The Canberra distance is defined as\n    \n    .. math::\n    \n         d(u,v) = \\sum_i \\frac{|u_i-v_i|}\n                              {|u_i|+|v_i|}.\n    \n    Parameters\n    ----------\n    u : (N,) array_like\n        Input array.\n    v : (N,) array_like\n        Input array.\n    w : (N,) array_like, optional\n        The weights for each value in `u` and `v`. Default is None,\n        which gives each value a weight of 1.0\n    \n    Returns\n    -------\n    canberra : double\n        The Canberra distance between vectors `u` and `v`.\n    \n    Notes\n    -----\n    When ``u[i]`` and ``v[i]`` are 0 for given i, then the fraction 0/0 = 0 is\n    used in the calculation.\n    \n    Examples\n    --------\n    >>> from scipy.spatial import distance\n    >>> distance.canberra([1, 0, 0], [0, 1, 0])\n    2.0\n    >>> distance.canberra([1, 1, 0], [0, 1, 0])\n    1.0",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a35b70222b07dc3db9db5d2a2d63bb088d8ed4121ba0645626d77edbe882852e",
            "fields": [
                {
                    "id": "aeounest",
                    "encoding": "",
                    "name": "u",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array.",
                    "type": "(N,) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2kvcuxsf",
                    "encoding": "",
                    "name": "v",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array.",
                    "type": "(N,) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u4i5ks85",
                    "encoding": "",
                    "name": "w",
                    "value": "",
                    "defaultValue": "",
                    "description": "The weights for each value in `u` and `v`. Default is None,\nwhich gives each value a weight of 1.0",
                    "type": "(N,) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2bfafru8",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.distance.canberra",
                    "defaultValue": "scipy.spatial.distance.canberra",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "41bf79ee",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kgqney2z",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "qq4zoncg",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2ldc40g_",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.distance",
                    "defaultValue": "scipy.spatial.distance",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4d051m86",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hk2a_f_q",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "q60lvi_b",
            "name": "distance.cdist",
            "description": "Compute distance between each pair of the two collections of inputs.\n    \n    See Notes for common calling conventions.\n    \n    Parameters\n    ----------\n    XA : array_like\n        An :math:`m_A` by :math:`n` array of :math:`m_A`\n        original observations in an :math:`n`-dimensional space.\n        Inputs are converted to float type.\n    XB : array_like\n        An :math:`m_B` by :math:`n` array of :math:`m_B`\n        original observations in an :math:`n`-dimensional space.\n        Inputs are converted to float type.\n    metric : str or callable, optional\n        The distance metric to use. If a string, the distance function can be\n        'braycurtis', 'canberra', 'chebyshev', 'cityblock', 'correlation',\n        'cosine', 'dice', 'euclidean', 'hamming', 'jaccard', 'jensenshannon',\n        'kulczynski1', 'mahalanobis', 'matching', 'minkowski',\n        'rogerstanimoto', 'russellrao', 'seuclidean', 'sokalmichener',\n        'sokalsneath', 'sqeuclidean', 'yule'.\n    **kwargs : dict, optional\n        Extra arguments to `metric`: refer to each metric documentation for a\n        list of all possible arguments.\n    \n        Some possible arguments:\n    \n        p : scalar\n        The p-norm to apply for Minkowski, weighted and unweighted.\n        Default: 2.\n    \n        w : array_like\n        The weight vector for metrics that support weights (e.g., Minkowski).\n    \n        V : array_like\n        The variance vector for standardized Euclidean.\n        Default: var(vstack([XA, XB]), axis=0, ddof=1)\n    \n        VI : array_like\n        The inverse of the covariance matrix for Mahalanobis.\n        Default: inv(cov(vstack([XA, XB].T))).T\n    \n        out : ndarray\n        The output array\n        If not None, the distance matrix Y is stored in this array.\n    \n    Returns\n    -------\n    Y : ndarray\n        A :math:`m_A` by :math:`m_B` distance matrix is returned.\n        For each :math:`i` and :math:`j`, the metric\n        ``dist(u=XA[i], v=XB[j])`` is computed and stored in the\n        :math:`ij` th entry.\n    \n    Raises\n    ------\n    ValueError\n        An exception is thrown if `XA` and `XB` do not have\n        the same number of columns.\n    \n    Notes\n    -----\n    The following are common calling conventions:\n    \n    1. ``Y = cdist(XA, XB, 'euclidean')``\n    \n       Computes the distance between :math:`m` points using\n       Euclidean distance (2-norm) as the distance metric between the\n       points. The points are arranged as :math:`m`\n       :math:`n`-dimensional row vectors in the matrix X.\n    \n    2. ``Y = cdist(XA, XB, 'minkowski', p=2.)``\n    \n       Computes the distances using the Minkowski distance\n       :math:`\\|u-v\\|_p` (:math:`p`-norm) where :math:`p > 0` (note\n       that this is only a quasi-metric if :math:`0 < p < 1`).\n    \n    3. ``Y = cdist(XA, XB, 'cityblock')``\n    \n       Computes the city block or Manhattan distance between the\n       points.\n    \n    4. ``Y = cdist(XA, XB, 'seuclidean', V=None)``\n    \n       Computes the standardized Euclidean distance. The standardized\n       Euclidean distance between two n-vectors ``u`` and ``v`` is\n    \n       .. math::\n    \n          \\sqrt{\\sum {(u_i-v_i)^2 / V[x_i]}}.\n    \n       V is the variance vector; V[i] is the variance computed over all\n       the i'th components of the points. If not passed, it is\n       automatically computed.\n    \n    5. ``Y = cdist(XA, XB, 'sqeuclidean')``\n    \n       Computes the squared Euclidean distance :math:`\\|u-v\\|_2^2` between\n       the vectors.\n    \n    6. ``Y = cdist(XA, XB, 'cosine')``\n    \n       Computes the cosine distance between vectors u and v,\n    \n       .. math::\n    \n          1 - \\frac{u \\cdot v}\n                   {{\\|u\\|}_2 {\\|v\\|}_2}\n    \n       where :math:`\\|*\\|_2` is the 2-norm of its argument ``*``, and\n       :math:`u \\cdot v` is the dot product of :math:`u` and :math:`v`.\n    \n    7. ``Y = cdist(XA, XB, 'correlation')``\n    \n       Computes the correlation distance between vectors u and v. This is\n    \n       .. math::\n    \n          1 - \\frac{(u - \\bar{u}) \\cdot (v - \\bar{v})}\n                   {{\\|(u - \\bar{u})\\|}_2 {\\|(v - \\bar{v})\\|}_2}\n    \n       where :math:`\\bar{v}` is the mean of the elements of vector v,\n       and :math:`x \\cdot y` is the dot product of :math:`x` and :math:`y`.\n    \n    \n    8. ``Y = cdist(XA, XB, 'hamming')``\n    \n       Computes the normalized Hamming distance, or the proportion of\n       those vector elements between two n-vectors ``u`` and ``v``\n       which disagree. To save memory, the matrix ``X`` can be of type\n       boolean.\n    \n    9. ``Y = cdist(XA, XB, 'jaccard')``\n    \n       Computes the Jaccard distance between the points. Given two\n       vectors, ``u`` and ``v``, the Jaccard distance is the\n       proportion of those elements ``u[i]`` and ``v[i]`` that\n       disagree where at least one of them is non-zero.\n    \n    10. ``Y = cdist(XA, XB, 'jensenshannon')``\n    \n        Computes the Jensen-Shannon distance between two probability arrays.\n        Given two probability vectors, :math:`p` and :math:`q`, the\n        Jensen-Shannon distance is\n    \n        .. math::\n    \n           \\sqrt{\\frac{D(p \\parallel m) + D(q \\parallel m)}{2}}\n    \n        where :math:`m` is the pointwise mean of :math:`p` and :math:`q`\n        and :math:`D` is the Kullback-Leibler divergence.\n    \n    11. ``Y = cdist(XA, XB, 'chebyshev')``\n    \n        Computes the Chebyshev distance between the points. The\n        Chebyshev distance between two n-vectors ``u`` and ``v`` is the\n        maximum norm-1 distance between their respective elements. More\n        precisely, the distance is given by\n    \n        .. math::\n    \n           d(u,v) = \\max_i {|u_i-v_i|}.\n    \n    12. ``Y = cdist(XA, XB, 'canberra')``\n    \n        Computes the Canberra distance between the points. The\n        Canberra distance between two points ``u`` and ``v`` is\n    \n        .. math::\n    \n          d(u,v) = \\sum_i \\frac{|u_i-v_i|}\n                               {|u_i|+|v_i|}.\n    \n    13. ``Y = cdist(XA, XB, 'braycurtis')``\n    \n        Computes the Bray-Curtis distance between the points. The\n        Bray-Curtis distance between two points ``u`` and ``v`` is\n    \n    \n        .. math::\n    \n             d(u,v) = \\frac{\\sum_i (|u_i-v_i|)}\n                           {\\sum_i (|u_i+v_i|)}\n    \n    14. ``Y = cdist(XA, XB, 'mahalanobis', VI=None)``\n    \n        Computes the Mahalanobis distance between the points. The\n        Mahalanobis distance between two points ``u`` and ``v`` is\n        :math:`\\sqrt{(u-v)(1/V)(u-v)^T}` where :math:`(1/V)` (the ``VI``\n        variable) is the inverse covariance. If ``VI`` is not None,\n        ``VI`` will be used as the inverse covariance matrix.\n    \n    15. ``Y = cdist(XA, XB, 'yule')``\n    \n        Computes the Yule distance between the boolean\n        vectors. (see `yule` function documentation)\n    \n    16. ``Y = cdist(XA, XB, 'matching')``\n    \n        Synonym for 'hamming'.\n    \n    17. ``Y = cdist(XA, XB, 'dice')``\n    \n        Computes the Dice distance between the boolean vectors. (see\n        `dice` function documentation)\n    \n    18. ``Y = cdist(XA, XB, 'kulczynski1')``\n    \n        Computes the kulczynski distance between the boolean\n        vectors. (see `kulczynski1` function documentation)\n    \n        .. deprecated:: 1.15.0\n           This metric is deprecated and will be removed in SciPy 1.17.0.\n           Replace usage of ``cdist(XA, XB, 'kulczynski1')`` with\n           ``1 / cdist(XA, XB, 'jaccard') - 1``.\n    \n    19. ``Y = cdist(XA, XB, 'rogerstanimoto')``\n    \n        Computes the Rogers-Tanimoto distance between the boolean\n        vectors. (see `rogerstanimoto` function documentation)\n    \n    20. ``Y = cdist(XA, XB, 'russellrao')``\n    \n        Computes the Russell-Rao distance between the boolean\n        vectors. (see `russellrao` function documentation)\n    \n    21. ``Y = cdist(XA, XB, 'sokalmichener')``\n    \n        Computes the Sokal-Michener distance between the boolean\n        vectors. (see `sokalmichener` function documentation)\n    \n        .. deprecated:: 1.15.0\n           This metric is deprecated and will be removed in SciPy 1.17.0.\n           Replace usage of ``cdist(XA, XB, 'sokalmichener')`` with\n           ``cdist(XA, XB, 'rogerstanimoto')``.\n    \n    22. ``Y = cdist(XA, XB, 'sokalsneath')``\n    \n        Computes the Sokal-Sneath distance between the vectors. (see\n        `sokalsneath` function documentation)\n    \n    23. ``Y = cdist(XA, XB, f)``\n    \n        Computes the distance between all pairs of vectors in X\n        using the user supplied 2-arity function f. For example,\n        Euclidean distance between the vectors could be computed\n        as follows::\n    \n          dm = cdist(XA, XB, lambda u, v: np.sqrt(((u-v)**2).sum()))\n    \n        Note that you should avoid passing a reference to one of\n        the distance functions defined in this library. For example,::\n    \n          dm = cdist(XA, XB, sokalsneath)\n    \n        would calculate the pair-wise distances between the vectors in\n        X using the Python function `sokalsneath`. This would result in\n        sokalsneath being called :math:`{n \\choose 2}` times, which\n        is inefficient. Instead, the optimized C version is more\n        efficient, and we call it using the following syntax::\n    \n          dm = cdist(XA, XB, 'sokalsneath')\n    \n    Examples\n    --------\n    Find the Euclidean distances between four 2-D coordinates:\n    \n    >>> from scipy.spatial import distance\n    >>> import numpy as np\n    >>> coords = [(35.0456, -85.2672),\n    ...           (35.1174, -89.9711),\n    ...           (35.9728, -83.9422),\n    ...           (36.1667, -86.7833)]\n    >>> distance.cdist(coords, coords, 'euclidean')\n    array([[ 0.    ,  4.7044,  1.6172,  1.8856],\n           [ 4.7044,  0.    ,  6.0893,  3.3561],\n           [ 1.6172,  6.0893,  0.    ,  2.8477],\n           [ 1.8856,  3.3561,  2.8477,  0.    ]])\n    \n    \n    Find the Manhattan distance from a 3-D point to the corners of the unit\n    cube:\n    \n    >>> a = np.array([[0, 0, 0],\n    ...               [0, 0, 1],\n    ...               [0, 1, 0],\n    ...               [0, 1, 1],\n    ...               [1, 0, 0],\n    ...               [1, 0, 1],\n    ...               [1, 1, 0],\n    ...               [1, 1, 1]])\n    >>> b = np.array([[ 0.1,  0.2,  0.4]])\n    >>> distance.cdist(a, b, 'cityblock')\n    array([[ 0.7],\n           [ 0.9],\n           [ 1.3],\n           [ 1.5],\n           [ 1.5],\n           [ 1.7],\n           [ 2.1],\n           [ 2.3]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2a6f613c14d36f3321cc2762351ce2ec778f0341fd4267b85d1a9de740388f7b",
            "fields": [
                {
                    "id": "5af6a4kn",
                    "encoding": "",
                    "name": "XA",
                    "value": "",
                    "defaultValue": "",
                    "description": "An :math:`m_A` by :math:`n` array of :math:`m_A`\noriginal observations in an :math:`n`-dimensional space.\nInputs are converted to float type.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6mc2u0hs",
                    "encoding": "",
                    "name": "XB",
                    "value": "",
                    "defaultValue": "",
                    "description": "An :math:`m_B` by :math:`n` array of :math:`m_B`\noriginal observations in an :math:`n`-dimensional space.\nInputs are converted to float type.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oizpbdcy",
                    "encoding": "",
                    "name": "metric",
                    "value": "euclidean",
                    "defaultValue": "euclidean",
                    "description": "The distance metric to use. If a string, the distance function can be\n'braycurtis', 'canberra', 'chebyshev', 'cityblock', 'correlation',\n'cosine', 'dice', 'euclidean', 'hamming', 'jaccard', 'jensenshannon',\n'kulczynski1', 'mahalanobis', 'matching', 'minkowski',\n'rogerstanimoto', 'russellrao', 'seuclidean', 'sokalmichener',\n'sokalsneath', 'sqeuclidean', 'yule'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d3wzksa6",
                    "encoding": "",
                    "name": "out",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gggfht7n",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j_7rtd_z",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.distance.cdist",
                    "defaultValue": "scipy.spatial.distance.cdist",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4szifoi9",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "31np8x29",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "5r96f7j9",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1k6wmhdd",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.distance",
                    "defaultValue": "scipy.spatial.distance",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s2as__my",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kpcfsr44",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "02o07gc5",
            "name": "distance.chebyshev",
            "description": "Compute the Chebyshev distance.\n    \n    The *Chebyshev distance* between real vectors\n    :math:`u \\equiv (u_1, \\cdots, u_n)` and\n    :math:`v \\equiv (v_1, \\cdots, v_n)` is defined as [1]_\n    \n    .. math::\n    \n       d_\\textrm{chebyshev}(u,v) := \\max_{1 \\le i \\le n} |u_i-v_i|\n    \n    If a (non-negative) weight vector :math:`w \\equiv (w_1, \\cdots, w_n)`\n    is supplied, the *weighted Chebyshev distance* is defined to be the\n    weighted Minkowski distance of infinite order; that is,\n    \n    .. math::\n    \n       \\begin{align}\n       d_\\textrm{chebyshev}(u,v;w) &:= \\lim_{p\\rightarrow \\infty}\n          \\left( \\sum_{i=1}^n w_i | u_i-v_i |^p \\right)^\\frac{1}{p} \\\\\n        &= \\max_{1 \\le i \\le n} 1_{w_i > 0} | u_i - v_i |\n       \\end{align}\n    \n    Parameters\n    ----------\n    u : (N,) array_like of floats\n        Input vector.\n    v : (N,) array_like of floats\n        Input vector.\n    w : (N,) array_like of floats, optional\n        Weight vector.  Default is ``None``, which gives all pairs\n        :math:`(u_i, v_i)` the same weight ``1.0``.\n    \n    Returns\n    -------\n    chebyshev : float\n        The Chebyshev distance between vectors `u` and `v`, optionally weighted\n        by `w`.\n    \n    References\n    ----------\n    .. [1] https://en.wikipedia.org/wiki/Chebyshev_distance\n    \n    Examples\n    --------\n    >>> from scipy.spatial import distance\n    >>> distance.chebyshev([1, 0, 0], [0, 1, 0])\n    1\n    >>> distance.chebyshev([1, 1, 0], [0, 1, 0])\n    1",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8b044b029d6685a9a4543158f0bebd46c7e263818b24fcfb76af02e6f8017c44",
            "fields": [
                {
                    "id": "nps8plzu",
                    "encoding": "",
                    "name": "u",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input vector.",
                    "type": "(N,) arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vzxqothd",
                    "encoding": "",
                    "name": "v",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input vector.",
                    "type": "(N,) arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "89_qiit7",
                    "encoding": "",
                    "name": "w",
                    "value": "",
                    "defaultValue": "",
                    "description": "Weight vector.  Default is ``None``, which gives all pairs\n:math:`(u_i, v_i)` the same weight ``1.0``.",
                    "type": "(N,) arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pkybp80d",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.distance.chebyshev",
                    "defaultValue": "scipy.spatial.distance.chebyshev",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7c6zyeew",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dfiayxo1",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "b1sg5y75",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tz8s4ksy",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.distance",
                    "defaultValue": "scipy.spatial.distance",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vuwuxyid",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bfyj0sti",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "dv5dec35",
            "name": "distance.cityblock",
            "description": "Compute the City Block (Manhattan) distance.\n    \n    Computes the Manhattan distance between two 1-D arrays `u` and `v`,\n    which is defined as\n    \n    .. math::\n    \n       \\sum_i {\\left| u_i - v_i \\right|}.\n    \n    Parameters\n    ----------\n    u : (N,) array_like\n        Input array.\n    v : (N,) array_like\n        Input array.\n    w : (N,) array_like, optional\n        The weights for each value in `u` and `v`. Default is None,\n        which gives each value a weight of 1.0\n    \n    Returns\n    -------\n    cityblock : double\n        The City Block (Manhattan) distance between vectors `u` and `v`.\n    \n    Examples\n    --------\n    >>> from scipy.spatial import distance\n    >>> distance.cityblock([1, 0, 0], [0, 1, 0])\n    2\n    >>> distance.cityblock([1, 0, 0], [0, 2, 0])\n    3\n    >>> distance.cityblock([1, 0, 0], [1, 1, 0])\n    1",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "0845ad730f4a1fcb8e117f54fb3b5a0dc07853b53928bcbb1aaaf03806f7288d",
            "fields": [
                {
                    "id": "metn_yr9",
                    "encoding": "",
                    "name": "u",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array.",
                    "type": "(N,) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "28p7unxz",
                    "encoding": "",
                    "name": "v",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array.",
                    "type": "(N,) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4d8a31j7",
                    "encoding": "",
                    "name": "w",
                    "value": "",
                    "defaultValue": "",
                    "description": "The weights for each value in `u` and `v`. Default is None,\nwhich gives each value a weight of 1.0",
                    "type": "(N,) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bzg9kbp4",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.distance.cityblock",
                    "defaultValue": "scipy.spatial.distance.cityblock",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rzc3jdzh",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vbj3qilz",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "3vwpe56y",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d28ey_z3",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.distance",
                    "defaultValue": "scipy.spatial.distance",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gq7hygha",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yovbui57",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ynnk6ls7",
            "name": "distance.correlation",
            "description": "Compute the correlation distance between two 1-D arrays.\n    \n    The correlation distance between `u` and `v`, is\n    defined as\n    \n    .. math::\n    \n        1 - \\frac{(u - \\bar{u}) \\cdot (v - \\bar{v})}\n                  {{\\|(u - \\bar{u})\\|}_2 {\\|(v - \\bar{v})\\|}_2}\n    \n    where :math:`\\bar{u}` is the mean of the elements of `u`\n    and :math:`x \\cdot y` is the dot product of :math:`x` and :math:`y`.\n    \n    Parameters\n    ----------\n    u : (N,) array_like of floats\n        Input array.\n    \n        .. deprecated:: 1.15.0\n           Complex `u` is deprecated and will raise an error in SciPy 1.17.0\n    v : (N,) array_like of floats\n        Input array.\n    \n        .. deprecated:: 1.15.0\n           Complex `v` is deprecated and will raise an error in SciPy 1.17.0\n    w : (N,) array_like of floats, optional\n        The weights for each value in `u` and `v`. Default is None,\n        which gives each value a weight of 1.0\n    centered : bool, optional\n        If True, `u` and `v` will be centered. Default is True.\n    \n    Returns\n    -------\n    correlation : double\n        The correlation distance between 1-D array `u` and `v`.\n    \n    Examples\n    --------\n    Find the correlation between two arrays.\n    \n    >>> from scipy.spatial.distance import correlation\n    >>> correlation([1, 0, 1], [1, 1, 0])\n    1.5\n    \n    Using a weighting array, the correlation can be calculated as:\n    \n    >>> correlation([1, 0, 1], [1, 1, 0], w=[0.9, 0.1, 0.1])\n    1.1\n    \n    If centering is not needed, the correlation can be calculated as:\n    \n    >>> correlation([1, 0, 1], [1, 1, 0], centered=False)\n    0.5",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "08489d8eb138ff0442ac2c5e3f02ab29d0d4e43d4949c516624310ff00b2e2bf",
            "fields": [
                {
                    "id": "ehfy766j",
                    "encoding": "",
                    "name": "u",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array.\n\n.. deprecated:: 1.15.0\n   Complex `u` is deprecated and will raise an error in SciPy 1.17.0",
                    "type": "(N,) arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "00c5ilzd",
                    "encoding": "",
                    "name": "v",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array.\n\n.. deprecated:: 1.15.0\n   Complex `v` is deprecated and will raise an error in SciPy 1.17.0",
                    "type": "(N,) arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w3dzlimm",
                    "encoding": "",
                    "name": "w",
                    "value": "",
                    "defaultValue": "",
                    "description": "The weights for each value in `u` and `v`. Default is None,\nwhich gives each value a weight of 1.0",
                    "type": "(N,) arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i18267oo",
                    "encoding": "",
                    "name": "centered",
                    "value": true,
                    "defaultValue": true,
                    "description": "If True, `u` and `v` will be centered. Default is True.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4z2gqx4l",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.distance.correlation",
                    "defaultValue": "scipy.spatial.distance.correlation",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xmapoeg0",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dmdmo8dx",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "spycdn87",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q_44_7ue",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.distance",
                    "defaultValue": "scipy.spatial.distance",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nt6azct4",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jz0c3nh4",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ig0s872_",
            "name": "distance.cosine",
            "description": "Compute the Cosine distance between 1-D arrays.\n    \n    The Cosine distance between `u` and `v`, is defined as\n    \n    .. math::\n    \n        1 - \\frac{u \\cdot v}\n                  {\\|u\\|_2 \\|v\\|_2}.\n    \n    where :math:`u \\cdot v` is the dot product of :math:`u` and\n    :math:`v`.\n    \n    Parameters\n    ----------\n    u : (N,) array_like of floats\n        Input array.\n    \n        .. deprecated:: 1.15.0\n           Complex `u` is deprecated and will raise an error in SciPy 1.17.0\n    v : (N,) array_like of floats\n        Input array.\n    \n        .. deprecated:: 1.15.0\n           Complex `v` is deprecated and will raise an error in SciPy 1.17.0\n    w : (N,) array_like of floats, optional\n        The weights for each value in `u` and `v`. Default is None,\n        which gives each value a weight of 1.0\n    \n    Returns\n    -------\n    cosine : double\n        The Cosine distance between vectors `u` and `v`.\n    \n    Examples\n    --------\n    >>> from scipy.spatial import distance\n    >>> distance.cosine([1, 0, 0], [0, 1, 0])\n    1.0\n    >>> distance.cosine([100, 0, 0], [0, 1, 0])\n    1.0\n    >>> distance.cosine([1, 1, 0], [0, 1, 0])\n    0.29289321881345254",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9acdd58399afb036ce14c143599fb800834356f875f00aa7d469d87ab8c94332",
            "fields": [
                {
                    "id": "yfgrcu2r",
                    "encoding": "",
                    "name": "u",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array.\n\n.. deprecated:: 1.15.0\n   Complex `u` is deprecated and will raise an error in SciPy 1.17.0",
                    "type": "(N,) arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y1w4qbjr",
                    "encoding": "",
                    "name": "v",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array.\n\n.. deprecated:: 1.15.0\n   Complex `v` is deprecated and will raise an error in SciPy 1.17.0",
                    "type": "(N,) arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lobqgkpn",
                    "encoding": "",
                    "name": "w",
                    "value": "",
                    "defaultValue": "",
                    "description": "The weights for each value in `u` and `v`. Default is None,\nwhich gives each value a weight of 1.0",
                    "type": "(N,) arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8uk33pd6",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.distance.cosine",
                    "defaultValue": "scipy.spatial.distance.cosine",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3g01nf6z",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w49kpjrg",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "9g5fjeye",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ea2w6nmg",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.distance",
                    "defaultValue": "scipy.spatial.distance",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "352g_5o3",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8fawcehv",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "lmf9ztsd",
            "name": "distance.dice",
            "description": "Compute the Dice dissimilarity between two boolean 1-D arrays.\n    \n    The Dice dissimilarity between `u` and `v`, is\n    \n    .. math::\n    \n         \\frac{c_{TF} + c_{FT}}\n              {2c_{TT} + c_{FT} + c_{TF}}\n    \n    where :math:`c_{ij}` is the number of occurrences of\n    :math:`\\mathtt{u[k]} = i` and :math:`\\mathtt{v[k]} = j` for\n    :math:`k < n`.\n    \n    Parameters\n    ----------\n    u : (N,) array_like, bool\n        Input 1-D array.\n    v : (N,) array_like, bool\n        Input 1-D array.\n    w : (N,) array_like, optional\n        The weights for each value in `u` and `v`. Default is None,\n        which gives each value a weight of 1.0\n    \n    Returns\n    -------\n    dice : double\n        The Dice dissimilarity between 1-D arrays `u` and `v`.\n    \n    Notes\n    -----\n    This function computes the Dice dissimilarity index. To compute the\n    Dice similarity index, convert one to the other with similarity =\n    1 - dissimilarity.\n    \n    Examples\n    --------\n    >>> from scipy.spatial import distance\n    >>> distance.dice([1, 0, 0], [0, 1, 0])\n    1.0\n    >>> distance.dice([1, 0, 0], [1, 1, 0])\n    0.3333333333333333\n    >>> distance.dice([1, 0, 0], [2, 0, 0])\n    -0.3333333333333333",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ae7a1e8acbae83521f43f4d27d37b383c150e2871faa254e1989c4e3af3f97d4",
            "fields": [
                {
                    "id": "mo8a4jlr",
                    "encoding": "",
                    "name": "u",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input 1-D array.",
                    "type": "(N,) arraylike, bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r8o8s2tv",
                    "encoding": "",
                    "name": "v",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input 1-D array.",
                    "type": "(N,) arraylike, bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m8xkav8e",
                    "encoding": "",
                    "name": "w",
                    "value": "",
                    "defaultValue": "",
                    "description": "The weights for each value in `u` and `v`. Default is None,\nwhich gives each value a weight of 1.0",
                    "type": "(N,) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "buqz0ply",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.distance.dice",
                    "defaultValue": "scipy.spatial.distance.dice",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qfohb88h",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tzadtx74",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "l3jn8cou",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uu1ds5rj",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.distance",
                    "defaultValue": "scipy.spatial.distance",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d7f5fg1t",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uyfgfvlc",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "wsi3yqkv",
            "name": "distance.directed_hausdorff",
            "description": "Compute the directed Hausdorff distance between two 2-D arrays.\n    \n    Distances between pairs are calculated using a Euclidean metric.\n    \n    Parameters\n    ----------\n    u : (M,N) array_like\n        Input array with M points in N dimensions.\n    v : (O,N) array_like\n        Input array with O points in N dimensions.\n    rng : int or `numpy.random.Generator` or None, optional\n        Pseudorandom number generator state. Default is 0 so the\n        shuffling of `u` and `v` is reproducible.\n    \n        If `rng` is passed by keyword, types other than `numpy.random.Generator` are\n        passed to `numpy.random.default_rng` to instantiate a ``Generator``.\n        If `rng` is already a ``Generator`` instance, then the provided instance is\n        used.\n    \n        If this argument is passed by position or `seed` is passed by keyword,\n        legacy behavior for the argument `seed` applies:\n    \n        - If `seed` is None, a new ``RandomState`` instance is used. The state is\n          initialized using data from ``/dev/urandom`` (or the Windows analogue)\n          if available or from the system clock otherwise.\n        - If `seed` is an int, a new ``RandomState`` instance is used,\n          seeded with `seed`.\n        - If `seed` is already a ``Generator`` or ``RandomState`` instance, then\n          that instance is used.\n    \n        .. versionchanged:: 1.15.0\n            As part of the `SPEC-007 <https://scientific-python.org/specs/spec-0007/>`_\n            transition from use of `numpy.random.RandomState` to\n            `numpy.random.Generator`, this keyword was changed from `seed` to `rng`.\n            For an interim period, both keywords will continue to work, although only\n            one may be specified at a time. After the interim period, function calls\n            using the `seed` keyword will emit warnings. The behavior of both `seed`\n            and `rng` are outlined above, but only the `rng` keyword should be used in\n            new code.\n    \n    Returns\n    -------\n    d : double\n        The directed Hausdorff distance between arrays `u` and `v`,\n    \n    index_1 : int\n        index of point contributing to Hausdorff pair in `u`\n    \n    index_2 : int\n        index of point contributing to Hausdorff pair in `v`\n    \n    Raises\n    ------\n    ValueError\n        An exception is thrown if `u` and `v` do not have\n        the same number of columns.\n    \n    See Also\n    --------\n    scipy.spatial.procrustes : Another similarity test for two data sets\n    \n    Notes\n    -----\n    Uses the early break technique and the random sampling approach\n    described by [1]_. Although worst-case performance is ``O(m * o)``\n    (as with the brute force algorithm), this is unlikely in practice\n    as the input data would have to require the algorithm to explore\n    every single point interaction, and after the algorithm shuffles\n    the input points at that. The best case performance is O(m), which\n    is satisfied by selecting an inner loop distance that is less than\n    cmax and leads to an early break as often as possible. The authors\n    have formally shown that the average runtime is closer to O(m).\n    \n    .. versionadded:: 0.19.0\n    \n    References\n    ----------\n    .. [1] A. A. Taha and A. Hanbury, \"An efficient algorithm for\n           calculating the exact Hausdorff distance.\" IEEE Transactions On\n           Pattern Analysis And Machine Intelligence, vol. 37 pp. 2153-63,\n           2015.\n    \n    Examples\n    --------\n    Find the directed Hausdorff distance between two 2-D arrays of\n    coordinates:\n    \n    >>> from scipy.spatial.distance import directed_hausdorff\n    >>> import numpy as np\n    >>> u = np.array([(1.0, 0.0),\n    ...               (0.0, 1.0),\n    ...               (-1.0, 0.0),\n    ...               (0.0, -1.0)])\n    >>> v = np.array([(2.0, 0.0),\n    ...               (0.0, 2.0),\n    ...               (-2.0, 0.0),\n    ...               (0.0, -4.0)])\n    \n    >>> directed_hausdorff(u, v)[0]\n    2.23606797749979\n    >>> directed_hausdorff(v, u)[0]\n    3.0\n    \n    Find the general (symmetric) Hausdorff distance between two 2-D\n    arrays of coordinates:\n    \n    >>> max(directed_hausdorff(u, v)[0], directed_hausdorff(v, u)[0])\n    3.0\n    \n    Find the indices of the points that generate the Hausdorff distance\n    (the Hausdorff pair):\n    \n    >>> directed_hausdorff(v, u)[1:]\n    (3, 3)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f88c18b446e4283ccc4a1f69e22919cc8afd131c92cb7c0bd670c5696f5bc2ae",
            "fields": [
                {
                    "id": "sw9c_9so",
                    "encoding": "",
                    "name": "u",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array with M points in N dimensions.",
                    "type": "(M,N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ksh8lm7q",
                    "encoding": "",
                    "name": "v",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array with O points in N dimensions.",
                    "type": "(O,N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xh1pj7gv",
                    "encoding": "",
                    "name": "rng",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Pseudorandom number generator state. Default is 0 so the\nshuffling of `u` and `v` is reproducible.\n\nIf `rng` is passed by keyword, types other than `numpy.random.Generator` are\npassed to `numpy.random.default_rng` to instantiate a ``Generator``.\nIf `rng` is already a ``Generator`` instance, then the provided instance is\nused.\n\nIf this argument is passed by position or `seed` is passed by keyword,\nlegacy behavior for the argument `seed` applies:\n\n- If `seed` is None, a new ``RandomState`` instance is used. The state is\n  initialized using data from ``/dev/urandom`` (or the Windows analogue)\n  if available or from the system clock otherwise.\n- If `seed` is an int, a new ``RandomState`` instance is used,\n  seeded with `seed`.\n- If `seed` is already a ``Generator`` or ``RandomState`` instance, then\n  that instance is used.\n\n.. versionchanged:: 1.15.0\n    As part of the `SPEC-007 <https://scientific-python.org/specs/spec-0007/>`_\n    transition from use of `numpy.random.RandomState` to\n    `numpy.random.Generator`, this keyword was changed from `seed` to `rng`.\n    For an interim period, both keywords will continue to work, although only\n    one may be specified at a time. After the interim period, function calls\n    using the `seed` keyword will emit warnings. The behavior of both `seed`\n    and `rng` are outlined above, but only the `rng` keyword should be used in\n    new code.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kb7qdylu",
                    "encoding": "",
                    "name": "seed",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "68jzror1",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.distance.directed_hausdorff",
                    "defaultValue": "scipy.spatial.distance.directed_hausdorff",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9svfop9n",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_l12r6pv",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "qczvp0do",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "erwmfr_0",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.distance",
                    "defaultValue": "scipy.spatial.distance",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xvq4di3h",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hp91zfgu",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "b060khhe",
            "name": "distance.euclidean",
            "description": "Computes the Euclidean distance between two 1-D arrays.\n    \n    The Euclidean distance between 1-D arrays `u` and `v`, is defined as\n    \n    .. math::\n    \n       {\\|u-v\\|}_2\n    \n       \\left(\\sum{(w_i |(u_i - v_i)|^2)}\\right)^{1/2}\n    \n    Parameters\n    ----------\n    u : (N,) array_like\n        Input array.\n    v : (N,) array_like\n        Input array.\n    w : (N,) array_like, optional\n        The weights for each value in `u` and `v`. Default is None,\n        which gives each value a weight of 1.0\n    \n    Returns\n    -------\n    euclidean : double\n        The Euclidean distance between vectors `u` and `v`.\n    \n    Examples\n    --------\n    >>> from scipy.spatial import distance\n    >>> distance.euclidean([1, 0, 0], [0, 1, 0])\n    1.4142135623730951\n    >>> distance.euclidean([1, 1, 0], [0, 1, 0])\n    1.0",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a0ee575442c15c89ac62228a65abd057918ee75a12e2907e40bec0773f5b71d1",
            "fields": [
                {
                    "id": "a4qs9kn1",
                    "encoding": "",
                    "name": "u",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array.",
                    "type": "(N,) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8nab2ii2",
                    "encoding": "",
                    "name": "v",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array.",
                    "type": "(N,) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vzg03y5f",
                    "encoding": "",
                    "name": "w",
                    "value": "",
                    "defaultValue": "",
                    "description": "The weights for each value in `u` and `v`. Default is None,\nwhich gives each value a weight of 1.0",
                    "type": "(N,) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8sbpklgl",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.distance.euclidean",
                    "defaultValue": "scipy.spatial.distance.euclidean",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7636kfc1",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m53ze2aa",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "5zyewtnp",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "39e9js2s",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.distance",
                    "defaultValue": "scipy.spatial.distance",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h07h_2hc",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9d8u949l",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "bosodure",
            "name": "distance.hamming",
            "description": "Compute the Hamming distance between two 1-D arrays.\n    \n    The Hamming distance between 1-D arrays `u` and `v`, is simply the\n    proportion of disagreeing components in `u` and `v`. If `u` and `v` are\n    boolean vectors, the Hamming distance is\n    \n    .. math::\n    \n       \\frac{c_{01} + c_{10}}{n}\n    \n    where :math:`c_{ij}` is the number of occurrences of\n    :math:`\\mathtt{u[k]} = i` and :math:`\\mathtt{v[k]} = j` for\n    :math:`k < n`.\n    \n    Parameters\n    ----------\n    u : (N,) array_like\n        Input array.\n    v : (N,) array_like\n        Input array.\n    w : (N,) array_like, optional\n        The weights for each value in `u` and `v`. Default is None,\n        which gives each value a weight of 1.0\n    \n    Returns\n    -------\n    hamming : double\n        The Hamming distance between vectors `u` and `v`.\n    \n    Examples\n    --------\n    >>> from scipy.spatial import distance\n    >>> distance.hamming([1, 0, 0], [0, 1, 0])\n    0.66666666666666663\n    >>> distance.hamming([1, 0, 0], [1, 1, 0])\n    0.33333333333333331\n    >>> distance.hamming([1, 0, 0], [2, 0, 0])\n    0.33333333333333331\n    >>> distance.hamming([1, 0, 0], [3, 0, 0])\n    0.33333333333333331",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "cdb07344d33169bf8eca479a40899f13bebf774eb490e41b1f101b681177d2d2",
            "fields": [
                {
                    "id": "qxcm0zct",
                    "encoding": "",
                    "name": "u",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array.",
                    "type": "(N,) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "newpye05",
                    "encoding": "",
                    "name": "v",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array.",
                    "type": "(N,) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nfbxw82d",
                    "encoding": "",
                    "name": "w",
                    "value": "",
                    "defaultValue": "",
                    "description": "The weights for each value in `u` and `v`. Default is None,\nwhich gives each value a weight of 1.0",
                    "type": "(N,) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "01hc781h",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.distance.hamming",
                    "defaultValue": "scipy.spatial.distance.hamming",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tit0geh7",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n24my4h1",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "styt03be",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uktgc6xv",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.distance",
                    "defaultValue": "scipy.spatial.distance",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "msth6oi7",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w9i5s0gc",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "82w68oqn",
            "name": "distance.is_valid_dm",
            "description": "Return True if input array is a valid distance matrix.\n    \n    Distance matrices must be 2-dimensional numpy arrays.\n    They must have a zero-diagonal, and they must be symmetric.\n    \n    Parameters\n    ----------\n    D : array_like\n        The candidate object to test for validity.\n    tol : float, optional\n        The distance matrix should be symmetric. `tol` is the maximum\n        difference between entries ``ij`` and ``ji`` for the distance\n        metric to be considered symmetric.\n    throw : bool, optional\n        An exception is thrown if the distance matrix passed is not valid.\n    name : str, optional\n        The name of the variable to checked. This is useful if\n        throw is set to True so the offending variable can be identified\n        in the exception message when an exception is thrown.\n    warning : bool, optional\n        Instead of throwing an exception, a warning message is\n        raised.\n    \n    Returns\n    -------\n    valid : bool\n        True if the variable `D` passed is a valid distance matrix.\n    \n    Notes\n    -----\n    Small numerical differences in `D` and `D.T` and non-zeroness of\n    the diagonal are ignored if they are within the tolerance specified\n    by `tol`.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.spatial.distance import is_valid_dm\n    \n    This matrix is a valid distance matrix.\n    \n    >>> d = np.array([[0.0, 1.1, 1.2, 1.3],\n    ...               [1.1, 0.0, 1.0, 1.4],\n    ...               [1.2, 1.0, 0.0, 1.5],\n    ...               [1.3, 1.4, 1.5, 0.0]])\n    >>> is_valid_dm(d)\n    True\n    \n    In the following examples, the input is not a valid distance matrix.\n    \n    Not square:\n    \n    >>> is_valid_dm([[0, 2, 2], [2, 0, 2]])\n    False\n    \n    Nonzero diagonal element:\n    \n    >>> is_valid_dm([[0, 1, 1], [1, 2, 3], [1, 3, 0]])\n    False\n    \n    Not symmetric:\n    \n    >>> is_valid_dm([[0, 1, 3], [2, 0, 1], [3, 1, 0]])\n    False",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "fba1055fdf1e29ff0e625479a4acbb0b2786760c726afc639056477a241391bc",
            "fields": [
                {
                    "id": "rcuf6lv2",
                    "encoding": "",
                    "name": "D",
                    "value": "",
                    "defaultValue": "",
                    "description": "The candidate object to test for validity.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wccv5th6",
                    "encoding": "",
                    "name": "tol",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "The distance matrix should be symmetric. `tol` is the maximum\ndifference between entries ``ij`` and ``ji`` for the distance\nmetric to be considered symmetric.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l494561k",
                    "encoding": "",
                    "name": "throw",
                    "value": false,
                    "defaultValue": false,
                    "description": "An exception is thrown if the distance matrix passed is not valid.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ay37s1k6",
                    "encoding": "",
                    "name": "name",
                    "value": "D",
                    "defaultValue": "D",
                    "description": "The name of the variable to checked. This is useful if\nthrow is set to True so the offending variable can be identified\nin the exception message when an exception is thrown.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5s3arqbj",
                    "encoding": "",
                    "name": "warning",
                    "value": false,
                    "defaultValue": false,
                    "description": "Instead of throwing an exception, a warning message is\nraised.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y51izww7",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.distance.is_valid_dm",
                    "defaultValue": "scipy.spatial.distance.is_valid_dm",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h3k22iln",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6pccvpas",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "hb28ad12",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8r3fy2xm",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.distance",
                    "defaultValue": "scipy.spatial.distance",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s0u2spzw",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gstvw825",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "_in0g_tm",
            "name": "distance.is_valid_y",
            "description": "Return True if the input array is a valid condensed distance matrix.\n    \n    Condensed distance matrices must be 1-dimensional numpy arrays.\n    Their length must be a binomial coefficient :math:`{n \\choose 2}`\n    for some positive integer n.\n    \n    Parameters\n    ----------\n    y : array_like\n        The condensed distance matrix.\n    warning : bool, optional\n        Invokes a warning if the variable passed is not a valid\n        condensed distance matrix. The warning message explains why\n        the distance matrix is not valid.  `name` is used when\n        referencing the offending variable.\n    throw : bool, optional\n        Throws an exception if the variable passed is not a valid\n        condensed distance matrix.\n    name : str, optional\n        Used when referencing the offending variable in the\n        warning or exception message.\n    \n    Returns\n    -------\n    bool\n        True if the input array is a valid condensed distance matrix,\n        False otherwise.\n    \n    Examples\n    --------\n    >>> from scipy.spatial.distance import is_valid_y\n    \n    This vector is a valid condensed distance matrix.  The length is 6,\n    which corresponds to ``n = 4``, since ``4*(4 - 1)/2`` is 6.\n    \n    >>> v = [1.0, 1.2, 1.0, 0.5, 1.3, 0.9]\n    >>> is_valid_y(v)\n    True\n    \n    An input vector with length, say, 7, is not a valid condensed distance\n    matrix.\n    \n    >>> is_valid_y([1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7])\n    False",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4e954ebb3a3f245f2f10eb7a6c7b7093e4d4b5ff04b7ca38355c404f7110d683",
            "fields": [
                {
                    "id": "ju9r664k",
                    "encoding": "",
                    "name": "y",
                    "value": "",
                    "defaultValue": "",
                    "description": "The condensed distance matrix.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7sf1zd2k",
                    "encoding": "",
                    "name": "warning",
                    "value": false,
                    "defaultValue": false,
                    "description": "Invokes a warning if the variable passed is not a valid\ncondensed distance matrix. The warning message explains why\nthe distance matrix is not valid.  `name` is used when\nreferencing the offending variable.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vnjlkmo7",
                    "encoding": "",
                    "name": "throw",
                    "value": false,
                    "defaultValue": false,
                    "description": "Throws an exception if the variable passed is not a valid\ncondensed distance matrix.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a3fyx1bq",
                    "encoding": "",
                    "name": "name",
                    "value": "",
                    "defaultValue": "",
                    "description": "Used when referencing the offending variable in the\nwarning or exception message.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "68xm797k",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.distance.is_valid_y",
                    "defaultValue": "scipy.spatial.distance.is_valid_y",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jtx5lbkv",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eal3drs5",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "3e9f_kry",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0hkx0nih",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.distance",
                    "defaultValue": "scipy.spatial.distance",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p15ta3h_",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q5oj7fsz",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "8_ev7753",
            "name": "distance.jaccard",
            "description": "Compute the Jaccard dissimilarity between two boolean vectors.\n    \n    Given boolean vectors :math:`u \\equiv (u_1, \\cdots, u_n)`\n    and :math:`v \\equiv (v_1, \\cdots, v_n)` that are not both zero,\n    their *Jaccard dissimilarity* is defined as ([1]_, p. 26)\n    \n    .. math::\n    \n       d_\\textrm{jaccard}(u, v) := \\frac{c_{10} + c_{01}}\n                                        {c_{11} + c_{10} + c_{01}}\n    \n    where\n    \n    .. math::\n    \n       c_{ij} := \\sum_{1 \\le k \\le n, u_k=i, v_k=j} 1\n    \n    for :math:`i, j \\in \\{ 0, 1\\}`.  If :math:`u` and :math:`v` are both zero,\n    their Jaccard dissimilarity is defined to be zero. [2]_\n    \n    If a (non-negative) weight vector :math:`w \\equiv (w_1, \\cdots, w_n)`\n    is supplied, the *weighted Jaccard dissimilarity* is defined similarly\n    but with :math:`c_{ij}` replaced by\n    \n    .. math::\n    \n       \\tilde{c}_{ij} := \\sum_{1 \\le k \\le n, u_k=i, v_k=j} w_k\n    \n    Parameters\n    ----------\n    u : (N,) array_like of bools\n        Input vector.\n    v : (N,) array_like of bools\n        Input vector.\n    w : (N,) array_like of floats, optional\n        Weights for each pair of :math:`(u_k, v_k)`.  Default is ``None``,\n        which gives each pair a weight of ``1.0``.\n    \n    Returns\n    -------\n    jaccard : float\n        The Jaccard dissimilarity between vectors `u` and `v`, optionally\n        weighted by `w` if supplied.\n    \n    Notes\n    -----\n    The Jaccard dissimilarity satisfies the triangle inequality and is\n    qualified as a metric. [2]_\n    \n    The *Jaccard index*, or *Jaccard similarity coefficient*, is equal to\n    one minus the Jaccard dissimilarity. [3]_\n    \n    The dissimilarity between general (finite) sets may be computed by\n    encoding them as boolean vectors and computing the dissimilarity\n    between the encoded vectors.\n    For example, subsets :math:`A,B` of :math:`\\{ 1, 2, ..., n \\}` may be\n    encoded into boolean vectors :math:`u, v` by setting\n    :math:`u_k := 1_{k \\in A}`, :math:`v_k := 1_{k \\in B}`\n    for :math:`k = 1,2,\\cdots,n`.\n    \n    .. versionchanged:: 1.2.0\n       Previously, if all (positively weighted) elements in `u` and `v` are\n       zero, the function would return ``nan``.  This was changed to return\n       ``0`` instead.\n    \n    .. versionchanged:: 1.15.0\n       Non-0/1 numeric input used to produce an ad hoc result.  Since 1.15.0,\n       numeric input is converted to Boolean before computation.\n    \n    References\n    ----------\n    .. [1] Kaufman, L. and Rousseeuw, P. J.  (1990).  \"Finding Groups in Data:\n           An Introduction to Cluster Analysis.\"  John Wiley & Sons, Inc.\n    .. [2] Kosub, S.  (2019).  \"A note on the triangle inequality for the\n           Jaccard distance.\"  *Pattern Recognition Letters*, 120:36-38.\n    .. [3] https://en.wikipedia.org/wiki/Jaccard_index\n    \n    Examples\n    --------\n    >>> from scipy.spatial import distance\n    \n    Non-zero vectors with no matching 1s have dissimilarity of 1.0:\n    \n    >>> distance.jaccard([1, 0, 0], [0, 1, 0])\n    1.0\n    \n    Vectors with some matching 1s have dissimilarity less than 1.0:\n    \n    >>> distance.jaccard([1, 0, 0, 0], [1, 1, 1, 0])\n    0.6666666666666666\n    \n    Identical vectors, including zero vectors, have dissimilarity of 0.0:\n    \n    >>> distance.jaccard([1, 0, 0], [1, 0, 0])\n    0.0\n    >>> distance.jaccard([0, 0, 0], [0, 0, 0])\n    0.0\n    \n    The following example computes the dissimilarity from a confusion matrix\n    directly by setting the weight vector to the frequency of True Positive,\n    False Negative, False Positive, and True Negative:\n    \n    >>> distance.jaccard([1, 1, 0, 0], [1, 0, 1, 0], [31, 41, 59, 26])\n    0.7633587786259542  # (41+59)/(31+41+59)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f5ec16481a425150123e8dad05a0268aaef235489b9fcf99f28bf24700d51ff9",
            "fields": [
                {
                    "id": "_shjc7s8",
                    "encoding": "",
                    "name": "u",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input vector.",
                    "type": "(N,) arraylike of bools",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7j4fnuyp",
                    "encoding": "",
                    "name": "v",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input vector.",
                    "type": "(N,) arraylike of bools",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "donr06_6",
                    "encoding": "",
                    "name": "w",
                    "value": "",
                    "defaultValue": "",
                    "description": "Weights for each pair of :math:`(u_k, v_k)`.  Default is ``None``,\nwhich gives each pair a weight of ``1.0``.",
                    "type": "(N,) arraylike of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m39f8muy",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.distance.jaccard",
                    "defaultValue": "scipy.spatial.distance.jaccard",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rxm_xobl",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zdyzwa5w",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "iprc41ou",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "574fxjwx",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.distance",
                    "defaultValue": "scipy.spatial.distance",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nx2dbfwf",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eioqckoo",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "xun76vsl",
            "name": "distance.jensenshannon",
            "description": "Compute the Jensen-Shannon distance (metric) between\n    two probability arrays. This is the square root\n    of the Jensen-Shannon divergence.\n    \n    The Jensen-Shannon distance between two probability\n    vectors `p` and `q` is defined as,\n    \n    .. math::\n    \n       \\sqrt{\\frac{D(p \\parallel m) + D(q \\parallel m)}{2}}\n    \n    where :math:`m` is the pointwise mean of :math:`p` and :math:`q`\n    and :math:`D` is the Kullback-Leibler divergence.\n    \n    This routine will normalize `p` and `q` if they don't sum to 1.0.\n    \n    Parameters\n    ----------\n    p : (N,) array_like\n        left probability vector\n    q : (N,) array_like\n        right probability vector\n    base : double, optional\n        the base of the logarithm used to compute the output\n        if not given, then the routine uses the default base of\n        scipy.stats.entropy.\n    axis : int, optional\n        Axis along which the Jensen-Shannon distances are computed. The default\n        is 0.\n    \n        .. versionadded:: 1.7.0\n    keepdims : bool, optional\n        If this is set to `True`, the reduced axes are left in the\n        result as dimensions with size one. With this option,\n        the result will broadcast correctly against the input array.\n        Default is False.\n    \n        .. versionadded:: 1.7.0\n    \n    Returns\n    -------\n    js : double or ndarray\n        The Jensen-Shannon distances between `p` and `q` along the `axis`.\n    \n    Notes\n    -----\n    \n    .. versionadded:: 1.2.0\n    \n    Examples\n    --------\n    >>> from scipy.spatial import distance\n    >>> import numpy as np\n    >>> distance.jensenshannon([1.0, 0.0, 0.0], [0.0, 1.0, 0.0], 2.0)\n    1.0\n    >>> distance.jensenshannon([1.0, 0.0], [0.5, 0.5])\n    0.46450140402245893\n    >>> distance.jensenshannon([1.0, 0.0, 0.0], [1.0, 0.0, 0.0])\n    0.0\n    >>> a = np.array([[1, 2, 3, 4],\n    ...               [5, 6, 7, 8],\n    ...               [9, 10, 11, 12]])\n    >>> b = np.array([[13, 14, 15, 16],\n    ...               [17, 18, 19, 20],\n    ...               [21, 22, 23, 24]])\n    >>> distance.jensenshannon(a, b, axis=0)\n    array([0.1954288, 0.1447697, 0.1138377, 0.0927636])\n    >>> distance.jensenshannon(a, b, axis=1)\n    array([0.1402339, 0.0399106, 0.0201815])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e134f6b127380917caf563483d77ab5dcf4750a61a59fcf95d478128af7e95ce",
            "fields": [
                {
                    "id": "k4bk6bir",
                    "encoding": "",
                    "name": "p",
                    "value": "",
                    "defaultValue": "",
                    "description": "left probability vector",
                    "type": "(N,) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eb902tk6",
                    "encoding": "",
                    "name": "q",
                    "value": "",
                    "defaultValue": "",
                    "description": "right probability vector",
                    "type": "(N,) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0ujnlc0r",
                    "encoding": "",
                    "name": "base",
                    "value": "",
                    "defaultValue": "",
                    "description": "the base of the logarithm used to compute the output\nif not given, then the routine uses the default base of\nscipy.stats.entropy.",
                    "type": "double",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xa6qb9eq",
                    "encoding": "",
                    "name": "axis",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Axis along which the Jensen-Shannon distances are computed. The default\nis 0.\n\n.. versionadded:: 1.7.0",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9xl5m6ue",
                    "encoding": "",
                    "name": "keepdims",
                    "value": false,
                    "defaultValue": false,
                    "description": "If this is set to `True`, the reduced axes are left in the\nresult as dimensions with size one. With this option,\nthe result will broadcast correctly against the input array.\nDefault is False.\n\n.. versionadded:: 1.7.0",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g5_yqfo_",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.distance.jensenshannon",
                    "defaultValue": "scipy.spatial.distance.jensenshannon",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3n2qrttv",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gron6_uj",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "zf8evves",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "10rc6gcx",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.distance",
                    "defaultValue": "scipy.spatial.distance",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ekymsvha",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qlg6enci",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "6mw509qp",
            "name": "distance.kulczynski1",
            "description": "Compute the Kulczynski 1 dissimilarity between two boolean 1-D arrays.\n    \n    .. deprecated:: 1.15.0\n       This function is deprecated and will be removed in SciPy 1.17.0.\n       Replace usage of ``kulczynski1(u, v)`` with ``1/jaccard(u, v) - 1``.\n    \n    The Kulczynski 1 dissimilarity between two boolean 1-D arrays `u` and `v`\n    of length ``n``, is defined as\n    \n    .. math::\n    \n         \\frac{c_{11}}\n              {c_{01} + c_{10}}\n    \n    where :math:`c_{ij}` is the number of occurrences of\n    :math:`\\mathtt{u[k]} = i` and :math:`\\mathtt{v[k]} = j` for\n    :math:`k \\in {0, 1, ..., n-1}`.\n    \n    Parameters\n    ----------\n    u : (N,) array_like, bool\n        Input array.\n    v : (N,) array_like, bool\n        Input array.\n    w : (N,) array_like, optional\n        The weights for each value in `u` and `v`. Default is None,\n        which gives each value a weight of 1.0\n    \n    Returns\n    -------\n    kulczynski1 : float\n        The Kulczynski 1 distance between vectors `u` and `v`.\n    \n    Notes\n    -----\n    This measure has a minimum value of 0 and no upper limit.\n    It is un-defined when there are no non-matches.\n    \n    .. versionadded:: 1.8.0\n    \n    References\n    ----------\n    .. [1] Kulczynski S. et al. Bulletin\n           International de l'Academie Polonaise des Sciences\n           et des Lettres, Classe des Sciences Mathematiques\n           et Naturelles, Serie B (Sciences Naturelles). 1927;\n           Supplement II: 57-203.\n    \n    Examples\n    --------\n    >>> from scipy.spatial import distance\n    >>> distance.kulczynski1([1, 0, 0], [0, 1, 0])\n    0.0\n    >>> distance.kulczynski1([True, False, False], [True, True, False])\n    1.0\n    >>> distance.kulczynski1([True, False, False], [True])\n    0.5\n    >>> distance.kulczynski1([1, 0, 0], [3, 1, 0])\n    -3.0",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5a2185ba2a720db78d972dc33d4f900cc7b7ddf21a8d7e416b848b1007e09e1d",
            "fields": [
                {
                    "id": "tgk1cj0e",
                    "encoding": "",
                    "name": "u",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array.",
                    "type": "(N,) arraylike, bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "my3qrrnr",
                    "encoding": "",
                    "name": "v",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array.",
                    "type": "(N,) arraylike, bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9wahr8h_",
                    "encoding": "",
                    "name": "w",
                    "value": "",
                    "defaultValue": "",
                    "description": "The weights for each value in `u` and `v`. Default is None,\nwhich gives each value a weight of 1.0",
                    "type": "(N,) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hdtzku_6",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.distance.kulczynski1",
                    "defaultValue": "scipy.spatial.distance.kulczynski1",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tazwapha",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nls3g8y6",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "17vtgp1u",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "is3x6uoo",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.distance",
                    "defaultValue": "scipy.spatial.distance",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ibysh44u",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_w3vvk21",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "3x8ltipc",
            "name": "distance.mahalanobis",
            "description": "Compute the Mahalanobis distance between two 1-D arrays.\n    \n    The Mahalanobis distance between 1-D arrays `u` and `v`, is defined as\n    \n    .. math::\n    \n       \\sqrt{ (u-v) V^{-1} (u-v)^T }\n    \n    where ``V`` is the covariance matrix.  Note that the argument `VI`\n    is the inverse of ``V``.\n    \n    Parameters\n    ----------\n    u : (N,) array_like\n        Input array.\n    v : (N,) array_like\n        Input array.\n    VI : array_like\n        The inverse of the covariance matrix.\n    \n    Returns\n    -------\n    mahalanobis : double\n        The Mahalanobis distance between vectors `u` and `v`.\n    \n    Examples\n    --------\n    >>> from scipy.spatial import distance\n    >>> iv = [[1, 0.5, 0.5], [0.5, 1, 0.5], [0.5, 0.5, 1]]\n    >>> distance.mahalanobis([1, 0, 0], [0, 1, 0], iv)\n    1.0\n    >>> distance.mahalanobis([0, 2, 0], [0, 1, 0], iv)\n    1.0\n    >>> distance.mahalanobis([2, 0, 0], [0, 1, 0], iv)\n    1.7320508075688772",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "56474975ed9b867c730147f426b3fe8011f567a262cdf421ec121b5e60e1f394",
            "fields": [
                {
                    "id": "1b_hb_7i",
                    "encoding": "",
                    "name": "u",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array.",
                    "type": "(N,) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gtu03jsm",
                    "encoding": "",
                    "name": "v",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array.",
                    "type": "(N,) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l3na4tka",
                    "encoding": "",
                    "name": "VI",
                    "value": "",
                    "defaultValue": "",
                    "description": "The inverse of the covariance matrix.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xa0lrac9",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.distance.mahalanobis",
                    "defaultValue": "scipy.spatial.distance.mahalanobis",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qcowq8ua",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f8b4qnsf",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "b29jybrk",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xwvob71z",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.distance",
                    "defaultValue": "scipy.spatial.distance",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qcq5w4rh",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_uzl5pew",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "zukx1zqu",
            "name": "distance.minkowski",
            "description": "Compute the Minkowski distance between two 1-D arrays.\n    \n    The Minkowski distance between 1-D arrays `u` and `v`,\n    is defined as\n    \n    .. math::\n    \n       {\\|u-v\\|}_p = (\\sum{|u_i - v_i|^p})^{1/p}.\n    \n    \n       \\left(\\sum{w_i(|(u_i - v_i)|^p)}\\right)^{1/p}.\n    \n    Parameters\n    ----------\n    u : (N,) array_like\n        Input array.\n    v : (N,) array_like\n        Input array.\n    p : scalar\n        The order of the norm of the difference :math:`{\\|u-v\\|}_p`. Note\n        that for :math:`0 < p < 1`, the triangle inequality only holds with\n        an additional multiplicative factor, i.e. it is only a quasi-metric.\n    w : (N,) array_like, optional\n        The weights for each value in `u` and `v`. Default is None,\n        which gives each value a weight of 1.0\n    \n    Returns\n    -------\n    minkowski : double\n        The Minkowski distance between vectors `u` and `v`.\n    \n    Examples\n    --------\n    >>> from scipy.spatial import distance\n    >>> distance.minkowski([1, 0, 0], [0, 1, 0], 1)\n    2.0\n    >>> distance.minkowski([1, 0, 0], [0, 1, 0], 2)\n    1.4142135623730951\n    >>> distance.minkowski([1, 0, 0], [0, 1, 0], 3)\n    1.2599210498948732\n    >>> distance.minkowski([1, 1, 0], [0, 1, 0], 1)\n    1.0\n    >>> distance.minkowski([1, 1, 0], [0, 1, 0], 2)\n    1.0\n    >>> distance.minkowski([1, 1, 0], [0, 1, 0], 3)\n    1.0",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "da5863001c7a3c827cc351a0b62b3339fa5eb15d4c68a2fdb2870e1e377d5831",
            "fields": [
                {
                    "id": "jcjzpdl5",
                    "encoding": "",
                    "name": "u",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array.",
                    "type": "(N,) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o8pgps6y",
                    "encoding": "",
                    "name": "v",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array.",
                    "type": "(N,) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "onnd30xt",
                    "encoding": "",
                    "name": "p",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "The order of the norm of the difference :math:`{\\|u-v\\|}_p`. Note\nthat for :math:`0 < p < 1`, the triangle inequality only holds with\nan additional multiplicative factor, i.e. it is only a quasi-metric.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3xj4chz0",
                    "encoding": "",
                    "name": "w",
                    "value": "",
                    "defaultValue": "",
                    "description": "The weights for each value in `u` and `v`. Default is None,\nwhich gives each value a weight of 1.0",
                    "type": "(N,) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l0i2ak9r",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.distance.minkowski",
                    "defaultValue": "scipy.spatial.distance.minkowski",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_7j_dk7j",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pyiq32xe",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "iasmc3k_",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mhcebeus",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.distance",
                    "defaultValue": "scipy.spatial.distance",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wmdycym5",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "prvwollq",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "2683t3of",
            "name": "distance.num_obs_dm",
            "description": "Return the number of original observations that correspond to a\n    square, redundant distance matrix.\n    \n    Parameters\n    ----------\n    d : array_like\n        The target distance matrix.\n    \n    Returns\n    -------\n    num_obs_dm : int\n        The number of observations in the redundant distance matrix.\n    \n    Examples\n    --------\n    Find the number of original observations corresponding\n    to a square redundant distance matrix d.\n    \n    >>> from scipy.spatial.distance import num_obs_dm\n    >>> d = [[0, 100, 200], [100, 0, 150], [200, 150, 0]]\n    >>> num_obs_dm(d)\n    3",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2303a76f09c3205454cd360839b772e640501df6a81f4782fd6fb6249acc035f",
            "fields": [
                {
                    "id": "c2691wp0",
                    "encoding": "",
                    "name": "d",
                    "value": "",
                    "defaultValue": "",
                    "description": "The target distance matrix.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wjo5jvl4",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.distance.num_obs_dm",
                    "defaultValue": "scipy.spatial.distance.num_obs_dm",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xogwnikk",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b2qplm31",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "pmyyyz9p",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1szq6hvj",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.distance",
                    "defaultValue": "scipy.spatial.distance",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v6n042s0",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0llsj8oq",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "upitnyls",
            "name": "distance.num_obs_y",
            "description": "Return the number of original observations that correspond to a\n    condensed distance matrix.\n    \n    Parameters\n    ----------\n    Y : array_like\n        Condensed distance matrix.\n    \n    Returns\n    -------\n    n : int\n        The number of observations in the condensed distance matrix `Y`.\n    \n    Examples\n    --------\n    Find the number of original observations corresponding to a\n    condensed distance matrix Y.\n    \n    >>> from scipy.spatial.distance import num_obs_y\n    >>> Y = [1, 2, 3.5, 7, 10, 4]\n    >>> num_obs_y(Y)\n    4",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "cda629669fa07488acc9e307a8da55487c698f6ec0d2aa496dfbde3abd9d7c38",
            "fields": [
                {
                    "id": "jt54hd0_",
                    "encoding": "",
                    "name": "Y",
                    "value": "",
                    "defaultValue": "",
                    "description": "Condensed distance matrix.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y_wbnuun",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.distance.num_obs_y",
                    "defaultValue": "scipy.spatial.distance.num_obs_y",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oaevrmer",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1o53r3y8",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "5h_trvkf",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4fz0lbvf",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.distance",
                    "defaultValue": "scipy.spatial.distance",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y0u_ozpf",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_ahyozyq",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "c9ydtz_z",
            "name": "distance.pdist",
            "description": "Pairwise distances between observations in n-dimensional space.\n    \n    See Notes for common calling conventions.\n    \n    Parameters\n    ----------\n    X : array_like\n        An m by n array of m original observations in an\n        n-dimensional space.\n    metric : str or function, optional\n        The distance metric to use. The distance function can\n        be 'braycurtis', 'canberra', 'chebyshev', 'cityblock',\n        'correlation', 'cosine', 'dice', 'euclidean', 'hamming',\n        'jaccard', 'jensenshannon', 'kulczynski1',\n        'mahalanobis', 'matching', 'minkowski', 'rogerstanimoto',\n        'russellrao', 'seuclidean', 'sokalmichener', 'sokalsneath',\n        'sqeuclidean', 'yule'.\n    out : ndarray, optional\n        The output array.\n        If not None, condensed distance matrix Y is stored in this array.\n    **kwargs : dict, optional\n        Extra arguments to `metric`: refer to each metric documentation for a\n        list of all possible arguments.\n    \n        Some possible arguments:\n    \n        p : scalar\n        The p-norm to apply for Minkowski, weighted and unweighted.\n        Default: 2.\n    \n        w : ndarray\n        The weight vector for metrics that support weights (e.g., Minkowski).\n    \n        V : ndarray\n        The variance vector for standardized Euclidean.\n        Default: var(X, axis=0, ddof=1)\n    \n        VI : ndarray\n        The inverse of the covariance matrix for Mahalanobis.\n        Default: inv(cov(X.T)).T\n    \n    Returns\n    -------\n    Y : ndarray\n        Returns a condensed distance matrix Y. For each :math:`i` and :math:`j`\n        (where :math:`i<j<m`),where m is the number of original observations.\n        The metric ``dist(u=X[i], v=X[j])`` is computed and stored in entry ``m\n        * i + j - ((i + 2) * (i + 1)) // 2``.\n    \n    See Also\n    --------\n    squareform : converts between condensed distance matrices and\n                 square distance matrices.\n    \n    Notes\n    -----\n    See ``squareform`` for information on how to calculate the index of\n    this entry or to convert the condensed distance matrix to a\n    redundant square matrix.\n    \n    The following are common calling conventions.\n    \n    1. ``Y = pdist(X, 'euclidean')``\n    \n       Computes the distance between m points using Euclidean distance\n       (2-norm) as the distance metric between the points. The points\n       are arranged as m n-dimensional row vectors in the matrix X.\n    \n    2. ``Y = pdist(X, 'minkowski', p=2.)``\n    \n       Computes the distances using the Minkowski distance\n       :math:`\\|u-v\\|_p` (:math:`p`-norm) where :math:`p > 0` (note\n       that this is only a quasi-metric if :math:`0 < p < 1`).\n    \n    3. ``Y = pdist(X, 'cityblock')``\n    \n       Computes the city block or Manhattan distance between the\n       points.\n    \n    4. ``Y = pdist(X, 'seuclidean', V=None)``\n    \n       Computes the standardized Euclidean distance. The standardized\n       Euclidean distance between two n-vectors ``u`` and ``v`` is\n    \n       .. math::\n    \n          \\sqrt{\\sum {(u_i-v_i)^2 / V[x_i]}}\n    \n    \n       V is the variance vector; V[i] is the variance computed over all\n       the i'th components of the points.  If not passed, it is\n       automatically computed.\n    \n    5. ``Y = pdist(X, 'sqeuclidean')``\n    \n       Computes the squared Euclidean distance :math:`\\|u-v\\|_2^2` between\n       the vectors.\n    \n    6. ``Y = pdist(X, 'cosine')``\n    \n       Computes the cosine distance between vectors u and v,\n    \n       .. math::\n    \n          1 - \\frac{u \\cdot v}\n                   {{\\|u\\|}_2 {\\|v\\|}_2}\n    \n       where :math:`\\|*\\|_2` is the 2-norm of its argument ``*``, and\n       :math:`u \\cdot v` is the dot product of ``u`` and ``v``.\n    \n    7. ``Y = pdist(X, 'correlation')``\n    \n       Computes the correlation distance between vectors u and v. This is\n    \n       .. math::\n    \n          1 - \\frac{(u - \\bar{u}) \\cdot (v - \\bar{v})}\n                   {{\\|(u - \\bar{u})\\|}_2 {\\|(v - \\bar{v})\\|}_2}\n    \n       where :math:`\\bar{v}` is the mean of the elements of vector v,\n       and :math:`x \\cdot y` is the dot product of :math:`x` and :math:`y`.\n    \n    8. ``Y = pdist(X, 'hamming')``\n    \n       Computes the normalized Hamming distance, or the proportion of\n       those vector elements between two n-vectors ``u`` and ``v``\n       which disagree. To save memory, the matrix ``X`` can be of type\n       boolean.\n    \n    9. ``Y = pdist(X, 'jaccard')``\n    \n       Computes the Jaccard distance between the points. Given two\n       vectors, ``u`` and ``v``, the Jaccard distance is the\n       proportion of those elements ``u[i]`` and ``v[i]`` that\n       disagree.\n    \n    10. ``Y = pdist(X, 'jensenshannon')``\n    \n        Computes the Jensen-Shannon distance between two probability arrays.\n        Given two probability vectors, :math:`p` and :math:`q`, the\n        Jensen-Shannon distance is\n    \n        .. math::\n    \n           \\sqrt{\\frac{D(p \\parallel m) + D(q \\parallel m)}{2}}\n    \n        where :math:`m` is the pointwise mean of :math:`p` and :math:`q`\n        and :math:`D` is the Kullback-Leibler divergence.\n    \n    11. ``Y = pdist(X, 'chebyshev')``\n    \n        Computes the Chebyshev distance between the points. The\n        Chebyshev distance between two n-vectors ``u`` and ``v`` is the\n        maximum norm-1 distance between their respective elements. More\n        precisely, the distance is given by\n    \n        .. math::\n    \n           d(u,v) = \\max_i {|u_i-v_i|}\n    \n    12. ``Y = pdist(X, 'canberra')``\n    \n        Computes the Canberra distance between the points. The\n        Canberra distance between two points ``u`` and ``v`` is\n    \n        .. math::\n    \n          d(u,v) = \\sum_i \\frac{|u_i-v_i|}\n                               {|u_i|+|v_i|}\n    \n    \n    13. ``Y = pdist(X, 'braycurtis')``\n    \n        Computes the Bray-Curtis distance between the points. The\n        Bray-Curtis distance between two points ``u`` and ``v`` is\n    \n    \n        .. math::\n    \n             d(u,v) = \\frac{\\sum_i {|u_i-v_i|}}\n                            {\\sum_i {|u_i+v_i|}}\n    \n    14. ``Y = pdist(X, 'mahalanobis', VI=None)``\n    \n        Computes the Mahalanobis distance between the points. The\n        Mahalanobis distance between two points ``u`` and ``v`` is\n        :math:`\\sqrt{(u-v)(1/V)(u-v)^T}` where :math:`(1/V)` (the ``VI``\n        variable) is the inverse covariance. If ``VI`` is not None,\n        ``VI`` will be used as the inverse covariance matrix.\n    \n    15. ``Y = pdist(X, 'yule')``\n    \n        Computes the Yule distance between each pair of boolean\n        vectors. (see yule function documentation)\n    \n    16. ``Y = pdist(X, 'matching')``\n    \n        Synonym for 'hamming'.\n    \n    17. ``Y = pdist(X, 'dice')``\n    \n        Computes the Dice distance between each pair of boolean\n        vectors. (see dice function documentation)\n    \n    18. ``Y = pdist(X, 'kulczynski1')``\n    \n        Computes the kulczynski1 distance between each pair of\n        boolean vectors. (see kulczynski1 function documentation)\n    \n        .. deprecated:: 1.15.0\n           This metric is deprecated and will be removed in SciPy 1.17.0.\n           Replace usage of ``pdist(X, 'kulczynski1')`` with\n           ``1 / pdist(X, 'jaccard') - 1``.\n    \n    19. ``Y = pdist(X, 'rogerstanimoto')``\n    \n        Computes the Rogers-Tanimoto distance between each pair of\n        boolean vectors. (see rogerstanimoto function documentation)\n    \n    20. ``Y = pdist(X, 'russellrao')``\n    \n        Computes the Russell-Rao distance between each pair of\n        boolean vectors. (see russellrao function documentation)\n    \n    21. ``Y = pdist(X, 'sokalmichener')``\n    \n        Computes the Sokal-Michener distance between each pair of\n        boolean vectors. (see sokalmichener function documentation)\n    \n        .. deprecated:: 1.15.0\n           This metric is deprecated and will be removed in SciPy 1.17.0.\n           Replace usage of ``pdist(X, 'sokalmichener')`` with\n           ``pdist(X, 'rogerstanimoto')``.\n    \n    22. ``Y = pdist(X, 'sokalsneath')``\n    \n        Computes the Sokal-Sneath distance between each pair of\n        boolean vectors. (see sokalsneath function documentation)\n    \n    23. ``Y = pdist(X, 'kulczynski1')``\n    \n        Computes the Kulczynski 1 distance between each pair of\n        boolean vectors. (see kulczynski1 function documentation)\n    \n    24. ``Y = pdist(X, f)``\n    \n        Computes the distance between all pairs of vectors in X\n        using the user supplied 2-arity function f. For example,\n        Euclidean distance between the vectors could be computed\n        as follows::\n    \n          dm = pdist(X, lambda u, v: np.sqrt(((u-v)**2).sum()))\n    \n        Note that you should avoid passing a reference to one of\n        the distance functions defined in this library. For example,::\n    \n          dm = pdist(X, sokalsneath)\n    \n        would calculate the pair-wise distances between the vectors in\n        X using the Python function sokalsneath. This would result in\n        sokalsneath being called :math:`{n \\choose 2}` times, which\n        is inefficient. Instead, the optimized C version is more\n        efficient, and we call it using the following syntax.::\n    \n          dm = pdist(X, 'sokalsneath')\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.spatial.distance import pdist\n    \n    ``x`` is an array of five points in three-dimensional space.\n    \n    >>> x = np.array([[2, 0, 2], [2, 2, 3], [-2, 4, 5], [0, 1, 9], [2, 2, 4]])\n    \n    ``pdist(x)`` with no additional arguments computes the 10 pairwise\n    Euclidean distances:\n    \n    >>> pdist(x)\n    array([2.23606798, 6.40312424, 7.34846923, 2.82842712, 4.89897949,\n           6.40312424, 1.        , 5.38516481, 4.58257569, 5.47722558])\n    \n    The following computes the pairwise Minkowski distances with ``p = 3.5``:\n    \n    >>> pdist(x, metric='minkowski', p=3.5)\n    array([2.04898923, 5.1154929 , 7.02700737, 2.43802731, 4.19042714,\n           6.03956994, 1.        , 4.45128103, 4.10636143, 5.0619695 ])\n    \n    The pairwise city block or Manhattan distances:\n    \n    >>> pdist(x, metric='cityblock')\n    array([ 3., 11., 10.,  4.,  8.,  9.,  1.,  9.,  7.,  8.])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "62e589e71fc60d33cfb4b1f06849cb15d6c6cf25d944f7ae44dea2ea4bb4128a",
            "fields": [
                {
                    "id": "s0xp5ix9",
                    "encoding": "",
                    "name": "X",
                    "value": "",
                    "defaultValue": "",
                    "description": "An m by n array of m original observations in an\nn-dimensional space.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_9yf130y",
                    "encoding": "",
                    "name": "metric",
                    "value": "euclidean",
                    "defaultValue": "euclidean",
                    "description": "The distance metric to use. The distance function can\nbe 'braycurtis', 'canberra', 'chebyshev', 'cityblock',\n'correlation', 'cosine', 'dice', 'euclidean', 'hamming',\n'jaccard', 'jensenshannon', 'kulczynski1',\n'mahalanobis', 'matching', 'minkowski', 'rogerstanimoto',\n'russellrao', 'seuclidean', 'sokalmichener', 'sokalsneath',\n'sqeuclidean', 'yule'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iny90hij",
                    "encoding": "",
                    "name": "out",
                    "value": "",
                    "defaultValue": "",
                    "description": "The output array.\nIf not None, condensed distance matrix Y is stored in this array.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cdnfi5rw",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "onghs6n8",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.distance.pdist",
                    "defaultValue": "scipy.spatial.distance.pdist",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fd_krr6b",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6igd2b54",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "cp0hrolf",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "odf08lsl",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.distance",
                    "defaultValue": "scipy.spatial.distance",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tfm2phpg",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uleidgny",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "zxkv47x3",
            "name": "distance.rogerstanimoto",
            "description": "Compute the Rogers-Tanimoto dissimilarity between two boolean 1-D arrays.\n    \n    The Rogers-Tanimoto dissimilarity between two boolean 1-D arrays\n    `u` and `v`, is defined as\n    \n    .. math::\n       \\frac{R}\n            {c_{TT} + c_{FF} + R}\n    \n    where :math:`c_{ij}` is the number of occurrences of\n    :math:`\\mathtt{u[k]} = i` and :math:`\\mathtt{v[k]} = j` for\n    :math:`k < n` and :math:`R = 2(c_{TF} + c_{FT})`.\n    \n    Parameters\n    ----------\n    u : (N,) array_like, bool\n        Input array.\n    v : (N,) array_like, bool\n        Input array.\n    w : (N,) array_like, optional\n        The weights for each value in `u` and `v`. Default is None,\n        which gives each value a weight of 1.0\n    \n    Returns\n    -------\n    rogerstanimoto : double\n        The Rogers-Tanimoto dissimilarity between vectors\n        `u` and `v`.\n    \n    Examples\n    --------\n    >>> from scipy.spatial import distance\n    >>> distance.rogerstanimoto([1, 0, 0], [0, 1, 0])\n    0.8\n    >>> distance.rogerstanimoto([1, 0, 0], [1, 1, 0])\n    0.5\n    >>> distance.rogerstanimoto([1, 0, 0], [2, 0, 0])\n    -1.0",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "843af4e36c505057e97df5fcfc5690560c5c3453b94f02fb8401cfb104e8da2e",
            "fields": [
                {
                    "id": "9r9fs36x",
                    "encoding": "",
                    "name": "u",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array.",
                    "type": "(N,) arraylike, bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9tm8yh_s",
                    "encoding": "",
                    "name": "v",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array.",
                    "type": "(N,) arraylike, bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p7or4u1f",
                    "encoding": "",
                    "name": "w",
                    "value": "",
                    "defaultValue": "",
                    "description": "The weights for each value in `u` and `v`. Default is None,\nwhich gives each value a weight of 1.0",
                    "type": "(N,) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lk6yvh3s",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.distance.rogerstanimoto",
                    "defaultValue": "scipy.spatial.distance.rogerstanimoto",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qsmzot6f",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4rzxe_4b",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "d27pfb1y",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3zaitzso",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.distance",
                    "defaultValue": "scipy.spatial.distance",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t_4fzy_n",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i3_s1y4r",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ale1mpkp",
            "name": "distance.russellrao",
            "description": "Compute the Russell-Rao dissimilarity between two boolean 1-D arrays.\n    \n    The Russell-Rao dissimilarity between two boolean 1-D arrays, `u` and\n    `v`, is defined as\n    \n    .. math::\n    \n      \\frac{n - c_{TT}}\n           {n}\n    \n    where :math:`c_{ij}` is the number of occurrences of\n    :math:`\\mathtt{u[k]} = i` and :math:`\\mathtt{v[k]} = j` for\n    :math:`k < n`.\n    \n    Parameters\n    ----------\n    u : (N,) array_like, bool\n        Input array.\n    v : (N,) array_like, bool\n        Input array.\n    w : (N,) array_like, optional\n        The weights for each value in `u` and `v`. Default is None,\n        which gives each value a weight of 1.0\n    \n    Returns\n    -------\n    russellrao : double\n        The Russell-Rao dissimilarity between vectors `u` and `v`.\n    \n    Examples\n    --------\n    >>> from scipy.spatial import distance\n    >>> distance.russellrao([1, 0, 0], [0, 1, 0])\n    1.0\n    >>> distance.russellrao([1, 0, 0], [1, 1, 0])\n    0.6666666666666666\n    >>> distance.russellrao([1, 0, 0], [2, 0, 0])\n    0.3333333333333333",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6ea205b2c900994d2f8b6032979fd7db6394d13b39437fa97e9e1f3e99549ed4",
            "fields": [
                {
                    "id": "348m3ozh",
                    "encoding": "",
                    "name": "u",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array.",
                    "type": "(N,) arraylike, bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uzm61hy2",
                    "encoding": "",
                    "name": "v",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array.",
                    "type": "(N,) arraylike, bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "alld3_0s",
                    "encoding": "",
                    "name": "w",
                    "value": "",
                    "defaultValue": "",
                    "description": "The weights for each value in `u` and `v`. Default is None,\nwhich gives each value a weight of 1.0",
                    "type": "(N,) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s_b675se",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.distance.russellrao",
                    "defaultValue": "scipy.spatial.distance.russellrao",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "34bd4hol",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gih71265",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "xq4aod17",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0f_jffn4",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.distance",
                    "defaultValue": "scipy.spatial.distance",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fossnux3",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xame27jg",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "4_ocpfjx",
            "name": "distance.seuclidean",
            "description": "Return the standardized Euclidean distance between two 1-D arrays.\n    \n    The standardized Euclidean distance between two n-vectors `u` and `v` is\n    \n    .. math::\n    \n       \\sqrt{\\sum\\limits_i \\frac{1}{V_i} \\left(u_i-v_i \\right)^2}\n    \n    ``V`` is the variance vector; ``V[I]`` is the variance computed over all the i-th\n    components of the points. If not passed, it is automatically computed.\n    \n    Parameters\n    ----------\n    u : (N,) array_like\n        Input array.\n    v : (N,) array_like\n        Input array.\n    V : (N,) array_like\n        `V` is an 1-D array of component variances. It is usually computed\n        among a larger collection of vectors.\n    \n    Returns\n    -------\n    seuclidean : double\n        The standardized Euclidean distance between vectors `u` and `v`.\n    \n    Examples\n    --------\n    >>> from scipy.spatial import distance\n    >>> distance.seuclidean([1, 0, 0], [0, 1, 0], [0.1, 0.1, 0.1])\n    4.4721359549995796\n    >>> distance.seuclidean([1, 0, 0], [0, 1, 0], [1, 0.1, 0.1])\n    3.3166247903553998\n    >>> distance.seuclidean([1, 0, 0], [0, 1, 0], [10, 0.1, 0.1])\n    3.1780497164141406",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "0e92b6380083663115ced75107d3f18a4320b2ceac60ab775cfc5aaf3b5ce834",
            "fields": [
                {
                    "id": "rc_tsrom",
                    "encoding": "",
                    "name": "u",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array.",
                    "type": "(N,) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e9p2qp09",
                    "encoding": "",
                    "name": "v",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array.",
                    "type": "(N,) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "61_pk5i4",
                    "encoding": "",
                    "name": "V",
                    "value": "",
                    "defaultValue": "",
                    "description": "`V` is an 1-D array of component variances. It is usually computed\namong a larger collection of vectors.",
                    "type": "(N,) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "416br8p6",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.distance.seuclidean",
                    "defaultValue": "scipy.spatial.distance.seuclidean",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oy5001fm",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dmmp9ol9",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "7eoq2ufq",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z59eyuns",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.distance",
                    "defaultValue": "scipy.spatial.distance",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j0pq7smk",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t5jkp_za",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "3q18osz1",
            "name": "distance.sokalmichener",
            "description": "Compute the Sokal-Michener dissimilarity between two boolean 1-D arrays.\n    \n    .. deprecated:: 1.15.0\n       This function is deprecated and will be removed in SciPy 1.17.0.\n       Replace usage of ``sokalmichener(u, v)`` with ``rogerstanimoto(u, v)``.\n    \n    The Sokal-Michener dissimilarity between boolean 1-D arrays `u` and `v`,\n    is defined as\n    \n    .. math::\n    \n       \\frac{R}\n            {S + R}\n    \n    where :math:`c_{ij}` is the number of occurrences of\n    :math:`\\mathtt{u[k]} = i` and :math:`\\mathtt{v[k]} = j` for\n    :math:`k < n`, :math:`R = 2 * (c_{TF} + c_{FT})` and\n    :math:`S = c_{FF} + c_{TT}`.\n    \n    Parameters\n    ----------\n    u : (N,) array_like, bool\n        Input array.\n    v : (N,) array_like, bool\n        Input array.\n    w : (N,) array_like, optional\n        The weights for each value in `u` and `v`. Default is None,\n        which gives each value a weight of 1.0\n    \n    Returns\n    -------\n    sokalmichener : double\n        The Sokal-Michener dissimilarity between vectors `u` and `v`.\n    \n    Examples\n    --------\n    >>> from scipy.spatial import distance\n    >>> distance.sokalmichener([1, 0, 0], [0, 1, 0])\n    0.8\n    >>> distance.sokalmichener([1, 0, 0], [1, 1, 0])\n    0.5\n    >>> distance.sokalmichener([1, 0, 0], [2, 0, 0])\n    -1.0",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4c54601b33902f87a2ede900b01a8ac7d4eb21ac534eff4638b93bef8f9fa47b",
            "fields": [
                {
                    "id": "1bezk8ez",
                    "encoding": "",
                    "name": "u",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array.",
                    "type": "(N,) arraylike, bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gexdd1_p",
                    "encoding": "",
                    "name": "v",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array.",
                    "type": "(N,) arraylike, bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n3k4_ezx",
                    "encoding": "",
                    "name": "w",
                    "value": "",
                    "defaultValue": "",
                    "description": "The weights for each value in `u` and `v`. Default is None,\nwhich gives each value a weight of 1.0",
                    "type": "(N,) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "73o18mvw",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.distance.sokalmichener",
                    "defaultValue": "scipy.spatial.distance.sokalmichener",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "87_7lr07",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "blxbggdq",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "bplbdae7",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hp6isdbt",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.distance",
                    "defaultValue": "scipy.spatial.distance",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v_ab4ktz",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lb5ui2dt",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "mcyb386h",
            "name": "distance.sokalsneath",
            "description": "Compute the Sokal-Sneath dissimilarity between two boolean 1-D arrays.\n    \n    The Sokal-Sneath dissimilarity between `u` and `v`,\n    \n    .. math::\n    \n       \\frac{R}\n            {c_{TT} + R}\n    \n    where :math:`c_{ij}` is the number of occurrences of\n    :math:`\\mathtt{u[k]} = i` and :math:`\\mathtt{v[k]} = j` for\n    :math:`k < n` and :math:`R = 2(c_{TF} + c_{FT})`.\n    \n    Parameters\n    ----------\n    u : (N,) array_like, bool\n        Input array.\n    v : (N,) array_like, bool\n        Input array.\n    w : (N,) array_like, optional\n        The weights for each value in `u` and `v`. Default is None,\n        which gives each value a weight of 1.0\n    \n    Returns\n    -------\n    sokalsneath : double\n        The Sokal-Sneath dissimilarity between vectors `u` and `v`.\n    \n    Examples\n    --------\n    >>> from scipy.spatial import distance\n    >>> distance.sokalsneath([1, 0, 0], [0, 1, 0])\n    1.0\n    >>> distance.sokalsneath([1, 0, 0], [1, 1, 0])\n    0.66666666666666663\n    >>> distance.sokalsneath([1, 0, 0], [2, 1, 0])\n    0.0\n    >>> distance.sokalsneath([1, 0, 0], [3, 1, 0])\n    -2.0",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "3668bff2555adbabc29d396384cadd852db3cdbf58b6342ddf2a0d7263966a01",
            "fields": [
                {
                    "id": "iwz0dxag",
                    "encoding": "",
                    "name": "u",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array.",
                    "type": "(N,) arraylike, bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8swo6ija",
                    "encoding": "",
                    "name": "v",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array.",
                    "type": "(N,) arraylike, bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m3pkj95b",
                    "encoding": "",
                    "name": "w",
                    "value": "",
                    "defaultValue": "",
                    "description": "The weights for each value in `u` and `v`. Default is None,\nwhich gives each value a weight of 1.0",
                    "type": "(N,) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sdtzfb_h",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.distance.sokalsneath",
                    "defaultValue": "scipy.spatial.distance.sokalsneath",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "beolc25l",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vq5d62dd",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "f6rnznqv",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cz84l3uu",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.distance",
                    "defaultValue": "scipy.spatial.distance",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lsk03xsm",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1_7f7qk5",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "5knmea5d",
            "name": "distance.sqeuclidean",
            "description": "Compute the squared Euclidean distance between two 1-D arrays.\n    \n    The squared Euclidean distance between `u` and `v` is defined as\n    \n    .. math::\n    \n       \\sum_i{w_i |u_i - v_i|^2}\n    \n    Parameters\n    ----------\n    u : (N,) array_like\n        Input array.\n    v : (N,) array_like\n        Input array.\n    w : (N,) array_like, optional\n        The weights for each value in `u` and `v`. Default is None,\n        which gives each value a weight of 1.0\n    \n    Returns\n    -------\n    sqeuclidean : double\n        The squared Euclidean distance between vectors `u` and `v`.\n    \n    Examples\n    --------\n    >>> from scipy.spatial import distance\n    >>> distance.sqeuclidean([1, 0, 0], [0, 1, 0])\n    2.0\n    >>> distance.sqeuclidean([1, 1, 0], [0, 1, 0])\n    1.0",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "18d09640212e10976bdbf08ff120836cdfba0f7bc138a48897d8983c36412b9e",
            "fields": [
                {
                    "id": "oczylla3",
                    "encoding": "",
                    "name": "u",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array.",
                    "type": "(N,) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2vbl6790",
                    "encoding": "",
                    "name": "v",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array.",
                    "type": "(N,) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sjcw_ipi",
                    "encoding": "",
                    "name": "w",
                    "value": "",
                    "defaultValue": "",
                    "description": "The weights for each value in `u` and `v`. Default is None,\nwhich gives each value a weight of 1.0",
                    "type": "(N,) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1jt0ty5u",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.distance.sqeuclidean",
                    "defaultValue": "scipy.spatial.distance.sqeuclidean",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dvtlmz_8",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "usj4lohf",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ym2aah4b",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "90epg1ts",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.distance",
                    "defaultValue": "scipy.spatial.distance",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_u5_6h3r",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0af5ojir",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "prnvdfap",
            "name": "distance.squareform",
            "description": "Convert a vector-form distance vector to a square-form distance\n    matrix, and vice-versa.\n    \n    Parameters\n    ----------\n    X : array_like\n        Either a condensed or redundant distance matrix.\n    force : str, optional\n        As with MATLAB(TM), if force is equal to ``'tovector'`` or\n        ``'tomatrix'``, the input will be treated as a distance matrix or\n        distance vector respectively.\n    checks : bool, optional\n        If set to False, no checks will be made for matrix\n        symmetry nor zero diagonals. This is useful if it is known that\n        ``X - X.T1`` is small and ``diag(X)`` is close to zero.\n        These values are ignored any way so they do not disrupt the\n        squareform transformation.\n    \n    Returns\n    -------\n    Y : ndarray\n        If a condensed distance matrix is passed, a redundant one is\n        returned, or if a redundant one is passed, a condensed distance\n        matrix is returned.\n    \n    Notes\n    -----\n    1. ``v = squareform(X)``\n    \n       Given a square n-by-n symmetric distance matrix ``X``,\n       ``v = squareform(X)`` returns a ``n * (n-1) / 2``\n       (i.e. binomial coefficient n choose 2) sized vector `v`\n       where :math:`v[{n \\choose 2} - {n-i \\choose 2} + (j-i-1)]`\n       is the distance between distinct points ``i`` and ``j``.\n       If ``X`` is non-square or asymmetric, an error is raised.\n    \n    2. ``X = squareform(v)``\n    \n       Given a ``n * (n-1) / 2`` sized vector ``v``\n       for some integer ``n >= 1`` encoding distances as described,\n       ``X = squareform(v)`` returns a n-by-n distance matrix ``X``.\n       The ``X[i, j]`` and ``X[j, i]`` values are set to\n       :math:`v[{n \\choose 2} - {n-i \\choose 2} + (j-i-1)]`\n       and all diagonal elements are zero.\n    \n    In SciPy 0.19.0, ``squareform`` stopped casting all input types to\n    float64, and started returning arrays of the same dtype as the input.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.spatial.distance import pdist, squareform\n    \n    ``x`` is an array of five points in three-dimensional space.\n    \n    >>> x = np.array([[2, 0, 2], [2, 2, 3], [-2, 4, 5], [0, 1, 9], [2, 2, 4]])\n    \n    ``pdist(x)`` computes the Euclidean distances between each pair of\n    points in ``x``.  The distances are returned in a one-dimensional\n    array with length ``5*(5 - 1)/2 = 10``.\n    \n    >>> distvec = pdist(x)\n    >>> distvec\n    array([2.23606798, 6.40312424, 7.34846923, 2.82842712, 4.89897949,\n           6.40312424, 1.        , 5.38516481, 4.58257569, 5.47722558])\n    \n    ``squareform(distvec)`` returns the 5x5 distance matrix.\n    \n    >>> m = squareform(distvec)\n    >>> m\n    array([[0.        , 2.23606798, 6.40312424, 7.34846923, 2.82842712],\n           [2.23606798, 0.        , 4.89897949, 6.40312424, 1.        ],\n           [6.40312424, 4.89897949, 0.        , 5.38516481, 4.58257569],\n           [7.34846923, 6.40312424, 5.38516481, 0.        , 5.47722558],\n           [2.82842712, 1.        , 4.58257569, 5.47722558, 0.        ]])\n    \n    When given a square distance matrix ``m``, ``squareform(m)`` returns\n    the one-dimensional condensed distance vector associated with the\n    matrix.  In this case, we recover ``distvec``.\n    \n    >>> squareform(m)\n    array([2.23606798, 6.40312424, 7.34846923, 2.82842712, 4.89897949,\n           6.40312424, 1.        , 5.38516481, 4.58257569, 5.47722558])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c15c9087c4cdba481f71b9e151a1e8a1818733816713b55bda0b6885f7b35f2c",
            "fields": [
                {
                    "id": "9sppbc4b",
                    "encoding": "",
                    "name": "X",
                    "value": "",
                    "defaultValue": "",
                    "description": "Either a condensed or redundant distance matrix.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nry52rud",
                    "encoding": "",
                    "name": "force",
                    "value": "no",
                    "defaultValue": "no",
                    "description": "As with MATLAB(TM), if force is equal to ``'tovector'`` or\n``'tomatrix'``, the input will be treated as a distance matrix or\ndistance vector respectively.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "81igx2us",
                    "encoding": "",
                    "name": "checks",
                    "value": true,
                    "defaultValue": true,
                    "description": "If set to False, no checks will be made for matrix\nsymmetry nor zero diagonals. This is useful if it is known that\n``X - X.T1`` is small and ``diag(X)`` is close to zero.\nThese values are ignored any way so they do not disrupt the\nsquareform transformation.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nr6xrzwe",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.distance.squareform",
                    "defaultValue": "scipy.spatial.distance.squareform",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ybjv045f",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t1cm8ab0",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "rfzncvnd",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i0ynlda8",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.distance",
                    "defaultValue": "scipy.spatial.distance",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dgvq_cfs",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "en053fp4",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "n52lnirc",
            "name": "distance.yule",
            "description": "Compute the Yule dissimilarity between two boolean 1-D arrays.\n    \n    The Yule dissimilarity is defined as\n    \n    .. math::\n    \n         \\frac{R}{c_{TT} * c_{FF} + \\frac{R}{2}}\n    \n    where :math:`c_{ij}` is the number of occurrences of\n    :math:`\\mathtt{u[k]} = i` and :math:`\\mathtt{v[k]} = j` for\n    :math:`k < n` and :math:`R = 2.0 * c_{TF} * c_{FT}`.\n    \n    Parameters\n    ----------\n    u : (N,) array_like, bool\n        Input array.\n    v : (N,) array_like, bool\n        Input array.\n    w : (N,) array_like, optional\n        The weights for each value in `u` and `v`. Default is None,\n        which gives each value a weight of 1.0\n    \n    Returns\n    -------\n    yule : double\n        The Yule dissimilarity between vectors `u` and `v`.\n    \n    Examples\n    --------\n    >>> from scipy.spatial import distance\n    >>> distance.yule([1, 0, 0], [0, 1, 0])\n    2.0\n    >>> distance.yule([1, 1, 0], [0, 1, 0])\n    0.0",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f2c47b741606082bc4fcf783d630d8870fe4db16e1324d97c37be802e23fee92",
            "fields": [
                {
                    "id": "sle5mhlw",
                    "encoding": "",
                    "name": "u",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array.",
                    "type": "(N,) arraylike, bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g2jq5l9c",
                    "encoding": "",
                    "name": "v",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array.",
                    "type": "(N,) arraylike, bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bc6b4xbf",
                    "encoding": "",
                    "name": "w",
                    "value": "",
                    "defaultValue": "",
                    "description": "The weights for each value in `u` and `v`. Default is None,\nwhich gives each value a weight of 1.0",
                    "type": "(N,) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mt8p1ulx",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.distance.yule",
                    "defaultValue": "scipy.spatial.distance.yule",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "en71sess",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kzfbkowg",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "dlmlwskv",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_r4xq5hr",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.distance",
                    "defaultValue": "scipy.spatial.distance",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gjrljg6t",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sljq0o0b",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "u0zxpj43",
            "name": "kdtree.distance_matrix",
            "description": "Compute the distance matrix.\n    \n    Returns the matrix of all pair-wise distances.\n    \n    Parameters\n    ----------\n    x : (M, K) array_like\n        Matrix of M vectors in K dimensions.\n    y : (N, K) array_like\n        Matrix of N vectors in K dimensions.\n    p : float, 1 <= p <= infinity\n        Which Minkowski p-norm to use.\n    threshold : positive int\n        If ``M * N * K`` > `threshold`, algorithm uses a Python loop instead\n        of large temporary arrays.\n    \n    Returns\n    -------\n    result : (M, N) ndarray\n        Matrix containing the distance from every vector in `x` to every vector\n        in `y`.\n    \n    Examples\n    --------\n    >>> from scipy.spatial import distance_matrix\n    >>> distance_matrix([[0,0],[0,1]], [[1,0],[1,1]])\n    array([[ 1.        ,  1.41421356],\n           [ 1.41421356,  1.        ]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1da1662ea1823762cbf3a2a11ec064ecacd45f63ef307aea7331c78163a57241",
            "fields": [
                {
                    "id": "xug5wnys",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "Matrix of M vectors in K dimensions.",
                    "type": "(M, K) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "odv2fzg0",
                    "encoding": "",
                    "name": "y",
                    "value": "",
                    "defaultValue": "",
                    "description": "Matrix of N vectors in K dimensions.",
                    "type": "(N, K) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qp63pasc",
                    "encoding": "",
                    "name": "p",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Which Minkowski p-norm to use.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "29qmw5g5",
                    "encoding": "",
                    "name": "threshold",
                    "value": 1000000,
                    "defaultValue": 1000000,
                    "description": "If ``M * N * K`` > `threshold`, algorithm uses a Python loop instead\nof large temporary arrays.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bf367ihb",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.kdtree.distance_matrix",
                    "defaultValue": "scipy.spatial.kdtree.distance_matrix",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1iat55fz",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "074afp5m",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "zqexw82g",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l1orvzul",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.kdtree",
                    "defaultValue": "scipy.spatial.kdtree",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9acnx2bl",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1_1oxe8z",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "efgpu5ue",
            "name": "kdtree.minkowski_distance",
            "description": "Compute the L**p distance between two arrays.\n    \n    The last dimensions of `x` and `y` must be the same length.  Any\n    other dimensions must be compatible for broadcasting.\n    \n    Parameters\n    ----------\n    x : (..., K) array_like\n        Input array.\n    y : (..., K) array_like\n        Input array.\n    p : float, 1 <= p <= infinity\n        Which Minkowski p-norm to use.\n    \n    Returns\n    -------\n    dist : ndarray\n        Distance between the input arrays.\n    \n    Examples\n    --------\n    >>> from scipy.spatial import minkowski_distance\n    >>> minkowski_distance([[0, 0], [0, 0]], [[1, 1], [0, 1]])\n    array([ 1.41421356,  1.        ])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "482320ac4a13653752abe952fcc94f7807039fcc5bd10aa46dbfa768023f525d",
            "fields": [
                {
                    "id": "er__n2pq",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array.",
                    "type": "(..., K) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "srdzdyc3",
                    "encoding": "",
                    "name": "y",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array.",
                    "type": "(..., K) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dq44pto0",
                    "encoding": "",
                    "name": "p",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Which Minkowski p-norm to use.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aji7almy",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.kdtree.minkowski_distance",
                    "defaultValue": "scipy.spatial.kdtree.minkowski_distance",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h4gdawzp",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ot58b_53",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "jd4rsmox",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q9kd03r6",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.kdtree",
                    "defaultValue": "scipy.spatial.kdtree",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3d3n13nf",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7st5gxvi",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "q62qv795",
            "name": "kdtree.minkowski_distance_p",
            "description": "Compute the pth power of the L**p distance between two arrays.\n    \n    For efficiency, this function computes the L**p distance but does\n    not extract the pth root. If `p` is 1 or infinity, this is equal to\n    the actual L**p distance.\n    \n    The last dimensions of `x` and `y` must be the same length.  Any\n    other dimensions must be compatible for broadcasting.\n    \n    Parameters\n    ----------\n    x : (..., K) array_like\n        Input array.\n    y : (..., K) array_like\n        Input array.\n    p : float, 1 <= p <= infinity\n        Which Minkowski p-norm to use.\n    \n    Returns\n    -------\n    dist : ndarray\n        pth power of the distance between the input arrays.\n    \n    Examples\n    --------\n    >>> from scipy.spatial import minkowski_distance_p\n    >>> minkowski_distance_p([[0, 0], [0, 0]], [[1, 1], [0, 1]])\n    array([2., 1.])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "abd64b6ef18a0f29b182437dea3d013b893783ccdc1da8004f082c3ba5939287",
            "fields": [
                {
                    "id": "g90t134c",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array.",
                    "type": "(..., K) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vlsfug5i",
                    "encoding": "",
                    "name": "y",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array.",
                    "type": "(..., K) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3w0tkpvw",
                    "encoding": "",
                    "name": "p",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Which Minkowski p-norm to use.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fc9tbdoz",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.kdtree.minkowski_distance_p",
                    "defaultValue": "scipy.spatial.kdtree.minkowski_distance_p",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o0h7su04",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cjaik32b",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "nzeo_c4y",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "msl30e25",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.kdtree",
                    "defaultValue": "scipy.spatial.kdtree",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k424932_",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cmmv6scb",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "je2t0htz",
            "name": "qhull.tsearch",
            "description": "tsearch(tri, xi)\n    \n    Find simplices containing the given points. This function does the\n    same thing as `Delaunay.find_simplex`.\n    \n    Parameters\n    ----------\n    tri : DelaunayInfo\n        Delaunay triangulation\n    xi : ndarray of double, shape (..., ndim)\n        Points to locate\n    \n    Returns\n    -------\n    i : ndarray of int, same shape as `xi`\n        Indices of simplices containing each point.\n        Points outside the triangulation get the value -1.\n    \n    See Also\n    --------\n    Delaunay.find_simplex\n    \n    Notes\n    -----\n    .. versionadded:: 0.9\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> import matplotlib.pyplot as plt\n    >>> from scipy.spatial import Delaunay, delaunay_plot_2d, tsearch\n    >>> rng = np.random.default_rng()\n    \n    The Delaunay triangulation of a set of random points:\n    \n    >>> pts = rng.random((20, 2))\n    >>> tri = Delaunay(pts)\n    >>> _ = delaunay_plot_2d(tri)\n    \n    Find the simplices containing a given set of points:\n    \n    >>> loc = rng.uniform(0.2, 0.8, (5, 2))\n    >>> s = tsearch(tri, loc)\n    >>> plt.triplot(pts[:, 0], pts[:, 1], tri.simplices[s], 'b-', mask=s==-1)\n    >>> plt.scatter(loc[:, 0], loc[:, 1], c='r', marker='x')\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5241487cb47641498924089ecfd946c57be68d2c26abba332406ea8c62ee98a8",
            "fields": [
                {
                    "id": "vs0_griq",
                    "encoding": "",
                    "name": "tri",
                    "value": "",
                    "defaultValue": "",
                    "description": "Delaunay triangulation",
                    "type": "DelaunayInfo",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jxhj94l_",
                    "encoding": "",
                    "name": "xi",
                    "value": "",
                    "defaultValue": "",
                    "description": "Points to locate",
                    "type": "ndarray of double, shape (..., ndim)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p53ohb7c",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.qhull.tsearch",
                    "defaultValue": "scipy.spatial.qhull.tsearch",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "innterti",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9jbon2mv",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "26ke7njn",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ojat6fhb",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.qhull",
                    "defaultValue": "scipy.spatial.qhull",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r3svz7g2",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tge58x3n",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "5jvawc3c",
            "name": "RigidTransform.__init__",
            "description": "Rotations are not meant to be initialized directly. Please use one of\nthe `from_...` methods instead.\n\nParameters\n----------\nmatrix : array_like, shape (4, 4) or (N, 4, 4)\n    A single transformation matrix or a stack of transformation\n    matrices.\nnormalize : bool, optional\n    If True, orthonormalize the rotation matrix using singular value\n    decomposition. If False, the rotation matrix is not checked for\n    orthogonality or right-handedness.\ncopy : bool, optional\n    If True, copy the input matrix. If False, a reference to the input\n    matrix is used. If normalize is True, the input matrix is always\n    copied regardless of the value of copy.\n\nReturns\n-------\ntransform : `RigidTransform` instance",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7bb1488dcfff6d5ea40066c1dcce6a2aa5c393a5e988633874b6e2c8713e67d0",
            "fields": [
                {
                    "id": "wk8cqm0c",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.spatial.transform._rigid_transform.RigidTransform.__init__ object",
                    "type": "Object:scipy.spatial.transform._rigid_transform.RigidTransform",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0_9hg2re",
                    "encoding": "",
                    "name": "matrix",
                    "value": "",
                    "defaultValue": "",
                    "description": "A single transformation matrix or a stack of transformation\nmatrices.",
                    "type": "arraylike, shape (4, 4) or (N, 4, 4)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iir1_rjv",
                    "encoding": "",
                    "name": "normalize",
                    "value": "",
                    "defaultValue": "",
                    "description": "If True, orthonormalize the rotation matrix using singular value\ndecomposition. If False, the rotation matrix is not checked for\northogonality or right-handedness.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c3x6wt14",
                    "encoding": "",
                    "name": "copy",
                    "value": "",
                    "defaultValue": "",
                    "description": "If True, copy the input matrix. If False, a reference to the input\nmatrix is used. If normalize is True, the input matrix is always\ncopied regardless of the value of copy.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m4tsamyr",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.transform._rigid_transform.RigidTransform.__init__",
                    "defaultValue": "scipy.spatial.transform._rigid_transform.RigidTransform.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_pspglwm",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8i8s8nmv",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ry5xtc9d",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j_zvm7j5",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.transform._rigid_transform.RigidTransform",
                    "defaultValue": "scipy.spatial.transform._rigid_transform.RigidTransform",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sft1h374",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yfi7fl2z",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "lxu80xfw",
            "name": "RigidTransform.apply",
            "description": "RigidTransform.apply(self, vector, inverse=False)\n    \n    Apply the transform to a vector.\n    \n    If the original frame transforms to the final frame by this transform,\n    then its application to a vector can be seen in two ways:\n    \n        - As a projection of vector components expressed in the final frame\n          to the original frame.\n        - As the physical transformation of a vector being glued to the\n          original frame as it transforms. In this case the vector\n          components are expressed in the original frame before and after\n          the transformation.\n    \n    In terms of rotation matrices and translation vectors, this application\n    is the same as\n    ``self.translation + self.rotation.as_matrix() @ vector``.\n    \n    Parameters\n    ----------\n    vector : array_like, shape (N, 3) or (3,)\n        A single vector or a stack of vectors.\n    inverse : bool, optional\n        If True, the inverse of the transform is applied to the vector.\n    \n    Returns\n    -------\n    transformed_vector : numpy.ndarray, shape (N, 3) or (3,)\n        The transformed vector(s). Shape depends on the following cases:\n    \n            - If object contains a single transform (as opposed to a\n              stack with a single transform) and a single vector is\n              specified with shape ``(3,)``, then `transformed_vector` has\n              shape ``(3,)``.\n            - In all other cases, `transformed_vector` has shape\n              ``(N, 3)``, where ``N`` is either the number of\n              transforms or vectors.\n    \n    Examples\n    --------\n    >>> from scipy.spatial.transform import RigidTransform as Tf\n    >>> from scipy.spatial.transform import Rotation as R\n    >>> import numpy as np\n    \n    Apply a single transform to a vector. Here the transform is just a\n    translation, so the result is the vector added to the translation\n    vector.\n    \n    >>> t = np.array([1, 2, 3])\n    >>> tf = Tf.from_translation(t)\n    >>> t + np.array([1, 0, 0])\n    array([2, 2, 3])\n    >>> tf.apply([1, 0, 0])\n    array([2., 2., 3.])\n    \n    Apply a single transform to a stack of vectors:\n    \n    >>> tf.apply([[1, 0, 0], [0, 1, 0]])\n    array([[2., 2., 3.],\n           [1., 3., 3.]])\n    \n    Apply the inverse of a transform to a vector, so the result is the\n    negative of the translation vector added to the vector.\n    \n    >>> -t + np.array([1, 0, 0])\n    array([0, -2, -3])\n    >>> tf.apply([1, 0, 0], inverse=True)\n    array([0., -2., -3.])\n    \n    For transforms which are not just pure translations, applying it to a\n    vector is the same as applying the rotation component to the vector and\n    then adding the translation component.\n    \n    >>> r = R.from_euler('z', 60, degrees=True)\n    >>> tf = Tf.from_components(t, r)\n    >>> t + r.apply([1, 0, 0])\n    array([1.5,       2.8660254, 3.       ])\n    >>> tf.apply([1, 0, 0])\n    array([1.5,       2.8660254, 3.       ])\n    \n    When applying the inverse of a transform, the result is the negative of\n    the translation vector added to the vector, and then rotated by the\n    inverse rotation.\n    \n    >>> r.inv().apply(-t + np.array([1, 0, 0]))\n    array([-1.73205081, -1.        , -3.        ])\n    >>> tf.apply([1, 0, 0], inverse=True)\n    array([-1.73205081, -1.        , -3.        ])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "034eead90e7d2c573a700f78fb6190163d19016383b24541d656e37e13c47528",
            "fields": [
                {
                    "id": "5ar5c_i8",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.spatial.transform._rigid_transform.RigidTransform.apply object",
                    "type": "Object:scipy.spatial.transform._rigid_transform.RigidTransform",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6atns40b",
                    "encoding": "",
                    "name": "vector",
                    "value": "",
                    "defaultValue": "",
                    "description": "A single vector or a stack of vectors.",
                    "type": "arraylike, shape (N, 3) or (3,)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jw_ecfpz",
                    "encoding": "",
                    "name": "inverse",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, the inverse of the transform is applied to the vector.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rj1684pe",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.transform._rigid_transform.RigidTransform.apply",
                    "defaultValue": "scipy.spatial.transform._rigid_transform.RigidTransform.apply",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d898hqjp",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1pw0_wv3",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "66i3s9ua",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h934xb8f",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.transform._rigid_transform.RigidTransform",
                    "defaultValue": "scipy.spatial.transform._rigid_transform.RigidTransform",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cszz88sp",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f1glbdkf",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "47wzjemw",
            "name": "RigidTransform.as_components",
            "description": "RigidTransform.as_components(self)\n    \n    Return the translation and rotation components of the transform,\n    where the rotation is applied first, followed by the translation.\n    \n    4x4 rigid transformation matrices are of the form:\n    \n    ..\n    \n        [R | t]\n        [0 | 1]\n    \n    Where ``R`` is a 3x3 orthonormal rotation matrix and ``t`` is a 3x1\n    translation vector ``[tx, ty, tz]``. This function returns the rotation\n    corresponding to this rotation matrix ``r = Rotation.from_matrix(R)``\n    and the translation vector ``t``.\n    \n    Take a transform ``tf`` and a vector ``v``. When applying the transform\n    to the vector, the result is the same as if the transform was applied\n    to the vector in the following way:\n    ``tf.apply(v) == translation + rotation.apply(v)``\n    \n    Returns\n    -------\n    translation : numpy.ndarray, shape (N, 3) or (3,)\n        The translation of the transform.\n    rotation : `Rotation` instance\n        The rotation of the transform.\n    \n    Examples\n    --------\n    >>> from scipy.spatial.transform import RigidTransform as Tf\n    >>> from scipy.spatial.transform import Rotation as R\n    >>> import numpy as np\n    \n    Recover the rotation and translation from a transform:\n    \n    >>> t = np.array([2, 3, 4])\n    >>> r = R.from_matrix([[0, 0, 1],\n    ...                    [1, 0, 0],\n    ...                    [0, 1, 0]])\n    >>> tf = Tf.from_components(t, r)\n    >>> tf_t, tf_r = tf.as_components()\n    >>> tf_t\n    array([2., 3., 4.])\n    >>> tf_r.as_matrix()\n    array([[0., 0., 1.],\n           [1., 0., 0.],\n           [0., 1., 0.]])\n    \n    The transform applied to a vector is equivalent to the rotation applied\n    to the vector followed by the translation:\n    \n    >>> r.apply([1, 0, 0])\n    array([0., 1., 0.])\n    >>> t + r.apply([1, 0, 0])\n    array([2., 4., 4.])\n    >>> tf.apply([1, 0, 0])\n    array([2., 4., 4.])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "00ef04389fd11e48528bbca70e50309f63c90d6ada0c0b9fbbc52184ad3d66e8",
            "fields": [
                {
                    "id": "aen3zu1p",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.spatial.transform._rigid_transform.RigidTransform.as_components object",
                    "type": "Object:scipy.spatial.transform._rigid_transform.RigidTransform",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8m0qe5ba",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.transform._rigid_transform.RigidTransform.as_components",
                    "defaultValue": "scipy.spatial.transform._rigid_transform.RigidTransform.as_components",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "glf68zo9",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u76qu1ir",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "_va_5oct",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dgxjyakv",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.transform._rigid_transform.RigidTransform",
                    "defaultValue": "scipy.spatial.transform._rigid_transform.RigidTransform",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "72nodphc",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2ysgo2oi",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "6kel2hr3",
            "name": "RigidTransform.as_dual_quat",
            "description": "RigidTransform.as_dual_quat(self, *, scalar_first=False)\n    \n    Return the dual quaternion representation of the transform.\n    \n    Unit dual quaternions encode orientation in a real unit quaternion\n    and translation in a dual quaternion. There is a double cover, i.e.,\n    the unit dual quaternions q and -q represent the same transform.\n    \n    Parameters\n    ----------\n    scalar_first : bool, optional\n        Whether the scalar component goes first or last in the two\n        individual quaternions that represent the real and the dual part.\n        Default is False, i.e. the scalar-last order is used.\n    \n    Returns\n    -------\n    dual_quat : numpy.ndarray, shape (N, 8) or (8,)\n        A single unit dual quaternion vector or a stack of unit dual\n        quaternion vectors. The real part is stored in the first four\n        components and the dual part in the last four components.\n    \n    Examples\n    --------\n    >>> from scipy.spatial.transform import RigidTransform as Tf\n    >>> import numpy as np\n    \n    Get identity dual quaternion (we use scalar-last by default):\n    \n    >>> Tf.identity().as_dual_quat()\n    array([0., 0., 0., 1., 0., 0., 0., 0.])\n    \n    When we want to use the scalar-first convention, we use the argument:\n    \n    >>> Tf.identity().as_dual_quat(scalar_first=True)\n    array([1., 0., 0., 0., 0., 0., 0., 0.])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1d84948b05d3dce361674c062285e2f02e0a21445a3ec3d5623d9b1c61e168bb",
            "fields": [
                {
                    "id": "3sd_vg_f",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.spatial.transform._rigid_transform.RigidTransform.as_dual_quat object",
                    "type": "Object:scipy.spatial.transform._rigid_transform.RigidTransform",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rkboc2uq",
                    "encoding": "",
                    "name": "scalar_first",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether the scalar component goes first or last in the two\nindividual quaternions that represent the real and the dual part.\nDefault is False, i.e. the scalar-last order is used.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "04osarq9",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.transform._rigid_transform.RigidTransform.as_dual_quat",
                    "defaultValue": "scipy.spatial.transform._rigid_transform.RigidTransform.as_dual_quat",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8lfuq_1b",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "62j1jydb",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "qzfyrv6s",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tszm065u",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.transform._rigid_transform.RigidTransform",
                    "defaultValue": "scipy.spatial.transform._rigid_transform.RigidTransform",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "82gqwc8y",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i9ppfo0h",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "8hqie0v2",
            "name": "RigidTransform.as_exp_coords",
            "description": "RigidTransform.as_exp_coords(self)\n    \n    Return the exponential coordinates of the transform.\n    \n    This implements the logarithmic map that converts SE(3) to 6-dimensional\n    real vectors.\n    \n    This is an inverse of `from_exp_coords` where details on the mapping can\n    be found.\n    \n    Returns\n    -------\n    exp_coords : numpy.ndarray, shape (N, 6) or (6,)\n        A single exponential coordinate vector or a stack of exponential\n        coordinate vectors. The first three components define the\n        rotation and the last three components define the translation.\n    \n    Examples\n    --------\n    >>> from scipy.spatial.transform import RigidTransform as Tf\n    >>> import numpy as np\n    \n    Get exponential coordinates of the identity matrix:\n    \n    >>> Tf.identity().as_exp_coords()\n    array([0., 0., 0., 0., 0., 0.])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1179587dd34ade5ea1e940dfa7088ce020924dcb5ad595ef30b2a30ed3bb1142",
            "fields": [
                {
                    "id": "xo_gqwam",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.spatial.transform._rigid_transform.RigidTransform.as_exp_coords object",
                    "type": "Object:scipy.spatial.transform._rigid_transform.RigidTransform",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5uxmzi9q",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.transform._rigid_transform.RigidTransform.as_exp_coords",
                    "defaultValue": "scipy.spatial.transform._rigid_transform.RigidTransform.as_exp_coords",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3crc1v7t",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z3_f4gfk",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "1fvr6ph2",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2j7ml7fi",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.transform._rigid_transform.RigidTransform",
                    "defaultValue": "scipy.spatial.transform._rigid_transform.RigidTransform",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ofez1gt6",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "citcyyu1",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "bw9yl4s8",
            "name": "RigidTransform.as_matrix",
            "description": "RigidTransform.as_matrix(self)\n    \n    Return a copy of the matrix representation of the transform.\n    \n    4x4 rigid transformation matrices are of the form:\n    \n    ..\n    \n        [R | t]\n        [0 | 1]\n    \n    where ``R`` is a 3x3 orthonormal rotation matrix and ``t`` is a 3x1\n    translation vector ``[tx, ty, tz]``.\n    \n    Returns\n    -------\n    matrix : numpy.ndarray, shape (4, 4) or (N, 4, 4)\n        A single transformation matrix or a stack of transformation\n        matrices.\n    \n    Examples\n    --------\n    >>> from scipy.spatial.transform import RigidTransform as Tf\n    >>> from scipy.spatial.transform import Rotation as R\n    >>> import numpy as np\n    \n    A transformation matrix is a 4x4 matrix formed from a 3x3 rotation\n    matrix and a 3x1 translation vector:\n    \n    >>> t = np.array([2, 3, 4])\n    >>> r = R.from_matrix([[0, 0, 1],\n    ...                    [1, 0, 0],\n    ...                    [0, 1, 0]])\n    >>> tf = Tf.from_components(t, r)\n    >>> tf.as_matrix()\n    array([[ 0., 0., 1., 2.],\n           [ 1., 0., 0., 3.],\n           [ 0., 1., 0., 4.],\n           [ 0., 0., 0., 1.]])\n    \n    >>> Tf.identity(2).as_matrix()\n    array([[[1., 0., 0., 0.],\n            [0., 1., 0., 0.],\n            [0., 0., 1., 0.],\n            [0., 0., 0., 1.]],\n           [[1., 0., 0., 0.],\n            [0., 1., 0., 0.],\n            [0., 0., 1., 0.],\n            [0., 0., 0., 1.]]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5c0661a32a92f9cb6140a69b178ef8fcb6030903c87e9f890ce1b21295d06c99",
            "fields": [
                {
                    "id": "8s5yu732",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.spatial.transform._rigid_transform.RigidTransform.as_matrix object",
                    "type": "Object:scipy.spatial.transform._rigid_transform.RigidTransform",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "du19qh2_",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.transform._rigid_transform.RigidTransform.as_matrix",
                    "defaultValue": "scipy.spatial.transform._rigid_transform.RigidTransform.as_matrix",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2aeucr5t",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ov3bp1wo",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "dwih1kff",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o91hmksc",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.transform._rigid_transform.RigidTransform",
                    "defaultValue": "scipy.spatial.transform._rigid_transform.RigidTransform",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dwkgui8x",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xwf1ehn_",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "iqudwcb8",
            "name": "RigidTransform.concatenate",
            "description": "RigidTransform.concatenate(cls, transforms)\n    \n    Concatenate a sequence of `RigidTransform` objects into a\n    single object.\n    \n    Parameters\n    ----------\n    transforms : sequence of `RigidTransform`\n        If a single `RigidTransform` instance is passed in, a copy of\n        it is returned.\n    \n    Returns\n    -------\n    transform : `RigidTransform` instance\n        The concatenated transform.\n    \n    Examples\n    --------\n    >>> from scipy.spatial.transform import RigidTransform as Tf\n    >>> tf1 = Tf.from_translation([1, 0, 0])\n    >>> tf2 = Tf.from_translation([[2, 0, 0], [3, 0, 0]])\n    >>> Tf.concatenate([tf1, tf2]).translation\n    array([[1., 0., 0.],\n           [2., 0., 0.],\n           [3., 0., 0.]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "cdc1a2f423f489ed0613b28f03856c7893c6da0c85280a00ec3e4031cc917294",
            "fields": [
                {
                    "id": "53zxe5g7",
                    "encoding": "",
                    "name": "transforms",
                    "value": "",
                    "defaultValue": "",
                    "description": "If a single `RigidTransform` instance is passed in, a copy of\nit is returned.",
                    "type": "sequence of RigidTransform",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xnuf39ea",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.transform._rigid_transform.RigidTransform.concatenate",
                    "defaultValue": "scipy.spatial.transform._rigid_transform.RigidTransform.concatenate",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ga18imo4",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v0hqc_wp",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "9llbcilu",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "becl8__i",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.transform._rigid_transform.RigidTransform",
                    "defaultValue": "scipy.spatial.transform._rigid_transform.RigidTransform",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g538_fwr",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d4c2styw",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "6k0myaz5",
            "name": "RigidTransform.from_components",
            "description": "RigidTransform.from_components(cls, translation, rotation)\n    \n    Initialize a rigid transform from translation and rotation\n    components.\n    \n    When creating a rigid transform from a translation and rotation, the\n    translation is applied after the rotation, such that\n    ``tf = Tf.from_components(translation, rotation)``\n    is equivalent to\n    ``tf = Tf.from_translation(translation) * Tf.from_rotation(rotation)``.\n    \n    When applying a transform to a vector ``v``, the result is the\n    same as if the transform was applied to the vector in the\n    following way: ``tf.apply(v) == translation + rotation.apply(v)``\n    \n    Parameters\n    ----------\n    translation : array_like, shape (N, 3) or (3,)\n        A single translation vector or a stack of translation vectors.\n    rotation : `Rotation` instance\n        A single rotation or a stack of rotations.\n    \n    Returns\n    -------\n    `RigidTransform`\n        If rotation is single and translation is shape (3,), then a single\n        transform is returned.\n        Otherwise, a stack of transforms is returned.\n    \n    Examples\n    --------\n    >>> from scipy.spatial.transform import RigidTransform as Tf\n    >>> from scipy.spatial.transform import Rotation as R\n    >>> import numpy as np\n    \n    Creating from a single rotation and translation:\n    \n    >>> t = np.array([2, 3, 4])\n    >>> r = R.from_euler(\"ZYX\", [90, 30, 0], degrees=True)\n    >>> r.as_matrix()\n    array([[ 0.       , -1.,  0.        ],\n           [ 0.8660254,  0.,  0.5       ],\n           [-0.5      ,  0.,  0.8660254 ]])\n    >>> tf = Tf.from_components(t, r)\n    >>> tf.rotation.as_matrix()\n    array([[ 0.       , -1.,  0.        ],\n           [ 0.8660254,  0.,  0.5       ],\n           [-0.5      ,  0.,  0.8660254 ]])\n    >>> tf.translation\n    array([2., 3., 4.])\n    >>> tf.single\n    True\n    \n    When applying a transform to a vector ``v``, the result is the same as\n    if the transform was applied to the vector in the following way:\n    ``tf.apply(v) == translation + rotation.apply(v)``\n    \n    >>> r.apply([1, 0, 0])\n    array([0.       , 0.8660254, -0.5     ])\n    >>> t + r.apply([1, 0, 0])\n    array([2.       , 3.8660254,  3.5     ])\n    >>> tf.apply([1, 0, 0])\n    array([2.       , 3.8660254,  3.5     ])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "47468ee8bcd929a32c049984851d5f0a540a13ffc156fff985e5ba2274bf5f16",
            "fields": [
                {
                    "id": "66pya45r",
                    "encoding": "",
                    "name": "translation",
                    "value": "",
                    "defaultValue": "",
                    "description": "A single translation vector or a stack of translation vectors.",
                    "type": "arraylike, shape (N, 3) or (3,)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xbj2kxze",
                    "encoding": "",
                    "name": "rotation",
                    "value": "",
                    "defaultValue": "",
                    "description": "A single rotation or a stack of rotations.",
                    "type": "Rotation instance",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "22jon_wj",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.transform._rigid_transform.RigidTransform.from_components",
                    "defaultValue": "scipy.spatial.transform._rigid_transform.RigidTransform.from_components",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hks3q7u_",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ymsdz9a8",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ztv4zwgm",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a2hn8hfc",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.transform._rigid_transform.RigidTransform",
                    "defaultValue": "scipy.spatial.transform._rigid_transform.RigidTransform",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mmsfocov",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "262pe1w1",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "l_xpspyg",
            "name": "RigidTransform.from_dual_quat",
            "description": "RigidTransform.from_dual_quat(cls, dual_quat, *, scalar_first=False)\n    \n    Initialize from a unit dual quaternion.\n    \n    Unit dual quaternions encode orientation in a real unit quaternion\n    and translation in a dual quaternion. There is a double cover, i.e.,\n    the unit dual quaternions q and -q represent the same transform.\n    \n    Unit dual quaternions must have a real quaternion with unit norm and\n    a dual quaternion that is orthogonal to the real quaternion to satisfy\n    the unit norm constraint. This function will enforce both properties\n    through normalization.\n    \n    Parameters\n    ----------\n    dual_quat : array_like, shape (N, 8) or (8,)\n        A single unit dual quaternion or a stack of unit dual quaternions.\n        The real part is stored in the first four components and the dual\n        part in the last four components.\n    scalar_first : bool, optional\n        Whether the scalar component goes first or last in the two\n        individual quaternions that represent the real and the dual part.\n        Default is False, i.e. the scalar-last order is used.\n    \n    Returns\n    -------\n    transform : `RigidTransform` instance\n        A single transform or a stack of transforms.\n    \n    Examples\n    --------\n    >>> from scipy.spatial.transform import RigidTransform as Tf\n    >>> import numpy as np\n    \n    Creating from a single unit dual quaternion:\n    \n    >>> tf = Tf.from_dual_quat([\n    ...     0.0617101, -0.06483886, 0.31432811, 0.94508498,\n    ...     0.04985168, -0.26119618, 0.1691491, -0.07743254])\n    >>> tf.as_matrix()\n    array([[0.79398752, -0.60213598, -0.08376202, 0.24605262],\n           [0.58613113, 0.79477941, -0.15740392, -0.4932833],\n           [0.16135089, 0.07588122, 0.98397557, 0.34262676],\n           [0., 0., 0., 1.]])\n    >>> tf.single\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7292f38ba886134ca07d7134807f2a08a59fedc7f52ea60ddbf9dd30dcacc61c",
            "fields": [
                {
                    "id": "6f9afnom",
                    "encoding": "",
                    "name": "dual_quat",
                    "value": "",
                    "defaultValue": "",
                    "description": "A single unit dual quaternion or a stack of unit dual quaternions.\nThe real part is stored in the first four components and the dual\npart in the last four components.",
                    "type": "arraylike, shape (N, 8) or (8,)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bbvkr0o9",
                    "encoding": "",
                    "name": "scalar_first",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether the scalar component goes first or last in the two\nindividual quaternions that represent the real and the dual part.\nDefault is False, i.e. the scalar-last order is used.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6ni886b1",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.transform._rigid_transform.RigidTransform.from_dual_quat",
                    "defaultValue": "scipy.spatial.transform._rigid_transform.RigidTransform.from_dual_quat",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t620ax8m",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n19adika",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "evggk5lw",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "klogqlpv",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.transform._rigid_transform.RigidTransform",
                    "defaultValue": "scipy.spatial.transform._rigid_transform.RigidTransform",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tgf5avqu",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "udq2f4hs",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "28o4e_ko",
            "name": "RigidTransform.from_exp_coords",
            "description": "RigidTransform.from_exp_coords(cls, exp_coords)\n    \n    Initialize from exponential coordinates of transform.\n    \n    This implements the exponential map that converts 6-dimensional real\n    vectors to SE(3).\n    \n    An exponential coordinate vector consists of 6 elements\n    ``[rx, ry, rz, vx, vy, vz]``. The first 3 encode rotation (and form a\n    rotation vector used in `Rotation.from_rotvec`) and the last 3 encode\n    translation (and form a translation vector for pure translations).\n    The exponential mapping can be expressed as matrix exponential\n    ``T = exp(tau)``, where ``T`` is a 4x4 matrix representing a rigid\n    transform and ``tau`` is a 4x4 matrix formed from the elements of an\n    exponential coordinate vector::\n    \n        tau = [  0 -rz  ry vx]\n              [ rz   0 -rx vy]\n              [-ry  rx   0 vz]\n              [  0   0   0  1]\n    \n    Parameters\n    ----------\n    exp_coords : array_like, shape (N, 6) or (6,)\n        A single exponential coordinate vector or a stack of exponential\n        coordinate vectors. The expected order of components is\n        ``[rx, ry, rz, vx, vy, vz]``. The first 3 components encode rotation\n        and the last 3 encode translation.\n    \n    Returns\n    -------\n    transform : `RigidTransform` instance\n        A single transform or a stack of transforms.\n    \n    Examples\n    --------\n    >>> from scipy.spatial.transform import RigidTransform as Tf\n    >>> import numpy as np\n    \n    Creating from a single 6d vector of exponential coordinates:\n    \n    >>> tf = Tf.from_exp_coords([\n    ...     -2.01041204, -0.52983629, 0.65773501,\n    ...     0.10386614, 0.05855009, 0.54959179])\n    >>> tf.as_matrix()\n    array([[0.76406621, 0.10504613, -0.63652819, -0.10209961],\n           [0.59956454, -0.47987325, 0.64050295, 0.40158789],\n           [-0.2381705, -0.87102639, -0.42963687, 0.19637636],\n           [0., 0., 0., 1.]])\n    >>> tf.single\n    True\n    \n    A vector of zeros represents the identity transform:\n    \n    >>> tf = Tf.from_exp_coords(np.zeros(6))\n    >>> tf.as_matrix()\n    array([[1., 0., 0., 0.],\n           [0., 1., 0., 0.],\n           [0., 0., 1., 0.],\n           [0., 0., 0., 1.]])\n    \n    The last three numbers encode translation. If the first three numbers\n    are zero, the last three components can be interpreted as the\n    translation:\n    \n    >>> tf_trans = Tf.from_exp_coords([0, 0, 0, 4.3, -2, 3.4])\n    >>> tf_trans.translation\n    array([4.3, -2., 3.4])\n    \n    The first three numbers encode rotation as a rotation vector:\n    \n    >>> tf_rot = Tf.from_exp_coords([0.5, 0.3, 0.1, 0, 0, 0])\n    >>> tf_rot.rotation.as_rotvec()\n    array([0.5, 0.3, 0.1])\n    \n    Combining translation and rotation preserves the rotation vector,\n    but changes the last three components as they encode translation and\n    rotation:\n    \n    >>> (tf_trans * tf_rot).as_exp_coords()\n    array([0.5, 0.3, 0.1, 3.64305882, -1.25879559, 4.46109265])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d654f09ba4446f0e5e335c128a8d2a7f7aed0ef26e0cdc21a5261085f31f1e15",
            "fields": [
                {
                    "id": "_wpezol3",
                    "encoding": "",
                    "name": "exp_coords",
                    "value": "",
                    "defaultValue": "",
                    "description": "A single exponential coordinate vector or a stack of exponential\ncoordinate vectors. The expected order of components is\n``[rx, ry, rz, vx, vy, vz]``. The first 3 components encode rotation\nand the last 3 encode translation.",
                    "type": "arraylike, shape (N, 6) or (6,)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nc4tz5j7",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.transform._rigid_transform.RigidTransform.from_exp_coords",
                    "defaultValue": "scipy.spatial.transform._rigid_transform.RigidTransform.from_exp_coords",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rjegqqns",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9kyq1b19",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "kvoik6bs",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s5ziyi10",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.transform._rigid_transform.RigidTransform",
                    "defaultValue": "scipy.spatial.transform._rigid_transform.RigidTransform",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ial908e0",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ny83ixr0",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "kiyfc23u",
            "name": "RigidTransform.from_matrix",
            "description": "RigidTransform.from_matrix(cls, matrix)\n    \n    Initialize from a 4x4 transformation matrix.\n    \n    Parameters\n    ----------\n    matrix : array_like, shape (4, 4) or (N, 4, 4)\n        A single transformation matrix or a stack of transformation\n        matrices.\n    \n    Returns\n    -------\n    transform : `RigidTransform` instance\n    \n    Notes\n    -----\n    4x4 rigid transformation matrices are of the form:\n    \n    ..\n    \n        [R | t]\n        [0 | 1]\n    \n    where ``R`` is a 3x3 rotation matrix and ``t`` is a 3x1 translation\n    vector ``[tx, ty, tz]``. As rotation matrices must be proper\n    orthogonal, the rotation component is orthonormalized using singular\n    value decomposition before initialization.\n    \n    Examples\n    --------\n    >>> from scipy.spatial.transform import RigidTransform as Tf\n    >>> import numpy as np\n    \n    Creating a transform from a single matrix:\n    \n    >>> m = np.array([[0, 1, 0, 2],\n    ...               [0, 0, 1, 3],\n    ...               [1, 0, 0, 4],\n    ...               [0, 0, 0, 1]])\n    >>> tf = Tf.from_matrix(m)\n    >>> tf.as_matrix()\n    array([[0., 1., 0., 2.],\n           [0., 0., 1., 3.],\n           [1., 0., 0., 4.],\n           [0., 0., 0., 1.]])\n    >>> tf.single\n    True\n    \n    Creating a transform from a stack of matrices:\n    \n    >>> m = np.array([np.eye(4), np.eye(4)])\n    >>> tf = Tf.from_matrix(m)\n    >>> tf.as_matrix()\n    array([[[1., 0., 0., 0.],\n            [0., 1., 0., 0.],\n            [0., 0., 1., 0.],\n            [0., 0., 0., 1.]],\n           [[1., 0., 0., 0.],\n            [0., 1., 0., 0.],\n            [0., 0., 1., 0.],\n            [0., 0., 0., 1.]]])\n    >>> tf.single\n    False\n    >>> len(tf)\n    2\n    \n    Matrices with a rotation component that is not proper orthogonal are\n    orthogonalized using singular value decomposition before initialization:\n    \n    >>> tf = Tf.from_matrix(np.diag([2, 2, 2, 1]))\n    >>> tf.as_matrix()\n    array([[1., 0., 0., 0.],\n           [0., 1., 0., 0.],\n           [0., 0., 1., 0.],\n           [0., 0., 0., 1.]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1ddbdbaa005d26cb862bcaa28c138ca51be11f17d6cc243870783514780fbcdf",
            "fields": [
                {
                    "id": "514pyg2v",
                    "encoding": "",
                    "name": "matrix",
                    "value": "",
                    "defaultValue": "",
                    "description": "A single transformation matrix or a stack of transformation\nmatrices.",
                    "type": "arraylike, shape (4, 4) or (N, 4, 4)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2ah1b5sh",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.transform._rigid_transform.RigidTransform.from_matrix",
                    "defaultValue": "scipy.spatial.transform._rigid_transform.RigidTransform.from_matrix",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lwasdyup",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zqmc21wl",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "coka9dow",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9f6dfpbf",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.transform._rigid_transform.RigidTransform",
                    "defaultValue": "scipy.spatial.transform._rigid_transform.RigidTransform",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "68hdmdz3",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z21lk35v",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "u349xiua",
            "name": "RigidTransform.from_rotation",
            "description": "RigidTransform.from_rotation(cls, rotation)\n    \n    Initialize from a rotation, without a translation.\n    \n    When applying this transform to a vector ``v``, the result is the\n    same as if the rotation was applied to the vector.\n    ``Tf.from_rotation(r).apply(v) == r.apply(v)``\n    \n    Parameters\n    ----------\n    rotation : `Rotation` instance\n        A single rotation or a stack of rotations.\n    \n    Returns\n    -------\n    transform : `RigidTransform` instance\n    \n    Examples\n    --------\n    >>> from scipy.spatial.transform import RigidTransform as Tf\n    >>> from scipy.spatial.transform import Rotation as R\n    >>> import numpy as np\n    \n    Creating a transform from a single rotation:\n    \n    >>> r = R.from_euler(\"ZYX\", [90, 30, 0], degrees=True)\n    >>> r.apply([1, 0, 0])\n    array([0.       , 0.8660254, -0.5     ])\n    >>> tf = Tf.from_rotation(r)\n    >>> tf.apply([1, 0, 0])\n    array([0.       , 0.8660254, -0.5     ])\n    >>> tf.single\n    True\n    \n    The upper 3x3 submatrix of the transformation matrix is the rotation\n    matrix:\n    \n    >>> np.allclose(tf.as_matrix()[:3, :3], r.as_matrix(), atol=1e-12)\n    True\n    \n    Creating multiple transforms from a stack of rotations:\n    \n    >>> r = R.from_euler(\"ZYX\", [[90, 30, 0], [45, 30, 60]], degrees=True)\n    >>> r.apply([1, 0, 0])\n    array([[0.        , 0.8660254 , -0.5       ],\n           [0.61237244, 0.61237244, -0.5       ]])\n    >>> tf = Tf.from_rotation(r)\n    >>> tf.apply([1, 0, 0])\n    array([[0.        , 0.8660254 , -0.5       ],\n           [0.61237244, 0.61237244, -0.5       ]])\n    >>> tf.single\n    False\n    >>> len(tf)\n    2",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9fc95d78877a435cd0b8b9c90cfddfa9b641d9c5cac138cb4c332e650a535359",
            "fields": [
                {
                    "id": "dx6dr5o_",
                    "encoding": "",
                    "name": "rotation",
                    "value": "",
                    "defaultValue": "",
                    "description": "A single rotation or a stack of rotations.",
                    "type": "Rotation instance",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hf_hz6dh",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.transform._rigid_transform.RigidTransform.from_rotation",
                    "defaultValue": "scipy.spatial.transform._rigid_transform.RigidTransform.from_rotation",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5ofk7a1t",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sfmpsidv",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "xwn75ytf",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "26t_madm",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.transform._rigid_transform.RigidTransform",
                    "defaultValue": "scipy.spatial.transform._rigid_transform.RigidTransform",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sv3jbuh6",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_89l_l0g",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "y6mz0m4l",
            "name": "RigidTransform.from_translation",
            "description": "RigidTransform.from_translation(cls, translation)\n    \n    Initialize from a translation numpy array, without a rotation.\n    \n    When applying this transform to a vector ``v``, the result is the same\n    as if the translation and vector were added together. If ``t`` is the\n    displacement vector of the translation, then:\n    \n    ``Tf.from_translation(t).apply(v) == t + v``\n    \n    Parameters\n    ----------\n    translation : array_like, shape (N, 3) or (3,)\n        A single translation vector or a stack of translation vectors.\n    \n    Returns\n    -------\n    transform : `RigidTransform` instance\n    \n    Examples\n    --------\n    >>> from scipy.spatial.transform import RigidTransform as Tf\n    >>> import numpy as np\n    \n    Creating a transform from a single translation vector:\n    \n    >>> t = np.array([2, 3, 4])\n    >>> t + np.array([1, 0, 0])\n    array([3, 3, 4])\n    >>> tf = Tf.from_translation(t)\n    >>> tf.apply([1, 0, 0])\n    array([3., 3., 4.])\n    >>> tf.single\n    True\n    \n    The top 3x1 points in the rightmost column of the transformation matrix\n    is the translation vector:\n    \n    >>> tf.as_matrix()\n    array([[1., 0., 0., 2.],\n           [0., 1., 0., 3.],\n           [0., 0., 1., 4.],\n           [0., 0., 0., 1.]])\n    >>> np.allclose(tf.as_matrix()[:3, 3], t)\n    True\n    \n    Creating multiple transforms from a stack of translation vectors:\n    \n    >>> t = np.array([[2, 3, 4], [1, 0, 0]])\n    >>> t + np.array([1, 0, 0])\n    array([[3, 3, 4],\n           [2, 0, 0]])\n    >>> tf = Tf.from_translation(t)\n    >>> tf.apply([1, 0, 0])\n    array([[3., 3., 4.],\n           [2., 0., 0.]])\n    >>> np.allclose(tf.as_matrix()[:, :3, 3], t)\n    True\n    >>> tf.single\n    False\n    >>> len(tf)\n    2",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c14b46c862258b6b122ff22cb213337d87aaddd77cdcf7c062d74154f73ed21c",
            "fields": [
                {
                    "id": "vlaffmjj",
                    "encoding": "",
                    "name": "translation",
                    "value": "",
                    "defaultValue": "",
                    "description": "A single translation vector or a stack of translation vectors.",
                    "type": "arraylike, shape (N, 3) or (3,)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ro2cs1ys",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.transform._rigid_transform.RigidTransform.from_translation",
                    "defaultValue": "scipy.spatial.transform._rigid_transform.RigidTransform.from_translation",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qrfqhlwb",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t7vrxfsv",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "8g_qs9o8",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3jwimuha",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.transform._rigid_transform.RigidTransform",
                    "defaultValue": "scipy.spatial.transform._rigid_transform.RigidTransform",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "utb84kn8",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0jgr0bj6",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "2pjxp7l4",
            "name": "RigidTransform.identity",
            "description": "RigidTransform.identity(cls, num=None)\n    \n    Initialize an identity transform.\n    \n    Composition with the identity transform has no effect, and\n    applying the identity transform to a vector has no effect.\n    \n    Parameters\n    ----------\n    num : int, optional\n        Number of identity transforms to generate. If None (default),\n        then a single transform is generated.\n    \n    Returns\n    -------\n    transform : `RigidTransform` instance\n        The identity transform.\n    \n    Examples\n    --------\n    >>> from scipy.spatial.transform import RigidTransform as Tf\n    >>> from scipy.spatial.transform import Rotation as R\n    >>> import numpy as np\n    \n    Creating a single identity transform:\n    \n    >>> tf = Tf.identity()\n    >>> tf.as_matrix()\n    array([[1., 0., 0., 0.],\n           [0., 1., 0., 0.],\n           [0., 0., 1., 0.],\n           [0., 0., 0., 1.]])\n    >>> tf.single\n    True\n    \n    The identity transform can be applied to a vector without effect:\n    \n    >>> tf.apply([1, 2, 3])\n    array([1., 2., 3.])\n    \n    The identity transform when composed with another transform has no\n    effect:\n    \n    >>> rng = np.random.default_rng(123)\n    >>> t = rng.random(3)\n    >>> r = R.random(rng=rng)\n    >>> tf = Tf.from_components(t, r)\n    >>> np.allclose((Tf.identity() * tf).as_matrix(),\n    ...             tf.as_matrix(), atol=1e-12)\n    True\n    \n    Multiple identity transforms can be generated at once:\n    \n    >>> tf = Tf.identity(2)\n    >>> tf.as_matrix()\n    array([[[1., 0., 0., 0.],\n            [0., 1., 0., 0.],\n            [0., 0., 1., 0.],\n            [0., 0., 0., 1.]],\n           [[1., 0., 0., 0.],\n            [0., 1., 0., 0.],\n            [0., 0., 1., 0.],\n            [0., 0., 0., 1.]]])\n    >>> tf.single\n    False\n    >>> len(tf)\n    2",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4f27cfcc26982fd01c1e25cd24c11853dc95ccc94fbc222865a7860a13a48bc0",
            "fields": [
                {
                    "id": "lriqiwj9",
                    "encoding": "",
                    "name": "num",
                    "value": "",
                    "defaultValue": "",
                    "description": "Number of identity transforms to generate. If None (default),\nthen a single transform is generated.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hg8hiui7",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.transform._rigid_transform.RigidTransform.identity",
                    "defaultValue": "scipy.spatial.transform._rigid_transform.RigidTransform.identity",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h40gyk6r",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i5iykted",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "8prskbp_",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "df9snxyq",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.transform._rigid_transform.RigidTransform",
                    "defaultValue": "scipy.spatial.transform._rigid_transform.RigidTransform",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q4t36slm",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xje0_7nm",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "zwomcv1_",
            "name": "RigidTransform.inv",
            "description": "RigidTransform.inv(self)\n    \n    Invert this transform.\n    \n    Composition of a transform with its inverse results in an identity\n    transform.\n    \n    A rigid transform is a composition of a rotation and a translation,\n    where the rotation is applied first, followed by the translation. So the\n    inverse transform is equivalent to the inverse translation followed by\n    the inverse rotation.\n    \n    Returns\n    -------\n    `RigidTransform` instance\n        The inverse of this transform.\n    \n    Examples\n    --------\n    >>> from scipy.spatial.transform import RigidTransform as Tf\n    >>> from scipy.spatial.transform import Rotation as R\n    >>> import numpy as np\n    \n    A transform composed with its inverse results in an identity transform:\n    \n    >>> rng = np.random.default_rng(seed=123)\n    >>> t = rng.random(3)\n    >>> r = R.random(rng=rng)\n    >>> tf = Tf.from_components(t, r)\n    >>> tf.as_matrix()\n    array([[-0.45431291,  0.67276178, -0.58394466,  0.68235186],\n           [-0.23272031,  0.54310598,  0.80676958,  0.05382102],\n           [ 0.85990758,  0.50242162, -0.09017473,  0.22035987],\n           [ 0.        ,  0.        ,  0.        ,  1.        ]])\n    \n    >>> (tf.inv() * tf).as_matrix()\n    array([[[1., 0., 0., 0.],\n            [0., 1., 0., 0.],\n            [0., 0., 1., 0.],\n            [0., 0., 0., 1.]]])\n    \n    The inverse rigid transform is the same as the inverse translation\n    followed by the inverse rotation:\n    \n    >>> t, r = tf.as_components()\n    >>> r_inv = r.inv()  # inverse rotation\n    >>> t_inv = -t  # inverse translation\n    >>> tf_r_inv = Tf.from_rotation(r_inv)\n    >>> tf_t_inv = Tf.from_translation(t_inv)\n    >>> np.allclose((tf_r_inv * tf_t_inv).as_matrix(),\n    ...             tf.inv().as_matrix(),\n    ...             atol=1e-12)\n    True\n    >>> (tf_r_inv * tf_t_inv * tf).as_matrix()\n    array([[[1., 0., 0., 0.],\n            [0., 1., 0., 0.],\n            [0., 0., 1., 0.],\n            [0., 0., 0., 1.]]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9ac7b6f2c35dba83d99e6af5237ec5b667cfc5fa552c3d3a8be5b175e045b34d",
            "fields": [
                {
                    "id": "1_0o7c0j",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.spatial.transform._rigid_transform.RigidTransform.inv object",
                    "type": "Object:scipy.spatial.transform._rigid_transform.RigidTransform",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ftxd_dqj",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.transform._rigid_transform.RigidTransform.inv",
                    "defaultValue": "scipy.spatial.transform._rigid_transform.RigidTransform.inv",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7g655trd",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "njs0f8vo",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "vlu5z0ti",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fl5jmpdi",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.transform._rigid_transform.RigidTransform",
                    "defaultValue": "scipy.spatial.transform._rigid_transform.RigidTransform",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kbw0u84o",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6xzh3ufd",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "c8hq_fjc",
            "name": "Rotation.__init__",
            "description": "\nRotation in 3 dimensions.\n    \n    This class provides an interface to initialize from and represent rotations\n    with:\n    \n    - Quaternions\n    - Rotation Matrices\n    - Rotation Vectors\n    - Modified Rodrigues Parameters\n    - Euler Angles\n    - Davenport Angles (Generalized Euler Angles)\n    \n    The following operations on rotations are supported:\n    \n    - Application on vectors\n    - Rotation Composition\n    - Rotation Inversion\n    - Rotation Indexing\n    \n    Indexing within a rotation is supported since multiple rotation transforms\n    can be stored within a single `Rotation` instance.\n    \n    To create `Rotation` objects use ``from_...`` methods (see examples below).\n    ``Rotation(...)`` is not supposed to be instantiated directly.\n    \n    Attributes\n    ----------\n    single\n    \n    Methods\n    -------\n    __len__\n    from_quat\n    from_matrix\n    from_rotvec\n    from_mrp\n    from_euler\n    from_davenport\n    as_quat\n    as_matrix\n    as_rotvec\n    as_mrp\n    as_euler\n    as_davenport\n    concatenate\n    apply\n    __mul__\n    __pow__\n    inv\n    magnitude\n    approx_equal\n    mean\n    reduce\n    create_group\n    __getitem__\n    identity\n    random\n    align_vectors\n    \n    See Also\n    --------\n    Slerp\n    \n    Notes\n    -----\n    .. versionadded:: 1.2.0\n    \n    Examples\n    --------\n    >>> from scipy.spatial.transform import Rotation as R\n    >>> import numpy as np\n    \n    A `Rotation` instance can be initialized in any of the above formats and\n    converted to any of the others. The underlying object is independent of the\n    representation used for initialization.\n    \n    Consider a counter-clockwise rotation of 90 degrees about the z-axis. This\n    corresponds to the following quaternion (in scalar-last format):\n    \n    >>> r = R.from_quat([0, 0, np.sin(np.pi/4), np.cos(np.pi/4)])\n    \n    The rotation can be expressed in any of the other formats:\n    \n    >>> r.as_matrix()\n    array([[ 2.22044605e-16, -1.00000000e+00,  0.00000000e+00],\n    [ 1.00000000e+00,  2.22044605e-16,  0.00000000e+00],\n    [ 0.00000000e+00,  0.00000000e+00,  1.00000000e+00]])\n    >>> r.as_rotvec()\n    array([0.        , 0.        , 1.57079633])\n    >>> r.as_euler('zyx', degrees=True)\n    array([90.,  0.,  0.])\n    \n    The same rotation can be initialized using a rotation matrix:\n    \n    >>> r = R.from_matrix([[0, -1, 0],\n    ...                    [1, 0, 0],\n    ...                    [0, 0, 1]])\n    \n    Representation in other formats:\n    \n    >>> r.as_quat()\n    array([0.        , 0.        , 0.70710678, 0.70710678])\n    >>> r.as_rotvec()\n    array([0.        , 0.        , 1.57079633])\n    >>> r.as_euler('zyx', degrees=True)\n    array([90.,  0.,  0.])\n    \n    The rotation vector corresponding to this rotation is given by:\n    \n    >>> r = R.from_rotvec(np.pi/2 * np.array([0, 0, 1]))\n    \n    Representation in other formats:\n    \n    >>> r.as_quat()\n    array([0.        , 0.        , 0.70710678, 0.70710678])\n    >>> r.as_matrix()\n    array([[ 2.22044605e-16, -1.00000000e+00,  0.00000000e+00],\n           [ 1.00000000e+00,  2.22044605e-16,  0.00000000e+00],\n           [ 0.00000000e+00,  0.00000000e+00,  1.00000000e+00]])\n    >>> r.as_euler('zyx', degrees=True)\n    array([90.,  0.,  0.])\n    \n    The ``from_euler`` method is quite flexible in the range of input formats\n    it supports. Here we initialize a single rotation about a single axis:\n    \n    >>> r = R.from_euler('z', 90, degrees=True)\n    \n    Again, the object is representation independent and can be converted to any\n    other format:\n    \n    >>> r.as_quat()\n    array([0.        , 0.        , 0.70710678, 0.70710678])\n    >>> r.as_matrix()\n    array([[ 2.22044605e-16, -1.00000000e+00,  0.00000000e+00],\n           [ 1.00000000e+00,  2.22044605e-16,  0.00000000e+00],\n           [ 0.00000000e+00,  0.00000000e+00,  1.00000000e+00]])\n    >>> r.as_rotvec()\n    array([0.        , 0.        , 1.57079633])\n    \n    It is also possible to initialize multiple rotations in a single instance\n    using any of the ``from_...`` functions. Here we initialize a stack of 3\n    rotations using the ``from_euler`` method:\n    \n    >>> r = R.from_euler('zyx', [\n    ... [90, 0, 0],\n    ... [0, 45, 0],\n    ... [45, 60, 30]], degrees=True)\n    \n    The other representations also now return a stack of 3 rotations. For\n    example:\n    \n    >>> r.as_quat()\n    array([[0.        , 0.        , 0.70710678, 0.70710678],\n           [0.        , 0.38268343, 0.        , 0.92387953],\n           [0.39190384, 0.36042341, 0.43967974, 0.72331741]])\n    \n    Applying the above rotations onto a vector:\n    \n    >>> v = [1, 2, 3]\n    >>> r.apply(v)\n    array([[-2.        ,  1.        ,  3.        ],\n           [ 2.82842712,  2.        ,  1.41421356],\n           [ 2.24452282,  0.78093109,  2.89002836]])\n    \n    A `Rotation` instance can be indexed and sliced as if it were a single\n    1D array or list:\n    \n    >>> r.as_quat()\n    array([[0.        , 0.        , 0.70710678, 0.70710678],\n           [0.        , 0.38268343, 0.        , 0.92387953],\n           [0.39190384, 0.36042341, 0.43967974, 0.72331741]])\n    >>> p = r[0]\n    >>> p.as_matrix()\n    array([[ 2.22044605e-16, -1.00000000e+00,  0.00000000e+00],\n           [ 1.00000000e+00,  2.22044605e-16,  0.00000000e+00],\n           [ 0.00000000e+00,  0.00000000e+00,  1.00000000e+00]])\n    >>> q = r[1:3]\n    >>> q.as_quat()\n    array([[0.        , 0.38268343, 0.        , 0.92387953],\n           [0.39190384, 0.36042341, 0.43967974, 0.72331741]])\n    \n    In fact it can be converted to numpy.array:\n    \n    >>> r_array = np.asarray(r)\n    >>> r_array.shape\n    (3,)\n    >>> r_array[0].as_matrix()\n    array([[ 2.22044605e-16, -1.00000000e+00,  0.00000000e+00],\n           [ 1.00000000e+00,  2.22044605e-16,  0.00000000e+00],\n           [ 0.00000000e+00,  0.00000000e+00,  1.00000000e+00]])\n    \n    Multiple rotations can be composed using the ``*`` operator:\n    \n    >>> r1 = R.from_euler('z', 90, degrees=True)\n    >>> r2 = R.from_rotvec([np.pi/4, 0, 0])\n    >>> v = [1, 2, 3]\n    >>> r2.apply(r1.apply(v))\n    array([-2.        , -1.41421356,  2.82842712])\n    >>> r3 = r2 * r1 # Note the order\n    >>> r3.apply(v)\n    array([-2.        , -1.41421356,  2.82842712])\n    \n    A rotation can be composed with itself using the ``**`` operator:\n    \n    >>> p = R.from_rotvec([1, 0, 0])\n    >>> q = p ** 2\n    >>> q.as_rotvec()\n    array([2., 0., 0.])\n    \n    Finally, it is also possible to invert rotations:\n    \n    >>> r1 = R.from_euler('z', [90, 45], degrees=True)\n    >>> r2 = r1.inv()\n    >>> r2.as_euler('zyx', degrees=True)\n    array([[-90.,   0.,   0.],\n           [-45.,   0.,   0.]])\n    \n    The following function can be used to plot rotations with Matplotlib by\n    showing how they transform the standard x, y, z coordinate axes:\n    \n    >>> import matplotlib.pyplot as plt\n    \n    >>> def plot_rotated_axes(ax, r, name=None, offset=(0, 0, 0), scale=1):\n    ...     colors = (\"#FF6666\", \"#005533\", \"#1199EE\")  # Colorblind-safe RGB\n    ...     loc = np.array([offset, offset])\n    ...     for i, (axis, c) in enumerate(zip((ax.xaxis, ax.yaxis, ax.zaxis),\n    ...                                       colors)):\n    ...         axlabel = axis.axis_name\n    ...         axis.set_label_text(axlabel)\n    ...         axis.label.set_color(c)\n    ...         axis.line.set_color(c)\n    ...         axis.set_tick_params(colors=c)\n    ...         line = np.zeros((2, 3))\n    ...         line[1, i] = scale\n    ...         line_rot = r.apply(line)\n    ...         line_plot = line_rot + loc\n    ...         ax.plot(line_plot[:, 0], line_plot[:, 1], line_plot[:, 2], c)\n    ...         text_loc = line[1]*1.2\n    ...         text_loc_rot = r.apply(text_loc)\n    ...         text_plot = text_loc_rot + loc[0]\n    ...         ax.text(*text_plot, axlabel.upper(), color=c,\n    ...                 va=\"center\", ha=\"center\")\n    ...     ax.text(*offset, name, color=\"k\", va=\"center\", ha=\"center\",\n    ...             bbox={\"fc\": \"w\", \"alpha\": 0.8, \"boxstyle\": \"circle\"})\n    \n    Create three rotations - the identity and two Euler rotations using\n    intrinsic and extrinsic conventions:\n    \n    >>> r0 = R.identity()\n    >>> r1 = R.from_euler(\"ZYX\", [90, -30, 0], degrees=True)  # intrinsic\n    >>> r2 = R.from_euler(\"zyx\", [90, -30, 0], degrees=True)  # extrinsic\n    \n    Add all three rotations to a single plot:\n    \n    >>> ax = plt.figure().add_subplot(projection=\"3d\", proj_type=\"ortho\")\n    >>> plot_rotated_axes(ax, r0, name=\"r0\", offset=(0, 0, 0))\n    >>> plot_rotated_axes(ax, r1, name=\"r1\", offset=(3, 0, 0))\n    >>> plot_rotated_axes(ax, r2, name=\"r2\", offset=(6, 0, 0))\n    >>> _ = ax.annotate(\n    ...     \"r0: Identity Rotation\\n\"\n    ...     \"r1: Intrinsic Euler Rotation (ZYX)\\n\"\n    ...     \"r2: Extrinsic Euler Rotation (zyx)\",\n    ...     xy=(0.6, 0.7), xycoords=\"axes fraction\", ha=\"left\"\n    ... )\n    >>> ax.set(xlim=(-1.25, 7.25), ylim=(-1.25, 1.25), zlim=(-1.25, 1.25))\n    >>> ax.set(xticks=range(-1, 8), yticks=[-1, 0, 1], zticks=[-1, 0, 1])\n    >>> ax.set_aspect(\"equal\", adjustable=\"box\")\n    >>> ax.figure.set_size_inches(6, 5)\n    >>> plt.tight_layout()\n    \n    Show the plot:\n    \n    >>> plt.show()\n    \n    These examples serve as an overview into the `Rotation` class and highlight\n    major functionalities. For more thorough examples of the range of input and\n    output formats supported, consult the individual method's examples.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5f999eabc079d3f0b77665d61e1755fbe078190f4ef55f4c7424b927345df2c4",
            "fields": [
                {
                    "id": "rtdwy3ty",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to Rotation object",
                    "type": "Object:scipy.spatial.transform._rotation.Rotation",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "id": "nrpqp12r",
                    "encoding": "",
                    "name": "args",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vt4sv72s",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kghggdav",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.transform._rotation.Rotation.__init__",
                    "defaultValue": "scipy.spatial.transform._rotation.Rotation.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x39b0_mg",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xagnyv7i",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ibglvbay",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l51zu1t2",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.transform._rotation.Rotation",
                    "defaultValue": "scipy.spatial.transform._rotation.Rotation",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jqhbe2a_",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hu8qk780",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "9g0bmhbe",
            "name": "Rotation.align_vectors",
            "description": "Rotation.align_vectors(cls, a, b, weights=None, return_sensitivity=False)\n    \n    Estimate a rotation to optimally align two sets of vectors.\n    \n    Find a rotation between frames A and B which best aligns a set of\n    vectors `a` and `b` observed in these frames. The following loss\n    function is minimized to solve for the rotation matrix\n    :math:`C`:\n    \n    .. math::\n    \n        L(C) = \\frac{1}{2} \\sum_{i = 1}^{n} w_i \\lVert \\mathbf{a}_i -\n        C \\mathbf{b}_i \\rVert^2 ,\n    \n    where :math:`w_i`'s are the `weights` corresponding to each vector.\n    \n    The rotation is estimated with Kabsch algorithm [1]_, and solves what\n    is known as the \"pointing problem\", or \"Wahba's problem\" [2]_.\n    \n    There are two special cases. The first is if a single vector is given\n    for `a` and `b`, in which the shortest distance rotation that aligns\n    `b` to `a` is returned.\n    \n    The second is when one of the weights is infinity. In this case, the\n    shortest distance rotation between the primary infinite weight vectors\n    is calculated as above. Then, the rotation about the aligned primary\n    vectors is calculated such that the secondary vectors are optimally\n    aligned per the above loss function. The result is the composition\n    of these two rotations. The result via this process is the same as the\n    Kabsch algorithm as the corresponding weight approaches infinity in\n    the limit. For a single secondary vector this is known as the\n    \"align-constrain\" algorithm [3]_.\n    \n    For both special cases (single vectors or an infinite weight), the\n    sensitivity matrix does not have physical meaning and an error will be\n    raised if it is requested. For an infinite weight, the primary vectors\n    act as a constraint with perfect alignment, so their contribution to\n    `rssd` will be forced to 0 even if they are of different lengths.\n    \n    Parameters\n    ----------\n    a : array_like, shape (3,) or (N, 3)\n        Vector components observed in initial frame A. Each row of `a`\n        denotes a vector.\n    b : array_like, shape (3,) or (N, 3)\n        Vector components observed in another frame B. Each row of `b`\n        denotes a vector.\n    weights : array_like shape (N,), optional\n        Weights describing the relative importance of the vector\n        observations. If None (default), then all values in `weights` are\n        assumed to be 1. One and only one weight may be infinity, and\n        weights must be positive.\n    return_sensitivity : bool, optional\n        Whether to return the sensitivity matrix. See Notes for details.\n        Default is False.\n    \n    Returns\n    -------\n    rotation : `Rotation` instance\n        Best estimate of the rotation that transforms `b` to `a`.\n    rssd : float\n        Stands for \"root sum squared distance\". Square root of the weighted\n        sum of the squared distances between the given sets of vectors\n        after alignment. It is equal to ``sqrt(2 * minimum_loss)``, where\n        ``minimum_loss`` is the loss function evaluated for the found\n        optimal rotation.\n        Note that the result will also be weighted by the vectors'\n        magnitudes, so perfectly aligned vector pairs will have nonzero\n        `rssd` if they are not of the same length. So, depending on the\n        use case it may be desirable to normalize the input vectors to unit\n        length before calling this method.\n    sensitivity_matrix : ndarray, shape (3, 3)\n        Sensitivity matrix of the estimated rotation estimate as explained\n        in Notes. Returned only when `return_sensitivity` is True. Not\n        valid if aligning a single pair of vectors or if there is an\n        infinite weight, in which cases an error will be raised.\n    \n    Notes\n    -----\n    The sensitivity matrix gives the sensitivity of the estimated rotation\n    to small perturbations of the vector measurements. Specifically we\n    consider the rotation estimate error as a small rotation vector of\n    frame A. The sensitivity matrix is proportional to the covariance of\n    this rotation vector assuming that the vectors in `a` was measured with\n    errors significantly less than their lengths. To get the true\n    covariance matrix, the returned sensitivity matrix must be multiplied\n    by harmonic mean [4]_ of variance in each observation. Note that\n    `weights` are supposed to be inversely proportional to the observation\n    variances to get consistent results. For example, if all vectors are\n    measured with the same accuracy of 0.01 (`weights` must be all equal),\n    then you should multiple the sensitivity matrix by 0.01**2 to get the\n    covariance.\n    \n    Refer to [5]_ for more rigorous discussion of the covariance\n    estimation. See [6]_ for more discussion of the pointing problem and\n    minimal proper pointing.\n    \n    References\n    ----------\n    .. [1] https://en.wikipedia.org/wiki/Kabsch_algorithm\n    .. [2] https://en.wikipedia.org/wiki/Wahba%27s_problem\n    .. [3] Magner, Robert,\n            \"Extending target tracking capabilities through trajectory and\n            momentum setpoint optimization.\" Small Satellite Conference,\n            2018.\n    .. [4] https://en.wikipedia.org/wiki/Harmonic_mean\n    .. [5] F. Landis Markley,\n            \"Attitude determination using vector observations: a fast\n            optimal matrix algorithm\", Journal of Astronautical Sciences,\n            Vol. 41, No.2, 1993, pp. 261-280.\n    .. [6] Bar-Itzhack, Itzhack Y., Daniel Hershkowitz, and Leiba Rodman,\n            \"Pointing in Real Euclidean Space\", Journal of Guidance,\n            Control, and Dynamics, Vol. 20, No. 5, 1997, pp. 916-922.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.spatial.transform import Rotation as R\n    \n    Here we run the baseline Kabsch algorithm to best align two sets of\n    vectors, where there is noise on the last two vector measurements of\n    the ``b`` set:\n    \n    >>> a = [[0, 1, 0], [0, 1, 1], [0, 1, 1]]\n    >>> b = [[1, 0, 0], [1, 1.1, 0], [1, 0.9, 0]]\n    >>> rot, rssd, sens = R.align_vectors(a, b, return_sensitivity=True)\n    >>> rot.as_matrix()\n    array([[0., 0., 1.],\n           [1., 0., 0.],\n           [0., 1., 0.]])\n    \n    When we apply the rotation to ``b``, we get vectors close to ``a``:\n    \n    >>> rot.apply(b)\n    array([[0. , 1. , 0. ],\n           [0. , 1. , 1.1],\n           [0. , 1. , 0.9]])\n    \n    The error for the first vector is 0, and for the last two the error is\n    magnitude 0.1. The `rssd` is the square root of the sum of the\n    weighted squared errors, and the default weights are all 1, so in this\n    case the `rssd` is calculated as\n    ``sqrt(1 * 0**2 + 1 * 0.1**2 + 1 * (-0.1)**2) = 0.141421356237308``\n    \n    >>> a - rot.apply(b)\n    array([[ 0., 0.,  0. ],\n           [ 0., 0., -0.1],\n           [ 0., 0.,  0.1]])\n    >>> np.sqrt(np.sum(np.ones(3) @ (a - rot.apply(b))**2))\n    0.141421356237308\n    >>> rssd\n    0.141421356237308\n    \n    The sensitivity matrix for this example is as follows:\n    \n    >>> sens\n    array([[0.2, 0. , 0.],\n           [0. , 1.5, 1.],\n           [0. , 1. , 1.]])\n    \n    Special case 1: Find a minimum rotation between single vectors:\n    \n    >>> a = [1, 0, 0]\n    >>> b = [0, 1, 0]\n    >>> rot, _ = R.align_vectors(a, b)\n    >>> rot.as_matrix()\n    array([[0., 1., 0.],\n           [-1., 0., 0.],\n           [0., 0., 1.]])\n    >>> rot.apply(b)\n    array([1., 0., 0.])\n    \n    Special case 2: One infinite weight. Here we find a rotation between\n    primary and secondary vectors that can align exactly:\n    \n    >>> a = [[0, 1, 0], [0, 1, 1]]\n    >>> b = [[1, 0, 0], [1, 1, 0]]\n    >>> rot, _ = R.align_vectors(a, b, weights=[np.inf, 1])\n    >>> rot.as_matrix()\n    array([[0., 0., 1.],\n           [1., 0., 0.],\n           [0., 1., 0.]])\n    >>> rot.apply(b)\n    array([[0., 1., 0.],\n           [0., 1., 1.]])\n    \n    Here the secondary vectors must be best-fit:\n    \n    >>> a = [[0, 1, 0], [0, 1, 1]]\n    >>> b = [[1, 0, 0], [1, 2, 0]]\n    >>> rot, _ = R.align_vectors(a, b, weights=[np.inf, 1])\n    >>> rot.as_matrix()\n    array([[0., 0., 1.],\n           [1., 0., 0.],\n           [0., 1., 0.]])\n    >>> rot.apply(b)\n    array([[0., 1., 0.],\n           [0., 1., 2.]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a9f8b8496686df03e0eb3531f9ddca063187b843bb4547ed62a3e55edf353110",
            "fields": [
                {
                    "id": "_fi8cjix",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Vector components observed in initial frame A. Each row of `a`\ndenotes a vector.",
                    "type": "arraylike, shape (3,) or (N, 3)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9704jsa9",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "Vector components observed in another frame B. Each row of `b`\ndenotes a vector.",
                    "type": "arraylike, shape (3,) or (N, 3)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s9_tnb79",
                    "encoding": "",
                    "name": "weights",
                    "value": "",
                    "defaultValue": "",
                    "description": "Weights describing the relative importance of the vector\nobservations. If None (default), then all values in `weights` are\nassumed to be 1. One and only one weight may be infinity, and\nweights must be positive.",
                    "type": "arraylike shape (N,)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uni1671f",
                    "encoding": "",
                    "name": "return_sensitivity",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to return the sensitivity matrix. See Notes for details.\nDefault is False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jk23lin1",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.transform._rotation.Rotation.align_vectors",
                    "defaultValue": "scipy.spatial.transform._rotation.Rotation.align_vectors",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "spz3hdc3",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "muxe6fvx",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "9y4osfyl",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m724baob",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.transform._rotation.Rotation",
                    "defaultValue": "scipy.spatial.transform._rotation.Rotation",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ubevb1b_",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ybwxtbdj",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "73vkbq5f",
            "name": "Rotation.apply",
            "description": "Rotation.apply(self, vectors, inverse=False)\n    \n    Apply this rotation to a set of vectors.\n    \n    If the original frame rotates to the final frame by this rotation, then\n    its application to a vector can be seen in two ways:\n    \n        - As a projection of vector components expressed in the final frame\n          to the original frame.\n        - As the physical rotation of a vector being glued to the original\n          frame as it rotates. In this case the vector components are\n          expressed in the original frame before and after the rotation.\n    \n    In terms of rotation matrices, this application is the same as\n    ``self.as_matrix() @ vectors``.\n    \n    Parameters\n    ----------\n    vectors : array_like, shape (3,) or (N, 3)\n        Each `vectors[i]` represents a vector in 3D space. A single vector\n        can either be specified with shape `(3, )` or `(1, 3)`. The number\n        of rotations and number of vectors given must follow standard numpy\n        broadcasting rules: either one of them equals unity or they both\n        equal each other.\n    inverse : boolean, optional\n        If True then the inverse of the rotation(s) is applied to the input\n        vectors. Default is False.\n    \n    Returns\n    -------\n    rotated_vectors : ndarray, shape (3,) or (N, 3)\n        Result of applying rotation on input vectors.\n        Shape depends on the following cases:\n    \n            - If object contains a single rotation (as opposed to a stack\n              with a single rotation) and a single vector is specified with\n              shape ``(3,)``, then `rotated_vectors` has shape ``(3,)``.\n            - In all other cases, `rotated_vectors` has shape ``(N, 3)``,\n              where ``N`` is either the number of rotations or vectors.\n    \n    Examples\n    --------\n    >>> from scipy.spatial.transform import Rotation as R\n    >>> import numpy as np\n    \n    Single rotation applied on a single vector:\n    \n    >>> vector = np.array([1, 0, 0])\n    >>> r = R.from_rotvec([0, 0, np.pi/2])\n    >>> r.as_matrix()\n    array([[ 2.22044605e-16, -1.00000000e+00,  0.00000000e+00],\n           [ 1.00000000e+00,  2.22044605e-16,  0.00000000e+00],\n           [ 0.00000000e+00,  0.00000000e+00,  1.00000000e+00]])\n    >>> r.apply(vector)\n    array([2.22044605e-16, 1.00000000e+00, 0.00000000e+00])\n    >>> r.apply(vector).shape\n    (3,)\n    \n    Single rotation applied on multiple vectors:\n    \n    >>> vectors = np.array([\n    ... [1, 0, 0],\n    ... [1, 2, 3]])\n    >>> r = R.from_rotvec([0, 0, np.pi/4])\n    >>> r.as_matrix()\n    array([[ 0.70710678, -0.70710678,  0.        ],\n           [ 0.70710678,  0.70710678,  0.        ],\n           [ 0.        ,  0.        ,  1.        ]])\n    >>> r.apply(vectors)\n    array([[ 0.70710678,  0.70710678,  0.        ],\n           [-0.70710678,  2.12132034,  3.        ]])\n    >>> r.apply(vectors).shape\n    (2, 3)\n    \n    Multiple rotations on a single vector:\n    \n    >>> r = R.from_rotvec([[0, 0, np.pi/4], [np.pi/2, 0, 0]])\n    >>> vector = np.array([1,2,3])\n    >>> r.as_matrix()\n    array([[[ 7.07106781e-01, -7.07106781e-01,  0.00000000e+00],\n            [ 7.07106781e-01,  7.07106781e-01,  0.00000000e+00],\n            [ 0.00000000e+00,  0.00000000e+00,  1.00000000e+00]],\n           [[ 1.00000000e+00,  0.00000000e+00,  0.00000000e+00],\n            [ 0.00000000e+00,  2.22044605e-16, -1.00000000e+00],\n            [ 0.00000000e+00,  1.00000000e+00,  2.22044605e-16]]])\n    >>> r.apply(vector)\n    array([[-0.70710678,  2.12132034,  3.        ],\n           [ 1.        , -3.        ,  2.        ]])\n    >>> r.apply(vector).shape\n    (2, 3)\n    \n    Multiple rotations on multiple vectors. Each rotation is applied on the\n    corresponding vector:\n    \n    >>> r = R.from_euler('zxy', [\n    ... [0, 0, 90],\n    ... [45, 30, 60]], degrees=True)\n    >>> vectors = [\n    ... [1, 2, 3],\n    ... [1, 0, -1]]\n    >>> r.apply(vectors)\n    array([[ 3.        ,  2.        , -1.        ],\n           [-0.09026039,  1.11237244, -0.86860844]])\n    >>> r.apply(vectors).shape\n    (2, 3)\n    \n    It is also possible to apply the inverse rotation:\n    \n    >>> r = R.from_euler('zxy', [\n    ... [0, 0, 90],\n    ... [45, 30, 60]], degrees=True)\n    >>> vectors = [\n    ... [1, 2, 3],\n    ... [1, 0, -1]]\n    >>> r.apply(vectors, inverse=True)\n    array([[-3.        ,  2.        ,  1.        ],\n           [ 1.09533535, -0.8365163 ,  0.3169873 ]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c2f2132e1120ca9114f9bd69d6c05c872cdd4c7e265140ef4cb35cb8e46111bb",
            "fields": [
                {
                    "id": "jxvocrqr",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.spatial.transform._rotation.Rotation.apply object",
                    "type": "Object:scipy.spatial.transform._rotation.Rotation",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h66ocrp4",
                    "encoding": "",
                    "name": "vectors",
                    "value": "",
                    "defaultValue": "",
                    "description": "Each `vectors[i]` represents a vector in 3D space. A single vector\ncan either be specified with shape `(3, )` or `(1, 3)`. The number\nof rotations and number of vectors given must follow standard numpy\nbroadcasting rules: either one of them equals unity or they both\nequal each other.",
                    "type": "arraylike, shape (3,) or (N, 3)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "teanzfcx",
                    "encoding": "",
                    "name": "inverse",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True then the inverse of the rotation(s) is applied to the input\nvectors. Default is False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m4rn3a09",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.transform._rotation.Rotation.apply",
                    "defaultValue": "scipy.spatial.transform._rotation.Rotation.apply",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "th2ydq6a",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ho40n0fa",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "tq4hzkx8",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9ux5h87w",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.transform._rotation.Rotation",
                    "defaultValue": "scipy.spatial.transform._rotation.Rotation",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "39vzh27v",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "odllm9ht",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "0gh88iuv",
            "name": "Rotation.approx_equal",
            "description": "Rotation.approx_equal(self, Rotation other, atol=None, degrees=False)\n    \n    Determine if another rotation is approximately equal to this one.\n    \n    Equality is measured by calculating the smallest angle between the\n    rotations, and checking to see if it is smaller than `atol`.\n    \n    Parameters\n    ----------\n    other : `Rotation` instance\n        Object containing the rotations to measure against this one.\n    atol : float, optional\n        The absolute angular tolerance, below which the rotations are\n        considered equal. If not given, then set to 1e-8 radians by\n        default.\n    degrees : bool, optional\n        If True and `atol` is given, then `atol` is measured in degrees. If\n        False (default), then atol is measured in radians.\n    \n    Returns\n    -------\n    approx_equal : ndarray or bool\n        Whether the rotations are approximately equal, bool if object\n        contains a single rotation and ndarray if object contains multiple\n        rotations.\n    \n    Examples\n    --------\n    >>> from scipy.spatial.transform import Rotation as R\n    >>> import numpy as np\n    >>> p = R.from_quat([0, 0, 0, 1])\n    >>> q = R.from_quat(np.eye(4))\n    >>> p.approx_equal(q)\n    array([False, False, False, True])\n    \n    Approximate equality for a single rotation:\n    \n    >>> p.approx_equal(q[0])\n    False",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1296576ed2b9a3f0c2b51f37899f56b7228745406b2ee5938b107e36ebce46ca",
            "fields": [
                {
                    "id": "sc1nk22i",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.spatial.transform._rotation.Rotation.approx_equal object",
                    "type": "Object:scipy.spatial.transform._rotation.Rotation",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v5k22n4l",
                    "encoding": "",
                    "name": "other",
                    "value": "",
                    "defaultValue": "",
                    "description": "Object containing the rotations to measure against this one.",
                    "type": "Rotation instance",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_y1ov9r2",
                    "encoding": "",
                    "name": "atol",
                    "value": "",
                    "defaultValue": "",
                    "description": "The absolute angular tolerance, below which the rotations are\nconsidered equal. If not given, then set to 1e-8 radians by\ndefault.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hqwpj4eu",
                    "encoding": "",
                    "name": "degrees",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True and `atol` is given, then `atol` is measured in degrees. If\nFalse (default), then atol is measured in radians.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6lyjwjf5",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.transform._rotation.Rotation.approx_equal",
                    "defaultValue": "scipy.spatial.transform._rotation.Rotation.approx_equal",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_upkpl0h",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ntt97dbk",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "nce8cm1x",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i6uf6i44",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.transform._rotation.Rotation",
                    "defaultValue": "scipy.spatial.transform._rotation.Rotation",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "972bnbah",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "potw84qp",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "8he3hp3p",
            "name": "Rotation.as_davenport",
            "description": "Rotation.as_davenport(self, axes, order, degrees=False)\n    \n    Represent as Davenport angles.\n    \n    Any orientation can be expressed as a composition of 3 elementary\n    rotations.\n    \n    For both Euler angles and Davenport angles, consecutive axes must\n    be are orthogonal (``axis2`` is orthogonal to both ``axis1`` and\n    ``axis3``). For Euler angles, there is an additional relationship\n    between ``axis1`` or ``axis3``, with two possibilities:\n    \n        - ``axis1`` and ``axis3`` are also orthogonal (asymmetric sequence)\n        - ``axis1 == axis3`` (symmetric sequence)\n    \n    For Davenport angles, this last relationship is relaxed [1]_, and only\n    the consecutive orthogonal axes requirement is maintained.\n    \n    A slightly modified version of the algorithm from [2]_ has been used to\n    calculate Davenport angles for the rotation about a given sequence of\n    axes.\n    \n    Davenport angles, just like Euler angles, suffer from the problem of\n    gimbal lock [3]_, where the representation loses a degree of freedom\n    and it is not possible to determine the first and third angles\n    uniquely. In this case, a warning is raised, and the third angle is set\n    to zero. Note however that the returned angles still represent the\n    correct rotation.\n    \n    Parameters\n    ----------\n    axes : array_like, shape (3,) or ([1 or 2 or 3], 3)\n        Axis of rotation, if one dimensional. If two dimensional, describes the\n        sequence of axes for rotations, where each axes[i, :] is the ith\n        axis. If more than one axis is given, then the second axis must be\n        orthogonal to both the first and third axes.\n    order : string\n        If it belongs to the set {'e', 'extrinsic'}, the sequence will be\n        extrinsic. If if belongs to the set {'i', 'intrinsic'}, sequence\n        will be treated as intrinsic.\n    degrees : boolean, optional\n        Returned angles are in degrees if this flag is True, else they are\n        in radians. Default is False.\n    \n    Returns\n    -------\n    angles : ndarray, shape (3,) or (N, 3)\n        Shape depends on shape of inputs used to initialize object.\n        The returned angles are in the range:\n    \n        - First angle belongs to [-180, 180] degrees (both inclusive)\n        - Third angle belongs to [-180, 180] degrees (both inclusive)\n        - Second angle belongs to a set of size 180 degrees,\n          given by: ``[-abs(lambda), 180 - abs(lambda)]``, where ``lambda``\n          is the angle between the first and third axes.\n    \n    References\n    ----------\n    .. [1] Shuster, Malcolm & Markley, Landis. (2003). Generalization of\n           the Euler Angles. Journal of the Astronautical Sciences. 51. 123-132. 10.1007/BF03546304.\n    .. [2] Bernardes E, Viollet S (2022) Quaternion to Euler angles\n           conversion: A direct, general and computationally efficient method.\n           PLoS ONE 17(11): e0276302. 10.1371/journal.pone.0276302\n    .. [3] https://en.wikipedia.org/wiki/Gimbal_lock#In_applied_mathematics\n    \n    Examples\n    --------\n    >>> from scipy.spatial.transform import Rotation as R\n    >>> import numpy as np\n    \n    Davenport angles are a generalization of Euler angles, when we use the\n    canonical basis axes:\n    \n    >>> ex = [1, 0, 0]\n    >>> ey = [0, 1, 0]\n    >>> ez = [0, 0, 1]\n    \n    Represent a single rotation:\n    \n    >>> r = R.from_rotvec([0, 0, np.pi/2])\n    >>> r.as_davenport([ez, ex, ey], 'extrinsic', degrees=True)\n    array([90.,  0.,  0.])\n    >>> r.as_euler('zxy', degrees=True)\n    array([90.,  0.,  0.])\n    >>> r.as_davenport([ez, ex, ey], 'extrinsic', degrees=True).shape\n    (3,)\n    \n    Represent a stack of single rotation:\n    \n    >>> r = R.from_rotvec([[0, 0, np.pi/2]])\n    >>> r.as_davenport([ez, ex, ey], 'extrinsic', degrees=True)\n    array([[90.,  0.,  0.]])\n    >>> r.as_davenport([ez, ex, ey], 'extrinsic', degrees=True).shape\n    (1, 3)\n    \n    Represent multiple rotations in a single object:\n    \n    >>> r = R.from_rotvec([\n    ... [0, 0, 90],\n    ... [45, 0, 0]], degrees=True)\n    >>> r.as_davenport([ez, ex, ey], 'extrinsic', degrees=True)\n    array([[90.,  0.,  0.],\n           [ 0., 45.,  0.]])\n    >>> r.as_davenport([ez, ex, ey], 'extrinsic', degrees=True).shape\n    (2, 3)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "3bb2a64a2b3419a02dce5bf886229b96d8f62dd21adb86f1e88ce2817a26543a",
            "fields": [
                {
                    "id": "xit145pb",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.spatial.transform._rotation.Rotation.as_davenport object",
                    "type": "Object:scipy.spatial.transform._rotation.Rotation",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yoi_fkjj",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "Axis of rotation, if one dimensional. If two dimensional, describes the\nsequence of axes for rotations, where each axes[i, :] is the ith\naxis. If more than one axis is given, then the second axis must be\northogonal to both the first and third axes.",
                    "type": "arraylike, shape (3,) or ([1 or 2 or 3], 3)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lud9w1la",
                    "encoding": "",
                    "name": "order",
                    "value": "",
                    "defaultValue": "",
                    "description": "If it belongs to the set {'e', 'extrinsic'}, the sequence will be\nextrinsic. If if belongs to the set {'i', 'intrinsic'}, sequence\nwill be treated as intrinsic.",
                    "type": "string",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uenyjdim",
                    "encoding": "",
                    "name": "degrees",
                    "value": false,
                    "defaultValue": false,
                    "description": "Returned angles are in degrees if this flag is True, else they are\nin radians. Default is False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vbkl822q",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.transform._rotation.Rotation.as_davenport",
                    "defaultValue": "scipy.spatial.transform._rotation.Rotation.as_davenport",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_xzjftia",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xg0q3twh",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "gve8h_y_",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mn2di7we",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.transform._rotation.Rotation",
                    "defaultValue": "scipy.spatial.transform._rotation.Rotation",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xzj87dry",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dk6elwzz",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "pcn219nz",
            "name": "Rotation.as_euler",
            "description": "Rotation.as_euler(self, seq, degrees=False)\n    \n    Represent as Euler angles.\n    \n    Any orientation can be expressed as a composition of 3 elementary\n    rotations. Once the axis sequence has been chosen, Euler angles define\n    the angle of rotation around each respective axis [1]_.\n    \n    The algorithm from [2]_ has been used to calculate Euler angles for the\n    rotation about a given sequence of axes.\n    \n    Euler angles suffer from the problem of gimbal lock [3]_, where the\n    representation loses a degree of freedom and it is not possible to\n    determine the first and third angles uniquely. In this case,\n    a warning is raised, and the third angle is set to zero. Note however\n    that the returned angles still represent the correct rotation.\n    \n    Parameters\n    ----------\n    seq : string, length 3\n        3 characters belonging to the set {'X', 'Y', 'Z'} for intrinsic\n        rotations, or {'x', 'y', 'z'} for extrinsic rotations [1]_.\n        Adjacent axes cannot be the same.\n        Extrinsic and intrinsic rotations cannot be mixed in one function\n        call.\n    degrees : boolean, optional\n        Returned angles are in degrees if this flag is True, else they are\n        in radians. Default is False.\n    \n    Returns\n    -------\n    angles : ndarray, shape (3,) or (N, 3)\n        Shape depends on shape of inputs used to initialize object.\n        The returned angles are in the range:\n    \n        - First angle belongs to [-180, 180] degrees (both inclusive)\n        - Third angle belongs to [-180, 180] degrees (both inclusive)\n        - Second angle belongs to:\n    \n            - [-90, 90] degrees if all axes are different (like xyz)\n            - [0, 180] degrees if first and third axes are the same\n              (like zxz)\n    \n    References\n    ----------\n    .. [1] https://en.wikipedia.org/wiki/Euler_angles#Definition_by_intrinsic_rotations\n    .. [2] Bernardes E, Viollet S (2022) Quaternion to Euler angles\n           conversion: A direct, general and computationally efficient\n           method. PLoS ONE 17(11): e0276302.\n           https://doi.org/10.1371/journal.pone.0276302\n    .. [3] https://en.wikipedia.org/wiki/Gimbal_lock#In_applied_mathematics\n    \n    Examples\n    --------\n    >>> from scipy.spatial.transform import Rotation as R\n    >>> import numpy as np\n    \n    Represent a single rotation:\n    \n    >>> r = R.from_rotvec([0, 0, np.pi/2])\n    >>> r.as_euler('zxy', degrees=True)\n    array([90.,  0.,  0.])\n    >>> r.as_euler('zxy', degrees=True).shape\n    (3,)\n    \n    Represent a stack of single rotation:\n    \n    >>> r = R.from_rotvec([[0, 0, np.pi/2]])\n    >>> r.as_euler('zxy', degrees=True)\n    array([[90.,  0.,  0.]])\n    >>> r.as_euler('zxy', degrees=True).shape\n    (1, 3)\n    \n    Represent multiple rotations in a single object:\n    \n    >>> r = R.from_rotvec([\n    ... [0, 0, np.pi/2],\n    ... [0, -np.pi/3, 0],\n    ... [np.pi/4, 0, 0]])\n    >>> r.as_euler('zxy', degrees=True)\n    array([[ 90.,   0.,   0.],\n           [  0.,   0., -60.],\n           [  0.,  45.,   0.]])\n    >>> r.as_euler('zxy', degrees=True).shape\n    (3, 3)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6a11c42bc89344ccc8824cab5d095007653639e8172f57e71fcff777ab33102c",
            "fields": [
                {
                    "id": "dgjoa37v",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.spatial.transform._rotation.Rotation.as_euler object",
                    "type": "Object:scipy.spatial.transform._rotation.Rotation",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mdbbxt_0",
                    "encoding": "",
                    "name": "seq",
                    "value": "",
                    "defaultValue": "",
                    "description": "3 characters belonging to the set {'X', 'Y', 'Z'} for intrinsic\nrotations, or {'x', 'y', 'z'} for extrinsic rotations [1]_.\nAdjacent axes cannot be the same.\nExtrinsic and intrinsic rotations cannot be mixed in one function\ncall.",
                    "type": "string, length 3",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x24yfsqi",
                    "encoding": "",
                    "name": "degrees",
                    "value": false,
                    "defaultValue": false,
                    "description": "Returned angles are in degrees if this flag is True, else they are\nin radians. Default is False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z_o_dfd0",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.transform._rotation.Rotation.as_euler",
                    "defaultValue": "scipy.spatial.transform._rotation.Rotation.as_euler",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v2ar8j72",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aexta0lh",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "74ice3j2",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sflyay2k",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.transform._rotation.Rotation",
                    "defaultValue": "scipy.spatial.transform._rotation.Rotation",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r8u24ke6",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3fpjf9_x",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "3vdq2pco",
            "name": "Rotation.as_matrix",
            "description": "Rotation.as_matrix(self)\n    \n    Represent as rotation matrix.\n    \n    3D rotations can be represented using rotation matrices, which\n    are 3 x 3 real orthogonal matrices with determinant equal to +1 [1]_.\n    \n    Returns\n    -------\n    matrix : ndarray, shape (3, 3) or (N, 3, 3)\n        Shape depends on shape of inputs used for initialization.\n    \n    References\n    ----------\n    .. [1] https://en.wikipedia.org/wiki/Rotation_matrix#In_three_dimensions\n    \n    Examples\n    --------\n    >>> from scipy.spatial.transform import Rotation as R\n    >>> import numpy as np\n    \n    Represent a single rotation:\n    \n    >>> r = R.from_rotvec([0, 0, np.pi/2])\n    >>> r.as_matrix()\n    array([[ 2.22044605e-16, -1.00000000e+00,  0.00000000e+00],\n           [ 1.00000000e+00,  2.22044605e-16,  0.00000000e+00],\n           [ 0.00000000e+00,  0.00000000e+00,  1.00000000e+00]])\n    >>> r.as_matrix().shape\n    (3, 3)\n    \n    Represent a stack with a single rotation:\n    \n    >>> r = R.from_quat([[1, 1, 0, 0]])\n    >>> r.as_matrix()\n    array([[[ 0.,  1.,  0.],\n            [ 1.,  0.,  0.],\n            [ 0.,  0., -1.]]])\n    >>> r.as_matrix().shape\n    (1, 3, 3)\n    \n    Represent multiple rotations:\n    \n    >>> r = R.from_rotvec([[np.pi/2, 0, 0], [0, 0, np.pi/2]])\n    >>> r.as_matrix()\n    array([[[ 1.00000000e+00,  0.00000000e+00,  0.00000000e+00],\n            [ 0.00000000e+00,  2.22044605e-16, -1.00000000e+00],\n            [ 0.00000000e+00,  1.00000000e+00,  2.22044605e-16]],\n           [[ 2.22044605e-16, -1.00000000e+00,  0.00000000e+00],\n            [ 1.00000000e+00,  2.22044605e-16,  0.00000000e+00],\n            [ 0.00000000e+00,  0.00000000e+00,  1.00000000e+00]]])\n    >>> r.as_matrix().shape\n    (2, 3, 3)\n    \n    Notes\n    -----\n    This function was called as_dcm before.\n    \n    .. versionadded:: 1.4.0",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "24afc1e4c53bec2a6b03b02db8075c2b0b7c0f4bff10f674a60a186d0f1b39a2",
            "fields": [
                {
                    "id": "oy2vd2lt",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.spatial.transform._rotation.Rotation.as_matrix object",
                    "type": "Object:scipy.spatial.transform._rotation.Rotation",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "84qyv740",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.transform._rotation.Rotation.as_matrix",
                    "defaultValue": "scipy.spatial.transform._rotation.Rotation.as_matrix",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wu2yt83p",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fe3ux23e",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "vptcb04h",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9zqfqib8",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.transform._rotation.Rotation",
                    "defaultValue": "scipy.spatial.transform._rotation.Rotation",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fispyjx5",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "taj40qiw",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "_a9oa4mq",
            "name": "Rotation.as_mrp",
            "description": "Rotation.as_mrp(self)\n    \n    Represent as Modified Rodrigues Parameters (MRPs).\n    \n    MRPs are a 3 dimensional vector co-directional to the axis of rotation and whose\n    magnitude is equal to ``tan(theta / 4)``, where ``theta`` is the angle of rotation\n    (in radians) [1]_.\n    \n    MRPs have a singularity at 360 degrees which can be avoided by ensuring the angle of\n    rotation does not exceed 180 degrees, i.e. switching the direction of the rotation when\n    it is past 180 degrees. This function will always return MRPs corresponding to a rotation\n    of less than or equal to 180 degrees.\n    \n    Returns\n    -------\n    mrps : ndarray, shape (3,) or (N, 3)\n        Shape depends on shape of inputs used for initialization.\n    \n    References\n    ----------\n    .. [1] Shuster, M. D. \"A Survey of Attitude Representations\",\n           The Journal of Astronautical Sciences, Vol. 41, No.4, 1993,\n           pp. 475-476\n    \n    Examples\n    --------\n    >>> from scipy.spatial.transform import Rotation as R\n    >>> import numpy as np\n    \n    Represent a single rotation:\n    \n    >>> r = R.from_rotvec([0, 0, np.pi])\n    >>> r.as_mrp()\n    array([0.        , 0.        , 1.         ])\n    >>> r.as_mrp().shape\n    (3,)\n    \n    Represent a stack with a single rotation:\n    \n    >>> r = R.from_euler('xyz', [[180, 0, 0]], degrees=True)\n    >>> r.as_mrp()\n    array([[1.       , 0.        , 0.         ]])\n    >>> r.as_mrp().shape\n    (1, 3)\n    \n    Represent multiple rotations:\n    \n    >>> r = R.from_rotvec([[np.pi/2, 0, 0], [0, 0, np.pi/2]])\n    >>> r.as_mrp()\n    array([[0.41421356, 0.        , 0.        ],\n           [0.        , 0.        , 0.41421356]])\n    >>> r.as_mrp().shape\n    (2, 3)\n    \n    Notes\n    -----\n    \n    .. versionadded:: 1.6.0",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "cf20c17b29a3cd344b682a71641cd1d4a3a8e780096515daaf9ebb4c14484158",
            "fields": [
                {
                    "id": "ia7fobu2",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.spatial.transform._rotation.Rotation.as_mrp object",
                    "type": "Object:scipy.spatial.transform._rotation.Rotation",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "coozfd85",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.transform._rotation.Rotation.as_mrp",
                    "defaultValue": "scipy.spatial.transform._rotation.Rotation.as_mrp",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f95aoly8",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "03b99mbf",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "6p4h6ym7",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cln2c2vi",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.transform._rotation.Rotation",
                    "defaultValue": "scipy.spatial.transform._rotation.Rotation",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oagz__fw",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a_b_av8n",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "wthsr0kr",
            "name": "Rotation.as_quat",
            "description": "Rotation.as_quat(self, canonical=False, *, scalar_first=False)\n    \n    Represent as quaternions.\n    \n    Rotations in 3 dimensions can be represented using unit norm\n    quaternions [1]_.\n    \n    The 4 components of a quaternion are divided into a scalar part ``w``\n    and a vector part ``(x, y, z)`` and can be expressed from the angle\n    ``theta`` and the axis ``n`` of a rotation as follows::\n    \n        w = cos(theta / 2)\n        x = sin(theta / 2) * n_x\n        y = sin(theta / 2) * n_y\n        z = sin(theta / 2) * n_z\n    \n    There are 2 conventions to order the components in a quaternion:\n    \n    - scalar-first order -- ``(w, x, y, z)``\n    - scalar-last order -- ``(x, y, z, w)``\n    \n    The choice is controlled by `scalar_first` argument.\n    By default, it is False and the scalar-last order is used.\n    \n    The mapping from quaternions to rotations is\n    two-to-one, i.e. quaternions ``q`` and ``-q``, where ``-q`` simply\n    reverses the sign of each component, represent the same spatial\n    rotation.\n    \n    Parameters\n    ----------\n    canonical : `bool`, default False\n        Whether to map the redundant double cover of rotation space to a\n        unique \"canonical\" single cover. If True, then the quaternion is\n        chosen from {q, -q} such that the w term is positive. If the w term\n        is 0, then the quaternion is chosen such that the first nonzero\n        term of the x, y, and z terms is positive.\n    scalar_first : bool, optional\n        Whether the scalar component goes first or last.\n        Default is False, i.e. the scalar-last order is used.\n    \n    Returns\n    -------\n    quat : `numpy.ndarray`, shape (4,) or (N, 4)\n        Shape depends on shape of inputs used for initialization.\n    \n    References\n    ----------\n    .. [1] https://en.wikipedia.org/wiki/Quaternions_and_spatial_rotation\n    \n    Examples\n    --------\n    >>> from scipy.spatial.transform import Rotation as R\n    >>> import numpy as np\n    \n    A rotation can be represented as a quaternion with either scalar-last\n    (default) or scalar-first component order.\n    This is shown for a single rotation:\n    \n    >>> r = R.from_matrix(np.eye(3))\n    >>> r.as_quat()\n    array([0., 0., 0., 1.])\n    >>> r.as_quat(scalar_first=True)\n    array([1., 0., 0., 0.])\n    \n    When multiple rotations are stored in a single Rotation object, the\n    result will be a 2-dimensional array:\n    \n    >>> r = R.from_rotvec([[np.pi, 0, 0], [0, 0, np.pi/2]])\n    >>> r.as_quat().shape\n    (2, 4)\n    \n    Quaternions can be mapped from a redundant double cover of the\n    rotation space to a canonical representation with a positive w term.\n    \n    >>> r = R.from_quat([0, 0, 0, -1])\n    >>> r.as_quat()\n    array([0. , 0. , 0. , -1.])\n    >>> r.as_quat(canonical=True)\n    array([0. , 0. , 0. , 1.])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "270aee3ee3e76f226ad3aae41d1694208f11bd0abde98fb1c956f3c0f9d60b85",
            "fields": [
                {
                    "id": "nzr7t4_j",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.spatial.transform._rotation.Rotation.as_quat object",
                    "type": "Object:scipy.spatial.transform._rotation.Rotation",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l6z437mw",
                    "encoding": "",
                    "name": "canonical",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to map the redundant double cover of rotation space to a\nunique \"canonical\" single cover. If True, then the quaternion is\nchosen from {q, -q} such that the w term is positive. If the w term\nis 0, then the quaternion is chosen such that the first nonzero\nterm of the x, y, and z terms is positive.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2u5oeid3",
                    "encoding": "",
                    "name": "scalar_first",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether the scalar component goes first or last.\nDefault is False, i.e. the scalar-last order is used.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "40i0ja3y",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.transform._rotation.Rotation.as_quat",
                    "defaultValue": "scipy.spatial.transform._rotation.Rotation.as_quat",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q6t3kv3v",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cgjxdwaz",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "10ajrrg9",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7qeys48m",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.transform._rotation.Rotation",
                    "defaultValue": "scipy.spatial.transform._rotation.Rotation",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6164w2t0",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "221x73y6",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "8xs84h84",
            "name": "Rotation.as_rotvec",
            "description": "Rotation.as_rotvec(self, degrees=False)\n    \n    Represent as rotation vectors.\n    \n    A rotation vector is a 3 dimensional vector which is co-directional to\n    the axis of rotation and whose norm gives the angle of rotation [1]_.\n    \n    Parameters\n    ----------\n    degrees : boolean, optional\n        Returned magnitudes are in degrees if this flag is True, else they are\n        in radians. Default is False.\n    \n        .. versionadded:: 1.7.0\n    \n    Returns\n    -------\n    rotvec : ndarray, shape (3,) or (N, 3)\n        Shape depends on shape of inputs used for initialization.\n    \n    References\n    ----------\n    .. [1] https://en.wikipedia.org/wiki/Axis%E2%80%93angle_representation#Rotation_vector\n    \n    Examples\n    --------\n    >>> from scipy.spatial.transform import Rotation as R\n    >>> import numpy as np\n    \n    Represent a single rotation:\n    \n    >>> r = R.from_euler('z', 90, degrees=True)\n    >>> r.as_rotvec()\n    array([0.        , 0.        , 1.57079633])\n    >>> r.as_rotvec().shape\n    (3,)\n    \n    Represent a rotation in degrees:\n    \n    >>> r = R.from_euler('YX', (-90, -90), degrees=True)\n    >>> s = r.as_rotvec(degrees=True)\n    >>> s\n    array([-69.2820323, -69.2820323, -69.2820323])\n    >>> np.linalg.norm(s)\n    120.00000000000001\n    \n    Represent a stack with a single rotation:\n    \n    >>> r = R.from_quat([[0, 0, 1, 1]])\n    >>> r.as_rotvec()\n    array([[0.        , 0.        , 1.57079633]])\n    >>> r.as_rotvec().shape\n    (1, 3)\n    \n    Represent multiple rotations in a single object:\n    \n    >>> r = R.from_quat([[0, 0, 1, 1], [1, 1, 0, 1]])\n    >>> r.as_rotvec()\n    array([[0.        , 0.        , 1.57079633],\n           [1.35102172, 1.35102172, 0.        ]])\n    >>> r.as_rotvec().shape\n    (2, 3)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "3b93dfa27bedb41da3eac2145389c3baf8fc80266f7ee912674b719ee71003ad",
            "fields": [
                {
                    "id": "bye4uomx",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.spatial.transform._rotation.Rotation.as_rotvec object",
                    "type": "Object:scipy.spatial.transform._rotation.Rotation",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "27k6r_zf",
                    "encoding": "",
                    "name": "degrees",
                    "value": false,
                    "defaultValue": false,
                    "description": "Returned magnitudes are in degrees if this flag is True, else they are\nin radians. Default is False.\n\n.. versionadded:: 1.7.0",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s4ybf1cq",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.transform._rotation.Rotation.as_rotvec",
                    "defaultValue": "scipy.spatial.transform._rotation.Rotation.as_rotvec",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5ienlcbl",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i7631i26",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ugo1aacn",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qpvw20hu",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.transform._rotation.Rotation",
                    "defaultValue": "scipy.spatial.transform._rotation.Rotation",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wjrtfshx",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w1hj5r0y",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "yczgsbyn",
            "name": "Rotation.concatenate",
            "description": "Rotation.concatenate(cls, rotations)\n    \n    Concatenate a sequence of `Rotation` objects into a single object.\n    \n    This is useful if you want to, for example, take the mean of a set of\n    rotations and need to pack them into a single object to do so.\n    \n    Parameters\n    ----------\n    rotations : sequence of `Rotation` objects\n        The rotations to concatenate. If a single `Rotation` object is\n        passed in, a copy is returned.\n    \n    Returns\n    -------\n    concatenated : `Rotation` instance\n        The concatenated rotations.\n    \n    Examples\n    --------\n    >>> from scipy.spatial.transform import Rotation as R\n    >>> r1 = R.from_rotvec([0, 0, 1])\n    >>> r2 = R.from_rotvec([0, 0, 2])\n    >>> rc = R.concatenate([r1, r2])\n    >>> rc.as_rotvec()\n    array([[0., 0., 1.],\n           [0., 0., 2.]])\n    >>> rc.mean().as_rotvec()\n    array([0., 0., 1.5])\n    \n    Concatenation of a split rotation recovers the original object.\n    \n    >>> rs = [r for r in rc]\n    >>> R.concatenate(rs).as_rotvec()\n    array([[0., 0., 1.],\n           [0., 0., 2.]])\n    \n    Note that it may be simpler to create the desired rotations by passing\n    in a single list of the data during initialization, rather then by\n    concatenating:\n    \n    >>> R.from_rotvec([[0, 0, 1], [0, 0, 2]]).as_rotvec()\n    array([[0., 0., 1.],\n           [0., 0., 2.]])\n    \n    Notes\n    -----\n    .. versionadded:: 1.8.0",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1d5060a4bea725eea081c32d5dd174bcec2f052196dbff6dd485b705da793d64",
            "fields": [
                {
                    "id": "6yp9_yt2",
                    "encoding": "",
                    "name": "rotations",
                    "value": "",
                    "defaultValue": "",
                    "description": "The rotations to concatenate. If a single `Rotation` object is\npassed in, a copy is returned.",
                    "type": "sequence of Rotation objects",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ku5bqp79",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.transform._rotation.Rotation.concatenate",
                    "defaultValue": "scipy.spatial.transform._rotation.Rotation.concatenate",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t5v179y3",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "es9eavzv",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "bkonm29h",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7gq4_79h",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.transform._rotation.Rotation",
                    "defaultValue": "scipy.spatial.transform._rotation.Rotation",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0cmu0twy",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pfddc2ee",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "erc6djjh",
            "name": "Rotation.create_group",
            "description": "Rotation.create_group(cls, group, axis='Z')\n    \n    Create a 3D rotation group.\n    \n    Parameters\n    ----------\n    group : string\n        The name of the group. Must be one of 'I', 'O', 'T', 'Dn', 'Cn',\n        where `n` is a positive integer. The groups are:\n    \n            * I: Icosahedral group\n            * O: Octahedral group\n            * T: Tetrahedral group\n            * D: Dicyclic group\n            * C: Cyclic group\n    \n    axis : integer\n        The cyclic rotation axis. Must be one of ['X', 'Y', 'Z'] (or\n        lowercase). Default is 'Z'. Ignored for groups 'I', 'O', and 'T'.\n    \n    Returns\n    -------\n    rotation : `Rotation` instance\n        Object containing the elements of the rotation group.\n    \n    Notes\n    -----\n    This method generates rotation groups only. The full 3-dimensional\n    point groups [PointGroups]_ also contain reflections.\n    \n    References\n    ----------\n    .. [PointGroups] `Point groups\n       <https://en.wikipedia.org/wiki/Point_groups_in_three_dimensions>`_\n       on Wikipedia.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d9480593c4cd999cbd60b531a51b726fead5bbcb93e48b9dd49f141fac6777f0",
            "fields": [
                {
                    "id": "frguebu6",
                    "encoding": "",
                    "name": "group",
                    "value": "",
                    "defaultValue": "",
                    "description": "The name of the group. Must be one of 'I', 'O', 'T', 'Dn', 'Cn',\nwhere `n` is a positive integer. The groups are:\n\n    * I: Icosahedral group\n    * O: Octahedral group\n    * T: Tetrahedral group\n    * D: Dicyclic group\n    * C: Cyclic group",
                    "type": "string",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w18dqwx6",
                    "encoding": "",
                    "name": "axis",
                    "value": "Z",
                    "defaultValue": "Z",
                    "description": "The cyclic rotation axis. Must be one of ['X', 'Y', 'Z'] (or\nlowercase). Default is 'Z'. Ignored for groups 'I', 'O', and 'T'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "luz3tl9v",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.transform._rotation.Rotation.create_group",
                    "defaultValue": "scipy.spatial.transform._rotation.Rotation.create_group",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o6axj4vq",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ux57e16d",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "e70xyz9g",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wlqhi_p1",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.transform._rotation.Rotation",
                    "defaultValue": "scipy.spatial.transform._rotation.Rotation",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uj7h6w_p",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6m736xyh",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "evxt2u2h",
            "name": "Rotation.from_davenport",
            "description": "Rotation.from_davenport(cls, axes, order, angles, degrees=False)\n    \n    Initialize from Davenport angles.\n    \n    Rotations in 3-D can be represented by a sequence of 3\n    rotations around a sequence of axes.\n    \n    The three rotations can either be in a global frame of reference\n    (extrinsic) or in a body centred frame of reference (intrinsic), which\n    is attached to, and moves with, the object under rotation [1]_.\n    \n    For both Euler angles and Davenport angles, consecutive axes must\n    be are orthogonal (``axis2`` is orthogonal to both ``axis1`` and\n    ``axis3``). For Euler angles, there is an additional relationship\n    between ``axis1`` or ``axis3``, with two possibilities:\n    \n        - ``axis1`` and ``axis3`` are also orthogonal (asymmetric sequence)\n        - ``axis1 == axis3`` (symmetric sequence)\n    \n    For Davenport angles, this last relationship is relaxed [2]_, and only\n    the consecutive orthogonal axes requirement is maintained.\n    \n    Parameters\n    ----------\n    axes : array_like, shape (3,) or ([1 or 2 or 3], 3)\n        Axis of rotation, if one dimensional. If two dimensional, describes the\n        sequence of axes for rotations, where each axes[i, :] is the ith\n        axis. If more than one axis is given, then the second axis must be\n        orthogonal to both the first and third axes.\n    order : string\n        If it is equal to 'e' or 'extrinsic', the sequence will be\n        extrinsic. If it is equal to 'i' or 'intrinsic', sequence\n        will be treated as intrinsic.\n    angles : float or array_like, shape (N,) or (N, [1 or 2 or 3])\n        Euler angles specified in radians (`degrees` is False) or degrees\n        (`degrees` is True).\n        For a single axis, `angles` can be:\n    \n        - a single value\n        - array_like with shape (N,), where each `angle[i]`\n          corresponds to a single rotation\n        - array_like with shape (N, 1), where each `angle[i, 0]`\n          corresponds to a single rotation\n    \n        For 2 and 3 axes, `angles` can be:\n    \n        - array_like with shape (W,) where `W` is the number of rows of\n          `axes`, which corresponds to a single rotation with `W` axes\n        - array_like with shape (N, W) where each `angle[i]`\n          corresponds to a sequence of Davenport angles describing a\n          single rotation\n    \n    degrees : bool, optional\n        If True, then the given angles are assumed to be in degrees.\n        Default is False.\n    \n    Returns\n    -------\n    rotation : `Rotation` instance\n        Object containing the rotation represented by the sequence of\n        rotations around given axes with given angles.\n    \n    References\n    ----------\n    .. [1] https://en.wikipedia.org/wiki/Euler_angles#Definition_by_intrinsic_rotations\n    .. [2] Shuster, Malcolm & Markley, Landis. (2003). Generalization of\n           the Euler Angles. Journal of the Astronautical Sciences. 51. 123-132. 10.1007/BF03546304.\n    \n    Examples\n    --------\n    >>> from scipy.spatial.transform import Rotation as R\n    \n    Davenport angles are a generalization of Euler angles, when we use the\n    canonical basis axes:\n    \n    >>> ex = [1, 0, 0]\n    >>> ey = [0, 1, 0]\n    >>> ez = [0, 0, 1]\n    \n    Initialize a single rotation with a given axis sequence:\n    \n    >>> axes = [ez, ey, ex]\n    >>> r = R.from_davenport(axes, 'extrinsic', [90, 0, 0], degrees=True)\n    >>> r.as_quat().shape\n    (4,)\n    \n    It is equivalent to Euler angles in this case:\n    \n    >>> r.as_euler('zyx', degrees=True)\n    array([90.,  0., -0.])\n    \n    Initialize multiple rotations in one object:\n    \n    >>> r = R.from_davenport(axes, 'extrinsic', [[90, 45, 30], [35, 45, 90]], degrees=True)\n    >>> r.as_quat().shape\n    (2, 4)\n    \n    Using only one or two axes is also possible:\n    \n    >>> r = R.from_davenport([ez, ex], 'extrinsic', [[90, 45], [35, 45]], degrees=True)\n    >>> r.as_quat().shape\n    (2, 4)\n    \n    Non-canonical axes are possible, and they do not need to be normalized,\n    as long as consecutive axes are orthogonal:\n    \n    >>> e1 = [2, 0, 0]\n    >>> e2 = [0, 1, 0]\n    >>> e3 = [1, 0, 1]\n    >>> axes = [e1, e2, e3]\n    >>> r = R.from_davenport(axes, 'extrinsic', [90, 45, 30], degrees=True)\n    >>> r.as_quat()\n    [ 0.701057,  0.430459, -0.092296,  0.560986]",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "64606fafc6a734c64db09bead67cf2d6b9113650a5522fb4f01be03bebc81a1d",
            "fields": [
                {
                    "id": "q7i_0zo7",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "Axis of rotation, if one dimensional. If two dimensional, describes the\nsequence of axes for rotations, where each axes[i, :] is the ith\naxis. If more than one axis is given, then the second axis must be\northogonal to both the first and third axes.",
                    "type": "arraylike, shape (3,) or ([1 or 2 or 3], 3)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hp6d0b12",
                    "encoding": "",
                    "name": "order",
                    "value": "",
                    "defaultValue": "",
                    "description": "If it is equal to 'e' or 'extrinsic', the sequence will be\nextrinsic. If it is equal to 'i' or 'intrinsic', sequence\nwill be treated as intrinsic.",
                    "type": "string",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rojsddwk",
                    "encoding": "",
                    "name": "angles",
                    "value": "",
                    "defaultValue": "",
                    "description": "Euler angles specified in radians (`degrees` is False) or degrees\n(`degrees` is True).\nFor a single axis, `angles` can be:\n\n- a single value\n- array_like with shape (N,), where each `angle[i]`\n  corresponds to a single rotation\n- array_like with shape (N, 1), where each `angle[i, 0]`\n  corresponds to a single rotation\n\nFor 2 and 3 axes, `angles` can be:\n\n- array_like with shape (W,) where `W` is the number of rows of\n  `axes`, which corresponds to a single rotation with `W` axes\n- array_like with shape (N, W) where each `angle[i]`\n  corresponds to a sequence of Davenport angles describing a\n  single rotation",
                    "type": "float or arraylike, shape (N,) or (N, [1 or 2 or 3])",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2bymp23p",
                    "encoding": "",
                    "name": "degrees",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, then the given angles are assumed to be in degrees.\nDefault is False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "958e5dy6",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.transform._rotation.Rotation.from_davenport",
                    "defaultValue": "scipy.spatial.transform._rotation.Rotation.from_davenport",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7sp6j7fj",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fi99w4by",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "3rzr_mqc",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fl8ba2hg",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.transform._rotation.Rotation",
                    "defaultValue": "scipy.spatial.transform._rotation.Rotation",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "07l6gps8",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hvyay99m",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "_01q58ef",
            "name": "Rotation.from_euler",
            "description": "Rotation.from_euler(cls, seq, angles, degrees=False)\n    \n    Initialize from Euler angles.\n    \n    Rotations in 3-D can be represented by a sequence of 3\n    rotations around a sequence of axes. In theory, any three axes spanning\n    the 3-D Euclidean space are enough. In practice, the axes of rotation are\n    chosen to be the basis vectors.\n    \n    The three rotations can either be in a global frame of reference\n    (extrinsic) or in a body centred frame of reference (intrinsic), which\n    is attached to, and moves with, the object under rotation [1]_.\n    \n    Parameters\n    ----------\n    seq : string\n        Specifies sequence of axes for rotations. Up to 3 characters\n        belonging to the set {'X', 'Y', 'Z'} for intrinsic rotations, or\n        {'x', 'y', 'z'} for extrinsic rotations. Extrinsic and intrinsic\n        rotations cannot be mixed in one function call.\n    angles : float or array_like, shape (N,) or (N, [1 or 2 or 3])\n        Euler angles specified in radians (`degrees` is False) or degrees\n        (`degrees` is True).\n        For a single character `seq`, `angles` can be:\n    \n        - a single value\n        - array_like with shape (N,), where each `angle[i]`\n          corresponds to a single rotation\n        - array_like with shape (N, 1), where each `angle[i, 0]`\n          corresponds to a single rotation\n    \n        For 2- and 3-character wide `seq`, `angles` can be:\n    \n        - array_like with shape (W,) where `W` is the width of\n          `seq`, which corresponds to a single rotation with `W` axes\n        - array_like with shape (N, W) where each `angle[i]`\n          corresponds to a sequence of Euler angles describing a single\n          rotation\n    \n    degrees : bool, optional\n        If True, then the given angles are assumed to be in degrees.\n        Default is False.\n    \n    Returns\n    -------\n    rotation : `Rotation` instance\n        Object containing the rotation represented by the sequence of\n        rotations around given axes with given angles.\n    \n    References\n    ----------\n    .. [1] https://en.wikipedia.org/wiki/Euler_angles#Definition_by_intrinsic_rotations\n    \n    Examples\n    --------\n    >>> from scipy.spatial.transform import Rotation as R\n    \n    Initialize a single rotation along a single axis:\n    \n    >>> r = R.from_euler('x', 90, degrees=True)\n    >>> r.as_quat().shape\n    (4,)\n    \n    Initialize a single rotation with a given axis sequence:\n    \n    >>> r = R.from_euler('zyx', [90, 45, 30], degrees=True)\n    >>> r.as_quat().shape\n    (4,)\n    \n    Initialize a stack with a single rotation around a single axis:\n    \n    >>> r = R.from_euler('x', [90], degrees=True)\n    >>> r.as_quat().shape\n    (1, 4)\n    \n    Initialize a stack with a single rotation with an axis sequence:\n    \n    >>> r = R.from_euler('zyx', [[90, 45, 30]], degrees=True)\n    >>> r.as_quat().shape\n    (1, 4)\n    \n    Initialize multiple elementary rotations in one object:\n    \n    >>> r = R.from_euler('x', [90, 45, 30], degrees=True)\n    >>> r.as_quat().shape\n    (3, 4)\n    \n    Initialize multiple rotations in one object:\n    \n    >>> r = R.from_euler('zyx', [[90, 45, 30], [35, 45, 90]], degrees=True)\n    >>> r.as_quat().shape\n    (2, 4)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5380160d893da124d1e74f6ca930dfaa00cfeaaaff8bf1abf03bfc1df5b4a133",
            "fields": [
                {
                    "id": "9p2czjjn",
                    "encoding": "",
                    "name": "seq",
                    "value": "",
                    "defaultValue": "",
                    "description": "Specifies sequence of axes for rotations. Up to 3 characters\nbelonging to the set {'X', 'Y', 'Z'} for intrinsic rotations, or\n{'x', 'y', 'z'} for extrinsic rotations. Extrinsic and intrinsic\nrotations cannot be mixed in one function call.",
                    "type": "string",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ci6r9kea",
                    "encoding": "",
                    "name": "angles",
                    "value": "",
                    "defaultValue": "",
                    "description": "Euler angles specified in radians (`degrees` is False) or degrees\n(`degrees` is True).\nFor a single character `seq`, `angles` can be:\n\n- a single value\n- array_like with shape (N,), where each `angle[i]`\n  corresponds to a single rotation\n- array_like with shape (N, 1), where each `angle[i, 0]`\n  corresponds to a single rotation\n\nFor 2- and 3-character wide `seq`, `angles` can be:\n\n- array_like with shape (W,) where `W` is the width of\n  `seq`, which corresponds to a single rotation with `W` axes\n- array_like with shape (N, W) where each `angle[i]`\n  corresponds to a sequence of Euler angles describing a single\n  rotation",
                    "type": "float or arraylike, shape (N,) or (N, [1 or 2 or 3])",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5_h97y0o",
                    "encoding": "",
                    "name": "degrees",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, then the given angles are assumed to be in degrees.\nDefault is False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cnnzlyas",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.transform._rotation.Rotation.from_euler",
                    "defaultValue": "scipy.spatial.transform._rotation.Rotation.from_euler",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6vmoco_s",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e4b0z0x2",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "i3kdwut3",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rzg1vlp1",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.transform._rotation.Rotation",
                    "defaultValue": "scipy.spatial.transform._rotation.Rotation",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c4yan54h",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qph23_mw",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "5jrq0yve",
            "name": "Rotation.from_matrix",
            "description": "Rotation.from_matrix(cls, matrix)\n    \n    Initialize from rotation matrix.\n    \n    Rotations in 3 dimensions can be represented with 3 x 3 orthogonal\n    matrices [1]_. If the input is not orthogonal, an approximation is\n    created by orthogonalizing the input matrix using the method described\n    in [2]_, and then converting the orthogonal rotation matrices to\n    quaternions using the algorithm described in [3]_. Matrices must be\n    right-handed.\n    \n    Parameters\n    ----------\n    matrix : array_like, shape (N, 3, 3) or (3, 3)\n        A single matrix or a stack of matrices, where ``matrix[i]`` is\n        the i-th matrix.\n    \n    Returns\n    -------\n    rotation : `Rotation` instance\n        Object containing the rotations represented by the rotation\n        matrices.\n    \n    References\n    ----------\n    .. [1] https://en.wikipedia.org/wiki/Rotation_matrix#In_three_dimensions\n    .. [2] https://en.wikipedia.org/wiki/Orthogonal_Procrustes_problem\n    .. [3] F. Landis Markley, \"Unit Quaternion from Rotation Matrix\",\n           Journal of guidance, control, and dynamics vol. 31.2, pp.\n           440-442, 2008.\n    \n    Examples\n    --------\n    >>> from scipy.spatial.transform import Rotation as R\n    >>> import numpy as np\n    \n    Initialize a single rotation:\n    \n    >>> r = R.from_matrix([\n    ... [0, -1, 0],\n    ... [1, 0, 0],\n    ... [0, 0, 1]])\n    >>> r.single\n    True\n    >>> r.as_matrix().shape\n    (3, 3)\n    \n    Initialize multiple rotations in a single object:\n    \n    >>> r = R.from_matrix([\n    ... [\n    ...     [0, -1, 0],\n    ...     [1, 0, 0],\n    ...     [0, 0, 1],\n    ... ],\n    ... [\n    ...     [1, 0, 0],\n    ...     [0, 0, -1],\n    ...     [0, 1, 0],\n    ... ]])\n    >>> r.as_matrix().shape\n    (2, 3, 3)\n    >>> r.single\n    False\n    >>> len(r)\n    2\n    \n    If input matrices are not special orthogonal (orthogonal with\n    determinant equal to +1), then a special orthogonal estimate is stored:\n    \n    >>> a = np.array([\n    ... [0, -0.5, 0],\n    ... [0.5, 0, 0],\n    ... [0, 0, 0.5]])\n    >>> np.linalg.det(a)\n    0.125\n    >>> r = R.from_matrix(a)\n    >>> matrix = r.as_matrix()\n    >>> matrix\n    array([[ 0., -1.,  0.],\n           [ 1.,  0.,  0.],\n           [ 0.,  0.,  1.]])\n    >>> np.linalg.det(matrix)\n    1.0\n    \n    It is also possible to have a stack containing a single rotation:\n    \n    >>> r = R.from_matrix([[\n    ... [0, -1, 0],\n    ... [1, 0, 0],\n    ... [0, 0, 1]]])\n    >>> r.as_matrix()\n    array([[[ 0., -1.,  0.],\n            [ 1.,  0.,  0.],\n            [ 0.,  0.,  1.]]])\n    >>> r.as_matrix().shape\n    (1, 3, 3)\n    \n    Notes\n    -----\n    This function was called from_dcm before.\n    \n    .. versionadded:: 1.4.0",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e54f8b6f868496d37b0de6cd199f8d9b7cfd80044330a230a6671750ee7eb7db",
            "fields": [
                {
                    "id": "5jea7vbk",
                    "encoding": "",
                    "name": "matrix",
                    "value": "",
                    "defaultValue": "",
                    "description": "A single matrix or a stack of matrices, where ``matrix[i]`` is\nthe i-th matrix.",
                    "type": "arraylike, shape (N, 3, 3) or (3, 3)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mtg1gj_1",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.transform._rotation.Rotation.from_matrix",
                    "defaultValue": "scipy.spatial.transform._rotation.Rotation.from_matrix",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "09gexarn",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q9qjnwgc",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "keajj5jr",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sfc0u_1v",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.transform._rotation.Rotation",
                    "defaultValue": "scipy.spatial.transform._rotation.Rotation",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_jo0p4bf",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7yva0j9a",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "2qxedduq",
            "name": "Rotation.from_mrp",
            "description": "Rotation.from_mrp(cls, mrp)\n    \n    Initialize from Modified Rodrigues Parameters (MRPs).\n    \n    MRPs are a 3 dimensional vector co-directional to the axis of rotation and whose\n    magnitude is equal to ``tan(theta / 4)``, where ``theta`` is the angle of rotation\n    (in radians) [1]_.\n    \n    MRPs have a singularity at 360 degrees which can be avoided by ensuring the angle of\n    rotation does not exceed 180 degrees, i.e. switching the direction of the rotation when\n    it is past 180 degrees.\n    \n    Parameters\n    ----------\n    mrp : array_like, shape (N, 3) or (3,)\n        A single vector or a stack of vectors, where `mrp[i]` gives\n        the ith set of MRPs.\n    \n    Returns\n    -------\n    rotation : `Rotation` instance\n        Object containing the rotations represented by input MRPs.\n    \n    References\n    ----------\n    .. [1] Shuster, M. D. \"A Survey of Attitude Representations\",\n           The Journal of Astronautical Sciences, Vol. 41, No.4, 1993,\n           pp. 475-476\n    \n    Notes\n    -----\n    \n    .. versionadded:: 1.6.0\n    \n    Examples\n    --------\n    >>> from scipy.spatial.transform import Rotation as R\n    >>> import numpy as np\n    \n    Initialize a single rotation:\n    \n    >>> r = R.from_mrp([0, 0, 1])\n    >>> r.as_euler('xyz', degrees=True)\n    array([0.        , 0.        , 180.      ])\n    >>> r.as_euler('xyz').shape\n    (3,)\n    \n    Initialize multiple rotations in one object:\n    \n    >>> r = R.from_mrp([\n    ... [0, 0, 1],\n    ... [1, 0, 0]])\n    >>> r.as_euler('xyz', degrees=True)\n    array([[0.        , 0.        , 180.      ],\n           [180.0     , 0.        , 0.        ]])\n    >>> r.as_euler('xyz').shape\n    (2, 3)\n    \n    It is also possible to have a stack of a single rotation:\n    \n    >>> r = R.from_mrp([[0, 0, np.pi/2]])\n    >>> r.as_euler('xyz').shape\n    (1, 3)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "cab95540d33d52c59eb337410970531a4ddf85d3ad1843812c29f55d5ecd2a5a",
            "fields": [
                {
                    "id": "7lbysyig",
                    "encoding": "",
                    "name": "mrp",
                    "value": "",
                    "defaultValue": "",
                    "description": "A single vector or a stack of vectors, where `mrp[i]` gives\nthe ith set of MRPs.",
                    "type": "arraylike, shape (N, 3) or (3,)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "whan0lbg",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.transform._rotation.Rotation.from_mrp",
                    "defaultValue": "scipy.spatial.transform._rotation.Rotation.from_mrp",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d727xy13",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d83x5xy_",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "mkmeioel",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mqmgos8v",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.transform._rotation.Rotation",
                    "defaultValue": "scipy.spatial.transform._rotation.Rotation",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qoeuh6_g",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lmczh6u_",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "e19_anv5",
            "name": "Rotation.from_quat",
            "description": "Rotation.from_quat(cls, quat, *, scalar_first=False)\n    \n    Initialize from quaternions.\n    \n    Rotations in 3 dimensions can be represented using unit norm\n    quaternions [1]_.\n    \n    The 4 components of a quaternion are divided into a scalar part ``w``\n    and a vector part ``(x, y, z)`` and can be expressed from the angle\n    ``theta`` and the axis ``n`` of a rotation as follows::\n    \n        w = cos(theta / 2)\n        x = sin(theta / 2) * n_x\n        y = sin(theta / 2) * n_y\n        z = sin(theta / 2) * n_z\n    \n    There are 2 conventions to order the components in a quaternion:\n    \n    - scalar-first order -- ``(w, x, y, z)``\n    - scalar-last order -- ``(x, y, z, w)``\n    \n    The choice is controlled by `scalar_first` argument.\n    By default, it is False and the scalar-last order is assumed.\n    \n    Advanced users may be interested in the \"double cover\" of 3D space by\n    the quaternion representation [2]_. As of version 1.11.0, the\n    following subset (and only this subset) of operations on a `Rotation`\n    ``r`` corresponding to a quaternion ``q`` are guaranteed to preserve\n    the double cover property: ``r = Rotation.from_quat(q)``,\n    ``r.as_quat(canonical=False)``, ``r.inv()``, and composition using the\n    ``*`` operator such as ``r*r``.\n    \n    Parameters\n    ----------\n    quat : array_like, shape (N, 4) or (4,)\n        Each row is a (possibly non-unit norm) quaternion representing an\n        active rotation. Each quaternion will be normalized to unit norm.\n    scalar_first : bool, optional\n        Whether the scalar component goes first or last.\n        Default is False, i.e. the scalar-last order is assumed.\n    \n    Returns\n    -------\n    rotation : `Rotation` instance\n        Object containing the rotations represented by input quaternions.\n    \n    References\n    ----------\n    .. [1] https://en.wikipedia.org/wiki/Quaternions_and_spatial_rotation\n    .. [2] Hanson, Andrew J. \"Visualizing quaternions.\"\n        Morgan Kaufmann Publishers Inc., San Francisco, CA. 2006.\n    \n    Examples\n    --------\n    >>> from scipy.spatial.transform import Rotation as R\n    \n    A rotation can be initialzied from a quaternion with the scalar-last\n    (default) or scalar-first component order as shown below:\n    \n    >>> r = R.from_quat([0, 0, 0, 1])\n    >>> r.as_matrix()\n    array([[1., 0., 0.],\n           [0., 1., 0.],\n           [0., 0., 1.]])\n    >>> r = R.from_quat([1, 0, 0, 0], scalar_first=True)\n    >>> r.as_matrix()\n    array([[1., 0., 0.],\n           [0., 1., 0.],\n           [0., 0., 1.]])\n    \n    It is possible to initialize multiple rotations in a single object by\n    passing a 2-dimensional array:\n    \n    >>> r = R.from_quat([\n    ... [1, 0, 0, 0],\n    ... [0, 0, 0, 1]\n    ... ])\n    >>> r.as_quat()\n    array([[1., 0., 0., 0.],\n           [0., 0., 0., 1.]])\n    >>> r.as_quat().shape\n    (2, 4)\n    \n    It is also possible to have a stack of a single rotation:\n    \n    >>> r = R.from_quat([[0, 0, 0, 1]])\n    >>> r.as_quat()\n    array([[0., 0., 0., 1.]])\n    >>> r.as_quat().shape\n    (1, 4)\n    \n    Quaternions are normalized before initialization.\n    \n    >>> r = R.from_quat([0, 0, 1, 1])\n    >>> r.as_quat()\n    array([0.        , 0.        , 0.70710678, 0.70710678])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "116e4eee5686a861cad1d28b56afa1c3cd9a61ea77fa6506448d3b24acf32097",
            "fields": [
                {
                    "id": "m9gsedcy",
                    "encoding": "",
                    "name": "quat",
                    "value": "",
                    "defaultValue": "",
                    "description": "Each row is a (possibly non-unit norm) quaternion representing an\nactive rotation. Each quaternion will be normalized to unit norm.",
                    "type": "arraylike, shape (N, 4) or (4,)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oev6jwgk",
                    "encoding": "",
                    "name": "scalar_first",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether the scalar component goes first or last.\nDefault is False, i.e. the scalar-last order is assumed.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o0_9gc7z",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.transform._rotation.Rotation.from_quat",
                    "defaultValue": "scipy.spatial.transform._rotation.Rotation.from_quat",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x3qcqy7t",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qqaq3ipf",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "6bz32zmy",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sqhji3fa",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.transform._rotation.Rotation",
                    "defaultValue": "scipy.spatial.transform._rotation.Rotation",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7ejc7k6p",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yrbrshli",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "vsvao9xs",
            "name": "Rotation.from_rotvec",
            "description": "Rotation.from_rotvec(cls, rotvec, degrees=False)\n    \n    Initialize from rotation vectors.\n    \n    A rotation vector is a 3 dimensional vector which is co-directional to\n    the axis of rotation and whose norm gives the angle of rotation [1]_.\n    \n    Parameters\n    ----------\n    rotvec : array_like, shape (N, 3) or (3,)\n        A single vector or a stack of vectors, where `rot_vec[i]` gives\n        the ith rotation vector.\n    degrees : bool, optional\n        If True, then the given magnitudes are assumed to be in degrees.\n        Default is False.\n    \n        .. versionadded:: 1.7.0\n    \n    Returns\n    -------\n    rotation : `Rotation` instance\n        Object containing the rotations represented by input rotation\n        vectors.\n    \n    References\n    ----------\n    .. [1] https://en.wikipedia.org/wiki/Axis%E2%80%93angle_representation#Rotation_vector\n    \n    Examples\n    --------\n    >>> from scipy.spatial.transform import Rotation as R\n    >>> import numpy as np\n    \n    Initialize a single rotation:\n    \n    >>> r = R.from_rotvec(np.pi/2 * np.array([0, 0, 1]))\n    >>> r.as_rotvec()\n    array([0.        , 0.        , 1.57079633])\n    >>> r.as_rotvec().shape\n    (3,)\n    \n    Initialize a rotation in degrees, and view it in degrees:\n    \n    >>> r = R.from_rotvec(45 * np.array([0, 1, 0]), degrees=True)\n    >>> r.as_rotvec(degrees=True)\n    array([ 0., 45.,  0.])\n    \n    Initialize multiple rotations in one object:\n    \n    >>> r = R.from_rotvec([\n    ... [0, 0, np.pi/2],\n    ... [np.pi/2, 0, 0]])\n    >>> r.as_rotvec()\n    array([[0.        , 0.        , 1.57079633],\n           [1.57079633, 0.        , 0.        ]])\n    >>> r.as_rotvec().shape\n    (2, 3)\n    \n    It is also possible to have a stack of a single rotation:\n    \n    >>> r = R.from_rotvec([[0, 0, np.pi/2]])\n    >>> r.as_rotvec().shape\n    (1, 3)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "aa1c67dc4113581490beec267c5b069db88ddd7dead957228c10eb330fd50654",
            "fields": [
                {
                    "id": "hohw_qaf",
                    "encoding": "",
                    "name": "rotvec",
                    "value": "",
                    "defaultValue": "",
                    "description": "A single vector or a stack of vectors, where `rot_vec[i]` gives\nthe ith rotation vector.",
                    "type": "arraylike, shape (N, 3) or (3,)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7ekdcg4z",
                    "encoding": "",
                    "name": "degrees",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, then the given magnitudes are assumed to be in degrees.\nDefault is False.\n\n.. versionadded:: 1.7.0",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9uko2zav",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.transform._rotation.Rotation.from_rotvec",
                    "defaultValue": "scipy.spatial.transform._rotation.Rotation.from_rotvec",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "njwc7joa",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w__d_t0n",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "6424fvg5",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ykpivtb2",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.transform._rotation.Rotation",
                    "defaultValue": "scipy.spatial.transform._rotation.Rotation",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "blsb4w6d",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1ek4fjrn",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "tkc_d_67",
            "name": "Rotation.identity",
            "description": "Rotation.identity(cls, num=None)\n    \n    Get identity rotation(s).\n    \n    Composition with the identity rotation has no effect.\n    \n    Parameters\n    ----------\n    num : int or None, optional\n        Number of identity rotations to generate. If None (default), then a\n        single rotation is generated.\n    \n    Returns\n    -------\n    identity : Rotation object\n        The identity rotation.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "742b99ec696584473f496e834b7ce941e547ccc050c2b85234d63c6651b0d68a",
            "fields": [
                {
                    "id": "dbfxp6os",
                    "encoding": "",
                    "name": "num",
                    "value": "",
                    "defaultValue": "",
                    "description": "Number of identity rotations to generate. If None (default), then a\nsingle rotation is generated.",
                    "type": "int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fe4i5ick",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.transform._rotation.Rotation.identity",
                    "defaultValue": "scipy.spatial.transform._rotation.Rotation.identity",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rhn15h5n",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1f9vac2a",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "5nio2e45",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4phjr__0",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.transform._rotation.Rotation",
                    "defaultValue": "scipy.spatial.transform._rotation.Rotation",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s1y1vy3k",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "datw2cfg",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "9_emf66k",
            "name": "Rotation.inv",
            "description": "Rotation.inv(self)\n    \n    Invert this rotation.\n    \n    Composition of a rotation with its inverse results in an identity\n    transformation.\n    \n    Returns\n    -------\n    inverse : `Rotation` instance\n        Object containing inverse of the rotations in the current instance.\n    \n    Examples\n    --------\n    >>> from scipy.spatial.transform import Rotation as R\n    >>> import numpy as np\n    \n    Inverting a single rotation:\n    \n    >>> p = R.from_euler('z', 45, degrees=True)\n    >>> q = p.inv()\n    >>> q.as_euler('zyx', degrees=True)\n    array([-45.,   0.,   0.])\n    \n    Inverting multiple rotations:\n    \n    >>> p = R.from_rotvec([[0, 0, np.pi/3], [-np.pi/4, 0, 0]])\n    >>> q = p.inv()\n    >>> q.as_rotvec()\n    array([[-0.        , -0.        , -1.04719755],\n           [ 0.78539816, -0.        , -0.        ]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f85b6044f7b4b197261301466da68f36f76a1b818ad2ee79a2bf7d161b13d25e",
            "fields": [
                {
                    "id": "ynvmsca3",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.spatial.transform._rotation.Rotation.inv object",
                    "type": "Object:scipy.spatial.transform._rotation.Rotation",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "39xcll58",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.transform._rotation.Rotation.inv",
                    "defaultValue": "scipy.spatial.transform._rotation.Rotation.inv",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f_tol8g2",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "170vm4vs",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "qvw9zccr",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i4t4jp3k",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.transform._rotation.Rotation",
                    "defaultValue": "scipy.spatial.transform._rotation.Rotation",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "65yo_u1j",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9c9spn7a",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "5sobyg54",
            "name": "Rotation.magnitude",
            "description": "Rotation.magnitude(self)\n    \n    Get the magnitude(s) of the rotation(s).\n    \n    Returns\n    -------\n    magnitude : ndarray or float\n        Angle(s) in radians, float if object contains a single rotation\n        and ndarray if object contains multiple rotations. The magnitude\n        will always be in the range [0, pi].\n    \n    Examples\n    --------\n    >>> from scipy.spatial.transform import Rotation as R\n    >>> import numpy as np\n    >>> r = R.from_quat(np.eye(4))\n    >>> r.as_quat()\n    array([[ 1., 0., 0., 0.],\n           [ 0., 1., 0., 0.],\n           [ 0., 0., 1., 0.],\n           [ 0., 0., 0., 1.]])\n    >>> r.magnitude()\n    array([3.14159265, 3.14159265, 3.14159265, 0.        ])\n    \n    Magnitude of a single rotation:\n    \n    >>> r[0].magnitude()\n    3.141592653589793",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "925da1614dc0783972d208725870d27f6a05d6d418ad07bd859b4150c2e871db",
            "fields": [
                {
                    "id": "0f8p2k2q",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.spatial.transform._rotation.Rotation.magnitude object",
                    "type": "Object:scipy.spatial.transform._rotation.Rotation",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b62qy8g9",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.transform._rotation.Rotation.magnitude",
                    "defaultValue": "scipy.spatial.transform._rotation.Rotation.magnitude",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cl0a8g37",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v0novo7z",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "v57_ff73",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "elfgyxj3",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.transform._rotation.Rotation",
                    "defaultValue": "scipy.spatial.transform._rotation.Rotation",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "anw43u09",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2okhhlfu",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "cqthuvz1",
            "name": "Rotation.mean",
            "description": "Rotation.mean(self, weights=None)\n    \n    Get the mean of the rotations.\n    \n    The mean used is the chordal L2 mean (also called the projected or\n    induced arithmetic mean) [1]_. If ``A`` is a set of rotation matrices,\n    then the mean ``M`` is the rotation matrix that minimizes the\n    following loss function:\n    \n    .. math::\n    \n        L(M) = \\sum_{i = 1}^{n} w_i \\lVert \\mathbf{A}_i -\n        \\mathbf{M} \\rVert^2 ,\n    \n    where :math:`w_i`'s are the `weights` corresponding to each matrix.\n    \n    Parameters\n    ----------\n    weights : array_like shape (N,), optional\n        Weights describing the relative importance of the rotations. If\n        None (default), then all values in `weights` are assumed to be\n        equal.\n    \n    Returns\n    -------\n    mean : `Rotation` instance\n        Object containing the mean of the rotations in the current\n        instance.\n    \n    References\n    ----------\n    .. [1] Hartley, Richard, et al.,\n            \"Rotation Averaging\", International Journal of Computer Vision\n            103, 2013, pp. 267-305.\n    \n    Examples\n    --------\n    >>> from scipy.spatial.transform import Rotation as R\n    >>> r = R.from_euler('zyx', [[0, 0, 0],\n    ...                          [1, 0, 0],\n    ...                          [0, 1, 0],\n    ...                          [0, 0, 1]], degrees=True)\n    >>> r.mean().as_euler('zyx', degrees=True)\n    array([0.24945696, 0.25054542, 0.24945696])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a1251e6efeae652701d2e559250acf513a5444757076234c770b45c02eace9ca",
            "fields": [
                {
                    "id": "_74240p9",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.spatial.transform._rotation.Rotation.mean object",
                    "type": "Object:scipy.spatial.transform._rotation.Rotation",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oagin6_i",
                    "encoding": "",
                    "name": "weights",
                    "value": "",
                    "defaultValue": "",
                    "description": "Weights describing the relative importance of the rotations. If\nNone (default), then all values in `weights` are assumed to be\nequal.",
                    "type": "arraylike shape (N,)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yy7jqfmh",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.transform._rotation.Rotation.mean",
                    "defaultValue": "scipy.spatial.transform._rotation.Rotation.mean",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5apd9rua",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "86mnf72i",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "btdehxkn",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0udn0_l2",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.transform._rotation.Rotation",
                    "defaultValue": "scipy.spatial.transform._rotation.Rotation",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lt630cx7",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vkoo11yh",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "szcjy4yp",
            "name": "Rotation.random",
            "description": "Rotation.random(cls, num=None, rng=None)\n    \n    Generate uniformly distributed rotations.\n    \n    Parameters\n    ----------\n    num : int or None, optional\n        Number of random rotations to generate. If None (default), then a\n        single rotation is generated.\n    rng : {None, int, `numpy.random.Generator`}, optional\n        If `rng` is passed by keyword, types other than `numpy.random.Generator` are\n        passed to `numpy.random.default_rng` to instantiate a ``Generator``.\n        If `rng` is already a ``Generator`` instance, then the provided instance is\n        used. Specify `rng` for repeatable function behavior.\n    \n        If this argument is passed by position or `random_state` is passed by keyword,\n        legacy behavior for the argument `random_state` applies:\n    \n        - If `random_state` is None (or `numpy.random`), the `numpy.random.RandomState`\n          singleton is used.\n        - If `random_state` is an int, a new ``RandomState`` instance is used,\n          seeded with `random_state`.\n        - If `random_state` is already a ``Generator`` or ``RandomState`` instance then\n          that instance is used.\n    \n        .. versionchanged:: 1.15.0\n            As part of the `SPEC-007 <https://scientific-python.org/specs/spec-0007/>`_\n            transition from use of `numpy.random.RandomState` to\n            `numpy.random.Generator`, this keyword was changed from `random_state` to `rng`.\n            For an interim period, both keywords will continue to work, although only one\n            may be specified at a time. After the interim period, function calls using the\n            `random_state` keyword will emit warnings. The behavior of both `random_state` and\n            `rng` are outlined above, but only the `rng` keyword should be used in new code.\n            \n    \n    Returns\n    -------\n    random_rotation : `Rotation` instance\n        Contains a single rotation if `num` is None. Otherwise contains a\n        stack of `num` rotations.\n    \n    See Also\n    --------\n    \n    :func:`scipy.stats.special_ortho_group`\n        ..\n    \n    Notes\n    -----\n    This function is optimized for efficiently sampling random rotation\n    matrices in three dimensions. For generating random rotation matrices\n    in higher dimensions, see `scipy.stats.special_ortho_group`.\n    \n    Examples\n    --------\n    >>> from scipy.spatial.transform import Rotation as R\n    \n    Sample a single rotation:\n    \n    >>> R.random().as_euler('zxy', degrees=True)\n    array([-110.5976185 ,   55.32758512,   76.3289269 ])  # random\n    \n    Sample a stack of rotations:\n    \n    >>> R.random(5).as_euler('zxy', degrees=True)\n    array([[-110.5976185 ,   55.32758512,   76.3289269 ],  # random\n           [ -91.59132005,  -14.3629884 ,  -93.91933182],\n           [  25.23835501,   45.02035145, -121.67867086],\n           [ -51.51414184,  -15.29022692, -172.46870023],\n           [ -81.63376847,  -27.39521579,    2.60408416]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "28fb19774e57078909391ffe4cde3ba20fbb925449a81858485e66310e3a0ab8",
            "fields": [
                {
                    "id": "y7vxec2y",
                    "encoding": "",
                    "name": "num",
                    "value": "",
                    "defaultValue": "",
                    "description": "Number of random rotations to generate. If None (default), then a\nsingle rotation is generated.",
                    "type": "int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "isxs4jha",
                    "encoding": "",
                    "name": "rng",
                    "value": "",
                    "defaultValue": "",
                    "description": "If `rng` is passed by keyword, types other than `numpy.random.Generator` are\npassed to `numpy.random.default_rng` to instantiate a ``Generator``.\nIf `rng` is already a ``Generator`` instance, then the provided instance is\nused. Specify `rng` for repeatable function behavior.\n\nIf this argument is passed by position or `random_state` is passed by keyword,\nlegacy behavior for the argument `random_state` applies:\n\n- If `random_state` is None (or `numpy.random`), the `numpy.random.RandomState`\n  singleton is used.\n- If `random_state` is an int, a new ``RandomState`` instance is used,\n  seeded with `random_state`.\n- If `random_state` is already a ``Generator`` or ``RandomState`` instance then\n  that instance is used.\n\n.. versionchanged:: 1.15.0\n    As part of the `SPEC-007 <https://scientific-python.org/specs/spec-0007/>`_\n    transition from use of `numpy.random.RandomState` to\n    `numpy.random.Generator`, this keyword was changed from `random_state` to `rng`.\n    For an interim period, both keywords will continue to work, although only one\n    may be specified at a time. After the interim period, function calls using the\n    `random_state` keyword will emit warnings. The behavior of both `random_state` and\n    `rng` are outlined above, but only the `rng` keyword should be used in new code.",
                    "type": "{None, int, numpy.random.Generator}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l3tqdntw",
                    "encoding": "",
                    "name": "random_state",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ybsuluaf",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.transform._rotation.Rotation.random",
                    "defaultValue": "scipy.spatial.transform._rotation.Rotation.random",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0jcod_4b",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wc9zk479",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "p04eg682",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "17w3d630",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.transform._rotation.Rotation",
                    "defaultValue": "scipy.spatial.transform._rotation.Rotation",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dw82otoh",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4jb8egtb",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "ng6__5qe",
            "name": "Rotation.reduce",
            "description": "Rotation.reduce(self, left=None, right=None, return_indices=False)\n    \n    Reduce this rotation with the provided rotation groups.\n    \n    Reduction of a rotation ``p`` is a transformation of the form\n    ``q = l * p * r``, where ``l`` and ``r`` are chosen from `left` and\n    `right` respectively, such that rotation ``q`` has the smallest\n    magnitude.\n    \n    If `left` and `right` are rotation groups representing symmetries of\n    two objects rotated by ``p``, then ``q`` is the rotation of the\n    smallest magnitude to align these objects considering their symmetries.\n    \n    Parameters\n    ----------\n    left : `Rotation` instance, optional\n        Object containing the left rotation(s). Default value (None)\n        corresponds to the identity rotation.\n    right : `Rotation` instance, optional\n        Object containing the right rotation(s). Default value (None)\n        corresponds to the identity rotation.\n    return_indices : bool, optional\n        Whether to return the indices of the rotations from `left` and\n        `right` used for reduction.\n    \n    Returns\n    -------\n    reduced : `Rotation` instance\n        Object containing reduced rotations.\n    left_best, right_best: integer ndarray\n        Indices of elements from `left` and `right` used for reduction.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "57414fb14dc49531a2f163551f91d621065c1b31ff931ed923be56120c958671",
            "fields": [
                {
                    "id": "w9ammezl",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.spatial.transform._rotation.Rotation.reduce object",
                    "type": "Object:scipy.spatial.transform._rotation.Rotation",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xa0x6gc5",
                    "encoding": "",
                    "name": "left",
                    "value": "",
                    "defaultValue": "",
                    "description": "Object containing the left rotation(s). Default value (None)\ncorresponds to the identity rotation.",
                    "type": "Rotation instance",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_44q5hq0",
                    "encoding": "",
                    "name": "right",
                    "value": "",
                    "defaultValue": "",
                    "description": "Object containing the right rotation(s). Default value (None)\ncorresponds to the identity rotation.",
                    "type": "Rotation instance",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "80_bz75y",
                    "encoding": "",
                    "name": "return_indices",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to return the indices of the rotations from `left` and\n`right` used for reduction.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jh8f09_k",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.transform._rotation.Rotation.reduce",
                    "defaultValue": "scipy.spatial.transform._rotation.Rotation.reduce",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gss0s8bt",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "djg617yy",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "nas642i4",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9xzo4hun",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.transform._rotation.Rotation",
                    "defaultValue": "scipy.spatial.transform._rotation.Rotation",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ah6wzd3d",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hy9cwx36",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "orj_o5__",
            "name": "RotationSpline.__init__",
            "description": "\nInterpolate rotations with continuous angular rate and acceleration.\n    \n    The rotation vectors between each consecutive orientation are cubic\n    functions of time and it is guaranteed that angular rate and acceleration\n    are continuous. Such interpolation are analogous to cubic spline\n    interpolation.\n    \n    Refer to [1]_ for math and implementation details.\n    \n    Parameters\n    ----------\n    times : array_like, shape (N,)\n        Times of the known rotations. At least 2 times must be specified.\n    rotations : `Rotation` instance\n        Rotations to perform the interpolation between. Must contain N\n        rotations.\n    \n    Methods\n    -------\n    __call__\n    \n    References\n    ----------\n    .. [1] `Smooth Attitude Interpolation\n            <https://github.com/scipy/scipy/files/2932755/attitude_interpolation.pdf>`_\n    \n    Examples\n    --------\n    >>> from scipy.spatial.transform import Rotation, RotationSpline\n    >>> import numpy as np\n    \n    Define the sequence of times and rotations from the Euler angles:\n    \n    >>> times = [0, 10, 20, 40]\n    >>> angles = [[-10, 20, 30], [0, 15, 40], [-30, 45, 30], [20, 45, 90]]\n    >>> rotations = Rotation.from_euler('XYZ', angles, degrees=True)\n    \n    Create the interpolator object:\n    \n    >>> spline = RotationSpline(times, rotations)\n    \n    Interpolate the Euler angles, angular rate and acceleration:\n    \n    >>> angular_rate = np.rad2deg(spline(times, 1))\n    >>> angular_acceleration = np.rad2deg(spline(times, 2))\n    >>> times_plot = np.linspace(times[0], times[-1], 100)\n    >>> angles_plot = spline(times_plot).as_euler('XYZ', degrees=True)\n    >>> angular_rate_plot = np.rad2deg(spline(times_plot, 1))\n    >>> angular_acceleration_plot = np.rad2deg(spline(times_plot, 2))\n    \n    On this plot you see that Euler angles are continuous and smooth:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> plt.plot(times_plot, angles_plot)\n    >>> plt.plot(times, angles, 'x')\n    >>> plt.title(\"Euler angles\")\n    >>> plt.show()\n    \n    The angular rate is also smooth:\n    \n    >>> plt.plot(times_plot, angular_rate_plot)\n    >>> plt.plot(times, angular_rate, 'x')\n    >>> plt.title(\"Angular rate\")\n    >>> plt.show()\n    \n    The angular acceleration is continuous, but not smooth. Also note that\n    the angular acceleration is not a piecewise-linear function, because\n    it is different from the second derivative of the rotation vector (which\n    is a piecewise-linear function as in the cubic spline).\n    \n    >>> plt.plot(times_plot, angular_acceleration_plot)\n    >>> plt.plot(times, angular_acceleration, 'x')\n    >>> plt.title(\"Angular acceleration\")\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "176ccb0c706771e049b38d0a9e9e632b77696772207a356183e256796cac1cad",
            "fields": [
                {
                    "id": "7_knjuh5",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to RotationSpline object",
                    "type": "Object:scipy.spatial.transform._rotation_spline.RotationSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6z6nr9o5",
                    "encoding": "",
                    "name": "times",
                    "value": "",
                    "defaultValue": "",
                    "description": "Times of the known rotations. At least 2 times must be specified.",
                    "type": "arraylike, shape (N,)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dc_wvuzh",
                    "encoding": "",
                    "name": "rotations",
                    "value": "",
                    "defaultValue": "",
                    "description": "Rotations to perform the interpolation between. Must contain N\nrotations.",
                    "type": "Rotation instance",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g_xotxf0",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.transform._rotation_spline.RotationSpline.__init__",
                    "defaultValue": "scipy.spatial.transform._rotation_spline.RotationSpline.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "utuk00pr",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x1hzmab8",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "kqd2661f",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y9xbhujy",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.transform._rotation_spline.RotationSpline",
                    "defaultValue": "scipy.spatial.transform._rotation_spline.RotationSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "47vk1lgj",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2hevsv12",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "2symu3pj",
            "name": "Slerp.__init__",
            "description": "\nSpherical Linear Interpolation of Rotations.\n    \n    The interpolation between consecutive rotations is performed as a rotation\n    around a fixed axis with a constant angular velocity [1]_. This ensures\n    that the interpolated rotations follow the shortest path between initial\n    and final orientations.\n    \n    Parameters\n    ----------\n    times : array_like, shape (N,)\n        Times of the known rotations. At least 2 times must be specified.\n    rotations : `Rotation` instance\n        Rotations to perform the interpolation between. Must contain N\n        rotations.\n    \n    Methods\n    -------\n    __call__\n    \n    See Also\n    --------\n    Rotation\n    \n    Notes\n    -----\n    .. versionadded:: 1.2.0\n    \n    References\n    ----------\n    .. [1] https://en.wikipedia.org/wiki/Slerp#Quaternion_Slerp\n    \n    Examples\n    --------\n    >>> from scipy.spatial.transform import Rotation as R\n    >>> from scipy.spatial.transform import Slerp\n    \n    Setup the fixed keyframe rotations and times:\n    \n    >>> key_rots = R.random(5, random_state=2342345)\n    >>> key_times = [0, 1, 2, 3, 4]\n    \n    Create the interpolator object:\n    \n    >>> slerp = Slerp(key_times, key_rots)\n    \n    Interpolate the rotations at the given times:\n    \n    >>> times = [0, 0.5, 0.25, 1, 1.5, 2, 2.75, 3, 3.25, 3.60, 4]\n    >>> interp_rots = slerp(times)\n    \n    The keyframe rotations expressed as Euler angles:\n    \n    >>> key_rots.as_euler('xyz', degrees=True)\n    array([[ 14.31443779, -27.50095894,  -3.7275787 ],\n           [ -1.79924227, -24.69421529, 164.57701743],\n           [146.15020772,  43.22849451, -31.34891088],\n           [ 46.39959442,  11.62126073, -45.99719267],\n           [-88.94647804, -49.64400082, -65.80546984]])\n    \n    The interpolated rotations expressed as Euler angles. These agree with the\n    keyframe rotations at both endpoints of the range of keyframe times.\n    \n    >>> interp_rots.as_euler('xyz', degrees=True)\n    array([[  14.31443779,  -27.50095894,   -3.7275787 ],\n           [   4.74588574,  -32.44683966,   81.25139984],\n           [  10.71094749,  -31.56690154,   38.06896408],\n           [  -1.79924227,  -24.69421529,  164.57701743],\n           [  11.72796022,   51.64207311, -171.7374683 ],\n           [ 146.15020772,   43.22849451,  -31.34891088],\n           [  68.10921869,   20.67625074,  -48.74886034],\n           [  46.39959442,   11.62126073,  -45.99719267],\n           [  12.35552615,    4.21525086,  -64.89288124],\n           [ -30.08117143,  -19.90769513,  -78.98121326],\n           [ -88.94647804,  -49.64400082,  -65.80546984]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "97d947bbde52a29a7d36d8de8aee390839b22046a3947a9f0f9f394f8cf5449d",
            "fields": [
                {
                    "id": "q9kk5e4f",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to Slerp object",
                    "type": "Object:scipy.spatial.transform._rotation.Slerp",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f65mzw8l",
                    "encoding": "",
                    "name": "times",
                    "value": "",
                    "defaultValue": "",
                    "description": "Times of the known rotations. At least 2 times must be specified.",
                    "type": "arraylike, shape (N,)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lhv369x4",
                    "encoding": "",
                    "name": "rotations",
                    "value": "",
                    "defaultValue": "",
                    "description": "Rotations to perform the interpolation between. Must contain N\nrotations.",
                    "type": "Rotation instance",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b3t1cvav",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.spatial.transform._rotation.Slerp.__init__",
                    "defaultValue": "scipy.spatial.transform._rotation.Slerp.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ny0sqxqe",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "md373rp2",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "uhvpidix",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "huvo33rm",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.spatial.transform._rotation.Slerp",
                    "defaultValue": "scipy.spatial.transform._rotation.Slerp",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6n1j_3rb",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ya4b1rb0",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        }
    ],
    "linkDataArray": []
}