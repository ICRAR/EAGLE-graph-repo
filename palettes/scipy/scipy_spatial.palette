{
    "modelData": {
        "filePath": "scipy_spatial.palette",
        "fileType": "palette",
        "shortDescription": "",
        "detailedDescription": "=============================================================\nSpatial algorithms and data structures (:mod:`scipy.spatial`)\n=============================================================\n\n.. currentmodule:: scipy.spatial\n\n.. toctree::\n   :hidden:\n\n   spatial.distance\n\nSpatial transformations\n=======================\n\nThese are contained in the `scipy.spatial.transform` submodule.\n\nNearest-neighbor queries\n========================\n.. autosummary::\n   :toctree: generated/\n\n   KDTree      -- class for efficient nearest-neighbor queries\n   cKDTree     -- class for efficient nearest-neighbor queries (faster implementation)\n   Rectangle\n\nDistance metrics\n================\n\nDistance metrics are contained in the :mod:`scipy.spatial.distance` submodule.\n\nDelaunay triangulation, convex hulls, and Voronoi diagrams\n==========================================================\n\n.. autosummary::\n   :toctree: generated/\n\n   Delaunay    -- compute Delaunay triangulation of input points\n   ConvexHull  -- compute a convex hull for input points\n   Voronoi     -- compute a Voronoi diagram hull from input points\n   SphericalVoronoi -- compute a Voronoi diagram from input points on the surface of a sphere\n   HalfspaceIntersection -- compute the intersection points of input halfspaces\n\nPlotting helpers\n================\n\n.. autosummary::\n   :toctree: generated/\n\n   delaunay_plot_2d     -- plot 2-D triangulation\n   convex_hull_plot_2d  -- plot 2-D convex hull\n   voronoi_plot_2d      -- plot 2-D Voronoi diagram\n\n.. seealso:: :ref:`Tutorial <qhulltutorial>`\n\n\nSimplex representation\n======================\nThe simplices (triangles, tetrahedra, etc.) appearing in the Delaunay\ntessellation (N-D simplices), convex hull facets, and Voronoi ridges\n(N-1-D simplices) are represented in the following scheme::\n\n    tess = Delaunay(points)\n    hull = ConvexHull(points)\n    voro = Voronoi(points)\n\n    # coordinates of the jth vertex of the ith simplex\n    tess.points[tess.simplices[i, j], :]        # tessellation element\n    hull.points[hull.simplices[i, j], :]        # convex hull facet\n    voro.vertices[voro.ridge_vertices[i, j], :] # ridge between Voronoi cells\n\nFor Delaunay triangulations and convex hulls, the neighborhood\nstructure of the simplices satisfies the condition:\n``tess.neighbors[i,j]`` is the neighboring simplex of the ith\nsimplex, opposite to the ``j``-vertex. It is -1 in case of no neighbor.\n\nConvex hull facets also define a hyperplane equation::\n\n    (hull.equations[i,:-1] * coord).sum() + hull.equations[i,-1] == 0\n\nSimilar hyperplane equations for the Delaunay triangulation correspond\nto the convex hull facets on the corresponding N+1-D\nparaboloid.\n\nThe Delaunay triangulation objects offer a method for locating the\nsimplex containing a given point, and barycentric coordinate\ncomputations.\n\nFunctions\n---------\n\n.. autosummary::\n   :toctree: generated/\n\n   tsearch\n   distance_matrix\n   minkowski_distance\n   minkowski_distance_p\n   procrustes\n   geometric_slerp\n\nWarnings / Errors used in :mod:`scipy.spatial`\n----------------------------------------------\n.. autosummary::\n   :toctree: generated/\n\n   QhullError",
        "repoService": "GitHub",
        "repoBranch": "master",
        "repo": "ICRAR/EAGLE_test_repo",
        "eagleVersion": "",
        "eagleCommitHash": "",
        "schemaVersion": "AppRef",
        "readonly": true,
        "repositoryUrl": "scipy",
        "commitHash": "0.1",
        "downloadUrl": "",
        "signature": "692ee7a55280ba1cc5cc9c5684e34920b7926b4cf5de44b39ea847f272d637e0",
        "lastModifiedName": "wici",
        "lastModifiedEmail": "",
        "lastModifiedDatetime": 1694535539.829367
    },
    "nodeDataArray": [
        {
            "category": "PythonApp",
            "key": -1,
            "name": "ConvexHull.__init__",
            "description": "No description found\nConvexHull(points, incremental=False, qhull_options=None)\n    \n    Convex hulls in N dimensions.\n    \n    .. versionadded:: 0.12.0",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "bcc9649c645582cf796334e05c56fba77afc5cf9574764da7b782af591cd978d",
            "fields": [
                {
                    "name": "points",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray of double, shape (npoints, ndim)     Coordinates of input points. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "incremental",
                    "value": null,
                    "defaultValue": null,
                    "description": "bool, optional     Allow adding new points incrementally. This takes up some additional     resources. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "qhull_options",
                    "value": null,
                    "defaultValue": null,
                    "description": "str, optional     Additional options to pass to Qhull. See Qhull manual     for details. (Default: \"Qx\" for ndim > 4 and \"\" otherwise)     Option \"Qt\" is always enabled.  Attributes ---------- ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._qhull.ConvexHull.__init__",
                    "defaultValue": "scipy.spatial._qhull.ConvexHull.__init__",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "ConvexHull.add_points",
            "description": "add_points(points, restart=False)\n    \n    Process a set of additional new points.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "fffc803f1fc8940a1a9b8800ca457a4917a5f29e7a49f9481f6e324ed1fe7159",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "points",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray     New points to add. The dimensionality should match that of the     initial points. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "restart",
                    "value": null,
                    "defaultValue": null,
                    "description": "bool, optional     Whether to restart processing from scratch, rather than     adding points incrementally. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._qhull.ConvexHull.add_points",
                    "defaultValue": "scipy.spatial._qhull.ConvexHull.add_points",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Delaunay.__init__",
            "description": "No description found\nDelaunay(points, furthest_site=False, incremental=False, qhull_options=None)\n    \n    Delaunay tessellation in N dimensions.\n    \n    .. versionadded:: 0.9",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "51fe69aadc5b7da26175b00e57ff14fac359d6a82a1bd5c5a3c13f40e777105c",
            "fields": [
                {
                    "name": "points",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray of double, shape (npoints, ndim)     Coordinates of input points. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "furthest_site",
                    "value": null,
                    "defaultValue": null,
                    "description": "bool, optional     Whether to compute a furthest-site Delaunay triangulation.     Default: False      .. versionadded:: 0.12.0 ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "incremental",
                    "value": null,
                    "defaultValue": null,
                    "description": "bool, optional     Allow adding new points incrementally. This takes up some additional     resources. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "qhull_options",
                    "value": null,
                    "defaultValue": null,
                    "description": "str, optional     Additional options to pass to Qhull. See Qhull manual for     details. Option \"Qt\" is always enabled.     Default:\"Qbb Qc Qz Qx Q12\" for ndim > 4 and \"Qbb Qc Qz Q12\" otherwise.     Incremental mode omits \"Qz\".      .. versionadded:: 0.12.0  Attributes ---------- ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._qhull.Delaunay.__init__",
                    "defaultValue": "scipy.spatial._qhull.Delaunay.__init__",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Delaunay.add_points",
            "description": "add_points(points, restart=False)\n    \n    Process a set of additional new points.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4e5dd0ee7ee51c97e0d47a61e7d66c4ec6a6cff352fde1f7e87b1fee696b1246",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "points",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray     New points to add. The dimensionality should match that of the     initial points. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "restart",
                    "value": null,
                    "defaultValue": null,
                    "description": "bool, optional     Whether to restart processing from scratch, rather than     adding points incrementally. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._qhull.Delaunay.add_points",
                    "defaultValue": "scipy.spatial._qhull.Delaunay.add_points",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Delaunay.find_simplex",
            "description": "find_simplex(self, xi, bruteforce=False, tol=None)\n    \n    Find the simplices containing the given points.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "30ebec7da6928ca83348342fd3e151fc3e8efba85c6e7fa1040038ebcb87d5a4",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "xi",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray of double, shape (..., ndim)     Points to locate ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "bruteforce",
                    "value": null,
                    "defaultValue": null,
                    "description": "bool, optional     Whether to only perform a brute-force search ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "tol",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Tolerance allowed in the inside-triangle check.     Default is ``100*eps``. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._qhull.Delaunay.find_simplex",
                    "defaultValue": "scipy.spatial._qhull.Delaunay.find_simplex",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Delaunay.lift_points",
            "description": "lift_points(self, x)\n    \n    Lift points to the Qhull paraboloid.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "0b3894fb0a485a58dddffe4722fd0e95e684513ea9e84e5dd303abb1fe7d314d",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._qhull.Delaunay.lift_points",
                    "defaultValue": "scipy.spatial._qhull.Delaunay.lift_points",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Delaunay.plane_distance",
            "description": "plane_distance(self, xi)\n    \n    Compute hyperplane distances to the point `xi` from all simplices.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c904af967f3423c4b5ec1ac699a34e74a544e543e01b852ea1fa574aa1bc87b4",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "xi",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._qhull.Delaunay.plane_distance",
                    "defaultValue": "scipy.spatial._qhull.Delaunay.plane_distance",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "HalfspaceIntersection.__init__",
            "description": "No description found\nHalfspaceIntersection(halfspaces, interior_point, incremental=False, qhull_options=None)\n    \n    Halfspace intersections in N dimensions.\n    \n    .. versionadded:: 0.19.0",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "46c7d594a0fd17f6ff3b2e741154d12ee0d95ec4eb8a45e865bb4904d2b64d79",
            "fields": [
                {
                    "name": "halfspaces",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray of double, shape (nineq, ndim+1)     Input halfspaces. interior_point :ndarray of floats, shape (ndim,)     Input interior point. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "interior_point",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray of floats, shape (ndim,)     Point clearly inside the region defined by halfspaces. Also called a feasible     point, it can be obtained by linear programming. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "incremental",
                    "value": null,
                    "defaultValue": null,
                    "description": "bool, optional     Allow adding new halfspaces incrementally. This takes up some additional     resources. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "qhull_options",
                    "value": null,
                    "defaultValue": null,
                    "description": "str, optional     Additional options to pass to Qhull. See Qhull manual     for details. (Default: \"Qx\" for ndim > 4 and \"\" otherwise)     Option \"H\" is always enabled.  Attributes ---------- ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._qhull.HalfspaceIntersection.__init__",
                    "defaultValue": "scipy.spatial._qhull.HalfspaceIntersection.__init__",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "HalfspaceIntersection.add_halfspaces",
            "description": "add_halfspaces(halfspaces, restart=False)\n    \n    Process a set of additional new halfspaces.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ffa107d60f4902a46b2df865ac2a99cd9d558a38ccf902ad9b3bf3c96fdaa0b6",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "halfspaces",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray     New halfspaces to add. The dimensionality should match that of the     initial halfspaces. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "restart",
                    "value": null,
                    "defaultValue": null,
                    "description": "bool, optional     Whether to restart processing from scratch, rather than     adding halfspaces incrementally. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._qhull.HalfspaceIntersection.add_halfspaces",
                    "defaultValue": "scipy.spatial._qhull.HalfspaceIntersection.add_halfspaces",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "KDTree.__init__",
            "description": "No description found\nkd-tree for quick nearest-neighbor lookup.\n    \n    This class provides an index into a set of k-dimensional points\n    which can be used to rapidly look up the nearest neighbors of any\n    point.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7d9508acec46d6da9d1e3681f92141ce370b8d53ffd7e1b7e711eead49119a15",
            "fields": [
                {
                    "name": "data",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray, shape (n,m)     The n data points of dimension m to be indexed. This array is     not copied unless this is necessary to produce a contiguous     array of doubles. The data are also copied if the kd-tree is built     with `copy_data=True`. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "leafsize",
                    "value": null,
                    "defaultValue": null,
                    "description": "positive int     The number of points at which the algorithm switches over to     brute-force. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "compact_nodes",
                    "value": null,
                    "defaultValue": null,
                    "description": "bool, optional     If True, the kd-tree is built to shrink the hyperrectangles to     the actual data range. This usually gives a more compact tree that     is robust against degenerated input data and gives faster queries     at the expense of longer build time. Default: True. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "copy_data",
                    "value": null,
                    "defaultValue": null,
                    "description": "bool, optional     If True the data is always copied to protect the kd-tree against     data corruption. Default: False. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "balanced_tree",
                    "value": null,
                    "defaultValue": null,
                    "description": "bool, optional     If True, the median is used to split the hyperrectangles instead of     the midpoint. This usually gives a more compact tree and     faster queries at the expense of longer build time. Default: True. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "boxsize",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like or scalar, optional     Apply a m-d toroidal topology to the KDTree.. The topology is generated     by :math:`x_i + n_i L_i` where :math:`n_i` are integers and :math:`L_i`     is the boxsize along i-th dimension. The input data shall be wrapped     into :math:`[0, L_i)`. A ValueError is raised if any of the data is     outside of this bound.  Notes ----- The algorithm used is described in Maneewongvatana and Mount 1999. The general idea is that the kd-tree is a binary tree, each of whose nodes represents an axis-aligned hyperrectangle. Each node specifies an axis and splits the set of points based on whether their coordinate along that axis is greater than or less than a particular value.  During construction, the axis and splitting point are chosen by the \"sliding midpoint\" rule, which ensures that the cells do not all become long and thin.  The tree can be queried for the r closest neighbors of any given point (optionally returning only those within some maximum distance of the point). It can also be queried, with a substantial gain in efficiency, for the r approximate closest neighbors.  For large dimensions (20 is already large) do not expect this to run significantly faster than brute force. High-dimensional nearest-neighbor queries are a substantial open problem in computer science.  Attributes ---------- ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._kdtree.KDTree.__init__",
                    "defaultValue": "scipy.spatial._kdtree.KDTree.__init__",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "KDTree.count_neighbors",
            "description": "Count how many nearby pairs can be formed.\n    \n    Count the number of pairs ``(x1,x2)`` can be formed, with ``x1`` drawn\n    from ``self`` and ``x2`` drawn from ``other``, and where\n    ``distance(x1, x2, p) <= r``.\n    \n    Data points on ``self`` and ``other`` are optionally weighted by the\n    ``weights`` argument. (See below)\n    \n    This is adapted from the \"two-point correlation\" algorithm described by\n    Gray and Moore [1]_.  See notes for further discussion.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a98aeece070d7a94b7871a964e8e3a91a3ab3aaf6ee13863d5c0b096c900f815",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "other",
                    "value": null,
                    "defaultValue": null,
                    "description": "KDTree     The other tree to draw points from, can be the same tree as self. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "r",
                    "value": null,
                    "defaultValue": null,
                    "description": "float or one-dimensional array of floats     The radius to produce a count for. Multiple radii are searched with     a single tree traversal.     If the count is non-cumulative(``cumulative=False``), ``r`` defines     the edges of the bins, and must be non-decreasing. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "p",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     1<=p<=infinity.     Which Minkowski p-norm to use.     Default 2.0.     A finite large p may cause a ValueError if overflow can occur. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "weights",
                    "value": null,
                    "defaultValue": null,
                    "description": "tuple, array_like, or None, optional     If None, the pair-counting is unweighted.     If given as a tuple, weights[0] is the weights of points in     ``self``, and weights[1] is the weights of points in ``other``;     either can be None to indicate the points are unweighted.     If given as an array_like, weights is the weights of points in     ``self`` and ``other``. For this to make sense, ``self`` and     ``other`` must be the same tree. If ``self`` and ``other`` are two     different trees, a ``ValueError`` is raised.     Default: None      .. versionadded:: 1.6.0 ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "cumulative",
                    "value": null,
                    "defaultValue": null,
                    "description": "bool, optional     Whether the returned counts are cumulative. When cumulative is set     to ``False`` the algorithm is optimized to work with a large number     of bins (>10) specified by ``r``. When ``cumulative`` is set to     True, the algorithm is optimized to work with a small number of     ``r``. Default: True      .. versionadded:: 1.6.0 ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._kdtree.KDTree.count_neighbors",
                    "defaultValue": "scipy.spatial._kdtree.KDTree.count_neighbors",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "KDTree.query",
            "description": "Query the kd-tree for nearest neighbors.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7aa093daf5b2101a6b690d689a5568ae4b7fb5c7c25b5d672205c0f7048f6582",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like, last dimension self.m     An array of points to query. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "k",
                    "value": null,
                    "defaultValue": null,
                    "description": "int or Sequence[int], optional     Either the number of nearest neighbors to return, or a list of the     k-th nearest neighbors to return, starting from 1. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "eps",
                    "value": null,
                    "defaultValue": null,
                    "description": "nonnegative float, optional     Return approximate nearest neighbors; the kth returned value     is guaranteed to be no further than (1+eps) times the     distance to the real kth nearest neighbor. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "p",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, 1<=p<=infinity, optional     Which Minkowski p-norm to use.     1 is the sum-of-absolute-values distance (\"Manhattan\" distance).     2 is the usual Euclidean distance.     infinity is the maximum-coordinate-difference distance.     A large, finite p may cause a ValueError if overflow can occur. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "distance_upper_bound",
                    "value": null,
                    "defaultValue": null,
                    "description": "nonnegative float, optional     Return only neighbors within this distance. This is used to prune     tree searches, so if you are doing a series of nearest-neighbor     queries, it may help to supply the distance to the nearest neighbor     of the most recent point. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "workers",
                    "value": null,
                    "defaultValue": null,
                    "description": "int, optional     Number of workers to use for parallel processing. If -1 is given     all CPU threads are used. Default: 1.      .. versionadded:: 1.6.0 ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._kdtree.KDTree.query",
                    "defaultValue": "scipy.spatial._kdtree.KDTree.query",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "KDTree.query_ball_point",
            "description": "Find all points within distance r of point(s) x.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ec799fe2f24e5fad662d0f8c03affbf67d8500d266d562c6055a4aee675f3e5a",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like, shape tuple + (self.m,)     The point or points to search for neighbors of. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "r",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like, float     The radius of points to return, must broadcast to the length of x. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "p",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Which Minkowski p-norm to use.  Should be in the range [1, inf].     A finite large p may cause a ValueError if overflow can occur. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "eps",
                    "value": null,
                    "defaultValue": null,
                    "description": "nonnegative float, optional     Approximate search. Branches of the tree are not explored if their     nearest points are further than ``r / (1 + eps)``, and branches are     added in bulk if their furthest points are nearer than     ``r * (1 + eps)``. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "workers",
                    "value": null,
                    "defaultValue": null,
                    "description": "int, optional     Number of jobs to schedule for parallel processing. If -1 is given     all processors are used. Default: 1.      .. versionadded:: 1.6.0 ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "return_sorted",
                    "value": null,
                    "defaultValue": null,
                    "description": "bool, optional     Sorts returned indicies if True and does not sort them if False. If     None, does not sort single point queries, but does sort     multi-point queries which was the behavior before this option     was added.      .. versionadded:: 1.6.0 ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "return_length",
                    "value": null,
                    "defaultValue": null,
                    "description": "bool, optional     Return the number of points inside the radius instead of a list     of the indices.      .. versionadded:: 1.6.0 ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._kdtree.KDTree.query_ball_point",
                    "defaultValue": "scipy.spatial._kdtree.KDTree.query_ball_point",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "KDTree.query_ball_tree",
            "description": "Find all pairs of points between `self` and `other` whose distance is\n    at most r.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "10ba9bfed969ce5b8c164ab3a2e0916f5a96e22eeb2d100ee758d63f19ff664b",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "other",
                    "value": null,
                    "defaultValue": null,
                    "description": "KDTree instance     The tree containing points to search against. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "r",
                    "value": null,
                    "defaultValue": null,
                    "description": "float     The maximum distance, has to be positive. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "p",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Which Minkowski norm to use.  `p` has to meet the condition     ``1 <= p <= infinity``. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "eps",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Approximate search.  Branches of the tree are not explored     if their nearest points are further than ``r/(1+eps)``, and     branches are added in bulk if their furthest points are nearer     than ``r * (1+eps)``.  `eps` has to be non-negative. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._kdtree.KDTree.query_ball_tree",
                    "defaultValue": "scipy.spatial._kdtree.KDTree.query_ball_tree",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "KDTree.query_pairs",
            "description": "Find all pairs of points in `self` whose distance is at most r.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "47f0db187232bde587340d9205bf49579d9d4dfec20fe80a0668845769100968",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "r",
                    "value": null,
                    "defaultValue": null,
                    "description": "positive float     The maximum distance. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "p",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Which Minkowski norm to use.  `p` has to meet the condition     ``1 <= p <= infinity``. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "eps",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Approximate search.  Branches of the tree are not explored     if their nearest points are further than ``r/(1+eps)``, and     branches are added in bulk if their furthest points are nearer     than ``r * (1+eps)``.  `eps` has to be non-negative. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_type",
                    "value": "set",
                    "defaultValue": "set",
                    "description": "string, optional     Choose the output container, 'set' or 'ndarray'. Default: 'set'      .. versionadded:: 1.6.0 ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._kdtree.KDTree.query_pairs",
                    "defaultValue": "scipy.spatial._kdtree.KDTree.query_pairs",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "KDTree.sparse_distance_matrix",
            "description": "Compute a sparse distance matrix.\n    \n    Computes a distance matrix between two KDTrees, leaving as zero\n    any distance greater than max_distance.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5d2eab4e124a79df0ffba9ca1cbafa882ac4da2493b79cc493c20ad1af878c01",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "other",
                    "value": null,
                    "defaultValue": null,
                    "description": "KDTree  ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "max_distance",
                    "value": null,
                    "defaultValue": null,
                    "description": "positive float  ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "p",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, 1<=p<=infinity     Which Minkowski p-norm to use.     A finite large p may cause a ValueError if overflow can occur.  ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_type",
                    "value": "dok_matrix",
                    "defaultValue": "dok_matrix",
                    "description": "string, optional     Which container to use for output data. Options: 'dok_matrix',     'coo_matrix', 'dict', or 'ndarray'. Default: 'dok_matrix'.      .. versionadded:: 1.6.0 ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._kdtree.KDTree.sparse_distance_matrix",
                    "defaultValue": "scipy.spatial._kdtree.KDTree.sparse_distance_matrix",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Rectangle.__init__",
            "description": "Construct a hyperrectangle.\nHyperrectangle class.\n    \n    Represents a Cartesian product of intervals.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "fb3f83866b5500379732212e1e02e3b4b2ccf578e377bb2081a8335f79a2fefa",
            "fields": [
                {
                    "name": "maxes",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mins",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._kdtree.Rectangle.__init__",
                    "defaultValue": "scipy.spatial._kdtree.Rectangle.__init__",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Rectangle.max_distance_point",
            "description": "Return the maximum distance between input and points in the hyperrectangle.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d9a66b757492115d161a060547780626169a47df3f959012c2987e2d598dfc05",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     Input array. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "p",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Input.",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._kdtree.Rectangle.max_distance_point",
                    "defaultValue": "scipy.spatial._kdtree.Rectangle.max_distance_point",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Rectangle.max_distance_rectangle",
            "description": "Compute the maximum distance between points in the two hyperrectangles.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8e71952410f26c6a79001a64b383135d0e4ee89e5793a77ef9dd9dade5090f3e",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "other",
                    "value": null,
                    "defaultValue": null,
                    "description": "hyperrectangle     Input. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "p",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Input.",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._kdtree.Rectangle.max_distance_rectangle",
                    "defaultValue": "scipy.spatial._kdtree.Rectangle.max_distance_rectangle",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Rectangle.min_distance_point",
            "description": "Return the minimum distance between input and points in the\n    hyperrectangle.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "39b2ecf5e594e3c3c71fcb08af01c628dbd15032baf8ad19a45de256980fd85f",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     Input. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "p",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Input.",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._kdtree.Rectangle.min_distance_point",
                    "defaultValue": "scipy.spatial._kdtree.Rectangle.min_distance_point",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Rectangle.min_distance_rectangle",
            "description": "Compute the minimum distance between points in the two hyperrectangles.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "05963c27741cf2c43467421fce25705bd92b9c8019b4cab40193069d2326170f",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "other",
                    "value": null,
                    "defaultValue": null,
                    "description": "hyperrectangle     Input. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "p",
                    "value": null,
                    "defaultValue": null,
                    "description": "float     Input.",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._kdtree.Rectangle.min_distance_rectangle",
                    "defaultValue": "scipy.spatial._kdtree.Rectangle.min_distance_rectangle",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Rectangle.split",
            "description": "Produce two hyperrectangles by splitting.\n    \n    In general, if you need to compute maximum and minimum\n    distances to the children, it can be done more efficiently\n    by updating the maximum and minimum distances to the parent.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "cab83af988d23ec3bc70e98cedd8ec4177d8d947ab723fd6dc4b366e8ea7f596",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "d",
                    "value": null,
                    "defaultValue": null,
                    "description": "int     Axis to split hyperrectangle along. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "split",
                    "value": null,
                    "defaultValue": null,
                    "description": "float     Position along axis `d` to split at.",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._kdtree.Rectangle.split",
                    "defaultValue": "scipy.spatial._kdtree.Rectangle.split",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Rectangle.volume",
            "description": "Total volume.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "fa50ca06ca6c561a52f3dad3488cda80099a4229ec927c6d63ab2d330f7ce7b3",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._kdtree.Rectangle.volume",
                    "defaultValue": "scipy.spatial._kdtree.Rectangle.volume",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "SphericalVoronoi.__init__",
            "description": "No description found\nVoronoi diagrams on the surface of a sphere.\n    \n    .. versionadded:: 0.18.0",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "30e1b883b975d98720b71a285288c97134fe05ceb372aa262707994075bcce0f",
            "fields": [
                {
                    "name": "points",
                    "value": null,
                    "defaultValue": null,
                    "description": "double array of shape (npoints, ndim)     the points in `ndim` dimensions to generate the Voronoi diagram from ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "radius",
                    "value": null,
                    "defaultValue": null,
                    "description": "double     radius of the sphere ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "center",
                    "value": null,
                    "defaultValue": null,
                    "description": "double array of shape (ndim,)     center of the sphere ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "threshold",
                    "value": null,
                    "defaultValue": null,
                    "description": "float     Threshold for detecting duplicate points and     mismatches between points and sphere parameters.     (Default: 1e-06)  Attributes ---------- ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._spherical_voronoi.SphericalVoronoi.__init__",
                    "defaultValue": "scipy.spatial._spherical_voronoi.SphericalVoronoi.__init__",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "SphericalVoronoi.calculate_areas",
            "description": "Calculates the areas of the Voronoi regions.\n    \n    For 2D point sets, the regions are circular arcs. The sum of the areas\n    is `2 * pi * radius`.\n    \n    For 3D point sets, the regions are spherical polygons. The sum of the\n    areas is `4 * pi * radius**2`.\n    \n    .. versionadded:: 1.5.0\n    \n    Returns\n    -------\n    areas : double array of shape (npoints,)\n        The areas of the Voronoi regions.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ce162fac682f00e14e891f0bdbb7e649ae9a1b567e575822ffdbede04896b270",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._spherical_voronoi.SphericalVoronoi.calculate_areas",
                    "defaultValue": "scipy.spatial._spherical_voronoi.SphericalVoronoi.calculate_areas",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "SphericalVoronoi.sort_vertices_of_regions",
            "description": "Sort indices of the vertices to be (counter-)clockwise ordered.\n    \n    Raises\n    ------\n    TypeError\n        If the points are not three-dimensional.\n    \n    Notes\n    -----\n    For each region in regions, it sorts the indices of the Voronoi\n    vertices such that the resulting points are in a clockwise or\n    counterclockwise order around the generator point.\n    \n    This is done as follows: Recall that the n-th region in regions\n    surrounds the n-th generator in points and that the k-th\n    Voronoi vertex in vertices is the circumcenter of the k-th triangle\n    in self._simplices.  For each region n, we choose the first triangle\n    (=Voronoi vertex) in self._simplices and a vertex of that triangle\n    not equal to the center n. These determine a unique neighbor of that\n    triangle, which is then chosen as the second triangle. The second\n    triangle will have a unique vertex not equal to the current vertex or\n    the center. This determines a unique neighbor of the second triangle,\n    which is then chosen as the third triangle and so forth. We proceed\n    through all the triangles (=Voronoi vertices) belonging to the\n    generator in points and obtain a sorted version of the vertices\n    of its surrounding region.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b3f72c2ca97987fb5e0e08f214e1cc71c0af42c9782849d2295a82074ef569eb",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._spherical_voronoi.SphericalVoronoi.sort_vertices_of_regions",
                    "defaultValue": "scipy.spatial._spherical_voronoi.SphericalVoronoi.sort_vertices_of_regions",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Voronoi.__init__",
            "description": "No description found\nVoronoi(points, furthest_site=False, incremental=False, qhull_options=None)\n    \n    Voronoi diagrams in N dimensions.\n    \n    .. versionadded:: 0.12.0",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2a5e4b59cbcc18c53f201ef7be451a918788bf3befc9a12f2c09427b3a5a2777",
            "fields": [
                {
                    "name": "points",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray of double, shape (npoints, ndim)     Coordinates of input points. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "furthest_site",
                    "value": null,
                    "defaultValue": null,
                    "description": "bool, optional     Whether to compute a furthest-site Voronoi diagram. Default: False ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "incremental",
                    "value": null,
                    "defaultValue": null,
                    "description": "bool, optional     Allow adding new points incrementally. This takes up some additional     resources. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "qhull_options",
                    "value": null,
                    "defaultValue": null,
                    "description": "str, optional     Additional options to pass to Qhull. See Qhull manual     for details. (Default: \"Qbb Qc Qz Qx\" for ndim > 4 and     \"Qbb Qc Qz\" otherwise. Incremental mode omits \"Qz\".)  Attributes ---------- ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._qhull.Voronoi.__init__",
                    "defaultValue": "scipy.spatial._qhull.Voronoi.__init__",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Voronoi.add_points",
            "description": "add_points(points, restart=False)\n    \n    Process a set of additional new points.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "082e18c7c22a2fe684ea54824103fda123c95a00b27b125397ccd7760a1abe6e",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "points",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray     New points to add. The dimensionality should match that of the     initial points. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "restart",
                    "value": null,
                    "defaultValue": null,
                    "description": "bool, optional     Whether to restart processing from scratch, rather than     adding points incrementally. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._qhull.Voronoi.add_points",
                    "defaultValue": "scipy.spatial._qhull.Voronoi.add_points",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cKDTree.__init__",
            "description": "No description found\ncKDTree(data, leafsize=16, compact_nodes=True, copy_data=False,\n            balanced_tree=True, boxsize=None)\n    \n    kd-tree for quick nearest-neighbor lookup\n    \n    This class provides an index into a set of k-dimensional points\n    which can be used to rapidly look up the nearest neighbors of any\n    point.\n    \n    .. note::\n       `cKDTree` is functionally identical to `KDTree`. Prior to SciPy\n       v1.6.0, `cKDTree` had better performance and slightly different\n       functionality but now the two names exist only for\n       backward-compatibility reasons. If compatibility with SciPy < 1.6 is not\n       a concern, prefer `KDTree`.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "dcf5e52d8442155204235dc0aca634c2041b33d5b44625f277b5168c12f81ff4",
            "fields": [
                {
                    "name": "args",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "kwargs",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.cKDTree.__init__",
                    "defaultValue": "scipy.spatial.cKDTree.__init__",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cKDTree.count_neighbors",
            "description": "\nCount how many nearby pairs can be formed.\nCount the number of pairs ``(x1,x2)`` can be formed, with ``x1`` drawn\nfrom ``self`` and ``x2`` drawn from ``other``, and where\n``distance(x1, x2, p) <= r``.\nData points on ``self`` and ``other`` are optionally weighted by the\n``weights`` argument. (See below)\nThis is adapted from the \"two-point correlation\" algorithm described by\nGray and Moore [1]_.  See notes for further discussion.\nParameters\n----------\nother : cKDTree instance\n    The other tree to draw points from, can be the same tree as self.\nr : float or one-dimensional array of floats\n    The radius to produce a count for. Multiple radii are searched with\n    a single tree traversal.\n    If the count is non-cumulative(``cumulative=False``), ``r`` defines\n    the edges of the bins, and must be non-decreasing.\np : float, optional\n    1<=p<=infinity.\n    Which Minkowski p-norm to use.\n    Default 2.0.\n    A finite large p may cause a ValueError if overflow can occur.\nweights : tuple, array_like, or None, optional\n    If None, the pair-counting is unweighted.\n    If given as a tuple, weights[0] is the weights of points in ``self``, and\n    weights[1] is the weights of points in ``other``; either can be None to\n    indicate the points are unweighted.\n    If given as an array_like, weights is the weights of points in ``self``\n    and ``other``. For this to make sense, ``self`` and ``other`` must be the\n    same tree. If ``self`` and ``other`` are two different trees, a ``ValueError``\n    is raised.\n    Default: None\ncumulative : bool, optional\n    Whether the returned counts are cumulative. When cumulative is set to ``False``\n    the algorithm is optimized to work with a large number of bins (>10) specified\n    by ``r``. When ``cumulative`` is set to True, the algorithm is optimized to work\n    with a small number of ``r``. Default: True\nReturns\n-------\nresult : scalar or 1-D array\n    The number of pairs. For unweighted counts, the result is integer.\n    For weighted counts, the result is float.\n    If cumulative is False, ``result[i]`` contains the counts with\n    ``(-inf if i == 0 else r[i-1]) < R <= r[i]``\nNotes\n-----\nPair-counting is the basic operation used to calculate the two point\ncorrelation functions from a data set composed of position of objects.\nTwo point correlation function measures the clustering of objects and\nis widely used in cosmology to quantify the large scale structure\nin our Universe, but it may be useful for data analysis in other fields\nwhere self-similar assembly of objects also occur.\nThe Landy-Szalay estimator for the two point correlation function of\n``D`` measures the clustering signal in ``D``. [2]_\nFor example, given the position of two sets of objects,\n- objects ``D`` (data) contains the clustering signal, and\n- objects ``R`` (random) that contains no signal,\n.. math::\n     \\xi(r) = \\frac{<D, D> - 2 f <D, R> + f^2<R, R>}{f^2<R, R>},\nwhere the brackets represents counting pairs between two data sets\nin a finite bin around ``r`` (distance), corresponding to setting\n`cumulative=False`, and ``f = float(len(D)) / float(len(R))`` is the\nratio between number of objects from data and random.\nThe algorithm implemented here is loosely based on the dual-tree\nalgorithm described in [1]_. We switch between two different\npair-cumulation scheme depending on the setting of ``cumulative``.\nThe computing time of the method we use when for\n``cumulative == False`` does not scale with the total number of bins.\nThe algorithm for ``cumulative == True`` scales linearly with the\nnumber of bins, though it is slightly faster when only\n1 or 2 bins are used. [5]_.\nAs an extension to the naive pair-counting,\nweighted pair-counting counts the product of weights instead\nof number of pairs.\nWeighted pair-counting is used to estimate marked correlation functions\n([3]_, section 2.2),\nor to properly calculate the average of data per distance bin\n(e.g. [4]_, section 2.1 on redshift).\n.. [1] Gray and Moore,\n       \"N-body problems in statistical learning\",\n       Mining the sky, 2000, :arxiv:`astro-ph/0012333`\n.. [2] Landy and Szalay,\n       \"Bias and variance of angular correlation functions\",\n       The Astrophysical Journal, 1993, :doi:`10.1086/172900`\n.. [3] Sheth, Connolly and Skibba,\n       \"Marked correlations in galaxy formation models\",\n       2005, :arxiv:`astro-ph/0511773`\n.. [4] Hawkins, et al.,\n       \"The 2dF Galaxy Redshift Survey: correlation functions,\n       peculiar velocities and the matter density of the Universe\",\n       Monthly Notices of the Royal Astronomical Society, 2002,\n       :doi:`10.1046/j.1365-2966.2003.07063.x`\n.. [5] https://github.com/scipy/scipy/pull/5647#issuecomment-168474926\nExamples\n--------\nYou can count neighbors number between two kd-trees within a distance:\n>>> import numpy as np\n>>> from scipy.spatial import cKDTree\n>>> rng = np.random.default_rng()\n>>> points1 = rng.random((5, 2))\n>>> points2 = rng.random((5, 2))\n>>> kd_tree1 = cKDTree(points1)\n>>> kd_tree2 = cKDTree(points2)\n>>> kd_tree1.count_neighbors(kd_tree2, 0.2)\n1\nThis number is same as the total pair number calculated by\n`query_ball_tree`:\n>>> indexes = kd_tree1.query_ball_tree(kd_tree2, r=0.2)\n>>> sum([len(i) for i in indexes])\n1",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "71e16b6ffe645d337690f3c1fcf4b1606e910e295ee2f78c9d97f1ba47ef2cf5",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "other",
                    "value": null,
                    "defaultValue": null,
                    "description": "cKDTree instance     The other tree to draw points from, can be the same tree as self. ",
                    "type": "",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "r",
                    "value": null,
                    "defaultValue": null,
                    "description": "float or one-dimensional array of floats     The radius to produce a count for. Multiple radii are searched with     a single tree traversal.     If the count is non-cumulative(``cumulative=False``), ``r`` defines     the edges of the bins, and must be non-decreasing. ",
                    "type": "",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "p",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     1<=p<=infinity.     Which Minkowski p-norm to use.     Default 2.0.     A finite large p may cause a ValueError if overflow can occur. ",
                    "type": "2.",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "weights",
                    "value": null,
                    "defaultValue": null,
                    "description": "tuple, array_like, or None, optional     If None, the pair-counting is unweighted.     If given as a tuple, weights[0] is the weights of points in ``self``, and     weights[1] is the weights of points in ``other``; either can be None to     indicate the points are unweighted.     If given as an array_like, weights is the weights of points in ``self``     and ``other``. For this to make sense, ``self`` and ``other`` must be the     same tree. If ``self`` and ``other`` are two different trees, a ``ValueError``     is raised.     Default: None ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "cumulative",
                    "value": null,
                    "defaultValue": null,
                    "description": "bool, optional     Whether the returned counts are cumulative. When cumulative is set to ``False``     the algorithm is optimized to work with a large number of bins (>10) specified     by ``r``. When ``cumulative`` is set to True, the algorithm is optimized to work     with a small number of ``r``. Default: True ",
                    "type": "True",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.cKDTree.count_neighbors",
                    "defaultValue": "scipy.spatial.cKDTree.count_neighbors",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cKDTree.query",
            "description": "\nQuery the kd-tree for nearest neighbors\nParameters\n----------\nx : array_like, last dimension self.m\n    An array of points to query.\nk : list of integer or integer\n    The list of k-th nearest neighbors to return. If k is an\n    integer it is treated as a list of [1, ... k] (range(1, k+1)).\n    Note that the counting starts from 1.\neps : non-negative float\n    Return approximate nearest neighbors; the k-th returned value\n    is guaranteed to be no further than (1+eps) times the\n    distance to the real k-th nearest neighbor.\np : float, 1<=p<=infinity\n    Which Minkowski p-norm to use.\n    1 is the sum-of-absolute-values \"Manhattan\" distance\n    2 is the usual Euclidean distance\n    infinity is the maximum-coordinate-difference distance\n    A finite large p may cause a ValueError if overflow can occur.\ndistance_upper_bound : nonnegative float\n    Return only neighbors within this distance.  This is used to prune\n    tree searches, so if you are doing a series of nearest-neighbor\n    queries, it may help to supply the distance to the nearest neighbor\n    of the most recent point.\nworkers : int, optional\n    Number of workers to use for parallel processing. If -1 is given\n    all CPU threads are used. Default: 1.\n    .. versionchanged:: 1.9.0\n       The \"n_jobs\" argument was renamed \"workers\". The old name\n       \"n_jobs\" was deprecated in SciPy 1.6.0 and was removed in\n       SciPy 1.9.0.\nReturns\n-------\nd : array of floats\n    The distances to the nearest neighbors.\n    If ``x`` has shape ``tuple+(self.m,)``, then ``d`` has shape ``tuple+(k,)``.\n    When k == 1, the last dimension of the output is squeezed.\n    Missing neighbors are indicated with infinite distances.\ni : ndarray of ints\n    The index of each neighbor in ``self.data``.\n    If ``x`` has shape ``tuple+(self.m,)``, then ``i`` has shape ``tuple+(k,)``.\n    When k == 1, the last dimension of the output is squeezed.\n    Missing neighbors are indicated with ``self.n``.\nNotes\n-----\nIf the KD-Tree is periodic, the position ``x`` is wrapped into the\nbox.\nWhen the input k is a list, a query for arange(max(k)) is performed, but\nonly columns that store the requested values of k are preserved. This is\nimplemented in a manner that reduces memory usage.\nExamples\n--------\n>>> import numpy as np\n>>> from scipy.spatial import cKDTree\n>>> x, y = np.mgrid[0:5, 2:8]\n>>> tree = cKDTree(np.c_[x.ravel(), y.ravel()])\nTo query the nearest neighbours and return squeezed result, use\n>>> dd, ii = tree.query([[0, 0], [2.2, 2.9]], k=1)\n>>> print(dd, ii, sep='\\n')\n[2.         0.2236068]\n[ 0 13]\nTo query the nearest neighbours and return unsqueezed result, use\n>>> dd, ii = tree.query([[0, 0], [2.2, 2.9]], k=[1])\n>>> print(dd, ii, sep='\\n')\n[[2.        ]\n [0.2236068]]\n[[ 0]\n [13]]\nTo query the second nearest neighbours and return unsqueezed result,\nuse\n>>> dd, ii = tree.query([[0, 0], [2.2, 2.9]], k=[2])\n>>> print(dd, ii, sep='\\n')\n[[2.23606798]\n [0.80622577]]\n[[ 6]\n [19]]\nTo query the first and second nearest neighbours, use\n>>> dd, ii = tree.query([[0, 0], [2.2, 2.9]], k=2)\n>>> print(dd, ii, sep='\\n')\n[[2.         2.23606798]\n [0.2236068  0.80622577]]\n[[ 0  6]\n [13 19]]\nor, be more specific\n>>> dd, ii = tree.query([[0, 0], [2.2, 2.9]], k=[1, 2])\n>>> print(dd, ii, sep='\\n')\n[[2.         2.23606798]\n [0.2236068  0.80622577]]\n[[ 0  6]\n [13 19]]",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8efe175b05025aa9ecd00795fe5c9a34a077591585640fca204a9788cbd73162",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like, last dimension self.m     An array of points to query. ",
                    "type": "",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "k",
                    "value": null,
                    "defaultValue": null,
                    "description": "list of integer or integer     The list of k-th nearest neighbors to return. If k is an     integer it is treated as a list of [1, ... k] (range(1, k+1)).     Note that the counting starts from 1. ",
                    "type": "1",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "eps",
                    "value": null,
                    "defaultValue": null,
                    "description": "non-negative float     Return approximate nearest neighbors; the k-th returned value     is guaranteed to be no further than (1+eps) times the     distance to the real k-th nearest neighbor. ",
                    "type": "0",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "p",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, 1<=p<=infinity     Which Minkowski p-norm to use.     1 is the sum-of-absolute-values \"Manhattan\" distance     2 is the usual Euclidean distance     infinity is the maximum-coordinate-difference distance     A finite large p may cause a ValueError if overflow can occur. ",
                    "type": "2",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "distance_upper_bound",
                    "value": null,
                    "defaultValue": null,
                    "description": "nonnegative float     Return only neighbors within this distance.  This is used to prune     tree searches, so if you are doing a series of nearest-neighbor     queries, it may help to supply the distance to the nearest neighbor     of the most recent point. ",
                    "type": "np.inf",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "workers",
                    "value": null,
                    "defaultValue": null,
                    "description": "int, optional     Number of workers to use for parallel processing. If -1 is given     all CPU threads are used. Default: 1.      .. versionchanged:: 1.9.0        The \"n_jobs\" argument was renamed \"workers\". The old name        \"n_jobs\" was deprecated in SciPy 1.6.0 and was removed in        SciPy 1.9.0. ",
                    "type": "1",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.cKDTree.query",
                    "defaultValue": "scipy.spatial.cKDTree.query",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cKDTree.query_ball_point",
            "description": "                 return_length=False)\nFind all points within distance r of point(s) x.\nParameters\n----------\nx : array_like, shape tuple + (self.m,)\n    The point or points to search for neighbors of.\nr : array_like, float\n    The radius of points to return, shall broadcast to the length of x.\np : float, optional\n    Which Minkowski p-norm to use.  Should be in the range [1, inf].\n    A finite large p may cause a ValueError if overflow can occur.\neps : nonnegative float, optional\n    Approximate search. Branches of the tree are not explored if their\n    nearest points are further than ``r / (1 + eps)``, and branches are\n    added in bulk if their furthest points are nearer than\n    ``r * (1 + eps)``.\nworkers : int, optional\n    Number of jobs to schedule for parallel processing. If -1 is given\n    all processors are used. Default: 1.\n    .. versionchanged:: 1.9.0\n       The \"n_jobs\" argument was renamed \"workers\". The old name\n       \"n_jobs\" was deprecated in SciPy 1.6.0 and was removed in\n       SciPy 1.9.0.\nreturn_sorted : bool, optional\n    Sorts returned indicies if True and does not sort them if False. If\n    None, does not sort single point queries, but does sort\n    multi-point queries which was the behavior before this option\n    was added.\n    .. versionadded:: 1.2.0\nreturn_length: bool, optional\n    Return the number of points inside the radius instead of a list\n    of the indices.\n    .. versionadded:: 1.3.0\nReturns\n-------\nresults : list or array of lists\n    If `x` is a single point, returns a list of the indices of the\n    neighbors of `x`. If `x` is an array of points, returns an object\n    array of shape tuple containing lists of neighbors.\nNotes\n-----\nIf you have many points whose neighbors you want to find, you may save\nsubstantial amounts of time by putting them in a cKDTree and using\nquery_ball_tree.\nExamples\n--------\n>>> import numpy as np\n>>> from scipy import spatial\n>>> x, y = np.mgrid[0:4, 0:4]\n>>> points = np.c_[x.ravel(), y.ravel()]\n>>> tree = spatial.cKDTree(points)\n>>> tree.query_ball_point([2, 0], 1)\n[4, 8, 9, 12]\nQuery multiple points and plot the results:\n>>> import matplotlib.pyplot as plt\n>>> points = np.asarray(points)\n>>> plt.plot(points[:,0], points[:,1], '.')\n>>> for results in tree.query_ball_point(([2, 0], [3, 3]), 1):\n...     nearby_points = points[results]\n...     plt.plot(nearby_points[:,0], nearby_points[:,1], 'o')\n>>> plt.margins(0.1, 0.1)\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c884299f3de47370d9bf1d4b7ac2a60fbb16a7acf41c02c99351ed67dfcedc05",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like, shape tuple + (self.m,)     The point or points to search for neighbors of. ",
                    "type": "",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "r",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like, float     The radius of points to return, shall broadcast to the length of x. ",
                    "type": "",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "p",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Which Minkowski p-norm to use.  Should be in the range [1, inf].     A finite large p may cause a ValueError if overflow can occur. ",
                    "type": "2.",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "eps",
                    "value": null,
                    "defaultValue": null,
                    "description": "nonnegative float, optional     Approximate search. Branches of the tree are not explored if their     nearest points are further than ``r / (1 + eps)``, and branches are     added in bulk if their furthest points are nearer than     ``r * (1 + eps)``. ",
                    "type": "0",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "workers",
                    "value": null,
                    "defaultValue": null,
                    "description": "int, optional     Number of jobs to schedule for parallel processing. If -1 is given     all processors are used. Default: 1.      .. versionchanged:: 1.9.0        The \"n_jobs\" argument was renamed \"workers\". The old name        \"n_jobs\" was deprecated in SciPy 1.6.0 and was removed in        SciPy 1.9.0.  ",
                    "type": "1",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "return_sorted",
                    "value": null,
                    "defaultValue": null,
                    "description": "bool, optional     Sorts returned indicies if True and does not sort them if False. If     None, does not sort single point queries, but does sort     multi-point queries which was the behavior before this option     was added.      .. versionadded:: 1.2.0 return_length: bool, optional     Return the number of points inside the radius instead of a list     of the indices.     .. versionadded:: 1.3.0 ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.cKDTree.query_ball_point",
                    "defaultValue": "scipy.spatial.cKDTree.query_ball_point",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cKDTree.query_ball_tree",
            "description": "\nFind all pairs of points between `self` and `other` whose distance is at most r\nParameters\n----------\nother : cKDTree instance\n    The tree containing points to search against.\nr : float\n    The maximum distance, has to be positive.\np : float, optional\n    Which Minkowski norm to use.  `p` has to meet the condition\n    ``1 <= p <= infinity``.\n    A finite large p may cause a ValueError if overflow can occur.\neps : float, optional\n    Approximate search.  Branches of the tree are not explored\n    if their nearest points are further than ``r/(1+eps)``, and\n    branches are added in bulk if their furthest points are nearer\n    than ``r * (1+eps)``.  `eps` has to be non-negative.\nReturns\n-------\nresults : list of lists\n    For each element ``self.data[i]`` of this tree, ``results[i]`` is a\n    list of the indices of its neighbors in ``other.data``.\nExamples\n--------\nYou can search all pairs of points between two kd-trees within a distance:\n>>> import matplotlib.pyplot as plt\n>>> import numpy as np\n>>> from scipy.spatial import cKDTree\n>>> rng = np.random.default_rng()\n>>> points1 = rng.random((15, 2))\n>>> points2 = rng.random((15, 2))\n>>> plt.figure(figsize=(6, 6))\n>>> plt.plot(points1[:, 0], points1[:, 1], \"xk\", markersize=14)\n>>> plt.plot(points2[:, 0], points2[:, 1], \"og\", markersize=14)\n>>> kd_tree1 = cKDTree(points1)\n>>> kd_tree2 = cKDTree(points2)\n>>> indexes = kd_tree1.query_ball_tree(kd_tree2, r=0.2)\n>>> for i in range(len(indexes)):\n...     for j in indexes[i]:\n...         plt.plot([points1[i, 0], points2[j, 0]],\n...             [points1[i, 1], points2[j, 1]], \"-r\")\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c404c4fe9daebe7fb8a64f061941db6d29e685c273c07b1c99d5bb54c0421794",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "other",
                    "value": null,
                    "defaultValue": null,
                    "description": "cKDTree instance     The tree containing points to search against. ",
                    "type": "",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "r",
                    "value": null,
                    "defaultValue": null,
                    "description": "float     The maximum distance, has to be positive. ",
                    "type": "",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "p",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Which Minkowski norm to use.  `p` has to meet the condition     ``1 <= p <= infinity``.     A finite large p may cause a ValueError if overflow can occur. ",
                    "type": "2.",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "eps",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Approximate search.  Branches of the tree are not explored     if their nearest points are further than ``r/(1+eps)``, and     branches are added in bulk if their furthest points are nearer     than ``r * (1+eps)``.  `eps` has to be non-negative. ",
                    "type": "0",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.cKDTree.query_ball_tree",
                    "defaultValue": "scipy.spatial.cKDTree.query_ball_tree",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cKDTree.query_pairs",
            "description": "\nFind all pairs of points in `self` whose distance is at most r.\nParameters\n----------\nr : positive float\n    The maximum distance.\np : float, optional\n    Which Minkowski norm to use.  ``p`` has to meet the condition\n    ``1 <= p <= infinity``.\n    A finite large p may cause a ValueError if overflow can occur.\neps : float, optional\n    Approximate search.  Branches of the tree are not explored\n    if their nearest points are further than ``r/(1+eps)``, and\n    branches are added in bulk if their furthest points are nearer\n    than ``r * (1+eps)``.  `eps` has to be non-negative.\noutput_type : string, optional\n    Choose the output container, 'set' or 'ndarray'. Default: 'set'\nReturns\n-------\nresults : set or ndarray\n    Set of pairs ``(i,j)``, with ``i < j``, for which the corresponding\n    positions are close. If output_type is 'ndarray', an ndarry is\n    returned instead of a set.\nExamples\n--------\nYou can search all pairs of points in a kd-tree within a distance:\n>>> import matplotlib.pyplot as plt\n>>> import numpy as np\n>>> from scipy.spatial import cKDTree\n>>> rng = np.random.default_rng()\n>>> points = rng.random((20, 2))\n>>> plt.figure(figsize=(6, 6))\n>>> plt.plot(points[:, 0], points[:, 1], \"xk\", markersize=14)\n>>> kd_tree = cKDTree(points)\n>>> pairs = kd_tree.query_pairs(r=0.2)\n>>> for (i, j) in pairs:\n...     plt.plot([points[i, 0], points[j, 0]],\n...             [points[i, 1], points[j, 1]], \"-r\")\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "0dcd1bacb249b6e6da41c19489548f3109b4a62aa475c57f42c60816d2000afa",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "r",
                    "value": null,
                    "defaultValue": null,
                    "description": "positive float     The maximum distance. ",
                    "type": "",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "p",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Which Minkowski norm to use.  ``p`` has to meet the condition     ``1 <= p <= infinity``.     A finite large p may cause a ValueError if overflow can occur. ",
                    "type": "2.",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "eps",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Approximate search.  Branches of the tree are not explored     if their nearest points are further than ``r/(1+eps)``, and     branches are added in bulk if their furthest points are nearer     than ``r * (1+eps)``.  `eps` has to be non-negative. ",
                    "type": "0",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_type",
                    "value": null,
                    "defaultValue": null,
                    "description": "string, optional     Choose the output container, 'set' or 'ndarray'. Default: 'set' ",
                    "type": "",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.cKDTree.query_pairs",
                    "defaultValue": "scipy.spatial.cKDTree.query_pairs",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cKDTree.sparse_distance_matrix",
            "description": "\nCompute a sparse distance matrix\nComputes a distance matrix between two cKDTrees, leaving as zero\nany distance greater than max_distance.\nParameters\n----------\nother : cKDTree\nmax_distance : positive float\np : float, 1<=p<=infinity\n    Which Minkowski p-norm to use.\n    A finite large p may cause a ValueError if overflow can occur.\noutput_type : string, optional\n    Which container to use for output data. Options: 'dok_matrix',\n    'coo_matrix', 'dict', or 'ndarray'. Default: 'dok_matrix'.\nReturns\n-------\nresult : dok_matrix, coo_matrix, dict or ndarray\n    Sparse matrix representing the results in \"dictionary of keys\"\n    format. If a dict is returned the keys are (i,j) tuples of indices.\n    If output_type is 'ndarray' a record array with fields 'i', 'j',\n    and 'v' is returned,\nExamples\n--------\nYou can compute a sparse distance matrix between two kd-trees:\n>>> import numpy as np\n>>> from scipy.spatial import cKDTree\n>>> rng = np.random.default_rng()\n>>> points1 = rng.random((5, 2))\n>>> points2 = rng.random((5, 2))\n>>> kd_tree1 = cKDTree(points1)\n>>> kd_tree2 = cKDTree(points2)\n>>> sdm = kd_tree1.sparse_distance_matrix(kd_tree2, 0.3)\n>>> sdm.toarray()\narray([[0.        , 0.        , 0.12295571, 0.        , 0.        ],\n   [0.        , 0.        , 0.        , 0.        , 0.        ],\n   [0.28942611, 0.        , 0.        , 0.2333084 , 0.        ],\n   [0.        , 0.        , 0.        , 0.        , 0.        ],\n   [0.24617575, 0.29571802, 0.26836782, 0.        , 0.        ]])\nYou can check distances above the `max_distance` are zeros:\n>>> from scipy.spatial import distance_matrix\n>>> distance_matrix(points1, points2)\narray([[0.56906522, 0.39923701, 0.12295571, 0.8658745 , 0.79428925],\n   [0.37327919, 0.7225693 , 0.87665969, 0.32580855, 0.75679479],\n   [0.28942611, 0.30088013, 0.6395831 , 0.2333084 , 0.33630734],\n   [0.31994999, 0.72658602, 0.71124834, 0.55396483, 0.90785663],\n   [0.24617575, 0.29571802, 0.26836782, 0.57714465, 0.6473269 ]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b18ea0e1857e2d8a6ab6b9e56cc327dd1a99eb3f4cce72741cfc70c7f2a899d1",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "other",
                    "value": null,
                    "defaultValue": null,
                    "description": "cKDTree  ",
                    "type": "",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "max_distance",
                    "value": null,
                    "defaultValue": null,
                    "description": "positive float  ",
                    "type": "",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "p",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, 1<=p<=infinity     Which Minkowski p-norm to use.     A finite large p may cause a ValueError if overflow can occur.  ",
                    "type": "2.",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.cKDTree.sparse_distance_matrix",
                    "defaultValue": "scipy.spatial.cKDTree.sparse_distance_matrix",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.spatial.convex_hull_plot_2d",
            "description": "Plot the given convex hull diagram in 2-D",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c84b377b1ed7f1ce32728e15e6586eccc36911fca8766a2003d6d55e870a7374",
            "fields": [
                {
                    "name": "hull",
                    "value": null,
                    "defaultValue": null,
                    "description": "scipy.spatial.ConvexHull instance     Convex hull to plot ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "ax",
                    "value": null,
                    "defaultValue": null,
                    "description": "matplotlib.axes.Axes instance, optional     Axes to plot on ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._plotutils.convex_hull_plot_2d",
                    "defaultValue": "scipy.spatial._plotutils.convex_hull_plot_2d",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.spatial.delaunay_plot_2d",
            "description": "Plot the given Delaunay triangulation in 2-D",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "0fc9a3756c92da735f36dcf7799d0417dd7b6ba536d9b414e82ee71467577533",
            "fields": [
                {
                    "name": "tri",
                    "value": null,
                    "defaultValue": null,
                    "description": "scipy.spatial.Delaunay instance     Triangulation to plot ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "ax",
                    "value": null,
                    "defaultValue": null,
                    "description": "matplotlib.axes.Axes instance, optional     Axes to plot on ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._plotutils.delaunay_plot_2d",
                    "defaultValue": "scipy.spatial._plotutils.delaunay_plot_2d",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.spatial.distance_matrix",
            "description": "Compute the distance matrix.\n    \n    Returns the matrix of all pair-wise distances.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "0e24eb0bd8652452053c83febc8650de4fc75e952e1d2df771267652c368841f",
            "fields": [
                {
                    "name": "x",
                    "value": null,
                    "defaultValue": null,
                    "description": "(M, K) array_like     Matrix of M vectors in K dimensions. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "y",
                    "value": null,
                    "defaultValue": null,
                    "description": "(N, K) array_like     Matrix of N vectors in K dimensions. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "p",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, 1 <= p <= infinity     Which Minkowski p-norm to use. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "threshold",
                    "value": null,
                    "defaultValue": null,
                    "description": "positive int     If ``M * N * K`` > `threshold`, algorithm uses a Python loop instead     of large temporary arrays. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._kdtree.distance_matrix",
                    "defaultValue": "scipy.spatial._kdtree.distance_matrix",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.spatial.geometric_slerp",
            "description": "Geometric spherical linear interpolation.\n    \n    The interpolation occurs along a unit-radius\n    great circle arc in arbitrary dimensional space.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "95fba56f3153a66518302a735ccd22670047b2e508a509328c264df842fbb13c",
            "fields": [
                {
                    "name": "start",
                    "value": null,
                    "defaultValue": null,
                    "description": "(n_dimensions, ) array-like     Single n-dimensional input coordinate in a 1-D array-like     object. `n` must be greater than 1. ",
                    "type": "npt.ArrayLike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "end",
                    "value": null,
                    "defaultValue": null,
                    "description": "(n_dimensions, ) array-like     Single n-dimensional input coordinate in a 1-D array-like     object. `n` must be greater than 1. ",
                    "type": "npt.ArrayLike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "t",
                    "value": null,
                    "defaultValue": null,
                    "description": "float or (n_points,) 1D array-like     A float or 1D array-like of doubles representing interpolation     parameters, with values required in the inclusive interval     between 0 and 1. A common approach is to generate the array     with ``np.linspace(0, 1, n_pts)`` for linearly spaced points.     Ascending, descending, and scrambled orders are permitted. ",
                    "type": "npt.ArrayLike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "tol",
                    "value": null,
                    "defaultValue": null,
                    "description": "float     The absolute tolerance for determining if the start and end     coordinates are antipodes. ",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._geometric_slerp.geometric_slerp",
                    "defaultValue": "scipy.spatial._geometric_slerp.geometric_slerp",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.spatial.minkowski_distance",
            "description": "Compute the L**p distance between two arrays.\n    \n    The last dimensions of `x` and `y` must be the same length.  Any\n    other dimensions must be compatible for broadcasting.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "446464e1a931cf339ff512bf0fb997995842aad52b7d182274b783abb7fcc5e8",
            "fields": [
                {
                    "name": "x",
                    "value": null,
                    "defaultValue": null,
                    "description": "(..., K) array_like     Input array. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "y",
                    "value": null,
                    "defaultValue": null,
                    "description": "(..., K) array_like     Input array. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "p",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, 1 <= p <= infinity     Which Minkowski p-norm to use. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._kdtree.minkowski_distance",
                    "defaultValue": "scipy.spatial._kdtree.minkowski_distance",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.spatial.minkowski_distance_p",
            "description": "Compute the pth power of the L**p distance between two arrays.\n    \n    For efficiency, this function computes the L**p distance but does\n    not extract the pth root. If `p` is 1 or infinity, this is equal to\n    the actual L**p distance.\n    \n    The last dimensions of `x` and `y` must be the same length.  Any\n    other dimensions must be compatible for broadcasting.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "308719802b4ae47293baa4f83bf1aadb0145681886f7c3823c230a81e7f4e94f",
            "fields": [
                {
                    "name": "x",
                    "value": null,
                    "defaultValue": null,
                    "description": "(..., K) array_like     Input array. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "y",
                    "value": null,
                    "defaultValue": null,
                    "description": "(..., K) array_like     Input array. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "p",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, 1 <= p <= infinity     Which Minkowski p-norm to use. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._kdtree.minkowski_distance_p",
                    "defaultValue": "scipy.spatial._kdtree.minkowski_distance_p",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.spatial.procrustes",
            "description": "Procrustes analysis, a similarity test for two data sets.\n    \n    Each input matrix is a set of points or vectors (the rows of the matrix).\n    The dimension of the space is the number of columns of each matrix. Given\n    two identically sized matrices, procrustes standardizes both such that:\n    \n    - :math:`tr(AA^{T}) = 1`.\n    \n    - Both sets of points are centered around the origin.\n    \n    Procrustes ([1]_, [2]_) then applies the optimal transform to the second\n    matrix (including scaling/dilation, rotations, and reflections) to minimize\n    :math:`M^{2}=\\sum(data1-data2)^{2}`, or the sum of the squares of the\n    pointwise differences between the two input datasets.\n    \n    This function was not designed to handle datasets with different numbers of\n    datapoints (rows).  If two data sets have different dimensionality\n    (different number of columns), simply add columns of zeros to the smaller\n    of the two.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "42c483d6654c417f8dfbdd2f26bd9e8f905db79a3dbac461d5c45d662c9c03e5",
            "fields": [
                {
                    "name": "data1",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     Matrix, n rows represent points in k (columns) space `data1` is the     reference data, after it is standardised, the data from `data2` will be     transformed to fit the pattern in `data1` (must have >1 unique points). ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "data2",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     n rows of data in k space to be fit to `data1`.  Must be the  same     shape ``(numrows, numcols)`` as data1 (must have >1 unique points). ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._procrustes.procrustes",
                    "defaultValue": "scipy.spatial._procrustes.procrustes",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.spatial.tsearch",
            "description": "\nFind simplices containing the given points. This function does the\nsame thing as `Delaunay.find_simplex`.\nParameters\n----------\ntri : DelaunayInfo\n    Delaunay triangulation\nxi : ndarray of double, shape (..., ndim)\n    Points to locate\nReturns\n-------\ni : ndarray of int, same shape as `xi`\n    Indices of simplices containing each point.\n    Points outside the triangulation get the value -1.\nSee Also\n--------\nDelaunay.find_simplex\nNotes\n-----\n.. versionadded:: 0.9\nExamples\n--------\n>>> import numpy as np\n>>> import matplotlib.pyplot as plt\n>>> from scipy.spatial import Delaunay, delaunay_plot_2d, tsearch\n>>> rng = np.random.default_rng()\nThe Delaunay triangulation of a set of random points:\n>>> pts = rng.random((20, 2))\n>>> tri = Delaunay(pts)\n>>> _ = delaunay_plot_2d(tri)\nFind the simplices containing a given set of points:\n>>> loc = rng.uniform(0.2, 0.8, (5, 2))\n>>> s = tsearch(tri, loc)\n>>> plt.triplot(pts[:, 0], pts[:, 1], tri.simplices[s], 'b-', mask=s==-1)\n>>> plt.scatter(loc[:, 0], loc[:, 1], c='r', marker='x')\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "87207cee8025acbfd73e9cf4730b261efe884f89dba8e1a15576b7950cc40eea",
            "fields": [
                {
                    "name": "tri",
                    "value": null,
                    "defaultValue": null,
                    "description": "DelaunayInfo     Delaunay triangulation ",
                    "type": "",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "xi",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray of double, shape (..., ndim)     Points to locate ",
                    "type": "",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._qhull.tsearch",
                    "defaultValue": "scipy.spatial._qhull.tsearch",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.spatial.voronoi_plot_2d",
            "description": "Plot the given Voronoi diagram in 2-D",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a68c9f54877d5e06dd51d677d58f49a7fab8c5a20aa06d3dbf2758bf4e3449c7",
            "fields": [
                {
                    "name": "vor",
                    "value": null,
                    "defaultValue": null,
                    "description": "scipy.spatial.Voronoi instance     Diagram to plot ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "ax",
                    "value": null,
                    "defaultValue": null,
                    "description": "matplotlib.axes.Axes instance, optional     Axes to plot on ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "kw",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._plotutils.voronoi_plot_2d",
                    "defaultValue": "scipy.spatial._plotutils.voronoi_plot_2d",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "CDistMetricWrapper.__init__",
            "description": "No description found\nCDistMetricWrapper(metric_name: str)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d61a77dbfc5be0cff819934965c3827dc2e7649deda57bef7bb2d9aeb5a29808",
            "fields": [
                {
                    "name": "metric_name",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.distance.CDistMetricWrapper.__init__",
                    "defaultValue": "scipy.spatial.distance.CDistMetricWrapper.__init__",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "CDistWeightedMetricWrapper.__init__",
            "description": "No description found\nCDistWeightedMetricWrapper(metric_name: str, weighted_metric: str)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e34b66ed66b4912a01b55324710ea00cc27339b39eeb6a0e5e1148cb0f652e43",
            "fields": [
                {
                    "name": "metric_name",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "weighted_metric",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.distance.CDistWeightedMetricWrapper.__init__",
                    "defaultValue": "scipy.spatial.distance.CDistWeightedMetricWrapper.__init__",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "MetricInfo.__init__",
            "description": "No description found\nMetricInfo(canonical_name: str, aka: set[str], dist_func: Callable, cdist_func: Callable, pdist_func: Callable, validator: Optional[Callable] = None, types: list[str] = <factory>, requires_contiguous_out: bool = True)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9237a738fdf66511c0e7d4bb592c48ff86b753d6fe819f099fcc3cca74b31a09",
            "fields": [
                {
                    "name": "canonical_name",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "aka",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "set",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dist_func",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "Callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "cdist_func",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "Callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "pdist_func",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "Callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "validator",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "Optional",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "types",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "list",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "requires_contiguous_out",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.distance.MetricInfo.__init__",
                    "defaultValue": "scipy.spatial.distance.MetricInfo.__init__",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "PDistMetricWrapper.__init__",
            "description": "No description found\nPDistMetricWrapper(metric_name: str)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a5c66969a09064f2ffba1896e2876bc7b43b48b58c2d2d9610ae0f6ecf4117ad",
            "fields": [
                {
                    "name": "metric_name",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.distance.PDistMetricWrapper.__init__",
                    "defaultValue": "scipy.spatial.distance.PDistMetricWrapper.__init__",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "PDistWeightedMetricWrapper.__init__",
            "description": "No description found\nPDistWeightedMetricWrapper(metric_name: str, weighted_metric: str)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c3a5507f2d2e5f509b56126198a3edf9a855b3e2d33593d24349e8146756f49a",
            "fields": [
                {
                    "name": "metric_name",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "weighted_metric",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.distance.PDistWeightedMetricWrapper.__init__",
                    "defaultValue": "scipy.spatial.distance.PDistWeightedMetricWrapper.__init__",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Rotation.__init__",
            "description": "No description found\nRotation in 3 dimensions.\n    \n    This class provides an interface to initialize from and represent rotations\n    with:\n    \n    - Quaternions\n    - Rotation Matrices\n    - Rotation Vectors\n    - Modified Rodrigues Parameters\n    - Euler Angles\n    \n    The following operations on rotations are supported:\n    \n    - Application on vectors\n    - Rotation Composition\n    - Rotation Inversion\n    - Rotation Indexing\n    \n    Indexing within a rotation is supported since multiple rotation transforms\n    can be stored within a single `Rotation` instance.\n    \n    To create `Rotation` objects use ``from_...`` methods (see examples below).\n    ``Rotation(...)`` is not supposed to be instantiated directly.\n    \n    Attributes\n    ----------\n    single\n    \n    Methods\n    -------\n    __len__\n    from_quat\n    from_matrix\n    from_rotvec\n    from_mrp\n    from_euler\n    as_quat\n    as_matrix\n    as_rotvec\n    as_mrp\n    as_euler\n    concatenate\n    apply\n    __mul__\n    inv\n    magnitude\n    mean\n    reduce\n    create_group\n    __getitem__\n    identity\n    random\n    align_vectors\n    \n    See Also\n    --------\n    Slerp\n    \n    Notes\n    -----\n    .. versionadded:: 1.2.0\n    \n    Examples\n    --------\n    >>> from scipy.spatial.transform import Rotation as R\n    >>> import numpy as np\n    \n    A `Rotation` instance can be initialized in any of the above formats and\n    converted to any of the others. The underlying object is independent of the\n    representation used for initialization.\n    \n    Consider a counter-clockwise rotation of 90 degrees about the z-axis. This\n    corresponds to the following quaternion (in scalar-last format):\n    \n    >>> r = R.from_quat([0, 0, np.sin(np.pi/4), np.cos(np.pi/4)])\n    \n    The rotation can be expressed in any of the other formats:\n    \n    >>> r.as_matrix()\n    array([[ 2.22044605e-16, -1.00000000e+00,  0.00000000e+00],\n    [ 1.00000000e+00,  2.22044605e-16,  0.00000000e+00],\n    [ 0.00000000e+00,  0.00000000e+00,  1.00000000e+00]])\n    >>> r.as_rotvec()\n    array([0.        , 0.        , 1.57079633])\n    >>> r.as_euler('zyx', degrees=True)\n    array([90.,  0.,  0.])\n    \n    The same rotation can be initialized using a rotation matrix:\n    \n    >>> r = R.from_matrix([[0, -1, 0],\n    ...                    [1, 0, 0],\n    ...                    [0, 0, 1]])\n    \n    Representation in other formats:\n    \n    >>> r.as_quat()\n    array([0.        , 0.        , 0.70710678, 0.70710678])\n    >>> r.as_rotvec()\n    array([0.        , 0.        , 1.57079633])\n    >>> r.as_euler('zyx', degrees=True)\n    array([90.,  0.,  0.])\n    \n    The rotation vector corresponding to this rotation is given by:\n    \n    >>> r = R.from_rotvec(np.pi/2 * np.array([0, 0, 1]))\n    \n    Representation in other formats:\n    \n    >>> r.as_quat()\n    array([0.        , 0.        , 0.70710678, 0.70710678])\n    >>> r.as_matrix()\n    array([[ 2.22044605e-16, -1.00000000e+00,  0.00000000e+00],\n           [ 1.00000000e+00,  2.22044605e-16,  0.00000000e+00],\n           [ 0.00000000e+00,  0.00000000e+00,  1.00000000e+00]])\n    >>> r.as_euler('zyx', degrees=True)\n    array([90.,  0.,  0.])\n    \n    The ``from_euler`` method is quite flexible in the range of input formats\n    it supports. Here we initialize a single rotation about a single axis:\n    \n    >>> r = R.from_euler('z', 90, degrees=True)\n    \n    Again, the object is representation independent and can be converted to any\n    other format:\n    \n    >>> r.as_quat()\n    array([0.        , 0.        , 0.70710678, 0.70710678])\n    >>> r.as_matrix()\n    array([[ 2.22044605e-16, -1.00000000e+00,  0.00000000e+00],\n           [ 1.00000000e+00,  2.22044605e-16,  0.00000000e+00],\n           [ 0.00000000e+00,  0.00000000e+00,  1.00000000e+00]])\n    >>> r.as_rotvec()\n    array([0.        , 0.        , 1.57079633])\n    \n    It is also possible to initialize multiple rotations in a single instance\n    using any of the ``from_...`` functions. Here we initialize a stack of 3\n    rotations using the ``from_euler`` method:\n    \n    >>> r = R.from_euler('zyx', [\n    ... [90, 0, 0],\n    ... [0, 45, 0],\n    ... [45, 60, 30]], degrees=True)\n    \n    The other representations also now return a stack of 3 rotations. For\n    example:\n    \n    >>> r.as_quat()\n    array([[0.        , 0.        , 0.70710678, 0.70710678],\n           [0.        , 0.38268343, 0.        , 0.92387953],\n           [0.39190384, 0.36042341, 0.43967974, 0.72331741]])\n    \n    Applying the above rotations onto a vector:\n    \n    >>> v = [1, 2, 3]\n    >>> r.apply(v)\n    array([[-2.        ,  1.        ,  3.        ],\n           [ 2.82842712,  2.        ,  1.41421356],\n           [ 2.24452282,  0.78093109,  2.89002836]])\n    \n    A `Rotation` instance can be indexed and sliced as if it were a single\n    1D array or list:\n    \n    >>> r.as_quat()\n    array([[0.        , 0.        , 0.70710678, 0.70710678],\n           [0.        , 0.38268343, 0.        , 0.92387953],\n           [0.39190384, 0.36042341, 0.43967974, 0.72331741]])\n    >>> p = r[0]\n    >>> p.as_matrix()\n    array([[ 2.22044605e-16, -1.00000000e+00,  0.00000000e+00],\n           [ 1.00000000e+00,  2.22044605e-16,  0.00000000e+00],\n           [ 0.00000000e+00,  0.00000000e+00,  1.00000000e+00]])\n    >>> q = r[1:3]\n    >>> q.as_quat()\n    array([[0.        , 0.38268343, 0.        , 0.92387953],\n           [0.39190384, 0.36042341, 0.43967974, 0.72331741]])\n    \n    In fact it can be converted to numpy.array:\n    \n    >>> r_array = np.asarray(r)\n    >>> r_array.shape\n    (3,)\n    >>> r_array[0].as_matrix()\n    array([[ 2.22044605e-16, -1.00000000e+00,  0.00000000e+00],\n           [ 1.00000000e+00,  2.22044605e-16,  0.00000000e+00],\n           [ 0.00000000e+00,  0.00000000e+00,  1.00000000e+00]])\n    \n    Multiple rotations can be composed using the ``*`` operator:\n    \n    >>> r1 = R.from_euler('z', 90, degrees=True)\n    >>> r2 = R.from_rotvec([np.pi/4, 0, 0])\n    >>> v = [1, 2, 3]\n    >>> r2.apply(r1.apply(v))\n    array([-2.        , -1.41421356,  2.82842712])\n    >>> r3 = r2 * r1 # Note the order\n    >>> r3.apply(v)\n    array([-2.        , -1.41421356,  2.82842712])\n    \n    Finally, it is also possible to invert rotations:\n    \n    >>> r1 = R.from_euler('z', [90, 45], degrees=True)\n    >>> r2 = r1.inv()\n    >>> r2.as_euler('zyx', degrees=True)\n    array([[-90.,   0.,   0.],\n           [-45.,   0.,   0.]])\n    \n    The following function can be used to plot rotations with Matplotlib by\n    showing how they transform the standard x, y, z coordinate axes:\n    \n    >>> import matplotlib.pyplot as plt\n    \n    >>> def plot_rotated_axes(ax, r, name=None, offset=(0, 0, 0), scale=1):\n    ...     colors = (\"#FF6666\", \"#005533\", \"#1199EE\")  # Colorblind-safe RGB\n    ...     loc = np.array([offset, offset])\n    ...     for i, (axis, c) in enumerate(zip((ax.xaxis, ax.yaxis, ax.zaxis),\n    ...                                       colors)):\n    ...         axlabel = axis.axis_name\n    ...         axis.set_label_text(axlabel)\n    ...         axis.label.set_color(c)\n    ...         axis.line.set_color(c)\n    ...         axis.set_tick_params(colors=c)\n    ...         line = np.zeros((2, 3))\n    ...         line[1, i] = scale\n    ...         line_rot = r.apply(line)\n    ...         line_plot = line_rot + loc\n    ...         ax.plot(line_plot[:, 0], line_plot[:, 1], line_plot[:, 2], c)\n    ...         text_loc = line[1]*1.2\n    ...         text_loc_rot = r.apply(text_loc)\n    ...         text_plot = text_loc_rot + loc[0]\n    ...         ax.text(*text_plot, axlabel.upper(), color=c,\n    ...                 va=\"center\", ha=\"center\")\n    ...     ax.text(*offset, name, color=\"k\", va=\"center\", ha=\"center\",\n    ...             bbox={\"fc\": \"w\", \"alpha\": 0.8, \"boxstyle\": \"circle\"})\n    \n    Create three rotations - the identity and two Euler rotations using\n    intrinsic and extrinsic conventions:\n    \n    >>> r0 = R.identity()\n    >>> r1 = R.from_euler(\"ZYX\", [90, -30, 0], degrees=True)  # intrinsic\n    >>> r2 = R.from_euler(\"zyx\", [90, -30, 0], degrees=True)  # extrinsic\n    \n    Add all three rotations to a single plot:\n    \n    >>> ax = plt.figure().add_subplot(projection=\"3d\", proj_type=\"ortho\")\n    >>> plot_rotated_axes(ax, r0, name=\"r0\", offset=(0, 0, 0))\n    >>> plot_rotated_axes(ax, r1, name=\"r1\", offset=(3, 0, 0))\n    >>> plot_rotated_axes(ax, r2, name=\"r2\", offset=(6, 0, 0))\n    >>> _ = ax.annotate(\n    ...     \"r0: Identity Rotation\\n\"\n    ...     \"r1: Intrinsic Euler Rotation (ZYX)\\n\"\n    ...     \"r2: Extrinsic Euler Rotation (zyx)\",\n    ...     xy=(0.6, 0.7), xycoords=\"axes fraction\", ha=\"left\"\n    ... )\n    >>> ax.set(xlim=(-1.25, 7.25), ylim=(-1.25, 1.25), zlim=(-1.25, 1.25))\n    >>> ax.set(xticks=range(-1, 8), yticks=[-1, 0, 1], zticks=[-1, 0, 1])\n    >>> ax.set_aspect(\"equal\", adjustable=\"box\")\n    >>> ax.figure.set_size_inches(6, 5)\n    >>> plt.tight_layout()\n    \n    Show the plot:\n    \n    >>> plt.show()\n    \n    These examples serve as an overview into the `Rotation` class and highlight\n    major functionalities. For more thorough examples of the range of input and\n    output formats supported, consult the individual method's examples.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2811c96086ccaeaa96040f7bdb9ad577131ed4912df89414f5634c150d267fb3",
            "fields": [
                {
                    "name": "args",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "kwargs",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.transform.Rotation.__init__",
                    "defaultValue": "scipy.spatial.transform.Rotation.__init__",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Rotation.align_vectors",
            "description": "Estimate a rotation to optimally align two sets of vectors.\n        Find a rotation between frames A and B which best aligns a set of\n        vectors `a` and `b` observed in these frames. The following loss\n        function is minimized to solve for the rotation matrix\n        :math:`C`:\n        .. math::\n            L(C) = \\frac{1}{2} \\sum_{i = 1}^{n} w_i \\lVert \\mathbf{a}_i -\n            C \\mathbf{b}_i \\rVert^2 ,\n        where :math:`w_i`'s are the `weights` corresponding to each vector.\n        The rotation is estimated with Kabsch algorithm [1]_.\n        Parameters\n        ----------\n        a : array_like, shape (N, 3)\n            Vector components observed in initial frame A. Each row of `a`\n            denotes a vector.\n        b : array_like, shape (N, 3)\n            Vector components observed in another frame B. Each row of `b`\n            denotes a vector.\n        weights : array_like shape (N,), optional\n            Weights describing the relative importance of the vector\n            observations. If None (default), then all values in `weights` are\n            assumed to be 1.\n        return_sensitivity : bool, optional\n            Whether to return the sensitivity matrix. See Notes for details.\n            Default is False.\n        Returns\n        -------\n        estimated_rotation : `Rotation` instance\n            Best estimate of the rotation that transforms `b` to `a`.\n        rssd : float\n            Square root of the weighted sum of the squared distances between\n            the given sets of vectors after alignment. It is equal to\n            ``sqrt(2 * minimum_loss)``, where ``minimum_loss`` is the loss\n            function evaluated for the found optimal rotation.\n        sensitivity_matrix : ndarray, shape (3, 3)\n            Sensitivity matrix of the estimated rotation estimate as explained\n            in Notes. Returned only when `return_sensitivity` is True.\n        Notes\n        -----\n        This method can also compute the sensitivity of the estimated rotation\n        to small perturbations of the vector measurements. Specifically we\n        consider the rotation estimate error as a small rotation vector of\n        frame A. The sensitivity matrix is proportional to the covariance of\n        this rotation vector assuming that the vectors in `a` was measured with\n        errors significantly less than their lengths. To get the true\n        covariance matrix, the returned sensitivity matrix must be multiplied\n        by harmonic mean [3]_ of variance in each observation. Note that\n        `weights` are supposed to be inversely proportional to the observation\n        variances to get consistent results. For example, if all vectors are\n        measured with the same accuracy of 0.01 (`weights` must be all equal),\n        then you should multiple the sensitivity matrix by 0.01**2 to get the\n        covariance.\n        Refer to [2]_ for more rigorous discussion of the covariance\n        estimation.\n        References\n        ----------\n        .. [1] https://en.wikipedia.org/wiki/Kabsch_algorithm\n        .. [2] F. Landis Markley,\n                \"Attitude determination using vector observations: a fast\n                optimal matrix algorithm\", Journal of Astronautical Sciences,\n                Vol. 41, No.2, 1993, pp. 261-280.\n        .. [3] https://en.wikipedia.org/wiki/Harmonic_mean\n        ",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "499fad3e0038d55183919649624afde3b8c80edde777fbf997540db4387e38d4",
            "fields": [
                {
                    "name": "type",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "cls",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "a",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like, shape (N, 3)     Vector components observed in initial frame A. Each row of `a`     denotes a vector. ",
                    "type": "",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "b",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like, shape (N, 3)     Vector components observed in another frame B. Each row of `b`     denotes a vector. ",
                    "type": "",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "weights",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like shape (N,), optional     Weights describing the relative importance of the vector     observations. If None (default), then all values in `weights` are     assumed to be 1. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "return_sensitivity",
                    "value": null,
                    "defaultValue": null,
                    "description": "bool, optional     Whether to return the sensitivity matrix. See Notes for details.     Default is False. ",
                    "type": "False",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.transform.Rotation.align_vectors",
                    "defaultValue": "scipy.spatial.transform.Rotation.align_vectors",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Rotation.apply",
            "description": "Apply this rotation to a set of vectors.\n        If the original frame rotates to the final frame by this rotation, then\n        its application to a vector can be seen in two ways:\n            - As a projection of vector components expressed in the final frame\n              to the original frame.\n            - As the physical rotation of a vector being glued to the original\n              frame as it rotates. In this case the vector components are\n              expressed in the original frame before and after the rotation.\n        In terms of rotation matricies, this application is the same as\n        ``self.as_matrix().dot(vectors)``.\n        Parameters\n        ----------\n        vectors : array_like, shape (3,) or (N, 3)\n            Each `vectors[i]` represents a vector in 3D space. A single vector\n            can either be specified with shape `(3, )` or `(1, 3)`. The number\n            of rotations and number of vectors given must follow standard numpy\n            broadcasting rules: either one of them equals unity or they both\n            equal each other.\n        inverse : boolean, optional\n            If True then the inverse of the rotation(s) is applied to the input\n            vectors. Default is False.\n        Returns\n        -------\n        rotated_vectors : ndarray, shape (3,) or (N, 3)\n            Result of applying rotation on input vectors.\n            Shape depends on the following cases:\n                - If object contains a single rotation (as opposed to a stack\n                  with a single rotation) and a single vector is specified with\n                  shape ``(3,)``, then `rotated_vectors` has shape ``(3,)``.\n                - In all other cases, `rotated_vectors` has shape ``(N, 3)``,\n                  where ``N`` is either the number of rotations or vectors.\n        Examples\n        --------\n        >>> from scipy.spatial.transform import Rotation as R\n        >>> import numpy as np\n        Single rotation applied on a single vector:\n        >>> vector = np.array([1, 0, 0])\n        >>> r = R.from_rotvec([0, 0, np.pi/2])\n        >>> r.as_matrix()\n        array([[ 2.22044605e-16, -1.00000000e+00,  0.00000000e+00],\n               [ 1.00000000e+00,  2.22044605e-16,  0.00000000e+00],\n               [ 0.00000000e+00,  0.00000000e+00,  1.00000000e+00]])\n        >>> r.apply(vector)\n        array([2.22044605e-16, 1.00000000e+00, 0.00000000e+00])\n        >>> r.apply(vector).shape\n        (3,)\n        Single rotation applied on multiple vectors:\n        >>> vectors = np.array([\n        ... [1, 0, 0],\n        ... [1, 2, 3]])\n        >>> r = R.from_rotvec([0, 0, np.pi/4])\n        >>> r.as_matrix()\n        array([[ 0.70710678, -0.70710678,  0.        ],\n               [ 0.70710678,  0.70710678,  0.        ],\n               [ 0.        ,  0.        ,  1.        ]])\n        >>> r.apply(vectors)\n        array([[ 0.70710678,  0.70710678,  0.        ],\n               [-0.70710678,  2.12132034,  3.        ]])\n        >>> r.apply(vectors).shape\n        (2, 3)\n        Multiple rotations on a single vector:\n        >>> r = R.from_rotvec([[0, 0, np.pi/4], [np.pi/2, 0, 0]])\n        >>> vector = np.array([1,2,3])\n        >>> r.as_matrix()\n        array([[[ 7.07106781e-01, -7.07106781e-01,  0.00000000e+00],\n                [ 7.07106781e-01,  7.07106781e-01,  0.00000000e+00],\n                [ 0.00000000e+00,  0.00000000e+00,  1.00000000e+00]],\n               [[ 1.00000000e+00,  0.00000000e+00,  0.00000000e+00],\n                [ 0.00000000e+00,  2.22044605e-16, -1.00000000e+00],\n                [ 0.00000000e+00,  1.00000000e+00,  2.22044605e-16]]])\n        >>> r.apply(vector)\n        array([[-0.70710678,  2.12132034,  3.        ],\n               [ 1.        , -3.        ,  2.        ]])\n        >>> r.apply(vector).shape\n        (2, 3)\n        Multiple rotations on multiple vectors. Each rotation is applied on the\n        corresponding vector:\n        >>> r = R.from_euler('zxy', [\n        ... [0, 0, 90],\n        ... [45, 30, 60]], degrees=True)\n        >>> vectors = [\n        ... [1, 2, 3],\n        ... [1, 0, -1]]\n        >>> r.apply(vectors)\n        array([[ 3.        ,  2.        , -1.        ],\n               [-0.09026039,  1.11237244, -0.86860844]])\n        >>> r.apply(vectors).shape\n        (2, 3)\n        It is also possible to apply the inverse rotation:\n        >>> r = R.from_euler('zxy', [\n        ... [0, 0, 90],\n        ... [45, 30, 60]], degrees=True)\n        >>> vectors = [\n        ... [1, 2, 3],\n        ... [1, 0, -1]]\n        >>> r.apply(vectors, inverse=True)\n        array([[-3.        ,  2.        ,  1.        ],\n               [ 1.09533535, -0.8365163 ,  0.3169873 ]])\n        ",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ee63309b6acca7cb9317d5b8ba3b0e0b860b36613d00d82b4f6d20081f999631",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "vectors",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like, shape (3,) or (N, 3)     Each `vectors[i]` represents a vector in 3D space. A single vector     can either be specified with shape `(3, )` or `(1, 3)`. The number     of rotations and number of vectors given must follow standard numpy     broadcasting rules: either one of them equals unity or they both     equal each other. ",
                    "type": "",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "inverse",
                    "value": null,
                    "defaultValue": null,
                    "description": "boolean, optional     If True then the inverse of the rotation(s) is applied to the input     vectors. Default is False. ",
                    "type": "False",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.transform.Rotation.apply",
                    "defaultValue": "scipy.spatial.transform.Rotation.apply",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Rotation.as_euler",
            "description": "Represent as Euler angles.\n        Any orientation can be expressed as a composition of 3 elementary\n        rotations. Once the axis sequence has been chosen, Euler angles define\n        the angle of rotation around each respective axis [1]_.\n        The algorithm from [2]_ has been used to calculate Euler angles for the \n        rotation about a given sequence of axes.\n        Euler angles suffer from the problem of gimbal lock [3]_, where the\n        representation loses a degree of freedom and it is not possible to\n        determine the first and third angles uniquely. In this case,\n        a warning is raised, and the third angle is set to zero. Note however\n        that the returned angles still represent the correct rotation.\n        Parameters\n        ----------\n        seq : string, length 3\n            3 characters belonging to the set {'X', 'Y', 'Z'} for intrinsic\n            rotations, or {'x', 'y', 'z'} for extrinsic rotations [1]_.\n            Adjacent axes cannot be the same.\n            Extrinsic and intrinsic rotations cannot be mixed in one function\n            call.\n        degrees : boolean, optional\n            Returned angles are in degrees if this flag is True, else they are\n            in radians. Default is False.\n        Returns\n        -------\n        angles : ndarray, shape (3,) or (N, 3)\n            Shape depends on shape of inputs used to initialize object.\n            The returned angles are in the range:\n            - First angle belongs to [-180, 180] degrees (both inclusive)\n            - Third angle belongs to [-180, 180] degrees (both inclusive)\n            - Second angle belongs to:\n                - [-90, 90] degrees if all axes are different (like xyz)\n                - [0, 180] degrees if first and third axes are the same\n                  (like zxz)\n        References\n        ----------\n        .. [1] https://en.wikipedia.org/wiki/Euler_angles#Definition_by_intrinsic_rotations\n        .. [2] Bernardes E, Viollet S (2022) Quaternion to Euler angles \n               conversion: A direct, general and computationally efficient \n               method. PLoS ONE 17(11): e0276302. \n               https://doi.org/10.1371/journal.pone.0276302\n        .. [3] https://en.wikipedia.org/wiki/Gimbal_lock#In_applied_mathematics\n        Examples\n        --------\n        >>> from scipy.spatial.transform import Rotation as R\n        >>> import numpy as np\n        Represent a single rotation:\n        >>> r = R.from_rotvec([0, 0, np.pi/2])\n        >>> r.as_euler('zxy', degrees=True)\n        array([90.,  0.,  0.])\n        >>> r.as_euler('zxy', degrees=True).shape\n        (3,)\n        Represent a stack of single rotation:\n        >>> r = R.from_rotvec([[0, 0, np.pi/2]])\n        >>> r.as_euler('zxy', degrees=True)\n        array([[90.,  0.,  0.]])\n        >>> r.as_euler('zxy', degrees=True).shape\n        (1, 3)\n        Represent multiple rotations in a single object:\n        >>> r = R.from_rotvec([\n        ... [0, 0, np.pi/2],\n        ... [0, -np.pi/3, 0],\n        ... [np.pi/4, 0, 0]])\n        >>> r.as_euler('zxy', degrees=True)\n        array([[ 90.,   0.,   0.],\n               [  0.,   0., -60.],\n               [  0.,  45.,   0.]])\n        >>> r.as_euler('zxy', degrees=True).shape\n        (3, 3)\n        ",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f4651c505298608a1857693f190e9fe6797b30167368faeedcd214f7d62d4a0d",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "seq",
                    "value": null,
                    "defaultValue": null,
                    "description": "string, length 3     3 characters belonging to the set {'X', 'Y', 'Z'} for intrinsic     rotations, or {'x', 'y', 'z'} for extrinsic rotations [1]_.     Adjacent axes cannot be the same.     Extrinsic and intrinsic rotations cannot be mixed in one function     call. ",
                    "type": "",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "degrees",
                    "value": null,
                    "defaultValue": null,
                    "description": "boolean, optional     Returned angles are in degrees if this flag is True, else they are     in radians. Default is False. ",
                    "type": "False",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.transform.Rotation.as_euler",
                    "defaultValue": "scipy.spatial.transform.Rotation.as_euler",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Rotation.as_matrix",
            "description": "Represent as rotation matrix.\n        3D rotations can be represented using rotation matrices, which\n        are 3 x 3 real orthogonal matrices with determinant equal to +1 [1]_.\n        Returns\n        -------\n        matrix : ndarray, shape (3, 3) or (N, 3, 3)\n            Shape depends on shape of inputs used for initialization.\n        References\n        ----------\n        .. [1] https://en.wikipedia.org/wiki/Rotation_matrix#In_three_dimensions\n        Examples\n        --------\n        >>> from scipy.spatial.transform import Rotation as R\n        >>> import numpy as np\n        Represent a single rotation:\n        >>> r = R.from_rotvec([0, 0, np.pi/2])\n        >>> r.as_matrix()\n        array([[ 2.22044605e-16, -1.00000000e+00,  0.00000000e+00],\n               [ 1.00000000e+00,  2.22044605e-16,  0.00000000e+00],\n               [ 0.00000000e+00,  0.00000000e+00,  1.00000000e+00]])\n        >>> r.as_matrix().shape\n        (3, 3)\n        Represent a stack with a single rotation:\n        >>> r = R.from_quat([[1, 1, 0, 0]])\n        >>> r.as_matrix()\n        array([[[ 0.,  1.,  0.],\n                [ 1.,  0.,  0.],\n                [ 0.,  0., -1.]]])\n        >>> r.as_matrix().shape\n        (1, 3, 3)\n        Represent multiple rotations:\n        >>> r = R.from_rotvec([[np.pi/2, 0, 0], [0, 0, np.pi/2]])\n        >>> r.as_matrix()\n        array([[[ 1.00000000e+00,  0.00000000e+00,  0.00000000e+00],\n                [ 0.00000000e+00,  2.22044605e-16, -1.00000000e+00],\n                [ 0.00000000e+00,  1.00000000e+00,  2.22044605e-16]],\n               [[ 2.22044605e-16, -1.00000000e+00,  0.00000000e+00],\n                [ 1.00000000e+00,  2.22044605e-16,  0.00000000e+00],\n                [ 0.00000000e+00,  0.00000000e+00,  1.00000000e+00]]])\n        >>> r.as_matrix().shape\n        (2, 3, 3)\n        Notes\n        -----\n        This function was called as_dcm before.\n        .. versionadded:: 1.4.0\n        ",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d3ae1275c875d813e0d381175b08ea750697a0cca0d0164d5eec9baec4809898",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.transform.Rotation.as_matrix",
                    "defaultValue": "scipy.spatial.transform.Rotation.as_matrix",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Rotation.as_mrp",
            "description": "Represent as Modified Rodrigues Parameters (MRPs).\n        MRPs are a 3 dimensional vector co-directional to the axis of rotation and whose\n        magnitude is equal to ``tan(theta / 4)``, where ``theta`` is the angle of rotation\n        (in radians) [1]_.\n        MRPs have a singuarity at 360 degrees which can be avoided by ensuring the angle of\n        rotation does not exceed 180 degrees, i.e. switching the direction of the rotation when\n        it is past 180 degrees. This function will always return MRPs corresponding to a rotation\n        of less than or equal to 180 degrees.\n        Returns\n        -------\n        mrps : ndarray, shape (3,) or (N, 3)\n            Shape depends on shape of inputs used for initialization.\n        References\n        ----------\n        .. [1] Shuster, M. D. \"A Survery of Attitude Representations\",\n               The Journal of Astronautical Sciences, Vol. 41, No.4, 1993,\n               pp. 475-476\n        Examples\n        --------\n        >>> from scipy.spatial.transform import Rotation as R\n        >>> import numpy as np\n        Represent a single rotation:\n        >>> r = R.from_rotvec([0, 0, np.pi])\n        >>> r.as_mrp()\n        array([0.        , 0.        , 1.         ])\n        >>> r.as_mrp().shape\n        (3,)\n        Represent a stack with a single rotation:\n        >>> r = R.from_euler('xyz', [[180, 0, 0]], degrees=True)\n        >>> r.as_mrp()\n        array([[1.       , 0.        , 0.         ]])\n        >>> r.as_mrp().shape\n        (1, 3)\n        Represent multiple rotations:\n        >>> r = R.from_rotvec([[np.pi/2, 0, 0], [0, 0, np.pi/2]])\n        >>> r.as_mrp()\n        array([[0.41421356, 0.        , 0.        ],\n               [0.        , 0.        , 0.41421356]])\n        >>> r.as_mrp().shape\n        (2, 3)\n        Notes\n        -----\n        .. versionadded:: 1.6.0\n        ",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a2a2a8fcd90707e2e8972fb54f3d2afd2ccdab24ffede672bb1de1130f9f3de6",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.transform.Rotation.as_mrp",
                    "defaultValue": "scipy.spatial.transform.Rotation.as_mrp",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Rotation.as_quat",
            "description": "Represent as quaternions.\n        Active rotations in 3 dimensions can be represented using unit norm\n        quaternions [1]_. The mapping from quaternions to rotations is\n        two-to-one, i.e. quaternions ``q`` and ``-q``, where ``-q`` simply\n        reverses the sign of each component, represent the same spatial\n        rotation. The returned value is in scalar-last (x, y, z, w) format.\n        Parameters\n        ----------\n        canonical : `bool`, default False\n            Whether to map the redundant double cover of rotation space to a\n            unique \"canonical\" single cover. If True, then the quaternion is\n            chosen from {q, -q} such that the w term is positive. If the w term\n            is 0, then the quaternion is chosen such that the first nonzero\n            term of the x, y, and z terms is positive.\n        Returns\n        -------\n        quat : `numpy.ndarray`, shape (4,) or (N, 4)\n            Shape depends on shape of inputs used for initialization.\n        References\n        ----------\n        .. [1] https://en.wikipedia.org/wiki/Quaternions_and_spatial_rotation\n        Examples\n        --------\n        >>> from scipy.spatial.transform import Rotation as R\n        >>> import numpy as np\n        Represent a single rotation:\n        >>> r = R.from_matrix([[0, -1, 0],\n        ...                    [1, 0, 0],\n        ...                    [0, 0, 1]])\n        >>> r.as_quat()\n        array([0.        , 0.        , 0.70710678, 0.70710678])\n        >>> r.as_quat().shape\n        (4,)\n        Represent a stack with a single rotation:\n        >>> r = R.from_quat([[0, 0, 0, 1]])\n        >>> r.as_quat().shape\n        (1, 4)\n        Represent multiple rotations in a single object:\n        >>> r = R.from_rotvec([[np.pi, 0, 0], [0, 0, np.pi/2]])\n        >>> r.as_quat().shape\n        (2, 4)\n        Quaternions can be mapped from a redundant double cover of the\n        rotation space to a canonical representation with a positive w term.\n        >>> r = R.from_quat([0, 0, 0, -1])\n        >>> r.as_quat()\n        array([0. , 0. , 0. , -1.])\n        >>> r.as_quat(canonical=True)\n        array([0. , 0. , 0. , 1.])\n        ",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "fad630877b75913f61864865cde302ed4866da63c63cab9e3b58559df379cd46",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "canonical",
                    "value": null,
                    "defaultValue": null,
                    "description": "`bool`, default False     Whether to map the redundant double cover of rotation space to a     unique \"canonical\" single cover. If True, then the quaternion is     chosen from {q, -q} such that the w term is positive. If the w term     is 0, then the quaternion is chosen such that the first nonzero     term of the x, y, and z terms is positive. ",
                    "type": "False",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.transform.Rotation.as_quat",
                    "defaultValue": "scipy.spatial.transform.Rotation.as_quat",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Rotation.as_rotvec",
            "description": "Represent as rotation vectors.\n        A rotation vector is a 3 dimensional vector which is co-directional to\n        the axis of rotation and whose norm gives the angle of rotation [1]_.\n        Parameters\n        ----------\n        degrees : boolean, optional\n            Returned magnitudes are in degrees if this flag is True, else they are\n            in radians. Default is False.\n            .. versionadded:: 1.7.0\n        Returns\n        -------\n        rotvec : ndarray, shape (3,) or (N, 3)\n            Shape depends on shape of inputs used for initialization.\n        References\n        ----------\n        .. [1] https://en.wikipedia.org/wiki/Axis%E2%80%93angle_representation#Rotation_vector\n        Examples\n        --------\n        >>> from scipy.spatial.transform import Rotation as R\n        >>> import numpy as np\n        Represent a single rotation:\n        >>> r = R.from_euler('z', 90, degrees=True)\n        >>> r.as_rotvec()\n        array([0.        , 0.        , 1.57079633])\n        >>> r.as_rotvec().shape\n        (3,)\n        Represent a rotation in degrees:\n        >>> r = R.from_euler('YX', (-90, -90), degrees=True)\n        >>> s = r.as_rotvec(degrees=True)\n        >>> s\n        array([-69.2820323, -69.2820323, -69.2820323])\n        >>> np.linalg.norm(s)\n        120.00000000000001\n        Represent a stack with a single rotation:\n        >>> r = R.from_quat([[0, 0, 1, 1]])\n        >>> r.as_rotvec()\n        array([[0.        , 0.        , 1.57079633]])\n        >>> r.as_rotvec().shape\n        (1, 3)\n        Represent multiple rotations in a single object:\n        >>> r = R.from_quat([[0, 0, 1, 1], [1, 1, 0, 1]])\n        >>> r.as_rotvec()\n        array([[0.        , 0.        , 1.57079633],\n               [1.35102172, 1.35102172, 0.        ]])\n        >>> r.as_rotvec().shape\n        (2, 3)\n        ",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7ed8c3f9054e369ff106f8af1eb329c64a5c029dccb04b62a78aa3a78401ebec",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "degrees",
                    "value": null,
                    "defaultValue": null,
                    "description": "boolean, optional     Returned magnitudes are in degrees if this flag is True, else they are     in radians. Default is False.      .. versionadded:: 1.7.0 ",
                    "type": "False",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.transform.Rotation.as_rotvec",
                    "defaultValue": "scipy.spatial.transform.Rotation.as_rotvec",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Rotation.concatenate",
            "description": "Concatenate a sequence of `Rotation` objects.\n        Parameters\n        ----------\n        rotations : sequence of `Rotation` objects\n            The rotations to concatenate.\n        Returns\n        -------\n        concatenated : `Rotation` instance\n            The concatenated rotations.\n        Notes\n        -----\n        .. versionadded:: 1.8.0\n        ",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2b26df58a11a9ca0640201f4fa77c8ce01268871887a2a054172ffacc83abf27",
            "fields": [
                {
                    "name": "type",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "cls",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "rotations",
                    "value": null,
                    "defaultValue": null,
                    "description": "sequence of `Rotation` objects     The rotations to concatenate. ",
                    "type": "",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.transform.Rotation.concatenate",
                    "defaultValue": "scipy.spatial.transform.Rotation.concatenate",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Rotation.create_group",
            "description": "Create a 3D rotation group.\n        Parameters\n        ----------\n        group : string\n            The name of the group. Must be one of 'I', 'O', 'T', 'Dn', 'Cn',\n            where `n` is a positive integer. The groups are:\n                * I: Icosahedral group\n                * O: Octahedral group\n                * T: Tetrahedral group\n                * D: Dicyclic group\n                * C: Cyclic group\n        axis : integer\n            The cyclic rotation axis. Must be one of ['X', 'Y', 'Z'] (or\n            lowercase). Default is 'Z'. Ignored for groups 'I', 'O', and 'T'.\n        Returns\n        -------\n        rotation : `Rotation` instance\n            Object containing the elements of the rotation group.\n        Notes\n        -----\n        This method generates rotation groups only. The full 3-dimensional\n        point groups [PointGroups]_ also contain reflections.\n        References\n        ----------\n        .. [PointGroups] `Point groups\n           <https://en.wikipedia.org/wiki/Point_groups_in_three_dimensions>`_\n           on Wikipedia.\n        ",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "85042f721ff813c41ab93e47b58571bf889f3db65ae7c19fff8375c88bc9e82f",
            "fields": [
                {
                    "name": "type",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "cls",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group",
                    "value": null,
                    "defaultValue": null,
                    "description": "string     The name of the group. Must be one of 'I', 'O', 'T', 'Dn', 'Cn',     where `n` is a positive integer. The groups are:          * I: Icosahedral group         * O: Octahedral group         * T: Tetrahedral group         * D: Dicyclic group         * C: Cyclic group  ",
                    "type": "",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "axis",
                    "value": null,
                    "defaultValue": null,
                    "description": "integer     The cyclic rotation axis. Must be one of ['X', 'Y', 'Z'] (or     lowercase). Default is 'Z'. Ignored for groups 'I', 'O', and 'T'. ",
                    "type": "u",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.transform.Rotation.create_group",
                    "defaultValue": "scipy.spatial.transform.Rotation.create_group",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Rotation.from_euler",
            "description": "Initialize from Euler angles.\n        Rotations in 3-D can be represented by a sequence of 3\n        rotations around a sequence of axes. In theory, any three axes spanning\n        the 3-D Euclidean space are enough. In practice, the axes of rotation are\n        chosen to be the basis vectors.\n        The three rotations can either be in a global frame of reference\n        (extrinsic) or in a body centred frame of reference (intrinsic), which\n        is attached to, and moves with, the object under rotation [1]_.\n        Parameters\n        ----------\n        seq : string\n            Specifies sequence of axes for rotations. Up to 3 characters\n            belonging to the set {'X', 'Y', 'Z'} for intrinsic rotations, or\n            {'x', 'y', 'z'} for extrinsic rotations. Extrinsic and intrinsic\n            rotations cannot be mixed in one function call.\n        angles : float or array_like, shape (N,) or (N, [1 or 2 or 3])\n            Euler angles specified in radians (`degrees` is False) or degrees\n            (`degrees` is True).\n            For a single character `seq`, `angles` can be:\n            - a single value\n            - array_like with shape (N,), where each `angle[i]`\n              corresponds to a single rotation\n            - array_like with shape (N, 1), where each `angle[i, 0]`\n              corresponds to a single rotation\n            For 2- and 3-character wide `seq`, `angles` can be:\n            - array_like with shape (W,) where `W` is the width of\n              `seq`, which corresponds to a single rotation with `W` axes\n            - array_like with shape (N, W) where each `angle[i]`\n              corresponds to a sequence of Euler angles describing a single\n              rotation\n        degrees : bool, optional\n            If True, then the given angles are assumed to be in degrees.\n            Default is False.\n        Returns\n        -------\n        rotation : `Rotation` instance\n            Object containing the rotation represented by the sequence of\n            rotations around given axes with given angles.\n        References\n        ----------\n        .. [1] https://en.wikipedia.org/wiki/Euler_angles#Definition_by_intrinsic_rotations\n        Examples\n        --------\n        >>> from scipy.spatial.transform import Rotation as R\n        Initialize a single rotation along a single axis:\n        >>> r = R.from_euler('x', 90, degrees=True)\n        >>> r.as_quat().shape\n        (4,)\n        Initialize a single rotation with a given axis sequence:\n        >>> r = R.from_euler('zyx', [90, 45, 30], degrees=True)\n        >>> r.as_quat().shape\n        (4,)\n        Initialize a stack with a single rotation around a single axis:\n        >>> r = R.from_euler('x', [90], degrees=True)\n        >>> r.as_quat().shape\n        (1, 4)\n        Initialize a stack with a single rotation with an axis sequence:\n        >>> r = R.from_euler('zyx', [[90, 45, 30]], degrees=True)\n        >>> r.as_quat().shape\n        (1, 4)\n        Initialize multiple elementary rotations in one object:\n        >>> r = R.from_euler('x', [90, 45, 30], degrees=True)\n        >>> r.as_quat().shape\n        (3, 4)\n        Initialize multiple rotations in one object:\n        >>> r = R.from_euler('zyx', [[90, 45, 30], [35, 45, 90]], degrees=True)\n        >>> r.as_quat().shape\n        (2, 4)\n        ",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ca77c20eca19d7af6fc209ddb33d41b0a45e36514c72d6e81ba071e4dda6883b",
            "fields": [
                {
                    "name": "type",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "cls",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "seq",
                    "value": null,
                    "defaultValue": null,
                    "description": "string     Specifies sequence of axes for rotations. Up to 3 characters     belonging to the set {'X', 'Y', 'Z'} for intrinsic rotations, or     {'x', 'y', 'z'} for extrinsic rotations. Extrinsic and intrinsic     rotations cannot be mixed in one function call. ",
                    "type": "",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "angles",
                    "value": null,
                    "defaultValue": null,
                    "description": "float or array_like, shape (N,) or (N, [1 or 2 or 3])     Euler angles specified in radians (`degrees` is False) or degrees     (`degrees` is True).     For a single character `seq`, `angles` can be:      - a single value     - array_like with shape (N,), where each `angle[i]`       corresponds to a single rotation     - array_like with shape (N, 1), where each `angle[i, 0]`       corresponds to a single rotation      For 2- and 3-character wide `seq`, `angles` can be:      - array_like with shape (W,) where `W` is the width of       `seq`, which corresponds to a single rotation with `W` axes     - array_like with shape (N, W) where each `angle[i]`       corresponds to a sequence of Euler angles describing a single       rotation  ",
                    "type": "",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "degrees",
                    "value": null,
                    "defaultValue": null,
                    "description": "bool, optional     If True, then the given angles are assumed to be in degrees.     Default is False. ",
                    "type": "False",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.transform.Rotation.from_euler",
                    "defaultValue": "scipy.spatial.transform.Rotation.from_euler",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Rotation.from_matrix",
            "description": "Initialize from rotation matrix.\n        Rotations in 3 dimensions can be represented with 3 x 3 proper\n        orthogonal matrices [1]_. If the input is not proper orthogonal,\n        an approximation is created using the method described in [2]_.\n        Parameters\n        ----------\n        matrix : array_like, shape (N, 3, 3) or (3, 3)\n            A single matrix or a stack of matrices, where ``matrix[i]`` is\n            the i-th matrix.\n        Returns\n        -------\n        rotation : `Rotation` instance\n            Object containing the rotations represented by the rotation\n            matrices.\n        References\n        ----------\n        .. [1] https://en.wikipedia.org/wiki/Rotation_matrix#In_three_dimensions\n        .. [2] F. Landis Markley, \"Unit Quaternion from Rotation Matrix\",\n               Journal of guidance, control, and dynamics vol. 31.2, pp.\n               440-442, 2008.\n        Examples\n        --------\n        >>> from scipy.spatial.transform import Rotation as R\n        >>> import numpy as np\n        Initialize a single rotation:\n        >>> r = R.from_matrix([\n        ... [0, -1, 0],\n        ... [1, 0, 0],\n        ... [0, 0, 1]])\n        >>> r.as_matrix().shape\n        (3, 3)\n        Initialize multiple rotations in a single object:\n        >>> r = R.from_matrix([\n        ... [\n        ...     [0, -1, 0],\n        ...     [1, 0, 0],\n        ...     [0, 0, 1],\n        ... ],\n        ... [\n        ...     [1, 0, 0],\n        ...     [0, 0, -1],\n        ...     [0, 1, 0],\n        ... ]])\n        >>> r.as_matrix().shape\n        (2, 3, 3)\n        If input matrices are not special orthogonal (orthogonal with\n        determinant equal to +1), then a special orthogonal estimate is stored:\n        >>> a = np.array([\n        ... [0, -0.5, 0],\n        ... [0.5, 0, 0],\n        ... [0, 0, 0.5]])\n        >>> np.linalg.det(a)\n        0.12500000000000003\n        >>> r = R.from_matrix(a)\n        >>> matrix = r.as_matrix()\n        >>> matrix\n        array([[-0.38461538, -0.92307692,  0.        ],\n               [ 0.92307692, -0.38461538,  0.        ],\n               [ 0.        ,  0.        ,  1.        ]])\n        >>> np.linalg.det(matrix)\n        1.0000000000000002\n        It is also possible to have a stack containing a single rotation:\n        >>> r = R.from_matrix([[\n        ... [0, -1, 0],\n        ... [1, 0, 0],\n        ... [0, 0, 1]]])\n        >>> r.as_matrix()\n        array([[[ 0., -1.,  0.],\n                [ 1.,  0.,  0.],\n                [ 0.,  0.,  1.]]])\n        >>> r.as_matrix().shape\n        (1, 3, 3)\n        Notes\n        -----\n        This function was called from_dcm before.\n        .. versionadded:: 1.4.0\n        ",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a06d68ebe26770bb8f5515e78f1823f7e101fec95ae37fd9141406b57b0fa95a",
            "fields": [
                {
                    "name": "type",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "cls",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "matrix",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like, shape (N, 3, 3) or (3, 3)     A single matrix or a stack of matrices, where ``matrix[i]`` is     the i-th matrix. ",
                    "type": "",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.transform.Rotation.from_matrix",
                    "defaultValue": "scipy.spatial.transform.Rotation.from_matrix",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Rotation.from_mrp",
            "description": "Initialize from Modified Rodrigues Parameters (MRPs).\n        MRPs are a 3 dimensional vector co-directional to the axis of rotation and whose\n        magnitude is equal to ``tan(theta / 4)``, where ``theta`` is the angle of rotation\n        (in radians) [1]_.\n        MRPs have a singuarity at 360 degrees which can be avoided by ensuring the angle of\n        rotation does not exceed 180 degrees, i.e. switching the direction of the rotation when\n        it is past 180 degrees.\n        Parameters\n        ----------\n        mrp : array_like, shape (N, 3) or (3,)\n            A single vector or a stack of vectors, where `mrp[i]` gives\n            the ith set of MRPs.\n        Returns\n        -------\n        rotation : `Rotation` instance\n            Object containing the rotations represented by input MRPs.\n        References\n        ----------\n        .. [1] Shuster, M. D. \"A Survery of Attitude Representations\",\n               The Journal of Astronautical Sciences, Vol. 41, No.4, 1993,\n               pp. 475-476\n        Notes\n        -----\n        .. versionadded:: 1.6.0\n        Examples\n        --------\n        >>> from scipy.spatial.transform import Rotation as R\n        >>> import numpy as np\n        Initialize a single rotation:\n        >>> r = R.from_mrp([0, 0, 1])\n        >>> r.as_euler('xyz', degrees=True)\n        array([0.        , 0.        , 180.      ])\n        >>> r.as_euler('xyz').shape\n        (3,)\n        Initialize multiple rotations in one object:\n        >>> r = R.from_mrp([\n        ... [0, 0, 1],\n        ... [1, 0, 0]])\n        >>> r.as_euler('xyz', degrees=True)\n        array([[0.        , 0.        , 180.      ],\n               [180.0     , 0.        , 0.        ]])\n        >>> r.as_euler('xyz').shape\n        (2, 3)\n        It is also possible to have a stack of a single rotation:\n        >>> r = R.from_mrp([[0, 0, np.pi/2]])\n        >>> r.as_euler('xyz').shape\n        (1, 3)\n        ",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "40923dbe6273c6e38c2f18db986c257b15b8c752bd43cad1fa0d7e0981fceb6e",
            "fields": [
                {
                    "name": "type",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "cls",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mrp",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like, shape (N, 3) or (3,)     A single vector or a stack of vectors, where `mrp[i]` gives     the ith set of MRPs. ",
                    "type": "",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.transform.Rotation.from_mrp",
                    "defaultValue": "scipy.spatial.transform.Rotation.from_mrp",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Rotation.from_quat",
            "description": "Initialize from quaternions.\n        3D rotations can be represented using unit-norm quaternions [1]_.\n        Parameters\n        ----------\n        quat : array_like, shape (N, 4) or (4,)\n            Each row is a (possibly non-unit norm) quaternion representing an\n            active rotation, in scalar-last (x, y, z, w) format. Each\n            quaternion will be normalized to unit norm.\n        Returns\n        -------\n        rotation : `Rotation` instance\n            Object containing the rotations represented by input quaternions.\n        References\n        ----------\n        .. [1] https://en.wikipedia.org/wiki/Quaternions_and_spatial_rotation\n        Examples\n        --------\n        >>> from scipy.spatial.transform import Rotation as R\n        Initialize a single rotation:\n        >>> r = R.from_quat([1, 0, 0, 0])\n        >>> r.as_quat()\n        array([1., 0., 0., 0.])\n        >>> r.as_quat().shape\n        (4,)\n        Initialize multiple rotations in a single object:\n        >>> r = R.from_quat([\n        ... [1, 0, 0, 0],\n        ... [0, 0, 0, 1]\n        ... ])\n        >>> r.as_quat()\n        array([[1., 0., 0., 0.],\n               [0., 0., 0., 1.]])\n        >>> r.as_quat().shape\n        (2, 4)\n        It is also possible to have a stack of a single rotation:\n        >>> r = R.from_quat([[0, 0, 0, 1]])\n        >>> r.as_quat()\n        array([[0., 0., 0., 1.]])\n        >>> r.as_quat().shape\n        (1, 4)\n        Quaternions are normalized before initialization.\n        >>> r = R.from_quat([0, 0, 1, 1])\n        >>> r.as_quat()\n        array([0.        , 0.        , 0.70710678, 0.70710678])\n        ",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "234fcc930180ecfccde33f6a96351d21ea3b9ba267fdffeac335462a6cbc672a",
            "fields": [
                {
                    "name": "type",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "cls",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "quat",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like, shape (N, 4) or (4,)     Each row is a (possibly non-unit norm) quaternion representing an     active rotation, in scalar-last (x, y, z, w) format. Each     quaternion will be normalized to unit norm. ",
                    "type": "",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.transform.Rotation.from_quat",
                    "defaultValue": "scipy.spatial.transform.Rotation.from_quat",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Rotation.from_rotvec",
            "description": "Initialize from rotation vectors.\n        A rotation vector is a 3 dimensional vector which is co-directional to\n        the axis of rotation and whose norm gives the angle of rotation [1]_.\n        Parameters\n        ----------\n        rotvec : array_like, shape (N, 3) or (3,)\n            A single vector or a stack of vectors, where `rot_vec[i]` gives\n            the ith rotation vector.\n        degrees : bool, optional\n            If True, then the given magnitudes are assumed to be in degrees.\n            Default is False.\n            .. versionadded:: 1.7.0\n        Returns\n        -------\n        rotation : `Rotation` instance\n            Object containing the rotations represented by input rotation\n            vectors.\n        References\n        ----------\n        .. [1] https://en.wikipedia.org/wiki/Axis%E2%80%93angle_representation#Rotation_vector\n        Examples\n        --------\n        >>> from scipy.spatial.transform import Rotation as R\n        >>> import numpy as np\n        Initialize a single rotation:\n        >>> r = R.from_rotvec(np.pi/2 * np.array([0, 0, 1]))\n        >>> r.as_rotvec()\n        array([0.        , 0.        , 1.57079633])\n        >>> r.as_rotvec().shape\n        (3,)\n        Initialize a rotation in degrees, and view it in degrees:\n        >>> r = R.from_rotvec(45 * np.array([0, 1, 0]), degrees=True)\n        >>> r.as_rotvec(degrees=True)\n        array([ 0., 45.,  0.])\n        Initialize multiple rotations in one object:\n        >>> r = R.from_rotvec([\n        ... [0, 0, np.pi/2],\n        ... [np.pi/2, 0, 0]])\n        >>> r.as_rotvec()\n        array([[0.        , 0.        , 1.57079633],\n               [1.57079633, 0.        , 0.        ]])\n        >>> r.as_rotvec().shape\n        (2, 3)\n        It is also possible to have a stack of a single rotaton:\n        >>> r = R.from_rotvec([[0, 0, np.pi/2]])\n        >>> r.as_rotvec().shape\n        (1, 3)\n        ",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e37887ef8399bb6a6660c16bff376192a2b0f0855da474c6d8029288532ec5d9",
            "fields": [
                {
                    "name": "type",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "cls",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "rotvec",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like, shape (N, 3) or (3,)     A single vector or a stack of vectors, where `rot_vec[i]` gives     the ith rotation vector. ",
                    "type": "",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "degrees",
                    "value": null,
                    "defaultValue": null,
                    "description": "bool, optional     If True, then the given magnitudes are assumed to be in degrees.     Default is False.      .. versionadded:: 1.7.0 ",
                    "type": "False",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.transform.Rotation.from_rotvec",
                    "defaultValue": "scipy.spatial.transform.Rotation.from_rotvec",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Rotation.identity",
            "description": "Get identity rotation(s).\n        Composition with the identity rotation has no effect.\n        Parameters\n        ----------\n        num : int or None, optional\n            Number of identity rotations to generate. If None (default), then a\n            single rotation is generated.\n        Returns\n        -------\n        identity : Rotation object\n            The identity rotation.\n        ",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e9fdb87b36431324c983e0036795f72c9b096f6d650d6ec02eb754c366f94a12",
            "fields": [
                {
                    "name": "type",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "cls",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num",
                    "value": null,
                    "defaultValue": null,
                    "description": "int or None, optional     Number of identity rotations to generate. If None (default), then a     single rotation is generated. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.transform.Rotation.identity",
                    "defaultValue": "scipy.spatial.transform.Rotation.identity",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Rotation.inv",
            "description": "Invert this rotation.\n        Composition of a rotation with its inverse results in an identity\n        transformation.\n        Returns\n        -------\n        inverse : `Rotation` instance\n            Object containing inverse of the rotations in the current instance.\n        Examples\n        --------\n        >>> from scipy.spatial.transform import Rotation as R\n        >>> import numpy as np\n        Inverting a single rotation:\n        >>> p = R.from_euler('z', 45, degrees=True)\n        >>> q = p.inv()\n        >>> q.as_euler('zyx', degrees=True)\n        array([-45.,   0.,   0.])\n        Inverting multiple rotations:\n        >>> p = R.from_rotvec([[0, 0, np.pi/3], [-np.pi/4, 0, 0]])\n        >>> q = p.inv()\n        >>> q.as_rotvec()\n        array([[-0.        , -0.        , -1.04719755],\n               [ 0.78539816, -0.        , -0.        ]])\n        ",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "21f5b7ac4376933af9f526b8387aa79604656641bae95cddadec5f8f5e99de74",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.transform.Rotation.inv",
                    "defaultValue": "scipy.spatial.transform.Rotation.inv",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Rotation.magnitude",
            "description": "Get the magnitude(s) of the rotation(s).\n        Returns\n        -------\n        magnitude : ndarray or float\n            Angle(s) in radians, float if object contains a single rotation\n            and ndarray if object contains multiple rotations.\n        Examples\n        --------\n        >>> from scipy.spatial.transform import Rotation as R\n        >>> import numpy as np\n        >>> r = R.from_quat(np.eye(4))\n        >>> r.magnitude()\n        array([3.14159265, 3.14159265, 3.14159265, 0.        ])\n        Magnitude of a single rotation:\n        >>> r[0].magnitude()\n        3.141592653589793\n        ",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4d895531e3048561f68317bae1d66d00ac44e11d33431b57a63edac12e3754b0",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.transform.Rotation.magnitude",
                    "defaultValue": "scipy.spatial.transform.Rotation.magnitude",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Rotation.mean",
            "description": "Get the mean of the rotations.\n        Parameters\n        ----------\n        weights : array_like shape (N,), optional\n            Weights describing the relative importance of the rotations. If\n            None (default), then all values in `weights` are assumed to be\n            equal.\n        Returns\n        -------\n        mean : `Rotation` instance\n            Object containing the mean of the rotations in the current\n            instance.\n        Notes\n        -----\n        The mean used is the chordal L2 mean (also called the projected or\n        induced arithmetic mean). If ``p`` is a set of rotations with mean\n        ``m``, then ``m`` is the rotation which minimizes\n        ``(weights[:, None, None] * (p.as_matrix() - m.as_matrix())**2).sum()``.\n        Examples\n        --------\n        >>> from scipy.spatial.transform import Rotation as R\n        >>> r = R.from_euler('zyx', [[0, 0, 0],\n        ...                          [1, 0, 0],\n        ...                          [0, 1, 0],\n        ...                          [0, 0, 1]], degrees=True)\n        >>> r.mean().as_euler('zyx', degrees=True)\n        array([0.24945696, 0.25054542, 0.24945696])\n        ",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a4fddb5cf769cb68278760b71fb4dd97a222fbd562330f24bd7c3d4f8e4f1617",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "weights",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like shape (N,), optional     Weights describing the relative importance of the rotations. If     None (default), then all values in `weights` are assumed to be     equal. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.transform.Rotation.mean",
                    "defaultValue": "scipy.spatial.transform.Rotation.mean",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Rotation.random",
            "description": "Generate uniformly distributed rotations.\n        Parameters\n        ----------\n        num : int or None, optional\n            Number of random rotations to generate. If None (default), then a\n            single rotation is generated.\n        random_state : {None, int, `numpy.random.Generator`,\n                        `numpy.random.RandomState`}, optional\n            If `seed` is None (or `np.random`), the `numpy.random.RandomState`\n            singleton is used.\n            If `seed` is an int, a new ``RandomState`` instance is used,\n            seeded with `seed`.\n            If `seed` is already a ``Generator`` or ``RandomState`` instance\n            then that instance is used.\n        Returns\n        -------\n        random_rotation : `Rotation` instance\n            Contains a single rotation if `num` is None. Otherwise contains a\n            stack of `num` rotations.\n        Notes\n        -----\n        This function is optimized for efficiently sampling random rotation\n        matrices in three dimensions. For generating random rotation matrices\n        in higher dimensions, see `scipy.stats.special_ortho_group`.\n        Examples\n        --------\n        >>> from scipy.spatial.transform import Rotation as R\n        Sample a single rotation:\n        >>> R.random().as_euler('zxy', degrees=True)\n        array([-110.5976185 ,   55.32758512,   76.3289269 ])  # random\n        Sample a stack of rotations:\n        >>> R.random(5).as_euler('zxy', degrees=True)\n        array([[-110.5976185 ,   55.32758512,   76.3289269 ],  # random\n               [ -91.59132005,  -14.3629884 ,  -93.91933182],\n               [  25.23835501,   45.02035145, -121.67867086],\n               [ -51.51414184,  -15.29022692, -172.46870023],\n               [ -81.63376847,  -27.39521579,    2.60408416]])\n        See Also\n        --------\n        scipy.stats.special_ortho_group\n       ",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5f94baf41a2edae81619ccca56c50373fec75789cc45c40af3cfe72794a17d6e",
            "fields": [
                {
                    "name": "type",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "cls",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num",
                    "value": null,
                    "defaultValue": null,
                    "description": "int or None, optional     Number of random rotations to generate. If None (default), then a     single rotation is generated. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "random_state",
                    "value": null,
                    "defaultValue": null,
                    "description": "{None, int, `numpy.random.Generator`,                 `numpy.random.RandomState`}, optional      If `seed` is None (or `np.random`), the `numpy.random.RandomState`     singleton is used.     If `seed` is an int, a new ``RandomState`` instance is used,     seeded with `seed`.     If `seed` is already a ``Generator`` or ``RandomState`` instance     then that instance is used. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.transform.Rotation.random",
                    "defaultValue": "scipy.spatial.transform.Rotation.random",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Rotation.reduce",
            "description": "Reduce this rotation with the provided rotation groups.\n        Reduction of a rotation ``p`` is a transformation of the form\n        ``q = l * p * r``, where ``l`` and ``r`` are chosen from `left` and\n        `right` respectively, such that rotation ``q`` has the smallest\n        magnitude.\n        If `left` and `right` are rotation groups representing symmetries of\n        two objects rotated by ``p``, then ``q`` is the rotation of the\n        smallest magnitude to align these objects considering their symmetries.\n        Parameters\n        ----------\n        left : `Rotation` instance, optional\n            Object containing the left rotation(s). Default value (None)\n            corresponds to the identity rotation.\n        right : `Rotation` instance, optional\n            Object containing the right rotation(s). Default value (None)\n            corresponds to the identity rotation.\n        return_indices : bool, optional\n            Whether to return the indices of the rotations from `left` and\n            `right` used for reduction.\n        Returns\n        -------\n        reduced : `Rotation` instance\n            Object containing reduced rotations.\n        left_best, right_best: integer ndarray\n            Indices of elements from `left` and `right` used for reduction.\n        ",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d1e472a5f05aa5a676f9929af8fe75718f219af52e8d1c481d95ea48658ecdb3",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "left",
                    "value": null,
                    "defaultValue": null,
                    "description": "`Rotation` instance, optional     Object containing the left rotation(s). Default value (None)     corresponds to the identity rotation. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "right",
                    "value": null,
                    "defaultValue": null,
                    "description": "`Rotation` instance, optional     Object containing the right rotation(s). Default value (None)     corresponds to the identity rotation. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "return_indices",
                    "value": null,
                    "defaultValue": null,
                    "description": "bool, optional     Whether to return the indices of the rotations from `left` and     `right` used for reduction. ",
                    "type": "False",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.transform.Rotation.reduce",
                    "defaultValue": "scipy.spatial.transform.Rotation.reduce",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "RotationSpline.__init__",
            "description": "No description found\nInterpolate rotations with continuous angular rate and acceleration.\n    \n    The rotation vectors between each consecutive orientation are cubic\n    functions of time and it is guaranteed that angular rate and acceleration\n    are continuous. Such interpolation are analogous to cubic spline\n    interpolation.\n    \n    Refer to [1]_ for math and implementation details.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "52edc8b1f6791dd185da61191f815268709fcebeaff1ddee394a26e6098130bd",
            "fields": [
                {
                    "name": "times",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like, shape (N,)     Times of the known rotations. At least 2 times must be specified. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "rotations",
                    "value": null,
                    "defaultValue": null,
                    "description": "`Rotation` instance     Rotations to perform the interpolation between. Must contain N     rotations.  Methods ------- __call__  References ---------- .. [1] `Smooth Attitude Interpolation         <https://github.com/scipy/scipy/files/2932755/attitude_interpolation.pdf>`_  Examples -------- >>> from scipy.spatial.transform import Rotation, RotationSpline >>> import numpy as np  Define the sequence of times and rotations from the Euler angles:  >>> times = [0, 10, 20, 40] >>> angles = [[-10, 20, 30], [0, 15, 40], [-30, 45, 30], [20, 45, 90]] >>> rotations = Rotation.from_euler('XYZ', angles, degrees=True)  Create the interpolator object:  >>> spline = RotationSpline(times, rotations)  Interpolate the Euler angles, angular rate and acceleration:  >>> angular_rate = np.rad2deg(spline(times, 1)) >>> angular_acceleration = np.rad2deg(spline(times, 2)) >>> times_plot = np.linspace(times[0], times[-1], 100) >>> angles_plot = spline(times_plot).as_euler('XYZ', degrees=True) >>> angular_rate_plot = np.rad2deg(spline(times_plot, 1)) >>> angular_acceleration_plot = np.rad2deg(spline(times_plot, 2))  On this plot you see that Euler angles are continuous and smooth:  >>> import matplotlib.pyplot as plt >>> plt.plot(times_plot, angles_plot) >>> plt.plot(times, angles, 'x') >>> plt.title(\"Euler angles\") >>> plt.show()  The angular rate is also smooth:  >>> plt.plot(times_plot, angular_rate_plot) >>> plt.plot(times, angular_rate, 'x') >>> plt.title(\"Angular rate\") >>> plt.show()  The angular acceleration is continuous, but not smooth. Also note that the angular acceleration is not a piecewise-linear function, because it is different from the second derivative of the rotation vector (which is a piecewise-linear function as in the cubic spline).  >>> plt.plot(times_plot, angular_acceleration_plot) >>> plt.plot(times, angular_acceleration, 'x') >>> plt.title(\"Angular acceleration\") >>> plt.show()",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.transform._rotation_spline.RotationSpline.__init__",
                    "defaultValue": "scipy.spatial.transform._rotation_spline.RotationSpline.__init__",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Slerp.__init__",
            "description": "No description found\nSpherical Linear Interpolation of Rotations.\n    \n    The interpolation between consecutive rotations is performed as a rotation\n    around a fixed axis with a constant angular velocity [1]_. This ensures\n    that the interpolated rotations follow the shortest path between initial\n    and final orientations.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "cd320be653deebf6f1547f11b060e34e3464a35ab9767d183b4e6e07eb604cba",
            "fields": [
                {
                    "name": "times",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like, shape (N,)     Times of the known rotations. At least 2 times must be specified. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "rotations",
                    "value": null,
                    "defaultValue": null,
                    "description": "`Rotation` instance     Rotations to perform the interpolation between. Must contain N     rotations.  Methods ------- __call__  See Also -------- Rotation  Notes ----- .. versionadded:: 1.2.0  References ---------- .. [1] https://en.wikipedia.org/wiki/Slerp#Quaternion_Slerp  Examples -------- >>> from scipy.spatial.transform import Rotation as R >>> from scipy.spatial.transform import Slerp  Setup the fixed keyframe rotations and times:  >>> key_rots = R.random(5, random_state=2342345) >>> key_times = [0, 1, 2, 3, 4]  Create the interpolator object:  >>> slerp = Slerp(key_times, key_rots)  Interpolate the rotations at the given times:  >>> times = [0, 0.5, 0.25, 1, 1.5, 2, 2.75, 3, 3.25, 3.60, 4] >>> interp_rots = slerp(times)  The keyframe rotations expressed as Euler angles:  >>> key_rots.as_euler('xyz', degrees=True) array([[ 14.31443779, -27.50095894,  -3.7275787 ],        [ -1.79924227, -24.69421529, 164.57701743],        [146.15020772,  43.22849451, -31.34891088],        [ 46.39959442,  11.62126073, -45.99719267],        [-88.94647804, -49.64400082, -65.80546984]])  The interpolated rotations expressed as Euler angles. These agree with the keyframe rotations at both endpoints of the range of keyframe times.  >>> interp_rots.as_euler('xyz', degrees=True) array([[  14.31443779,  -27.50095894,   -3.7275787 ],        [   4.74588574,  -32.44683966,   81.25139984],        [  10.71094749,  -31.56690154,   38.06896408],        [  -1.79924227,  -24.69421529,  164.57701743],        [  11.72796022,   51.64207311, -171.7374683 ],        [ 146.15020772,   43.22849451,  -31.34891088],        [  68.10921869,   20.67625074,  -48.74886034],        [  46.39959442,   11.62126073,  -45.99719267],        [  12.35552615,    4.21525086,  -64.89288124],        [ -30.08117143,  -19.90769513,  -78.98121326],        [ -88.94647804,  -49.64400082,  -65.80546984]])",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.transform._rotation.Slerp.__init__",
                    "defaultValue": "scipy.spatial.transform._rotation.Slerp.__init__",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        }
    ],
    "linkDataArray": []
}