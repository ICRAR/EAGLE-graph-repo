{
    "modelData": {
        "filePath": "scipy_spatial.palette",
        "fileType": "palette",
        "shortDescription": "",
        "detailedDescription": "=============================================================\nSpatial algorithms and data structures (:mod:`scipy.spatial`)\n=============================================================\n\n.. currentmodule:: scipy.spatial\n\nSpatial transformations\n=======================\n\nThese are contained in the `scipy.spatial.transform` submodule.\n\nNearest-neighbor queries\n========================\n.. autosummary::\n   :toctree: generated/\n\n   KDTree      -- class for efficient nearest-neighbor queries\n   cKDTree     -- class for efficient nearest-neighbor queries (faster implementation)\n   Rectangle\n\nDistance metrics\n================\n\nDistance metrics are contained in the :mod:`scipy.spatial.distance` submodule.\n\nDelaunay triangulation, convex hulls, and Voronoi diagrams\n==========================================================\n\n.. autosummary::\n   :toctree: generated/\n\n   Delaunay    -- compute Delaunay triangulation of input points\n   ConvexHull  -- compute a convex hull for input points\n   Voronoi     -- compute a Voronoi diagram hull from input points\n   SphericalVoronoi -- compute a Voronoi diagram from input points on the surface of a sphere\n   HalfspaceIntersection -- compute the intersection points of input halfspaces\n\nPlotting helpers\n================\n\n.. autosummary::\n   :toctree: generated/\n\n   delaunay_plot_2d     -- plot 2-D triangulation\n   convex_hull_plot_2d  -- plot 2-D convex hull\n   voronoi_plot_2d      -- plot 2-D Voronoi diagram\n\n.. seealso:: :ref:`Tutorial <qhulltutorial>`\n\n\nSimplex representation\n======================\nThe simplices (triangles, tetrahedra, etc.) appearing in the Delaunay\ntessellation (N-D simplices), convex hull facets, and Voronoi ridges\n(N-1-D simplices) are represented in the following scheme::\n\n    tess = Delaunay(points)\n    hull = ConvexHull(points)\n    voro = Voronoi(points)\n\n    # coordinates of the jth vertex of the ith simplex\n    tess.points[tess.simplices[i, j], :]        # tessellation element\n    hull.points[hull.simplices[i, j], :]        # convex hull facet\n    voro.vertices[voro.ridge_vertices[i, j], :] # ridge between Voronoi cells\n\nFor Delaunay triangulations and convex hulls, the neighborhood\nstructure of the simplices satisfies the condition:\n``tess.neighbors[i,j]`` is the neighboring simplex of the ith\nsimplex, opposite to the ``j``-vertex. It is -1 in case of no neighbor.\n\nConvex hull facets also define a hyperplane equation::\n\n    (hull.equations[i,:-1] * coord).sum() + hull.equations[i,-1] == 0\n\nSimilar hyperplane equations for the Delaunay triangulation correspond\nto the convex hull facets on the corresponding N+1-D\nparaboloid.\n\nThe Delaunay triangulation objects offer a method for locating the\nsimplex containing a given point, and barycentric coordinate\ncomputations.\n\nFunctions\n---------\n\n.. autosummary::\n   :toctree: generated/\n\n   tsearch\n   distance_matrix\n   minkowski_distance\n   minkowski_distance_p\n   procrustes\n   geometric_slerp\n\nWarnings / Errors used in :mod:`scipy.spatial`\n----------------------------------------------\n.. autosummary::\n   :toctree: generated/\n\n   QhullError",
        "repoService": "GitHub",
        "repoBranch": "master",
        "repo": "ICRAR/EAGLE_test_repo",
        "eagleVersion": "",
        "eagleCommitHash": "",
        "schemaVersion": "AppRef",
        "readonly": true,
        "repositoryUrl": "tmp",
        "commitHash": "0.1",
        "downloadUrl": "",
        "signature": "92f2ec32e88f1bb7c07fe30e925dd0f6983e538ff71fe07f6b84759f157e4eb7",
        "lastModifiedName": "wici",
        "lastModifiedEmail": "",
        "lastModifiedDatetime": 1695133112.271716,
        "numLGNodes": 67
    },
    "nodeDataArray": [
        {
            "category": "PythonApp",
            "key": -1,
            "name": "ConvexHull.__init__",
            "description": "No description found\nConvexHull(points, incremental=False, qhull_options=None)\n    \n    Convex hulls in N dimensions.\n    \n    .. versionadded:: 0.12.0",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "0c7306cdb39ac4208bd25226c74aa5bbeb36f6c0fb7e7a7d360602fdc0b4b750",
            "fields": [
                {
                    "name": "incremental",
                    "value": false,
                    "defaultValue": false,
                    "description": "bool, optional     Allow adding new points incrementally. This takes up some additional     resources. ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "qhull_options",
                    "value": null,
                    "defaultValue": null,
                    "description": "str, optional     Additional options to pass to Qhull. See Qhull manual     for details. (",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._qhull.ConvexHull.__init__",
                    "defaultValue": "scipy.spatial._qhull.ConvexHull.__init__",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "ConvexHull.add_points",
            "description": "add_points(points, restart=False)\n    \n    Process a set of additional new points.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b54ce5adba5cebe4fc7c34c3525f9fe7f5cb47e9526297f116ad582e7728400b",
            "fields": [
                {
                    "name": "restart",
                    "value": false,
                    "defaultValue": false,
                    "description": "bool, optional     Whether to restart processing from scratch, rather than     adding points incrementally. ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._qhull.ConvexHull.add_points",
                    "defaultValue": "scipy.spatial._qhull.ConvexHull.add_points",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Delaunay.__init__",
            "description": "No description found\nDelaunay(points, furthest_site=False, incremental=False, qhull_options=None)\n    \n    Delaunay tessellation in N dimensions.\n    \n    .. versionadded:: 0.9",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8f833d3118a8bb1301a59136ebe8efc951381f8f55338a736b182fde949b61d8",
            "fields": [
                {
                    "name": "furthest_site",
                    "value": false,
                    "defaultValue": false,
                    "description": "bool, optional     Whether to compute a furthest-site Delaunay triangulation.     ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "incremental",
                    "value": false,
                    "defaultValue": false,
                    "description": "bool, optional     Allow adding new points incrementally. This takes up some additional     resources. ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "qhull_options",
                    "value": null,
                    "defaultValue": null,
                    "description": "str, optional     Additional options to pass to Qhull. See Qhull manual for     details. Option \"Qt\" is always enabled.     Default:\"Qbb Qc Qz Qx Q12\" for ndim > 4 and \"Qbb Qc Qz Q12\" otherwise.     Incremental mode omits \"Qz\".      .. versionadded:: 0.12.0  Attributes ---------- ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._qhull.Delaunay.__init__",
                    "defaultValue": "scipy.spatial._qhull.Delaunay.__init__",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Delaunay.add_points",
            "description": "add_points(points, restart=False)\n    \n    Process a set of additional new points.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ac4784a80227075ba34527962061ece0c691c54f4b27769970578db41409e117",
            "fields": [
                {
                    "name": "restart",
                    "value": false,
                    "defaultValue": false,
                    "description": "bool, optional     Whether to restart processing from scratch, rather than     adding points incrementally. ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._qhull.Delaunay.add_points",
                    "defaultValue": "scipy.spatial._qhull.Delaunay.add_points",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Delaunay.find_simplex",
            "description": "find_simplex(self, xi, bruteforce=False, tol=None)\n    \n    Find the simplices containing the given points.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e4e236700f7a65b0d31bf5ca5e02828518c8697ab9c8416d495befbd95a80163",
            "fields": [
                {
                    "name": "bruteforce",
                    "value": false,
                    "defaultValue": false,
                    "description": "bool, optional     Whether to only perform a brute-force search ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "tol",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Tolerance allowed in the inside-triangle check.     Default is ``100*eps``. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._qhull.Delaunay.find_simplex",
                    "defaultValue": "scipy.spatial._qhull.Delaunay.find_simplex",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Delaunay.lift_points",
            "description": "lift_points(self, x)\n    \n    Lift points to the Qhull paraboloid.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2d74bbcef68a31ace06810eeff0485140b212d105ca11122aae829a7e57eb94e",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._qhull.Delaunay.lift_points",
                    "defaultValue": "scipy.spatial._qhull.Delaunay.lift_points",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Delaunay.plane_distance",
            "description": "plane_distance(self, xi)\n    \n    Compute hyperplane distances to the point `xi` from all simplices.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a24940e38802c8033d6d9cb4cf798a7a1780923ccb266dd42b0895da9f6ba2c1",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._qhull.Delaunay.plane_distance",
                    "defaultValue": "scipy.spatial._qhull.Delaunay.plane_distance",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "HalfspaceIntersection.__init__",
            "description": "No description found\nHalfspaceIntersection(halfspaces, interior_point, incremental=False, qhull_options=None)\n    \n    Halfspace intersections in N dimensions.\n    \n    .. versionadded:: 0.19.0",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "0a6a9ab95a6080a4f70f17412f14b2ae4cd006bcc185cd7db54ae38ed2a20f8f",
            "fields": [
                {
                    "name": "incremental",
                    "value": false,
                    "defaultValue": false,
                    "description": "bool, optional     Allow adding new halfspaces incrementally. This takes up some additional     resources. ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "qhull_options",
                    "value": null,
                    "defaultValue": null,
                    "description": "str, optional     Additional options to pass to Qhull. See Qhull manual     for details. (",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._qhull.HalfspaceIntersection.__init__",
                    "defaultValue": "scipy.spatial._qhull.HalfspaceIntersection.__init__",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "HalfspaceIntersection.add_halfspaces",
            "description": "add_halfspaces(halfspaces, restart=False)\n    \n    Process a set of additional new halfspaces.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2eeb31096e013aba6918027a420ca98281b41498b709c148a44334e5320e94c3",
            "fields": [
                {
                    "name": "restart",
                    "value": false,
                    "defaultValue": false,
                    "description": "bool, optional     Whether to restart processing from scratch, rather than     adding halfspaces incrementally. ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._qhull.HalfspaceIntersection.add_halfspaces",
                    "defaultValue": "scipy.spatial._qhull.HalfspaceIntersection.add_halfspaces",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "KDTree.__init__",
            "description": "No description found\nkd-tree for quick nearest-neighbor lookup.\n    \n    This class provides an index into a set of k-dimensional points\n    which can be used to rapidly look up the nearest neighbors of any\n    point.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ba9bdadbf520a969523287c1ff59a09f9cf4477753cce0b44009bbbb643dc22f",
            "fields": [
                {
                    "name": "leafsize",
                    "value": 10,
                    "defaultValue": 10,
                    "description": "positive int     The number of points at which the algorithm switches over to     brute-force. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "compact_nodes",
                    "value": true,
                    "defaultValue": true,
                    "description": "bool, optional     If True, the kd-tree is built to shrink the hyperrectangles to     the actual data range. This usually gives a more compact tree that     is robust against degenerated input data and gives faster queries     at the expense of longer build time. ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "copy_data",
                    "value": false,
                    "defaultValue": false,
                    "description": "bool, optional     If True the data is always copied to protect the kd-tree against     data corruption. ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "balanced_tree",
                    "value": true,
                    "defaultValue": true,
                    "description": "bool, optional     If True, the median is used to split the hyperrectangles instead of     the midpoint. This usually gives a more compact tree and     faster queries at the expense of longer build time. ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "boxsize",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like or scalar, optional     Apply a m-d toroidal topology to the KDTree.. The topology is generated     by :math:`x_i + n_i L_i` where :math:`n_i` are integers and :math:`L_i`     is the boxsize along i-th dimension. The input data shall be wrapped     into :math:`[0, L_i)`. A ValueError is raised if any of the data is     outside of this bound.  Notes ----- The algorithm used is described in Maneewongvatana and Mount 1999. The general idea is that the kd-tree is a binary tree, each of whose nodes represents an axis-aligned hyperrectangle. Each node specifies an axis and splits the set of points based on whether their coordinate along that axis is greater than or less than a particular value.  During construction, the axis and splitting point are chosen by the \"sliding midpoint\" rule, which ensures that the cells do not all become long and thin.  The tree can be queried for the r closest neighbors of any given point (optionally returning only those within some maximum distance of the point). It can also be queried, with a substantial gain in efficiency, for the r approximate closest neighbors.  For large dimensions (20 is already large) do not expect this to run significantly faster than brute force. High-dimensional nearest-neighbor queries are a substantial open problem in computer science.  Attributes ---------- ",
                    "type": "array_like",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._kdtree.KDTree.__init__",
                    "defaultValue": "scipy.spatial._kdtree.KDTree.__init__",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "KDTree.count_neighbors",
            "description": "Count how many nearby pairs can be formed.\n    \n    Count the number of pairs ``(x1,x2)`` can be formed, with ``x1`` drawn\n    from ``self`` and ``x2`` drawn from ``other``, and where\n    ``distance(x1, x2, p) <= r``.\n    \n    Data points on ``self`` and ``other`` are optionally weighted by the\n    ``weights`` argument. (See below)\n    \n    This is adapted from the \"two-point correlation\" algorithm described by\n    Gray and Moore [1]_.  See notes for further discussion.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "bb90fdbeb4fb1c56f04aa70a7084bdbd8983862dbaa9d925696de4fb1c1555e9",
            "fields": [
                {
                    "name": "p",
                    "value": 2.0,
                    "defaultValue": 2.0,
                    "description": "float, optional     1<=p<=infinity.     Which Minkowski p-norm to use.     Default 2.0.     A finite large p may cause a ValueError if overflow can occur. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "weights",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "tuple, array_like, or None, optional     If None, the pair-counting is unweighted.     If given as a tuple, weights[0] is the weights of points in     ``self``, and weights[1] is the weights of points in ``other``;     either can be None to indicate the points are unweighted.     If given as an array_like, weights is the weights of points in     ``self`` and ``other``. For this to make sense, ``self`` and     ``other`` must be the same tree. If ``self`` and ``other`` are two     different trees, a ``ValueError`` is raised.     ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "cumulative",
                    "value": true,
                    "defaultValue": true,
                    "description": "bool, optional     Whether the returned counts are cumulative. When cumulative is set     to ``False`` the algorithm is optimized to work with a large number     of bins (>10) specified by ``r``. When ``cumulative`` is set to     True, the algorithm is optimized to work with a small number of     ``r``. ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._kdtree.KDTree.count_neighbors",
                    "defaultValue": "scipy.spatial._kdtree.KDTree.count_neighbors",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "KDTree.query",
            "description": "Query the kd-tree for nearest neighbors.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9ea759f39b2ea25984e8eca7a0565a9da15576447400f887ef4fa03db13a335d",
            "fields": [
                {
                    "name": "k",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "int or Sequence[int], optional     Either the number of nearest neighbors to return, or a list of the     k-th nearest neighbors to return, starting from 1. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "eps",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "nonnegative float, optional     Return approximate nearest neighbors; the kth returned value     is guaranteed to be no further than (1+eps) times the     distance to the real kth nearest neighbor. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "p",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "float, 1<=p<=infinity, optional     Which Minkowski p-norm to use.     1 is the sum-of-absolute-values distance (\"Manhattan\" distance).     2 is the usual Euclidean distance.     infinity is the maximum-coordinate-difference distance.     A large, finite p may cause a ValueError if overflow can occur. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "distance_upper_bound",
                    "value": "inf",
                    "defaultValue": "inf",
                    "description": "nonnegative float, optional     Return only neighbors within this distance. This is used to prune     tree searches, so if you are doing a series of nearest-neighbor     queries, it may help to supply the distance to the nearest neighbor     of the most recent point. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "workers",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "int, optional     Number of workers to use for parallel processing. If -1 is given     all CPU threads are used. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._kdtree.KDTree.query",
                    "defaultValue": "scipy.spatial._kdtree.KDTree.query",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "KDTree.query_ball_point",
            "description": "Find all points within distance r of point(s) x.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "003ed1b5c9ac5d119f0ece746372597beb117f7f1e88040e999547d6eeb7d93a",
            "fields": [
                {
                    "name": "p",
                    "value": 2.0,
                    "defaultValue": 2.0,
                    "description": "float, optional     Which Minkowski p-norm to use.  Should be in the range [1, inf].     A finite large p may cause a ValueError if overflow can occur. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "eps",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "nonnegative float, optional     Approximate search. Branches of the tree are not explored if their     nearest points are further than ``r / (1 + eps)``, and branches are     added in bulk if their furthest points are nearer than     ``r * (1 + eps)``. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "workers",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "int, optional     Number of jobs to schedule for parallel processing. If -1 is given     all processors are used. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "return_sorted",
                    "value": null,
                    "defaultValue": null,
                    "description": "bool, optional     Sorts returned indicies if True and does not sort them if False. If     None, does not sort single point queries, but does sort     multi-point queries which was the behavior before this option     was added.      .. versionadded:: 1.6.0 ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "return_length",
                    "value": false,
                    "defaultValue": false,
                    "description": "bool, optional     Return the number of points inside the radius instead of a list     of the indices.      .. versionadded:: 1.6.0 ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._kdtree.KDTree.query_ball_point",
                    "defaultValue": "scipy.spatial._kdtree.KDTree.query_ball_point",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "KDTree.query_ball_tree",
            "description": "Find all pairs of points between `self` and `other` whose distance is\n    at most r.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "769e2d3b4d170f78f70553ec711daf2fe25a4fd2a4e8636c21d58c388e749268",
            "fields": [
                {
                    "name": "p",
                    "value": 2.0,
                    "defaultValue": 2.0,
                    "description": "float, optional     Which Minkowski norm to use.  `p` has to meet the condition     ``1 <= p <= infinity``. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "eps",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "float, optional     Approximate search.  Branches of the tree are not explored     if their nearest points are further than ``r/(1+eps)``, and     branches are added in bulk if their furthest points are nearer     than ``r * (1+eps)``.  `eps` has to be non-negative. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._kdtree.KDTree.query_ball_tree",
                    "defaultValue": "scipy.spatial._kdtree.KDTree.query_ball_tree",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "KDTree.query_pairs",
            "description": "Find all pairs of points in `self` whose distance is at most r.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "651c831ead75ac7027d1b42b26c457d6ab0b2801009cc9c8eae53e22621b3e6b",
            "fields": [
                {
                    "name": "p",
                    "value": 2.0,
                    "defaultValue": 2.0,
                    "description": "float, optional     Which Minkowski norm to use.  `p` has to meet the condition     ``1 <= p <= infinity``. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "eps",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "float, optional     Approximate search.  Branches of the tree are not explored     if their nearest points are further than ``r/(1+eps)``, and     branches are added in bulk if their furthest points are nearer     than ``r * (1+eps)``.  `eps` has to be non-negative. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_type",
                    "value": "set",
                    "defaultValue": "set",
                    "description": "string, optional     Choose the output container, 'set' or 'ndarray'. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._kdtree.KDTree.query_pairs",
                    "defaultValue": "scipy.spatial._kdtree.KDTree.query_pairs",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "KDTree.sparse_distance_matrix",
            "description": "Compute a sparse distance matrix.\n    \n    Computes a distance matrix between two KDTrees, leaving as zero\n    any distance greater than max_distance.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "af06535c153004340846695213c8ea3a05bd0906b31d10604dfc684ac254f171",
            "fields": [
                {
                    "name": "p",
                    "value": 2.0,
                    "defaultValue": 2.0,
                    "description": "float, 1<=p<=infinity     Which Minkowski p-norm to use.     A finite large p may cause a ValueError if overflow can occur.  ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_type",
                    "value": "dok_matrix",
                    "defaultValue": "dok_matrix",
                    "description": "string, optional     Which container to use for output data. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._kdtree.KDTree.sparse_distance_matrix",
                    "defaultValue": "scipy.spatial._kdtree.KDTree.sparse_distance_matrix",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Rectangle.__init__",
            "description": "Construct a hyperrectangle.\nHyperrectangle class.\n    \n    Represents a Cartesian product of intervals.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9a92d099276200c57019a65c4996ad0e13775454dd04cbd4864c1473d4a181de",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._kdtree.Rectangle.__init__",
                    "defaultValue": "scipy.spatial._kdtree.Rectangle.__init__",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Rectangle.max_distance_point",
            "description": "Return the maximum distance between input and points in the hyperrectangle.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "43cbf8e30269c5e74a182739a4155823e25d7c23b6622aed0c26dd36cff87906",
            "fields": [
                {
                    "name": "p",
                    "value": 2.0,
                    "defaultValue": 2.0,
                    "description": "float, optional     Input.",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._kdtree.Rectangle.max_distance_point",
                    "defaultValue": "scipy.spatial._kdtree.Rectangle.max_distance_point",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Rectangle.max_distance_rectangle",
            "description": "Compute the maximum distance between points in the two hyperrectangles.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "681904015b02c13e7c56c6767e21294905443129c61db5106f953f29fd9a614c",
            "fields": [
                {
                    "name": "p",
                    "value": 2.0,
                    "defaultValue": 2.0,
                    "description": "float, optional     Input.",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._kdtree.Rectangle.max_distance_rectangle",
                    "defaultValue": "scipy.spatial._kdtree.Rectangle.max_distance_rectangle",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Rectangle.min_distance_point",
            "description": "Return the minimum distance between input and points in the\n    hyperrectangle.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9ae26fe11c1e2a44519311721328e3620499f51e380bbe5d10e14a09d690f867",
            "fields": [
                {
                    "name": "p",
                    "value": 2.0,
                    "defaultValue": 2.0,
                    "description": "float, optional     Input.",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._kdtree.Rectangle.min_distance_point",
                    "defaultValue": "scipy.spatial._kdtree.Rectangle.min_distance_point",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Rectangle.min_distance_rectangle",
            "description": "Compute the minimum distance between points in the two hyperrectangles.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6beeca0b505acbc0124b18e0544c02922dda0c3e030dfb8079acb3c01035019e",
            "fields": [
                {
                    "name": "p",
                    "value": 2.0,
                    "defaultValue": 2.0,
                    "description": "float     Input.",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._kdtree.Rectangle.min_distance_rectangle",
                    "defaultValue": "scipy.spatial._kdtree.Rectangle.min_distance_rectangle",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Rectangle.split",
            "description": "Produce two hyperrectangles by splitting.\n    \n    In general, if you need to compute maximum and minimum\n    distances to the children, it can be done more efficiently\n    by updating the maximum and minimum distances to the parent.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "87302c8f55e024417d947d699d6c43558a776252bc6dd4fb7f6e78f21041ab74",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._kdtree.Rectangle.split",
                    "defaultValue": "scipy.spatial._kdtree.Rectangle.split",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Rectangle.volume",
            "description": "Total volume.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "29648e4180e5d6350570d788e1a8a42733d1c1d76110652a70b4c96e35fb1198",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._kdtree.Rectangle.volume",
                    "defaultValue": "scipy.spatial._kdtree.Rectangle.volume",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "SphericalVoronoi.__init__",
            "description": "No description found\nVoronoi diagrams on the surface of a sphere.\n    \n    .. versionadded:: 0.18.0",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "0733270db6c4be815eb0bb058fef68a306042e9f404d20ef4eb024f297086221",
            "fields": [
                {
                    "name": "radius",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "double     radius of the sphere ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "center",
                    "value": null,
                    "defaultValue": null,
                    "description": "double array of shape (ndim,)     center of the sphere ",
                    "type": "double",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "threshold",
                    "value": 1e-06,
                    "defaultValue": 1e-06,
                    "description": "float     Threshold for detecting duplicate points and     mismatches between points and sphere parameters.     (",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._spherical_voronoi.SphericalVoronoi.__init__",
                    "defaultValue": "scipy.spatial._spherical_voronoi.SphericalVoronoi.__init__",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "SphericalVoronoi.calculate_areas",
            "description": "Calculates the areas of the Voronoi regions.\n    \n    For 2D point sets, the regions are circular arcs. The sum of the areas\n    is `2 * pi * radius`.\n    \n    For 3D point sets, the regions are spherical polygons. The sum of the\n    areas is `4 * pi * radius**2`.\n    \n    .. versionadded:: 1.5.0\n    \n    Returns\n    -------\n    areas : double array of shape (npoints,)\n        The areas of the Voronoi regions.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9b7dd1913540d35e01537c35c08bc83cb572c0faaf4982f20c7bcda3df341ed6",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._spherical_voronoi.SphericalVoronoi.calculate_areas",
                    "defaultValue": "scipy.spatial._spherical_voronoi.SphericalVoronoi.calculate_areas",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "SphericalVoronoi.sort_vertices_of_regions",
            "description": "Sort indices of the vertices to be (counter-)clockwise ordered.\n    \n    Raises\n    ------\n    TypeError\n        If the points are not three-dimensional.\n    \n    Notes\n    -----\n    For each region in regions, it sorts the indices of the Voronoi\n    vertices such that the resulting points are in a clockwise or\n    counterclockwise order around the generator point.\n    \n    This is done as follows: Recall that the n-th region in regions\n    surrounds the n-th generator in points and that the k-th\n    Voronoi vertex in vertices is the circumcenter of the k-th triangle\n    in self._simplices.  For each region n, we choose the first triangle\n    (=Voronoi vertex) in self._simplices and a vertex of that triangle\n    not equal to the center n. These determine a unique neighbor of that\n    triangle, which is then chosen as the second triangle. The second\n    triangle will have a unique vertex not equal to the current vertex or\n    the center. This determines a unique neighbor of the second triangle,\n    which is then chosen as the third triangle and so forth. We proceed\n    through all the triangles (=Voronoi vertices) belonging to the\n    generator in points and obtain a sorted version of the vertices\n    of its surrounding region.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c80b62838630520cbdbca3b27d931478c932eebb3cca05765684517f2bb8c36d",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._spherical_voronoi.SphericalVoronoi.sort_vertices_of_regions",
                    "defaultValue": "scipy.spatial._spherical_voronoi.SphericalVoronoi.sort_vertices_of_regions",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Voronoi.__init__",
            "description": "No description found\nVoronoi(points, furthest_site=False, incremental=False, qhull_options=None)\n    \n    Voronoi diagrams in N dimensions.\n    \n    .. versionadded:: 0.12.0",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e5f0ec9632e155e4224751a9c30774fea6246a62dbbb15b08e977d7a93bba3bf",
            "fields": [
                {
                    "name": "furthest_site",
                    "value": false,
                    "defaultValue": false,
                    "description": "bool, optional     Whether to compute a furthest-site Voronoi diagram. ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "incremental",
                    "value": false,
                    "defaultValue": false,
                    "description": "bool, optional     Allow adding new points incrementally. This takes up some additional     resources. ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "qhull_options",
                    "value": null,
                    "defaultValue": null,
                    "description": "str, optional     Additional options to pass to Qhull. See Qhull manual     for details. (",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._qhull.Voronoi.__init__",
                    "defaultValue": "scipy.spatial._qhull.Voronoi.__init__",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Voronoi.add_points",
            "description": "add_points(points, restart=False)\n    \n    Process a set of additional new points.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "91ab092c97ae17dd1866a7dd43641aed3863372ffe1586581629963db34606b3",
            "fields": [
                {
                    "name": "restart",
                    "value": false,
                    "defaultValue": false,
                    "description": "bool, optional     Whether to restart processing from scratch, rather than     adding points incrementally. ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._qhull.Voronoi.add_points",
                    "defaultValue": "scipy.spatial._qhull.Voronoi.add_points",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cKDTree.__init__",
            "description": "No description found\ncKDTree(data, leafsize=16, compact_nodes=True, copy_data=False,\n            balanced_tree=True, boxsize=None)\n    \n    kd-tree for quick nearest-neighbor lookup\n    \n    This class provides an index into a set of k-dimensional points\n    which can be used to rapidly look up the nearest neighbors of any\n    point.\n    \n    .. note::\n       `cKDTree` is functionally identical to `KDTree`. Prior to SciPy\n       v1.6.0, `cKDTree` had better performance and slightly different\n       functionality but now the two names exist only for\n       backward-compatibility reasons. If compatibility with SciPy < 1.6 is not\n       a concern, prefer `KDTree`.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "bab97f17dbc5b6e88fd59332ab26bd835cc95b3d6ac7f78e5517f19bf0ef2505",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.cKDTree.__init__",
                    "defaultValue": "scipy.spatial.cKDTree.__init__",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cKDTree.count_neighbors",
            "description": "\nCount how many nearby pairs can be formed.\n\nCount the number of pairs ``(x1,x2)`` can be formed, with ``x1`` drawn\nfrom ``self`` and ``x2`` drawn from ``other``, and where\n``distance(x1, x2, p) <= r``.\n\nData points on ``self`` and ``other`` are optionally weighted by the\n``weights`` argument. (See below)\n\nThis is adapted from the \"two-point correlation\" algorithm described by\nGray and Moore [1]_.  See notes for further discussion.\n\nParameters\n----------\nother : cKDTree instance\n    The other tree to draw points from, can be the same tree as self.\nr : float or one-dimensional array of floats\n    The radius to produce a count for. Multiple radii are searched with\n    a single tree traversal.\n    If the count is non-cumulative(``cumulative=False``), ``r`` defines\n    the edges of the bins, and must be non-decreasing.\np : float, optional\n    1<=p<=infinity.\n    Which Minkowski p-norm to use.\n    Default 2.0.\n    A finite large p may cause a ValueError if overflow can occur.\nweights : tuple, array_like, or None, optional\n    If None, the pair-counting is unweighted.\n    If given as a tuple, weights[0] is the weights of points in ``self``, and\n    weights[1] is the weights of points in ``other``; either can be None to\n    indicate the points are unweighted.\n    If given as an array_like, weights is the weights of points in ``self``\n    and ``other``. For this to make sense, ``self`` and ``other`` must be the\n    same tree. If ``self`` and ``other`` are two different trees, a ``ValueError``\n    is raised.\n    Default: None\ncumulative : bool, optional\n    Whether the returned counts are cumulative. When cumulative is set to ``False``\n    the algorithm is optimized to work with a large number of bins (>10) specified\n    by ``r``. When ``cumulative`` is set to True, the algorithm is optimized to work\n    with a small number of ``r``. Default: True\n\nReturns\n-------\nresult : scalar or 1-D array\n    The number of pairs. For unweighted counts, the result is integer.\n    For weighted counts, the result is float.\n    If cumulative is False, ``result[i]`` contains the counts with\n    ``(-inf if i == 0 else r[i-1]) < R <= r[i]``\n\nNotes\n-----\nPair-counting is the basic operation used to calculate the two point\ncorrelation functions from a data set composed of position of objects.\n\nTwo point correlation function measures the clustering of objects and\nis widely used in cosmology to quantify the large scale structure\nin our Universe, but it may be useful for data analysis in other fields\nwhere self-similar assembly of objects also occur.\n\nThe Landy-Szalay estimator for the two point correlation function of\n``D`` measures the clustering signal in ``D``. [2]_\n\nFor example, given the position of two sets of objects,\n\n- objects ``D`` (data) contains the clustering signal, and\n\n- objects ``R`` (random) that contains no signal,\n\n.. math::\n\n     \\xi(r) = \\frac{<D, D> - 2 f <D, R> + f^2<R, R>}{f^2<R, R>},\n\nwhere the brackets represents counting pairs between two data sets\nin a finite bin around ``r`` (distance), corresponding to setting\n`cumulative=False`, and ``f = float(len(D)) / float(len(R))`` is the\nratio between number of objects from data and random.\n\nThe algorithm implemented here is loosely based on the dual-tree\nalgorithm described in [1]_. We switch between two different\npair-cumulation scheme depending on the setting of ``cumulative``.\nThe computing time of the method we use when for\n``cumulative == False`` does not scale with the total number of bins.\nThe algorithm for ``cumulative == True`` scales linearly with the\nnumber of bins, though it is slightly faster when only\n1 or 2 bins are used. [5]_.\n\nAs an extension to the naive pair-counting,\nweighted pair-counting counts the product of weights instead\nof number of pairs.\nWeighted pair-counting is used to estimate marked correlation functions\n([3]_, section 2.2),\nor to properly calculate the average of data per distance bin\n(e.g. [4]_, section 2.1 on redshift).\n\n.. [1] Gray and Moore,\n       \"N-body problems in statistical learning\",\n       Mining the sky, 2000, :arxiv:`astro-ph/0012333`\n\n.. [2] Landy and Szalay,\n       \"Bias and variance of angular correlation functions\",\n       The Astrophysical Journal, 1993, :doi:`10.1086/172900`\n\n.. [3] Sheth, Connolly and Skibba,\n       \"Marked correlations in galaxy formation models\",\n       2005, :arxiv:`astro-ph/0511773`\n\n.. [4] Hawkins, et al.,\n       \"The 2dF Galaxy Redshift Survey: correlation functions,\n       peculiar velocities and the matter density of the Universe\",\n       Monthly Notices of the Royal Astronomical Society, 2002,\n       :doi:`10.1046/j.1365-2966.2003.07063.x`\n\n.. [5] https://github.com/scipy/scipy/pull/5647#issuecomment-168474926\n\nExamples\n--------\nYou can count neighbors number between two kd-trees within a distance:\n\n>>> import numpy as np\n>>> from scipy.spatial import cKDTree\n>>> rng = np.random.default_rng()\n>>> points1 = rng.random((5, 2))\n>>> points2 = rng.random((5, 2))\n>>> kd_tree1 = cKDTree(points1)\n>>> kd_tree2 = cKDTree(points2)\n>>> kd_tree1.count_neighbors(kd_tree2, 0.2)\n1\n\nThis number is same as the total pair number calculated by\n`query_ball_tree`:\n\n>>> indexes = kd_tree1.query_ball_tree(kd_tree2, r=0.2)\n>>> sum([len(i) for i in indexes])\n1",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b3e82a9fe4642e64e001046173877ec88f0f96c84a51c4dd34ddafb8c4b681b4",
            "fields": [
                {
                    "name": "other",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "cKDTree instance     The other tree to draw points from, can be the same tree as self. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "r",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or one-dimensional array of floats     The radius to produce a count for. Multiple radii are searched with     a single tree traversal.     If the count is non-cumulative(``cumulative=False``), ``r`` defines     the edges of the bins, and must be non-decreasing. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "p",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float, optional     1<=p<=infinity.     Which Minkowski p-norm to use.     Default 2.0.     A finite large p may cause a ValueError if overflow can occur. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "weights",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "tuple, array_like, or None, optional     If None, the pair-counting is unweighted.     If given as a tuple, weights[0] is the weights of points in ``self``, and     weights[1] is the weights of points in ``other``; either can be None to     indicate the points are unweighted.     If given as an array_like, weights is the weights of points in ``self``     and ``other``. For this to make sense, ``self`` and ``other`` must be the     same tree. If ``self`` and ``other`` are two different trees, a ``ValueError``     is raised.     ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "Default",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "True ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "cumulative",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "bool, optional     Whether the returned counts are cumulative. When cumulative is set to ``False``     the algorithm is optimized to work with a large number of bins (>10) specified     by ``r``. When ``cumulative`` is set to True, the algorithm is optimized to work     with a small number of ``r``. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.cKDTree.count_neighbors",
                    "defaultValue": "scipy.spatial.cKDTree.count_neighbors",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cKDTree.query",
            "description": "\nQuery the kd-tree for nearest neighbors\n\nParameters\n----------\nx : array_like, last dimension self.m\n    An array of points to query.\nk : list of integer or integer\n    The list of k-th nearest neighbors to return. If k is an\n    integer it is treated as a list of [1, ... k] (range(1, k+1)).\n    Note that the counting starts from 1.\neps : non-negative float\n    Return approximate nearest neighbors; the k-th returned value\n    is guaranteed to be no further than (1+eps) times the\n    distance to the real k-th nearest neighbor.\np : float, 1<=p<=infinity\n    Which Minkowski p-norm to use.\n    1 is the sum-of-absolute-values \"Manhattan\" distance\n    2 is the usual Euclidean distance\n    infinity is the maximum-coordinate-difference distance\n    A finite large p may cause a ValueError if overflow can occur.\ndistance_upper_bound : nonnegative float\n    Return only neighbors within this distance.  This is used to prune\n    tree searches, so if you are doing a series of nearest-neighbor\n    queries, it may help to supply the distance to the nearest neighbor\n    of the most recent point.\nworkers : int, optional\n    Number of workers to use for parallel processing. If -1 is given\n    all CPU threads are used. Default: 1.\n\n    .. versionchanged:: 1.9.0\n       The \"n_jobs\" argument was renamed \"workers\". The old name\n       \"n_jobs\" was deprecated in SciPy 1.6.0 and was removed in\n       SciPy 1.9.0.\n\nReturns\n-------\nd : array of floats\n    The distances to the nearest neighbors.\n    If ``x`` has shape ``tuple+(self.m,)``, then ``d`` has shape ``tuple+(k,)``.\n    When k == 1, the last dimension of the output is squeezed.\n    Missing neighbors are indicated with infinite distances.\ni : ndarray of ints\n    The index of each neighbor in ``self.data``.\n    If ``x`` has shape ``tuple+(self.m,)``, then ``i`` has shape ``tuple+(k,)``.\n    When k == 1, the last dimension of the output is squeezed.\n    Missing neighbors are indicated with ``self.n``.\n\nNotes\n-----\nIf the KD-Tree is periodic, the position ``x`` is wrapped into the\nbox.\n\nWhen the input k is a list, a query for arange(max(k)) is performed, but\nonly columns that store the requested values of k are preserved. This is\nimplemented in a manner that reduces memory usage.\n\nExamples\n--------\n\n>>> import numpy as np\n>>> from scipy.spatial import cKDTree\n>>> x, y = np.mgrid[0:5, 2:8]\n>>> tree = cKDTree(np.c_[x.ravel(), y.ravel()])\n\nTo query the nearest neighbours and return squeezed result, use\n\n>>> dd, ii = tree.query([[0, 0], [2.2, 2.9]], k=1)\n>>> print(dd, ii, sep='\\n')\n[2.         0.2236068]\n[ 0 13]\n\nTo query the nearest neighbours and return unsqueezed result, use\n\n>>> dd, ii = tree.query([[0, 0], [2.2, 2.9]], k=[1])\n>>> print(dd, ii, sep='\\n')\n[[2.        ]\n [0.2236068]]\n[[ 0]\n [13]]\n\nTo query the second nearest neighbours and return unsqueezed result,\nuse\n\n>>> dd, ii = tree.query([[0, 0], [2.2, 2.9]], k=[2])\n>>> print(dd, ii, sep='\\n')\n[[2.23606798]\n [0.80622577]]\n[[ 6]\n [19]]\n\nTo query the first and second nearest neighbours, use\n\n>>> dd, ii = tree.query([[0, 0], [2.2, 2.9]], k=2)\n>>> print(dd, ii, sep='\\n')\n[[2.         2.23606798]\n [0.2236068  0.80622577]]\n[[ 0  6]\n [13 19]]\n\nor, be more specific\n\n>>> dd, ii = tree.query([[0, 0], [2.2, 2.9]], k=[1, 2])\n>>> print(dd, ii, sep='\\n')\n[[2.         2.23606798]\n [0.2236068  0.80622577]]\n[[ 0  6]\n [13 19]]",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9b735954f1e498a77a371518a96208f2ee0b53a2c170ba72873b2613bb0bb110",
            "fields": [
                {
                    "name": "x",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "array_like, last dimension self.m     An array of points to query. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "k",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "list of integer or integer     The list of k-th nearest neighbors to return. If k is an     integer it is treated as a list of [1, ... k] (range(1, k+1)).     Note that the counting starts from 1. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "eps",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "non-negative float     Return approximate nearest neighbors; the k-th returned value     is guaranteed to be no further than (1+eps) times the     distance to the real k-th nearest neighbor. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "p",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float, 1<=p<=infinity     Which Minkowski p-norm to use.     1 is the sum-of-absolute-values \"Manhattan\" distance     2 is the usual Euclidean distance     infinity is the maximum-coordinate-difference distance     A finite large p may cause a ValueError if overflow can occur. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "distance_upper_bound",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "nonnegative float     Return only neighbors within this distance.  This is used to prune     tree searches, so if you are doing a series of nearest-neighbor     queries, it may help to supply the distance to the nearest neighbor     of the most recent point. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "workers",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int, optional     Number of workers to use for parallel processing. If -1 is given     all CPU threads are used. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "Default",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "1.      .. versionchanged:: 1.9.0        The \"n_jobs\" argument was renamed \"workers\". The old name        \"n_jobs\" was deprecated in SciPy 1.6.0 and was removed in        SciPy 1.9.0. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.cKDTree.query",
                    "defaultValue": "scipy.spatial.cKDTree.query",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cKDTree.query_ball_point",
            "description": "\nFind all points within distance r of point(s) x.\n\nParameters\n----------\nx : array_like, shape tuple + (self.m,)\n    The point or points to search for neighbors of.\nr : array_like, float\n    The radius of points to return, shall broadcast to the length of x.\np : float, optional\n    Which Minkowski p-norm to use.  Should be in the range [1, inf].\n    A finite large p may cause a ValueError if overflow can occur.\neps : nonnegative float, optional\n    Approximate search. Branches of the tree are not explored if their\n    nearest points are further than ``r / (1 + eps)``, and branches are\n    added in bulk if their furthest points are nearer than\n    ``r * (1 + eps)``.\nworkers : int, optional\n    Number of jobs to schedule for parallel processing. If -1 is given\n    all processors are used. Default: 1.\n\n    .. versionchanged:: 1.9.0\n       The \"n_jobs\" argument was renamed \"workers\". The old name\n       \"n_jobs\" was deprecated in SciPy 1.6.0 and was removed in\n       SciPy 1.9.0.\n\nreturn_sorted : bool, optional\n    Sorts returned indicies if True and does not sort them if False. If\n    None, does not sort single point queries, but does sort\n    multi-point queries which was the behavior before this option\n    was added.\n\n    .. versionadded:: 1.2.0\nreturn_length: bool, optional\n    Return the number of points inside the radius instead of a list\n    of the indices.\n    .. versionadded:: 1.3.0\n\nReturns\n-------\nresults : list or array of lists\n    If `x` is a single point, returns a list of the indices of the\n    neighbors of `x`. If `x` is an array of points, returns an object\n    array of shape tuple containing lists of neighbors.\n\nNotes\n-----\nIf you have many points whose neighbors you want to find, you may save\nsubstantial amounts of time by putting them in a cKDTree and using\nquery_ball_tree.\n\nExamples\n--------\n>>> from scipy import spatial\n>>> x, y = np.mgrid[0:4, 0:4]\n>>> points = np.c_[x.ravel(), y.ravel()]\n>>> tree = spatial.cKDTree(points)\n>>> tree.query_ball_point([2, 0], 1)\n[4, 8, 9, 12]\n\nQuery multiple points and plot the results:\n\n>>> import matplotlib.pyplot as plt\n>>> points = np.asarray(points)\n>>> plt.plot(points[:,0], points[:,1], '.')\n>>> for results in tree.query_ball_point(([2, 0], [3, 3]), 1):\n...     nearby_points = points[results]\n...     plt.plot(nearby_points[:,0], nearby_points[:,1], 'o')\n>>> plt.margins(0.1, 0.1)\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e5f03df6fa57287f084e48236c7f5b11b26129fbdcc666a2a7ba4d7f94c48621",
            "fields": [
                {
                    "name": "x",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "array_like, shape tuple + (self.m,)     The point or points to search for neighbors of. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "r",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "array_like, float     The radius of points to return, shall broadcast to the length of x. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "p",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float, optional     Which Minkowski p-norm to use.  Should be in the range [1, inf].     A finite large p may cause a ValueError if overflow can occur. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "eps",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "nonnegative float, optional     Approximate search. Branches of the tree are not explored if their     nearest points are further than ``r / (1 + eps)``, and branches are     added in bulk if their furthest points are nearer than     ``r * (1 + eps)``. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "workers",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int, optional     Number of jobs to schedule for parallel processing. If -1 is given     all processors are used. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "Default",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "1.      .. versionchanged:: 1.9.0        The \"n_jobs\" argument was renamed \"workers\". The old name        \"n_jobs\" was deprecated in SciPy 1.6.0 and was removed in        SciPy 1.9.0.  ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "return_sorted",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "bool, optional     Sorts returned indicies if True and does not sort them if False. If     None, does not sort single point queries, but does sort     multi-point queries which was the behavior before this option     was added.      .. versionadded:: 1.2.0 ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "return_length",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "bool, optional     Return the number of points inside the radius instead of a list     of the indices.     .. versionadded:: 1.3.0 ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.cKDTree.query_ball_point",
                    "defaultValue": "scipy.spatial.cKDTree.query_ball_point",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cKDTree.query_ball_tree",
            "description": "\nFind all pairs of points between `self` and `other` whose distance is at most r\n\nParameters\n----------\nother : cKDTree instance\n    The tree containing points to search against.\nr : float\n    The maximum distance, has to be positive.\np : float, optional\n    Which Minkowski norm to use.  `p` has to meet the condition\n    ``1 <= p <= infinity``.\n    A finite large p may cause a ValueError if overflow can occur.\neps : float, optional\n    Approximate search.  Branches of the tree are not explored\n    if their nearest points are further than ``r/(1+eps)``, and\n    branches are added in bulk if their furthest points are nearer\n    than ``r * (1+eps)``.  `eps` has to be non-negative.\n\nReturns\n-------\nresults : list of lists\n    For each element ``self.data[i]`` of this tree, ``results[i]`` is a\n    list of the indices of its neighbors in ``other.data``.\n\nExamples\n--------\nYou can search all pairs of points between two kd-trees within a distance:\n\n>>> import matplotlib.pyplot as plt\n>>> import numpy as np\n>>> from scipy.spatial import cKDTree\n>>> rng = np.random.default_rng()\n>>> points1 = rng.random((15, 2))\n>>> points2 = rng.random((15, 2))\n>>> plt.figure(figsize=(6, 6))\n>>> plt.plot(points1[:, 0], points1[:, 1], \"xk\", markersize=14)\n>>> plt.plot(points2[:, 0], points2[:, 1], \"og\", markersize=14)\n>>> kd_tree1 = cKDTree(points1)\n>>> kd_tree2 = cKDTree(points2)\n>>> indexes = kd_tree1.query_ball_tree(kd_tree2, r=0.2)\n>>> for i in range(len(indexes)):\n...     for j in indexes[i]:\n...         plt.plot([points1[i, 0], points2[j, 0]],\n...             [points1[i, 1], points2[j, 1]], \"-r\")\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "77c7f95317cc09441daa75c69169566c3bdfab74f7ceb2d4d199b0217feed464",
            "fields": [
                {
                    "name": "other",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "cKDTree instance     The tree containing points to search against. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "r",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float     The maximum distance, has to be positive. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "p",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float, optional     Which Minkowski norm to use.  `p` has to meet the condition     ``1 <= p <= infinity``.     A finite large p may cause a ValueError if overflow can occur. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "eps",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float, optional     Approximate search.  Branches of the tree are not explored     if their nearest points are further than ``r/(1+eps)``, and     branches are added in bulk if their furthest points are nearer     than ``r * (1+eps)``.  `eps` has to be non-negative. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.cKDTree.query_ball_tree",
                    "defaultValue": "scipy.spatial.cKDTree.query_ball_tree",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cKDTree.query_pairs",
            "description": "\nFind all pairs of points in `self` whose distance is at most r.\n\nParameters\n----------\nr : positive float\n    The maximum distance.\np : float, optional\n    Which Minkowski norm to use.  ``p`` has to meet the condition\n    ``1 <= p <= infinity``.\n    A finite large p may cause a ValueError if overflow can occur.\neps : float, optional\n    Approximate search.  Branches of the tree are not explored\n    if their nearest points are further than ``r/(1+eps)``, and\n    branches are added in bulk if their furthest points are nearer\n    than ``r * (1+eps)``.  `eps` has to be non-negative.\noutput_type : string, optional\n    Choose the output container, 'set' or 'ndarray'. Default: 'set'\n\nReturns\n-------\nresults : set or ndarray\n    Set of pairs ``(i,j)``, with ``i < j``, for which the corresponding\n    positions are close. If output_type is 'ndarray', an ndarry is\n    returned instead of a set.\n\nExamples\n--------\nYou can search all pairs of points in a kd-tree within a distance:\n\n>>> import matplotlib.pyplot as plt\n>>> import numpy as np\n>>> from scipy.spatial import cKDTree\n>>> rng = np.random.default_rng()\n>>> points = rng.random((20, 2))\n>>> plt.figure(figsize=(6, 6))\n>>> plt.plot(points[:, 0], points[:, 1], \"xk\", markersize=14)\n>>> kd_tree = cKDTree(points)\n>>> pairs = kd_tree.query_pairs(r=0.2)\n>>> for (i, j) in pairs:\n...     plt.plot([points[i, 0], points[j, 0]],\n...             [points[i, 1], points[j, 1]], \"-r\")\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5252707b4d0dd5e96375dd4c9a815f33274314273dfc60e27ad978510c12242f",
            "fields": [
                {
                    "name": "r",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "positive float     The maximum distance. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "p",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float, optional     Which Minkowski norm to use.  ``p`` has to meet the condition     ``1 <= p <= infinity``.     A finite large p may cause a ValueError if overflow can occur. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "eps",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float, optional     Approximate search.  Branches of the tree are not explored     if their nearest points are further than ``r/(1+eps)``, and     branches are added in bulk if their furthest points are nearer     than ``r * (1+eps)``.  `eps` has to be non-negative. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_type",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "string, optional     Choose the output container, 'set' or 'ndarray'. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "Default",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "'set' ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.cKDTree.query_pairs",
                    "defaultValue": "scipy.spatial.cKDTree.query_pairs",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cKDTree.sparse_distance_matrix",
            "description": "\nCompute a sparse distance matrix\n\nComputes a distance matrix between two cKDTrees, leaving as zero\nany distance greater than max_distance.\n\nParameters\n----------\nother : cKDTree\n\nmax_distance : positive float\n\np : float, 1<=p<=infinity\n    Which Minkowski p-norm to use.\n    A finite large p may cause a ValueError if overflow can occur.\n\noutput_type : string, optional\n    Which container to use for output data. Options: 'dok_matrix',\n    'coo_matrix', 'dict', or 'ndarray'. Default: 'dok_matrix'.\n\nReturns\n-------\nresult : dok_matrix, coo_matrix, dict or ndarray\n    Sparse matrix representing the results in \"dictionary of keys\"\n    format. If a dict is returned the keys are (i,j) tuples of indices.\n    If output_type is 'ndarray' a record array with fields 'i', 'j',\n    and 'v' is returned,\n\nExamples\n--------\nYou can compute a sparse distance matrix between two kd-trees:\n\n>>> import numpy as np\n>>> from scipy.spatial import cKDTree\n>>> rng = np.random.default_rng()\n>>> points1 = rng.random((5, 2))\n>>> points2 = rng.random((5, 2))\n>>> kd_tree1 = cKDTree(points1)\n>>> kd_tree2 = cKDTree(points2)\n>>> sdm = kd_tree1.sparse_distance_matrix(kd_tree2, 0.3)\n>>> sdm.toarray()\narray([[0.        , 0.        , 0.12295571, 0.        , 0.        ],\n   [0.        , 0.        , 0.        , 0.        , 0.        ],\n   [0.28942611, 0.        , 0.        , 0.2333084 , 0.        ],\n   [0.        , 0.        , 0.        , 0.        , 0.        ],\n   [0.24617575, 0.29571802, 0.26836782, 0.        , 0.        ]])\n\nYou can check distances above the `max_distance` are zeros:\n\n>>> from scipy.spatial import distance_matrix\n>>> distance_matrix(points1, points2)\narray([[0.56906522, 0.39923701, 0.12295571, 0.8658745 , 0.79428925],\n   [0.37327919, 0.7225693 , 0.87665969, 0.32580855, 0.75679479],\n   [0.28942611, 0.30088013, 0.6395831 , 0.2333084 , 0.33630734],\n   [0.31994999, 0.72658602, 0.71124834, 0.55396483, 0.90785663],\n   [0.24617575, 0.29571802, 0.26836782, 0.57714465, 0.6473269 ]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6c9b163317bbc4f29c6b78d423a1f245dffa332248b9561e388274541da27458",
            "fields": [
                {
                    "name": "other",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "cKDTree  ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "max_distance",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "positive float  ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "p",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float, 1<=p<=infinity     Which Minkowski p-norm to use.     A finite large p may cause a ValueError if overflow can occur.  ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_type",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "string, optional     Which container to use for output data. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "Options",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "'dok_matrix',     'coo_matrix', 'dict', or 'ndarray'. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "Default",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "'dok_matrix'. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.cKDTree.sparse_distance_matrix",
                    "defaultValue": "scipy.spatial.cKDTree.sparse_distance_matrix",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.spatial.convex_hull_plot_2d",
            "description": "Plot the given convex hull diagram in 2-D",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d5baa60b09dee71c0767b22dff6e2149b855adbce4d86a43a63a5c3174df3a63",
            "fields": [
                {
                    "name": "ax",
                    "value": null,
                    "defaultValue": null,
                    "description": "matplotlib.axes.Axes instance, optional     Axes to plot on ",
                    "type": "matplotlib.axes.Axes",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._plotutils.convex_hull_plot_2d",
                    "defaultValue": "scipy.spatial._plotutils.convex_hull_plot_2d",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.spatial.delaunay_plot_2d",
            "description": "Plot the given Delaunay triangulation in 2-D",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "90ef08fe3aae36ca15df15820ecf10e729aa186fb1d5484a1f2f922759ae0c22",
            "fields": [
                {
                    "name": "ax",
                    "value": null,
                    "defaultValue": null,
                    "description": "matplotlib.axes.Axes instance, optional     Axes to plot on ",
                    "type": "matplotlib.axes.Axes",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._plotutils.delaunay_plot_2d",
                    "defaultValue": "scipy.spatial._plotutils.delaunay_plot_2d",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.spatial.distance_matrix",
            "description": "Compute the distance matrix.\n    \n    Returns the matrix of all pair-wise distances.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e50f8abd9b6a1a681c00fc74dcf25146154a8dd7e100372fc5d63798d403d678",
            "fields": [
                {
                    "name": "p",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "float, 1 <= p <= infinity     Which Minkowski p-norm to use. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "threshold",
                    "value": 1000000,
                    "defaultValue": 1000000,
                    "description": "positive int     If ``M * N * K`` > `threshold`, algorithm uses a Python loop instead     of large temporary arrays. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._kdtree.distance_matrix",
                    "defaultValue": "scipy.spatial._kdtree.distance_matrix",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.spatial.geometric_slerp",
            "description": "Geometric spherical linear interpolation.\n    \n    The interpolation occurs along a unit-radius\n    great circle arc in arbitrary dimensional space.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5e39821cd96509887ec5c2a1531eb447cb4e0c310ba7e770069be7f49d12655d",
            "fields": [
                {
                    "name": "start",
                    "value": null,
                    "defaultValue": null,
                    "description": "(n_dimensions, ) array-like     Single n-dimensional input coordinate in a 1-D array-like     object. `n` must be greater than 1. ",
                    "type": "npt.ArrayLike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "end",
                    "value": null,
                    "defaultValue": null,
                    "description": "(n_dimensions, ) array-like     Single n-dimensional input coordinate in a 1-D array-like     object. `n` must be greater than 1. ",
                    "type": "npt.ArrayLike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "t",
                    "value": null,
                    "defaultValue": null,
                    "description": "float or (n_points,) 1D array-like     A float or 1D array-like of doubles representing interpolation     parameters, with values required in the inclusive interval     between 0 and 1. A common approach is to generate the array     with ``np.linspace(0, 1, n_pts)`` for linearly spaced points.     Ascending, descending, and scrambled orders are permitted. ",
                    "type": "npt.ArrayLike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "tol",
                    "value": 1e-07,
                    "defaultValue": 1e-07,
                    "description": "float     The absolute tolerance for determining if the start and end     coordinates are antipodes. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._geometric_slerp.geometric_slerp",
                    "defaultValue": "scipy.spatial._geometric_slerp.geometric_slerp",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.spatial.minkowski_distance",
            "description": "Compute the L**p distance between two arrays.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ea0bf22128a5550437aa2e316cb3ed2d04ea07ec179c8b38761ab6247df7e276",
            "fields": [
                {
                    "name": "p",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "float, 1 <= p <= infinity     Which Minkowski p-norm to use.  Examples -------- >>> from scipy.spatial import minkowski_distance >>> minkowski_distance([[0,0],[0,0]], [[1,1],[0,1]]) array([ 1.41421356,  1.        ])",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._kdtree.minkowski_distance",
                    "defaultValue": "scipy.spatial._kdtree.minkowski_distance",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.spatial.minkowski_distance_p",
            "description": "Compute the pth power of the L**p distance between two arrays.\n    \n    For efficiency, this function computes the L**p distance but does\n    not extract the pth root. If `p` is 1 or infinity, this is equal to\n    the actual L**p distance.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "abc4d850e7b89097f4572e480e02ba7e912224a1411a14b02fb696dfa6691e25",
            "fields": [
                {
                    "name": "p",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "float, 1 <= p <= infinity     Which Minkowski p-norm to use.  Examples -------- >>> from scipy.spatial import minkowski_distance_p >>> minkowski_distance_p([[0,0],[0,0]], [[1,1],[0,1]]) array([2, 1])",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._kdtree.minkowski_distance_p",
                    "defaultValue": "scipy.spatial._kdtree.minkowski_distance_p",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.spatial.procrustes",
            "description": "Procrustes analysis, a similarity test for two data sets.\n    \n    Each input matrix is a set of points or vectors (the rows of the matrix).\n    The dimension of the space is the number of columns of each matrix. Given\n    two identically sized matrices, procrustes standardizes both such that:\n    \n    - :math:`tr(AA^{T}) = 1`.\n    \n    - Both sets of points are centered around the origin.\n    \n    Procrustes ([1]_, [2]_) then applies the optimal transform to the second\n    matrix (including scaling/dilation, rotations, and reflections) to minimize\n    :math:`M^{2}=\\sum(data1-data2)^{2}`, or the sum of the squares of the\n    pointwise differences between the two input datasets.\n    \n    This function was not designed to handle datasets with different numbers of\n    datapoints (rows).  If two data sets have different dimensionality\n    (different number of columns), simply add columns of zeros to the smaller\n    of the two.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "798cd60d8262362ee286058d01fc5999d7937f435b306171da038af57efc91d6",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._procrustes.procrustes",
                    "defaultValue": "scipy.spatial._procrustes.procrustes",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.spatial.tsearch",
            "description": "\nFind simplices containing the given points. This function does the\nsame thing as `Delaunay.find_simplex`.\n\n.. versionadded:: 0.9\n\nSee Also\n--------\nDelaunay.find_simplex\n\n\nExamples\n--------\n\n>>> import numpy as np\n>>> import matplotlib.pyplot as plt\n>>> from scipy.spatial import Delaunay, delaunay_plot_2d, tsearch\n>>> rng = np.random.default_rng()\n\nThe Delaunay triangulation of a set of random points:\n\n>>> pts = rng.random((20, 2))\n>>> tri = Delaunay(pts)\n>>> _ = delaunay_plot_2d(tri)\n\nFind the simplices containing a given set of points:\n\n>>> loc = rng.uniform(0.2, 0.8, (5, 2))\n>>> s = tsearch(tri, loc)\n>>> plt.triplot(pts[:, 0], pts[:, 1], tri.simplices[s], 'b-', mask=s==-1)\n>>> plt.scatter(loc[:, 0], loc[:, 1], c='r', marker='x')\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "36181067668a1fc8e1cdbd29a1c640c6ecba7d9e8a7391240b7b963dac9cc615",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._qhull.tsearch",
                    "defaultValue": "scipy.spatial._qhull.tsearch",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.spatial.voronoi_plot_2d",
            "description": "Plot the given Voronoi diagram in 2-D",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "0d2c8f58d2cfa4eb0713b1c441a701cec9c141796c5874e590f12354187bdad8",
            "fields": [
                {
                    "name": "ax",
                    "value": null,
                    "defaultValue": null,
                    "description": "matplotlib.axes.Axes instance, optional     Axes to plot on ",
                    "type": "matplotlib.axes.Axes",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial._plotutils.voronoi_plot_2d",
                    "defaultValue": "scipy.spatial._plotutils.voronoi_plot_2d",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Rotation.__init__",
            "description": "No description found\nRotation in 3 dimensions.\n    \n    This class provides an interface to initialize from and represent rotations\n    with:\n    \n    - Quaternions\n    - Rotation Matrices\n    - Rotation Vectors\n    - Modified Rodrigues Parameters\n    - Euler Angles\n    \n    The following operations on rotations are supported:\n    \n    - Application on vectors\n    - Rotation Composition\n    - Rotation Inversion\n    - Rotation Indexing\n    \n    Indexing within a rotation is supported since multiple rotation transforms\n    can be stored within a single `Rotation` instance.\n    \n    To create `Rotation` objects use ``from_...`` methods (see examples below).\n    ``Rotation(...)`` is not supposed to be instantiated directly.\n    \n    Attributes\n    ----------\n    single\n    \n    Methods\n    -------\n    __len__\n    from_quat\n    from_matrix\n    from_rotvec\n    from_mrp\n    from_euler\n    as_quat\n    as_matrix\n    as_rotvec\n    as_mrp\n    as_euler\n    concatenate\n    apply\n    __mul__\n    inv\n    magnitude\n    mean\n    reduce\n    create_group\n    __getitem__\n    identity\n    random\n    align_vectors\n    \n    See Also\n    --------\n    Slerp\n    \n    Notes\n    -----\n    .. versionadded: 1.2.0\n    \n    Examples\n    --------\n    >>> from scipy.spatial.transform import Rotation as R\n    \n    A `Rotation` instance can be initialized in any of the above formats and\n    converted to any of the others. The underlying object is independent of the\n    representation used for initialization.\n    \n    Consider a counter-clockwise rotation of 90 degrees about the z-axis. This\n    corresponds to the following quaternion (in scalar-last format):\n    \n    >>> r = R.from_quat([0, 0, np.sin(np.pi/4), np.cos(np.pi/4)])\n    \n    The rotation can be expressed in any of the other formats:\n    \n    >>> r.as_matrix()\n    array([[ 2.22044605e-16, -1.00000000e+00,  0.00000000e+00],\n    [ 1.00000000e+00,  2.22044605e-16,  0.00000000e+00],\n    [ 0.00000000e+00,  0.00000000e+00,  1.00000000e+00]])\n    >>> r.as_rotvec()\n    array([0.        , 0.        , 1.57079633])\n    >>> r.as_euler('zyx', degrees=True)\n    array([90.,  0.,  0.])\n    \n    The same rotation can be initialized using a rotation matrix:\n    \n    >>> r = R.from_matrix([[0, -1, 0],\n    ...                    [1, 0, 0],\n    ...                    [0, 0, 1]])\n    \n    Representation in other formats:\n    \n    >>> r.as_quat()\n    array([0.        , 0.        , 0.70710678, 0.70710678])\n    >>> r.as_rotvec()\n    array([0.        , 0.        , 1.57079633])\n    >>> r.as_euler('zyx', degrees=True)\n    array([90.,  0.,  0.])\n    \n    The rotation vector corresponding to this rotation is given by:\n    \n    >>> r = R.from_rotvec(np.pi/2 * np.array([0, 0, 1]))\n    \n    Representation in other formats:\n    \n    >>> r.as_quat()\n    array([0.        , 0.        , 0.70710678, 0.70710678])\n    >>> r.as_matrix()\n    array([[ 2.22044605e-16, -1.00000000e+00,  0.00000000e+00],\n           [ 1.00000000e+00,  2.22044605e-16,  0.00000000e+00],\n           [ 0.00000000e+00,  0.00000000e+00,  1.00000000e+00]])\n    >>> r.as_euler('zyx', degrees=True)\n    array([90.,  0.,  0.])\n    \n    The ``from_euler`` method is quite flexible in the range of input formats\n    it supports. Here we initialize a single rotation about a single axis:\n    \n    >>> r = R.from_euler('z', 90, degrees=True)\n    \n    Again, the object is representation independent and can be converted to any\n    other format:\n    \n    >>> r.as_quat()\n    array([0.        , 0.        , 0.70710678, 0.70710678])\n    >>> r.as_matrix()\n    array([[ 2.22044605e-16, -1.00000000e+00,  0.00000000e+00],\n           [ 1.00000000e+00,  2.22044605e-16,  0.00000000e+00],\n           [ 0.00000000e+00,  0.00000000e+00,  1.00000000e+00]])\n    >>> r.as_rotvec()\n    array([0.        , 0.        , 1.57079633])\n    \n    It is also possible to initialize multiple rotations in a single instance\n    using any of the ``from_...`` functions. Here we initialize a stack of 3\n    rotations using the ``from_euler`` method:\n    \n    >>> r = R.from_euler('zyx', [\n    ... [90, 0, 0],\n    ... [0, 45, 0],\n    ... [45, 60, 30]], degrees=True)\n    \n    The other representations also now return a stack of 3 rotations. For\n    example:\n    \n    >>> r.as_quat()\n    array([[0.        , 0.        , 0.70710678, 0.70710678],\n           [0.        , 0.38268343, 0.        , 0.92387953],\n           [0.39190384, 0.36042341, 0.43967974, 0.72331741]])\n    \n    Applying the above rotations onto a vector:\n    \n    >>> v = [1, 2, 3]\n    >>> r.apply(v)\n    array([[-2.        ,  1.        ,  3.        ],\n           [ 2.82842712,  2.        ,  1.41421356],\n           [ 2.24452282,  0.78093109,  2.89002836]])\n    \n    A `Rotation` instance can be indexed and sliced as if it were a single\n    1D array or list:\n    \n    >>> r.as_quat()\n    array([[0.        , 0.        , 0.70710678, 0.70710678],\n           [0.        , 0.38268343, 0.        , 0.92387953],\n           [0.39190384, 0.36042341, 0.43967974, 0.72331741]])\n    >>> p = r[0]\n    >>> p.as_matrix()\n    array([[ 2.22044605e-16, -1.00000000e+00,  0.00000000e+00],\n           [ 1.00000000e+00,  2.22044605e-16,  0.00000000e+00],\n           [ 0.00000000e+00,  0.00000000e+00,  1.00000000e+00]])\n    >>> q = r[1:3]\n    >>> q.as_quat()\n    array([[0.        , 0.38268343, 0.        , 0.92387953],\n           [0.39190384, 0.36042341, 0.43967974, 0.72331741]])\n    \n    In fact it can be converted to numpy.array:\n    \n    >>> r_array = np.asarray(r)\n    >>> r_array.shape\n    (3,)\n    >>> r_array[0].as_matrix()\n    array([[ 2.22044605e-16, -1.00000000e+00,  0.00000000e+00],\n           [ 1.00000000e+00,  2.22044605e-16,  0.00000000e+00],\n           [ 0.00000000e+00,  0.00000000e+00,  1.00000000e+00]])\n    \n    Multiple rotations can be composed using the ``*`` operator:\n    \n    >>> r1 = R.from_euler('z', 90, degrees=True)\n    >>> r2 = R.from_rotvec([np.pi/4, 0, 0])\n    >>> v = [1, 2, 3]\n    >>> r2.apply(r1.apply(v))\n    array([-2.        , -1.41421356,  2.82842712])\n    >>> r3 = r2 * r1 # Note the order\n    >>> r3.apply(v)\n    array([-2.        , -1.41421356,  2.82842712])\n    \n    Finally, it is also possible to invert rotations:\n    \n    >>> r1 = R.from_euler('z', [90, 45], degrees=True)\n    >>> r2 = r1.inv()\n    >>> r2.as_euler('zyx', degrees=True)\n    array([[-90.,   0.,   0.],\n           [-45.,   0.,   0.]])\n    \n    These examples serve as an overview into the `Rotation` class and highlight\n    major functionalities. For more thorough examples of the range of input and\n    output formats supported, consult the individual method's examples.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4c445d8c4c3d7603f1a341d9ed09fd20bd1ba4c9ff8e5e3994d3cdbfd3819a4f",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.transform.Rotation.__init__",
                    "defaultValue": "scipy.spatial.transform.Rotation.__init__",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Rotation.align_vectors",
            "description": "    Vector components observed in initial frame A. Each row of `a`\n    denotes a vector.\nb : array_like, shape (N, 3)\n    Vector components observed in another frame B. Each row of `b`\n    denotes a vector.\nweights : array_like shape (N,), optional\n    Weights describing the relative importance of the vector\n    observations. If None (default), then all values in `weights` are\n    assumed to be 1.\nreturn_sensitivity : bool, optional\n    Whether to return the sensitivity matrix. See Notes for details.\n    Default is False.\n\nReturns\n-------\nestimated_rotation : `Rotation` instance\n    Best estimate of the rotation that transforms `b` to `a`.\nrmsd : float\n    Root mean square distance (weighted) between the given set of\n    vectors after alignment. It is equal to ``sqrt(2 * minimum_loss)``,\n    where ``minimum_loss`` is the loss function evaluated for the\n    found optimal rotation.\nsensitivity_matrix : ndarray, shape (3, 3)\n    Sensitivity matrix of the estimated rotation estimate as explained\n    in Notes. Returned only when `return_sensitivity` is True.\n\nNotes\n-----\nThis method can also compute the sensitivity of the estimated rotation\nto small perturbations of the vector measurements. Specifically we\nconsider the rotation estimate error as a small rotation vector of\nframe A. The sensitivity matrix is proportional to the covariance of\nthis rotation vector assuming that the vectors in `a` was measured with\nerrors significantly less than their lengths. To get the true\ncovariance matrix, the returned sensitivity matrix must be multiplied\nby harmonic mean [3]_ of variance in each observation. Note that\n`weights` are supposed to be inversely proportional to the observation\nvariances to get consistent results. For example, if all vectors are\nmeasured with the same accuracy of 0.01 (`weights` must be all equal),\nthen you should multiple the sensitivity matrix by 0.01**2 to get the\ncovariance.\n\nRefer to [2]_ for more rigorous discussion of the covariance\nestimation.\n\nReferences\n----------\n.. [1] https://en.wikipedia.org/wiki/Kabsch_algorithm\n.. [2] F. Landis Markley,\n        \"Attitude determination using vector observations: a fast\n        optimal matrix algorithm\", Journal of Astronautical Sciences,\n        Vol. 41, No.2, 1993, pp. 261-280.\n.. [3] https://en.wikipedia.org/wiki/Harmonic_mean",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "795fa77079e5212ddc2de5e616e29ee234f87bcf0deef3535801b0589997a196",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.transform.Rotation.align_vectors",
                    "defaultValue": "scipy.spatial.transform.Rotation.align_vectors",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Rotation.apply",
            "description": "    Each `vectors[i]` represents a vector in 3D space. A single vector\n    can either be specified with shape `(3, )` or `(1, 3)`. The number\n    of rotations and number of vectors given must follow standard numpy\n    broadcasting rules: either one of them equals unity or they both\n    equal each other.\ninverse : boolean, optional\n    If True then the inverse of the rotation(s) is applied to the input\n    vectors. Default is False.\n\nReturns\n-------\nrotated_vectors : ndarray, shape (3,) or (N, 3)\n    Result of applying rotation on input vectors.\n    Shape depends on the following cases:\n\n        - If object contains a single rotation (as opposed to a stack\n          with a single rotation) and a single vector is specified with\n          shape ``(3,)``, then `rotated_vectors` has shape ``(3,)``.\n        - In all other cases, `rotated_vectors` has shape ``(N, 3)``,\n          where ``N`` is either the number of rotations or vectors.\n\nExamples\n--------\n>>> from scipy.spatial.transform import Rotation as R\n\nSingle rotation applied on a single vector:\n\n>>> vector = np.array([1, 0, 0])\n>>> r = R.from_rotvec([0, 0, np.pi/2])\n>>> r.as_matrix()\narray([[ 2.22044605e-16, -1.00000000e+00,  0.00000000e+00],\n       [ 1.00000000e+00,  2.22044605e-16,  0.00000000e+00],\n       [ 0.00000000e+00,  0.00000000e+00,  1.00000000e+00]])\n>>> r.apply(vector)\narray([2.22044605e-16, 1.00000000e+00, 0.00000000e+00])\n>>> r.apply(vector).shape\n(3,)\n\nSingle rotation applied on multiple vectors:\n\n>>> vectors = np.array([\n... [1, 0, 0],\n... [1, 2, 3]])\n>>> r = R.from_rotvec([0, 0, np.pi/4])\n>>> r.as_matrix()\narray([[ 0.70710678, -0.70710678,  0.        ],\n       [ 0.70710678,  0.70710678,  0.        ],\n       [ 0.        ,  0.        ,  1.        ]])\n>>> r.apply(vectors)\narray([[ 0.70710678,  0.70710678,  0.        ],\n       [-0.70710678,  2.12132034,  3.        ]])\n>>> r.apply(vectors).shape\n(2, 3)\n\nMultiple rotations on a single vector:\n\n>>> r = R.from_rotvec([[0, 0, np.pi/4], [np.pi/2, 0, 0]])\n>>> vector = np.array([1,2,3])\n>>> r.as_matrix()\narray([[[ 7.07106781e-01, -7.07106781e-01,  0.00000000e+00],\n        [ 7.07106781e-01,  7.07106781e-01,  0.00000000e+00],\n        [ 0.00000000e+00,  0.00000000e+00,  1.00000000e+00]],\n       [[ 1.00000000e+00,  0.00000000e+00,  0.00000000e+00],\n        [ 0.00000000e+00,  2.22044605e-16, -1.00000000e+00],\n        [ 0.00000000e+00,  1.00000000e+00,  2.22044605e-16]]])\n>>> r.apply(vector)\narray([[-0.70710678,  2.12132034,  3.        ],\n       [ 1.        , -3.        ,  2.        ]])\n>>> r.apply(vector).shape\n(2, 3)\n\nMultiple rotations on multiple vectors. Each rotation is applied on the\ncorresponding vector:\n\n>>> r = R.from_euler('zxy', [\n... [0, 0, 90],\n... [45, 30, 60]], degrees=True)\n>>> vectors = [\n... [1, 2, 3],\n... [1, 0, -1]]\n>>> r.apply(vectors)\narray([[ 3.        ,  2.        , -1.        ],\n       [-0.09026039,  1.11237244, -0.86860844]])\n>>> r.apply(vectors).shape\n(2, 3)\n\nIt is also possible to apply the inverse rotation:\n\n>>> r = R.from_euler('zxy', [\n... [0, 0, 90],\n... [45, 30, 60]], degrees=True)\n>>> vectors = [\n... [1, 2, 3],\n... [1, 0, -1]]\n>>> r.apply(vectors, inverse=True)\narray([[-3.        ,  2.        ,  1.        ],\n       [ 1.09533535, -0.8365163 ,  0.3169873 ]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ca78d27a7ed452e3f3ac929c2d1173611c77852a19f361f4ccbe759a7c4b3e06",
            "fields": [
                {
                    "name": "vectors",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "array_like, shape (3,) or (N, 3)     Each `vectors[i]` represents a vector in 3D space. A single vector     can either be specified with shape `(3, )` or `(1, 3)`. The number     of rotations and number of vectors given must follow standard numpy     broadcasting ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "rules",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "either one of them equals unity or they both     equal each other. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "inverse",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "boolean, optional     If True then the inverse of the rotation(s) is applied to the input     vectors. Default is False. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.transform.Rotation.apply",
                    "defaultValue": "scipy.spatial.transform.Rotation.apply",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Rotation.as_euler",
            "description": "    Shape depends on shape of inputs used to initialize object.\n    The returned angles are in the range:\n\n    - First angle belongs to [-180, 180] degrees (both inclusive)\n    - Third angle belongs to [-180, 180] degrees (both inclusive)\n    - Second angle belongs to:\n\n        - [-90, 90] degrees if all axes are different (like xyz)\n        - [0, 180] degrees if first and third axes are the same\n          (like zxz)\n\nReferences\n----------\n.. [1] https://en.wikipedia.org/wiki/Euler_angles#Definition_by_intrinsic_rotations\n.. [2] Malcolm D. Shuster, F. Landis Markley, \"General formula for\n       extraction the Euler angles\", Journal of guidance, control, and\n       dynamics, vol. 29.1, pp. 215-221. 2006\n.. [3] https://en.wikipedia.org/wiki/Gimbal_lock#In_applied_mathematics\n\nExamples\n--------\n>>> from scipy.spatial.transform import Rotation as R\n\nRepresent a single rotation:\n\n>>> r = R.from_rotvec([0, 0, np.pi/2])\n>>> r.as_euler('zxy', degrees=True)\narray([90.,  0.,  0.])\n>>> r.as_euler('zxy', degrees=True).shape\n(3,)\n\nRepresent a stack of single rotation:\n\n>>> r = R.from_rotvec([[0, 0, np.pi/2]])\n>>> r.as_euler('zxy', degrees=True)\narray([[90.,  0.,  0.]])\n>>> r.as_euler('zxy', degrees=True).shape\n(1, 3)\n\nRepresent multiple rotations in a single object:\n\n>>> r = R.from_rotvec([\n... [0, 0, np.pi/2],\n... [0, -np.pi/3, 0],\n... [np.pi/4, 0, 0]])\n>>> r.as_euler('zxy', degrees=True)\narray([[ 90.,   0.,   0.],\n       [  0.,   0., -60.],\n       [  0.,  45.,   0.]])\n>>> r.as_euler('zxy', degrees=True).shape\n(3, 3)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "552a1adec2705f39b56f634fa446d0bb94745bf2a36db613aab5abb31c62a1af",
            "fields": [
                {
                    "name": "seq",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "string, length 3     3 characters belonging to the set {'X', 'Y', 'Z'} for intrinsic     rotations, or {'x', 'y', 'z'} for extrinsic rotations [1]_.     Adjacent axes cannot be the same.     Extrinsic and intrinsic rotations cannot be mixed in one function     call. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "degrees",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "boolean, optional     Returned angles are in degrees if this flag is True, else they are     in radians. Default is False. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.transform.Rotation.as_euler",
                    "defaultValue": "scipy.spatial.transform.Rotation.as_euler",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Rotation.as_matrix",
            "description": "    Shape depends on shape of inputs used for initialization.\n\nReferences\n----------\n.. [1] https://en.wikipedia.org/wiki/Rotation_matrix#In_three_dimensions\n\nExamples\n--------\n>>> from scipy.spatial.transform import Rotation as R\n\nRepresent a single rotation:\n\n>>> r = R.from_rotvec([0, 0, np.pi/2])\n>>> r.as_matrix()\narray([[ 2.22044605e-16, -1.00000000e+00,  0.00000000e+00],\n       [ 1.00000000e+00,  2.22044605e-16,  0.00000000e+00],\n       [ 0.00000000e+00,  0.00000000e+00,  1.00000000e+00]])\n>>> r.as_matrix().shape\n(3, 3)\n\nRepresent a stack with a single rotation:\n\n>>> r = R.from_quat([[1, 1, 0, 0]])\n>>> r.as_matrix()\narray([[[ 0.,  1.,  0.],\n        [ 1.,  0.,  0.],\n        [ 0.,  0., -1.]]])\n>>> r.as_matrix().shape\n(1, 3, 3)\n\nRepresent multiple rotations:\n\n>>> r = R.from_rotvec([[np.pi/2, 0, 0], [0, 0, np.pi/2]])\n>>> r.as_matrix()\narray([[[ 1.00000000e+00,  0.00000000e+00,  0.00000000e+00],\n        [ 0.00000000e+00,  2.22044605e-16, -1.00000000e+00],\n        [ 0.00000000e+00,  1.00000000e+00,  2.22044605e-16]],\n       [[ 2.22044605e-16, -1.00000000e+00,  0.00000000e+00],\n        [ 1.00000000e+00,  2.22044605e-16,  0.00000000e+00],\n        [ 0.00000000e+00,  0.00000000e+00,  1.00000000e+00]]])\n>>> r.as_matrix().shape\n(2, 3, 3)\n\nNotes\n-----\nThis function was called as_dcm before.\n\n.. versionadded:: 1.4.0",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d37f9e64855e08d73523707819c375fe6239c7bc939042c4d0d080a3d0609719",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.transform.Rotation.as_matrix",
                    "defaultValue": "scipy.spatial.transform.Rotation.as_matrix",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Rotation.as_mrp",
            "description": "    Shape depends on shape of inputs used for initialization.\n\nReferences\n----------\n.. [1] Shuster, M. D. \"A Survery of Attitude Representations\",\n       The Journal of Astronautical Sciences, Vol. 41, No.4, 1993,\n       pp. 475-476\n\nExamples\n--------\n>>> from scipy.spatial.transform import Rotation as R\n\nRepresent a single rotation:\n\n>>> r = R.from_rotvec([0, 0, np.pi])\n>>> r.as_mrp()\narray([0.        , 0.        , 1.         ])\n>>> r.as_mrp().shape\n(3,)\n\nRepresent a stack with a single rotation:\n\n>>> r = R.from_euler('xyz', [[180, 0, 0]], degrees=True)\n>>> r.as_mrp()\narray([[1.       , 0.        , 0.         ]])\n>>> r.as_mrp().shape\n(1, 3)\n\nRepresent multiple rotations:\n\n>>> r = R.from_rotvec([[np.pi/2, 0, 0], [0, 0, np.pi/2]])\n>>> r.as_mrp()\narray([[0.41421356, 0.        , 0.        ],\n       [0.        , 0.        , 0.41421356]])\n>>> r.as_mrp().shape\n(2, 3)\n\nNotes\n-----\n\n.. versionadded:: 1.6.0",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "615eadbed5d88b7969943881a08ea66158a6323fdc64f2de0cac75481c9dd288",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.transform.Rotation.as_mrp",
                    "defaultValue": "scipy.spatial.transform.Rotation.as_mrp",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Rotation.as_quat",
            "description": "    Shape depends on shape of inputs used for initialization.\n\nReferences\n----------\n.. [1] https://en.wikipedia.org/wiki/Quaternions_and_spatial_rotation\n\nExamples\n--------\n>>> from scipy.spatial.transform import Rotation as R\n\nRepresent a single rotation:\n\n>>> r = R.from_matrix([[0, -1, 0],\n...                    [1, 0, 0],\n...                    [0, 0, 1]])\n>>> r.as_quat()\narray([0.        , 0.        , 0.70710678, 0.70710678])\n>>> r.as_quat().shape\n(4,)\n\nRepresent a stack with a single rotation:\n\n>>> r = R.from_quat([[0, 0, 0, 1]])\n>>> r.as_quat().shape\n(1, 4)\n\nRepresent multiple rotations in a single object:\n\n>>> r = R.from_rotvec([[np.pi, 0, 0], [0, 0, np.pi/2]])\n>>> r.as_quat().shape\n(2, 4)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b4f53095bc83d0e5fe14bed58f6bc16199f67fd1ce250bed4a5d2fae7080317b",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.transform.Rotation.as_quat",
                    "defaultValue": "scipy.spatial.transform.Rotation.as_quat",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Rotation.as_rotvec",
            "description": "    Shape depends on shape of inputs used for initialization.\n\nReferences\n----------\n.. [1] https://en.wikipedia.org/wiki/Axis%E2%80%93angle_representation#Rotation_vector\n\nExamples\n--------\n>>> from scipy.spatial.transform import Rotation as R\n\nRepresent a single rotation:\n\n>>> r = R.from_euler('z', 90, degrees=True)\n>>> r.as_rotvec()\narray([0.        , 0.        , 1.57079633])\n>>> r.as_rotvec().shape\n(3,)\n\nRepresent a rotation in degrees:\n\n>>> r = R.from_euler('YX', (-90, -90), degrees=True)\n>>> s = r.as_rotvec(degrees=True)\n>>> s\narray([-69.2820323, -69.2820323, -69.2820323])\n>>> np.linalg.norm(s)\n120.00000000000001\n\nRepresent a stack with a single rotation:\n\n>>> r = R.from_quat([[0, 0, 1, 1]])\n>>> r.as_rotvec()\narray([[0.        , 0.        , 1.57079633]])\n>>> r.as_rotvec().shape\n(1, 3)\n\nRepresent multiple rotations in a single object:\n\n>>> r = R.from_quat([[0, 0, 1, 1], [1, 1, 0, 1]])\n>>> r.as_rotvec()\narray([[0.        , 0.        , 1.57079633],\n       [1.35102172, 1.35102172, 0.        ]])\n>>> r.as_rotvec().shape\n(2, 3)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e60dc7a5b77570ab8810f7c3497a8c2d74394d8dafa5281f838e4dbe49b33569",
            "fields": [
                {
                    "name": "degrees",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "boolean, optional     Returned magnitudes are in degrees if this flag is True, else they are     in radians. Default is False.      .. versionadded:: 1.7.0 ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.transform.Rotation.as_rotvec",
                    "defaultValue": "scipy.spatial.transform.Rotation.as_rotvec",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Rotation.concatenate",
            "description": "Concatenate a sequence of `Rotation` objects.\n\nParameters\n----------\nrotations : sequence of `Rotation` objects\n    The rotations to concatenate.\n\nReturns\n-------\nconcatenated : `Rotation` instance\n    The concatenated rotations.\n\nNotes\n-----\n.. versionadded:: 1.8.0",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "41843483119027303c156393453f8726267acd68407a60d537026288a7d72c07",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.transform.Rotation.concatenate",
                    "defaultValue": "scipy.spatial.transform.Rotation.concatenate",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Rotation.create_group",
            "description": "Create a 3D rotation group.\n\nParameters\n----------\ngroup : string\n    The name of the group. Must be one of 'I', 'O', 'T', 'Dn', 'Cn',\n    where `n` is a positive integer. The groups are:\n\n        * I: Icosahedral group\n        * O: Octahedral group\n        * T: Tetrahedral group\n        * D: Dicyclic group\n        * C: Cyclic group\n\naxis : integer\n    The cyclic rotation axis. Must be one of ['X', 'Y', 'Z'] (or\n    lowercase). Default is 'Z'. Ignored for groups 'I', 'O', and 'T'.\n\nReturns\n-------\nrotation : `Rotation` instance\n    Object containing the elements of the rotation group.\n\nNotes\n-----\nThis method generates rotation groups only. The full 3-dimensional\npoint groups [PointGroups]_ also contain reflections.\n\nReferences\n----------\n.. [PointGroups] `Point groups\n   <https://en.wikipedia.org/wiki/Point_groups_in_three_dimensions>`_\n   on Wikipedia.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5ef7f58a7b639b8d29886a93e38c88718ddc2aaf1c9593e56115005d8d03c0ab",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.transform.Rotation.create_group",
                    "defaultValue": "scipy.spatial.transform.Rotation.create_group",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Rotation.from_euler",
            "description": "    Euler angles specified in radians (`degrees` is False) or degrees\n    (`degrees` is True).\n    For a single character `seq`, `angles` can be:\n\n    - a single value\n    - array_like with shape (N,), where each `angle[i]`\n      corresponds to a single rotation\n    - array_like with shape (N, 1), where each `angle[i, 0]`\n      corresponds to a single rotation\n\n    For 2- and 3-character wide `seq`, `angles` can be:\n\n    - array_like with shape (W,) where `W` is the width of\n      `seq`, which corresponds to a single rotation with `W` axes\n    - array_like with shape (N, W) where each `angle[i]`\n      corresponds to a sequence of Euler angles describing a single\n      rotation\n\ndegrees : bool, optional\n    If True, then the given angles are assumed to be in degrees.\n    Default is False.\n\nReturns\n-------\nrotation : `Rotation` instance\n    Object containing the rotation represented by the sequence of\n    rotations around given axes with given angles.\n\nReferences\n----------\n.. [1] https://en.wikipedia.org/wiki/Euler_angles#Definition_by_intrinsic_rotations\n\nExamples\n--------\n>>> from scipy.spatial.transform import Rotation as R\n\nInitialize a single rotation along a single axis:\n\n>>> r = R.from_euler('x', 90, degrees=True)\n>>> r.as_quat().shape\n(4,)\n\nInitialize a single rotation with a given axis sequence:\n\n>>> r = R.from_euler('zyx', [90, 45, 30], degrees=True)\n>>> r.as_quat().shape\n(4,)\n\nInitialize a stack with a single rotation around a single axis:\n\n>>> r = R.from_euler('x', [90], degrees=True)\n>>> r.as_quat().shape\n(1, 4)\n\nInitialize a stack with a single rotation with an axis sequence:\n\n>>> r = R.from_euler('zyx', [[90, 45, 30]], degrees=True)\n>>> r.as_quat().shape\n(1, 4)\n\nInitialize multiple elementary rotations in one object:\n\n>>> r = R.from_euler('x', [90, 45, 30], degrees=True)\n>>> r.as_quat().shape\n(3, 4)\n\nInitialize multiple rotations in one object:\n\n>>> r = R.from_euler('zyx', [[90, 45, 30], [35, 45, 90]], degrees=True)\n>>> r.as_quat().shape\n(2, 4)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a9eef0d7c9b7a959497611bb4413923768e9cd8ef4ba083165dd6c518d1c9da4",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.transform.Rotation.from_euler",
                    "defaultValue": "scipy.spatial.transform.Rotation.from_euler",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Rotation.from_matrix",
            "description": "    A single matrix or a stack of matrices, where ``matrix[i]`` is\n    the i-th matrix.\n\nReturns\n-------\nrotation : `Rotation` instance\n    Object containing the rotations represented by the rotation\n    matrices.\n\nReferences\n----------\n.. [1] https://en.wikipedia.org/wiki/Rotation_matrix#In_three_dimensions\n.. [2] F. Landis Markley, \"Unit Quaternion from Rotation Matrix\",\n       Journal of guidance, control, and dynamics vol. 31.2, pp.\n       440-442, 2008.\n\nExamples\n--------\n>>> from scipy.spatial.transform import Rotation as R\n\nInitialize a single rotation:\n\n>>> r = R.from_matrix([\n... [0, -1, 0],\n... [1, 0, 0],\n... [0, 0, 1]])\n>>> r.as_matrix().shape\n(3, 3)\n\nInitialize multiple rotations in a single object:\n\n>>> r = R.from_matrix([\n... [\n...     [0, -1, 0],\n...     [1, 0, 0],\n...     [0, 0, 1],\n... ],\n... [\n...     [1, 0, 0],\n...     [0, 0, -1],\n...     [0, 1, 0],\n... ]])\n>>> r.as_matrix().shape\n(2, 3, 3)\n\nIf input matrices are not special orthogonal (orthogonal with\ndeterminant equal to +1), then a special orthogonal estimate is stored:\n\n>>> a = np.array([\n... [0, -0.5, 0],\n... [0.5, 0, 0],\n... [0, 0, 0.5]])\n>>> np.linalg.det(a)\n0.12500000000000003\n>>> r = R.from_matrix(a)\n>>> matrix = r.as_matrix()\n>>> matrix\narray([[-0.38461538, -0.92307692,  0.        ],\n       [ 0.92307692, -0.38461538,  0.        ],\n       [ 0.        ,  0.        ,  1.        ]])\n>>> np.linalg.det(matrix)\n1.0000000000000002\n\nIt is also possible to have a stack containing a single rotation:\n\n>>> r = R.from_matrix([[\n... [0, -1, 0],\n... [1, 0, 0],\n... [0, 0, 1]]])\n>>> r.as_matrix()\narray([[[ 0., -1.,  0.],\n        [ 1.,  0.,  0.],\n        [ 0.,  0.,  1.]]])\n>>> r.as_matrix().shape\n(1, 3, 3)\n\nNotes\n-----\nThis function was called from_dcm before.\n\n.. versionadded:: 1.4.0",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2faa8496788dd82d06584afe2d492e2f22e62e15001ff258d7f256e56c0695e9",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.transform.Rotation.from_matrix",
                    "defaultValue": "scipy.spatial.transform.Rotation.from_matrix",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Rotation.from_mrp",
            "description": "    A single vector or a stack of vectors, where `mrp[i]` gives\n    the ith set of MRPs.\n\nReturns\n-------\nrotation : `Rotation` instance\n    Object containing the rotations represented by input MRPs.\n\nReferences\n----------\n.. [1] Shuster, M. D. \"A Survery of Attitude Representations\",\n       The Journal of Astronautical Sciences, Vol. 41, No.4, 1993,\n       pp. 475-476\n\nNotes\n-----\n\n.. versionadded:: 1.6.0\n\nExamples\n--------\n>>> from scipy.spatial.transform import Rotation as R\n\nInitialize a single rotation:\n\n>>> r = R.from_mrp([0, 0, 1])\n>>> r.as_euler('xyz', degrees=True)\narray([0.        , 0.        , 180.      ])\n>>> r.as_euler('xyz').shape\n(3,)\n\nInitialize multiple rotations in one object:\n\n>>> r = R.from_mrp([\n... [0, 0, 1],\n... [1, 0, 0]])\n>>> r.as_euler('xyz', degrees=True)\narray([[0.        , 0.        , 180.      ],\n       [180.0     , 0.        , 0.        ]])\n>>> r.as_euler('xyz').shape\n(2, 3)\n\nIt is also possible to have a stack of a single rotation:\n\n>>> r = R.from_mrp([[0, 0, np.pi/2]])\n>>> r.as_euler('xyz').shape\n(1, 3)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "27d7ea81de60e4da7ae89dc0cb165247e68c0514cb66b633da8da642dd383b1c",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.transform.Rotation.from_mrp",
                    "defaultValue": "scipy.spatial.transform.Rotation.from_mrp",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Rotation.from_quat",
            "description": "    Each row is a (possibly non-unit norm) quaternion in scalar-last\n    (x, y, z, w) format. Each quaternion will be normalized to unit\n    norm.\n\nReturns\n-------\nrotation : `Rotation` instance\n    Object containing the rotations represented by input quaternions.\n\nReferences\n----------\n.. [1] https://en.wikipedia.org/wiki/Quaternions_and_spatial_rotation\n\nExamples\n--------\n>>> from scipy.spatial.transform import Rotation as R\n\nInitialize a single rotation:\n\n>>> r = R.from_quat([1, 0, 0, 0])\n>>> r.as_quat()\narray([1., 0., 0., 0.])\n>>> r.as_quat().shape\n(4,)\n\nInitialize multiple rotations in a single object:\n\n>>> r = R.from_quat([\n... [1, 0, 0, 0],\n... [0, 0, 0, 1]\n... ])\n>>> r.as_quat()\narray([[1., 0., 0., 0.],\n       [0., 0., 0., 1.]])\n>>> r.as_quat().shape\n(2, 4)\n\nIt is also possible to have a stack of a single rotation:\n\n>>> r = R.from_quat([[0, 0, 0, 1]])\n>>> r.as_quat()\narray([[0., 0., 0., 1.]])\n>>> r.as_quat().shape\n(1, 4)\n\nQuaternions are normalized before initialization.\n\n>>> r = R.from_quat([0, 0, 1, 1])\n>>> r.as_quat()\narray([0.        , 0.        , 0.70710678, 0.70710678])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "3b55b580558d76d662bc9b435b3bc6d8a5246a6b0026db4dc714918f914a1be0",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.transform.Rotation.from_quat",
                    "defaultValue": "scipy.spatial.transform.Rotation.from_quat",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Rotation.from_rotvec",
            "description": "    A single vector or a stack of vectors, where `rot_vec[i]` gives\n    the ith rotation vector.\ndegrees : bool, optional\n    If True, then the given magnitudes are assumed to be in degrees.\n    Default is False.\n\n    .. versionadded:: 1.7.0\n\nReturns\n-------\nrotation : `Rotation` instance\n    Object containing the rotations represented by input rotation\n    vectors.\n\nReferences\n----------\n.. [1] https://en.wikipedia.org/wiki/Axis%E2%80%93angle_representation#Rotation_vector\n\nExamples\n--------\n>>> from scipy.spatial.transform import Rotation as R\n\nInitialize a single rotation:\n\n>>> r = R.from_rotvec(np.pi/2 * np.array([0, 0, 1]))\n>>> r.as_rotvec()\narray([0.        , 0.        , 1.57079633])\n>>> r.as_rotvec().shape\n(3,)\n\nInitialize a rotation in degrees, and view it in degrees:\n\n>>> r = R.from_rotvec(45 * np.array([0, 1, 0]), degrees=True)\n>>> r.as_rotvec(degrees=True)\narray([ 0., 45.,  0.])\n\nInitialize multiple rotations in one object:\n\n>>> r = R.from_rotvec([\n... [0, 0, np.pi/2],\n... [np.pi/2, 0, 0]])\n>>> r.as_rotvec()\narray([[0.        , 0.        , 1.57079633],\n       [1.57079633, 0.        , 0.        ]])\n>>> r.as_rotvec().shape\n(2, 3)\n\nIt is also possible to have a stack of a single rotaton:\n\n>>> r = R.from_rotvec([[0, 0, np.pi/2]])\n>>> r.as_rotvec().shape\n(1, 3)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "73e4bd04e6171b9152a051e82dccab5340f35cbc6714a4851f2d2bd681f8a0ad",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.transform.Rotation.from_rotvec",
                    "defaultValue": "scipy.spatial.transform.Rotation.from_rotvec",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Rotation.identity",
            "description": "Get identity rotation(s).\n\nComposition with the identity rotation has no effect.\n\nParameters\n----------\nnum : int or None, optional\n    Number of identity rotations to generate. If None (default), then a\n    single rotation is generated.\n\nReturns\n-------\nidentity : Rotation object\n    The identity rotation.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e50c329035cde6fb78dc466063638880e6e78ff88bfa786c1ce052cae96c2039",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.transform.Rotation.identity",
                    "defaultValue": "scipy.spatial.transform.Rotation.identity",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Rotation.inv",
            "description": ">>> q = p.inv()\n>>> q.as_euler('zyx', degrees=True)\narray([-45.,   0.,   0.])\n\nInverting multiple rotations:\n\n>>> p = R.from_rotvec([[0, 0, np.pi/3], [-np.pi/4, 0, 0]])\n>>> q = p.inv()\n>>> q.as_rotvec()\narray([[-0.        , -0.        , -1.04719755],\n       [ 0.78539816, -0.        , -0.        ]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1e24f9d3d254c08a45bdc36df81d267d17ab5305ff50d25f39999a5768fb82fe",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.transform.Rotation.inv",
                    "defaultValue": "scipy.spatial.transform.Rotation.inv",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Rotation.magnitude",
            "description": ">>> r.magnitude()\narray([3.14159265, 3.14159265, 3.14159265, 0.        ])\n\nMagnitude of a single rotation:\n\n>>> r[0].magnitude()\n3.141592653589793",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "445b36fa705113da03e6bc705937e597452ec3f53108b53ad8ee1cd6ed8ac673",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.transform.Rotation.magnitude",
                    "defaultValue": "scipy.spatial.transform.Rotation.magnitude",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Rotation.mean",
            "description": ">>> r.mean().as_euler('zyx', degrees=True)\narray([0.24945696, 0.25054542, 0.24945696])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b346332bb3458c33e8643681bbd787b1e886dc63a11d2d8daefd8306e1bcbc46",
            "fields": [
                {
                    "name": "weights",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "array_like shape (N,), optional     Weights describing the relative importance of the rotations. If     None (default), then all values in `weights` are assumed to be     equal. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.transform.Rotation.mean",
                    "defaultValue": "scipy.spatial.transform.Rotation.mean",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Rotation.random",
            "description": "array([-110.5976185 ,   55.32758512,   76.3289269 ])  # random\n\nSample a stack of rotations:\n\n>>> R.random(5).as_euler('zxy', degrees=True)\narray([[-110.5976185 ,   55.32758512,   76.3289269 ],  # random\n       [ -91.59132005,  -14.3629884 ,  -93.91933182],\n       [  25.23835501,   45.02035145, -121.67867086],\n       [ -51.51414184,  -15.29022692, -172.46870023],\n       [ -81.63376847,  -27.39521579,    2.60408416]])\n\nSee Also\n--------\nscipy.stats.special_ortho_group",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4f87a7d77bec84d11a3b9ce5f8d8498c184013d98666776c2351535b75533ccb",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.transform.Rotation.random",
                    "defaultValue": "scipy.spatial.transform.Rotation.random",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Rotation.reduce",
            "description": "    corresponds to the identity rotation.\nright : `Rotation` instance, optional\n    Object containing the right rotation(s). Default value (None)\n    corresponds to the identity rotation.\nreturn_indices : bool, optional\n    Whether to return the indices of the rotations from `left` and\n    `right` used for reduction.\n\nReturns\n-------\nreduced : `Rotation` instance\n    Object containing reduced rotations.\nleft_best, right_best: integer ndarray\n    Indices of elements from `left` and `right` used for reduction.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4d17a0bb00760ec0d57880c94b86b7da072d7272054da446789d2ccaff120045",
            "fields": [
                {
                    "name": "left",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "`Rotation` instance, optional     Object containing the left rotation(s). Default value (None)     corresponds to the identity rotation. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "right",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "`Rotation` instance, optional     Object containing the right rotation(s). Default value (None)     corresponds to the identity rotation. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "return_indices",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "bool, optional     Whether to return the indices of the rotations from `left` and     `right` used for reduction. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.transform.Rotation.reduce",
                    "defaultValue": "scipy.spatial.transform.Rotation.reduce",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "RotationSpline.__init__",
            "description": "No description found\nInterpolate rotations with continuous angular rate and acceleration.\n    \n    The rotation vectors between each consecutive orientation are cubic\n    functions of time and it is guaranteed that angular rate and acceleration\n    are continuous. Such interpolation are analogous to cubic spline\n    interpolation.\n    \n    Refer to [1]_ for math and implementation details.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e26c276caf1250ab5a36e7484b132bc4729f75e8372dc4b19cb13bb1eb56908d",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.transform._rotation_spline.RotationSpline.__init__",
                    "defaultValue": "scipy.spatial.transform._rotation_spline.RotationSpline.__init__",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Slerp.__init__",
            "description": "No description found\nSpherical Linear Interpolation of Rotations.\n    \n    The interpolation between consecutive rotations is performed as a rotation\n    around a fixed axis with a constant angular velocity [1]_. This ensures\n    that the interpolated rotations follow the shortest path between initial\n    and final orientations.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2f6dabe24d4512d9aa04c68cc8faf8857a495bc88dc3a39996dcf731dd87d69c",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.spatial.transform._rotation.Slerp.__init__",
                    "defaultValue": "scipy.spatial.transform._rotation.Slerp.__init__",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        }
    ],
    "linkDataArray": []
}