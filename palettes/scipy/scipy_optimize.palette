{
    "modelData": {
        "filePath": "scipy_optimize.palette",
        "fileType": "Palette",
        "shortDescription": "",
        "detailedDescription": "=====================================================\nOptimization and root finding (:mod:`scipy.optimize`)\n=====================================================\n\n.. currentmodule:: scipy.optimize\n\n.. toctree::\n   :hidden:\n\n   optimize.cython_optimize\n\nSciPy ``optimize`` provides functions for minimizing (or maximizing)\nobjective functions, possibly subject to constraints. It includes\nsolvers for nonlinear problems (with support for both local and global\noptimization algorithms), linear programming, constrained\nand nonlinear least-squares, root finding, and curve fitting.\n\nCommon functions and objects, shared across different solvers, are:\n\n.. autosummary::\n   :toctree: generated/\n\n   show_options - Show specific options optimization solvers.\n   OptimizeResult - The optimization result returned by some optimizers.\n   OptimizeWarning - The optimization encountered problems.\n\n\nOptimization\n============\n\nScalar functions optimization\n-----------------------------\n\n.. autosummary::\n   :toctree: generated/\n\n   minimize_scalar - Interface for minimizers of univariate functions\n\nThe `minimize_scalar` function supports the following methods:\n\n.. toctree::\n\n   optimize.minimize_scalar-brent\n   optimize.minimize_scalar-bounded\n   optimize.minimize_scalar-golden\n\nLocal (multivariate) optimization\n---------------------------------\n\n.. autosummary::\n   :toctree: generated/\n\n   minimize - Interface for minimizers of multivariate functions.\n\nThe `minimize` function supports the following methods:\n\n.. toctree::\n\n   optimize.minimize-neldermead\n   optimize.minimize-powell\n   optimize.minimize-cg\n   optimize.minimize-bfgs\n   optimize.minimize-newtoncg\n   optimize.minimize-lbfgsb\n   optimize.minimize-tnc\n   optimize.minimize-cobyla\n   optimize.minimize-cobyqa\n   optimize.minimize-slsqp\n   optimize.minimize-trustconstr\n   optimize.minimize-dogleg\n   optimize.minimize-trustncg\n   optimize.minimize-trustkrylov\n   optimize.minimize-trustexact\n\nConstraints are passed to `minimize` function as a single object or\nas a list of objects from the following classes:\n\n.. autosummary::\n   :toctree: generated/\n\n   NonlinearConstraint - Class defining general nonlinear constraints.\n   LinearConstraint - Class defining general linear constraints.\n\nSimple bound constraints are handled separately and there is a special class\nfor them:\n\n.. autosummary::\n   :toctree: generated/\n\n   Bounds - Bound constraints.\n\nQuasi-Newton strategies implementing `HessianUpdateStrategy`\ninterface can be used to approximate the Hessian in `minimize`\nfunction (available only for the 'trust-constr' method). Available\nquasi-Newton methods implementing this interface are:\n\n.. autosummary::\n   :toctree: generated/\n\n   BFGS - Broyden-Fletcher-Goldfarb-Shanno (BFGS) Hessian update strategy.\n   SR1 - Symmetric-rank-1 Hessian update strategy.\n\n.. _global_optimization:\n\nGlobal optimization\n-------------------\n\n.. autosummary::\n   :toctree: generated/\n\n   basinhopping - Basinhopping stochastic optimizer.\n   brute - Brute force searching optimizer.\n   differential_evolution - Stochastic optimizer using differential evolution.\n\n   shgo - Simplicial homology global optimizer.\n   dual_annealing - Dual annealing stochastic optimizer.\n   direct - DIRECT (Dividing Rectangles) optimizer.\n\nLeast-squares and curve fitting\n===============================\n\nNonlinear least-squares\n-----------------------\n\n.. autosummary::\n   :toctree: generated/\n\n   least_squares - Solve a nonlinear least-squares problem with bounds on the variables.\n\nLinear least-squares\n--------------------\n\n.. autosummary::\n   :toctree: generated/\n\n   nnls - Linear least-squares problem with non-negativity constraint.\n   lsq_linear - Linear least-squares problem with bound constraints.\n   isotonic_regression - Least squares problem of isotonic regression via PAVA.\n\nCurve fitting\n-------------\n\n.. autosummary::\n   :toctree: generated/\n\n   curve_fit -- Fit curve to a set of points.\n\nRoot finding\n============\n\nScalar functions\n----------------\n.. autosummary::\n   :toctree: generated/\n\n   root_scalar - Unified interface for nonlinear solvers of scalar functions.\n   brentq - quadratic interpolation Brent method.\n   brenth - Brent method, modified by Harris with hyperbolic extrapolation.\n   ridder - Ridder's method.\n   bisect - Bisection method.\n   newton - Newton's method (also Secant and Halley's methods).\n   toms748 - Alefeld, Potra & Shi Algorithm 748.\n   RootResults - The root finding result returned by some root finders.\n\nThe `root_scalar` function supports the following methods:\n\n.. toctree::\n\n   optimize.root_scalar-brentq\n   optimize.root_scalar-brenth\n   optimize.root_scalar-bisect\n   optimize.root_scalar-ridder\n   optimize.root_scalar-newton\n   optimize.root_scalar-toms748\n   optimize.root_scalar-secant\n   optimize.root_scalar-halley\n\n\n\nThe table below lists situations and appropriate methods, along with\n*asymptotic* convergence rates per iteration (and per function evaluation)\nfor successful convergence to a simple root(*).\nBisection is the slowest of them all, adding one bit of accuracy for each\nfunction evaluation, but is guaranteed to converge.\nThe other bracketing methods all (eventually) increase the number of accurate\nbits by about 50% for every function evaluation.\nThe derivative-based methods, all built on `newton`, can converge quite quickly\nif the initial value is close to the root.  They can also be applied to\nfunctions defined on (a subset of) the complex plane.\n\n+-------------+----------+----------+-----------+-------------+-------------+----------------+\n| Domain of f | Bracket? |    Derivatives?      | Solvers     |        Convergence           |\n+             +          +----------+-----------+             +-------------+----------------+\n|             |          | `fprime` | `fprime2` |             | Guaranteed? |  Rate(s)(*)    |\n+=============+==========+==========+===========+=============+=============+================+\n| `R`         | Yes      | N/A      | N/A       | - bisection | - Yes       | - 1 \"Linear\"   |\n|             |          |          |           | - brentq    | - Yes       | - >=1, <= 1.62 |\n|             |          |          |           | - brenth    | - Yes       | - >=1, <= 1.62 |\n|             |          |          |           | - ridder    | - Yes       | - 2.0 (1.41)   |\n|             |          |          |           | - toms748   | - Yes       | - 2.7 (1.65)   |\n+-------------+----------+----------+-----------+-------------+-------------+----------------+\n| `R` or `C`  | No       | No       | No        | secant      | No          | 1.62 (1.62)    |\n+-------------+----------+----------+-----------+-------------+-------------+----------------+\n| `R` or `C`  | No       | Yes      | No        | newton      | No          | 2.00 (1.41)    |\n+-------------+----------+----------+-----------+-------------+-------------+----------------+\n| `R` or `C`  | No       | Yes      | Yes       | halley      | No          | 3.00 (1.44)    |\n+-------------+----------+----------+-----------+-------------+-------------+----------------+\n\n.. seealso::\n\n   `scipy.optimize.cython_optimize` -- Typed Cython versions of root finding functions\n\nFixed point finding:\n\n.. autosummary::\n   :toctree: generated/\n\n   fixed_point - Single-variable fixed-point solver.\n\nMultidimensional\n----------------\n\n.. autosummary::\n   :toctree: generated/\n\n   root - Unified interface for nonlinear solvers of multivariate functions.\n\nThe `root` function supports the following methods:\n\n.. toctree::\n\n   optimize.root-hybr\n   optimize.root-lm\n   optimize.root-broyden1\n   optimize.root-broyden2\n   optimize.root-anderson\n   optimize.root-linearmixing\n   optimize.root-diagbroyden\n   optimize.root-excitingmixing\n   optimize.root-krylov\n   optimize.root-dfsane\n   \nElementwise Minimization and Root Finding\n=========================================\n\n.. toctree::\n   :maxdepth: 3\n\n   optimize.elementwise\n\nLinear programming / MILP\n=========================\n\n.. autosummary::\n   :toctree: generated/\n\n   milp -- Mixed integer linear programming.\n   linprog -- Unified interface for minimizers of linear programming problems.\n\nThe `linprog` function supports the following methods:\n\n.. toctree::\n\n   optimize.linprog-simplex\n   optimize.linprog-interior-point\n   optimize.linprog-revised_simplex\n   optimize.linprog-highs-ipm\n   optimize.linprog-highs-ds\n   optimize.linprog-highs\n\nThe simplex, interior-point, and revised simplex methods support callback\nfunctions, such as:\n\n.. autosummary::\n   :toctree: generated/\n\n   linprog_verbose_callback -- Sample callback function for linprog (simplex).\n\nAssignment problems\n===================\n\n.. autosummary::\n   :toctree: generated/\n\n   linear_sum_assignment -- Solves the linear-sum assignment problem.\n   quadratic_assignment -- Solves the quadratic assignment problem.\n\nThe `quadratic_assignment` function supports the following methods:\n\n.. toctree::\n\n   optimize.qap-faq\n   optimize.qap-2opt\n\nUtilities\n=========\n\nFinite-difference approximation\n-------------------------------\n\n.. autosummary::\n   :toctree: generated/\n\n   approx_fprime - Approximate the gradient of a scalar function.\n   check_grad - Check the supplied derivative using finite differences.\n\n\nLine search\n-----------\n\n.. autosummary::\n   :toctree: generated/\n\n   bracket - Bracket a minimum, given two starting points.\n   line_search - Return a step that satisfies the strong Wolfe conditions.\n\nHessian approximation\n---------------------\n\n.. autosummary::\n   :toctree: generated/\n\n   LbfgsInvHessProduct - Linear operator for L-BFGS approximate inverse Hessian.\n   HessianUpdateStrategy - Interface for implementing Hessian update strategies\n\nBenchmark problems\n------------------\n\n.. autosummary::\n   :toctree: generated/\n\n   rosen - The Rosenbrock function.\n   rosen_der - The derivative of the Rosenbrock function.\n   rosen_hess - The Hessian matrix of the Rosenbrock function.\n   rosen_hess_prod - Product of the Rosenbrock Hessian with a vector.\n\nLegacy functions\n================\n\nThe functions below are not recommended for use in new scripts;\nall of these methods are accessible via a newer, more consistent\ninterfaces, provided by the interfaces above.\n\nOptimization\n------------\n\nGeneral-purpose multivariate methods:\n\n.. autosummary::\n   :toctree: generated/\n\n   fmin - Nelder-Mead Simplex algorithm.\n   fmin_powell - Powell's (modified) conjugate direction method.\n   fmin_cg - Non-linear (Polak-Ribiere) conjugate gradient algorithm.\n   fmin_bfgs - Quasi-Newton method (Broydon-Fletcher-Goldfarb-Shanno).\n   fmin_ncg - Line-search Newton Conjugate Gradient.\n\nConstrained multivariate methods:\n\n.. autosummary::\n   :toctree: generated/\n\n   fmin_l_bfgs_b - Zhu, Byrd, and Nocedal's constrained optimizer.\n   fmin_tnc - Truncated Newton code.\n   fmin_cobyla - Constrained optimization by linear approximation.\n   fmin_slsqp - Minimization using sequential least-squares programming.\n\nUnivariate (scalar) minimization methods:\n\n.. autosummary::\n   :toctree: generated/\n\n   fminbound - Bounded minimization of a scalar function.\n   brent - 1-D function minimization using Brent method.\n   golden - 1-D function minimization using Golden Section method.\n\nLeast-squares\n-------------\n\n.. autosummary::\n   :toctree: generated/\n\n   leastsq - Minimize the sum of squares of M equations in N unknowns.\n\nRoot finding\n------------\n\nGeneral nonlinear solvers:\n\n.. autosummary::\n   :toctree: generated/\n\n   fsolve - Non-linear multivariable equation solver.\n   broyden1 - Broyden's first method.\n   broyden2 - Broyden's second method.\n   NoConvergence -  Exception raised when nonlinear solver does not converge.\n\nLarge-scale nonlinear solvers:\n\n.. autosummary::\n   :toctree: generated/\n\n   newton_krylov\n   anderson\n\n   BroydenFirst\n   InverseJacobian\n   KrylovJacobian\n\nSimple iteration solvers:\n\n.. autosummary::\n   :toctree: generated/\n\n   excitingmixing\n   linearmixing\n   diagbroyden",
        "repoService": "",
        "repoBranch": "",
        "repo": "",
        "generatorName": "dlg_paletteGen",
        "generatorVersion": "0.6.3",
        "generatorCommitHash": "",
        "schemaVersion": "AppRef",
        "readonly": true,
        "repositoryUrl": "scipy",
        "commitHash": "0.1",
        "downloadUrl": "",
        "signature": "5eebfd2c7cca8d005a1f55f1b24435789d7f3a8517980bdb8b7c3fbc02f14010",
        "lastModifiedName": "wici",
        "lastModifiedEmail": "",
        "lastModifiedDatetime": 1755100437.725793,
        "numLGNodes": 161
    },
    "nodeDataArray": [
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "0wgqduiw",
            "name": "BFGS.__init__",
            "description": "\nBroyden-Fletcher-Goldfarb-Shanno (BFGS) Hessian update strategy.\n    \n    Parameters\n    ----------\n    exception_strategy : {'skip_update', 'damp_update'}, optional\n        Define how to proceed when the curvature condition is violated.\n        Set it to 'skip_update' to just skip the update. Or, alternatively,\n        set it to 'damp_update' to interpolate between the actual BFGS\n        result and the unmodified matrix. Both exceptions strategies\n        are explained  in [1]_, p.536-537.\n    min_curvature : float\n        This number, scaled by a normalization factor, defines the\n        minimum curvature ``dot(delta_grad, delta_x)`` allowed to go\n        unaffected by the exception strategy. By default is equal to\n        1e-8 when ``exception_strategy = 'skip_update'`` and equal\n        to 0.2 when ``exception_strategy = 'damp_update'``.\n    init_scale : {float, np.array, 'auto'}\n        This parameter can be used to initialize the Hessian or its\n        inverse. When a float is given, the relevant array is initialized\n        to ``np.eye(n) * init_scale``, where ``n`` is the problem dimension.\n        Alternatively, if a precisely ``(n, n)`` shaped, symmetric array is given,\n        this array will be used. Otherwise an error is generated.\n        Set it to 'auto' in order to use an automatic heuristic for choosing\n        the initial scale. The heuristic is described in [1]_, p.143.\n        The default is 'auto'.\n    \n    Notes\n    -----\n    The update is based on the description in [1]_, p.140.\n    \n    References\n    ----------\n    .. [1] Nocedal, Jorge, and Stephen J. Wright. \"Numerical optimization\"\n           Second Edition (2006).",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "69da8f90444610f88bcc3cd699cb66068b26659cde0d64430211eaed91409f09",
            "fields": [
                {
                    "id": "q_ob1w6l",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to BFGS object",
                    "type": "Object:scipy.optimize._hessian_update_strategy.BFGS",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iac7f_24",
                    "encoding": "",
                    "name": "exception_strategy",
                    "value": "skip_update",
                    "defaultValue": "skip_update",
                    "description": "Define how to proceed when the curvature condition is violated.\nSet it to 'skip_update' to just skip the update. Or, alternatively,\nset it to 'damp_update' to interpolate between the actual BFGS\nresult and the unmodified matrix. Both exceptions strategies\nare explained  in [1]_, p.536-537.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r4191t6e",
                    "encoding": "",
                    "name": "min_curvature",
                    "value": "",
                    "defaultValue": "",
                    "description": "This number, scaled by a normalization factor, defines the\nminimum curvature ``dot(delta_grad, delta_x)`` allowed to go\nunaffected by the exception strategy. By default is equal to\n1e-8 when ``exception_strategy = 'skip_update'`` and equal\nto 0.2 when ``exception_strategy = 'damp_update'``.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5jxqht_s",
                    "encoding": "",
                    "name": "init_scale",
                    "value": "auto",
                    "defaultValue": "auto",
                    "description": "This parameter can be used to initialize the Hessian or its\ninverse. When a float is given, the relevant array is initialized\nto ``np.eye(n) * init_scale``, where ``n`` is the problem dimension.\nAlternatively, if a precisely ``(n, n)`` shaped, symmetric array is given,\nthis array will be used. Otherwise an error is generated.\nSet it to 'auto' in order to use an automatic heuristic for choosing\nthe initial scale. The heuristic is described in [1]_, p.143.\nThe default is 'auto'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "949k0o34",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._hessian_update_strategy.BFGS.__init__",
                    "defaultValue": "scipy.optimize._hessian_update_strategy.BFGS.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n5mu0w82",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4eabdogb",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "k2rg656b",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vjna1ot5",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._hessian_update_strategy.BFGS",
                    "defaultValue": "scipy.optimize._hessian_update_strategy.BFGS",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "66k62ya6",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qrqkd4po",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "8b44ix5m",
            "name": "BFGS.dot",
            "description": "Compute the product of the internal matrix with the given vector.\n    \n    Parameters\n    ----------\n    p : array_like\n        1-D array representing a vector.\n    \n    Returns\n    -------\n    Hp : array\n        1-D represents the result of multiplying the approximation matrix\n        by vector p.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9af312bb1b2021b1d830247f34a4d4a10ca268f3dc51900fe7f8a2f6cb75be04",
            "fields": [
                {
                    "id": "2shns3cv",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.optimize._hessian_update_strategy.BFGS.dot object",
                    "type": "Object:scipy.optimize._hessian_update_strategy.BFGS",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dbccocr8",
                    "encoding": "",
                    "name": "p",
                    "value": "",
                    "defaultValue": "",
                    "description": "1-D array representing a vector.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7ubthdwk",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._hessian_update_strategy.BFGS.dot",
                    "defaultValue": "scipy.optimize._hessian_update_strategy.BFGS.dot",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sn10tpn9",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "il2794wc",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "hfc5bgap",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iayfggca",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._hessian_update_strategy.BFGS",
                    "defaultValue": "scipy.optimize._hessian_update_strategy.BFGS",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4ckdwoi7",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wyddiecj",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "hajln5g7",
            "name": "BFGS.get_matrix",
            "description": "Return the current internal matrix.\n    \n    Returns\n    -------\n    M : ndarray, shape (n, n)\n        Dense matrix containing either the Hessian or its inverse\n        (depending on how `approx_type` was defined).",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "fbb3ceeb5fb0593969c6f55b15bbbc1c943eede6e328c1ddf008176db59b1038",
            "fields": [
                {
                    "id": "zp_lgys2",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.optimize._hessian_update_strategy.BFGS.get_matrix object",
                    "type": "Object:scipy.optimize._hessian_update_strategy.BFGS",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "72jwekea",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._hessian_update_strategy.BFGS.get_matrix",
                    "defaultValue": "scipy.optimize._hessian_update_strategy.BFGS.get_matrix",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7_lrdlia",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rv_7h9jl",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "jvbk2lhw",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t433s8h7",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._hessian_update_strategy.BFGS",
                    "defaultValue": "scipy.optimize._hessian_update_strategy.BFGS",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "evf71ukw",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ffqx9lb0",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "6wm13id9",
            "name": "BFGS.initialize",
            "description": "Initialize internal matrix.\n    \n    Allocate internal memory for storing and updating\n    the Hessian or its inverse.\n    \n    Parameters\n    ----------\n    n : int\n        Problem dimension.\n    approx_type : {'hess', 'inv_hess'}\n        Selects either the Hessian or the inverse Hessian.\n        When set to 'hess' the Hessian will be stored and updated.\n        When set to 'inv_hess' its inverse will be used instead.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1c3bcdbafaf94db1d5ee531505359a5b33c65b02f8db7dc33b989972533d2fd4",
            "fields": [
                {
                    "id": "hw973dkz",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.optimize._hessian_update_strategy.BFGS.initialize object",
                    "type": "Object:scipy.optimize._hessian_update_strategy.BFGS",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k3bst38f",
                    "encoding": "",
                    "name": "n",
                    "value": "",
                    "defaultValue": "",
                    "description": "Problem dimension.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7w5wc9p8",
                    "encoding": "",
                    "name": "approx_type",
                    "value": "",
                    "defaultValue": "",
                    "description": "Selects either the Hessian or the inverse Hessian.\nWhen set to 'hess' the Hessian will be stored and updated.\nWhen set to 'inv_hess' its inverse will be used instead.",
                    "type": "{'hess', 'invhess'}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tnvx521n",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._hessian_update_strategy.BFGS.initialize",
                    "defaultValue": "scipy.optimize._hessian_update_strategy.BFGS.initialize",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a5ngw4zy",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u1lqrjf_",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "kp7vkn3a",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ztrqbezt",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._hessian_update_strategy.BFGS",
                    "defaultValue": "scipy.optimize._hessian_update_strategy.BFGS",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ausne3ko",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "leqpy0ou",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "inntrtda",
            "name": "BFGS.update",
            "description": "Update internal matrix.\n    \n    Update Hessian matrix or its inverse (depending on how 'approx_type'\n    is defined) using information about the last evaluated points.\n    \n    Parameters\n    ----------\n    delta_x : ndarray\n        The difference between two points the gradient\n        function have been evaluated at: ``delta_x = x2 - x1``.\n    delta_grad : ndarray\n        The difference between the gradients:\n        ``delta_grad = grad(x2) - grad(x1)``.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b2d0692cfe3e77f934e70fb7aaa394ae9bada8c20efabce9b1b44c2f883dee8c",
            "fields": [
                {
                    "id": "w4kpu7mi",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.optimize._hessian_update_strategy.BFGS.update object",
                    "type": "Object:scipy.optimize._hessian_update_strategy.BFGS",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "obixt12b",
                    "encoding": "",
                    "name": "delta_x",
                    "value": "",
                    "defaultValue": "",
                    "description": "The difference between two points the gradient\nfunction have been evaluated at: ``delta_x = x2 - x1``.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tc5arwto",
                    "encoding": "",
                    "name": "delta_grad",
                    "value": "",
                    "defaultValue": "",
                    "description": "The difference between the gradients:\n``delta_grad = grad(x2) - grad(x1)``.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6ijl03p9",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._hessian_update_strategy.BFGS.update",
                    "defaultValue": "scipy.optimize._hessian_update_strategy.BFGS.update",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mbe1cecz",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uzh8idc2",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "vf04ple3",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l5jq4f6u",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._hessian_update_strategy.BFGS",
                    "defaultValue": "scipy.optimize._hessian_update_strategy.BFGS",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_xuh4mmv",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ime54flz",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "fb7m4ad7",
            "name": "Bounds.__init__",
            "description": "\nBounds constraint on the variables.\n    \n    The constraint has the general inequality form::\n    \n        lb <= x <= ub\n    \n    It is possible to use equal bounds to represent an equality constraint or\n    infinite bounds to represent a one-sided constraint.\n    \n    Parameters\n    ----------\n    lb, ub : dense array_like, optional\n        Lower and upper bounds on independent variables. `lb`, `ub`, and\n        `keep_feasible` must be the same shape or broadcastable.\n        Set components of `lb` and `ub` equal\n        to fix a variable. Use ``np.inf`` with an appropriate sign to disable\n        bounds on all or some variables. Note that you can mix constraints of\n        different types: interval, one-sided or equality, by setting different\n        components of `lb` and `ub` as necessary. Defaults to ``lb = -np.inf``\n        and ``ub = np.inf`` (no bounds).\n    keep_feasible : dense array_like of bool, optional\n        Whether to keep the constraint components feasible throughout\n        iterations. Must be broadcastable with `lb` and `ub`.\n        Default is False. Has no effect for equality constraints.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c7329e08de462f03dd5b1bd9e24a6e4c418ccbe2ccfbff57ad2db8c7f3221ef8",
            "fields": [
                {
                    "id": "9k3satrm",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to Bounds object",
                    "type": "Object:scipy.optimize._constraints.Bounds",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mv_jopby",
                    "encoding": "",
                    "name": "lb",
                    "value": "-inf",
                    "defaultValue": "-inf",
                    "description": "",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z74q2l_2",
                    "encoding": "",
                    "name": "ub",
                    "value": "inf",
                    "defaultValue": "inf",
                    "description": "",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dzxzz988",
                    "encoding": "",
                    "name": "keep_feasible",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to keep the constraint components feasible throughout\niterations. Must be broadcastable with `lb` and `ub`.\nDefault is False. Has no effect for equality constraints.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ujnpvqbn",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._constraints.Bounds.__init__",
                    "defaultValue": "scipy.optimize._constraints.Bounds.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xh2fa78y",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xzmc6pnp",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "iqwwnj6l",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "twj1tse6",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._constraints.Bounds",
                    "defaultValue": "scipy.optimize._constraints.Bounds",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hpmxf9yd",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qx2o7anq",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "hp3gp5io",
            "name": "Bounds.residual",
            "description": "Calculate the residual (slack) between the input and the bounds\n    \n    For a bound constraint of the form::\n    \n        lb <= x <= ub\n    \n    the lower and upper residuals between `x` and the bounds are values\n    ``sl`` and ``sb`` such that::\n    \n        lb + sl == x == ub - sb\n    \n    When all elements of ``sl`` and ``sb`` are positive, all elements of\n    ``x`` lie within the bounds; a negative element in ``sl`` or ``sb``\n    indicates that the corresponding element of ``x`` is out of bounds.\n    \n    Parameters\n    ----------\n    x: array_like\n        Vector of independent variables\n    \n    Returns\n    -------\n    sl, sb : array-like\n        The lower and upper residuals",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5012bec9f2f33fc30e543e9946517f372e8c7e8d10fe0655e7094ca5f9e6fd1b",
            "fields": [
                {
                    "id": "jqxquakr",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.optimize._constraints.Bounds.residual object",
                    "type": "Object:scipy.optimize._constraints.Bounds",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n7f65cwz",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "Vector of independent variables",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "my3w0itz",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._constraints.Bounds.residual",
                    "defaultValue": "scipy.optimize._constraints.Bounds.residual",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rikn4_d1",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t4ko0ji2",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "jsxy0kx0",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "roten1r2",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._constraints.Bounds",
                    "defaultValue": "scipy.optimize._constraints.Bounds",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iksypm_a",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7v_z6jr9",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "qoszwlzw",
            "name": "BroydenFirst.__init__",
            "description": "\nFind a root of a function, using Broyden's first Jacobian approximation.\n    \n    This method is also known as \"Broyden's good method\".\n    \n    Parameters\n    ----------\n    %(params_basic)s\n    %(broyden_params)s\n    %(params_extra)s\n    \n    See Also\n    --------\n    root : Interface to root finding algorithms for multivariate\n           functions. See ``method='broyden1'`` in particular.\n    \n    Notes\n    -----\n    This algorithm implements the inverse Jacobian Quasi-Newton update\n    \n    .. math:: H_+ = H + (dx - H df) dx^\\dagger H / ( dx^\\dagger H df)\n    \n    which corresponds to Broyden's first Jacobian update\n    \n    .. math:: J_+ = J + (df - J dx) dx^\\dagger / dx^\\dagger dx\n    \n    \n    References\n    ----------\n    .. [1] B.A. van der Rotten, PhD thesis,\n       \"A limited memory Broyden method to solve high-dimensional\n       systems of nonlinear equations\". Mathematisch Instituut,\n       Universiteit Leiden, The Netherlands (2003).\n       https://math.leidenuniv.nl/scripties/Rotten.pdf\n    \n    Examples\n    --------\n    The following functions define a system of nonlinear equations\n    \n    >>> def fun(x):\n    ...     return [x[0]  + 0.5 * (x[0] - x[1])**3 - 1.0,\n    ...             0.5 * (x[1] - x[0])**3 + x[1]]\n    \n    A solution can be obtained as follows.\n    \n    >>> from scipy import optimize\n    >>> sol = optimize.broyden1(fun, [0, 0])\n    >>> sol\n    array([0.84116396, 0.15883641])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "40a06eaebaff13b1205845e333349f2821768e1e0ddcead631d5719b0dc919ce",
            "fields": [
                {
                    "id": "gnkadiw8",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to BroydenFirst object",
                    "type": "Object:scipy.optimize._nonlin.BroydenFirst",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9pv6x9n4",
                    "encoding": "",
                    "name": "alpha",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0_54lytp",
                    "encoding": "",
                    "name": "reduction_method",
                    "value": "restart",
                    "defaultValue": "restart",
                    "description": "",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q5nfsdwa",
                    "encoding": "",
                    "name": "max_rank",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hf7ctf5o",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._nonlin.BroydenFirst.__init__",
                    "defaultValue": "scipy.optimize._nonlin.BroydenFirst.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "txsuu1ux",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aliqasag",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "dy3ifkxw",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tfhjlelv",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._nonlin.BroydenFirst",
                    "defaultValue": "scipy.optimize._nonlin.BroydenFirst",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p3gus9q6",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9suhs1ar",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "nkw73ccv",
            "name": "BroydenFirst.aspreconditioner",
            "description": "",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f716ab1f427f895da806ea84fb8685dda1410eb86f2e8ecee262c5d7545bc857",
            "fields": [
                {
                    "id": "nq2t_rd6",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Object:scipy.optimize._nonlin.BroydenFirst",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qwexu0y_",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._nonlin.BroydenFirst.aspreconditioner",
                    "defaultValue": "scipy.optimize._nonlin.BroydenFirst.aspreconditioner",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_eoh8o7g",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ypj4jlhl",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "4dleqcly",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vs9agm7l",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._nonlin.BroydenFirst",
                    "defaultValue": "scipy.optimize._nonlin.BroydenFirst",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qrly3082",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8zeiru00",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "4ceyvwxn",
            "name": "BroydenFirst.matvec",
            "description": "",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8119bed47284701e6af319f0c0ecf6ecfdbc1f24f2843a0e1eba268fae8d1b23",
            "fields": [
                {
                    "id": "_d4e1j6p",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Object:scipy.optimize._nonlin.BroydenFirst",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "39tmx1do",
                    "encoding": "",
                    "name": "f",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hfr4bevk",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._nonlin.BroydenFirst.matvec",
                    "defaultValue": "scipy.optimize._nonlin.BroydenFirst.matvec",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "64ta9y1n",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_ysrx2xy",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "01nwu3s6",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4io4oj8t",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._nonlin.BroydenFirst",
                    "defaultValue": "scipy.optimize._nonlin.BroydenFirst",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l92857y9",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ttwfx286",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "3lu58upb",
            "name": "BroydenFirst.rmatvec",
            "description": "",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "337a466b5cff19e80a4e796c32ce9c7a1fcdba19ccf5bde9bc6e318c8b1d0112",
            "fields": [
                {
                    "id": "mjuis3m4",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Object:scipy.optimize._nonlin.BroydenFirst",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xgn1sa1f",
                    "encoding": "",
                    "name": "f",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jv0z93x1",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._nonlin.BroydenFirst.rmatvec",
                    "defaultValue": "scipy.optimize._nonlin.BroydenFirst.rmatvec",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eq1hrx3d",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rhn4cv5f",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "y5qd77j_",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "caajr6mn",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._nonlin.BroydenFirst",
                    "defaultValue": "scipy.optimize._nonlin.BroydenFirst",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "025qjl8h",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vagyzoxy",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "yizrecau",
            "name": "BroydenFirst.rsolve",
            "description": "",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "0d158c67c4c34973ff895534ef8a54fcd798a7912689c7b6071dad09d2b5ba7f",
            "fields": [
                {
                    "id": "jn4qojlz",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Object:scipy.optimize._nonlin.BroydenFirst",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lh4pocgs",
                    "encoding": "",
                    "name": "f",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2rwndic8",
                    "encoding": "",
                    "name": "tol",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "igjolzkg",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._nonlin.BroydenFirst.rsolve",
                    "defaultValue": "scipy.optimize._nonlin.BroydenFirst.rsolve",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "70uvo3jj",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0zz81gfe",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "jnq37elr",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cjkczr2c",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._nonlin.BroydenFirst",
                    "defaultValue": "scipy.optimize._nonlin.BroydenFirst",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fseovvhe",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "srqf0l69",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "woprcjs1",
            "name": "BroydenFirst.setup",
            "description": "",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ef07b8e98292d05e7e91799d8919c9ca50c2e8799c0ce34b5ceb2f475ea251fd",
            "fields": [
                {
                    "id": "gbbkr0q2",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Object:scipy.optimize._nonlin.BroydenFirst",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mqw005o3",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lfsfao7s",
                    "encoding": "",
                    "name": "F",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ug1yv58_",
                    "encoding": "",
                    "name": "func",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lrwqn886",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._nonlin.BroydenFirst.setup",
                    "defaultValue": "scipy.optimize._nonlin.BroydenFirst.setup",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p2l09ce8",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6q0x8asq",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "u6mpbrfn",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6pkcin8d",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._nonlin.BroydenFirst",
                    "defaultValue": "scipy.optimize._nonlin.BroydenFirst",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3c12xjnb",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4yn7f8uf",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "_zh7md9b",
            "name": "BroydenFirst.solve",
            "description": "",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f7b64a848ec0dabaddc2e23d65912c5a77c9f296d5d023934189339b57ccc09b",
            "fields": [
                {
                    "id": "jnoirqcv",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Object:scipy.optimize._nonlin.BroydenFirst",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nyp4q8mv",
                    "encoding": "",
                    "name": "f",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oup6m60x",
                    "encoding": "",
                    "name": "tol",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ezxn149h",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._nonlin.BroydenFirst.solve",
                    "defaultValue": "scipy.optimize._nonlin.BroydenFirst.solve",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hqst6uwz",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9y_u6s38",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "67j4zrz8",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8wz43m5x",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._nonlin.BroydenFirst",
                    "defaultValue": "scipy.optimize._nonlin.BroydenFirst",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_5zcqjsu",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p2lyttdf",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "o4b0yad7",
            "name": "BroydenFirst.todense",
            "description": "",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4370e3c5a2567683543e4a051c588b2ecba40db7379d421e31acb4903e227331",
            "fields": [
                {
                    "id": "dnpqlk0a",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Object:scipy.optimize._nonlin.BroydenFirst",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bj1h37gb",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._nonlin.BroydenFirst.todense",
                    "defaultValue": "scipy.optimize._nonlin.BroydenFirst.todense",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dh6eajmz",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1m2fgwxm",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "bjbp5_ji",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2fu87jko",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._nonlin.BroydenFirst",
                    "defaultValue": "scipy.optimize._nonlin.BroydenFirst",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lo455whe",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vthpwc3s",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "_k7bf5w0",
            "name": "BroydenFirst.update",
            "description": "",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "dcd290c64f0b7704d58dff696fd97cc7fc0533c77b1008ff9793540718ac36a6",
            "fields": [
                {
                    "id": "0sxml_vx",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Object:scipy.optimize._nonlin.BroydenFirst",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "np7zvyn8",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5ztgp34n",
                    "encoding": "",
                    "name": "f",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9unbjyns",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._nonlin.BroydenFirst.update",
                    "defaultValue": "scipy.optimize._nonlin.BroydenFirst.update",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jp8dkfe5",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0oa_9lvp",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "e_gf74qb",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "frhnaj2g",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._nonlin.BroydenFirst",
                    "defaultValue": "scipy.optimize._nonlin.BroydenFirst",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zs567ht9",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f4l_rl2x",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "jwkw2651",
            "name": "HessianUpdateStrategy.__init__",
            "description": "\nInterface for implementing Hessian update strategies.\n    \n    Many optimization methods make use of Hessian (or inverse Hessian)\n    approximations, such as the quasi-Newton methods BFGS, SR1, L-BFGS.\n    Some of these  approximations, however, do not actually need to store\n    the entire matrix or can compute the internal matrix product with a\n    given vector in a very efficiently manner. This class serves as an\n    abstract interface between the optimization algorithm and the\n    quasi-Newton update strategies, giving freedom of implementation\n    to store and update the internal matrix as efficiently as possible.\n    Different choices of initialization and update procedure will result\n    in different quasi-Newton strategies.\n    \n    Four methods should be implemented in derived classes: ``initialize``,\n    ``update``, ``dot`` and ``get_matrix``. The matrix multiplication\n    operator ``@`` is also defined to call the ``dot`` method.\n    \n    Notes\n    -----\n    Any instance of a class that implements this interface,\n    can be accepted by the method ``minimize`` and used by\n    the compatible solvers to approximate the Hessian (or\n    inverse Hessian) used by the optimization algorithms.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "dc8c731a5fcb423c3f01d937320a44db28e4d18f35fd23f8c3d5a53a67b9dd82",
            "fields": [
                {
                    "id": "_t_dr22o",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to HessianUpdateStrategy object",
                    "type": "Object:scipy.optimize._hessian_update_strategy.HessianUpdateStrategy",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "id": "0kcogd39",
                    "encoding": "",
                    "name": "args",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "94l0b7e_",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v4z1m4k4",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._hessian_update_strategy.HessianUpdateStrategy.__init__",
                    "defaultValue": "scipy.optimize._hessian_update_strategy.HessianUpdateStrategy.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tsmch6bf",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ekuz_e3y",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "mwbl93c8",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3v0h3j8_",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._hessian_update_strategy.HessianUpdateStrategy",
                    "defaultValue": "scipy.optimize._hessian_update_strategy.HessianUpdateStrategy",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rpfnx1cr",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hxwt1lom",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "9_gq0alc",
            "name": "HessianUpdateStrategy.dot",
            "description": "Compute the product of the internal matrix with the given vector.\n    \n    Parameters\n    ----------\n    p : array_like\n        1-D array representing a vector.\n    \n    Returns\n    -------\n    Hp : array\n        1-D represents the result of multiplying the approximation matrix\n        by vector p.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "dd7efc246dea6963ca4ee0d689ae867bc17364841fc6d1a220bd8d913bd61c5e",
            "fields": [
                {
                    "id": "0tqyi7jm",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.optimize._hessian_update_strategy.HessianUpdateStrategy.dot object",
                    "type": "Object:scipy.optimize._hessian_update_strategy.HessianUpdateStrategy",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u7ovj28q",
                    "encoding": "",
                    "name": "p",
                    "value": "",
                    "defaultValue": "",
                    "description": "1-D array representing a vector.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sitjcsbt",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._hessian_update_strategy.HessianUpdateStrategy.dot",
                    "defaultValue": "scipy.optimize._hessian_update_strategy.HessianUpdateStrategy.dot",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kg09ocsy",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yw3vlvc7",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ycweskr8",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1hum7u1f",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._hessian_update_strategy.HessianUpdateStrategy",
                    "defaultValue": "scipy.optimize._hessian_update_strategy.HessianUpdateStrategy",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "05dnre64",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hw64tk9g",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "c1zgzs11",
            "name": "HessianUpdateStrategy.get_matrix",
            "description": "Return current internal matrix.\n    \n    Returns\n    -------\n    H : ndarray, shape (n, n)\n        Dense matrix containing either the Hessian\n        or its inverse (depending on how 'approx_type'\n        is defined).",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a900f795c5b89f569d2f62c33d15f0a07e534fa78cce9f552626d8502f0a645e",
            "fields": [
                {
                    "id": "cn8c2xtb",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.optimize._hessian_update_strategy.HessianUpdateStrategy.get_matrix object",
                    "type": "Object:scipy.optimize._hessian_update_strategy.HessianUpdateStrategy",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "06oqjdg9",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._hessian_update_strategy.HessianUpdateStrategy.get_matrix",
                    "defaultValue": "scipy.optimize._hessian_update_strategy.HessianUpdateStrategy.get_matrix",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0cedkw1b",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hc288_0r",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "gn5texcd",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t3ttgrpk",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._hessian_update_strategy.HessianUpdateStrategy",
                    "defaultValue": "scipy.optimize._hessian_update_strategy.HessianUpdateStrategy",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7pru2ntr",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0_p9iksg",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "o3zrjrk0",
            "name": "HessianUpdateStrategy.initialize",
            "description": "Initialize internal matrix.\n    \n    Allocate internal memory for storing and updating\n    the Hessian or its inverse.\n    \n    Parameters\n    ----------\n    n : int\n        Problem dimension.\n    approx_type : {'hess', 'inv_hess'}\n        Selects either the Hessian or the inverse Hessian.\n        When set to 'hess' the Hessian will be stored and updated.\n        When set to 'inv_hess' its inverse will be used instead.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "185895b71e85948b1a0c983311ac591286d591fe8bc00d084a3a4a8a03d63430",
            "fields": [
                {
                    "id": "w865816h",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.optimize._hessian_update_strategy.HessianUpdateStrategy.initialize object",
                    "type": "Object:scipy.optimize._hessian_update_strategy.HessianUpdateStrategy",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_o3rsqhq",
                    "encoding": "",
                    "name": "n",
                    "value": "",
                    "defaultValue": "",
                    "description": "Problem dimension.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ldr57ore",
                    "encoding": "",
                    "name": "approx_type",
                    "value": "",
                    "defaultValue": "",
                    "description": "Selects either the Hessian or the inverse Hessian.\nWhen set to 'hess' the Hessian will be stored and updated.\nWhen set to 'inv_hess' its inverse will be used instead.",
                    "type": "{'hess', 'invhess'}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "junj_y75",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._hessian_update_strategy.HessianUpdateStrategy.initialize",
                    "defaultValue": "scipy.optimize._hessian_update_strategy.HessianUpdateStrategy.initialize",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kga3qght",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "coo7i88l",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "kh_ek9vt",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q3zb6w5n",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._hessian_update_strategy.HessianUpdateStrategy",
                    "defaultValue": "scipy.optimize._hessian_update_strategy.HessianUpdateStrategy",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b1flw6w1",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ywg194nb",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "sgjkicfh",
            "name": "HessianUpdateStrategy.update",
            "description": "Update internal matrix.\n    \n    Update Hessian matrix or its inverse (depending on how 'approx_type'\n    is defined) using information about the last evaluated points.\n    \n    Parameters\n    ----------\n    delta_x : ndarray\n        The difference between two points the gradient\n        function have been evaluated at: ``delta_x = x2 - x1``.\n    delta_grad : ndarray\n        The difference between the gradients:\n        ``delta_grad = grad(x2) - grad(x1)``.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "cb7fc219c9c1ed57d007816438c307676365915414d43163d9bf7dac96b95367",
            "fields": [
                {
                    "id": "046b0qqq",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.optimize._hessian_update_strategy.HessianUpdateStrategy.update object",
                    "type": "Object:scipy.optimize._hessian_update_strategy.HessianUpdateStrategy",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4kfoz75o",
                    "encoding": "",
                    "name": "delta_x",
                    "value": "",
                    "defaultValue": "",
                    "description": "The difference between two points the gradient\nfunction have been evaluated at: ``delta_x = x2 - x1``.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zd02hzop",
                    "encoding": "",
                    "name": "delta_grad",
                    "value": "",
                    "defaultValue": "",
                    "description": "The difference between the gradients:\n``delta_grad = grad(x2) - grad(x1)``.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m9q8ptl0",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._hessian_update_strategy.HessianUpdateStrategy.update",
                    "defaultValue": "scipy.optimize._hessian_update_strategy.HessianUpdateStrategy.update",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l34u5829",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "09dtrae8",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "wqij3b2g",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9iedob2e",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._hessian_update_strategy.HessianUpdateStrategy",
                    "defaultValue": "scipy.optimize._hessian_update_strategy.HessianUpdateStrategy",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ctulxayv",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2abcs7od",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "9jailwvc",
            "name": "InverseJacobian.__init__",
            "description": "\nA simple wrapper that inverts the Jacobian using the `solve` method.\n    \n    .. legacy:: class\n    \n        See the newer, more consistent interfaces in :mod:`scipy.optimize`.\n    \n    Parameters\n    ----------\n    jacobian : Jacobian\n        The Jacobian to invert.\n    \n    Attributes\n    ----------\n    shape\n        Matrix dimensions (M, N)\n    dtype\n        Data type of the matrix.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5acf0b43d01a05597d49b34d717669b39d76c58e1dd8fbcfe931b7c0cf33ec45",
            "fields": [
                {
                    "id": "2binutmn",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to InverseJacobian object",
                    "type": "Object:scipy.optimize._nonlin.InverseJacobian",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5_f2nh66",
                    "encoding": "",
                    "name": "jacobian",
                    "value": "",
                    "defaultValue": "",
                    "description": "The Jacobian to invert.",
                    "type": "Jacobian",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y0kiy12c",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._nonlin.InverseJacobian.__init__",
                    "defaultValue": "scipy.optimize._nonlin.InverseJacobian.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2bi14xn4",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "22km6xtj",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "0db83xez",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ek851bq1",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._nonlin.InverseJacobian",
                    "defaultValue": "scipy.optimize._nonlin.InverseJacobian",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5n26dna1",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p6ogrerg",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "i8lhvn3e",
            "name": "KrylovJacobian.__init__",
            "description": "\nFind a root of a function, using Krylov approximation for inverse Jacobian.\n    \n    This method is suitable for solving large-scale problems.\n    \n    Parameters\n    ----------\n    %(params_basic)s\n    rdiff : float, optional\n        Relative step size to use in numerical differentiation.\n    method : str or callable, optional\n        Krylov method to use to approximate the Jacobian.  Can be a string,\n        or a function implementing the same interface as the iterative\n        solvers in `scipy.sparse.linalg`. If a string, needs to be one of:\n        ``'lgmres'``, ``'gmres'``, ``'bicgstab'``, ``'cgs'``, ``'minres'``,\n        ``'tfqmr'``.\n    \n        The default is `scipy.sparse.linalg.lgmres`.\n    inner_maxiter : int, optional\n        Parameter to pass to the \"inner\" Krylov solver: maximum number of\n        iterations. Iteration will stop after maxiter steps even if the\n        specified tolerance has not been achieved.\n    inner_M : LinearOperator or InverseJacobian\n        Preconditioner for the inner Krylov iteration.\n        Note that you can use also inverse Jacobians as (adaptive)\n        preconditioners. For example,\n    \n        >>> from scipy.optimize import BroydenFirst, KrylovJacobian\n        >>> from scipy.optimize import InverseJacobian\n        >>> jac = BroydenFirst()\n        >>> kjac = KrylovJacobian(inner_M=InverseJacobian(jac))\n    \n        If the preconditioner has a method named 'update', it will be called\n        as ``update(x, f)`` after each nonlinear step, with ``x`` giving\n        the current point, and ``f`` the current function value.\n    outer_k : int, optional\n        Size of the subspace kept across LGMRES nonlinear iterations.\n        See `scipy.sparse.linalg.lgmres` for details.\n    inner_kwargs : kwargs\n        Keyword parameters for the \"inner\" Krylov solver\n        (defined with `method`). Parameter names must start with\n        the `inner_` prefix which will be stripped before passing on\n        the inner method. See, e.g., `scipy.sparse.linalg.gmres` for details.\n    %(params_extra)s\n    \n    See Also\n    --------\n    root : Interface to root finding algorithms for multivariate\n           functions. See ``method='krylov'`` in particular.\n    scipy.sparse.linalg.gmres\n    scipy.sparse.linalg.lgmres\n    \n    Notes\n    -----\n    This function implements a Newton-Krylov solver. The basic idea is\n    to compute the inverse of the Jacobian with an iterative Krylov\n    method. These methods require only evaluating the Jacobian-vector\n    products, which are conveniently approximated by a finite difference:\n    \n    .. math:: J v \\approx (f(x + \\omega*v/|v|) - f(x)) / \\omega\n    \n    Due to the use of iterative matrix inverses, these methods can\n    deal with large nonlinear problems.\n    \n    SciPy's `scipy.sparse.linalg` module offers a selection of Krylov\n    solvers to choose from. The default here is `lgmres`, which is a\n    variant of restarted GMRES iteration that reuses some of the\n    information obtained in the previous Newton steps to invert\n    Jacobians in subsequent steps.\n    \n    For a review on Newton-Krylov methods, see for example [1]_,\n    and for the LGMRES sparse inverse method, see [2]_.\n    \n    References\n    ----------\n    .. [1] C. T. Kelley, Solving Nonlinear Equations with Newton's Method,\n           SIAM, pp.57-83, 2003.\n           :doi:`10.1137/1.9780898718898.ch3`\n    .. [2] D.A. Knoll and D.E. Keyes, J. Comp. Phys. 193, 357 (2004).\n           :doi:`10.1016/j.jcp.2003.08.010`\n    .. [3] A.H. Baker and E.R. Jessup and T. Manteuffel,\n           SIAM J. Matrix Anal. Appl. 26, 962 (2005).\n           :doi:`10.1137/S0895479803422014`\n    \n    Examples\n    --------\n    The following functions define a system of nonlinear equations\n    \n    >>> def fun(x):\n    ...     return [x[0] + 0.5 * x[1] - 1.0,\n    ...             0.5 * (x[1] - x[0]) ** 2]\n    \n    A solution can be obtained as follows.\n    \n    >>> from scipy import optimize\n    >>> sol = optimize.newton_krylov(fun, [0, 0])\n    >>> sol\n    array([0.66731771, 0.66536458])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b0a450604801089efe5e03a7a49cb9124cde084d61e0ef1485123935a26790a0",
            "fields": [
                {
                    "id": "fvewxyml",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to KrylovJacobian object",
                    "type": "Object:scipy.optimize._nonlin.KrylovJacobian",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ju9127t9",
                    "encoding": "",
                    "name": "rdiff",
                    "value": "",
                    "defaultValue": "",
                    "description": "Relative step size to use in numerical differentiation.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bofu8lm1",
                    "encoding": "",
                    "name": "method",
                    "value": "lgmres",
                    "defaultValue": "lgmres",
                    "description": "Krylov method to use to approximate the Jacobian.  Can be a string,\nor a function implementing the same interface as the iterative\nsolvers in `scipy.sparse.linalg`. If a string, needs to be one of:\n``'lgmres'``, ``'gmres'``, ``'bicgstab'``, ``'cgs'``, ``'minres'``,\n``'tfqmr'``.\n\nThe default is `scipy.sparse.linalg.lgmres`.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r37hk8bj",
                    "encoding": "",
                    "name": "inner_maxiter",
                    "value": 20,
                    "defaultValue": 20,
                    "description": "Parameter to pass to the \"inner\" Krylov solver: maximum number of\niterations. Iteration will stop after maxiter steps even if the\nspecified tolerance has not been achieved.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cz2gtmxl",
                    "encoding": "",
                    "name": "inner_M",
                    "value": "",
                    "defaultValue": "",
                    "description": "Preconditioner for the inner Krylov iteration.\nNote that you can use also inverse Jacobians as (adaptive)\npreconditioners. For example,\n\n>>> from scipy.optimize import BroydenFirst, KrylovJacobian\n>>> from scipy.optimize import InverseJacobian\n>>> jac = BroydenFirst()\n>>> kjac = KrylovJacobian(inner_M=InverseJacobian(jac))\n\nIf the preconditioner has a method named 'update', it will be called\nas ``update(x, f)`` after each nonlinear step, with ``x`` giving\nthe current point, and ``f`` the current function value.",
                    "type": "LinearOperator or InverseJacobian",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cvrunz_j",
                    "encoding": "",
                    "name": "outer_k",
                    "value": 10,
                    "defaultValue": 10,
                    "description": "Size of the subspace kept across LGMRES nonlinear iterations.\nSee `scipy.sparse.linalg.lgmres` for details.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yfp8ci8d",
                    "encoding": "",
                    "name": "kw",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jl3l_qbi",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._nonlin.KrylovJacobian.__init__",
                    "defaultValue": "scipy.optimize._nonlin.KrylovJacobian.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2mkzg193",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xnx57svt",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "203tjidf",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qr3e4dv4",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._nonlin.KrylovJacobian",
                    "defaultValue": "scipy.optimize._nonlin.KrylovJacobian",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ghx89bqi",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vly_ihw_",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "oljbhkqw",
            "name": "KrylovJacobian.aspreconditioner",
            "description": "",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "43e918bc584e95626433e6e349ba4f0a2aaaf088cb267a26891ad467b4550625",
            "fields": [
                {
                    "id": "w2yh8mzt",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Object:scipy.optimize._nonlin.KrylovJacobian",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dlc96x7p",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._nonlin.KrylovJacobian.aspreconditioner",
                    "defaultValue": "scipy.optimize._nonlin.KrylovJacobian.aspreconditioner",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5fcrmwkg",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w4oxepwy",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "e0w__zlg",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g7j7ug51",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._nonlin.KrylovJacobian",
                    "defaultValue": "scipy.optimize._nonlin.KrylovJacobian",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9uh66pyt",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2bppdf2y",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "xf0uxvc3",
            "name": "KrylovJacobian.matvec",
            "description": "",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7552ccce536069953ffb75b5f3287bc02e183d0d3a9215dc60a34ffa34739746",
            "fields": [
                {
                    "id": "1ivisi2s",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Object:scipy.optimize._nonlin.KrylovJacobian",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "90am__ci",
                    "encoding": "",
                    "name": "v",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0sug4qgg",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._nonlin.KrylovJacobian.matvec",
                    "defaultValue": "scipy.optimize._nonlin.KrylovJacobian.matvec",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0x5pe8bs",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0qqn3gsv",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "k3g2pyzo",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nnpoqv5y",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._nonlin.KrylovJacobian",
                    "defaultValue": "scipy.optimize._nonlin.KrylovJacobian",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "98f_kuin",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u5fnbptd",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "usr889op",
            "name": "KrylovJacobian.setup",
            "description": "",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9ace9f38912fefe79839a042f53704d799e5c1b57e110822dd8bbe34aea00163",
            "fields": [
                {
                    "id": "nbbh88q0",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Object:scipy.optimize._nonlin.KrylovJacobian",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yq3qfm63",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3kiqt8hq",
                    "encoding": "",
                    "name": "f",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z1vnzfn2",
                    "encoding": "",
                    "name": "func",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f8vdqkl0",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._nonlin.KrylovJacobian.setup",
                    "defaultValue": "scipy.optimize._nonlin.KrylovJacobian.setup",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eco_d3y2",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "khown6xk",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "t25x43h2",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c6d4ey46",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._nonlin.KrylovJacobian",
                    "defaultValue": "scipy.optimize._nonlin.KrylovJacobian",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3wykp4o6",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xt6dr9gu",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "uw36p9rj",
            "name": "KrylovJacobian.solve",
            "description": "",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7ae42dd3d8483530a0a0be639f728734dcb32b57eeec8b8199b29240c8c2c11c",
            "fields": [
                {
                    "id": "8k95m981",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Object:scipy.optimize._nonlin.KrylovJacobian",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jbp33krz",
                    "encoding": "",
                    "name": "rhs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f5f495b7",
                    "encoding": "",
                    "name": "tol",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ghk2ehgq",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._nonlin.KrylovJacobian.solve",
                    "defaultValue": "scipy.optimize._nonlin.KrylovJacobian.solve",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r4_t4xqb",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rtllq_wx",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "a0lmx735",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q_bdhi89",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._nonlin.KrylovJacobian",
                    "defaultValue": "scipy.optimize._nonlin.KrylovJacobian",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8qiund1x",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1b1mue_o",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "ktqto7oh",
            "name": "KrylovJacobian.update",
            "description": "",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "152ef71e9679916fa721ae1a01224aca56817a7e728076cb52261cc355ba40ef",
            "fields": [
                {
                    "id": "uz5zo4bw",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Object:scipy.optimize._nonlin.KrylovJacobian",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "woumyhj5",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i_3w84ss",
                    "encoding": "",
                    "name": "f",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5q5obncv",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._nonlin.KrylovJacobian.update",
                    "defaultValue": "scipy.optimize._nonlin.KrylovJacobian.update",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eyure49e",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hjcgg6v0",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "vwcnf0vy",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pqlna0pq",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._nonlin.KrylovJacobian",
                    "defaultValue": "scipy.optimize._nonlin.KrylovJacobian",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6it9gvfr",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xxxc94ft",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "il2porju",
            "name": "LbfgsInvHessProduct.__init__",
            "description": "Construct the operator.\nLinear operator for the L-BFGS approximate inverse Hessian.\n    \n    This operator computes the product of a vector with the approximate inverse\n    of the Hessian of the objective function, using the L-BFGS limited\n    memory approximation to the inverse Hessian, accumulated during the\n    optimization.\n    \n    Objects of this class implement the ``scipy.sparse.linalg.LinearOperator``\n    interface.\n    \n    Parameters\n    ----------\n    sk : array_like, shape=(n_corr, n)\n        Array of `n_corr` most recent updates to the solution vector.\n        (See [1]).\n    yk : array_like, shape=(n_corr, n)\n        Array of `n_corr` most recent updates to the gradient. (See [1]).\n    \n    References\n    ----------\n    .. [1] Nocedal, Jorge. \"Updating quasi-Newton matrices with limited\n       storage.\" Mathematics of computation 35.151 (1980): 773-782.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "98f3ab3abf25c79a1b027a45562da83be72331eab241b9a9953b63e4562d1f96",
            "fields": [
                {
                    "id": "4ifp9tpk",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.optimize._lbfgsb_py.LbfgsInvHessProduct.__init__ object",
                    "type": "Object:scipy.optimize._lbfgsb_py.LbfgsInvHessProduct",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zc9gap43",
                    "encoding": "",
                    "name": "sk",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wpo9lcsw",
                    "encoding": "",
                    "name": "yk",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y0vf3eac",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._lbfgsb_py.LbfgsInvHessProduct.__init__",
                    "defaultValue": "scipy.optimize._lbfgsb_py.LbfgsInvHessProduct.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u01umitf",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1pq_3_84",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "cppsfbpp",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "je7pr7c0",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._lbfgsb_py.LbfgsInvHessProduct",
                    "defaultValue": "scipy.optimize._lbfgsb_py.LbfgsInvHessProduct",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w1zs5lav",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "krbb4p9z",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "oqoj_sx9",
            "name": "LbfgsInvHessProduct.adjoint",
            "description": "Hermitian adjoint.\n    \n    Returns the Hermitian adjoint of self, aka the Hermitian\n    conjugate or Hermitian transpose. For a complex matrix, the\n    Hermitian adjoint is equal to the conjugate transpose.\n    \n    Can be abbreviated self.H instead of self.adjoint().\n    \n    Returns\n    -------\n    A_H : LinearOperator\n        Hermitian adjoint of self.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "588e3100dbb8ffe9c0d78e92032cd82bc7bd9d69bacc7e153d6f646073aeeda9",
            "fields": [
                {
                    "id": "qf74_8ic",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.optimize._lbfgsb_py.LbfgsInvHessProduct.adjoint object",
                    "type": "Object:scipy.optimize._lbfgsb_py.LbfgsInvHessProduct",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n4z5gkdk",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._lbfgsb_py.LbfgsInvHessProduct.adjoint",
                    "defaultValue": "scipy.optimize._lbfgsb_py.LbfgsInvHessProduct.adjoint",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sn9mhw03",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "266kt0kw",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "1isu3pk1",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "533es03e",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._lbfgsb_py.LbfgsInvHessProduct",
                    "defaultValue": "scipy.optimize._lbfgsb_py.LbfgsInvHessProduct",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3zcq_fc_",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ou45_fhk",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "603_ij1x",
            "name": "LbfgsInvHessProduct.dot",
            "description": "Matrix-matrix or matrix-vector multiplication.\n    \n    Parameters\n    ----------\n    x : array_like\n        1-d or 2-d array, representing a vector or matrix.\n    \n    Returns\n    -------\n    Ax : array\n        1-d or 2-d array (depending on the shape of x) that represents\n        the result of applying this linear operator on x.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "3891abb28730ffe9efec318123b4c190d1841890ebdebff206c282839957f307",
            "fields": [
                {
                    "id": "i79y2_c6",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.optimize._lbfgsb_py.LbfgsInvHessProduct.dot object",
                    "type": "Object:scipy.optimize._lbfgsb_py.LbfgsInvHessProduct",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_gw1yzqt",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "1-d or 2-d array, representing a vector or matrix.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "132m9qt6",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._lbfgsb_py.LbfgsInvHessProduct.dot",
                    "defaultValue": "scipy.optimize._lbfgsb_py.LbfgsInvHessProduct.dot",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5ik5i17b",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7g8yctnv",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "nc1u3oq8",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3terl3kt",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._lbfgsb_py.LbfgsInvHessProduct",
                    "defaultValue": "scipy.optimize._lbfgsb_py.LbfgsInvHessProduct",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t70511pj",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h2awq285",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "e7s95btd",
            "name": "LbfgsInvHessProduct.matmat",
            "description": "Matrix-matrix multiplication.\n    \n    Performs the operation y=A@X where A is an MxN linear\n    operator and X dense N*K matrix or ndarray.\n    \n    Parameters\n    ----------\n    X : {matrix, ndarray}\n        An array with shape (N,K).\n    \n    Returns\n    -------\n    Y : {matrix, ndarray}\n        A matrix or ndarray with shape (M,K) depending on\n        the type of the X argument.\n    \n    Notes\n    -----\n    This matmat wraps any user-specified matmat routine or overridden\n    _matmat method to ensure that y has the correct type.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2dee4a153d9d0718fd0c33d4e8c5825a6d14310fed2aca92e388baa1d533f576",
            "fields": [
                {
                    "id": "_9xcgrp2",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.optimize._lbfgsb_py.LbfgsInvHessProduct.matmat object",
                    "type": "Object:scipy.optimize._lbfgsb_py.LbfgsInvHessProduct",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a1zlkln4",
                    "encoding": "",
                    "name": "X",
                    "value": "",
                    "defaultValue": "",
                    "description": "An array with shape (N,K).",
                    "type": "{matrix, ndarray}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ctufkc93",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._lbfgsb_py.LbfgsInvHessProduct.matmat",
                    "defaultValue": "scipy.optimize._lbfgsb_py.LbfgsInvHessProduct.matmat",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uj634q41",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ff63b1v3",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "pt34qxgw",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "946jikmi",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._lbfgsb_py.LbfgsInvHessProduct",
                    "defaultValue": "scipy.optimize._lbfgsb_py.LbfgsInvHessProduct",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l6w30c18",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x5je0j69",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "t_1ga349",
            "name": "LbfgsInvHessProduct.matvec",
            "description": "Matrix-vector multiplication.\n    \n    Performs the operation y=A@x where A is an MxN linear\n    operator and x is a column vector or 1-d array.\n    \n    Parameters\n    ----------\n    x : {matrix, ndarray}\n        An array with shape (N,) or (N,1).\n    \n    Returns\n    -------\n    y : {matrix, ndarray}\n        A matrix or ndarray with shape (M,) or (M,1) depending\n        on the type and shape of the x argument.\n    \n    Notes\n    -----\n    This matvec wraps the user-specified matvec routine or overridden\n    _matvec method to ensure that y has the correct shape and type.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "811199292a71305aee1435c8d1f8b7cf6e39c309b24f357ddd7fe0b8857b2243",
            "fields": [
                {
                    "id": "yismjs_w",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.optimize._lbfgsb_py.LbfgsInvHessProduct.matvec object",
                    "type": "Object:scipy.optimize._lbfgsb_py.LbfgsInvHessProduct",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l1ppgej1",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "An array with shape (N,) or (N,1).",
                    "type": "{matrix, ndarray}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xs8w1yv0",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._lbfgsb_py.LbfgsInvHessProduct.matvec",
                    "defaultValue": "scipy.optimize._lbfgsb_py.LbfgsInvHessProduct.matvec",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3u8o9_n3",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u7ffaikh",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "5uuwijub",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zo6uq8rh",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._lbfgsb_py.LbfgsInvHessProduct",
                    "defaultValue": "scipy.optimize._lbfgsb_py.LbfgsInvHessProduct",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "que162wt",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "epx99kbb",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "vdzzdb4p",
            "name": "LbfgsInvHessProduct.rmatmat",
            "description": "Adjoint matrix-matrix multiplication.\n    \n    Performs the operation y = A^H @ x where A is an MxN linear\n    operator and x is a column vector or 1-d array, or 2-d array.\n    The default implementation defers to the adjoint.\n    \n    Parameters\n    ----------\n    X : {matrix, ndarray}\n        A matrix or 2D array.\n    \n    Returns\n    -------\n    Y : {matrix, ndarray}\n        A matrix or 2D array depending on the type of the input.\n    \n    Notes\n    -----\n    This rmatmat wraps the user-specified rmatmat routine.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "570102707b180975be490336b5e9bee8dd2368c5e85bf861b82b29c80c223b59",
            "fields": [
                {
                    "id": "r14vimls",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.optimize._lbfgsb_py.LbfgsInvHessProduct.rmatmat object",
                    "type": "Object:scipy.optimize._lbfgsb_py.LbfgsInvHessProduct",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s_mni76r",
                    "encoding": "",
                    "name": "X",
                    "value": "",
                    "defaultValue": "",
                    "description": "A matrix or 2D array.",
                    "type": "{matrix, ndarray}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e_zvr2xv",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._lbfgsb_py.LbfgsInvHessProduct.rmatmat",
                    "defaultValue": "scipy.optimize._lbfgsb_py.LbfgsInvHessProduct.rmatmat",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9hb4d2x_",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q77lj2jf",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "4fyhpng7",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kgndtybs",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._lbfgsb_py.LbfgsInvHessProduct",
                    "defaultValue": "scipy.optimize._lbfgsb_py.LbfgsInvHessProduct",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jvlbtw09",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "heqdezv4",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "ruup7832",
            "name": "LbfgsInvHessProduct.rmatvec",
            "description": "Adjoint matrix-vector multiplication.\n    \n    Performs the operation y = A^H @ x where A is an MxN linear\n    operator and x is a column vector or 1-d array.\n    \n    Parameters\n    ----------\n    x : {matrix, ndarray}\n        An array with shape (M,) or (M,1).\n    \n    Returns\n    -------\n    y : {matrix, ndarray}\n        A matrix or ndarray with shape (N,) or (N,1) depending\n        on the type and shape of the x argument.\n    \n    Notes\n    -----\n    This rmatvec wraps the user-specified rmatvec routine or overridden\n    _rmatvec method to ensure that y has the correct shape and type.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "da1a61333b29f63f6d4ec9834ef8f17c4829f9df8f3435d3bee0f5ea0d252d75",
            "fields": [
                {
                    "id": "dypf1l3n",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.optimize._lbfgsb_py.LbfgsInvHessProduct.rmatvec object",
                    "type": "Object:scipy.optimize._lbfgsb_py.LbfgsInvHessProduct",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "76xi62jl",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "An array with shape (M,) or (M,1).",
                    "type": "{matrix, ndarray}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "szyvgwnn",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._lbfgsb_py.LbfgsInvHessProduct.rmatvec",
                    "defaultValue": "scipy.optimize._lbfgsb_py.LbfgsInvHessProduct.rmatvec",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h16qrl17",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rqr4q3z3",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "r_seyysi",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ngyfz__p",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._lbfgsb_py.LbfgsInvHessProduct",
                    "defaultValue": "scipy.optimize._lbfgsb_py.LbfgsInvHessProduct",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7z6dyloq",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q_sjc566",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "o20sl67v",
            "name": "LbfgsInvHessProduct.todense",
            "description": "Return a dense array representation of this operator.\n    \n    Returns\n    -------\n    arr : ndarray, shape=(n, n)\n        An array with the same shape and containing\n        the same data represented by this `LinearOperator`.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9f8514d0f4bb991335d1a14e29d65d236483a05efd048a963605f884406f2db3",
            "fields": [
                {
                    "id": "t6l_bmjb",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.optimize._lbfgsb_py.LbfgsInvHessProduct.todense object",
                    "type": "Object:scipy.optimize._lbfgsb_py.LbfgsInvHessProduct",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6l8f9stx",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._lbfgsb_py.LbfgsInvHessProduct.todense",
                    "defaultValue": "scipy.optimize._lbfgsb_py.LbfgsInvHessProduct.todense",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u1jbgy8v",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1tkvwmd7",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "zmwl4mr2",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ax12xljz",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._lbfgsb_py.LbfgsInvHessProduct",
                    "defaultValue": "scipy.optimize._lbfgsb_py.LbfgsInvHessProduct",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vddfytl9",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bcev41ht",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "dv0b8v_i",
            "name": "LbfgsInvHessProduct.transpose",
            "description": "Transpose this linear operator.\n    \n    Returns a LinearOperator that represents the transpose of this one.\n    Can be abbreviated self.T instead of self.transpose().",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c6b7bbbe641a12d5e66f2dfe5b3825fa9347f6904cc936f7cab6d4318d427801",
            "fields": [
                {
                    "id": "yjputp8t",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.optimize._lbfgsb_py.LbfgsInvHessProduct.transpose object",
                    "type": "Object:scipy.optimize._lbfgsb_py.LbfgsInvHessProduct",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fp87v_qd",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._lbfgsb_py.LbfgsInvHessProduct.transpose",
                    "defaultValue": "scipy.optimize._lbfgsb_py.LbfgsInvHessProduct.transpose",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ualym2k6",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "maa7gi8y",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "2c_w1twi",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4a5d8fru",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._lbfgsb_py.LbfgsInvHessProduct",
                    "defaultValue": "scipy.optimize._lbfgsb_py.LbfgsInvHessProduct",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7klnj4iw",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8ruirias",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "azfqzse7",
            "name": "LinearConstraint.__init__",
            "description": "\nLinear constraint on the variables.\n    \n    The constraint has the general inequality form::\n    \n        lb <= A.dot(x) <= ub\n    \n    Here the vector of independent variables x is passed as ndarray of shape\n    (n,) and the matrix A has shape (m, n).\n    \n    It is possible to use equal bounds to represent an equality constraint or\n    infinite bounds to represent a one-sided constraint.\n    \n    Parameters\n    ----------\n    A : {array_like, sparse array}, shape (m, n)\n        Matrix defining the constraint.\n    lb, ub : dense array_like, optional\n        Lower and upper limits on the constraint. Each array must have the\n        shape (m,) or be a scalar, in the latter case a bound will be the same\n        for all components of the constraint. Use ``np.inf`` with an\n        appropriate sign to specify a one-sided constraint.\n        Set components of `lb` and `ub` equal to represent an equality\n        constraint. Note that you can mix constraints of different types:\n        interval, one-sided or equality, by setting different components of\n        `lb` and `ub` as  necessary. Defaults to ``lb = -np.inf``\n        and ``ub = np.inf`` (no limits).\n    keep_feasible : dense array_like of bool, optional\n        Whether to keep the constraint components feasible throughout\n        iterations. A single value set this property for all components.\n        Default is False. Has no effect for equality constraints.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "cdd194827ab2b4e89f164854146e46a1fcd07312a44e0c37f1ec9025f77fe784",
            "fields": [
                {
                    "id": "hqr_e9qk",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to LinearConstraint object",
                    "type": "Object:scipy.optimize._constraints.LinearConstraint",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "puovzgml",
                    "encoding": "",
                    "name": "A",
                    "value": "",
                    "defaultValue": "",
                    "description": "Matrix defining the constraint.",
                    "type": "{arraylike, sparse array}, shape (m, n)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fdet7g_u",
                    "encoding": "",
                    "name": "lb",
                    "value": "-inf",
                    "defaultValue": "-inf",
                    "description": "",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4o87wmol",
                    "encoding": "",
                    "name": "ub",
                    "value": "inf",
                    "defaultValue": "inf",
                    "description": "",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g1icbyix",
                    "encoding": "",
                    "name": "keep_feasible",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to keep the constraint components feasible throughout\niterations. A single value set this property for all components.\nDefault is False. Has no effect for equality constraints.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v9bweade",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._constraints.LinearConstraint.__init__",
                    "defaultValue": "scipy.optimize._constraints.LinearConstraint.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c0d40iqs",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j51stm7x",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "uwyf3en0",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "164atvmd",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._constraints.LinearConstraint",
                    "defaultValue": "scipy.optimize._constraints.LinearConstraint",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rhr0lbv8",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h5wtgl35",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "9c_sqa0l",
            "name": "LinearConstraint.residual",
            "description": "Calculate the residual between the constraint function and the limits\n    \n    For a linear constraint of the form::\n    \n        lb <= A@x <= ub\n    \n    the lower and upper residuals between ``A@x`` and the limits are values\n    ``sl`` and ``sb`` such that::\n    \n        lb + sl == A@x == ub - sb\n    \n    When all elements of ``sl`` and ``sb`` are positive, all elements of\n    the constraint are satisfied; a negative element in ``sl`` or ``sb``\n    indicates that the corresponding element of the constraint is not\n    satisfied.\n    \n    Parameters\n    ----------\n    x: array_like\n        Vector of independent variables\n    \n    Returns\n    -------\n    sl, sb : array-like\n        The lower and upper residuals",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "3a7fee4b4ac66c369a1a599e617be0f24be2bdb95fa6239b394ed74a4f3bd5d8",
            "fields": [
                {
                    "id": "epbteels",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.optimize._constraints.LinearConstraint.residual object",
                    "type": "Object:scipy.optimize._constraints.LinearConstraint",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wuiujj_k",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "Vector of independent variables",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tbyijicr",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._constraints.LinearConstraint.residual",
                    "defaultValue": "scipy.optimize._constraints.LinearConstraint.residual",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4zp17gpl",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6dswn9z2",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "nh54mlea",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i9khoiwp",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._constraints.LinearConstraint",
                    "defaultValue": "scipy.optimize._constraints.LinearConstraint",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "01fdmgfi",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vdo_83mj",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "d8o4wctc",
            "name": "NoConvergence.add_note",
            "description": "Exception.add_note(note) --\nadd a note to the exception",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "28f936bf636927083ea42f371788844f79d1e6178c5953397cfb1dbfb0fcba16",
            "fields": [
                {
                    "id": "yg1zr74g",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.optimize._nonlin.NoConvergence.add_note object",
                    "type": "Object:scipy.optimize._nonlin.NoConvergence",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ubmvwfwv",
                    "encoding": "",
                    "name": "note",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tyjh695n",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._nonlin.NoConvergence.add_note",
                    "defaultValue": "scipy.optimize._nonlin.NoConvergence.add_note",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0dodgsg_",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1nnfjv54",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ceg41stq",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i0p49hne",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._nonlin.NoConvergence",
                    "defaultValue": "scipy.optimize._nonlin.NoConvergence",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eluoo8br",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y2w6bf3r",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "yexi0v9p",
            "name": "NoConvergence.with_traceback",
            "description": "Exception.with_traceback(tb) --\nset self.__traceback__ to tb and return self.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7eea3d1b395494897641820e592dca35211bc622e31ad2d4237a02512402555c",
            "fields": [
                {
                    "id": "97rzitwv",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.optimize._nonlin.NoConvergence.with_traceback object",
                    "type": "Object:scipy.optimize._nonlin.NoConvergence",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t7akj621",
                    "encoding": "",
                    "name": "tb",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l1czlwgm",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._nonlin.NoConvergence.with_traceback",
                    "defaultValue": "scipy.optimize._nonlin.NoConvergence.with_traceback",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ysudzdpp",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1nwe8yyo",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "muqzsr9d",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7cul35ck",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._nonlin.NoConvergence",
                    "defaultValue": "scipy.optimize._nonlin.NoConvergence",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8we30o1u",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mzey4jzo",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "yhp4c5l7",
            "name": "NonlinearConstraint.__init__",
            "description": "\nNonlinear constraint on the variables.\n    \n    The constraint has the general inequality form::\n    \n        lb <= fun(x) <= ub\n    \n    Here the vector of independent variables x is passed as ndarray of shape\n    (n,) and ``fun`` returns a vector with m components.\n    \n    It is possible to use equal bounds to represent an equality constraint or\n    infinite bounds to represent a one-sided constraint.\n    \n    Parameters\n    ----------\n    fun : callable\n        The function defining the constraint.\n        The signature is ``fun(x) -> array_like, shape (m,)``.\n    lb, ub : array_like\n        Lower and upper bounds on the constraint. Each array must have the\n        shape (m,) or be a scalar, in the latter case a bound will be the same\n        for all components of the constraint. Use ``np.inf`` with an\n        appropriate sign to specify a one-sided constraint.\n        Set components of `lb` and `ub` equal to represent an equality\n        constraint. Note that you can mix constraints of different types:\n        interval, one-sided or equality, by setting different components of\n        `lb` and `ub` as  necessary.\n    jac : {callable,  '2-point', '3-point', 'cs'}, optional\n        Method of computing the Jacobian matrix (an m-by-n matrix,\n        where element (i, j) is the partial derivative of f[i] with\n        respect to x[j]).  The keywords {'2-point', '3-point',\n        'cs'} select a finite difference scheme for the numerical estimation.\n        A callable must have the following signature::\n    \n            jac(x) -> {ndarray, sparse array}, shape (m, n)\n    \n        Default is '2-point'.\n    hess : {callable, '2-point', '3-point', 'cs', HessianUpdateStrategy, None}, optional\n        Method for computing the Hessian matrix. The keywords\n        {'2-point', '3-point', 'cs'} select a finite difference scheme for\n        numerical  estimation.  Alternatively, objects implementing\n        `HessianUpdateStrategy` interface can be used to approximate the\n        Hessian. Currently available implementations are:\n    \n        - `BFGS` (default option)\n        - `SR1`\n    \n        A callable must return the Hessian matrix of ``dot(fun, v)`` and\n        must have the following signature:\n        ``hess(x, v) -> {LinearOperator, sparse array, array_like}, shape (n, n)``.\n        Here ``v`` is ndarray with shape (m,) containing Lagrange multipliers.\n    keep_feasible : array_like of bool, optional\n        Whether to keep the constraint components feasible throughout\n        iterations. A single value set this property for all components.\n        Default is False. Has no effect for equality constraints.\n    finite_diff_rel_step: None or array_like, optional\n        Relative step size for the finite difference approximation. Default is\n        None, which will select a reasonable value automatically depending\n        on a finite difference scheme.\n    finite_diff_jac_sparsity: {None, array_like, sparse array}, optional\n        Defines the sparsity structure of the Jacobian matrix for finite\n        difference estimation, its shape must be (m, n). If the Jacobian has\n        only few non-zero elements in *each* row, providing the sparsity\n        structure will greatly speed up the computations. A zero entry means\n        that a corresponding element in the Jacobian is identically zero.\n        If provided, forces the use of 'lsmr' trust-region solver.\n        If None (default) then dense differencing will be used.\n    \n    Notes\n    -----\n    Finite difference schemes {'2-point', '3-point', 'cs'} may be used for\n    approximating either the Jacobian or the Hessian. We, however, do not allow\n    its use for approximating both simultaneously. Hence whenever the Jacobian\n    is estimated via finite-differences, we require the Hessian to be estimated\n    using one of the quasi-Newton strategies.\n    \n    The scheme 'cs' is potentially the most accurate, but requires the function\n    to correctly handles complex inputs and be analytically continuable to the\n    complex plane. The scheme '3-point' is more accurate than '2-point' but\n    requires twice as many operations.\n    \n    Examples\n    --------\n    Constrain ``x[0] < sin(x[1]) + 1.9``\n    \n    >>> from scipy.optimize import NonlinearConstraint\n    >>> import numpy as np\n    >>> con = lambda x: x[0] - np.sin(x[1])\n    >>> nlc = NonlinearConstraint(con, -np.inf, 1.9)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "0e5abc4b35effb47b8444ced63be43e4687ff9cdaa03778e47946e9333f38352",
            "fields": [
                {
                    "id": "wb5ygjhy",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to NonlinearConstraint object",
                    "type": "Object:scipy.optimize._constraints.NonlinearConstraint",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ndj3yq_f",
                    "encoding": "",
                    "name": "fun",
                    "value": "",
                    "defaultValue": "",
                    "description": "The function defining the constraint.\nThe signature is ``fun(x) -> array_like, shape (m,)``.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eopebqxe",
                    "encoding": "",
                    "name": "lb",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1xct5eq1",
                    "encoding": "",
                    "name": "ub",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cg55w3d5",
                    "encoding": "",
                    "name": "jac",
                    "value": "2-point",
                    "defaultValue": "2-point",
                    "description": "Method of computing the Jacobian matrix (an m-by-n matrix,\nwhere element (i, j) is the partial derivative of f[i] with\nrespect to x[j]).  The keywords {'2-point', '3-point',\n'cs'} select a finite difference scheme for the numerical estimation.\nA callable must have the following signature::\n\n    jac(x) -> {ndarray, sparse array}, shape (m, n)\n\nDefault is '2-point'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ep5841qg",
                    "encoding": "",
                    "name": "hess",
                    "value": "",
                    "defaultValue": "",
                    "description": "Method for computing the Hessian matrix. The keywords\n{'2-point', '3-point', 'cs'} select a finite difference scheme for\nnumerical  estimation.  Alternatively, objects implementing\n`HessianUpdateStrategy` interface can be used to approximate the\nHessian. Currently available implementations are:\n\n- `BFGS` (default option)\n- `SR1`\n\nA callable must return the Hessian matrix of ``dot(fun, v)`` and\nmust have the following signature:\n``hess(x, v) -> {LinearOperator, sparse array, array_like}, shape (n, n)``.\nHere ``v`` is ndarray with shape (m,) containing Lagrange multipliers.",
                    "type": "{callable, '2-point', '3-point', 'cs', HessianUpdateStrategy, None}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "95tajzpj",
                    "encoding": "",
                    "name": "keep_feasible",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to keep the constraint components feasible throughout\niterations. A single value set this property for all components.\nDefault is False. Has no effect for equality constraints.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "py1zubqw",
                    "encoding": "",
                    "name": "finite_diff_rel_step",
                    "value": "",
                    "defaultValue": "",
                    "description": "Relative step size for the finite difference approximation. Default is\nNone, which will select a reasonable value automatically depending\non a finite difference scheme.",
                    "type": "None or arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d3wjbcyz",
                    "encoding": "",
                    "name": "finite_diff_jac_sparsity",
                    "value": "",
                    "defaultValue": "",
                    "description": "Defines the sparsity structure of the Jacobian matrix for finite\ndifference estimation, its shape must be (m, n). If the Jacobian has\nonly few non-zero elements in *each* row, providing the sparsity\nstructure will greatly speed up the computations. A zero entry means\nthat a corresponding element in the Jacobian is identically zero.\nIf provided, forces the use of 'lsmr' trust-region solver.\nIf None (default) then dense differencing will be used.",
                    "type": "{None, arraylike, sparse array}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "os36x236",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._constraints.NonlinearConstraint.__init__",
                    "defaultValue": "scipy.optimize._constraints.NonlinearConstraint.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n7v5li7u",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ryv6txzk",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "hluix202",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aq37jg42",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._constraints.NonlinearConstraint",
                    "defaultValue": "scipy.optimize._constraints.NonlinearConstraint",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "idcgk3sg",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w4qdgv_x",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "vwchlqqx",
            "name": "OptimizeResult.clear",
            "description": "D.clear() -> None.  Remove all items from D.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f35887f2fe08db67110ce4a8c02d103ece0beb028ffbb5e2e5ed97a1dd05b63f",
            "fields": [
                {
                    "id": "f42idebf",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.optimize._optimize.OptimizeResult.clear object",
                    "type": "Object:scipy.optimize._optimize.OptimizeResult",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c9w5gweo",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._optimize.OptimizeResult.clear",
                    "defaultValue": "scipy.optimize._optimize.OptimizeResult.clear",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "052b3nd_",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vbjftyyu",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "yoayix5q",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "snbzwan_",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._optimize.OptimizeResult",
                    "defaultValue": "scipy.optimize._optimize.OptimizeResult",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cirou404",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l0rc0zoi",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "jdd42ebd",
            "name": "OptimizeResult.copy",
            "description": "D.copy() -> a shallow copy of D",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1dbaae26f128d50c0b4ec72c85d72e321d3af12600f76f3837339c4cad3e0fa6",
            "fields": [
                {
                    "id": "74xhz4jd",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.optimize._optimize.OptimizeResult.copy object",
                    "type": "Object:scipy.optimize._optimize.OptimizeResult",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "878n1jcx",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._optimize.OptimizeResult.copy",
                    "defaultValue": "scipy.optimize._optimize.OptimizeResult.copy",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zmdwv5ek",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bts4hed8",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "qcxglqyr",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0nerkruh",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._optimize.OptimizeResult",
                    "defaultValue": "scipy.optimize._optimize.OptimizeResult",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nqo5n8o2",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aep2cl_6",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "cn8jjexk",
            "name": "OptimizeResult.fromkeys",
            "description": "Create a new dictionary with keys from iterable and values set to value.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "318054884851e2c968a558138d72c9d739e4431c72da6addcf004b38129baeb2",
            "fields": [
                {
                    "id": "c2pk6jlj",
                    "encoding": "",
                    "name": "iterable",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "id": "o5sf3u6c",
                    "encoding": "",
                    "name": "value",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "id": "pv2mo5gj",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._optimize.OptimizeResult.fromkeys",
                    "defaultValue": "scipy.optimize._optimize.OptimizeResult.fromkeys",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f1z8jnis",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kvc6cd0w",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "j9jh0jg4",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7tkjknzt",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._optimize.OptimizeResult",
                    "defaultValue": "scipy.optimize._optimize.OptimizeResult",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yyfoip6s",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tepx_lw3",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "29pxhtpd",
            "name": "OptimizeResult.get",
            "description": "Return the value for key if key is in the dictionary, else default.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "72f2aadec2fc99459d26fc8c0e390ed0e573967890a7af4ea70a4effe1e2dd49",
            "fields": [
                {
                    "id": "6974ch7h",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.optimize._optimize.OptimizeResult.get object",
                    "type": "Object:scipy.optimize._optimize.OptimizeResult",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "id": "kxwizu0o",
                    "encoding": "",
                    "name": "key",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "id": "vxr_wg5f",
                    "encoding": "",
                    "name": "default",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "id": "bg7iqwjv",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._optimize.OptimizeResult.get",
                    "defaultValue": "scipy.optimize._optimize.OptimizeResult.get",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "opv2vv7v",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nwg64x6j",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "sprvnib7",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cp059wrt",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._optimize.OptimizeResult",
                    "defaultValue": "scipy.optimize._optimize.OptimizeResult",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yjuio15h",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hsaqoz_i",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "wjhxetc4",
            "name": "OptimizeResult.items",
            "description": "D.items() -> a set-like object providing a view on D's items",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e2c76501c53c5ecac63c16127f9fb46ccf51999e0ec32c0ecd90253f30f74e6a",
            "fields": [
                {
                    "id": "2nn5yo6c",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.optimize._optimize.OptimizeResult.items object",
                    "type": "Object:scipy.optimize._optimize.OptimizeResult",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v07rbfun",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._optimize.OptimizeResult.items",
                    "defaultValue": "scipy.optimize._optimize.OptimizeResult.items",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1zcwe380",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0aag_g14",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "w6l77c46",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6eqs0bns",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._optimize.OptimizeResult",
                    "defaultValue": "scipy.optimize._optimize.OptimizeResult",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "40vlx4cw",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o19dzbgf",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "gxeim7vq",
            "name": "OptimizeResult.keys",
            "description": "D.keys() -> a set-like object providing a view on D's keys",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a7e29bd130d503a9eb47cfaf13de4edd323128f9144ead3c12bd3c9195a368b9",
            "fields": [
                {
                    "id": "xgcoepb3",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.optimize._optimize.OptimizeResult.keys object",
                    "type": "Object:scipy.optimize._optimize.OptimizeResult",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5or05n0n",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._optimize.OptimizeResult.keys",
                    "defaultValue": "scipy.optimize._optimize.OptimizeResult.keys",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uh7dkkqd",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0d4ozxwj",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "szgutsmz",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qci0hzom",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._optimize.OptimizeResult",
                    "defaultValue": "scipy.optimize._optimize.OptimizeResult",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ew0_ditk",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "am3cxj3z",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "5z4ieqjz",
            "name": "OptimizeResult.pop",
            "description": "If the key is not found, return the default if given; otherwise,\nraise a KeyError.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a4c3b79e0996b360e794a28bc524df240d73398399566b7dd2e425d3eaccf6e4",
            "fields": [
                {
                    "id": "sd_d5fzi",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.optimize._optimize.OptimizeResult.pop object",
                    "type": "Object:scipy.optimize._optimize.OptimizeResult",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3ykguj1c",
                    "encoding": "",
                    "name": "k",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "[",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "edyz1jxx",
                    "encoding": "",
                    "name": "d",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "]",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o2_2ivlj",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._optimize.OptimizeResult.pop",
                    "defaultValue": "scipy.optimize._optimize.OptimizeResult.pop",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cndo43_p",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kboyka14",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "r2jfo2og",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j5ycv0gq",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._optimize.OptimizeResult",
                    "defaultValue": "scipy.optimize._optimize.OptimizeResult",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4me6vy04",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0lj8j3e_",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "yrbobsve",
            "name": "OptimizeResult.popitem",
            "description": "Remove and return a (key, value) pair as a 2-tuple.\n    \n    Pairs are returned in LIFO (last-in, first-out) order.\n    Raises KeyError if the dict is empty.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1d60520f7bbe1d3b5866eeef36713b2eb1191c0cc2c74df898e98ded85140332",
            "fields": [
                {
                    "id": "9rrb0a2i",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.optimize._optimize.OptimizeResult.popitem object",
                    "type": "Object:scipy.optimize._optimize.OptimizeResult",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "id": "rn8_aild",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._optimize.OptimizeResult.popitem",
                    "defaultValue": "scipy.optimize._optimize.OptimizeResult.popitem",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q5otc1mk",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l66z4ovi",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "lcaw5uta",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5fx_fvu8",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._optimize.OptimizeResult",
                    "defaultValue": "scipy.optimize._optimize.OptimizeResult",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4asc6p8i",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a1wq45zl",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "o38rg76h",
            "name": "OptimizeResult.setdefault",
            "description": "Insert key with a value of default if key is not in the dictionary.\n    \n    Return the value for key if key is in the dictionary, else default.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9e4ef79eab5da7b706cd37656edcb860dc07c77c1fab54cdb0f1a3660316d386",
            "fields": [
                {
                    "id": "79zk1c90",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.optimize._optimize.OptimizeResult.setdefault object",
                    "type": "Object:scipy.optimize._optimize.OptimizeResult",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "id": "6cl1bjg0",
                    "encoding": "",
                    "name": "key",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "id": "1yhoul00",
                    "encoding": "",
                    "name": "default",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "id": "0jmpmhqv",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._optimize.OptimizeResult.setdefault",
                    "defaultValue": "scipy.optimize._optimize.OptimizeResult.setdefault",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n54orie9",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_in116ao",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "d_oe8anw",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "twj41lce",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._optimize.OptimizeResult",
                    "defaultValue": "scipy.optimize._optimize.OptimizeResult",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mtdag3n7",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c2izpfmw",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "viwy9mo0",
            "name": "OptimizeResult.update",
            "description": "D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.\nIf E is present and has a .keys() method, then does:  for k in E: D[k] = E[k]\nIf E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v\nIn either case, this is followed by: for k in F:  D[k] = F[k]",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d4e82b6e8f9e5a8f55cf29497d2acb59c2cc65f8f5a9ff752fdf7998f010750b",
            "fields": [
                {
                    "id": "39kvld3b",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.optimize._optimize.OptimizeResult.update object",
                    "type": "Object:scipy.optimize._optimize.OptimizeResult",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9pp3x2eu",
                    "encoding": "",
                    "name": "E",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0rpbnkir",
                    "encoding": "",
                    "name": "F",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bj2jlcrs",
                    "encoding": "",
                    "name": "None.",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Update",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lt5xzk4p",
                    "encoding": "",
                    "name": "D",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "from",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0uhd5o8s",
                    "encoding": "",
                    "name": "dict",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "olp7aqd6",
                    "encoding": "",
                    "name": "iterable",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "E",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w1e15a_8",
                    "encoding": "",
                    "name": "and",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "has",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_3kfg302",
                    "encoding": "",
                    "name": "If",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "E",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "72xlwx90",
                    "encoding": "",
                    "name": "is",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "present",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lk479rr7",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": ".keys",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xucfnue0",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._optimize.OptimizeResult.update",
                    "defaultValue": "scipy.optimize._optimize.OptimizeResult.update",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5iaerk9j",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ez2mhf8o",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "gro1lq60",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "etxcy2b2",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._optimize.OptimizeResult",
                    "defaultValue": "scipy.optimize._optimize.OptimizeResult",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cg6p0zi6",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s94z6atu",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "infd1mpn",
            "name": "OptimizeResult.values",
            "description": "D.values() -> an object providing a view on D's values",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2021b18b9326ee70e28e4c84ed14ef50b0c04453839983b4eab2b7f042192224",
            "fields": [
                {
                    "id": "fot1559w",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.optimize._optimize.OptimizeResult.values object",
                    "type": "Object:scipy.optimize._optimize.OptimizeResult",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "53x21ozs",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._optimize.OptimizeResult.values",
                    "defaultValue": "scipy.optimize._optimize.OptimizeResult.values",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vi9rd7c2",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z72tdlbp",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "0nhb821c",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pxh29c8l",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._optimize.OptimizeResult",
                    "defaultValue": "scipy.optimize._optimize.OptimizeResult",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7xak0jal",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y1cygqn7",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "6z1pz_hj",
            "name": "OptimizeWarning.add_note",
            "description": "Exception.add_note(note) --\nadd a note to the exception",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "70790323120dda6f2c37ef55ef38eaee60de8cfd791af37812a6b34bd26e5c7d",
            "fields": [
                {
                    "id": "dvcb6fri",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.optimize._optimize.OptimizeWarning.add_note object",
                    "type": "Object:scipy.optimize._optimize.OptimizeWarning",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tc4g8zui",
                    "encoding": "",
                    "name": "note",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "efim07s5",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._optimize.OptimizeWarning.add_note",
                    "defaultValue": "scipy.optimize._optimize.OptimizeWarning.add_note",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cp4truwe",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6c91098c",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "w__oge84",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bm1oe37h",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._optimize.OptimizeWarning",
                    "defaultValue": "scipy.optimize._optimize.OptimizeWarning",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "le051ot6",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e_jh_ya6",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "wo9jqroy",
            "name": "OptimizeWarning.with_traceback",
            "description": "Exception.with_traceback(tb) --\nset self.__traceback__ to tb and return self.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "94f8c2ac3d5e2ccbfc7702a03ee772277fef212462853bfd3e402afff32b45a8",
            "fields": [
                {
                    "id": "cbbl2by0",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.optimize._optimize.OptimizeWarning.with_traceback object",
                    "type": "Object:scipy.optimize._optimize.OptimizeWarning",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "abrcwbq1",
                    "encoding": "",
                    "name": "tb",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lbsjhmh5",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._optimize.OptimizeWarning.with_traceback",
                    "defaultValue": "scipy.optimize._optimize.OptimizeWarning.with_traceback",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eh5xqbbm",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kbjrmrx2",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "djpcocvk",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gkhw5yny",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._optimize.OptimizeWarning",
                    "defaultValue": "scipy.optimize._optimize.OptimizeWarning",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kct6ip6j",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0p5wm2gz",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "u6eb70eh",
            "name": "RootResults.__init__",
            "description": "\nRepresents the root finding result.\n    \n    Attributes\n    ----------\n    root : float\n        Estimated root location.\n    iterations : int\n        Number of iterations needed to find the root.\n    function_calls : int\n        Number of times the function was called.\n    converged : bool\n        True if the routine converged.\n    flag : str\n        Description of the cause of termination.\n    method : str\n        Root finding method used.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "16ae96fac8c6995f3834903d2012815321313798266afd589ce191e379075215",
            "fields": [
                {
                    "id": "b24tf1i9",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to RootResults object",
                    "type": "Object:scipy.optimize._zeros_py.RootResults",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rfcg3ys1",
                    "encoding": "",
                    "name": "root",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gn9v_w07",
                    "encoding": "",
                    "name": "iterations",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yzo9wnm0",
                    "encoding": "",
                    "name": "function_calls",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "17lfr0fq",
                    "encoding": "",
                    "name": "flag",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fhk2immy",
                    "encoding": "",
                    "name": "method",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_5hc9k6f",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._zeros_py.RootResults.__init__",
                    "defaultValue": "scipy.optimize._zeros_py.RootResults.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dr9mwbpt",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "64hyedhs",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "k77bvzdh",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o7hboqda",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._zeros_py.RootResults",
                    "defaultValue": "scipy.optimize._zeros_py.RootResults",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2g492uto",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8tppxzwp",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "qzbu5ukh",
            "name": "RootResults.clear",
            "description": "D.clear() -> None.  Remove all items from D.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2660ac58144c1483e0a92adc2260a495f3075d9000303b4a9efaaa1e594cbdc9",
            "fields": [
                {
                    "id": "39u61dfj",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.optimize._zeros_py.RootResults.clear object",
                    "type": "Object:scipy.optimize._zeros_py.RootResults",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7bptsbab",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._zeros_py.RootResults.clear",
                    "defaultValue": "scipy.optimize._zeros_py.RootResults.clear",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_3lraxb6",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1gw0bylg",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "y723f8eq",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ijrinnqu",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._zeros_py.RootResults",
                    "defaultValue": "scipy.optimize._zeros_py.RootResults",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sdatm2c5",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0_jee9jb",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "f3zf72x8",
            "name": "RootResults.copy",
            "description": "D.copy() -> a shallow copy of D",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "25dc0f93f90c223b92cd4dbecb70d7383d01372c098ad255d2da30b800e9e8a5",
            "fields": [
                {
                    "id": "8xe8k5c4",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.optimize._zeros_py.RootResults.copy object",
                    "type": "Object:scipy.optimize._zeros_py.RootResults",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_m0j_sz6",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._zeros_py.RootResults.copy",
                    "defaultValue": "scipy.optimize._zeros_py.RootResults.copy",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ej59cyqe",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rexazxoi",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ama70ewo",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9lkoq5m7",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._zeros_py.RootResults",
                    "defaultValue": "scipy.optimize._zeros_py.RootResults",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "quefmpwc",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p1s8bqa3",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "b0ol79um",
            "name": "RootResults.fromkeys",
            "description": "Create a new dictionary with keys from iterable and values set to value.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "cd36209a6c25cbad8434369db849401fd686e408498ba648205a98ab5c8ca94e",
            "fields": [
                {
                    "id": "a8rjc89z",
                    "encoding": "",
                    "name": "iterable",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "id": "rsksgvip",
                    "encoding": "",
                    "name": "value",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "id": "xstpwxbx",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._zeros_py.RootResults.fromkeys",
                    "defaultValue": "scipy.optimize._zeros_py.RootResults.fromkeys",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p459dwup",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qm8aj806",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "st2aga_0",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nmtvy3vy",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._zeros_py.RootResults",
                    "defaultValue": "scipy.optimize._zeros_py.RootResults",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7njs8t_9",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wjqs_uwi",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "t7a6wgm5",
            "name": "RootResults.get",
            "description": "Return the value for key if key is in the dictionary, else default.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5dc9264f2f24921373293a586637f83c7501baa892047b7b0107d4b1b4d2b59c",
            "fields": [
                {
                    "id": "vzh_6pm4",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.optimize._zeros_py.RootResults.get object",
                    "type": "Object:scipy.optimize._zeros_py.RootResults",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "id": "8qdhgww5",
                    "encoding": "",
                    "name": "key",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "id": "0p9w21mx",
                    "encoding": "",
                    "name": "default",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "id": "rjg1lb6f",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._zeros_py.RootResults.get",
                    "defaultValue": "scipy.optimize._zeros_py.RootResults.get",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iqj3b40w",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0sept_au",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "y120lld0",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jdyq_uwv",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._zeros_py.RootResults",
                    "defaultValue": "scipy.optimize._zeros_py.RootResults",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "61mx_af0",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ic7s2p1i",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "oae_69z9",
            "name": "RootResults.items",
            "description": "D.items() -> a set-like object providing a view on D's items",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "445fe6b7687822fb88f4d868c47152d153dd5915155908551197a7105d34b00a",
            "fields": [
                {
                    "id": "0_a1tbmp",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.optimize._zeros_py.RootResults.items object",
                    "type": "Object:scipy.optimize._zeros_py.RootResults",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tyb4wt59",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._zeros_py.RootResults.items",
                    "defaultValue": "scipy.optimize._zeros_py.RootResults.items",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3sfr3leg",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "85xlzrg8",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "i33rsbtb",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7n_myjzv",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._zeros_py.RootResults",
                    "defaultValue": "scipy.optimize._zeros_py.RootResults",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i64_1nfq",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bzcr_d4m",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "k5y7bzj2",
            "name": "RootResults.keys",
            "description": "D.keys() -> a set-like object providing a view on D's keys",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c8d4fcfdc3870381e780766199d797ec1676a745434ad0bc182a7f9211de2ccb",
            "fields": [
                {
                    "id": "pgmhtfa1",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.optimize._zeros_py.RootResults.keys object",
                    "type": "Object:scipy.optimize._zeros_py.RootResults",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qdr1oqes",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._zeros_py.RootResults.keys",
                    "defaultValue": "scipy.optimize._zeros_py.RootResults.keys",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l5l79anx",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vr4jwklh",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "y5q6gl6p",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8obbdqe8",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._zeros_py.RootResults",
                    "defaultValue": "scipy.optimize._zeros_py.RootResults",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b6lv2yqc",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y7bd6uka",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "wo_cuq65",
            "name": "RootResults.pop",
            "description": "If the key is not found, return the default if given; otherwise,\nraise a KeyError.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "99dc8f1384127c856dc238e5c8509aa888954716daba9c2885d5db538a819a22",
            "fields": [
                {
                    "id": "ktponjh4",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.optimize._zeros_py.RootResults.pop object",
                    "type": "Object:scipy.optimize._zeros_py.RootResults",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1mfn7lx0",
                    "encoding": "",
                    "name": "k",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "[",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "17jnonub",
                    "encoding": "",
                    "name": "d",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "]",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lhmklre7",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._zeros_py.RootResults.pop",
                    "defaultValue": "scipy.optimize._zeros_py.RootResults.pop",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "31vpiv4i",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hw4ozb8j",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "kbln9xh8",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "at63512j",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._zeros_py.RootResults",
                    "defaultValue": "scipy.optimize._zeros_py.RootResults",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qy9__27w",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e3bkj366",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "f_cbnm94",
            "name": "RootResults.popitem",
            "description": "Remove and return a (key, value) pair as a 2-tuple.\n    \n    Pairs are returned in LIFO (last-in, first-out) order.\n    Raises KeyError if the dict is empty.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "67f33b163530f09c8a99accb66f4eee9dea82c22a3344f7fa2582a5d86fb74f5",
            "fields": [
                {
                    "id": "ozpqfg4u",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.optimize._zeros_py.RootResults.popitem object",
                    "type": "Object:scipy.optimize._zeros_py.RootResults",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "id": "mi54uua7",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._zeros_py.RootResults.popitem",
                    "defaultValue": "scipy.optimize._zeros_py.RootResults.popitem",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4d9dl_q3",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "knqi8xg1",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "a3ins9ca",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lstmiz4i",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._zeros_py.RootResults",
                    "defaultValue": "scipy.optimize._zeros_py.RootResults",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0yo2_xhs",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y2i2vnjb",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "3sb_k7ou",
            "name": "RootResults.setdefault",
            "description": "Insert key with a value of default if key is not in the dictionary.\n    \n    Return the value for key if key is in the dictionary, else default.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "90e479f5c4f31f44fbb75ca7490d01831748bd7964fc801d7a6c99f5998ae701",
            "fields": [
                {
                    "id": "35cjxjlu",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.optimize._zeros_py.RootResults.setdefault object",
                    "type": "Object:scipy.optimize._zeros_py.RootResults",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "id": "jbt1g6su",
                    "encoding": "",
                    "name": "key",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "id": "v95y0o57",
                    "encoding": "",
                    "name": "default",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "id": "ioqahgd1",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._zeros_py.RootResults.setdefault",
                    "defaultValue": "scipy.optimize._zeros_py.RootResults.setdefault",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e_j6637g",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k77343i6",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "6bt37slq",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "swiudajr",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._zeros_py.RootResults",
                    "defaultValue": "scipy.optimize._zeros_py.RootResults",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tdoxm_f7",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hga18qo4",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "6l25_xm3",
            "name": "RootResults.update",
            "description": "D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.\nIf E is present and has a .keys() method, then does:  for k in E: D[k] = E[k]\nIf E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v\nIn either case, this is followed by: for k in F:  D[k] = F[k]",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "68f464301eed5649f25d3a1a827525e878f5ca8796a2b424e9e48622fdb9e3f2",
            "fields": [
                {
                    "id": "t2iwegb0",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.optimize._zeros_py.RootResults.update object",
                    "type": "Object:scipy.optimize._zeros_py.RootResults",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6j2nvvsy",
                    "encoding": "",
                    "name": "E",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oh7qn3gq",
                    "encoding": "",
                    "name": "F",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1s2vfw4w",
                    "encoding": "",
                    "name": "None.",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Update",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i7v5qvya",
                    "encoding": "",
                    "name": "D",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "from",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k16m5ccs",
                    "encoding": "",
                    "name": "dict",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1je51ojm",
                    "encoding": "",
                    "name": "iterable",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "E",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oo0cjusu",
                    "encoding": "",
                    "name": "and",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "has",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9gvu7802",
                    "encoding": "",
                    "name": "If",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "E",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i3dnaoo4",
                    "encoding": "",
                    "name": "is",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "present",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "osaev86c",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": ".keys",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0bnqwujc",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._zeros_py.RootResults.update",
                    "defaultValue": "scipy.optimize._zeros_py.RootResults.update",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nr3zo2f0",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x5j_2n79",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "7uk7ol7d",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j1gwjg3f",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._zeros_py.RootResults",
                    "defaultValue": "scipy.optimize._zeros_py.RootResults",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cqfe3azs",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lw17_dtn",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "df12rnyn",
            "name": "RootResults.values",
            "description": "D.values() -> an object providing a view on D's values",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "44662c2ee895daf70a724674371a9e4b83bb04a0428bb5ccb10b8da3b761538c",
            "fields": [
                {
                    "id": "icr76c35",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.optimize._zeros_py.RootResults.values object",
                    "type": "Object:scipy.optimize._zeros_py.RootResults",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bpqn9k8t",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._zeros_py.RootResults.values",
                    "defaultValue": "scipy.optimize._zeros_py.RootResults.values",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "17585dbk",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wqtjf8j1",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "sjh9frx4",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1etlkmmr",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._zeros_py.RootResults",
                    "defaultValue": "scipy.optimize._zeros_py.RootResults",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "93jlwa8g",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ap43m8b3",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "zzx318fa",
            "name": "SR1.__init__",
            "description": "\nSymmetric-rank-1 Hessian update strategy.\n    \n    Parameters\n    ----------\n    min_denominator : float\n        This number, scaled by a normalization factor,\n        defines the minimum denominator magnitude allowed\n        in the update. When the condition is violated we skip\n        the update. By default uses ``1e-8``.\n    init_scale : {float, np.array, 'auto'}, optional\n        This parameter can be used to initialize the Hessian or its\n        inverse. When a float is given, the relevant array is initialized\n        to ``np.eye(n) * init_scale``, where ``n`` is the problem dimension.\n        Alternatively, if a precisely ``(n, n)`` shaped, symmetric array is given,\n        this array will be used. Otherwise an error is generated.\n        Set it to 'auto' in order to use an automatic heuristic for choosing\n        the initial scale. The heuristic is described in [1]_, p.143.\n        The default is 'auto'.\n    \n    Notes\n    -----\n    The update is based on the description in [1]_, p.144-146.\n    \n    References\n    ----------\n    .. [1] Nocedal, Jorge, and Stephen J. Wright. \"Numerical optimization\"\n           Second Edition (2006).",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b680292f4f4af2ad5ffebd6348904a5bc51646d2a418fc2dbf25870aca0da074",
            "fields": [
                {
                    "id": "15_xd_rk",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to SR1 object",
                    "type": "Object:scipy.optimize._hessian_update_strategy.SR1",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xzl4xrl_",
                    "encoding": "",
                    "name": "min_denominator",
                    "value": 1e-08,
                    "defaultValue": 1e-08,
                    "description": "This number, scaled by a normalization factor,\ndefines the minimum denominator magnitude allowed\nin the update. When the condition is violated we skip\nthe update. By default uses ``1e-8``.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9bscqjhw",
                    "encoding": "",
                    "name": "init_scale",
                    "value": "auto",
                    "defaultValue": "auto",
                    "description": "This parameter can be used to initialize the Hessian or its\ninverse. When a float is given, the relevant array is initialized\nto ``np.eye(n) * init_scale``, where ``n`` is the problem dimension.\nAlternatively, if a precisely ``(n, n)`` shaped, symmetric array is given,\nthis array will be used. Otherwise an error is generated.\nSet it to 'auto' in order to use an automatic heuristic for choosing\nthe initial scale. The heuristic is described in [1]_, p.143.\nThe default is 'auto'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vxz4b6d2",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._hessian_update_strategy.SR1.__init__",
                    "defaultValue": "scipy.optimize._hessian_update_strategy.SR1.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_ayvaf24",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0579nr4x",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "1oo28ngm",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i7pp0oeo",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._hessian_update_strategy.SR1",
                    "defaultValue": "scipy.optimize._hessian_update_strategy.SR1",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5wk8gnuv",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "imm1jz0s",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "01acmeuv",
            "name": "SR1.dot",
            "description": "Compute the product of the internal matrix with the given vector.\n    \n    Parameters\n    ----------\n    p : array_like\n        1-D array representing a vector.\n    \n    Returns\n    -------\n    Hp : array\n        1-D represents the result of multiplying the approximation matrix\n        by vector p.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "cdf4609378b6f095051f275eb48cb73e8be283da25fc5a768870541c20d294c5",
            "fields": [
                {
                    "id": "dcsxcbdl",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.optimize._hessian_update_strategy.SR1.dot object",
                    "type": "Object:scipy.optimize._hessian_update_strategy.SR1",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tgzx_pii",
                    "encoding": "",
                    "name": "p",
                    "value": "",
                    "defaultValue": "",
                    "description": "1-D array representing a vector.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "im8qqaqe",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._hessian_update_strategy.SR1.dot",
                    "defaultValue": "scipy.optimize._hessian_update_strategy.SR1.dot",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8oe9mst5",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mu__2b_f",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "aznyd703",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lv6eiqm1",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._hessian_update_strategy.SR1",
                    "defaultValue": "scipy.optimize._hessian_update_strategy.SR1",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yocnz1wc",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0y792p5v",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "k1wr66t7",
            "name": "SR1.get_matrix",
            "description": "Return the current internal matrix.\n    \n    Returns\n    -------\n    M : ndarray, shape (n, n)\n        Dense matrix containing either the Hessian or its inverse\n        (depending on how `approx_type` was defined).",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1118193bae7224ce51d472ad4e79b6272ffada859064afe7307f1cfcd44ee1f3",
            "fields": [
                {
                    "id": "4p3zmfl4",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.optimize._hessian_update_strategy.SR1.get_matrix object",
                    "type": "Object:scipy.optimize._hessian_update_strategy.SR1",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fl8yh6ut",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._hessian_update_strategy.SR1.get_matrix",
                    "defaultValue": "scipy.optimize._hessian_update_strategy.SR1.get_matrix",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zc4dycl2",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ybjviydr",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "6zt7dihg",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xeiobbro",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._hessian_update_strategy.SR1",
                    "defaultValue": "scipy.optimize._hessian_update_strategy.SR1",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7hdqcagm",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9hx157dl",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "7c0wi1va",
            "name": "SR1.initialize",
            "description": "Initialize internal matrix.\n    \n    Allocate internal memory for storing and updating\n    the Hessian or its inverse.\n    \n    Parameters\n    ----------\n    n : int\n        Problem dimension.\n    approx_type : {'hess', 'inv_hess'}\n        Selects either the Hessian or the inverse Hessian.\n        When set to 'hess' the Hessian will be stored and updated.\n        When set to 'inv_hess' its inverse will be used instead.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b3253a8fad515cd6fa8f617597de52733580b50375faeefced5a90155f1d95a2",
            "fields": [
                {
                    "id": "qt5009ck",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.optimize._hessian_update_strategy.SR1.initialize object",
                    "type": "Object:scipy.optimize._hessian_update_strategy.SR1",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r83t2di8",
                    "encoding": "",
                    "name": "n",
                    "value": "",
                    "defaultValue": "",
                    "description": "Problem dimension.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aitcvp5g",
                    "encoding": "",
                    "name": "approx_type",
                    "value": "",
                    "defaultValue": "",
                    "description": "Selects either the Hessian or the inverse Hessian.\nWhen set to 'hess' the Hessian will be stored and updated.\nWhen set to 'inv_hess' its inverse will be used instead.",
                    "type": "{'hess', 'invhess'}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rtyugg9v",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._hessian_update_strategy.SR1.initialize",
                    "defaultValue": "scipy.optimize._hessian_update_strategy.SR1.initialize",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x5ng21u4",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "moimtkzs",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "tnd1x305",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ovw72xuh",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._hessian_update_strategy.SR1",
                    "defaultValue": "scipy.optimize._hessian_update_strategy.SR1",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8yy4jsi1",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lmya0m55",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "9wb7gz_1",
            "name": "SR1.update",
            "description": "Update internal matrix.\n    \n    Update Hessian matrix or its inverse (depending on how 'approx_type'\n    is defined) using information about the last evaluated points.\n    \n    Parameters\n    ----------\n    delta_x : ndarray\n        The difference between two points the gradient\n        function have been evaluated at: ``delta_x = x2 - x1``.\n    delta_grad : ndarray\n        The difference between the gradients:\n        ``delta_grad = grad(x2) - grad(x1)``.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "44ef0b13df5c922358575cedb78d75d52355dc32225c63d18b9d6843bf3022a8",
            "fields": [
                {
                    "id": "wnmyq_4e",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.optimize._hessian_update_strategy.SR1.update object",
                    "type": "Object:scipy.optimize._hessian_update_strategy.SR1",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i7ypyqz8",
                    "encoding": "",
                    "name": "delta_x",
                    "value": "",
                    "defaultValue": "",
                    "description": "The difference between two points the gradient\nfunction have been evaluated at: ``delta_x = x2 - x1``.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cqdha_3f",
                    "encoding": "",
                    "name": "delta_grad",
                    "value": "",
                    "defaultValue": "",
                    "description": "The difference between the gradients:\n``delta_grad = grad(x2) - grad(x1)``.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "44t5rqyn",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize._hessian_update_strategy.SR1.update",
                    "defaultValue": "scipy.optimize._hessian_update_strategy.SR1.update",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6khxw_bb",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "db98cfnb",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "j27vwij0",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7j6xaec1",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize._hessian_update_strategy.SR1",
                    "defaultValue": "scipy.optimize._hessian_update_strategy.SR1",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "us6_gumq",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wbwismsl",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ibfy2wrz",
            "name": "optimize.anderson",
            "description": "Find a root of a function, using (extended) Anderson mixing.\n    \n    The Jacobian is formed by for a 'best' solution in the space\n    spanned by last `M` vectors. As a result, only a MxM matrix\n    inversions and MxN multiplications are required. [Ey]_\n    \n    Parameters\n    ----------\n    F : function(x) -> f\n        Function whose root to find; should take and return an array-like\n        object.\n    xin : array_like\n        Initial guess for the solution\n    alpha : float, optional\n        Initial guess for the Jacobian is (-1/alpha).\n    M : float, optional\n        Number of previous vectors to retain. Defaults to 5.\n    w0 : float, optional\n        Regularization parameter for numerical stability.\n        Compared to unity, good values of the order of 0.01.\n    iter : int, optional\n        Number of iterations to make. If omitted (default), make as many\n        as required to meet tolerances.\n    verbose : bool, optional\n        Print status to stdout on every iteration.\n    maxiter : int, optional\n        Maximum number of iterations to make. If more are needed to\n        meet convergence, `NoConvergence` is raised.\n    f_tol : float, optional\n        Absolute tolerance (in max-norm) for the residual.\n        If omitted, default is 6e-6.\n    f_rtol : float, optional\n        Relative tolerance for the residual. If omitted, not used.\n    x_tol : float, optional\n        Absolute minimum step size, as determined from the Jacobian\n        approximation. If the step size is smaller than this, optimization\n        is terminated as successful. If omitted, not used.\n    x_rtol : float, optional\n        Relative minimum step size. If omitted, not used.\n    tol_norm : function(vector) -> scalar, optional\n        Norm to use in convergence check. Default is the maximum norm.\n    line_search : {None, 'armijo' (default), 'wolfe'}, optional\n        Which type of a line search to use to determine the step size in the\n        direction given by the Jacobian approximation. Defaults to 'armijo'.\n    callback : function, optional\n        Optional callback function. It is called on every iteration as\n        ``callback(x, f)`` where `x` is the current solution and `f`\n        the corresponding residual.\n    \n    Returns\n    -------\n    sol : ndarray\n        An array (of similar array type as `x0`) containing the final solution.\n    \n    Raises\n    ------\n    NoConvergence\n        When a solution was not found.\n    \n    See Also\n    --------\n    root : Interface to root finding algorithms for multivariate\n           functions. See ``method='anderson'`` in particular.\n    \n    References\n    ----------\n    .. [Ey] V. Eyert, J. Comp. Phys., 124, 271 (1996).\n    \n    Examples\n    --------\n    The following functions define a system of nonlinear equations\n    \n    >>> def fun(x):\n    ...     return [x[0]  + 0.5 * (x[0] - x[1])**3 - 1.0,\n    ...             0.5 * (x[1] - x[0])**3 + x[1]]\n    \n    A solution can be obtained as follows.\n    \n    >>> from scipy import optimize\n    >>> sol = optimize.anderson(fun, [0, 0])\n    >>> sol\n    array([0.84116588, 0.15883789])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ec002cfd2d5f7339cb5e241fc895c461340ef3dca2b2fa01f367c143df2223ce",
            "fields": [
                {
                    "id": "ajh_9n2e",
                    "encoding": "",
                    "name": "F",
                    "value": "",
                    "defaultValue": "",
                    "description": "Function whose root to find; should take and return an array-like\nobject.",
                    "type": "function(x) -> f",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7ego10wx",
                    "encoding": "",
                    "name": "xin",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial guess for the solution",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8nrnpivu",
                    "encoding": "",
                    "name": "iter",
                    "value": "",
                    "defaultValue": "",
                    "description": "Number of iterations to make. If omitted (default), make as many\nas required to meet tolerances.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ojh_41jo",
                    "encoding": "",
                    "name": "alpha",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial guess for the Jacobian is (-1/alpha).",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c094h1b7",
                    "encoding": "",
                    "name": "w0",
                    "value": 0.01,
                    "defaultValue": 0.01,
                    "description": "Regularization parameter for numerical stability.\nCompared to unity, good values of the order of 0.01.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w0ly_n7n",
                    "encoding": "",
                    "name": "M",
                    "value": 5,
                    "defaultValue": 5,
                    "description": "Number of previous vectors to retain. Defaults to 5.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c4rlzoz6",
                    "encoding": "",
                    "name": "verbose",
                    "value": false,
                    "defaultValue": false,
                    "description": "Print status to stdout on every iteration.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e02wpyvf",
                    "encoding": "",
                    "name": "maxiter",
                    "value": "",
                    "defaultValue": "",
                    "description": "Maximum number of iterations to make. If more are needed to\nmeet convergence, `NoConvergence` is raised.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ywxtew2h",
                    "encoding": "",
                    "name": "f_tol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Absolute tolerance (in max-norm) for the residual.\nIf omitted, default is 6e-6.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8by1yv7q",
                    "encoding": "",
                    "name": "f_rtol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Relative tolerance for the residual. If omitted, not used.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a92k8g9b",
                    "encoding": "",
                    "name": "x_tol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Absolute minimum step size, as determined from the Jacobian\napproximation. If the step size is smaller than this, optimization\nis terminated as successful. If omitted, not used.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v2e_oxmx",
                    "encoding": "",
                    "name": "x_rtol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Relative minimum step size. If omitted, not used.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rebenfcn",
                    "encoding": "",
                    "name": "tol_norm",
                    "value": "",
                    "defaultValue": "",
                    "description": "Norm to use in convergence check. Default is the maximum norm.",
                    "type": "function(vector) -> scalar",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hezkqux5",
                    "encoding": "",
                    "name": "line_search",
                    "value": "armijo",
                    "defaultValue": "armijo",
                    "description": "Which type of a line search to use to determine the step size in the\ndirection given by the Jacobian approximation. Defaults to 'armijo'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ffhti_g_",
                    "encoding": "",
                    "name": "callback",
                    "value": "",
                    "defaultValue": "",
                    "description": "Optional callback function. It is called on every iteration as\n``callback(x, f)`` where `x` is the current solution and `f`\nthe corresponding residual.",
                    "type": "function",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h5is2bu5",
                    "encoding": "",
                    "name": "kw",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3f3ha0jj",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.anderson",
                    "defaultValue": "scipy.optimize.anderson",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nbxhwfub",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ckk1ad51",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "jtbzo0l1",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eh1vyjb2",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize",
                    "defaultValue": "scipy.optimize",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v7q1zu_h",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5e8rcq30",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "rqt3jf_v",
            "name": "optimize.approx_fprime",
            "description": "Finite difference approximation of the derivatives of a\n    scalar or vector-valued function.\n    \n    If a function maps from :math:`R^n` to :math:`R^m`, its derivatives form\n    an m-by-n matrix\n    called the Jacobian, where an element :math:`(i, j)` is a partial\n    derivative of f[i] with respect to ``xk[j]``.\n    \n    Parameters\n    ----------\n    xk : array_like\n        The coordinate vector at which to determine the gradient of `f`.\n    f : callable\n        Function of which to estimate the derivatives of. Has the signature\n        ``f(xk, *args)`` where `xk` is the argument in the form of a 1-D array\n        and `args` is a tuple of any additional fixed parameters needed to\n        completely specify the function. The argument `xk` passed to this\n        function is an ndarray of shape (n,) (never a scalar even if n=1).\n        It must return a 1-D array_like of shape (m,) or a scalar.\n    \n        Suppose the callable has signature ``f0(x, *my_args, **my_kwargs)``, where\n        ``my_args`` and ``my_kwargs`` are required positional and keyword arguments.\n        Rather than passing ``f0`` as the callable, wrap it to accept\n        only ``x``; e.g., pass ``fun=lambda x: f0(x, *my_args, **my_kwargs)`` as the\n        callable, where ``my_args`` (tuple) and ``my_kwargs`` (dict) have been\n        gathered before invoking this function.\n    \n        .. versionchanged:: 1.9.0\n            `f` is now able to return a 1-D array-like, with the :math:`(m, n)`\n            Jacobian being estimated.\n    \n    epsilon : {float, array_like}, optional\n        Increment to `xk` to use for determining the function gradient.\n        If a scalar, uses the same finite difference delta for all partial\n        derivatives. If an array, should contain one value per element of\n        `xk`. Defaults to ``sqrt(np.finfo(float).eps)``, which is approximately\n        1.49e-08.\n    \\*args : args, optional\n        Any other arguments that are to be passed to `f`.\n    \n    Returns\n    -------\n    jac : ndarray\n        The partial derivatives of `f` to `xk`.\n    \n    See Also\n    --------\n    check_grad : Check correctness of gradient function against approx_fprime.\n    \n    Notes\n    -----\n    The function gradient is determined by the forward finite difference\n    formula::\n    \n                 f(xk[i] + epsilon[i]) - f(xk[i])\n        f'[i] = ---------------------------------\n                            epsilon[i]\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy import optimize\n    >>> def func(x, c0, c1):\n    ...     \"Coordinate vector `x` should be an array of size two.\"\n    ...     return c0 * x[0]**2 + c1*x[1]**2\n    \n    >>> x = np.ones(2)\n    >>> c0, c1 = (1, 200)\n    >>> eps = np.sqrt(np.finfo(float).eps)\n    >>> optimize.approx_fprime(x, func, [eps, np.sqrt(200) * eps], c0, c1)\n    array([   2.        ,  400.00004208])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "02f759385a41986e930832e3661dbe8640bcc8cb1cf44cf9384ddfd2a2ae01ab",
            "fields": [
                {
                    "id": "x98rtmmi",
                    "encoding": "",
                    "name": "xk",
                    "value": "",
                    "defaultValue": "",
                    "description": "The coordinate vector at which to determine the gradient of `f`.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "afw47fg6",
                    "encoding": "",
                    "name": "f",
                    "value": "",
                    "defaultValue": "",
                    "description": "Function of which to estimate the derivatives of. Has the signature\n``f(xk, *args)`` where `xk` is the argument in the form of a 1-D array\nand `args` is a tuple of any additional fixed parameters needed to\ncompletely specify the function. The argument `xk` passed to this\nfunction is an ndarray of shape (n,) (never a scalar even if n=1).\nIt must return a 1-D array_like of shape (m,) or a scalar.\n\nSuppose the callable has signature ``f0(x, *my_args, **my_kwargs)``, where\n``my_args`` and ``my_kwargs`` are required positional and keyword arguments.\nRather than passing ``f0`` as the callable, wrap it to accept\nonly ``x``; e.g., pass ``fun=lambda x: f0(x, *my_args, **my_kwargs)`` as the\ncallable, where ``my_args`` (tuple) and ``my_kwargs`` (dict) have been\ngathered before invoking this function.\n\n.. versionchanged:: 1.9.0\n    `f` is now able to return a 1-D array-like, with the :math:`(m, n)`\n    Jacobian being estimated.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "06te8jwv",
                    "encoding": "",
                    "name": "epsilon",
                    "value": "np.float64(1.4901161193847656e-08)",
                    "defaultValue": "np.float64(1.4901161193847656e-08)",
                    "description": "Increment to `xk` to use for determining the function gradient.\nIf a scalar, uses the same finite difference delta for all partial\nderivatives. If an array, should contain one value per element of\n`xk`. Defaults to ``sqrt(np.finfo(float).eps)``, which is approximately\n1.49e-08.",
                    "type": "numpy.float64",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kt20l8lv",
                    "encoding": "",
                    "name": "args",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jh5hnv8t",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.approx_fprime",
                    "defaultValue": "scipy.optimize.approx_fprime",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bwfpcfi1",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l2gpps0r",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "obgwp7j5",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2m120ftk",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize",
                    "defaultValue": "scipy.optimize",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xfd8hdfv",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "msqwn0at",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ycrd371c",
            "name": "optimize.basinhopping",
            "description": "Find the global minimum of a function using the basin-hopping algorithm.\n    \n    Basin-hopping is a two-phase method that combines a global stepping\n    algorithm with local minimization at each step. Designed to mimic\n    the natural process of energy minimization of clusters of atoms, it works\n    well for similar problems with \"funnel-like, but rugged\" energy landscapes\n    [5]_.\n    \n    As the step-taking, step acceptance, and minimization methods are all\n    customizable, this function can also be used to implement other two-phase\n    methods.\n    \n    Parameters\n    ----------\n    func : callable ``f(x, *args)``\n        Function to be optimized.  ``args`` can be passed as an optional item\n        in the dict `minimizer_kwargs`\n    x0 : array_like\n        Initial guess.\n    niter : integer, optional\n        The number of basin-hopping iterations. There will be a total of\n        ``niter + 1`` runs of the local minimizer.\n    T : float, optional\n        The \"temperature\" parameter for the acceptance or rejection criterion.\n        Higher \"temperatures\" mean that larger jumps in function value will be\n        accepted.  For best results `T` should be comparable to the\n        separation (in function value) between local minima.\n    stepsize : float, optional\n        Maximum step size for use in the random displacement.\n    minimizer_kwargs : dict, optional\n        Extra keyword arguments to be passed to the local minimizer\n        `scipy.optimize.minimize` Some important options could be:\n        \n        method : str\n            The minimization method (e.g. ``\"L-BFGS-B\"``)\n        args : tuple\n            Extra arguments passed to the objective function (`func`) and\n            its derivatives (Jacobian, Hessian).\n    take_step : callable ``take_step(x)``, optional\n        Replace the default step-taking routine with this routine. The default\n        step-taking routine is a random displacement of the coordinates, but\n        other step-taking algorithms may be better for some systems.\n        `take_step` can optionally have the attribute ``take_step.stepsize``.\n        If this attribute exists, then `basinhopping` will adjust\n        ``take_step.stepsize`` in order to try to optimize the global minimum\n        search.\n    accept_test : callable, ``accept_test(f_new=f_new, x_new=x_new, f_old=fold, x_old=x_old)``, optional\n        Define a test which will be used to judge whether to accept the\n        step. This will be used in addition to the Metropolis test based on\n        \"temperature\" `T`. The acceptable return values are True,\n        False, or ``\"force accept\"``. If any of the tests return False\n        then the step is rejected. If the latter, then this will override any\n        other tests in order to accept the step. This can be used, for example,\n        to forcefully escape from a local minimum that `basinhopping` is\n        trapped in.\n    callback : callable, ``callback(x, f, accept)``, optional\n        A callback function which will be called for all minima found. ``x``\n        and ``f`` are the coordinates and function value of the trial minimum,\n        and ``accept`` is whether that minimum was accepted. This can\n        be used, for example, to save the lowest N minima found. Also,\n        `callback` can be used to specify a user defined stop criterion by\n        optionally returning True to stop the `basinhopping` routine.\n    interval : integer, optional\n        interval for how often to update the `stepsize`\n    disp : bool, optional\n        Set to True to print status messages\n    niter_success : integer, optional\n        Stop the run if the global minimum candidate remains the same for this\n        number of iterations.\n    rng : {None, int, `numpy.random.Generator`}, optional\n        If `rng` is passed by keyword, types other than `numpy.random.Generator` are\n        passed to `numpy.random.default_rng` to instantiate a ``Generator``.\n        If `rng` is already a ``Generator`` instance, then the provided instance is\n        used. Specify `rng` for repeatable function behavior.\n    \n        If this argument is passed by position or `seed` is passed by keyword,\n        legacy behavior for the argument `seed` applies:\n    \n        - If `seed` is None (or `numpy.random`), the `numpy.random.RandomState`\n          singleton is used.\n        - If `seed` is an int, a new ``RandomState`` instance is used,\n          seeded with `seed`.\n        - If `seed` is already a ``Generator`` or ``RandomState`` instance then\n          that instance is used.\n    \n        .. versionchanged:: 1.15.0\n            As part of the `SPEC-007 <https://scientific-python.org/specs/spec-0007/>`_\n            transition from use of `numpy.random.RandomState` to\n            `numpy.random.Generator`, this keyword was changed from `seed` to `rng`.\n            For an interim period, both keywords will continue to work, although only one\n            may be specified at a time. After the interim period, function calls using the\n            `seed` keyword will emit warnings. The behavior of both `seed` and\n            `rng` are outlined above, but only the `rng` keyword should be used in new code.\n            \n        The random numbers generated only affect the default Metropolis\n        `accept_test` and the default `take_step`. If you supply your own\n        `take_step` and `accept_test`, and these functions use random\n        number generation, then those functions are responsible for the state\n        of their random number generator.\n    target_accept_rate : float, optional\n        The target acceptance rate that is used to adjust the `stepsize`.\n        If the current acceptance rate is greater than the target,\n        then the `stepsize` is increased. Otherwise, it is decreased.\n        Range is (0, 1). Default is 0.5.\n        \n        .. versionadded:: 1.8.0\n    stepwise_factor : float, optional\n        The `stepsize` is multiplied or divided by this stepwise factor upon\n        each update. Range is (0, 1). Default is 0.9.\n        \n        .. versionadded:: 1.8.0\n    \n    Returns\n    -------\n    res : OptimizeResult\n        The optimization result represented as a `OptimizeResult` object.\n        Important attributes are: ``x`` the solution array, ``fun`` the value\n        of the function at the solution, and ``message`` which describes the\n        cause of the termination. The ``OptimizeResult`` object returned by the\n        selected minimizer at the lowest minimum is also contained within this\n        object and can be accessed through the ``lowest_optimization_result``\n        attribute. ``lowest_optimization_result`` will only be updated if a\n        local minimization was successful.          \n        See `OptimizeResult` for a description of other attributes.\n    \n    See Also\n    --------\n    \n    :func:`minimize`\n        The local minimization function called once for each basinhopping step. `minimizer_kwargs` is passed to this routine.\n    \n    \n    Notes\n    -----\n    Basin-hopping is a stochastic algorithm which attempts to find the global\n    minimum of a smooth scalar function of one or more variables [1]_ [2]_ [3]_\n    [4]_. The algorithm in its current form was described by David Wales and\n    Jonathan Doye [2]_ http://www-wales.ch.cam.ac.uk/.\n    \n    The algorithm is iterative with each cycle composed of the following\n    features\n    \n    1) random perturbation of the coordinates\n    \n    2) local minimization\n    \n    3) accept or reject the new coordinates based on the minimized function\n       value\n    \n    The acceptance test used here is the Metropolis criterion of standard Monte\n    Carlo algorithms, although there are many other possibilities [3]_.\n    \n    This global minimization method has been shown to be extremely efficient\n    for a wide variety of problems in physics and chemistry. It is\n    particularly useful when the function has many minima separated by large\n    barriers. See the `Cambridge Cluster Database\n    <https://www-wales.ch.cam.ac.uk/CCD.html>`_ for databases of molecular\n    systems that have been optimized primarily using basin-hopping. This\n    database includes minimization problems exceeding 300 degrees of freedom.\n    \n    See the free software program `GMIN <https://www-wales.ch.cam.ac.uk/GMIN>`_\n    for a Fortran implementation of basin-hopping. This implementation has many\n    variations of the procedure described above, including more\n    advanced step taking algorithms and alternate acceptance criterion.\n    \n    For stochastic global optimization there is no way to determine if the true\n    global minimum has actually been found. Instead, as a consistency check,\n    the algorithm can be run from a number of different random starting points\n    to ensure the lowest minimum found in each example has converged to the\n    global minimum. For this reason, `basinhopping` will by default simply\n    run for the number of iterations `niter` and return the lowest minimum\n    found. It is left to the user to ensure that this is in fact the global\n    minimum.\n    \n    Choosing `stepsize`:  This is a crucial parameter in `basinhopping` and\n    depends on the problem being solved. The step is chosen uniformly in the\n    region from x0-stepsize to x0+stepsize, in each dimension. Ideally, it\n    should be comparable to the typical separation (in argument values) between\n    local minima of the function being optimized. `basinhopping` will, by\n    default, adjust `stepsize` to find an optimal value, but this may take\n    many iterations. You will get quicker results if you set a sensible\n    initial value for ``stepsize``.\n    \n    Choosing `T`: The parameter `T` is the \"temperature\" used in the\n    Metropolis criterion. Basinhopping steps are always accepted if\n    ``func(xnew) < func(xold)``. Otherwise, they are accepted with\n    probability::\n    \n        exp( -(func(xnew) - func(xold)) / T )\n    \n    So, for best results, `T` should to be comparable to the typical\n    difference (in function values) between local minima. (The height of\n    \"walls\" between local minima is irrelevant.)\n    \n    If `T` is 0, the algorithm becomes Monotonic Basin-Hopping, in which all\n    steps that increase energy are rejected.\n    \n    .. versionadded:: 0.12.0\n    \n    References\n    ----------\n    .. [1] Wales, David J. 2003, Energy Landscapes, Cambridge University Press,\n        Cambridge, UK.\n    .. [2] Wales, D J, and Doye J P K, Global Optimization by Basin-Hopping and\n        the Lowest Energy Structures of Lennard-Jones Clusters Containing up to\n        110 Atoms.  Journal of Physical Chemistry A, 1997, 101, 5111.\n    .. [3] Li, Z. and Scheraga, H. A., Monte Carlo-minimization approach to the\n        multiple-minima problem in protein folding, Proc. Natl. Acad. Sci. USA,\n        1987, 84, 6611.\n    .. [4] Wales, D. J. and Scheraga, H. A., Global optimization of clusters,\n        crystals, and biomolecules, Science, 1999, 285, 1368.\n    .. [5] Olson, B., Hashmi, I., Molloy, K., and Shehu1, A., Basin Hopping as\n        a General and Versatile Optimization Framework for the Characterization\n        of Biological Macromolecules, Advances in Artificial Intelligence,\n        Volume 2012 (2012), Article ID 674832, :doi:`10.1155/2012/674832`\n    \n    Examples\n    --------\n    The following example is a 1-D minimization problem, with many\n    local minima superimposed on a parabola.\n    \n    >>> import numpy as np\n    >>> from scipy.optimize import basinhopping\n    >>> func = lambda x: np.cos(14.5 * x - 0.3) + (x + 0.2) * x\n    >>> x0 = [1.]\n    \n    Basinhopping, internally, uses a local minimization algorithm. We will use\n    the parameter `minimizer_kwargs` to tell basinhopping which algorithm to\n    use and how to set up that minimizer. This parameter will be passed to\n    `scipy.optimize.minimize`.\n    \n    >>> minimizer_kwargs = {\"method\": \"BFGS\"}\n    >>> ret = basinhopping(func, x0, minimizer_kwargs=minimizer_kwargs,\n    ...                    niter=200)\n    >>> # the global minimum is:\n    >>> ret.x, ret.fun\n    -0.1951, -1.0009\n    \n    Next consider a 2-D minimization problem. Also, this time, we\n    will use gradient information to significantly speed up the search.\n    \n    >>> def func2d(x):\n    ...     f = np.cos(14.5 * x[0] - 0.3) + (x[1] + 0.2) * x[1] + (x[0] +\n    ...                                                            0.2) * x[0]\n    ...     df = np.zeros(2)\n    ...     df[0] = -14.5 * np.sin(14.5 * x[0] - 0.3) + 2. * x[0] + 0.2\n    ...     df[1] = 2. * x[1] + 0.2\n    ...     return f, df\n    \n    We'll also use a different local minimization algorithm. Also, we must tell\n    the minimizer that our function returns both energy and gradient (Jacobian).\n    \n    >>> minimizer_kwargs = {\"method\":\"L-BFGS-B\", \"jac\":True}\n    >>> x0 = [1.0, 1.0]\n    >>> ret = basinhopping(func2d, x0, minimizer_kwargs=minimizer_kwargs,\n    ...                    niter=200)\n    >>> print(\"global minimum: x = [%.4f, %.4f], f(x) = %.4f\" % (ret.x[0],\n    ...                                                           ret.x[1],\n    ...                                                           ret.fun))\n    global minimum: x = [-0.1951, -0.1000], f(x) = -1.0109\n    \n    Here is an example using a custom step-taking routine. Imagine you want\n    the first coordinate to take larger steps than the rest of the coordinates.\n    This can be implemented like so:\n    \n    >>> class MyTakeStep:\n    ...    def __init__(self, stepsize=0.5):\n    ...        self.stepsize = stepsize\n    ...        self.rng = np.random.default_rng()\n    ...    def __call__(self, x):\n    ...        s = self.stepsize\n    ...        x[0] += self.rng.uniform(-2.*s, 2.*s)\n    ...        x[1:] += self.rng.uniform(-s, s, x[1:].shape)\n    ...        return x\n    \n    Since ``MyTakeStep.stepsize`` exists basinhopping will adjust the magnitude\n    of `stepsize` to optimize the search. We'll use the same 2-D function as\n    before\n    \n    >>> mytakestep = MyTakeStep()\n    >>> ret = basinhopping(func2d, x0, minimizer_kwargs=minimizer_kwargs,\n    ...                    niter=200, take_step=mytakestep)\n    >>> print(\"global minimum: x = [%.4f, %.4f], f(x) = %.4f\" % (ret.x[0],\n    ...                                                           ret.x[1],\n    ...                                                           ret.fun))\n    global minimum: x = [-0.1951, -0.1000], f(x) = -1.0109\n    \n    Now, let's do an example using a custom callback function which prints the\n    value of every minimum found\n    \n    >>> def print_fun(x, f, accepted):\n    ...         print(\"at minimum %.4f accepted %d\" % (f, int(accepted)))\n    \n    We'll run it for only 10 basinhopping steps this time.\n    \n    >>> rng = np.random.default_rng()\n    >>> ret = basinhopping(func2d, x0, minimizer_kwargs=minimizer_kwargs,\n    ...                    niter=10, callback=print_fun, rng=rng)\n    at minimum 0.4159 accepted 1\n    at minimum -0.4317 accepted 1\n    at minimum -1.0109 accepted 1\n    at minimum -0.9073 accepted 1\n    at minimum -0.4317 accepted 0\n    at minimum -0.1021 accepted 1\n    at minimum -0.7425 accepted 1\n    at minimum -0.9073 accepted 1\n    at minimum -0.4317 accepted 0\n    at minimum -0.7425 accepted 1\n    at minimum -0.9073 accepted 1\n    \n    The minimum at -1.0109 is actually the global minimum, found already on the\n    8th iteration.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9b07de68a5618a8a40183b5f0ccf7bfe3ef36587facc8a08fe561c8da7e6b050",
            "fields": [
                {
                    "id": "69phgu14",
                    "encoding": "",
                    "name": "func",
                    "value": "",
                    "defaultValue": "",
                    "description": "Function to be optimized.  ``args`` can be passed as an optional item\nin the dict `minimizer_kwargs`",
                    "type": "callable f(x, *args)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d0cavq8f",
                    "encoding": "",
                    "name": "x0",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial guess.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "81rkmbvh",
                    "encoding": "",
                    "name": "niter",
                    "value": 100,
                    "defaultValue": 100,
                    "description": "The number of basin-hopping iterations. There will be a total of\n``niter + 1`` runs of the local minimizer.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pmxbizth",
                    "encoding": "",
                    "name": "T",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "The \"temperature\" parameter for the acceptance or rejection criterion.\nHigher \"temperatures\" mean that larger jumps in function value will be\naccepted.  For best results `T` should be comparable to the\nseparation (in function value) between local minima.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q0fajqz9",
                    "encoding": "",
                    "name": "stepsize",
                    "value": 0.5,
                    "defaultValue": 0.5,
                    "description": "Maximum step size for use in the random displacement.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0ycft3is",
                    "encoding": "",
                    "name": "minimizer_kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "Extra keyword arguments to be passed to the local minimizer\n`scipy.optimize.minimize` Some important options could be:\n\nmethod : str\n    The minimization method (e.g. ``\"L-BFGS-B\"``)\nargs : tuple\n    Extra arguments passed to the objective function (`func`) and\n    its derivatives (Jacobian, Hessian).",
                    "type": "dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dmp67yyc",
                    "encoding": "",
                    "name": "take_step",
                    "value": "",
                    "defaultValue": "",
                    "description": "Replace the default step-taking routine with this routine. The default\nstep-taking routine is a random displacement of the coordinates, but\nother step-taking algorithms may be better for some systems.\n`take_step` can optionally have the attribute ``take_step.stepsize``.\nIf this attribute exists, then `basinhopping` will adjust\n``take_step.stepsize`` in order to try to optimize the global minimum\nsearch.",
                    "type": "callable takestep(x)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ejoom5zp",
                    "encoding": "",
                    "name": "accept_test",
                    "value": "",
                    "defaultValue": "",
                    "description": "Define a test which will be used to judge whether to accept the\nstep. This will be used in addition to the Metropolis test based on\n\"temperature\" `T`. The acceptable return values are True,\nFalse, or ``\"force accept\"``. If any of the tests return False\nthen the step is rejected. If the latter, then this will override any\nother tests in order to accept the step. This can be used, for example,\nto forcefully escape from a local minimum that `basinhopping` is\ntrapped in.",
                    "type": "callable, accepttest(fnew=fnew, xnew=xnew, fold=fold, xold=xold)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ffdzhlct",
                    "encoding": "",
                    "name": "callback",
                    "value": "",
                    "defaultValue": "",
                    "description": "A callback function which will be called for all minima found. ``x``\nand ``f`` are the coordinates and function value of the trial minimum,\nand ``accept`` is whether that minimum was accepted. This can\nbe used, for example, to save the lowest N minima found. Also,\n`callback` can be used to specify a user defined stop criterion by\noptionally returning True to stop the `basinhopping` routine.",
                    "type": "callable, callback(x, f, accept)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c7tb_ny9",
                    "encoding": "",
                    "name": "interval",
                    "value": 50,
                    "defaultValue": 50,
                    "description": "interval for how often to update the `stepsize`",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "li_4lwxt",
                    "encoding": "",
                    "name": "disp",
                    "value": false,
                    "defaultValue": false,
                    "description": "Set to True to print status messages",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_x1hma0c",
                    "encoding": "",
                    "name": "niter_success",
                    "value": "",
                    "defaultValue": "",
                    "description": "Stop the run if the global minimum candidate remains the same for this\nnumber of iterations.",
                    "type": "integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9j38w9s5",
                    "encoding": "",
                    "name": "rng",
                    "value": "",
                    "defaultValue": "",
                    "description": "If `rng` is passed by keyword, types other than `numpy.random.Generator` are\npassed to `numpy.random.default_rng` to instantiate a ``Generator``.\nIf `rng` is already a ``Generator`` instance, then the provided instance is\nused. Specify `rng` for repeatable function behavior.\n\nIf this argument is passed by position or `seed` is passed by keyword,\nlegacy behavior for the argument `seed` applies:\n\n- If `seed` is None (or `numpy.random`), the `numpy.random.RandomState`\n  singleton is used.\n- If `seed` is an int, a new ``RandomState`` instance is used,\n  seeded with `seed`.\n- If `seed` is already a ``Generator`` or ``RandomState`` instance then\n  that instance is used.\n\n.. versionchanged:: 1.15.0\n    As part of the `SPEC-007 <https://scientific-python.org/specs/spec-0007/>`_\n    transition from use of `numpy.random.RandomState` to\n    `numpy.random.Generator`, this keyword was changed from `seed` to `rng`.\n    For an interim period, both keywords will continue to work, although only one\n    may be specified at a time. After the interim period, function calls using the\n    `seed` keyword will emit warnings. The behavior of both `seed` and\n    `rng` are outlined above, but only the `rng` keyword should be used in new code.\n    \nThe random numbers generated only affect the default Metropolis\n`accept_test` and the default `take_step`. If you supply your own\n`take_step` and `accept_test`, and these functions use random\nnumber generation, then those functions are responsible for the state\nof their random number generator.",
                    "type": "{None, int, numpy.random.Generator}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "13gudp4y",
                    "encoding": "",
                    "name": "target_accept_rate",
                    "value": 0.5,
                    "defaultValue": 0.5,
                    "description": "The target acceptance rate that is used to adjust the `stepsize`.\nIf the current acceptance rate is greater than the target,\nthen the `stepsize` is increased. Otherwise, it is decreased.\nRange is (0, 1). Default is 0.5.\n\n.. versionadded:: 1.8.0",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r18i_ppu",
                    "encoding": "",
                    "name": "stepwise_factor",
                    "value": 0.9,
                    "defaultValue": 0.9,
                    "description": "The `stepsize` is multiplied or divided by this stepwise factor upon\neach update. Range is (0, 1). Default is 0.9.\n\n.. versionadded:: 1.8.0",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tpfr6eok",
                    "encoding": "",
                    "name": "seed",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fbghs_ge",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.basinhopping",
                    "defaultValue": "scipy.optimize.basinhopping",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eoljeo__",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "60txxzjv",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "z9_12421",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qoqmoyfk",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize",
                    "defaultValue": "scipy.optimize",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ji033brg",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2trjs841",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "x_mwazyv",
            "name": "optimize.bisect",
            "description": "Find root of a function within an interval using bisection.\n    \n    Basic bisection routine to find a root of the function `f` between the\n    arguments `a` and `b`. `f(a)` and `f(b)` cannot have the same signs.\n    Slow but sure.\n    \n    Parameters\n    ----------\n    f : function\n        Python function returning a number.  `f` must be continuous, and\n        f(a) and f(b) must have opposite signs.\n    a : scalar\n        One end of the bracketing interval [a,b].\n    b : scalar\n        The other end of the bracketing interval [a,b].\n    xtol : number, optional\n        The computed root ``x0`` will satisfy ``np.isclose(x, x0,\n        atol=xtol, rtol=rtol)``, where ``x`` is the exact root. The\n        parameter must be positive.\n    rtol : number, optional\n        The computed root ``x0`` will satisfy ``np.isclose(x, x0,\n        atol=xtol, rtol=rtol)``, where ``x`` is the exact root. The\n        parameter cannot be smaller than its default value of\n        ``4*np.finfo(float).eps``.\n    maxiter : int, optional\n        If convergence is not achieved in `maxiter` iterations, an error is\n        raised. Must be >= 0.\n    args : tuple, optional\n        Containing extra arguments for the function `f`.\n        `f` is called by ``apply(f, (x)+args)``.\n    full_output : bool, optional\n        If `full_output` is False, the root is returned. If `full_output` is\n        True, the return value is ``(x, r)``, where x is the root, and r is\n        a `RootResults` object.\n    disp : bool, optional\n        If True, raise RuntimeError if the algorithm didn't converge.\n        Otherwise, the convergence status is recorded in a `RootResults`\n        return object.\n    \n    Returns\n    -------\n    root : float\n        Root of `f` between `a` and `b`.\n    r : `RootResults` (present if ``full_output = True``)\n        Object containing information about the convergence. In particular,\n        ``r.converged`` is True if the routine converged.\n    \n    Notes\n    -----\n    As mentioned in the parameter documentation, the computed root ``x0`` will\n    satisfy ``np.isclose(x, x0, atol=xtol, rtol=rtol)``, where ``x`` is the\n    exact root. In equation form, this terminating condition is ``abs(x - x0)\n    <= xtol + rtol * abs(x0)``.\n    \n    The default value ``xtol=2e-12`` may lead to surprising behavior if one\n    expects `bisect` to always compute roots with relative error near machine\n    precision. Care should be taken to select `xtol` for the use case at hand.\n    Setting ``xtol=5e-324``, the smallest subnormal number, will ensure the\n    highest level of accuracy. Larger values of `xtol` may be useful for saving\n    function evaluations when a root is at or near zero in applications where\n    the tiny absolute differences available between floating point numbers near\n    zero are not meaningful.\n    \n    Examples\n    --------\n    \n    >>> def f(x):\n    ...     return (x**2 - 1)\n    \n    >>> from scipy import optimize\n    \n    >>> root = optimize.bisect(f, 0, 2)\n    >>> root\n    1.0\n    \n    >>> root = optimize.bisect(f, -2, 0)\n    >>> root\n    -1.0\n    \n    See Also\n    --------\n    brentq, brenth, bisect, newton\n    fixed_point : scalar fixed-point finder\n    fsolve : n-dimensional root-finding\n    elementwise.find_root : efficient elementwise 1-D root-finder",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8420ed7d738ebad22ab7328673ccec27a91fda20ef633fe14ab247d4e99c8eaa",
            "fields": [
                {
                    "id": "c_c5p977",
                    "encoding": "",
                    "name": "f",
                    "value": "",
                    "defaultValue": "",
                    "description": "Python function returning a number.  `f` must be continuous, and\nf(a) and f(b) must have opposite signs.",
                    "type": "function",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mjj6smxc",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "One end of the bracketing interval [a,b].",
                    "type": "scalar",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vrf7hwlq",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "The other end of the bracketing interval [a,b].",
                    "type": "scalar",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m2clagz0",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Containing extra arguments for the function `f`.\n`f` is called by ``apply(f, (x)+args)``.",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oi9126fz",
                    "encoding": "",
                    "name": "xtol",
                    "value": 2e-12,
                    "defaultValue": 2e-12,
                    "description": "The computed root ``x0`` will satisfy ``np.isclose(x, x0,\natol=xtol, rtol=rtol)``, where ``x`` is the exact root. The\nparameter must be positive.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xi11q70q",
                    "encoding": "",
                    "name": "rtol",
                    "value": "np.float64(8.881784197001252e-16)",
                    "defaultValue": "np.float64(8.881784197001252e-16)",
                    "description": "The computed root ``x0`` will satisfy ``np.isclose(x, x0,\natol=xtol, rtol=rtol)``, where ``x`` is the exact root. The\nparameter cannot be smaller than its default value of\n``4*np.finfo(float).eps``.",
                    "type": "numpy.float64",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wzm84mt2",
                    "encoding": "",
                    "name": "maxiter",
                    "value": 100,
                    "defaultValue": 100,
                    "description": "If convergence is not achieved in `maxiter` iterations, an error is\nraised. Must be >= 0.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w3np_g2z",
                    "encoding": "",
                    "name": "full_output",
                    "value": false,
                    "defaultValue": false,
                    "description": "If `full_output` is False, the root is returned. If `full_output` is\nTrue, the return value is ``(x, r)``, where x is the root, and r is\na `RootResults` object.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uqa4x5q9",
                    "encoding": "",
                    "name": "disp",
                    "value": true,
                    "defaultValue": true,
                    "description": "If True, raise RuntimeError if the algorithm didn't converge.\nOtherwise, the convergence status is recorded in a `RootResults`\nreturn object.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "22xl5_6r",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.bisect",
                    "defaultValue": "scipy.optimize.bisect",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qsorsfl4",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3itv5aze",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "tsterej5",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bcmegkrg",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize",
                    "defaultValue": "scipy.optimize",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3z1mnkd8",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "303ytwbe",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "yrc933ip",
            "name": "optimize.bracket",
            "description": "Bracket the minimum of a function.\n    \n    Given a function and distinct initial points, search in the\n    downhill direction (as defined by the initial points) and return\n    three points that bracket the minimum of the function.\n    \n    Parameters\n    ----------\n    func : callable f(x,*args)\n        Objective function to minimize.\n    xa, xb : float, optional\n        Initial points. Defaults `xa` to 0.0, and `xb` to 1.0.\n        A local minimum need not be contained within this interval.\n    args : tuple, optional\n        Additional arguments (if present), passed to `func`.\n    grow_limit : float, optional\n        Maximum grow limit.  Defaults to 110.0\n    maxiter : int, optional\n        Maximum number of iterations to perform. Defaults to 1000.\n    \n    Returns\n    -------\n    xa, xb, xc : float\n        Final points of the bracket.\n    fa, fb, fc : float\n        Objective function values at the bracket points.\n    funcalls : int\n        Number of function evaluations made.\n    \n    Raises\n    ------\n    BracketError\n        If no valid bracket is found before the algorithm terminates.\n        See notes for conditions of a valid bracket.\n    \n    Notes\n    -----\n    The algorithm attempts to find three strictly ordered points (i.e.\n    :math:`x_a < x_b < x_c` or :math:`x_c < x_b < x_a`) satisfying\n    :math:`f(x_b) \u2264 f(x_a)` and :math:`f(x_b) \u2264 f(x_c)`, where one of the\n    inequalities must be satisfied strictly and all :math:`x_i` must be\n    finite.\n    \n    Examples\n    --------\n    This function can find a downward convex region of a function:\n    \n    >>> import numpy as np\n    >>> import matplotlib.pyplot as plt\n    >>> from scipy.optimize import bracket\n    >>> def f(x):\n    ...     return 10*x**2 + 3*x + 5\n    >>> x = np.linspace(-2, 2)\n    >>> y = f(x)\n    >>> init_xa, init_xb = 0.1, 1\n    >>> xa, xb, xc, fa, fb, fc, funcalls = bracket(f, xa=init_xa, xb=init_xb)\n    >>> plt.axvline(x=init_xa, color=\"k\", linestyle=\"--\")\n    >>> plt.axvline(x=init_xb, color=\"k\", linestyle=\"--\")\n    >>> plt.plot(x, y, \"-k\")\n    >>> plt.plot(xa, fa, \"bx\")\n    >>> plt.plot(xb, fb, \"rx\")\n    >>> plt.plot(xc, fc, \"bx\")\n    >>> plt.show()\n    \n    Note that both initial points were to the right of the minimum, and the\n    third point was found in the \"downhill\" direction: the direction\n    in which the function appeared to be decreasing (to the left).\n    The final points are strictly ordered, and the function value\n    at the middle point is less than the function values at the endpoints;\n    it follows that a minimum must lie within the bracket.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9369f359c2048d4d4e07788fdd52c0204ed44d70b8764a8ed2fa79044102f8ff",
            "fields": [
                {
                    "id": "llw4p6mp",
                    "encoding": "",
                    "name": "func",
                    "value": "",
                    "defaultValue": "",
                    "description": "Objective function to minimize.",
                    "type": "callable f(x,*args)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k1044ktr",
                    "encoding": "",
                    "name": "xa",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7z0_50va",
                    "encoding": "",
                    "name": "xb",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0uqu0zrg",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Additional arguments (if present), passed to `func`.",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fe49qd6f",
                    "encoding": "",
                    "name": "grow_limit",
                    "value": 110.0,
                    "defaultValue": 110.0,
                    "description": "Maximum grow limit.  Defaults to 110.0",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i3wod8rd",
                    "encoding": "",
                    "name": "maxiter",
                    "value": 1000,
                    "defaultValue": 1000,
                    "description": "Maximum number of iterations to perform. Defaults to 1000.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i1ryxyep",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.bracket",
                    "defaultValue": "scipy.optimize.bracket",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5g3_hmr5",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "56mydoav",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "yupu5ks9",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7o59vq22",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize",
                    "defaultValue": "scipy.optimize",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zd8arl9a",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t625pa_5",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "p_2guzko",
            "name": "optimize.brent",
            "description": "Given a function of one variable and a possible bracket, return\n    a local minimizer of the function isolated to a fractional precision\n    of tol.\n    \n    Parameters\n    ----------\n    func : callable f(x,*args)\n        Objective function.\n    args : tuple, optional\n        Additional arguments (if present).\n    brack : tuple, optional\n        Either a triple ``(xa, xb, xc)`` satisfying ``xa < xb < xc`` and\n        ``func(xb) < func(xa) and  func(xb) < func(xc)``, or a pair\n        ``(xa, xb)`` to be used as initial points for a downhill bracket search\n        (see `scipy.optimize.bracket`).\n        The minimizer ``x`` will not necessarily satisfy ``xa <= x <= xb``.\n    tol : float, optional\n        Relative error in solution `xopt` acceptable for convergence.\n    full_output : bool, optional\n        If True, return all output args (xmin, fval, iter,\n        funcalls).\n    maxiter : int, optional\n        Maximum number of iterations in solution.\n    \n    Returns\n    -------\n    xmin : ndarray\n        Optimum point.\n    fval : float\n        (Optional output) Optimum function value.\n    iter : int\n        (Optional output) Number of iterations.\n    funcalls : int\n        (Optional output) Number of objective function evaluations made.\n    \n    See also\n    --------\n    minimize_scalar: Interface to minimization algorithms for scalar\n        univariate functions. See the 'Brent' `method` in particular.\n    \n    Notes\n    -----\n    Uses inverse parabolic interpolation when possible to speed up\n    convergence of golden section method.\n    \n    Does not ensure that the minimum lies in the range specified by\n    `brack`. See `scipy.optimize.fminbound`.\n    \n    Examples\n    --------\n    We illustrate the behaviour of the function when `brack` is of\n    size 2 and 3 respectively. In the case where `brack` is of the\n    form ``(xa, xb)``, we can see for the given values, the output does\n    not necessarily lie in the range ``(xa, xb)``.\n    \n    >>> def f(x):\n    ...     return (x-1)**2\n    \n    >>> from scipy import optimize\n    \n    >>> minimizer = optimize.brent(f, brack=(1, 2))\n    >>> minimizer\n    1\n    >>> res = optimize.brent(f, brack=(-1, 0.5, 2), full_output=True)\n    >>> xmin, fval, iter, funcalls = res\n    >>> f(xmin), fval\n    (0.0, 0.0)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "88eca39900bf240cc84b5729d1e730060c2dea8b14221b01c18a71abb77c335c",
            "fields": [
                {
                    "id": "6j8e56t3",
                    "encoding": "",
                    "name": "func",
                    "value": "",
                    "defaultValue": "",
                    "description": "Objective function.",
                    "type": "callable f(x,*args)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9vx30fcq",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Additional arguments (if present).",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c75sfvum",
                    "encoding": "",
                    "name": "brack",
                    "value": "",
                    "defaultValue": "",
                    "description": "Either a triple ``(xa, xb, xc)`` satisfying ``xa < xb < xc`` and\n``func(xb) < func(xa) and  func(xb) < func(xc)``, or a pair\n``(xa, xb)`` to be used as initial points for a downhill bracket search\n(see `scipy.optimize.bracket`).\nThe minimizer ``x`` will not necessarily satisfy ``xa <= x <= xb``.",
                    "type": "tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rb2e7uci",
                    "encoding": "",
                    "name": "tol",
                    "value": 1.48e-08,
                    "defaultValue": 1.48e-08,
                    "description": "Relative error in solution `xopt` acceptable for convergence.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_p8bandm",
                    "encoding": "",
                    "name": "full_output",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "If True, return all output args (xmin, fval, iter,\nfuncalls).",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9yhqyw59",
                    "encoding": "",
                    "name": "maxiter",
                    "value": 500,
                    "defaultValue": 500,
                    "description": "Maximum number of iterations in solution.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ffpuxckl",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.brent",
                    "defaultValue": "scipy.optimize.brent",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fw147vgg",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w9h21k7c",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "h5voep4i",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lr4ef_l8",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize",
                    "defaultValue": "scipy.optimize",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5_i5m3gf",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3dtip039",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "x0ndfapd",
            "name": "optimize.brenth",
            "description": "Find a root of a function in a bracketing interval using Brent's\n    method with hyperbolic extrapolation.\n    \n    A variation on the classic Brent routine to find a root of the function f\n    between the arguments a and b that uses hyperbolic extrapolation instead of\n    inverse quadratic extrapolation. Bus & Dekker (1975) guarantee convergence\n    for this method, claiming that the upper bound of function evaluations here\n    is 4 or 5 times that of bisection.\n    f(a) and f(b) cannot have the same signs. Generally, on a par with the\n    brent routine, but not as heavily tested. It is a safe version of the\n    secant method that uses hyperbolic extrapolation.\n    The version here is by Chuck Harris, and implements Algorithm M of\n    [BusAndDekker1975]_, where further details (convergence properties,\n    additional remarks and such) can be found\n    \n    Parameters\n    ----------\n    f : function\n        Python function returning a number. f must be continuous, and f(a) and\n        f(b) must have opposite signs.\n    a : scalar\n        One end of the bracketing interval [a,b].\n    b : scalar\n        The other end of the bracketing interval [a,b].\n    xtol : number, optional\n        The computed root ``x0`` will satisfy ``np.isclose(x, x0,\n        atol=xtol, rtol=rtol)``, where ``x`` is the exact root. The\n        parameter must be positive. As with `brentq`, for nice\n        functions the method will often satisfy the above condition\n        with ``xtol/2`` and ``rtol/2``.\n    rtol : number, optional\n        The computed root ``x0`` will satisfy ``np.isclose(x, x0,\n        atol=xtol, rtol=rtol)``, where ``x`` is the exact root. The\n        parameter cannot be smaller than its default value of\n        ``4*np.finfo(float).eps``. As with `brentq`, for nice functions\n        the method will often satisfy the above condition with\n        ``xtol/2`` and ``rtol/2``.\n    maxiter : int, optional\n        If convergence is not achieved in `maxiter` iterations, an error is\n        raised. Must be >= 0.\n    args : tuple, optional\n        Containing extra arguments for the function `f`.\n        `f` is called by ``apply(f, (x)+args)``.\n    full_output : bool, optional\n        If `full_output` is False, the root is returned. If `full_output` is\n        True, the return value is ``(x, r)``, where `x` is the root, and `r` is\n        a `RootResults` object.\n    disp : bool, optional\n        If True, raise RuntimeError if the algorithm didn't converge.\n        Otherwise, the convergence status is recorded in any `RootResults`\n        return object.\n    \n    Returns\n    -------\n    root : float\n        Root of `f` between `a` and `b`.\n    r : `RootResults` (present if ``full_output = True``)\n        Object containing information about the convergence. In particular,\n        ``r.converged`` is True if the routine converged.\n    \n    See Also\n    --------\n    fmin, fmin_powell, fmin_cg, fmin_bfgs, fmin_ncg : multivariate local optimizers\n    leastsq : nonlinear least squares minimizer\n    fmin_l_bfgs_b, fmin_tnc, fmin_cobyla : constrained multivariate optimizers\n    basinhopping, differential_evolution, brute : global optimizers\n    fminbound, brent, golden, bracket : local scalar minimizers\n    fsolve : N-D root-finding\n    brentq, ridder, bisect, newton : 1-D root-finding\n    fixed_point : scalar fixed-point finder\n    elementwise.find_root : efficient elementwise 1-D root-finder\n    \n    Notes\n    -----\n    As mentioned in the parameter documentation, the computed root ``x0`` will\n    satisfy ``np.isclose(x, x0, atol=xtol, rtol=rtol)``, where ``x`` is the\n    exact root. In equation form, this terminating condition is ``abs(x - x0)\n    <= xtol + rtol * abs(x0)``.\n    \n    The default value ``xtol=2e-12`` may lead to surprising behavior if one\n    expects `brenth` to always compute roots with relative error near machine\n    precision. Care should be taken to select `xtol` for the use case at hand.\n    Setting ``xtol=5e-324``, the smallest subnormal number, will ensure the\n    highest level of accuracy. Larger values of `xtol` may be useful for saving\n    function evaluations when a root is at or near zero in applications where\n    the tiny absolute differences available between floating point numbers near\n    zero are not meaningful.\n    \n    References\n    ----------\n    .. [BusAndDekker1975]\n       Bus, J. C. P., Dekker, T. J.,\n       \"Two Efficient Algorithms with Guaranteed Convergence for Finding a Zero\n       of a Function\", ACM Transactions on Mathematical Software, Vol. 1, Issue\n       4, Dec. 1975, pp. 330-345. Section 3: \"Algorithm M\".\n       :doi:`10.1145/355656.355659`\n    \n    Examples\n    --------\n    >>> def f(x):\n    ...     return (x**2 - 1)\n    \n    >>> from scipy import optimize\n    \n    >>> root = optimize.brenth(f, -2, 0)\n    >>> root\n    -1.0\n    \n    >>> root = optimize.brenth(f, 0, 2)\n    >>> root\n    1.0",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "eb96ffc61258a097e4de9220b62de37dd98add6105ed98ef662b01c6026a02cc",
            "fields": [
                {
                    "id": "l8lyaet_",
                    "encoding": "",
                    "name": "f",
                    "value": "",
                    "defaultValue": "",
                    "description": "Python function returning a number. f must be continuous, and f(a) and\nf(b) must have opposite signs.",
                    "type": "function",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1tp0hrnr",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "One end of the bracketing interval [a,b].",
                    "type": "scalar",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wis8uvsl",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "The other end of the bracketing interval [a,b].",
                    "type": "scalar",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lxbiab32",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Containing extra arguments for the function `f`.\n`f` is called by ``apply(f, (x)+args)``.",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aqt958xt",
                    "encoding": "",
                    "name": "xtol",
                    "value": 2e-12,
                    "defaultValue": 2e-12,
                    "description": "The computed root ``x0`` will satisfy ``np.isclose(x, x0,\natol=xtol, rtol=rtol)``, where ``x`` is the exact root. The\nparameter must be positive. As with `brentq`, for nice\nfunctions the method will often satisfy the above condition\nwith ``xtol/2`` and ``rtol/2``.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "utlfqvgu",
                    "encoding": "",
                    "name": "rtol",
                    "value": "np.float64(8.881784197001252e-16)",
                    "defaultValue": "np.float64(8.881784197001252e-16)",
                    "description": "The computed root ``x0`` will satisfy ``np.isclose(x, x0,\natol=xtol, rtol=rtol)``, where ``x`` is the exact root. The\nparameter cannot be smaller than its default value of\n``4*np.finfo(float).eps``. As with `brentq`, for nice functions\nthe method will often satisfy the above condition with\n``xtol/2`` and ``rtol/2``.",
                    "type": "numpy.float64",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v05odi9m",
                    "encoding": "",
                    "name": "maxiter",
                    "value": 100,
                    "defaultValue": 100,
                    "description": "If convergence is not achieved in `maxiter` iterations, an error is\nraised. Must be >= 0.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ta3uuzw_",
                    "encoding": "",
                    "name": "full_output",
                    "value": false,
                    "defaultValue": false,
                    "description": "If `full_output` is False, the root is returned. If `full_output` is\nTrue, the return value is ``(x, r)``, where `x` is the root, and `r` is\na `RootResults` object.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yoy5ct1a",
                    "encoding": "",
                    "name": "disp",
                    "value": true,
                    "defaultValue": true,
                    "description": "If True, raise RuntimeError if the algorithm didn't converge.\nOtherwise, the convergence status is recorded in any `RootResults`\nreturn object.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m4ijmsy5",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.brenth",
                    "defaultValue": "scipy.optimize.brenth",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ulwomyvp",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8dz4sikw",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "6t6jziog",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o5ke8wws",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize",
                    "defaultValue": "scipy.optimize",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6o0vfs_5",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4ovvc6j6",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "6kazwj9t",
            "name": "optimize.brentq",
            "description": "Find a root of a function in a bracketing interval using Brent's method.\n    \n    Uses the classic Brent's method to find a root of the function `f` on\n    the sign changing interval [a , b]. Generally considered the best of the\n    rootfinding routines here. It is a safe version of the secant method that\n    uses inverse quadratic extrapolation. Brent's method combines root\n    bracketing, interval bisection, and inverse quadratic interpolation. It is\n    sometimes known as the van Wijngaarden-Dekker-Brent method. Brent (1973)\n    claims convergence is guaranteed for functions computable within [a,b].\n    \n    [Brent1973]_ provides the classic description of the algorithm. Another\n    description can be found in a recent edition of Numerical Recipes, including\n    [PressEtal1992]_. A third description is at\n    http://mathworld.wolfram.com/BrentsMethod.html. It should be easy to\n    understand the algorithm just by reading our code. Our code diverges a bit\n    from standard presentations: we choose a different formula for the\n    extrapolation step.\n    \n    Parameters\n    ----------\n    f : function\n        Python function returning a number. The function :math:`f`\n        must be continuous, and :math:`f(a)` and :math:`f(b)` must\n        have opposite signs.\n    a : scalar\n        One end of the bracketing interval :math:`[a, b]`.\n    b : scalar\n        The other end of the bracketing interval :math:`[a, b]`.\n    xtol : number, optional\n        The computed root ``x0`` will satisfy ``np.isclose(x, x0,\n        atol=xtol, rtol=rtol)``, where ``x`` is the exact root. The\n        parameter must be positive. For nice functions, Brent's\n        method will often satisfy the above condition with ``xtol/2``\n        and ``rtol/2``. [Brent1973]_\n    rtol : number, optional\n        The computed root ``x0`` will satisfy ``np.isclose(x, x0,\n        atol=xtol, rtol=rtol)``, where ``x`` is the exact root. The\n        parameter cannot be smaller than its default value of\n        ``4*np.finfo(float).eps``. For nice functions, Brent's\n        method will often satisfy the above condition with ``xtol/2``\n        and ``rtol/2``. [Brent1973]_\n    maxiter : int, optional\n        If convergence is not achieved in `maxiter` iterations, an error is\n        raised. Must be >= 0.\n    args : tuple, optional\n        Containing extra arguments for the function `f`.\n        `f` is called by ``apply(f, (x)+args)``.\n    full_output : bool, optional\n        If `full_output` is False, the root is returned. If `full_output` is\n        True, the return value is ``(x, r)``, where `x` is the root, and `r` is\n        a `RootResults` object.\n    disp : bool, optional\n        If True, raise RuntimeError if the algorithm didn't converge.\n        Otherwise, the convergence status is recorded in any `RootResults`\n        return object.\n    \n    Returns\n    -------\n    root : float\n        Root of `f` between `a` and `b`.\n    r : `RootResults` (present if ``full_output = True``)\n        Object containing information about the convergence. In particular,\n        ``r.converged`` is True if the routine converged.\n    \n    See Also\n    --------\n    fmin, fmin_powell, fmin_cg, fmin_bfgs, fmin_ncg : multivariate local optimizers\n    leastsq : nonlinear least squares minimizer\n    fmin_l_bfgs_b, fmin_tnc, fmin_cobyla : constrained multivariate optimizers\n    basinhopping, differential_evolution, brute : global optimizers\n    fminbound, brent, golden, bracket : local scalar minimizers\n    fsolve : N-D root-finding\n    brenth, ridder, bisect, newton : 1-D root-finding\n    fixed_point : scalar fixed-point finder\n    elementwise.find_root : efficient elementwise 1-D root-finder\n    \n    Notes\n    -----\n    `f` must be continuous.  f(a) and f(b) must have opposite signs.\n    \n    As mentioned in the parameter documentation, the computed root ``x0`` will\n    satisfy ``np.isclose(x, x0, atol=xtol, rtol=rtol)``, where ``x`` is the\n    exact root. In equation form, this terminating condition is ``abs(x - x0)\n    <= xtol + rtol * abs(x0)``.\n    \n    The default value ``xtol=2e-12`` may lead to surprising behavior if one\n    expects `brentq` to always compute roots with relative error near machine\n    precision. Care should be taken to select `xtol` for the use case at hand.\n    Setting ``xtol=5e-324``, the smallest subnormal number, will ensure the\n    highest level of accuracy. Larger values of `xtol` may be useful for saving\n    function evaluations when a root is at or near zero in applications where\n    the tiny absolute differences available between floating point numbers near\n    zero are not meaningful.\n    \n    References\n    ----------\n    .. [Brent1973]\n       Brent, R. P.,\n       *Algorithms for Minimization Without Derivatives*.\n       Englewood Cliffs, NJ: Prentice-Hall, 1973. Ch. 3-4.\n    \n    .. [PressEtal1992]\n       Press, W. H.; Flannery, B. P.; Teukolsky, S. A.; and Vetterling, W. T.\n       *Numerical Recipes in FORTRAN: The Art of Scientific Computing*, 2nd ed.\n       Cambridge, England: Cambridge University Press, pp. 352-355, 1992.\n       Section 9.3:  \"Van Wijngaarden-Dekker-Brent Method.\"\n    \n    Examples\n    --------\n    >>> def f(x):\n    ...     return (x**2 - 1)\n    \n    >>> from scipy import optimize\n    \n    >>> root = optimize.brentq(f, -2, 0)\n    >>> root\n    -1.0\n    \n    >>> root = optimize.brentq(f, 0, 2)\n    >>> root\n    1.0",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "0a1b99f7e7321dba8ca560d531f7f0d4125e3e2e40f7f7468056838e5c0cbfa2",
            "fields": [
                {
                    "id": "2clglcu8",
                    "encoding": "",
                    "name": "f",
                    "value": "",
                    "defaultValue": "",
                    "description": "Python function returning a number. The function :math:`f`\nmust be continuous, and :math:`f(a)` and :math:`f(b)` must\nhave opposite signs.",
                    "type": "function",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7m2w9s2y",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "One end of the bracketing interval :math:`[a, b]`.",
                    "type": "scalar",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fs2tpg2_",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "The other end of the bracketing interval :math:`[a, b]`.",
                    "type": "scalar",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "99939jc7",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Containing extra arguments for the function `f`.\n`f` is called by ``apply(f, (x)+args)``.",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xt9wgtw3",
                    "encoding": "",
                    "name": "xtol",
                    "value": 2e-12,
                    "defaultValue": 2e-12,
                    "description": "The computed root ``x0`` will satisfy ``np.isclose(x, x0,\natol=xtol, rtol=rtol)``, where ``x`` is the exact root. The\nparameter must be positive. For nice functions, Brent's\nmethod will often satisfy the above condition with ``xtol/2``\nand ``rtol/2``. [Brent1973]_",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wzsfhgs7",
                    "encoding": "",
                    "name": "rtol",
                    "value": "np.float64(8.881784197001252e-16)",
                    "defaultValue": "np.float64(8.881784197001252e-16)",
                    "description": "The computed root ``x0`` will satisfy ``np.isclose(x, x0,\natol=xtol, rtol=rtol)``, where ``x`` is the exact root. The\nparameter cannot be smaller than its default value of\n``4*np.finfo(float).eps``. For nice functions, Brent's\nmethod will often satisfy the above condition with ``xtol/2``\nand ``rtol/2``. [Brent1973]_",
                    "type": "numpy.float64",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h3pum8ti",
                    "encoding": "",
                    "name": "maxiter",
                    "value": 100,
                    "defaultValue": 100,
                    "description": "If convergence is not achieved in `maxiter` iterations, an error is\nraised. Must be >= 0.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6hr9x85c",
                    "encoding": "",
                    "name": "full_output",
                    "value": false,
                    "defaultValue": false,
                    "description": "If `full_output` is False, the root is returned. If `full_output` is\nTrue, the return value is ``(x, r)``, where `x` is the root, and `r` is\na `RootResults` object.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_865jcyx",
                    "encoding": "",
                    "name": "disp",
                    "value": true,
                    "defaultValue": true,
                    "description": "If True, raise RuntimeError if the algorithm didn't converge.\nOtherwise, the convergence status is recorded in any `RootResults`\nreturn object.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "znz6t6cd",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.brentq",
                    "defaultValue": "scipy.optimize.brentq",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0icti4ww",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hac4nyr1",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ewc9wk_m",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ye0_e73v",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize",
                    "defaultValue": "scipy.optimize",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_yg9lxpc",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6xopuphh",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "xd7wv299",
            "name": "optimize.broyden1",
            "description": "Find a root of a function, using Broyden's first Jacobian approximation.\n    \n    This method is also known as \"Broyden's good method\".\n    \n    Parameters\n    ----------\n    F : function(x) -> f\n        Function whose root to find; should take and return an array-like\n        object.\n    xin : array_like\n        Initial guess for the solution\n    alpha : float, optional\n        Initial guess for the Jacobian is ``(-1/alpha)``.\n    reduction_method : str or tuple, optional\n        Method used in ensuring that the rank of the Broyden matrix\n        stays low. Can either be a string giving the name of the method,\n        or a tuple of the form ``(method, param1, param2, ...)``\n        that gives the name of the method and values for additional parameters.\n    \n        Methods available:\n    \n        - ``restart``: drop all matrix columns. Has no extra parameters.\n        - ``simple``: drop oldest matrix column. Has no extra parameters.\n        - ``svd``: keep only the most significant SVD components.\n          Takes an extra parameter, ``to_retain``, which determines the\n          number of SVD components to retain when rank reduction is done.\n          Default is ``max_rank - 2``.\n    \n    max_rank : int, optional\n        Maximum rank for the Broyden matrix.\n        Default is infinity (i.e., no rank reduction).\n    iter : int, optional\n        Number of iterations to make. If omitted (default), make as many\n        as required to meet tolerances.\n    verbose : bool, optional\n        Print status to stdout on every iteration.\n    maxiter : int, optional\n        Maximum number of iterations to make. If more are needed to\n        meet convergence, `NoConvergence` is raised.\n    f_tol : float, optional\n        Absolute tolerance (in max-norm) for the residual.\n        If omitted, default is 6e-6.\n    f_rtol : float, optional\n        Relative tolerance for the residual. If omitted, not used.\n    x_tol : float, optional\n        Absolute minimum step size, as determined from the Jacobian\n        approximation. If the step size is smaller than this, optimization\n        is terminated as successful. If omitted, not used.\n    x_rtol : float, optional\n        Relative minimum step size. If omitted, not used.\n    tol_norm : function(vector) -> scalar, optional\n        Norm to use in convergence check. Default is the maximum norm.\n    line_search : {None, 'armijo' (default), 'wolfe'}, optional\n        Which type of a line search to use to determine the step size in the\n        direction given by the Jacobian approximation. Defaults to 'armijo'.\n    callback : function, optional\n        Optional callback function. It is called on every iteration as\n        ``callback(x, f)`` where `x` is the current solution and `f`\n        the corresponding residual.\n    \n    Returns\n    -------\n    sol : ndarray\n        An array (of similar array type as `x0`) containing the final solution.\n    \n    Raises\n    ------\n    NoConvergence\n        When a solution was not found.\n    \n    See Also\n    --------\n    root : Interface to root finding algorithms for multivariate\n           functions. See ``method='broyden1'`` in particular.\n    \n    Notes\n    -----\n    This algorithm implements the inverse Jacobian Quasi-Newton update\n    \n    .. math:: H_+ = H + (dx - H df) dx^\\dagger H / ( dx^\\dagger H df)\n    \n    which corresponds to Broyden's first Jacobian update\n    \n    .. math:: J_+ = J + (df - J dx) dx^\\dagger / dx^\\dagger dx\n    \n    \n    References\n    ----------\n    .. [1] B.A. van der Rotten, PhD thesis,\n       \"A limited memory Broyden method to solve high-dimensional\n       systems of nonlinear equations\". Mathematisch Instituut,\n       Universiteit Leiden, The Netherlands (2003).\n       https://math.leidenuniv.nl/scripties/Rotten.pdf\n    \n    Examples\n    --------\n    The following functions define a system of nonlinear equations\n    \n    >>> def fun(x):\n    ...     return [x[0]  + 0.5 * (x[0] - x[1])**3 - 1.0,\n    ...             0.5 * (x[1] - x[0])**3 + x[1]]\n    \n    A solution can be obtained as follows.\n    \n    >>> from scipy import optimize\n    >>> sol = optimize.broyden1(fun, [0, 0])\n    >>> sol\n    array([0.84116396, 0.15883641])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8d14dc3c2364149780d4234cabcfddad762181915e8b2d1aca8f0e9a1e41a43e",
            "fields": [
                {
                    "id": "8iyfjynd",
                    "encoding": "",
                    "name": "F",
                    "value": "",
                    "defaultValue": "",
                    "description": "Function whose root to find; should take and return an array-like\nobject.",
                    "type": "function(x) -> f",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y2z2xry4",
                    "encoding": "",
                    "name": "xin",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial guess for the solution",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "et6zbon2",
                    "encoding": "",
                    "name": "iter",
                    "value": "",
                    "defaultValue": "",
                    "description": "Number of iterations to make. If omitted (default), make as many\nas required to meet tolerances.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "41c18dtv",
                    "encoding": "",
                    "name": "alpha",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial guess for the Jacobian is ``(-1/alpha)``.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5e5usk0u",
                    "encoding": "",
                    "name": "reduction_method",
                    "value": "restart",
                    "defaultValue": "restart",
                    "description": "Method used in ensuring that the rank of the Broyden matrix\nstays low. Can either be a string giving the name of the method,\nor a tuple of the form ``(method, param1, param2, ...)``\nthat gives the name of the method and values for additional parameters.\n\nMethods available:\n\n- ``restart``: drop all matrix columns. Has no extra parameters.\n- ``simple``: drop oldest matrix column. Has no extra parameters.\n- ``svd``: keep only the most significant SVD components.\n  Takes an extra parameter, ``to_retain``, which determines the\n  number of SVD components to retain when rank reduction is done.\n  Default is ``max_rank - 2``.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dnyeyjc3",
                    "encoding": "",
                    "name": "max_rank",
                    "value": "",
                    "defaultValue": "",
                    "description": "Maximum rank for the Broyden matrix.\nDefault is infinity (i.e., no rank reduction).",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "og0e43fb",
                    "encoding": "",
                    "name": "verbose",
                    "value": false,
                    "defaultValue": false,
                    "description": "Print status to stdout on every iteration.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iew5ob8x",
                    "encoding": "",
                    "name": "maxiter",
                    "value": "",
                    "defaultValue": "",
                    "description": "Maximum number of iterations to make. If more are needed to\nmeet convergence, `NoConvergence` is raised.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3el9u4bi",
                    "encoding": "",
                    "name": "f_tol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Absolute tolerance (in max-norm) for the residual.\nIf omitted, default is 6e-6.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eoxcm1v_",
                    "encoding": "",
                    "name": "f_rtol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Relative tolerance for the residual. If omitted, not used.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qidvp_9k",
                    "encoding": "",
                    "name": "x_tol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Absolute minimum step size, as determined from the Jacobian\napproximation. If the step size is smaller than this, optimization\nis terminated as successful. If omitted, not used.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rywi11rg",
                    "encoding": "",
                    "name": "x_rtol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Relative minimum step size. If omitted, not used.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u3njeu8r",
                    "encoding": "",
                    "name": "tol_norm",
                    "value": "",
                    "defaultValue": "",
                    "description": "Norm to use in convergence check. Default is the maximum norm.",
                    "type": "function(vector) -> scalar",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3tsdjasl",
                    "encoding": "",
                    "name": "line_search",
                    "value": "armijo",
                    "defaultValue": "armijo",
                    "description": "Which type of a line search to use to determine the step size in the\ndirection given by the Jacobian approximation. Defaults to 'armijo'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y_o7i3ff",
                    "encoding": "",
                    "name": "callback",
                    "value": "",
                    "defaultValue": "",
                    "description": "Optional callback function. It is called on every iteration as\n``callback(x, f)`` where `x` is the current solution and `f`\nthe corresponding residual.",
                    "type": "function",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b_m4bsqu",
                    "encoding": "",
                    "name": "kw",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nmxqztgy",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.broyden1",
                    "defaultValue": "scipy.optimize.broyden1",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5nf5a9z0",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8i39_bxp",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "tii1244c",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sd3spgkn",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize",
                    "defaultValue": "scipy.optimize",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lzm8m4kp",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6021twt5",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "wwjhga1p",
            "name": "optimize.broyden2",
            "description": "Find a root of a function, using Broyden's second Jacobian approximation.\n    \n    This method is also known as \"Broyden's bad method\".\n    \n    Parameters\n    ----------\n    F : function(x) -> f\n        Function whose root to find; should take and return an array-like\n        object.\n    xin : array_like\n        Initial guess for the solution\n    alpha : float, optional\n        Initial guess for the Jacobian is ``(-1/alpha)``.\n    reduction_method : str or tuple, optional\n        Method used in ensuring that the rank of the Broyden matrix\n        stays low. Can either be a string giving the name of the method,\n        or a tuple of the form ``(method, param1, param2, ...)``\n        that gives the name of the method and values for additional parameters.\n    \n        Methods available:\n    \n        - ``restart``: drop all matrix columns. Has no extra parameters.\n        - ``simple``: drop oldest matrix column. Has no extra parameters.\n        - ``svd``: keep only the most significant SVD components.\n          Takes an extra parameter, ``to_retain``, which determines the\n          number of SVD components to retain when rank reduction is done.\n          Default is ``max_rank - 2``.\n    \n    max_rank : int, optional\n        Maximum rank for the Broyden matrix.\n        Default is infinity (i.e., no rank reduction).\n    iter : int, optional\n        Number of iterations to make. If omitted (default), make as many\n        as required to meet tolerances.\n    verbose : bool, optional\n        Print status to stdout on every iteration.\n    maxiter : int, optional\n        Maximum number of iterations to make. If more are needed to\n        meet convergence, `NoConvergence` is raised.\n    f_tol : float, optional\n        Absolute tolerance (in max-norm) for the residual.\n        If omitted, default is 6e-6.\n    f_rtol : float, optional\n        Relative tolerance for the residual. If omitted, not used.\n    x_tol : float, optional\n        Absolute minimum step size, as determined from the Jacobian\n        approximation. If the step size is smaller than this, optimization\n        is terminated as successful. If omitted, not used.\n    x_rtol : float, optional\n        Relative minimum step size. If omitted, not used.\n    tol_norm : function(vector) -> scalar, optional\n        Norm to use in convergence check. Default is the maximum norm.\n    line_search : {None, 'armijo' (default), 'wolfe'}, optional\n        Which type of a line search to use to determine the step size in the\n        direction given by the Jacobian approximation. Defaults to 'armijo'.\n    callback : function, optional\n        Optional callback function. It is called on every iteration as\n        ``callback(x, f)`` where `x` is the current solution and `f`\n        the corresponding residual.\n    \n    Returns\n    -------\n    sol : ndarray\n        An array (of similar array type as `x0`) containing the final solution.\n    \n    Raises\n    ------\n    NoConvergence\n        When a solution was not found.\n    \n    See Also\n    --------\n    root : Interface to root finding algorithms for multivariate\n           functions. See ``method='broyden2'`` in particular.\n    \n    Notes\n    -----\n    This algorithm implements the inverse Jacobian Quasi-Newton update\n    \n    .. math:: H_+ = H + (dx - H df) df^\\dagger / ( df^\\dagger df)\n    \n    corresponding to Broyden's second method.\n    \n    References\n    ----------\n    .. [1] B.A. van der Rotten, PhD thesis,\n       \"A limited memory Broyden method to solve high-dimensional\n       systems of nonlinear equations\". Mathematisch Instituut,\n       Universiteit Leiden, The Netherlands (2003).\n    \n       https://web.archive.org/web/20161022015821/http://www.math.leidenuniv.nl/scripties/Rotten.pdf\n    \n    Examples\n    --------\n    The following functions define a system of nonlinear equations\n    \n    >>> def fun(x):\n    ...     return [x[0]  + 0.5 * (x[0] - x[1])**3 - 1.0,\n    ...             0.5 * (x[1] - x[0])**3 + x[1]]\n    \n    A solution can be obtained as follows.\n    \n    >>> from scipy import optimize\n    >>> sol = optimize.broyden2(fun, [0, 0])\n    >>> sol\n    array([0.84116365, 0.15883529])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "bb50e753607c4fbcd853b9e44095938e5e4f600379ac1fdea2641538be3bb5bb",
            "fields": [
                {
                    "id": "m5sfyonl",
                    "encoding": "",
                    "name": "F",
                    "value": "",
                    "defaultValue": "",
                    "description": "Function whose root to find; should take and return an array-like\nobject.",
                    "type": "function(x) -> f",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "09d24l15",
                    "encoding": "",
                    "name": "xin",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial guess for the solution",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8w8_70a_",
                    "encoding": "",
                    "name": "iter",
                    "value": "",
                    "defaultValue": "",
                    "description": "Number of iterations to make. If omitted (default), make as many\nas required to meet tolerances.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9kozvg40",
                    "encoding": "",
                    "name": "alpha",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial guess for the Jacobian is ``(-1/alpha)``.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y0s92uo3",
                    "encoding": "",
                    "name": "reduction_method",
                    "value": "restart",
                    "defaultValue": "restart",
                    "description": "Method used in ensuring that the rank of the Broyden matrix\nstays low. Can either be a string giving the name of the method,\nor a tuple of the form ``(method, param1, param2, ...)``\nthat gives the name of the method and values for additional parameters.\n\nMethods available:\n\n- ``restart``: drop all matrix columns. Has no extra parameters.\n- ``simple``: drop oldest matrix column. Has no extra parameters.\n- ``svd``: keep only the most significant SVD components.\n  Takes an extra parameter, ``to_retain``, which determines the\n  number of SVD components to retain when rank reduction is done.\n  Default is ``max_rank - 2``.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p3gwnbu1",
                    "encoding": "",
                    "name": "max_rank",
                    "value": "",
                    "defaultValue": "",
                    "description": "Maximum rank for the Broyden matrix.\nDefault is infinity (i.e., no rank reduction).",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "psj_lnph",
                    "encoding": "",
                    "name": "verbose",
                    "value": false,
                    "defaultValue": false,
                    "description": "Print status to stdout on every iteration.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "abjcya9d",
                    "encoding": "",
                    "name": "maxiter",
                    "value": "",
                    "defaultValue": "",
                    "description": "Maximum number of iterations to make. If more are needed to\nmeet convergence, `NoConvergence` is raised.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7yvfaiqy",
                    "encoding": "",
                    "name": "f_tol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Absolute tolerance (in max-norm) for the residual.\nIf omitted, default is 6e-6.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qmpx4xqt",
                    "encoding": "",
                    "name": "f_rtol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Relative tolerance for the residual. If omitted, not used.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vynjcwj4",
                    "encoding": "",
                    "name": "x_tol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Absolute minimum step size, as determined from the Jacobian\napproximation. If the step size is smaller than this, optimization\nis terminated as successful. If omitted, not used.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ctj0tz8r",
                    "encoding": "",
                    "name": "x_rtol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Relative minimum step size. If omitted, not used.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fm4rdwk_",
                    "encoding": "",
                    "name": "tol_norm",
                    "value": "",
                    "defaultValue": "",
                    "description": "Norm to use in convergence check. Default is the maximum norm.",
                    "type": "function(vector) -> scalar",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q8nps_ky",
                    "encoding": "",
                    "name": "line_search",
                    "value": "armijo",
                    "defaultValue": "armijo",
                    "description": "Which type of a line search to use to determine the step size in the\ndirection given by the Jacobian approximation. Defaults to 'armijo'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cypt0xmv",
                    "encoding": "",
                    "name": "callback",
                    "value": "",
                    "defaultValue": "",
                    "description": "Optional callback function. It is called on every iteration as\n``callback(x, f)`` where `x` is the current solution and `f`\nthe corresponding residual.",
                    "type": "function",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "67mvfla3",
                    "encoding": "",
                    "name": "kw",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1b2mrx4h",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.broyden2",
                    "defaultValue": "scipy.optimize.broyden2",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "voo7m1us",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2wvgtvfy",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "l8_3tb9q",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ta89pbli",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize",
                    "defaultValue": "scipy.optimize",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_aauqpf5",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qdh8yjfj",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "4vm16td5",
            "name": "optimize.brute",
            "description": "Minimize a function over a given range by brute force.\n    \n    Uses the \"brute force\" method, i.e., computes the function's value\n    at each point of a multidimensional grid of points, to find the global\n    minimum of the function.\n    \n    The function is evaluated everywhere in the range with the datatype of the\n    first call to the function, as enforced by the ``vectorize`` NumPy\n    function. The value and type of the function evaluation returned when\n    ``full_output=True`` are affected in addition by the ``finish`` argument\n    (see Notes).\n    \n    The brute force approach is inefficient because the number of grid points\n    increases exponentially - the number of grid points to evaluate is\n    ``Ns ** len(x)``. Consequently, even with coarse grid spacing, even\n    moderately sized problems can take a long time to run, and/or run into\n    memory limitations.\n    \n    Parameters\n    ----------\n    func : callable\n        The objective function to be minimized. Must be in the\n        form ``f(x, *args)``, where ``x`` is the argument in\n        the form of a 1-D array and ``args`` is a tuple of any\n        additional fixed parameters needed to completely specify\n        the function.\n    ranges : tuple\n        Each component of the `ranges` tuple must be either a\n        \"slice object\" or a range tuple of the form ``(low, high)``.\n        The program uses these to create the grid of points on which\n        the objective function will be computed. See `Note 2` for\n        more detail.\n    args : tuple, optional\n        Any additional fixed parameters needed to completely specify\n        the function.\n    Ns : int, optional\n        Number of grid points along the axes, if not otherwise\n        specified. See `Note2`.\n    full_output : bool, optional\n        If True, return the evaluation grid and the objective function's\n        values on it.\n    finish : callable, optional\n        An optimization function that is called with the result of brute force\n        minimization as initial guess. `finish` should take `func` and\n        the initial guess as positional arguments, and take `args` as\n        keyword arguments. It may additionally take `full_output`\n        and/or `disp` as keyword arguments. Use None if no \"polishing\"\n        function is to be used. See Notes for more details.\n    disp : bool, optional\n        Set to True to print convergence messages from the `finish` callable.\n    workers : int or map-like callable, optional\n        If `workers` is an int the grid is subdivided into `workers`\n        sections and evaluated in parallel (uses\n        `multiprocessing.Pool <multiprocessing>`).\n        Supply `-1` to use all cores available to the Process.\n        Alternatively supply a map-like callable, such as\n        `multiprocessing.Pool.map` for evaluating the grid in parallel.\n        This evaluation is carried out as ``workers(func, iterable)``.\n        Requires that `func` be pickleable.\n    \n        .. versionadded:: 1.3.0\n    \n    Returns\n    -------\n    x0 : ndarray\n        A 1-D array containing the coordinates of a point at which the\n        objective function had its minimum value. (See `Note 1` for\n        which point is returned.)\n    fval : float\n        Function value at the point `x0`. (Returned when `full_output` is\n        True.)\n    grid : tuple\n        Representation of the evaluation grid. It has the same\n        length as `x0`. (Returned when `full_output` is True.)\n    Jout : ndarray\n        Function values at each point of the evaluation\n        grid, i.e., ``Jout = func(*grid)``. (Returned\n        when `full_output` is True.)\n    \n    See Also\n    --------\n    basinhopping, differential_evolution\n    \n    Notes\n    -----\n    *Note 1*: The program finds the gridpoint at which the lowest value\n    of the objective function occurs. If `finish` is None, that is the\n    point returned. When the global minimum occurs within (or not very far\n    outside) the grid's boundaries, and the grid is fine enough, that\n    point will be in the neighborhood of the global minimum.\n    \n    However, users often employ some other optimization program to\n    \"polish\" the gridpoint values, i.e., to seek a more precise\n    (local) minimum near `brute's` best gridpoint.\n    The `brute` function's `finish` option provides a convenient way to do\n    that. Any polishing program used must take `brute's` output as its\n    initial guess as a positional argument, and take `brute's` input values\n    for `args` as keyword arguments, otherwise an error will be raised.\n    It may additionally take `full_output` and/or `disp` as keyword arguments.\n    \n    `brute` assumes that the `finish` function returns either an\n    `OptimizeResult` object or a tuple in the form:\n    ``(xmin, Jmin, ... , statuscode)``, where ``xmin`` is the minimizing\n    value of the argument, ``Jmin`` is the minimum value of the objective\n    function, \"...\" may be some other returned values (which are not used\n    by `brute`), and ``statuscode`` is the status code of the `finish` program.\n    \n    Note that when `finish` is not None, the values returned are those\n    of the `finish` program, *not* the gridpoint ones. Consequently,\n    while `brute` confines its search to the input grid points,\n    the `finish` program's results usually will not coincide with any\n    gridpoint, and may fall outside the grid's boundary. Thus, if a\n    minimum only needs to be found over the provided grid points, make\n    sure to pass in ``finish=None``.\n    \n    *Note 2*: The grid of points is a `numpy.mgrid` object.\n    For `brute` the `ranges` and `Ns` inputs have the following effect.\n    Each component of the `ranges` tuple can be either a slice object or a\n    two-tuple giving a range of values, such as (0, 5). If the component is a\n    slice object, `brute` uses it directly. If the component is a two-tuple\n    range, `brute` internally converts it to a slice object that interpolates\n    `Ns` points from its low-value to its high-value, inclusive.\n    \n    Examples\n    --------\n    We illustrate the use of `brute` to seek the global minimum of a function\n    of two variables that is given as the sum of a positive-definite\n    quadratic and two deep \"Gaussian-shaped\" craters. Specifically, define\n    the objective function `f` as the sum of three other functions,\n    ``f = f1 + f2 + f3``. We suppose each of these has a signature\n    ``(z, *params)``, where ``z = (x, y)``,  and ``params`` and the functions\n    are as defined below.\n    \n    >>> import numpy as np\n    >>> params = (2, 3, 7, 8, 9, 10, 44, -1, 2, 26, 1, -2, 0.5)\n    >>> def f1(z, *params):\n    ...     x, y = z\n    ...     a, b, c, d, e, f, g, h, i, j, k, l, scale = params\n    ...     return (a * x**2 + b * x * y + c * y**2 + d*x + e*y + f)\n    \n    >>> def f2(z, *params):\n    ...     x, y = z\n    ...     a, b, c, d, e, f, g, h, i, j, k, l, scale = params\n    ...     return (-g*np.exp(-((x-h)**2 + (y-i)**2) / scale))\n    \n    >>> def f3(z, *params):\n    ...     x, y = z\n    ...     a, b, c, d, e, f, g, h, i, j, k, l, scale = params\n    ...     return (-j*np.exp(-((x-k)**2 + (y-l)**2) / scale))\n    \n    >>> def f(z, *params):\n    ...     return f1(z, *params) + f2(z, *params) + f3(z, *params)\n    \n    Thus, the objective function may have local minima near the minimum\n    of each of the three functions of which it is composed. To\n    use `fmin` to polish its gridpoint result, we may then continue as\n    follows:\n    \n    >>> rranges = (slice(-4, 4, 0.25), slice(-4, 4, 0.25))\n    >>> from scipy import optimize\n    >>> resbrute = optimize.brute(f, rranges, args=params, full_output=True,\n    ...                           finish=optimize.fmin)\n    >>> resbrute[0]  # global minimum\n    array([-1.05665192,  1.80834843])\n    >>> resbrute[1]  # function value at global minimum\n    -3.4085818767\n    \n    Note that if `finish` had been set to None, we would have gotten the\n    gridpoint [-1.0 1.75] where the rounded function value is -2.892.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9bd70255939aa0bb539a012ba9ef3d199beb5bec7eb594cd3f79672cf0bdef56",
            "fields": [
                {
                    "id": "4ca3qxm2",
                    "encoding": "",
                    "name": "func",
                    "value": "",
                    "defaultValue": "",
                    "description": "The objective function to be minimized. Must be in the\nform ``f(x, *args)``, where ``x`` is the argument in\nthe form of a 1-D array and ``args`` is a tuple of any\nadditional fixed parameters needed to completely specify\nthe function.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vg5ndjk_",
                    "encoding": "",
                    "name": "ranges",
                    "value": "",
                    "defaultValue": "",
                    "description": "Each component of the `ranges` tuple must be either a\n\"slice object\" or a range tuple of the form ``(low, high)``.\nThe program uses these to create the grid of points on which\nthe objective function will be computed. See `Note 2` for\nmore detail.",
                    "type": "tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x63j37nc",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Any additional fixed parameters needed to completely specify\nthe function.",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a6u0ca3t",
                    "encoding": "",
                    "name": "Ns",
                    "value": 20,
                    "defaultValue": 20,
                    "description": "Number of grid points along the axes, if not otherwise\nspecified. See `Note2`.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ee2x4gzu",
                    "encoding": "",
                    "name": "full_output",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "If True, return the evaluation grid and the objective function's\nvalues on it.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ly6vux16",
                    "encoding": "",
                    "name": "finish",
                    "value": "builtins.function",
                    "defaultValue": "builtins.function",
                    "description": "An optimization function that is called with the result of brute force\nminimization as initial guess. `finish` should take `func` and\nthe initial guess as positional arguments, and take `args` as\nkeyword arguments. It may additionally take `full_output`\nand/or `disp` as keyword arguments. Use None if no \"polishing\"\nfunction is to be used. See Notes for more details.",
                    "type": "builtins.function",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r33jztmd",
                    "encoding": "",
                    "name": "disp",
                    "value": false,
                    "defaultValue": false,
                    "description": "Set to True to print convergence messages from the `finish` callable.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i0sijzsm",
                    "encoding": "",
                    "name": "workers",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "If `workers` is an int the grid is subdivided into `workers`\nsections and evaluated in parallel (uses\n`multiprocessing.Pool <multiprocessing>`).\nSupply `-1` to use all cores available to the Process.\nAlternatively supply a map-like callable, such as\n`multiprocessing.Pool.map` for evaluating the grid in parallel.\nThis evaluation is carried out as ``workers(func, iterable)``.\nRequires that `func` be pickleable.\n\n.. versionadded:: 1.3.0",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "80u_44h0",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.brute",
                    "defaultValue": "scipy.optimize.brute",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zyjw4sx1",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sq1k10q1",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "tjnj6cbb",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lq_gundw",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize",
                    "defaultValue": "scipy.optimize",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2_pjk28c",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iqaepvcx",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "hid5uyxg",
            "name": "optimize.check_grad",
            "description": "Check the correctness of a gradient function by comparing it against a\n    (forward) finite-difference approximation of the gradient.\n    \n    Parameters\n    ----------\n    func : callable ``func(x0, *args)``\n        Function whose derivative is to be checked.\n    grad : callable ``grad(x0, *args)``\n        Jacobian of `func`.\n    x0 : ndarray\n        Points to check `grad` against forward difference approximation of grad\n        using `func`.\n    args : \\\\*args, optional\n        Extra arguments passed to `func` and `grad`.\n    epsilon : float, optional\n        Step size used for the finite difference approximation. It defaults to\n        ``sqrt(np.finfo(float).eps)``, which is approximately 1.49e-08.\n    direction : str, optional\n        If set to ``'random'``, then gradients along a random vector\n        are used to check `grad` against forward difference approximation\n        using `func`. By default it is ``'all'``, in which case, all\n        the one hot direction vectors are considered to check `grad`.\n        If `func` is a vector valued function then only ``'all'`` can be used.\n    rng : {None, int, `numpy.random.Generator`}, optional\n        If `rng` is passed by keyword, types other than `numpy.random.Generator` are\n        passed to `numpy.random.default_rng` to instantiate a ``Generator``.\n        If `rng` is already a ``Generator`` instance, then the provided instance is\n        used. Specify `rng` for repeatable function behavior.\n    \n        If this argument is passed by position or `seed` is passed by keyword,\n        legacy behavior for the argument `seed` applies:\n    \n        - If `seed` is None (or `numpy.random`), the `numpy.random.RandomState`\n          singleton is used.\n        - If `seed` is an int, a new ``RandomState`` instance is used,\n          seeded with `seed`.\n        - If `seed` is already a ``Generator`` or ``RandomState`` instance then\n          that instance is used.\n    \n        .. versionchanged:: 1.15.0\n            As part of the `SPEC-007 <https://scientific-python.org/specs/spec-0007/>`_\n            transition from use of `numpy.random.RandomState` to\n            `numpy.random.Generator`, this keyword was changed from `seed` to `rng`.\n            For an interim period, both keywords will continue to work, although only one\n            may be specified at a time. After the interim period, function calls using the\n            `seed` keyword will emit warnings. The behavior of both `seed` and\n            `rng` are outlined above, but only the `rng` keyword should be used in new code.\n            \n        The random numbers generated affect the random vector along which gradients\n        are computed to check ``grad``. Note that `rng` is only used when `direction`\n        argument is set to `'random'`.\n    \n    Returns\n    -------\n    err : float\n        The square root of the sum of squares (i.e., the 2-norm) of the\n        difference between ``grad(x0, *args)`` and the finite difference\n        approximation of `grad` using func at the points `x0`.\n    \n    See Also\n    --------\n    \n    :func:`approx_fprime`\n        ..\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> def func(x):\n    ...     return x[0]**2 - 0.5 * x[1]**3\n    >>> def grad(x):\n    ...     return [2 * x[0], -1.5 * x[1]**2]\n    >>> from scipy.optimize import check_grad\n    >>> check_grad(func, grad, [1.5, -1.5])\n    2.9802322387695312e-08  # may vary\n    >>> rng = np.random.default_rng()\n    >>> check_grad(func, grad, [1.5, -1.5],\n    ...             direction='random', seed=rng)\n    2.9802322387695312e-08",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "929c48b3fb9fa038fc99b28862faf640b92e3cdebd5771b3c5d4f89524300432",
            "fields": [
                {
                    "id": "qjxl6jzt",
                    "encoding": "",
                    "name": "func",
                    "value": "",
                    "defaultValue": "",
                    "description": "Function whose derivative is to be checked.",
                    "type": "callable func(x0, *args)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rd01b578",
                    "encoding": "",
                    "name": "grad",
                    "value": "",
                    "defaultValue": "",
                    "description": "Jacobian of `func`.",
                    "type": "callable grad(x0, *args)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "odqqxqv2",
                    "encoding": "",
                    "name": "x0",
                    "value": "",
                    "defaultValue": "",
                    "description": "Points to check `grad` against forward difference approximation of grad\nusing `func`.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "karn6oj1",
                    "encoding": "",
                    "name": "args",
                    "value": "",
                    "defaultValue": "",
                    "description": "Extra arguments passed to `func` and `grad`.",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xp5hxvxj",
                    "encoding": "",
                    "name": "epsilon",
                    "value": "np.float64(1.4901161193847656e-08)",
                    "defaultValue": "np.float64(1.4901161193847656e-08)",
                    "description": "Step size used for the finite difference approximation. It defaults to\n``sqrt(np.finfo(float).eps)``, which is approximately 1.49e-08.",
                    "type": "numpy.float64",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f515tq5v",
                    "encoding": "",
                    "name": "direction",
                    "value": "all",
                    "defaultValue": "all",
                    "description": "If set to ``'random'``, then gradients along a random vector\nare used to check `grad` against forward difference approximation\nusing `func`. By default it is ``'all'``, in which case, all\nthe one hot direction vectors are considered to check `grad`.\nIf `func` is a vector valued function then only ``'all'`` can be used.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "swjrwdhb",
                    "encoding": "",
                    "name": "rng",
                    "value": "",
                    "defaultValue": "",
                    "description": "If `rng` is passed by keyword, types other than `numpy.random.Generator` are\npassed to `numpy.random.default_rng` to instantiate a ``Generator``.\nIf `rng` is already a ``Generator`` instance, then the provided instance is\nused. Specify `rng` for repeatable function behavior.\n\nIf this argument is passed by position or `seed` is passed by keyword,\nlegacy behavior for the argument `seed` applies:\n\n- If `seed` is None (or `numpy.random`), the `numpy.random.RandomState`\n  singleton is used.\n- If `seed` is an int, a new ``RandomState`` instance is used,\n  seeded with `seed`.\n- If `seed` is already a ``Generator`` or ``RandomState`` instance then\n  that instance is used.\n\n.. versionchanged:: 1.15.0\n    As part of the `SPEC-007 <https://scientific-python.org/specs/spec-0007/>`_\n    transition from use of `numpy.random.RandomState` to\n    `numpy.random.Generator`, this keyword was changed from `seed` to `rng`.\n    For an interim period, both keywords will continue to work, although only one\n    may be specified at a time. After the interim period, function calls using the\n    `seed` keyword will emit warnings. The behavior of both `seed` and\n    `rng` are outlined above, but only the `rng` keyword should be used in new code.\n    \nThe random numbers generated affect the random vector along which gradients\nare computed to check ``grad``. Note that `rng` is only used when `direction`\nargument is set to `'random'`.",
                    "type": "{None, int, numpy.random.Generator}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pf2ez82m",
                    "encoding": "",
                    "name": "seed",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qklhprsd",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.check_grad",
                    "defaultValue": "scipy.optimize.check_grad",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sam0hsh7",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4p4x2lq_",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "dpb6084b",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v8459p7g",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize",
                    "defaultValue": "scipy.optimize",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h18x2lko",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ir1bqesf",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "j2vcdbp7",
            "name": "optimize.curve_fit",
            "description": "Use non-linear least squares to fit a function, f, to data.\n    \n    Assumes ``ydata = f(xdata, *params) + eps``.\n    \n    Parameters\n    ----------\n    f : callable\n        The model function, f(x, ...). It must take the independent\n        variable as the first argument and the parameters to fit as\n        separate remaining arguments.\n    xdata : array_like\n        The independent variable where the data is measured.\n        Should usually be an M-length sequence or an (k,M)-shaped array for\n        functions with k predictors, and each element should be float\n        convertible if it is an array like object.\n    ydata : array_like\n        The dependent data, a length M array - nominally ``f(xdata, ...)``.\n    p0 : array_like, optional\n        Initial guess for the parameters (length N). If None, then the\n        initial values will all be 1 (if the number of parameters for the\n        function can be determined using introspection, otherwise a\n        ValueError is raised).\n    sigma : None or scalar or M-length sequence or MxM array, optional\n        Determines the uncertainty in `ydata`. If we define residuals as\n        ``r = ydata - f(xdata, *popt)``, then the interpretation of `sigma`\n        depends on its number of dimensions:\n    \n        - A scalar or 1-D `sigma` should contain values of standard deviations of\n          errors in `ydata`. In this case, the optimized function is\n          ``chisq = sum((r / sigma) ** 2)``.\n    \n        - A 2-D `sigma` should contain the covariance matrix of\n          errors in `ydata`. In this case, the optimized function is\n          ``chisq = r.T @ inv(sigma) @ r``.\n    \n          .. versionadded:: 0.19\n    \n        None (default) is equivalent of 1-D `sigma` filled with ones.\n    absolute_sigma : bool, optional\n        If True, `sigma` is used in an absolute sense and the estimated parameter\n        covariance `pcov` reflects these absolute values.\n    \n        If False (default), only the relative magnitudes of the `sigma` values matter.\n        The returned parameter covariance matrix `pcov` is based on scaling\n        `sigma` by a constant factor. This constant is set by demanding that the\n        reduced `chisq` for the optimal parameters `popt` when using the\n        *scaled* `sigma` equals unity. In other words, `sigma` is scaled to\n        match the sample variance of the residuals after the fit. Default is False.\n        Mathematically,\n        ``pcov(absolute_sigma=False) = pcov(absolute_sigma=True) * chisq(popt)/(M-N)``\n    check_finite : bool, optional\n        If True, check that the input arrays do not contain nans of infs,\n        and raise a ValueError if they do. Setting this parameter to\n        False may silently produce nonsensical results if the input arrays\n        do contain nans. Default is True if `nan_policy` is not specified\n        explicitly and False otherwise.\n    bounds : 2-tuple of array_like or `Bounds`, optional\n        Lower and upper bounds on parameters. Defaults to no bounds.\n        There are two ways to specify the bounds:\n    \n        - Instance of `Bounds` class.\n    \n        - 2-tuple of array_like: Each element of the tuple must be either\n          an array with the length equal to the number of parameters, or a\n          scalar (in which case the bound is taken to be the same for all\n          parameters). Use ``np.inf`` with an appropriate sign to disable\n          bounds on all or some parameters.\n    \n    method : {'lm', 'trf', 'dogbox'}, optional\n        Method to use for optimization. See `least_squares` for more details.\n        Default is 'lm' for unconstrained problems and 'trf' if `bounds` are\n        provided. The method 'lm' won't work when the number of observations\n        is less than the number of variables, use 'trf' or 'dogbox' in this\n        case.\n    \n        .. versionadded:: 0.17\n    jac : callable, string or None, optional\n        Function with signature ``jac(x, ...)`` which computes the Jacobian\n        matrix of the model function with respect to parameters as a dense\n        array_like structure. It will be scaled according to provided `sigma`.\n        If None (default), the Jacobian will be estimated numerically.\n        String keywords for 'trf' and 'dogbox' methods can be used to select\n        a finite difference scheme, see `least_squares`.\n    \n        .. versionadded:: 0.18\n    full_output : boolean, optional\n        If True, this function returns additional information: `infodict`,\n        `mesg`, and `ier`.\n    \n        .. versionadded:: 1.9\n    nan_policy : {'raise', 'omit', None}, optional\n        Defines how to handle when input contains nan.\n        The following options are available (default is None):\n    \n        * 'raise': throws an error\n        * 'omit': performs the calculations ignoring nan values\n        * None: no special handling of NaNs is performed\n          (except what is done by check_finite); the behavior when NaNs\n          are present is implementation-dependent and may change.\n    \n        Note that if this value is specified explicitly (not None),\n        `check_finite` will be set as False.\n    \n        .. versionadded:: 1.11\n    **kwargs\n        Keyword arguments passed to `leastsq` for ``method='lm'`` or\n        `least_squares` otherwise.\n    \n    Returns\n    -------\n    popt : array\n        Optimal values for the parameters so that the sum of the squared\n        residuals of ``f(xdata, *popt) - ydata`` is minimized.\n    pcov : 2-D array\n        The estimated approximate covariance of popt. The diagonals provide\n        the variance of the parameter estimate. To compute one standard\n        deviation errors on the parameters, use\n        ``perr = np.sqrt(np.diag(pcov))``. Note that the relationship between\n        `cov` and parameter error estimates is derived based on a linear\n        approximation to the model function around the optimum [1]_.\n        When this approximation becomes inaccurate, `cov` may not provide an\n        accurate measure of uncertainty.\n    \n        How the `sigma` parameter affects the estimated covariance\n        depends on `absolute_sigma` argument, as described above.\n    \n        If the Jacobian matrix at the solution doesn't have a full rank, then\n        'lm' method returns a matrix filled with ``np.inf``, on the other hand\n        'trf'  and 'dogbox' methods use Moore-Penrose pseudoinverse to compute\n        the covariance matrix. Covariance matrices with large condition numbers\n        (e.g. computed with `numpy.linalg.cond`) may indicate that results are\n        unreliable.\n    infodict : dict (returned only if `full_output` is True)\n        a dictionary of optional outputs with the keys:\n    \n        ``nfev``\n            The number of function calls. Methods 'trf' and 'dogbox' do not\n            count function calls for numerical Jacobian approximation,\n            as opposed to 'lm' method.\n        ``fvec``\n            The residual values evaluated at the solution, for a 1-D `sigma`\n            this is ``(f(x, *popt) - ydata)/sigma``.\n        ``fjac``\n            A permutation of the R matrix of a QR\n            factorization of the final approximate\n            Jacobian matrix, stored column wise.\n            Together with ipvt, the covariance of the\n            estimate can be approximated.\n            Method 'lm' only provides this information.\n        ``ipvt``\n            An integer array of length N which defines\n            a permutation matrix, p, such that\n            fjac*p = q*r, where r is upper triangular\n            with diagonal elements of nonincreasing\n            magnitude. Column j of p is column ipvt(j)\n            of the identity matrix.\n            Method 'lm' only provides this information.\n        ``qtf``\n            The vector (transpose(q) * fvec).\n            Method 'lm' only provides this information.\n    \n        .. versionadded:: 1.9\n    mesg : str (returned only if `full_output` is True)\n        A string message giving information about the solution.\n    \n        .. versionadded:: 1.9\n    ier : int (returned only if `full_output` is True)\n        An integer flag. If it is equal to 1, 2, 3 or 4, the solution was\n        found. Otherwise, the solution was not found. In either case, the\n        optional output variable `mesg` gives more information.\n    \n        .. versionadded:: 1.9\n    \n    Raises\n    ------\n    ValueError\n        if either `ydata` or `xdata` contain NaNs, or if incompatible options\n        are used.\n    \n    RuntimeError\n        if the least-squares minimization fails.\n    \n    OptimizeWarning\n        if covariance of the parameters can not be estimated.\n    \n    See Also\n    --------\n    least_squares : Minimize the sum of squares of nonlinear functions.\n    scipy.stats.linregress : Calculate a linear least squares regression for\n                             two sets of measurements.\n    \n    Notes\n    -----\n    Users should ensure that inputs `xdata`, `ydata`, and the output of `f`\n    are ``float64``, or else the optimization may return incorrect results.\n    \n    With ``method='lm'``, the algorithm uses the Levenberg-Marquardt algorithm\n    through `leastsq`. Note that this algorithm can only deal with\n    unconstrained problems.\n    \n    Box constraints can be handled by methods 'trf' and 'dogbox'. Refer to\n    the docstring of `least_squares` for more information.\n    \n    Parameters to be fitted must have similar scale. Differences of multiple\n    orders of magnitude can lead to incorrect results. For the 'trf' and\n    'dogbox' methods, the `x_scale` keyword argument can be used to scale\n    the parameters.\n    \n    `curve_fit` is for local optimization of parameters to minimize the sum of squares\n    of residuals. For global optimization, other choices of objective function, and\n    other advanced features, consider using SciPy's :ref:`tutorial_optimize_global`\n    tools or the `LMFIT <https://lmfit.github.io/lmfit-py/index.html>`_ package.\n    \n    References\n    ----------\n    .. [1] K. Vugrin et al. Confidence region estimation techniques for nonlinear\n           regression in groundwater flow: Three case studies. Water Resources\n           Research, Vol. 43, W03423, :doi:`10.1029/2005WR004804`\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> import matplotlib.pyplot as plt\n    >>> from scipy.optimize import curve_fit\n    \n    >>> def func(x, a, b, c):\n    ...     return a * np.exp(-b * x) + c\n    \n    Define the data to be fit with some noise:\n    \n    >>> xdata = np.linspace(0, 4, 50)\n    >>> y = func(xdata, 2.5, 1.3, 0.5)\n    >>> rng = np.random.default_rng()\n    >>> y_noise = 0.2 * rng.normal(size=xdata.size)\n    >>> ydata = y + y_noise\n    >>> plt.plot(xdata, ydata, 'b-', label='data')\n    \n    Fit for the parameters a, b, c of the function `func`:\n    \n    >>> popt, pcov = curve_fit(func, xdata, ydata)\n    >>> popt\n    array([2.56274217, 1.37268521, 0.47427475])\n    >>> plt.plot(xdata, func(xdata, *popt), 'r-',\n    ...          label='fit: a=%5.3f, b=%5.3f, c=%5.3f' % tuple(popt))\n    \n    Constrain the optimization to the region of ``0 <= a <= 3``,\n    ``0 <= b <= 1`` and ``0 <= c <= 0.5``:\n    \n    >>> popt, pcov = curve_fit(func, xdata, ydata, bounds=(0, [3., 1., 0.5]))\n    >>> popt\n    array([2.43736712, 1.        , 0.34463856])\n    >>> plt.plot(xdata, func(xdata, *popt), 'g--',\n    ...          label='fit: a=%5.3f, b=%5.3f, c=%5.3f' % tuple(popt))\n    \n    >>> plt.xlabel('x')\n    >>> plt.ylabel('y')\n    >>> plt.legend()\n    >>> plt.show()\n    \n    For reliable results, the model `func` should not be overparametrized;\n    redundant parameters can cause unreliable covariance matrices and, in some\n    cases, poorer quality fits. As a quick check of whether the model may be\n    overparameterized, calculate the condition number of the covariance matrix:\n    \n    >>> np.linalg.cond(pcov)\n    34.571092161547405  # may vary\n    \n    The value is small, so it does not raise much concern. If, however, we were\n    to add a fourth parameter ``d`` to `func` with the same effect as ``a``:\n    \n    >>> def func2(x, a, b, c, d):\n    ...     return a * d * np.exp(-b * x) + c  # a and d are redundant\n    >>> popt, pcov = curve_fit(func2, xdata, ydata)\n    >>> np.linalg.cond(pcov)\n    1.13250718925596e+32  # may vary\n    \n    Such a large value is cause for concern. The diagonal elements of the\n    covariance matrix, which is related to uncertainty of the fit, gives more\n    information:\n    \n    >>> np.diag(pcov)\n    array([1.48814742e+29, 3.78596560e-02, 5.39253738e-03, 2.76417220e+28])  # may vary\n    \n    Note that the first and last terms are much larger than the other elements,\n    suggesting that the optimal values of these parameters are ambiguous and\n    that only one of these parameters is needed in the model.\n    \n    If the optimal parameters of `f` differ by multiple orders of magnitude, the\n    resulting fit can be inaccurate. Sometimes, `curve_fit` can fail to find any\n    results:\n    \n    >>> ydata = func(xdata, 500000, 0.01, 15)\n    >>> try:\n    ...     popt, pcov = curve_fit(func, xdata, ydata, method = 'trf')\n    ... except RuntimeError as e:\n    ...     print(e)\n    Optimal parameters not found: The maximum number of function evaluations is\n    exceeded.\n    \n    If parameter scale is roughly known beforehand, it can be defined in\n    `x_scale` argument:\n    \n    >>> popt, pcov = curve_fit(func, xdata, ydata, method = 'trf',\n    ...                        x_scale = [1000, 1, 1])\n    >>> popt\n    array([5.00000000e+05, 1.00000000e-02, 1.49999999e+01])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "558b4438561fb0b83c1f661cc638d595977bead4455818c67c54f319c38fa73a",
            "fields": [
                {
                    "id": "wsl0nq4c",
                    "encoding": "",
                    "name": "f",
                    "value": "",
                    "defaultValue": "",
                    "description": "The model function, f(x, ...). It must take the independent\nvariable as the first argument and the parameters to fit as\nseparate remaining arguments.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8tdlxu73",
                    "encoding": "",
                    "name": "xdata",
                    "value": "",
                    "defaultValue": "",
                    "description": "The independent variable where the data is measured.\nShould usually be an M-length sequence or an (k,M)-shaped array for\nfunctions with k predictors, and each element should be float\nconvertible if it is an array like object.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jutvxoin",
                    "encoding": "",
                    "name": "ydata",
                    "value": "",
                    "defaultValue": "",
                    "description": "The dependent data, a length M array - nominally ``f(xdata, ...)``.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_e40f91m",
                    "encoding": "",
                    "name": "p0",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial guess for the parameters (length N). If None, then the\ninitial values will all be 1 (if the number of parameters for the\nfunction can be determined using introspection, otherwise a\nValueError is raised).",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ox8toyv8",
                    "encoding": "",
                    "name": "sigma",
                    "value": "",
                    "defaultValue": "",
                    "description": "Determines the uncertainty in `ydata`. If we define residuals as\n``r = ydata - f(xdata, *popt)``, then the interpretation of `sigma`\ndepends on its number of dimensions:\n\n- A scalar or 1-D `sigma` should contain values of standard deviations of\n  errors in `ydata`. In this case, the optimized function is\n  ``chisq = sum((r / sigma) ** 2)``.\n\n- A 2-D `sigma` should contain the covariance matrix of\n  errors in `ydata`. In this case, the optimized function is\n  ``chisq = r.T @ inv(sigma) @ r``.\n\n  .. versionadded:: 0.19\n\nNone (default) is equivalent of 1-D `sigma` filled with ones.",
                    "type": "None or scalar or M-length sequence or MxM array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gofu_egw",
                    "encoding": "",
                    "name": "absolute_sigma",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, `sigma` is used in an absolute sense and the estimated parameter\ncovariance `pcov` reflects these absolute values.\n\nIf False (default), only the relative magnitudes of the `sigma` values matter.\nThe returned parameter covariance matrix `pcov` is based on scaling\n`sigma` by a constant factor. This constant is set by demanding that the\nreduced `chisq` for the optimal parameters `popt` when using the\n*scaled* `sigma` equals unity. In other words, `sigma` is scaled to\nmatch the sample variance of the residuals after the fit. Default is False.\nMathematically,\n``pcov(absolute_sigma=False) = pcov(absolute_sigma=True) * chisq(popt)/(M-N)``",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9y43wn9p",
                    "encoding": "",
                    "name": "check_finite",
                    "value": "",
                    "defaultValue": "",
                    "description": "If True, check that the input arrays do not contain nans of infs,\nand raise a ValueError if they do. Setting this parameter to\nFalse may silently produce nonsensical results if the input arrays\ndo contain nans. Default is True if `nan_policy` is not specified\nexplicitly and False otherwise.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lhip4gmu",
                    "encoding": "",
                    "name": "bounds",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Lower and upper bounds on parameters. Defaults to no bounds.\nThere are two ways to specify the bounds:\n\n- Instance of `Bounds` class.\n\n- 2-tuple of array_like: Each element of the tuple must be either\n  an array with the length equal to the number of parameters, or a\n  scalar (in which case the bound is taken to be the same for all\n  parameters). Use ``np.inf`` with an appropriate sign to disable\n  bounds on all or some parameters.",
                    "type": "builtins.tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zkxys5_4",
                    "encoding": "",
                    "name": "method",
                    "value": "",
                    "defaultValue": "",
                    "description": "Method to use for optimization. See `least_squares` for more details.\nDefault is 'lm' for unconstrained problems and 'trf' if `bounds` are\nprovided. The method 'lm' won't work when the number of observations\nis less than the number of variables, use 'trf' or 'dogbox' in this\ncase.\n\n.. versionadded:: 0.17",
                    "type": "{'lm', 'trf', 'dogbox'}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "coqcmtwr",
                    "encoding": "",
                    "name": "jac",
                    "value": "",
                    "defaultValue": "",
                    "description": "Function with signature ``jac(x, ...)`` which computes the Jacobian\nmatrix of the model function with respect to parameters as a dense\narray_like structure. It will be scaled according to provided `sigma`.\nIf None (default), the Jacobian will be estimated numerically.\nString keywords for 'trf' and 'dogbox' methods can be used to select\na finite difference scheme, see `least_squares`.\n\n.. versionadded:: 0.18",
                    "type": "callable, string or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gav_a1yw",
                    "encoding": "",
                    "name": "full_output",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, this function returns additional information: `infodict`,\n`mesg`, and `ier`.\n\n.. versionadded:: 1.9",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2dh449ok",
                    "encoding": "",
                    "name": "nan_policy",
                    "value": "",
                    "defaultValue": "",
                    "description": "Defines how to handle when input contains nan.\nThe following options are available (default is None):\n\n* 'raise': throws an error\n* 'omit': performs the calculations ignoring nan values\n* None: no special handling of NaNs is performed\n  (except what is done by check_finite); the behavior when NaNs\n  are present is implementation-dependent and may change.\n\nNote that if this value is specified explicitly (not None),\n`check_finite` will be set as False.\n\n.. versionadded:: 1.11",
                    "type": "{'raise', 'omit', None}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wdw734cn",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2ezuf6ms",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.curve_fit",
                    "defaultValue": "scipy.optimize.curve_fit",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jwuayj09",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r4g0aomq",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "0lqldo0l",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8z22lyj2",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize",
                    "defaultValue": "scipy.optimize",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i5pz1zxq",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5skv48oj",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "o785xb0j",
            "name": "optimize.diagbroyden",
            "description": "Find a root of a function, using diagonal Broyden Jacobian approximation.\n    \n    The Jacobian approximation is derived from previous iterations, by\n    retaining only the diagonal of Broyden matrices.\n    \n    .. warning::\n    \n       This algorithm may be useful for specific problems, but whether\n       it will work may depend strongly on the problem.\n    \n    Parameters\n    ----------\n    F : function(x) -> f\n        Function whose root to find; should take and return an array-like\n        object.\n    xin : array_like\n        Initial guess for the solution\n    alpha : float, optional\n        Initial guess for the Jacobian is (-1/alpha).\n    iter : int, optional\n        Number of iterations to make. If omitted (default), make as many\n        as required to meet tolerances.\n    verbose : bool, optional\n        Print status to stdout on every iteration.\n    maxiter : int, optional\n        Maximum number of iterations to make. If more are needed to\n        meet convergence, `NoConvergence` is raised.\n    f_tol : float, optional\n        Absolute tolerance (in max-norm) for the residual.\n        If omitted, default is 6e-6.\n    f_rtol : float, optional\n        Relative tolerance for the residual. If omitted, not used.\n    x_tol : float, optional\n        Absolute minimum step size, as determined from the Jacobian\n        approximation. If the step size is smaller than this, optimization\n        is terminated as successful. If omitted, not used.\n    x_rtol : float, optional\n        Relative minimum step size. If omitted, not used.\n    tol_norm : function(vector) -> scalar, optional\n        Norm to use in convergence check. Default is the maximum norm.\n    line_search : {None, 'armijo' (default), 'wolfe'}, optional\n        Which type of a line search to use to determine the step size in the\n        direction given by the Jacobian approximation. Defaults to 'armijo'.\n    callback : function, optional\n        Optional callback function. It is called on every iteration as\n        ``callback(x, f)`` where `x` is the current solution and `f`\n        the corresponding residual.\n    \n    Returns\n    -------\n    sol : ndarray\n        An array (of similar array type as `x0`) containing the final solution.\n    \n    Raises\n    ------\n    NoConvergence\n        When a solution was not found.\n    \n    See Also\n    --------\n    root : Interface to root finding algorithms for multivariate\n           functions. See ``method='diagbroyden'`` in particular.\n    \n    Examples\n    --------\n    The following functions define a system of nonlinear equations\n    \n    >>> def fun(x):\n    ...     return [x[0]  + 0.5 * (x[0] - x[1])**3 - 1.0,\n    ...             0.5 * (x[1] - x[0])**3 + x[1]]\n    \n    A solution can be obtained as follows.\n    \n    >>> from scipy import optimize\n    >>> sol = optimize.diagbroyden(fun, [0, 0])\n    >>> sol\n    array([0.84116403, 0.15883384])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9d8068984abe09973999b5e1ce75878679a580a2b98502ab586180c06cf3f79b",
            "fields": [
                {
                    "id": "t07p0o57",
                    "encoding": "",
                    "name": "F",
                    "value": "",
                    "defaultValue": "",
                    "description": "Function whose root to find; should take and return an array-like\nobject.",
                    "type": "function(x) -> f",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uds8n1uv",
                    "encoding": "",
                    "name": "xin",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial guess for the solution",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kp2hwk5z",
                    "encoding": "",
                    "name": "iter",
                    "value": "",
                    "defaultValue": "",
                    "description": "Number of iterations to make. If omitted (default), make as many\nas required to meet tolerances.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "50pws5n_",
                    "encoding": "",
                    "name": "alpha",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial guess for the Jacobian is (-1/alpha).",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "paumzi6a",
                    "encoding": "",
                    "name": "verbose",
                    "value": false,
                    "defaultValue": false,
                    "description": "Print status to stdout on every iteration.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l_ntzzhu",
                    "encoding": "",
                    "name": "maxiter",
                    "value": "",
                    "defaultValue": "",
                    "description": "Maximum number of iterations to make. If more are needed to\nmeet convergence, `NoConvergence` is raised.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uaw0kyjr",
                    "encoding": "",
                    "name": "f_tol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Absolute tolerance (in max-norm) for the residual.\nIf omitted, default is 6e-6.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "39dopl5h",
                    "encoding": "",
                    "name": "f_rtol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Relative tolerance for the residual. If omitted, not used.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_l2gxxli",
                    "encoding": "",
                    "name": "x_tol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Absolute minimum step size, as determined from the Jacobian\napproximation. If the step size is smaller than this, optimization\nis terminated as successful. If omitted, not used.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0oy0pc79",
                    "encoding": "",
                    "name": "x_rtol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Relative minimum step size. If omitted, not used.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ljhy0tx6",
                    "encoding": "",
                    "name": "tol_norm",
                    "value": "",
                    "defaultValue": "",
                    "description": "Norm to use in convergence check. Default is the maximum norm.",
                    "type": "function(vector) -> scalar",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s8nhxov2",
                    "encoding": "",
                    "name": "line_search",
                    "value": "armijo",
                    "defaultValue": "armijo",
                    "description": "Which type of a line search to use to determine the step size in the\ndirection given by the Jacobian approximation. Defaults to 'armijo'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4fihpweb",
                    "encoding": "",
                    "name": "callback",
                    "value": "",
                    "defaultValue": "",
                    "description": "Optional callback function. It is called on every iteration as\n``callback(x, f)`` where `x` is the current solution and `f`\nthe corresponding residual.",
                    "type": "function",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mx2i4mah",
                    "encoding": "",
                    "name": "kw",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ak4v6afz",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.diagbroyden",
                    "defaultValue": "scipy.optimize.diagbroyden",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3erl16ax",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kk5fdrsv",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "f4q37ugd",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x92qxcs7",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize",
                    "defaultValue": "scipy.optimize",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ciq0aj4y",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6fiwmgps",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "a6o5sq6w",
            "name": "optimize.differential_evolution",
            "description": "Finds the global minimum of a multivariate function.\n    \n    The differential evolution method [1]_ is stochastic in nature. It does\n    not use gradient methods to find the minimum, and can search large areas\n    of candidate space, but often requires larger numbers of function\n    evaluations than conventional gradient-based techniques.\n    \n    The algorithm is due to Storn and Price [2]_.\n    \n    Parameters\n    ----------\n    func : callable\n        The objective function to be minimized. Must be in the form\n        ``f(x, *args)``, where ``x`` is the argument in the form of a 1-D array\n        and ``args`` is a tuple of any additional fixed parameters needed to\n        completely specify the function. The number of parameters, N, is equal\n        to ``len(x)``.\n    bounds : sequence or `Bounds`\n        Bounds for variables. There are two ways to specify the bounds:\n        \n        1. Instance of `Bounds` class.\n        2. ``(min, max)`` pairs for each element in ``x``, defining the\n           finite lower and upper bounds for the optimizing argument of\n           `func`.\n        \n        The total number of bounds is used to determine the number of\n        parameters, N. If there are parameters whose bounds are equal the total\n        number of free parameters is ``N - N_equal``.\n    args : tuple, optional\n        Any additional fixed parameters needed to\n        completely specify the objective function.\n    strategy : {str, callable}, optional\n        The differential evolution strategy to use. Should be one of:\n        \n        - 'best1bin'\n        - 'best1exp'\n        - 'rand1bin'\n        - 'rand1exp'\n        - 'rand2bin'\n        - 'rand2exp'\n        - 'randtobest1bin'\n        - 'randtobest1exp'\n        - 'currenttobest1bin'\n        - 'currenttobest1exp'\n        - 'best2exp'\n        - 'best2bin'\n        \n        The default is 'best1bin'. Strategies that may be implemented are\n        outlined in 'Notes'.\n        Alternatively the differential evolution strategy can be customized by\n        providing a callable that constructs a trial vector. The callable must\n        have the form ``strategy(candidate: int, population: np.ndarray, rng=None)``,\n        where ``candidate`` is an integer specifying which entry of the\n        population is being evolved, ``population`` is an array of shape\n        ``(S, N)`` containing all the population members (where S is the\n        total population size), and ``rng`` is the random number generator\n        being used within the solver.\n        ``candidate`` will be in the range ``[0, S)``.\n        ``strategy`` must return a trial vector with shape ``(N,)``. The\n        fitness of this trial vector is compared against the fitness of\n        ``population[candidate]``.\n        \n        .. versionchanged:: 1.12.0\n            Customization of evolution strategy via a callable.\n    maxiter : int, optional\n        The maximum number of generations over which the entire population is\n        evolved. The maximum number of function evaluations (with no polishing)\n        is: ``(maxiter + 1) * popsize * (N - N_equal)``\n    popsize : int, optional\n        A multiplier for setting the total population size. The population has\n        ``popsize * (N - N_equal)`` individuals. This keyword is overridden if\n        an initial population is supplied via the `init` keyword. When using\n        ``init='sobol'`` the population size is calculated as the next power\n        of 2 after ``popsize * (N - N_equal)``.\n    tol : float, optional\n        Relative tolerance for convergence, the solving stops when\n        ``np.std(population_energies) <= atol + tol * np.abs(np.mean(population_energies))``,\n        where and `atol` and `tol` are the absolute and relative tolerance\n        respectively.\n    mutation : float or tuple(float, float), optional\n        The mutation constant. In the literature this is also known as\n        differential weight, being denoted by :math:`F`.\n        If specified as a float it should be in the range [0, 2).\n        If specified as a tuple ``(min, max)`` dithering is employed. Dithering\n        randomly changes the mutation constant on a generation by generation\n        basis. The mutation constant for that generation is taken from\n        ``U[min, max)``. Dithering can help speed convergence significantly.\n        Increasing the mutation constant increases the search radius, but will\n        slow down convergence.\n    recombination : float, optional\n        The recombination constant, should be in the range [0, 1]. In the\n        literature this is also known as the crossover probability, being\n        denoted by CR. Increasing this value allows a larger number of mutants\n        to progress into the next generation, but at the risk of population\n        stability.\n    rng : {None, int, `numpy.random.Generator`}, optional\n        If `rng` is passed by keyword, types other than `numpy.random.Generator` are\n        passed to `numpy.random.default_rng` to instantiate a ``Generator``.\n        If `rng` is already a ``Generator`` instance, then the provided instance is\n        used. Specify `rng` for repeatable function behavior.\n    \n        If this argument is passed by position or `seed` is passed by keyword,\n        legacy behavior for the argument `seed` applies:\n    \n        - If `seed` is None (or `numpy.random`), the `numpy.random.RandomState`\n          singleton is used.\n        - If `seed` is an int, a new ``RandomState`` instance is used,\n          seeded with `seed`.\n        - If `seed` is already a ``Generator`` or ``RandomState`` instance then\n          that instance is used.\n    \n        .. versionchanged:: 1.15.0\n            As part of the `SPEC-007 <https://scientific-python.org/specs/spec-0007/>`_\n            transition from use of `numpy.random.RandomState` to\n            `numpy.random.Generator`, this keyword was changed from `seed` to `rng`.\n            For an interim period, both keywords will continue to work, although only one\n            may be specified at a time. After the interim period, function calls using the\n            `seed` keyword will emit warnings. The behavior of both `seed` and\n            `rng` are outlined above, but only the `rng` keyword should be used in new code.\n            \n    disp : bool, optional\n        Prints the evaluated `func` at every iteration.\n    callback : callable, optional\n        A callable called after each iteration. Has the signature::\n        \n            callback(intermediate_result: OptimizeResult)\n        \n        where ``intermediate_result`` is a keyword parameter containing an\n        `OptimizeResult` with attributes ``x`` and ``fun``, the best solution\n        found so far and the objective function. Note that the name\n        of the parameter must be ``intermediate_result`` for the callback\n        to be passed an `OptimizeResult`.\n        \n        The callback also supports a signature like::\n        \n            callback(x, convergence: float=val)\n        \n        ``val`` represents the fractional value of the population convergence.\n        When ``val`` is greater than ``1.0``, the function halts.\n        \n        Introspection is used to determine which of the signatures is invoked.\n        \n        Global minimization will halt if the callback raises ``StopIteration``\n        or returns ``True``; any polishing is still carried out.\n        \n        .. versionchanged:: 1.12.0\n            callback accepts the ``intermediate_result`` keyword.\n    polish : bool, optional\n        If True (default), then `scipy.optimize.minimize` with the `L-BFGS-B`\n        method is used to polish the best population member at the end, which\n        can improve the minimization slightly. If a constrained problem is\n        being studied then the `trust-constr` method is used instead. For large\n        problems with many constraints, polishing can take a long time due to\n        the Jacobian computations.\n        \n        .. versionchanged:: 1.15.0\n            If `workers` is specified then the map-like callable that wraps\n            `func` is supplied to `minimize` instead of it using `func`\n            directly. This allows the caller to control how and where the\n            invocations actually run.\n    init : str or array-like, optional\n        Specify which type of population initialization is performed. Should be\n        one of:\n        \n        - 'latinhypercube'\n        - 'sobol'\n        - 'halton'\n        - 'random'\n        - array specifying the initial population. The array should have\n          shape ``(S, N)``, where S is the total population size and N is\n          the number of parameters.\n        \n        `init` is clipped to `bounds` before use.\n        \n        The default is 'latinhypercube'. Latin Hypercube sampling tries to\n        maximize coverage of the available parameter space.\n        \n        'sobol' and 'halton' are superior alternatives and maximize even more\n        the parameter space. 'sobol' will enforce an initial population\n        size which is calculated as the next power of 2 after\n        ``popsize * (N - N_equal)``. 'halton' has no requirements but is a bit\n        less efficient. See `scipy.stats.qmc` for more details.\n        \n        'random' initializes the population randomly - this has the drawback\n        that clustering can occur, preventing the whole of parameter space\n        being covered. Use of an array to specify a population could be used,\n        for example, to create a tight bunch of initial guesses in an location\n        where the solution is known to exist, thereby reducing time for\n        convergence.\n    atol : float, optional\n        Absolute tolerance for convergence, the solving stops when\n        ``np.std(pop) <= atol + tol * np.abs(np.mean(population_energies))``,\n        where and `atol` and `tol` are the absolute and relative tolerance\n        respectively.\n    updating : {'immediate', 'deferred'}, optional\n        If ``'immediate'``, the best solution vector is continuously updated\n        within a single generation [4]_. This can lead to faster convergence as\n        trial vectors can take advantage of continuous improvements in the best\n        solution.\n        With ``'deferred'``, the best solution vector is updated once per\n        generation. Only ``'deferred'`` is compatible with parallelization or\n        vectorization, and the `workers` and `vectorized` keywords can\n        over-ride this option.\n        \n        .. versionadded:: 1.2.0\n    workers : int or map-like callable, optional\n        If `workers` is an int the population is subdivided into `workers`\n        sections and evaluated in parallel\n        (uses `multiprocessing.Pool <multiprocessing>`).\n        Supply -1 to use all available CPU cores.\n        Alternatively supply a map-like callable, such as\n        `multiprocessing.Pool.map` for evaluating the population in parallel.\n        This evaluation is carried out as ``workers(func, iterable)``.\n        This option will override the `updating` keyword to\n        ``updating='deferred'`` if ``workers != 1``.\n        This option overrides the `vectorized` keyword if ``workers != 1``.\n        Requires that `func` be pickleable.\n        \n        .. versionadded:: 1.2.0\n    constraints : {NonLinearConstraint, LinearConstraint, Bounds}\n        Constraints on the solver, over and above those applied by the `bounds`\n        kwd. Uses the approach by Lampinen [5]_.\n        \n        .. versionadded:: 1.4.0\n    x0 : None or array-like, optional\n        Provides an initial guess to the minimization. Once the population has\n        been initialized this vector replaces the first (best) member. This\n        replacement is done even if `init` is given an initial population.\n        ``x0.shape == (N,)``.\n        \n        .. versionadded:: 1.7.0\n    integrality : 1-D array, optional\n        For each decision variable, a boolean value indicating whether the\n        decision variable is constrained to integer values. The array is\n        broadcast to ``(N,)``.\n        If any decision variables are constrained to be integral, they will not\n        be changed during polishing.\n        Only integer values lying between the lower and upper bounds are used.\n        If there are no integer values lying between the bounds then a\n        `ValueError` is raised.\n        \n        .. versionadded:: 1.9.0\n    vectorized : bool, optional\n        If ``vectorized is True``, `func` is sent an `x` array with\n        ``x.shape == (N, S)``, and is expected to return an array of shape\n        ``(S,)``, where `S` is the number of solution vectors to be calculated.\n        If constraints are applied, each of the functions used to construct\n        a `Constraint` object should accept an `x` array with\n        ``x.shape == (N, S)``, and return an array of shape ``(M, S)``, where\n        `M` is the number of constraint components.\n        This option is an alternative to the parallelization offered by\n        `workers`, and may help in optimization speed by reducing interpreter\n        overhead from multiple function calls. This keyword is ignored if\n        ``workers != 1``.\n        This option will override the `updating` keyword to\n        ``updating='deferred'``.\n        See the notes section for further discussion on when to use\n        ``'vectorized'``, and when to use ``'workers'``.\n        \n        .. versionadded:: 1.9.0\n    \n    Returns\n    -------\n    res : OptimizeResult\n        The optimization result represented as a `OptimizeResult` object.\n        Important attributes are: ``x`` the solution array, ``success`` a\n        Boolean flag indicating if the optimizer exited successfully,\n        ``message`` which describes the cause of the termination,\n        ``population`` the solution vectors present in the population, and\n        ``population_energies`` the value of the objective function for each\n        entry in ``population``.\n        See `OptimizeResult` for a description of other attributes. If `polish`\n        was employed, and a lower minimum was obtained by the polishing, then\n        OptimizeResult also contains the ``jac`` attribute.\n        If the eventual solution does not satisfy the applied constraints\n        ``success`` will be `False`.\n    \n    Notes\n    -----\n    Differential evolution is a stochastic population based method that is\n    useful for global optimization problems. At each pass through the\n    population the algorithm mutates each candidate solution by mixing with\n    other candidate solutions to create a trial candidate. There are several\n    strategies [3]_ for creating trial candidates, which suit some problems\n    more than others. The 'best1bin' strategy is a good starting point for\n    many systems. In this strategy two members of the population are randomly\n    chosen. Their difference is used to mutate the best member (the 'best' in\n    'best1bin'), :math:`x_0`, so far:\n    \n    .. math::\n    \n        b' = x_0 + F \\cdot (x_{r_0} - x_{r_1})\n    \n    where :math:`F` is the `mutation` parameter.\n    A trial vector is then constructed. Starting with a randomly chosen ith\n    parameter the trial is sequentially filled (in modulo) with parameters\n    from ``b'`` or the original candidate. The choice of whether to use ``b'``\n    or the original candidate is made with a binomial distribution (the 'bin'\n    in 'best1bin') - a random number in [0, 1) is generated. If this number is\n    less than the `recombination` constant then the parameter is loaded from\n    ``b'``, otherwise it is loaded from the original candidate. The final\n    parameter is always loaded from ``b'``. Once the trial candidate is built\n    its fitness is assessed. If the trial is better than the original candidate\n    then it takes its place. If it is also better than the best overall\n    candidate it also replaces that.\n    \n    The other strategies available are outlined in Qiang and\n    Mitchell (2014) [3]_.\n    \n    - ``rand1`` : :math:`b' = x_{r_0} + F \\cdot (x_{r_1} - x_{r_2})`\n    - ``rand2`` : :math:`b' = x_{r_0} + F \\cdot (x_{r_1} + x_{r_2} - x_{r_3} - x_{r_4})`\n    - ``best1`` : :math:`b' = x_0 + F \\cdot (x_{r_0} - x_{r_1})`\n    - ``best2`` : :math:`b' = x_0 + F \\cdot (x_{r_0} + x_{r_1} - x_{r_2} - x_{r_3})`\n    - ``currenttobest1`` : :math:`b' = x_i + F \\cdot (x_0 - x_i + x_{r_0} - x_{r_1})`\n    - ``randtobest1`` : :math:`b' = x_{r_0} + F \\cdot (x_0 - x_{r_0} + x_{r_1} - x_{r_2})`\n    \n    where the integers :math:`r_0, r_1, r_2, r_3, r_4` are chosen randomly\n    from the interval [0, NP) with `NP` being the total population size and\n    the original candidate having index `i`. The user can fully customize the\n    generation of the trial candidates by supplying a callable to ``strategy``.\n    \n    To improve your chances of finding a global minimum use higher `popsize`\n    values, with higher `mutation` and (dithering), but lower `recombination`\n    values. This has the effect of widening the search radius, but slowing\n    convergence.\n    \n    By default the best solution vector is updated continuously within a single\n    iteration (``updating='immediate'``). This is a modification [4]_ of the\n    original differential evolution algorithm which can lead to faster\n    convergence as trial vectors can immediately benefit from improved\n    solutions. To use the original Storn and Price behaviour, updating the best\n    solution once per iteration, set ``updating='deferred'``.\n    The ``'deferred'`` approach is compatible with both parallelization and\n    vectorization (``'workers'`` and ``'vectorized'`` keywords). These may\n    improve minimization speed by using computer resources more efficiently.\n    The ``'workers'`` distribute calculations over multiple processors. By\n    default the Python `multiprocessing` module is used, but other approaches\n    are also possible, such as the Message Passing Interface (MPI) used on\n    clusters [6]_ [7]_. The overhead from these approaches (creating new\n    Processes, etc) may be significant, meaning that computational speed\n    doesn't necessarily scale with the number of processors used.\n    Parallelization is best suited to computationally expensive objective\n    functions. If the objective function is less expensive, then\n    ``'vectorized'`` may aid by only calling the objective function once per\n    iteration, rather than multiple times for all the population members; the\n    interpreter overhead is reduced.\n    \n    .. versionadded:: 0.15.0\n    \n    References\n    ----------\n    .. [1] Differential evolution, Wikipedia,\n           http://en.wikipedia.org/wiki/Differential_evolution\n    .. [2] Storn, R and Price, K, Differential Evolution - a Simple and\n           Efficient Heuristic for Global Optimization over Continuous Spaces,\n           Journal of Global Optimization, 1997, 11, 341 - 359.\n    .. [3] Qiang, J., Mitchell, C., A Unified Differential Evolution Algorithm\n            for Global Optimization, 2014, https://www.osti.gov/servlets/purl/1163659\n    .. [4] Wormington, M., Panaccione, C., Matney, K. M., Bowen, D. K., -\n           Characterization of structures from X-ray scattering data using\n           genetic algorithms, Phil. Trans. R. Soc. Lond. A, 1999, 357,\n           2827-2848\n    .. [5] Lampinen, J., A constraint handling approach for the differential\n           evolution algorithm. Proceedings of the 2002 Congress on\n           Evolutionary Computation. CEC'02 (Cat. No. 02TH8600). Vol. 2. IEEE,\n           2002.\n    .. [6] https://mpi4py.readthedocs.io/en/stable/\n    .. [7] https://schwimmbad.readthedocs.io/en/latest/\n    \n    Examples\n    --------\n    Let us consider the problem of minimizing the Rosenbrock function. This\n    function is implemented in `rosen` in `scipy.optimize`.\n    \n    >>> import numpy as np\n    >>> from scipy.optimize import rosen, differential_evolution\n    >>> bounds = [(0,2), (0, 2), (0, 2), (0, 2), (0, 2)]\n    >>> result = differential_evolution(rosen, bounds)\n    >>> result.x, result.fun\n    (array([1., 1., 1., 1., 1.]), 1.9216496320061384e-19)\n    \n    Now repeat, but with parallelization.\n    \n    >>> result = differential_evolution(rosen, bounds, updating='deferred',\n    ...                                 workers=2)\n    >>> result.x, result.fun\n    (array([1., 1., 1., 1., 1.]), 1.9216496320061384e-19)\n    \n    Let's do a constrained minimization.\n    \n    >>> from scipy.optimize import LinearConstraint, Bounds\n    \n    We add the constraint that the sum of ``x[0]`` and ``x[1]`` must be less\n    than or equal to 1.9.  This is a linear constraint, which may be written\n    ``A @ x <= 1.9``, where ``A = array([[1, 1]])``.  This can be encoded as\n    a `LinearConstraint` instance:\n    \n    >>> lc = LinearConstraint([[1, 1]], -np.inf, 1.9)\n    \n    Specify limits using a `Bounds` object.\n    \n    >>> bounds = Bounds([0., 0.], [2., 2.])\n    >>> result = differential_evolution(rosen, bounds, constraints=lc,\n    ...                                 rng=1)\n    >>> result.x, result.fun\n    (array([0.96632622, 0.93367155]), 0.0011352416852625719)\n    \n    Next find the minimum of the Ackley function\n    (https://en.wikipedia.org/wiki/Test_functions_for_optimization).\n    \n    >>> def ackley(x):\n    ...     arg1 = -0.2 * np.sqrt(0.5 * (x[0] ** 2 + x[1] ** 2))\n    ...     arg2 = 0.5 * (np.cos(2. * np.pi * x[0]) + np.cos(2. * np.pi * x[1]))\n    ...     return -20. * np.exp(arg1) - np.exp(arg2) + 20. + np.e\n    >>> bounds = [(-5, 5), (-5, 5)]\n    >>> result = differential_evolution(ackley, bounds, rng=1)\n    >>> result.x, result.fun\n    (array([0., 0.]), 4.440892098500626e-16)\n    \n    The Ackley function is written in a vectorized manner, so the\n    ``'vectorized'`` keyword can be employed. Note the reduced number of\n    function evaluations.\n    \n    >>> result = differential_evolution(\n    ...     ackley, bounds, vectorized=True, updating='deferred', rng=1\n    ... )\n    >>> result.x, result.fun\n    (array([0., 0.]), 4.440892098500626e-16)\n    \n    The following custom strategy function mimics 'best1bin':\n    \n    >>> def custom_strategy_fn(candidate, population, rng=None):\n    ...     parameter_count = population.shape(-1)\n    ...     mutation, recombination = 0.7, 0.9\n    ...     trial = np.copy(population[candidate])\n    ...     fill_point = rng.choice(parameter_count)\n    ...\n    ...     pool = np.arange(len(population))\n    ...     rng.shuffle(pool)\n    ...\n    ...     # two unique random numbers that aren't the same, and\n    ...     # aren't equal to candidate.\n    ...     idxs = []\n    ...     while len(idxs) < 2 and len(pool) > 0:\n    ...         idx = pool[0]\n    ...         pool = pool[1:]\n    ...         if idx != candidate:\n    ...             idxs.append(idx)\n    ...\n    ...     r0, r1 = idxs[:2]\n    ...\n    ...     bprime = (population[0] + mutation *\n    ...               (population[r0] - population[r1]))\n    ...\n    ...     crossovers = rng.uniform(size=parameter_count)\n    ...     crossovers = crossovers < recombination\n    ...     crossovers[fill_point] = True\n    ...     trial = np.where(crossovers, bprime, trial)\n    ...     return trial",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5aa5fc390dd7d7423af251f07c44a33c5efe8004dbc72ac08b20f7b57b6c564b",
            "fields": [
                {
                    "id": "e346bd8y",
                    "encoding": "",
                    "name": "func",
                    "value": "",
                    "defaultValue": "",
                    "description": "The objective function to be minimized. Must be in the form\n``f(x, *args)``, where ``x`` is the argument in the form of a 1-D array\nand ``args`` is a tuple of any additional fixed parameters needed to\ncompletely specify the function. The number of parameters, N, is equal\nto ``len(x)``.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rvowov4o",
                    "encoding": "",
                    "name": "bounds",
                    "value": "",
                    "defaultValue": "",
                    "description": "Bounds for variables. There are two ways to specify the bounds:\n\n1. Instance of `Bounds` class.\n2. ``(min, max)`` pairs for each element in ``x``, defining the\n   finite lower and upper bounds for the optimizing argument of\n   `func`.\n\nThe total number of bounds is used to determine the number of\nparameters, N. If there are parameters whose bounds are equal the total\nnumber of free parameters is ``N - N_equal``.",
                    "type": "sequence or Bounds",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zn3_wzth",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Any additional fixed parameters needed to\ncompletely specify the objective function.",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_0skded8",
                    "encoding": "",
                    "name": "strategy",
                    "value": "best1bin",
                    "defaultValue": "best1bin",
                    "description": "The differential evolution strategy to use. Should be one of:\n\n- 'best1bin'\n- 'best1exp'\n- 'rand1bin'\n- 'rand1exp'\n- 'rand2bin'\n- 'rand2exp'\n- 'randtobest1bin'\n- 'randtobest1exp'\n- 'currenttobest1bin'\n- 'currenttobest1exp'\n- 'best2exp'\n- 'best2bin'\n\nThe default is 'best1bin'. Strategies that may be implemented are\noutlined in 'Notes'.\nAlternatively the differential evolution strategy can be customized by\nproviding a callable that constructs a trial vector. The callable must\nhave the form ``strategy(candidate: int, population: np.ndarray, rng=None)``,\nwhere ``candidate`` is an integer specifying which entry of the\npopulation is being evolved, ``population`` is an array of shape\n``(S, N)`` containing all the population members (where S is the\ntotal population size), and ``rng`` is the random number generator\nbeing used within the solver.\n``candidate`` will be in the range ``[0, S)``.\n``strategy`` must return a trial vector with shape ``(N,)``. The\nfitness of this trial vector is compared against the fitness of\n``population[candidate]``.\n\n.. versionchanged:: 1.12.0\n    Customization of evolution strategy via a callable.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rxd57g5v",
                    "encoding": "",
                    "name": "maxiter",
                    "value": 1000,
                    "defaultValue": 1000,
                    "description": "The maximum number of generations over which the entire population is\nevolved. The maximum number of function evaluations (with no polishing)\nis: ``(maxiter + 1) * popsize * (N - N_equal)``",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w02lvwyh",
                    "encoding": "",
                    "name": "popsize",
                    "value": 15,
                    "defaultValue": 15,
                    "description": "A multiplier for setting the total population size. The population has\n``popsize * (N - N_equal)`` individuals. This keyword is overridden if\nan initial population is supplied via the `init` keyword. When using\n``init='sobol'`` the population size is calculated as the next power\nof 2 after ``popsize * (N - N_equal)``.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z_85lexw",
                    "encoding": "",
                    "name": "tol",
                    "value": 0.01,
                    "defaultValue": 0.01,
                    "description": "Relative tolerance for convergence, the solving stops when\n``np.std(population_energies) <= atol + tol * np.abs(np.mean(population_energies))``,\nwhere and `atol` and `tol` are the absolute and relative tolerance\nrespectively.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wiu1elro",
                    "encoding": "",
                    "name": "mutation",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "The mutation constant. In the literature this is also known as\ndifferential weight, being denoted by :math:`F`.\nIf specified as a float it should be in the range [0, 2).\nIf specified as a tuple ``(min, max)`` dithering is employed. Dithering\nrandomly changes the mutation constant on a generation by generation\nbasis. The mutation constant for that generation is taken from\n``U[min, max)``. Dithering can help speed convergence significantly.\nIncreasing the mutation constant increases the search radius, but will\nslow down convergence.",
                    "type": "builtins.tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ymqzz4ha",
                    "encoding": "",
                    "name": "recombination",
                    "value": 0.7,
                    "defaultValue": 0.7,
                    "description": "The recombination constant, should be in the range [0, 1]. In the\nliterature this is also known as the crossover probability, being\ndenoted by CR. Increasing this value allows a larger number of mutants\nto progress into the next generation, but at the risk of population\nstability.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rr_swtup",
                    "encoding": "",
                    "name": "rng",
                    "value": "",
                    "defaultValue": "",
                    "description": "If `rng` is passed by keyword, types other than `numpy.random.Generator` are\npassed to `numpy.random.default_rng` to instantiate a ``Generator``.\nIf `rng` is already a ``Generator`` instance, then the provided instance is\nused. Specify `rng` for repeatable function behavior.\n\nIf this argument is passed by position or `seed` is passed by keyword,\nlegacy behavior for the argument `seed` applies:\n\n- If `seed` is None (or `numpy.random`), the `numpy.random.RandomState`\n  singleton is used.\n- If `seed` is an int, a new ``RandomState`` instance is used,\n  seeded with `seed`.\n- If `seed` is already a ``Generator`` or ``RandomState`` instance then\n  that instance is used.\n\n.. versionchanged:: 1.15.0\n    As part of the `SPEC-007 <https://scientific-python.org/specs/spec-0007/>`_\n    transition from use of `numpy.random.RandomState` to\n    `numpy.random.Generator`, this keyword was changed from `seed` to `rng`.\n    For an interim period, both keywords will continue to work, although only one\n    may be specified at a time. After the interim period, function calls using the\n    `seed` keyword will emit warnings. The behavior of both `seed` and\n    `rng` are outlined above, but only the `rng` keyword should be used in new code.",
                    "type": "{None, int, numpy.random.Generator}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uc_g7hf8",
                    "encoding": "",
                    "name": "callback",
                    "value": "",
                    "defaultValue": "",
                    "description": "A callable called after each iteration. Has the signature::\n\n    callback(intermediate_result: OptimizeResult)\n\nwhere ``intermediate_result`` is a keyword parameter containing an\n`OptimizeResult` with attributes ``x`` and ``fun``, the best solution\nfound so far and the objective function. Note that the name\nof the parameter must be ``intermediate_result`` for the callback\nto be passed an `OptimizeResult`.\n\nThe callback also supports a signature like::\n\n    callback(x, convergence: float=val)\n\n``val`` represents the fractional value of the population convergence.\nWhen ``val`` is greater than ``1.0``, the function halts.\n\nIntrospection is used to determine which of the signatures is invoked.\n\nGlobal minimization will halt if the callback raises ``StopIteration``\nor returns ``True``; any polishing is still carried out.\n\n.. versionchanged:: 1.12.0\n    callback accepts the ``intermediate_result`` keyword.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hlv7z3q4",
                    "encoding": "",
                    "name": "disp",
                    "value": false,
                    "defaultValue": false,
                    "description": "Prints the evaluated `func` at every iteration.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e1ik27f2",
                    "encoding": "",
                    "name": "polish",
                    "value": true,
                    "defaultValue": true,
                    "description": "If True (default), then `scipy.optimize.minimize` with the `L-BFGS-B`\nmethod is used to polish the best population member at the end, which\ncan improve the minimization slightly. If a constrained problem is\nbeing studied then the `trust-constr` method is used instead. For large\nproblems with many constraints, polishing can take a long time due to\nthe Jacobian computations.\n\n.. versionchanged:: 1.15.0\n    If `workers` is specified then the map-like callable that wraps\n    `func` is supplied to `minimize` instead of it using `func`\n    directly. This allows the caller to control how and where the\n    invocations actually run.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xi6qs0q0",
                    "encoding": "",
                    "name": "init",
                    "value": "latinhypercube",
                    "defaultValue": "latinhypercube",
                    "description": "Specify which type of population initialization is performed. Should be\none of:\n\n- 'latinhypercube'\n- 'sobol'\n- 'halton'\n- 'random'\n- array specifying the initial population. The array should have\n  shape ``(S, N)``, where S is the total population size and N is\n  the number of parameters.\n\n`init` is clipped to `bounds` before use.\n\nThe default is 'latinhypercube'. Latin Hypercube sampling tries to\nmaximize coverage of the available parameter space.\n\n'sobol' and 'halton' are superior alternatives and maximize even more\nthe parameter space. 'sobol' will enforce an initial population\nsize which is calculated as the next power of 2 after\n``popsize * (N - N_equal)``. 'halton' has no requirements but is a bit\nless efficient. See `scipy.stats.qmc` for more details.\n\n'random' initializes the population randomly - this has the drawback\nthat clustering can occur, preventing the whole of parameter space\nbeing covered. Use of an array to specify a population could be used,\nfor example, to create a tight bunch of initial guesses in an location\nwhere the solution is known to exist, thereby reducing time for\nconvergence.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yr14txtr",
                    "encoding": "",
                    "name": "atol",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Absolute tolerance for convergence, the solving stops when\n``np.std(pop) <= atol + tol * np.abs(np.mean(population_energies))``,\nwhere and `atol` and `tol` are the absolute and relative tolerance\nrespectively.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ghhplbbd",
                    "encoding": "",
                    "name": "updating",
                    "value": "immediate",
                    "defaultValue": "immediate",
                    "description": "If ``'immediate'``, the best solution vector is continuously updated\nwithin a single generation [4]_. This can lead to faster convergence as\ntrial vectors can take advantage of continuous improvements in the best\nsolution.\nWith ``'deferred'``, the best solution vector is updated once per\ngeneration. Only ``'deferred'`` is compatible with parallelization or\nvectorization, and the `workers` and `vectorized` keywords can\nover-ride this option.\n\n.. versionadded:: 1.2.0",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "25v2uh9b",
                    "encoding": "",
                    "name": "workers",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "If `workers` is an int the population is subdivided into `workers`\nsections and evaluated in parallel\n(uses `multiprocessing.Pool <multiprocessing>`).\nSupply -1 to use all available CPU cores.\nAlternatively supply a map-like callable, such as\n`multiprocessing.Pool.map` for evaluating the population in parallel.\nThis evaluation is carried out as ``workers(func, iterable)``.\nThis option will override the `updating` keyword to\n``updating='deferred'`` if ``workers != 1``.\nThis option overrides the `vectorized` keyword if ``workers != 1``.\nRequires that `func` be pickleable.\n\n.. versionadded:: 1.2.0",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kk_ygm5q",
                    "encoding": "",
                    "name": "constraints",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Constraints on the solver, over and above those applied by the `bounds`\nkwd. Uses the approach by Lampinen [5]_.\n\n.. versionadded:: 1.4.0",
                    "type": "builtins.tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vum81ql3",
                    "encoding": "",
                    "name": "x0",
                    "value": "",
                    "defaultValue": "",
                    "description": "Provides an initial guess to the minimization. Once the population has\nbeen initialized this vector replaces the first (best) member. This\nreplacement is done even if `init` is given an initial population.\n``x0.shape == (N,)``.\n\n.. versionadded:: 1.7.0",
                    "type": "None or array-like",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lddflt8q",
                    "encoding": "",
                    "name": "integrality",
                    "value": "",
                    "defaultValue": "",
                    "description": "For each decision variable, a boolean value indicating whether the\ndecision variable is constrained to integer values. The array is\nbroadcast to ``(N,)``.\nIf any decision variables are constrained to be integral, they will not\nbe changed during polishing.\nOnly integer values lying between the lower and upper bounds are used.\nIf there are no integer values lying between the bounds then a\n`ValueError` is raised.\n\n.. versionadded:: 1.9.0",
                    "type": "1-D array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j09aug4s",
                    "encoding": "",
                    "name": "vectorized",
                    "value": false,
                    "defaultValue": false,
                    "description": "If ``vectorized is True``, `func` is sent an `x` array with\n``x.shape == (N, S)``, and is expected to return an array of shape\n``(S,)``, where `S` is the number of solution vectors to be calculated.\nIf constraints are applied, each of the functions used to construct\na `Constraint` object should accept an `x` array with\n``x.shape == (N, S)``, and return an array of shape ``(M, S)``, where\n`M` is the number of constraint components.\nThis option is an alternative to the parallelization offered by\n`workers`, and may help in optimization speed by reducing interpreter\noverhead from multiple function calls. This keyword is ignored if\n``workers != 1``.\nThis option will override the `updating` keyword to\n``updating='deferred'``.\nSee the notes section for further discussion on when to use\n``'vectorized'``, and when to use ``'workers'``.\n\n.. versionadded:: 1.9.0",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "whjaagb6",
                    "encoding": "",
                    "name": "seed",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8q9xbn5u",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.differential_evolution",
                    "defaultValue": "scipy.optimize.differential_evolution",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i9d_s_ms",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wfevfy52",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "onkc54vc",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y8k9we89",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize",
                    "defaultValue": "scipy.optimize",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0zl1fnwv",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tsm6hh3h",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "yzylrz79",
            "name": "optimize.direct",
            "description": "Finds the global minimum of a function using the\n    DIRECT algorithm.\n    \n    Parameters\n    ----------\n    func : callable\n        The objective function to be minimized.\n        ``func(x, *args) -> float``\n        where ``x`` is an 1-D array with shape (n,) and ``args`` is a tuple of\n        the fixed parameters needed to completely specify the function.\n    bounds : sequence or `Bounds`\n        Bounds for variables. There are two ways to specify the bounds:\n    \n        1. Instance of `Bounds` class.\n        2. ``(min, max)`` pairs for each element in ``x``.\n    \n    args : tuple, optional\n        Any additional fixed parameters needed to\n        completely specify the objective function.\n    eps : float, optional\n        Minimal required difference of the objective function values\n        between the current best hyperrectangle and the next potentially\n        optimal hyperrectangle to be divided. In consequence, `eps` serves as a\n        tradeoff between local and global search: the smaller, the more local\n        the search becomes. Default is 1e-4.\n    maxfun : int or None, optional\n        Approximate upper bound on objective function evaluations.\n        If `None`, will be automatically set to ``1000 * N`` where ``N``\n        represents the number of dimensions. Will be capped if necessary to\n        limit DIRECT's RAM usage to app. 1GiB. This will only occur for very\n        high dimensional problems and excessive `max_fun`. Default is `None`.\n    maxiter : int, optional\n        Maximum number of iterations. Default is 1000.\n    locally_biased : bool, optional\n        If `True` (default), use the locally biased variant of the\n        algorithm known as DIRECT_L. If `False`, use the original unbiased\n        DIRECT algorithm. For hard problems with many local minima,\n        `False` is recommended.\n    f_min : float, optional\n        Function value of the global optimum. Set this value only if the\n        global optimum is known. Default is ``-np.inf``, so that this\n        termination criterion is deactivated.\n    f_min_rtol : float, optional\n        Terminate the optimization once the relative error between the\n        current best minimum `f` and the supplied global minimum `f_min`\n        is smaller than `f_min_rtol`. This parameter is only used if\n        `f_min` is also set. Must lie between 0 and 1. Default is 1e-4.\n    vol_tol : float, optional\n        Terminate the optimization once the volume of the hyperrectangle\n        containing the lowest function value is smaller than `vol_tol`\n        of the complete search space. Must lie between 0 and 1.\n        Default is 1e-16.\n    len_tol : float, optional\n        If ``locally_biased=True``, terminate the optimization once half of\n        the normalized maximal side length of the hyperrectangle containing\n        the lowest function value is smaller than `len_tol`.\n        If ``locally_biased=False``, terminate the optimization once half of\n        the normalized diagonal of the hyperrectangle containing the lowest\n        function value is smaller than `len_tol`. Must lie between 0 and 1.\n        Default is 1e-6.\n    callback : callable, optional\n        A callback function with signature ``callback(xk)`` where ``xk``\n        represents the best function value found so far.\n    \n    Returns\n    -------\n    res : OptimizeResult\n        The optimization result represented as a ``OptimizeResult`` object.\n        Important attributes are: ``x`` the solution array, ``success`` a\n        Boolean flag indicating if the optimizer exited successfully and\n        ``message`` which describes the cause of the termination. See\n        `OptimizeResult` for a description of other attributes.\n    \n    Notes\n    -----\n    DIviding RECTangles (DIRECT) is a deterministic global\n    optimization algorithm capable of minimizing a black box function with\n    its variables subject to lower and upper bound constraints by sampling\n    potential solutions in the search space [1]_. The algorithm starts by\n    normalising the search space to an n-dimensional unit hypercube.\n    It samples the function at the center of this hypercube and at 2n\n    (n is the number of variables) more points, 2 in each coordinate\n    direction. Using these function values, DIRECT then divides the\n    domain into hyperrectangles, each having exactly one of the sampling\n    points as its center. In each iteration, DIRECT chooses, using the `eps`\n    parameter which defaults to 1e-4, some of the existing hyperrectangles\n    to be further divided. This division process continues until either the\n    maximum number of iterations or maximum function evaluations allowed\n    are exceeded, or the hyperrectangle containing the minimal value found\n    so far becomes small enough. If `f_min` is specified, the optimization\n    will stop once this function value is reached within a relative tolerance.\n    The locally biased variant of DIRECT (originally called DIRECT_L) [2]_ is\n    used by default. It makes the search more locally biased and more\n    efficient for cases with only a few local minima.\n    \n    A note about termination criteria: `vol_tol` refers to the volume of the\n    hyperrectangle containing the lowest function value found so far. This\n    volume decreases exponentially with increasing dimensionality of the\n    problem. Therefore `vol_tol` should be decreased to avoid premature\n    termination of the algorithm for higher dimensions. This does not hold\n    for `len_tol`: it refers either to half of the maximal side length\n    (for ``locally_biased=True``) or half of the diagonal of the\n    hyperrectangle (for ``locally_biased=False``).\n    \n    This code is based on the DIRECT 2.0.4 Fortran code by Gablonsky et al. at\n    https://ctk.math.ncsu.edu/SOFTWARE/DIRECTv204.tar.gz .\n    This original version was initially converted via f2c and then cleaned up\n    and reorganized by Steven G. Johnson, August 2007, for the NLopt project.\n    The `direct` function wraps the C implementation.\n    \n    .. versionadded:: 1.9.0\n    \n    References\n    ----------\n    .. [1] Jones, D.R., Perttunen, C.D. & Stuckman, B.E. Lipschitzian\n        optimization without the Lipschitz constant. J Optim Theory Appl\n        79, 157-181 (1993).\n    .. [2] Gablonsky, J., Kelley, C. A Locally-Biased form of the DIRECT\n        Algorithm. Journal of Global Optimization 21, 27-37 (2001).\n    \n    Examples\n    --------\n    The following example is a 2-D problem with four local minima: minimizing\n    the Styblinski-Tang function\n    (https://en.wikipedia.org/wiki/Test_functions_for_optimization).\n    \n    >>> from scipy.optimize import direct, Bounds\n    >>> def styblinski_tang(pos):\n    ...     x, y = pos\n    ...     return 0.5 * (x**4 - 16*x**2 + 5*x + y**4 - 16*y**2 + 5*y)\n    >>> bounds = Bounds([-4., -4.], [4., 4.])\n    >>> result = direct(styblinski_tang, bounds)\n    >>> result.x, result.fun, result.nfev\n    array([-2.90321597, -2.90321597]), -78.3323279095383, 2011\n    \n    The correct global minimum was found but with a huge number of function\n    evaluations (2011). Loosening the termination tolerances `vol_tol` and\n    `len_tol` can be used to stop DIRECT earlier.\n    \n    >>> result = direct(styblinski_tang, bounds, len_tol=1e-3)\n    >>> result.x, result.fun, result.nfev\n    array([-2.9044353, -2.9044353]), -78.33230330754142, 207",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "727c04c6b65af9b618692f37f47d48883c32331729b85b7b34c9c2f4838c4fba",
            "fields": [
                {
                    "id": "cgf606_n",
                    "encoding": "",
                    "name": "func",
                    "value": "",
                    "defaultValue": "",
                    "description": "The objective function to be minimized.\n``func(x, *args) -> float``\nwhere ``x`` is an 1-D array with shape (n,) and ``args`` is a tuple of\nthe fixed parameters needed to completely specify the function.",
                    "type": "typing.Callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "or93esc8",
                    "encoding": "",
                    "name": "bounds",
                    "value": "",
                    "defaultValue": "",
                    "description": "Bounds for variables. There are two ways to specify the bounds:\n\n1. Instance of `Bounds` class.\n2. ``(min, max)`` pairs for each element in ``x``.",
                    "type": "typing.Union",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xh9a2nvg",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Any additional fixed parameters needed to\ncompletely specify the objective function.",
                    "type": "builtins.tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k0dmzpuv",
                    "encoding": "",
                    "name": "eps",
                    "value": 0.0001,
                    "defaultValue": 0.0001,
                    "description": "Minimal required difference of the objective function values\nbetween the current best hyperrectangle and the next potentially\noptimal hyperrectangle to be divided. In consequence, `eps` serves as a\ntradeoff between local and global search: the smaller, the more local\nthe search becomes. Default is 1e-4.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4ixt3eue",
                    "encoding": "",
                    "name": "maxfun",
                    "value": "",
                    "defaultValue": "",
                    "description": "Approximate upper bound on objective function evaluations.\nIf `None`, will be automatically set to ``1000 * N`` where ``N``\nrepresents the number of dimensions. Will be capped if necessary to\nlimit DIRECT's RAM usage to app. 1GiB. This will only occur for very\nhigh dimensional problems and excessive `max_fun`. Default is `None`.",
                    "type": "types.int | None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z2wl3ady",
                    "encoding": "",
                    "name": "maxiter",
                    "value": 1000,
                    "defaultValue": 1000,
                    "description": "Maximum number of iterations. Default is 1000.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jn0puq1j",
                    "encoding": "",
                    "name": "locally_biased",
                    "value": true,
                    "defaultValue": true,
                    "description": "If `True` (default), use the locally biased variant of the\nalgorithm known as DIRECT_L. If `False`, use the original unbiased\nDIRECT algorithm. For hard problems with many local minima,\n`False` is recommended.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d7kdc0ke",
                    "encoding": "",
                    "name": "f_min",
                    "value": "-inf",
                    "defaultValue": "-inf",
                    "description": "Function value of the global optimum. Set this value only if the\nglobal optimum is known. Default is ``-np.inf``, so that this\ntermination criterion is deactivated.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y_po0dp4",
                    "encoding": "",
                    "name": "f_min_rtol",
                    "value": 0.0001,
                    "defaultValue": 0.0001,
                    "description": "Terminate the optimization once the relative error between the\ncurrent best minimum `f` and the supplied global minimum `f_min`\nis smaller than `f_min_rtol`. This parameter is only used if\n`f_min` is also set. Must lie between 0 and 1. Default is 1e-4.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hmrd1wms",
                    "encoding": "",
                    "name": "vol_tol",
                    "value": 1e-16,
                    "defaultValue": 1e-16,
                    "description": "Terminate the optimization once the volume of the hyperrectangle\ncontaining the lowest function value is smaller than `vol_tol`\nof the complete search space. Must lie between 0 and 1.\nDefault is 1e-16.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q5qkreg5",
                    "encoding": "",
                    "name": "len_tol",
                    "value": 1e-06,
                    "defaultValue": 1e-06,
                    "description": "If ``locally_biased=True``, terminate the optimization once half of\nthe normalized maximal side length of the hyperrectangle containing\nthe lowest function value is smaller than `len_tol`.\nIf ``locally_biased=False``, terminate the optimization once half of\nthe normalized diagonal of the hyperrectangle containing the lowest\nfunction value is smaller than `len_tol`. Must lie between 0 and 1.\nDefault is 1e-6.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m_c_mv_p",
                    "encoding": "",
                    "name": "callback",
                    "value": "",
                    "defaultValue": "",
                    "description": "A callback function with signature ``callback(xk)`` where ``xk``\nrepresents the best function value found so far.",
                    "type": "typing.Optional",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3gpjld3x",
                    "encoding": "dill",
                    "name": "res",
                    "value": null,
                    "defaultValue": null,
                    "description": "The optimization result represented as a ``OptimizeResult`` object.\nImportant attributes are: ``x`` the solution array, ``success`` a\nBoolean flag indicating if the optimizer exited successfully and\n``message`` which describes the cause of the termination. See\n`OptimizeResult` for a description of other attributes.",
                    "type": "scipy.optimize._optimize.OptimizeResult",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_e6635zn",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.direct",
                    "defaultValue": "scipy.optimize.direct",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9i5zwu0j",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1awdz0jv",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "xps4u9c2",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7tpmovdq",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize",
                    "defaultValue": "scipy.optimize",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hlxrc4s7",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7m7nzow3",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "sfkkjap1",
            "name": "optimize.dual_annealing",
            "description": "Find the global minimum of a function using Dual Annealing.\n    \n    Parameters\n    ----------\n    func : callable\n        The objective function to be minimized. Must be in the form\n        ``f(x, *args)``, where ``x`` is the argument in the form of a 1-D array\n        and ``args`` is a  tuple of any additional fixed parameters needed to\n        completely specify the function.\n    bounds : sequence or `Bounds`\n        Bounds for variables. There are two ways to specify the bounds:\n        \n        1. Instance of `Bounds` class.\n        2. Sequence of ``(min, max)`` pairs for each element in `x`.\n    args : tuple, optional\n        Any additional fixed parameters needed to completely specify the\n        objective function.\n    maxiter : int, optional\n        The maximum number of global search iterations. Default value is 1000.\n    minimizer_kwargs : dict, optional\n        Keyword arguments to be passed to the local minimizer\n        (`minimize`). An important option could be ``method`` for the minimizer\n        method to use.\n        If no keyword arguments are provided, the local minimizer defaults to\n        'L-BFGS-B' and uses the already supplied bounds. If `minimizer_kwargs`\n        is specified, then the dict must contain all parameters required to\n        control the local minimization. `args` is ignored in this dict, as it is\n        passed automatically. `bounds` is not automatically passed on to the\n        local minimizer as the method may not support them.\n    initial_temp : float, optional\n        The initial temperature, use higher values to facilitates a wider\n        search of the energy landscape, allowing dual_annealing to escape\n        local minima that it is trapped in. Default value is 5230. Range is\n        (0.01, 5.e4].\n    restart_temp_ratio : float, optional\n        During the annealing process, temperature is decreasing, when it\n        reaches ``initial_temp * restart_temp_ratio``, the reannealing process\n        is triggered. Default value of the ratio is 2e-5. Range is (0, 1).\n    visit : float, optional\n        Parameter for visiting distribution. Default value is 2.62. Higher\n        values give the visiting distribution a heavier tail, this makes\n        the algorithm jump to a more distant region. The value range is (1, 3].\n    accept : float, optional\n        Parameter for acceptance distribution. It is used to control the\n        probability of acceptance. The lower the acceptance parameter, the\n        smaller the probability of acceptance. Default value is -5.0 with\n        a range (-1e4, -5].\n    maxfun : int, optional\n        Soft limit for the number of objective function calls. If the\n        algorithm is in the middle of a local search, this number will be\n        exceeded, the algorithm will stop just after the local search is\n        done. Default value is 1e7.\n    rng : {None, int, `numpy.random.Generator`}, optional\n        If `rng` is passed by keyword, types other than `numpy.random.Generator` are\n        passed to `numpy.random.default_rng` to instantiate a ``Generator``.\n        If `rng` is already a ``Generator`` instance, then the provided instance is\n        used. Specify `rng` for repeatable function behavior.\n    \n        If this argument is passed by position or `seed` is passed by keyword,\n        legacy behavior for the argument `seed` applies:\n    \n        - If `seed` is None (or `numpy.random`), the `numpy.random.RandomState`\n          singleton is used.\n        - If `seed` is an int, a new ``RandomState`` instance is used,\n          seeded with `seed`.\n        - If `seed` is already a ``Generator`` or ``RandomState`` instance then\n          that instance is used.\n    \n        .. versionchanged:: 1.15.0\n            As part of the `SPEC-007 <https://scientific-python.org/specs/spec-0007/>`_\n            transition from use of `numpy.random.RandomState` to\n            `numpy.random.Generator`, this keyword was changed from `seed` to `rng`.\n            For an interim period, both keywords will continue to work, although only one\n            may be specified at a time. After the interim period, function calls using the\n            `seed` keyword will emit warnings. The behavior of both `seed` and\n            `rng` are outlined above, but only the `rng` keyword should be used in new code.\n            \n        Specify `rng` for repeatable minimizations. The random numbers\n        generated only affect the visiting distribution function\n        and new coordinates generation.\n    no_local_search : bool, optional\n        If `no_local_search` is set to True, a traditional Generalized\n        Simulated Annealing will be performed with no local search\n        strategy applied.\n    callback : callable, optional\n        A callback function with signature ``callback(x, f, context)``,\n        which will be called for all minima found.\n        ``x`` and ``f`` are the coordinates and function value of the\n        latest minimum found, and ``context`` has one of the following\n        values:\n        \n        - ``0``: minimum detected in the annealing process.\n        - ``1``: detection occurred in the local search process.\n        - ``2``: detection done in the dual annealing process.\n        \n        If the callback implementation returns True, the algorithm will stop.\n    x0 : ndarray, shape(n,), optional\n        Coordinates of a single N-D starting point.\n    \n    Returns\n    -------\n    res : OptimizeResult\n        The optimization result represented as a `OptimizeResult` object.\n        Important attributes are: ``x`` the solution array, ``fun`` the value\n        of the function at the solution, and ``message`` which describes the\n        cause of the termination.\n        See `OptimizeResult` for a description of other attributes.\n    \n    Notes\n    -----\n    This function implements the Dual Annealing optimization. This stochastic\n    approach derived from [3]_ combines the generalization of CSA (Classical\n    Simulated Annealing) and FSA (Fast Simulated Annealing) [1]_ [2]_ coupled\n    to a strategy for applying a local search on accepted locations [4]_.\n    An alternative implementation of this same algorithm is described in [5]_\n    and benchmarks are presented in [6]_. This approach introduces an advanced\n    method to refine the solution found by the generalized annealing\n    process. This algorithm uses a distorted Cauchy-Lorentz visiting\n    distribution, with its shape controlled by the parameter :math:`q_{v}`\n    \n    .. math::\n    \n        g_{q_{v}}(\\Delta x(t)) \\propto \\frac{ \\\n        \\left[T_{q_{v}}(t) \\right]^{-\\frac{D}{3-q_{v}}}}{ \\\n        \\left[{1+(q_{v}-1)\\frac{(\\Delta x(t))^{2}} { \\\n        \\left[T_{q_{v}}(t)\\right]^{\\frac{2}{3-q_{v}}}}}\\right]^{ \\\n        \\frac{1}{q_{v}-1}+\\frac{D-1}{2}}}\n    \n    Where :math:`t` is the artificial time. This visiting distribution is used\n    to generate a trial jump distance :math:`\\Delta x(t)` of variable\n    :math:`x(t)` under artificial temperature :math:`T_{q_{v}}(t)`.\n    \n    From the starting point, after calling the visiting distribution\n    function, the acceptance probability is computed as follows:\n    \n    .. math::\n    \n        p_{q_{a}} = \\min{\\{1,\\left[1-(1-q_{a}) \\beta \\Delta E \\right]^{ \\\n        \\frac{1}{1-q_{a}}}\\}}\n    \n    Where :math:`q_{a}` is a acceptance parameter. For :math:`q_{a}<1`, zero\n    acceptance probability is assigned to the cases where\n    \n    .. math::\n    \n        [1-(1-q_{a}) \\beta \\Delta E] < 0\n    \n    The artificial temperature :math:`T_{q_{v}}(t)` is decreased according to\n    \n    .. math::\n    \n        T_{q_{v}}(t) = T_{q_{v}}(1) \\frac{2^{q_{v}-1}-1}{\\left( \\\n        1 + t\\right)^{q_{v}-1}-1}\n    \n    Where :math:`q_{v}` is the visiting parameter.\n    \n    .. versionadded:: 1.2.0\n    \n    References\n    ----------\n    .. [1] Tsallis C. Possible generalization of Boltzmann-Gibbs\n        statistics. Journal of Statistical Physics, 52, 479-487 (1988).\n    .. [2] Tsallis C, Stariolo DA. Generalized Simulated Annealing.\n        Physica A, 233, 395-406 (1996).\n    .. [3] Xiang Y, Sun DY, Fan W, Gong XG. Generalized Simulated\n        Annealing Algorithm and Its Application to the Thomson Model.\n        Physics Letters A, 233, 216-220 (1997).\n    .. [4] Xiang Y, Gong XG. Efficiency of Generalized Simulated\n        Annealing. Physical Review E, 62, 4473 (2000).\n    .. [5] Xiang Y, Gubian S, Suomela B, Hoeng J. Generalized\n        Simulated Annealing for Efficient Global Optimization: the GenSA\n        Package for R. The R Journal, Volume 5/1 (2013).\n    .. [6] Mullen, K. Continuous Global Optimization in R. Journal of\n        Statistical Software, 60(6), 1 - 45, (2014).\n        :doi:`10.18637/jss.v060.i06`\n    \n    Examples\n    --------\n    The following example is a 10-D problem, with many local minima.\n    The function involved is called Rastrigin\n    (https://en.wikipedia.org/wiki/Rastrigin_function)\n    \n    >>> import numpy as np\n    >>> from scipy.optimize import dual_annealing\n    >>> func = lambda x: np.sum(x*x - 10*np.cos(2*np.pi*x)) + 10*np.size(x)\n    >>> lw = [-5.12] * 10\n    >>> up = [5.12] * 10\n    >>> ret = dual_annealing(func, bounds=list(zip(lw, up)))\n    >>> ret.x\n    array([-4.26437714e-09, -3.91699361e-09, -1.86149218e-09, -3.97165720e-09,\n           -6.29151648e-09, -6.53145322e-09, -3.93616815e-09, -6.55623025e-09,\n           -6.05775280e-09, -5.00668935e-09]) # random\n    >>> ret.fun\n    0.000000",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6dbf20a2e87bc78aea95f7cd92a529081140dba2a7f32612f1b37e2042b1f48a",
            "fields": [
                {
                    "id": "o7csolzv",
                    "encoding": "",
                    "name": "func",
                    "value": "",
                    "defaultValue": "",
                    "description": "The objective function to be minimized. Must be in the form\n``f(x, *args)``, where ``x`` is the argument in the form of a 1-D array\nand ``args`` is a  tuple of any additional fixed parameters needed to\ncompletely specify the function.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6xl7co3h",
                    "encoding": "",
                    "name": "bounds",
                    "value": "",
                    "defaultValue": "",
                    "description": "Bounds for variables. There are two ways to specify the bounds:\n\n1. Instance of `Bounds` class.\n2. Sequence of ``(min, max)`` pairs for each element in `x`.",
                    "type": "sequence or Bounds",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "exd77436",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Any additional fixed parameters needed to completely specify the\nobjective function.",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qml9ca4x",
                    "encoding": "",
                    "name": "maxiter",
                    "value": 1000,
                    "defaultValue": 1000,
                    "description": "The maximum number of global search iterations. Default value is 1000.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zs039sc7",
                    "encoding": "",
                    "name": "minimizer_kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "Keyword arguments to be passed to the local minimizer\n(`minimize`). An important option could be ``method`` for the minimizer\nmethod to use.\nIf no keyword arguments are provided, the local minimizer defaults to\n'L-BFGS-B' and uses the already supplied bounds. If `minimizer_kwargs`\nis specified, then the dict must contain all parameters required to\ncontrol the local minimization. `args` is ignored in this dict, as it is\npassed automatically. `bounds` is not automatically passed on to the\nlocal minimizer as the method may not support them.",
                    "type": "dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e4zalqcl",
                    "encoding": "",
                    "name": "initial_temp",
                    "value": 5230.0,
                    "defaultValue": 5230.0,
                    "description": "The initial temperature, use higher values to facilitates a wider\nsearch of the energy landscape, allowing dual_annealing to escape\nlocal minima that it is trapped in. Default value is 5230. Range is\n(0.01, 5.e4].",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4v60u1of",
                    "encoding": "",
                    "name": "restart_temp_ratio",
                    "value": 2e-05,
                    "defaultValue": 2e-05,
                    "description": "During the annealing process, temperature is decreasing, when it\nreaches ``initial_temp * restart_temp_ratio``, the reannealing process\nis triggered. Default value of the ratio is 2e-5. Range is (0, 1).",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "241p00nl",
                    "encoding": "",
                    "name": "visit",
                    "value": 2.62,
                    "defaultValue": 2.62,
                    "description": "Parameter for visiting distribution. Default value is 2.62. Higher\nvalues give the visiting distribution a heavier tail, this makes\nthe algorithm jump to a more distant region. The value range is (1, 3].",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qdi62esu",
                    "encoding": "",
                    "name": "accept",
                    "value": -5.0,
                    "defaultValue": -5.0,
                    "description": "Parameter for acceptance distribution. It is used to control the\nprobability of acceptance. The lower the acceptance parameter, the\nsmaller the probability of acceptance. Default value is -5.0 with\na range (-1e4, -5].",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4qpkrj0q",
                    "encoding": "",
                    "name": "maxfun",
                    "value": 10000000.0,
                    "defaultValue": 10000000.0,
                    "description": "Soft limit for the number of objective function calls. If the\nalgorithm is in the middle of a local search, this number will be\nexceeded, the algorithm will stop just after the local search is\ndone. Default value is 1e7.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x_dnqwpd",
                    "encoding": "",
                    "name": "rng",
                    "value": "",
                    "defaultValue": "",
                    "description": "If `rng` is passed by keyword, types other than `numpy.random.Generator` are\npassed to `numpy.random.default_rng` to instantiate a ``Generator``.\nIf `rng` is already a ``Generator`` instance, then the provided instance is\nused. Specify `rng` for repeatable function behavior.\n\nIf this argument is passed by position or `seed` is passed by keyword,\nlegacy behavior for the argument `seed` applies:\n\n- If `seed` is None (or `numpy.random`), the `numpy.random.RandomState`\n  singleton is used.\n- If `seed` is an int, a new ``RandomState`` instance is used,\n  seeded with `seed`.\n- If `seed` is already a ``Generator`` or ``RandomState`` instance then\n  that instance is used.\n\n.. versionchanged:: 1.15.0\n    As part of the `SPEC-007 <https://scientific-python.org/specs/spec-0007/>`_\n    transition from use of `numpy.random.RandomState` to\n    `numpy.random.Generator`, this keyword was changed from `seed` to `rng`.\n    For an interim period, both keywords will continue to work, although only one\n    may be specified at a time. After the interim period, function calls using the\n    `seed` keyword will emit warnings. The behavior of both `seed` and\n    `rng` are outlined above, but only the `rng` keyword should be used in new code.\n    \nSpecify `rng` for repeatable minimizations. The random numbers\ngenerated only affect the visiting distribution function\nand new coordinates generation.",
                    "type": "{None, int, numpy.random.Generator}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pdk36ii6",
                    "encoding": "",
                    "name": "no_local_search",
                    "value": false,
                    "defaultValue": false,
                    "description": "If `no_local_search` is set to True, a traditional Generalized\nSimulated Annealing will be performed with no local search\nstrategy applied.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7n71q1fe",
                    "encoding": "",
                    "name": "callback",
                    "value": "",
                    "defaultValue": "",
                    "description": "A callback function with signature ``callback(x, f, context)``,\nwhich will be called for all minima found.\n``x`` and ``f`` are the coordinates and function value of the\nlatest minimum found, and ``context`` has one of the following\nvalues:\n\n- ``0``: minimum detected in the annealing process.\n- ``1``: detection occurred in the local search process.\n- ``2``: detection done in the dual annealing process.\n\nIf the callback implementation returns True, the algorithm will stop.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9tomur_4",
                    "encoding": "",
                    "name": "x0",
                    "value": "",
                    "defaultValue": "",
                    "description": "Coordinates of a single N-D starting point.",
                    "type": "ndarray, shape(n,)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n63iir8h",
                    "encoding": "",
                    "name": "seed",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "elwd2v10",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.dual_annealing",
                    "defaultValue": "scipy.optimize.dual_annealing",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x72elcrq",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0kdjspx6",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "mpg2_610",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "stswucxm",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize",
                    "defaultValue": "scipy.optimize",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wpabsc51",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9u_m865_",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "8be68zlg",
            "name": "optimize.excitingmixing",
            "description": "Find a root of a function, using a tuned diagonal Jacobian approximation.\n    \n    The Jacobian matrix is diagonal and is tuned on each iteration.\n    \n    .. warning::\n    \n       This algorithm may be useful for specific problems, but whether\n       it will work may depend strongly on the problem.\n    \n    See Also\n    --------\n    root : Interface to root finding algorithms for multivariate\n           functions. See ``method='excitingmixing'`` in particular.\n    \n    Parameters\n    ----------\n    F : function(x) -> f\n        Function whose root to find; should take and return an array-like\n        object.\n    xin : array_like\n        Initial guess for the solution\n    alpha : float, optional\n        Initial Jacobian approximation is (-1/alpha).\n    alphamax : float, optional\n        The entries of the diagonal Jacobian are kept in the range\n        ``[alpha, alphamax]``.\n    iter : int, optional\n        Number of iterations to make. If omitted (default), make as many\n        as required to meet tolerances.\n    verbose : bool, optional\n        Print status to stdout on every iteration.\n    maxiter : int, optional\n        Maximum number of iterations to make. If more are needed to\n        meet convergence, `NoConvergence` is raised.\n    f_tol : float, optional\n        Absolute tolerance (in max-norm) for the residual.\n        If omitted, default is 6e-6.\n    f_rtol : float, optional\n        Relative tolerance for the residual. If omitted, not used.\n    x_tol : float, optional\n        Absolute minimum step size, as determined from the Jacobian\n        approximation. If the step size is smaller than this, optimization\n        is terminated as successful. If omitted, not used.\n    x_rtol : float, optional\n        Relative minimum step size. If omitted, not used.\n    tol_norm : function(vector) -> scalar, optional\n        Norm to use in convergence check. Default is the maximum norm.\n    line_search : {None, 'armijo' (default), 'wolfe'}, optional\n        Which type of a line search to use to determine the step size in the\n        direction given by the Jacobian approximation. Defaults to 'armijo'.\n    callback : function, optional\n        Optional callback function. It is called on every iteration as\n        ``callback(x, f)`` where `x` is the current solution and `f`\n        the corresponding residual.\n    \n    Returns\n    -------\n    sol : ndarray\n        An array (of similar array type as `x0`) containing the final solution.\n    \n    Raises\n    ------\n    NoConvergence\n        When a solution was not found.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "90ac9e49329b03149f154a2be0514ec40195a1f74946eefd2575e214df62bba5",
            "fields": [
                {
                    "id": "ly8kk4dm",
                    "encoding": "",
                    "name": "F",
                    "value": "",
                    "defaultValue": "",
                    "description": "Function whose root to find; should take and return an array-like\nobject.",
                    "type": "function(x) -> f",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "quw1jkf8",
                    "encoding": "",
                    "name": "xin",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial guess for the solution",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b2gxkl91",
                    "encoding": "",
                    "name": "iter",
                    "value": "",
                    "defaultValue": "",
                    "description": "Number of iterations to make. If omitted (default), make as many\nas required to meet tolerances.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "09cjn7_y",
                    "encoding": "",
                    "name": "alpha",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial Jacobian approximation is (-1/alpha).",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uuon9qwt",
                    "encoding": "",
                    "name": "alphamax",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "The entries of the diagonal Jacobian are kept in the range\n``[alpha, alphamax]``.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wzo2j3nw",
                    "encoding": "",
                    "name": "verbose",
                    "value": false,
                    "defaultValue": false,
                    "description": "Print status to stdout on every iteration.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hzkrfd3y",
                    "encoding": "",
                    "name": "maxiter",
                    "value": "",
                    "defaultValue": "",
                    "description": "Maximum number of iterations to make. If more are needed to\nmeet convergence, `NoConvergence` is raised.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hrrpcd85",
                    "encoding": "",
                    "name": "f_tol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Absolute tolerance (in max-norm) for the residual.\nIf omitted, default is 6e-6.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "odklzgok",
                    "encoding": "",
                    "name": "f_rtol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Relative tolerance for the residual. If omitted, not used.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i_gp3xx8",
                    "encoding": "",
                    "name": "x_tol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Absolute minimum step size, as determined from the Jacobian\napproximation. If the step size is smaller than this, optimization\nis terminated as successful. If omitted, not used.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e73h8h7y",
                    "encoding": "",
                    "name": "x_rtol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Relative minimum step size. If omitted, not used.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4x_eqlpb",
                    "encoding": "",
                    "name": "tol_norm",
                    "value": "",
                    "defaultValue": "",
                    "description": "Norm to use in convergence check. Default is the maximum norm.",
                    "type": "function(vector) -> scalar",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i8lsimd7",
                    "encoding": "",
                    "name": "line_search",
                    "value": "armijo",
                    "defaultValue": "armijo",
                    "description": "Which type of a line search to use to determine the step size in the\ndirection given by the Jacobian approximation. Defaults to 'armijo'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k4ij6ono",
                    "encoding": "",
                    "name": "callback",
                    "value": "",
                    "defaultValue": "",
                    "description": "Optional callback function. It is called on every iteration as\n``callback(x, f)`` where `x` is the current solution and `f`\nthe corresponding residual.",
                    "type": "function",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zwacvvzn",
                    "encoding": "",
                    "name": "kw",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aobo5k5_",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.excitingmixing",
                    "defaultValue": "scipy.optimize.excitingmixing",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "enc09qfj",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "asxppsw5",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "qtm61y8g",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ve8v68_r",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize",
                    "defaultValue": "scipy.optimize",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j8kcmuql",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z6h9wfkb",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "wxg_jtfz",
            "name": "optimize.fixed_point",
            "description": "Find a fixed point of the function.\n    \n    Given a function of one or more variables and a starting point, find a\n    fixed point of the function: i.e., where ``func(x0) == x0``.\n    \n    Parameters\n    ----------\n    func : function\n        Function to evaluate.\n    x0 : array_like\n        Fixed point of function.\n    args : tuple, optional\n        Extra arguments to `func`.\n    xtol : float, optional\n        Convergence tolerance, defaults to 1e-08.\n    maxiter : int, optional\n        Maximum number of iterations, defaults to 500.\n    method : {\"del2\", \"iteration\"}, optional\n        Method of finding the fixed-point, defaults to \"del2\",\n        which uses Steffensen's Method with Aitken's ``Del^2``\n        convergence acceleration [1]_. The \"iteration\" method simply iterates\n        the function until convergence is detected, without attempting to\n        accelerate the convergence.\n    \n    References\n    ----------\n    .. [1] Burden, Faires, \"Numerical Analysis\", 5th edition, pg. 80\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy import optimize\n    >>> def func(x, c1, c2):\n    ...    return np.sqrt(c1/(x+c2))\n    >>> c1 = np.array([10,12.])\n    >>> c2 = np.array([3, 5.])\n    >>> optimize.fixed_point(func, [1.2, 1.3], args=(c1,c2))\n    array([ 1.4920333 ,  1.37228132])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8705ac9d07550c1ff850ae9fb9b248b09802a4651ff338d3b63524a2eb16d85d",
            "fields": [
                {
                    "id": "2yr80mn2",
                    "encoding": "",
                    "name": "func",
                    "value": "",
                    "defaultValue": "",
                    "description": "Function to evaluate.",
                    "type": "function",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cg1s8cfd",
                    "encoding": "",
                    "name": "x0",
                    "value": "",
                    "defaultValue": "",
                    "description": "Fixed point of function.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6n5i9n9n",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Extra arguments to `func`.",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nm3ap4ob",
                    "encoding": "",
                    "name": "xtol",
                    "value": 1e-08,
                    "defaultValue": 1e-08,
                    "description": "Convergence tolerance, defaults to 1e-08.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x3tqzsbj",
                    "encoding": "",
                    "name": "maxiter",
                    "value": 500,
                    "defaultValue": 500,
                    "description": "Maximum number of iterations, defaults to 500.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o8dxuubl",
                    "encoding": "",
                    "name": "method",
                    "value": "del2",
                    "defaultValue": "del2",
                    "description": "Method of finding the fixed-point, defaults to \"del2\",\nwhich uses Steffensen's Method with Aitken's ``Del^2``\nconvergence acceleration [1]_. The \"iteration\" method simply iterates\nthe function until convergence is detected, without attempting to\naccelerate the convergence.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m5zt7oc_",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.fixed_point",
                    "defaultValue": "scipy.optimize.fixed_point",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o3fsnagy",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x5elql6p",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "k94qbp6c",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s0fj3xpp",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize",
                    "defaultValue": "scipy.optimize",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t50rc3tg",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bhc8qtzt",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "p4vun9hb",
            "name": "optimize.fmin",
            "description": "Minimize a function using the downhill simplex algorithm.\n    \n    This algorithm only uses function values, not derivatives or second\n    derivatives.\n    \n    Parameters\n    ----------\n    func : callable func(x,*args)\n        The objective function to be minimized.\n    x0 : ndarray\n        Initial guess.\n    args : tuple, optional\n        Extra arguments passed to func, i.e., ``f(x,*args)``.\n    xtol : float, optional\n        Absolute error in xopt between iterations that is acceptable for\n        convergence.\n    ftol : number, optional\n        Absolute error in func(xopt) between iterations that is acceptable for\n        convergence.\n    maxiter : int, optional\n        Maximum number of iterations to perform.\n    maxfun : number, optional\n        Maximum number of function evaluations to make.\n    full_output : bool, optional\n        Set to True if fopt and warnflag outputs are desired.\n    disp : bool, optional\n        Set to True to print convergence messages.\n    retall : bool, optional\n        Set to True to return list of solutions at each iteration.\n    callback : callable, optional\n        Called after each iteration, as callback(xk), where xk is the\n        current parameter vector.\n    initial_simplex : array_like of shape (N + 1, N), optional\n        Initial simplex. If given, overrides `x0`.\n        ``initial_simplex[j,:]`` should contain the coordinates of\n        the jth vertex of the ``N+1`` vertices in the simplex, where\n        ``N`` is the dimension.\n    \n    Returns\n    -------\n    xopt : ndarray\n        Parameter that minimizes function.\n    fopt : float\n        Value of function at minimum: ``fopt = func(xopt)``.\n    iter : int\n        Number of iterations performed.\n    funcalls : int\n        Number of function calls made.\n    warnflag : int\n        1 : Maximum number of function evaluations made.\n        2 : Maximum number of iterations reached.\n    allvecs : list\n        Solution at each iteration.\n    \n    See also\n    --------\n    minimize: Interface to minimization algorithms for multivariate\n        functions. See the 'Nelder-Mead' `method` in particular.\n    \n    Notes\n    -----\n    Uses a Nelder-Mead simplex algorithm to find the minimum of function of\n    one or more variables.\n    \n    This algorithm has a long history of successful use in applications.\n    But it will usually be slower than an algorithm that uses first or\n    second derivative information. In practice, it can have poor\n    performance in high-dimensional problems and is not robust to\n    minimizing complicated functions. Additionally, there currently is no\n    complete theory describing when the algorithm will successfully\n    converge to the minimum, or how fast it will if it does. Both the ftol and\n    xtol criteria must be met for convergence.\n    \n    Examples\n    --------\n    >>> def f(x):\n    ...     return x**2\n    \n    >>> from scipy import optimize\n    \n    >>> minimum = optimize.fmin(f, 1)\n    Optimization terminated successfully.\n             Current function value: 0.000000\n             Iterations: 17\n             Function evaluations: 34\n    >>> minimum[0]\n    -8.8817841970012523e-16\n    \n    References\n    ----------\n    .. [1] Nelder, J.A. and Mead, R. (1965), \"A simplex method for function\n           minimization\", The Computer Journal, 7, pp. 308-313\n    \n    .. [2] Wright, M.H. (1996), \"Direct Search Methods: Once Scorned, Now\n           Respectable\", in Numerical Analysis 1995, Proceedings of the\n           1995 Dundee Biennial Conference in Numerical Analysis, D.F.\n           Griffiths and G.A. Watson (Eds.), Addison Wesley Longman,\n           Harlow, UK, pp. 191-208.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9ed3f9ef8ae24413225361e82dcfc3213fd8b1d0c1f99a379d462b0f57009063",
            "fields": [
                {
                    "id": "6t3uj2wr",
                    "encoding": "",
                    "name": "func",
                    "value": "",
                    "defaultValue": "",
                    "description": "The objective function to be minimized.",
                    "type": "callable func(x,*args)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "074xnpk9",
                    "encoding": "",
                    "name": "x0",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial guess.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vnn5ruj0",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Extra arguments passed to func, i.e., ``f(x,*args)``.",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "veibbqh8",
                    "encoding": "",
                    "name": "xtol",
                    "value": 0.0001,
                    "defaultValue": 0.0001,
                    "description": "Absolute error in xopt between iterations that is acceptable for\nconvergence.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7chcfwmu",
                    "encoding": "",
                    "name": "ftol",
                    "value": 0.0001,
                    "defaultValue": 0.0001,
                    "description": "Absolute error in func(xopt) between iterations that is acceptable for\nconvergence.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z04017dg",
                    "encoding": "",
                    "name": "maxiter",
                    "value": "",
                    "defaultValue": "",
                    "description": "Maximum number of iterations to perform.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b8oyqhp3",
                    "encoding": "",
                    "name": "maxfun",
                    "value": "",
                    "defaultValue": "",
                    "description": "Maximum number of function evaluations to make.",
                    "type": "number",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qdcjuv3o",
                    "encoding": "",
                    "name": "full_output",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Set to True if fopt and warnflag outputs are desired.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9uyir39g",
                    "encoding": "",
                    "name": "disp",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Set to True to print convergence messages.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "04l3umzw",
                    "encoding": "",
                    "name": "retall",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Set to True to return list of solutions at each iteration.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dys0_749",
                    "encoding": "",
                    "name": "callback",
                    "value": "",
                    "defaultValue": "",
                    "description": "Called after each iteration, as callback(xk), where xk is the\ncurrent parameter vector.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9rvvjtmj",
                    "encoding": "",
                    "name": "initial_simplex",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial simplex. If given, overrides `x0`.\n``initial_simplex[j,:]`` should contain the coordinates of\nthe jth vertex of the ``N+1`` vertices in the simplex, where\n``N`` is the dimension.",
                    "type": "arraylike of shape (N + 1, N)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "swikkwym",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.fmin",
                    "defaultValue": "scipy.optimize.fmin",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i6uj9f8b",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lstvqfwr",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "7gfiy8ef",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ds9qx2c8",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize",
                    "defaultValue": "scipy.optimize",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j4zb9bj_",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5m1fvjj7",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "rems6cjr",
            "name": "optimize.fmin_bfgs",
            "description": "Minimize a function using the BFGS algorithm.\n    \n    Parameters\n    ----------\n    f : callable ``f(x,*args)``\n        Objective function to be minimized.\n    x0 : ndarray\n        Initial guess, shape (n,)\n    fprime : callable ``f'(x,*args)``, optional\n        Gradient of f.\n    args : tuple, optional\n        Extra arguments passed to f and fprime.\n    gtol : float, optional\n        Terminate successfully if gradient norm is less than `gtol`\n    norm : float, optional\n        Order of norm (Inf is max, -Inf is min)\n    epsilon : int or ndarray, optional\n        If `fprime` is approximated, use this value for the step size.\n    callback : callable, optional\n        An optional user-supplied function to call after each\n        iteration. Called as ``callback(xk)``, where ``xk`` is the\n        current parameter vector.\n    maxiter : int, optional\n        Maximum number of iterations to perform.\n    full_output : bool, optional\n        If True, return ``fopt``, ``func_calls``, ``grad_calls``, and\n        ``warnflag`` in addition to ``xopt``.\n    disp : bool, optional\n        Print convergence message if True.\n    retall : bool, optional\n        Return a list of results at each iteration if True.\n    xrtol : float, default: 0\n        Relative tolerance for `x`. Terminate successfully if step\n        size is less than ``xk * xrtol`` where ``xk`` is the current\n        parameter vector.\n    c1 : float, default: 1e-4\n        Parameter for Armijo condition rule.\n    c2 : float, default: 0.9\n        Parameter for curvature condition rule.\n    hess_inv0 : None or ndarray, optional``\n        Initial inverse hessian estimate, shape (n, n). If None (default) then\n        the identity matrix is used.\n    \n    Returns\n    -------\n    xopt : ndarray\n        Parameters which minimize f, i.e., ``f(xopt) == fopt``.\n    fopt : float\n        Minimum value.\n    gopt : ndarray\n        Value of gradient at minimum, f'(xopt), which should be near 0.\n    Bopt : ndarray\n        Value of 1/f''(xopt), i.e., the inverse Hessian matrix.\n    func_calls : int\n        Number of function_calls made.\n    grad_calls : int\n        Number of gradient calls made.\n    warnflag : integer\n        1 : Maximum number of iterations exceeded.\n        2 : Gradient and/or function calls not changing.\n        3 : NaN result encountered.\n    allvecs : list\n        The value of `xopt` at each iteration. Only returned if `retall` is\n        True.\n    \n    Notes\n    -----\n    Optimize the function, `f`, whose gradient is given by `fprime`\n    using the quasi-Newton method of Broyden, Fletcher, Goldfarb,\n    and Shanno (BFGS).\n    \n    Parameters `c1` and `c2` must satisfy ``0 < c1 < c2 < 1``.\n    \n    See Also\n    --------\n    minimize: Interface to minimization algorithms for multivariate\n        functions. See ``method='BFGS'`` in particular.\n    \n    References\n    ----------\n    Wright, and Nocedal 'Numerical Optimization', 1999, p. 198.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.optimize import fmin_bfgs\n    >>> def quadratic_cost(x, Q):\n    ...     return x @ Q @ x\n    ...\n    >>> x0 = np.array([-3, -4])\n    >>> cost_weight =  np.diag([1., 10.])\n    >>> # Note that a trailing comma is necessary for a tuple with single element\n    >>> fmin_bfgs(quadratic_cost, x0, args=(cost_weight,))\n    Optimization terminated successfully.\n            Current function value: 0.000000\n            Iterations: 7                   # may vary\n            Function evaluations: 24        # may vary\n            Gradient evaluations: 8         # may vary\n    array([ 2.85169950e-06, -4.61820139e-07])\n    \n    >>> def quadratic_cost_grad(x, Q):\n    ...     return 2 * Q @ x\n    ...\n    >>> fmin_bfgs(quadratic_cost, x0, quadratic_cost_grad, args=(cost_weight,))\n    Optimization terminated successfully.\n            Current function value: 0.000000\n            Iterations: 7\n            Function evaluations: 8\n            Gradient evaluations: 8\n    array([ 2.85916637e-06, -4.54371951e-07])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "87b4434d9050aac5f5b280e7d9396630b69afeaf2e2ed8a3271029b76b262158",
            "fields": [
                {
                    "id": "_wnl1srf",
                    "encoding": "",
                    "name": "f",
                    "value": "",
                    "defaultValue": "",
                    "description": "Objective function to be minimized.",
                    "type": "callable f(x,*args)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w9g28ix4",
                    "encoding": "",
                    "name": "x0",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial guess, shape (n,)",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_cumja0e",
                    "encoding": "",
                    "name": "fprime",
                    "value": "",
                    "defaultValue": "",
                    "description": "Gradient of f.",
                    "type": "callable f'(x,*args)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jrgth5sm",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Extra arguments passed to f and fprime.",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u05w6yni",
                    "encoding": "",
                    "name": "gtol",
                    "value": 1e-05,
                    "defaultValue": 1e-05,
                    "description": "Terminate successfully if gradient norm is less than `gtol`",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8nr_0h16",
                    "encoding": "",
                    "name": "norm",
                    "value": "inf",
                    "defaultValue": "inf",
                    "description": "Order of norm (Inf is max, -Inf is min)",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7rzpz9w6",
                    "encoding": "",
                    "name": "epsilon",
                    "value": "np.float64(1.4901161193847656e-08)",
                    "defaultValue": "np.float64(1.4901161193847656e-08)",
                    "description": "If `fprime` is approximated, use this value for the step size.",
                    "type": "numpy.float64",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8kdhkvyb",
                    "encoding": "",
                    "name": "maxiter",
                    "value": "",
                    "defaultValue": "",
                    "description": "Maximum number of iterations to perform.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oaodwizh",
                    "encoding": "",
                    "name": "full_output",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "If True, return ``fopt``, ``func_calls``, ``grad_calls``, and\n``warnflag`` in addition to ``xopt``.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y2ni4dg5",
                    "encoding": "",
                    "name": "disp",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Print convergence message if True.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9y_iq6kx",
                    "encoding": "",
                    "name": "retall",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Return a list of results at each iteration if True.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9vd5_zd8",
                    "encoding": "",
                    "name": "callback",
                    "value": "",
                    "defaultValue": "",
                    "description": "An optional user-supplied function to call after each\niteration. Called as ``callback(xk)``, where ``xk`` is the\ncurrent parameter vector.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l9fbm9_v",
                    "encoding": "",
                    "name": "xrtol",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Relative tolerance for `x`. Terminate successfully if step\nsize is less than ``xk * xrtol`` where ``xk`` is the current\nparameter vector.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u61pewb1",
                    "encoding": "",
                    "name": "c1",
                    "value": 0.0001,
                    "defaultValue": 0.0001,
                    "description": "Parameter for Armijo condition rule.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ydciy5r8",
                    "encoding": "",
                    "name": "c2",
                    "value": 0.9,
                    "defaultValue": 0.9,
                    "description": "Parameter for curvature condition rule.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "06d_wsu3",
                    "encoding": "",
                    "name": "hess_inv0",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial inverse hessian estimate, shape (n, n). If None (default) then\nthe identity matrix is used.",
                    "type": "None or ndarray, optional",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "273cmv4p",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.fmin_bfgs",
                    "defaultValue": "scipy.optimize.fmin_bfgs",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "04i896ut",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "veao89u7",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "h38u_wx2",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7css4mu6",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize",
                    "defaultValue": "scipy.optimize",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fz5h50dh",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pczmfo8h",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "noa8g5fn",
            "name": "optimize.fmin_cg",
            "description": "Minimize a function using a nonlinear conjugate gradient algorithm.\n    \n    Parameters\n    ----------\n    f : callable, ``f(x, *args)``\n        Objective function to be minimized. Here `x` must be a 1-D array of\n        the variables that are to be changed in the search for a minimum, and\n        `args` are the other (fixed) parameters of `f`.\n    x0 : ndarray\n        A user-supplied initial estimate of `xopt`, the optimal value of `x`.\n        It must be a 1-D array of values.\n    fprime : callable, ``fprime(x, *args)``, optional\n        A function that returns the gradient of `f` at `x`. Here `x` and `args`\n        are as described above for `f`. The returned value must be a 1-D array.\n        Defaults to None, in which case the gradient is approximated\n        numerically (see `epsilon`, below).\n    args : tuple, optional\n        Parameter values passed to `f` and `fprime`. Must be supplied whenever\n        additional fixed parameters are needed to completely specify the\n        functions `f` and `fprime`.\n    gtol : float, optional\n        Stop when the norm of the gradient is less than `gtol`.\n    norm : float, optional\n        Order to use for the norm of the gradient\n        (``-np.inf`` is min, ``np.inf`` is max).\n    epsilon : float or ndarray, optional\n        Step size(s) to use when `fprime` is approximated numerically. Can be a\n        scalar or a 1-D array. Defaults to ``sqrt(eps)``, with eps the\n        floating point machine precision.  Usually ``sqrt(eps)`` is about\n        1.5e-8.\n    maxiter : int, optional\n        Maximum number of iterations to perform. Default is ``200 * len(x0)``.\n    full_output : bool, optional\n        If True, return `fopt`, `func_calls`, `grad_calls`, and `warnflag` in\n        addition to `xopt`.  See the Returns section below for additional\n        information on optional return values.\n    disp : bool, optional\n        If True, return a convergence message, followed by `xopt`.\n    retall : bool, optional\n        If True, add to the returned values the results of each iteration.\n    callback : callable, optional\n        An optional user-supplied function, called after each iteration.\n        Called as ``callback(xk)``, where ``xk`` is the current value of `x0`.\n    c1 : float, default: 1e-4\n        Parameter for Armijo condition rule.\n    c2 : float, default: 0.4\n        Parameter for curvature condition rule.\n    \n    Returns\n    -------\n    xopt : ndarray\n        Parameters which minimize f, i.e., ``f(xopt) == fopt``.\n    fopt : float, optional\n        Minimum value found, f(xopt). Only returned if `full_output` is True.\n    func_calls : int, optional\n        The number of function_calls made. Only returned if `full_output`\n        is True.\n    grad_calls : int, optional\n        The number of gradient calls made. Only returned if `full_output` is\n        True.\n    warnflag : int, optional\n        Integer value with warning status, only returned if `full_output` is\n        True.\n    \n        0 : Success.\n    \n        1 : The maximum number of iterations was exceeded.\n    \n        2 : Gradient and/or function calls were not changing. May indicate\n            that precision was lost, i.e., the routine did not converge.\n    \n        3 : NaN result encountered.\n    \n    allvecs : list of ndarray, optional\n        List of arrays, containing the results at each iteration.\n        Only returned if `retall` is True.\n    \n    See Also\n    --------\n    minimize : common interface to all `scipy.optimize` algorithms for\n               unconstrained and constrained minimization of multivariate\n               functions. It provides an alternative way to call\n               ``fmin_cg``, by specifying ``method='CG'``.\n    \n    Notes\n    -----\n    This conjugate gradient algorithm is based on that of Polak and Ribiere\n    [1]_.\n    \n    Conjugate gradient methods tend to work better when:\n    \n    1. `f` has a unique global minimizing point, and no local minima or\n       other stationary points,\n    2. `f` is, at least locally, reasonably well approximated by a\n       quadratic function of the variables,\n    3. `f` is continuous and has a continuous gradient,\n    4. `fprime` is not too large, e.g., has a norm less than 1000,\n    5. The initial guess, `x0`, is reasonably close to `f` 's global\n       minimizing point, `xopt`.\n    \n    Parameters `c1` and `c2` must satisfy ``0 < c1 < c2 < 1``.\n    \n    References\n    ----------\n    .. [1] Wright & Nocedal, \"Numerical Optimization\", 1999, pp. 120-122.\n    \n    Examples\n    --------\n    Example 1: seek the minimum value of the expression\n    ``a*u**2 + b*u*v + c*v**2 + d*u + e*v + f`` for given values\n    of the parameters and an initial guess ``(u, v) = (0, 0)``.\n    \n    >>> import numpy as np\n    >>> args = (2, 3, 7, 8, 9, 10)  # parameter values\n    >>> def f(x, *args):\n    ...     u, v = x\n    ...     a, b, c, d, e, f = args\n    ...     return a*u**2 + b*u*v + c*v**2 + d*u + e*v + f\n    >>> def gradf(x, *args):\n    ...     u, v = x\n    ...     a, b, c, d, e, f = args\n    ...     gu = 2*a*u + b*v + d     # u-component of the gradient\n    ...     gv = b*u + 2*c*v + e     # v-component of the gradient\n    ...     return np.asarray((gu, gv))\n    >>> x0 = np.asarray((0, 0))  # Initial guess.\n    >>> from scipy import optimize\n    >>> res1 = optimize.fmin_cg(f, x0, fprime=gradf, args=args)\n    Optimization terminated successfully.\n             Current function value: 1.617021\n             Iterations: 4\n             Function evaluations: 8\n             Gradient evaluations: 8\n    >>> res1\n    array([-1.80851064, -0.25531915])\n    \n    Example 2: solve the same problem using the `minimize` function.\n    (This `myopts` dictionary shows all of the available options,\n    although in practice only non-default values would be needed.\n    The returned value will be a dictionary.)\n    \n    >>> opts = {'maxiter' : None,    # default value.\n    ...         'disp' : True,    # non-default value.\n    ...         'gtol' : 1e-5,    # default value.\n    ...         'norm' : np.inf,  # default value.\n    ...         'eps' : 1.4901161193847656e-08}  # default value.\n    >>> res2 = optimize.minimize(f, x0, jac=gradf, args=args,\n    ...                          method='CG', options=opts)\n    Optimization terminated successfully.\n            Current function value: 1.617021\n            Iterations: 4\n            Function evaluations: 8\n            Gradient evaluations: 8\n    >>> res2.x  # minimum found\n    array([-1.80851064, -0.25531915])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7952152b55190613d4be339257fcc65be13ba24c9ea5dbf052e46fd612492949",
            "fields": [
                {
                    "id": "aqdf75i2",
                    "encoding": "",
                    "name": "f",
                    "value": "",
                    "defaultValue": "",
                    "description": "Objective function to be minimized. Here `x` must be a 1-D array of\nthe variables that are to be changed in the search for a minimum, and\n`args` are the other (fixed) parameters of `f`.",
                    "type": "callable, f(x, *args)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rrp1cube",
                    "encoding": "",
                    "name": "x0",
                    "value": "",
                    "defaultValue": "",
                    "description": "A user-supplied initial estimate of `xopt`, the optimal value of `x`.\nIt must be a 1-D array of values.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hetybm46",
                    "encoding": "",
                    "name": "fprime",
                    "value": "",
                    "defaultValue": "",
                    "description": "A function that returns the gradient of `f` at `x`. Here `x` and `args`\nare as described above for `f`. The returned value must be a 1-D array.\nDefaults to None, in which case the gradient is approximated\nnumerically (see `epsilon`, below).",
                    "type": "callable, fprime(x, *args)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cw52z6od",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Parameter values passed to `f` and `fprime`. Must be supplied whenever\nadditional fixed parameters are needed to completely specify the\nfunctions `f` and `fprime`.",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "87tq7h1i",
                    "encoding": "",
                    "name": "gtol",
                    "value": 1e-05,
                    "defaultValue": 1e-05,
                    "description": "Stop when the norm of the gradient is less than `gtol`.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2b9vngrx",
                    "encoding": "",
                    "name": "norm",
                    "value": "inf",
                    "defaultValue": "inf",
                    "description": "Order to use for the norm of the gradient\n(``-np.inf`` is min, ``np.inf`` is max).",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_bqinck_",
                    "encoding": "",
                    "name": "epsilon",
                    "value": "np.float64(1.4901161193847656e-08)",
                    "defaultValue": "np.float64(1.4901161193847656e-08)",
                    "description": "Step size(s) to use when `fprime` is approximated numerically. Can be a\nscalar or a 1-D array. Defaults to ``sqrt(eps)``, with eps the\nfloating point machine precision.  Usually ``sqrt(eps)`` is about\n1.5e-8.",
                    "type": "numpy.float64",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wsyzdfci",
                    "encoding": "",
                    "name": "maxiter",
                    "value": "",
                    "defaultValue": "",
                    "description": "Maximum number of iterations to perform. Default is ``200 * len(x0)``.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0gax4zy0",
                    "encoding": "",
                    "name": "full_output",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "If True, return `fopt`, `func_calls`, `grad_calls`, and `warnflag` in\naddition to `xopt`.  See the Returns section below for additional\ninformation on optional return values.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1j1uly4q",
                    "encoding": "",
                    "name": "disp",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "If True, return a convergence message, followed by `xopt`.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c44qil_q",
                    "encoding": "",
                    "name": "retall",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "If True, add to the returned values the results of each iteration.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l7ugnmr6",
                    "encoding": "",
                    "name": "callback",
                    "value": "",
                    "defaultValue": "",
                    "description": "An optional user-supplied function, called after each iteration.\nCalled as ``callback(xk)``, where ``xk`` is the current value of `x0`.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3l51maee",
                    "encoding": "",
                    "name": "c1",
                    "value": 0.0001,
                    "defaultValue": 0.0001,
                    "description": "Parameter for Armijo condition rule.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1hxuudp1",
                    "encoding": "",
                    "name": "c2",
                    "value": 0.4,
                    "defaultValue": 0.4,
                    "description": "Parameter for curvature condition rule.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qx58yg38",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.fmin_cg",
                    "defaultValue": "scipy.optimize.fmin_cg",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "947jz12f",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dzq0a5v8",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "3xypn_rt",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hd1lp_fs",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize",
                    "defaultValue": "scipy.optimize",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n23xeor_",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rep7x9h8",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "mdoc4859",
            "name": "optimize.fmin_cobyla",
            "description": "Minimize a function using the Constrained Optimization By Linear\n    Approximation (COBYLA) method. This method uses the pure-python implementation\n    of the algorithm from PRIMA.\n    \n    Parameters\n    ----------\n    func : callable\n        Function to minimize. In the form func(x, \\*args).\n    x0 : ndarray\n        Initial guess.\n    cons : sequence\n        Constraint functions; must all be ``>=0`` (a single function\n        if only 1 constraint). Each function takes the parameters `x`\n        as its first argument, and it can return either a single number or\n        an array or list of numbers.\n    args : tuple, optional\n        Extra arguments to pass to function.\n    consargs : tuple, optional\n        Extra arguments to pass to constraint functions (default of None means\n        use same extra arguments as those passed to func).\n        Use ``()`` for no extra arguments.\n    rhobeg : float, optional\n        Reasonable initial changes to the variables.\n    rhoend : float, optional\n        Final accuracy in the optimization (not precisely guaranteed). This\n        is a lower bound on the size of the trust region.\n    disp : {0, 1, 2, 3}, optional\n        Controls the frequency of output; 0 implies no output.\n    maxfun : int, optional\n        Maximum number of function evaluations.\n    catol : float, optional\n        Absolute tolerance for constraint violations.\n    callback : callable, optional\n        Called after each iteration, as ``callback(x)``, where ``x`` is the\n        current parameter vector.\n    \n    Returns\n    -------\n    x : ndarray\n        The argument that minimises `f`.\n    \n    See also\n    --------\n    minimize: Interface to minimization algorithms for multivariate\n        functions. See the 'COBYLA' `method` in particular.\n    \n    Notes\n    -----\n    This algorithm is based on linear approximations to the objective\n    function and each constraint. We briefly describe the algorithm.\n    \n    Suppose the function is being minimized over k variables. At the\n    jth iteration the algorithm has k+1 points v_1, ..., v_(k+1),\n    an approximate solution x_j, and a radius RHO_j.\n    (i.e., linear plus a constant) approximations to the objective\n    function and constraint functions such that their function values\n    agree with the linear approximation on the k+1 points v_1,.., v_(k+1).\n    This gives a linear program to solve (where the linear approximations\n    of the constraint functions are constrained to be non-negative).\n    \n    However, the linear approximations are likely only good\n    approximations near the current simplex, so the linear program is\n    given the further requirement that the solution, which\n    will become x_(j+1), must be within RHO_j from x_j. RHO_j only\n    decreases, never increases. The initial RHO_j is rhobeg and the\n    final RHO_j is rhoend. In this way COBYLA's iterations behave\n    like a trust region algorithm.\n    \n    Additionally, the linear program may be inconsistent, or the\n    approximation may give poor improvement. For details about\n    how these issues are resolved, as well as how the points v_i are\n    updated, refer to the source code or the references below.\n    \n        .. versionchanged:: 1.16.0\n            The original Powell implementation was replaced by a pure\n            Python version from the PRIMA package, with bug fixes and\n            improvements being made.\n    \n    \n    References\n    ----------\n    Powell M.J.D. (1994), \"A direct search optimization method that models\n    the objective and constraint functions by linear interpolation.\", in\n    Advances in Optimization and Numerical Analysis, eds. S. Gomez and\n    J-P Hennart, Kluwer Academic (Dordrecht), pp. 51-67\n    \n    Powell M.J.D. (1998), \"Direct search algorithms for optimization\n    calculations\", Acta Numerica 7, 287-336\n    \n    Powell M.J.D. (2007), \"A view of algorithms for optimization without\n    derivatives\", Cambridge University Technical Report DAMTP 2007/NA03\n    \n    Zhang Z. (2023), \"PRIMA: Reference Implementation for Powell's Methods with\n    Modernization and Amelioration\", https://www.libprima.net,\n    :doi:`10.5281/zenodo.8052654`\n    \n    Examples\n    --------\n    Minimize the objective function f(x,y) = x*y subject\n    to the constraints x**2 + y**2 < 1 and y > 0::\n    \n        >>> def objective(x):\n        ...     return x[0]*x[1]\n        ...\n        >>> def constr1(x):\n        ...     return 1 - (x[0]**2 + x[1]**2)\n        ...\n        >>> def constr2(x):\n        ...     return x[1]\n        ...\n        >>> from scipy.optimize import fmin_cobyla\n        >>> fmin_cobyla(objective, [0.0, 0.1], [constr1, constr2], rhoend=1e-7)\n        array([-0.70710685,  0.70710671])\n    \n    The exact solution is (-sqrt(2)/2, sqrt(2)/2).",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "54141a0bbb3e7cf98bb41f8c279dbd91fbc5ea1e07f7a612128f8c3e48ac054d",
            "fields": [
                {
                    "id": "lijel366",
                    "encoding": "",
                    "name": "func",
                    "value": "",
                    "defaultValue": "",
                    "description": "Function to minimize. In the form func(x, \\*args).",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "safr4dd3",
                    "encoding": "",
                    "name": "x0",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial guess.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bdnpjwpd",
                    "encoding": "",
                    "name": "cons",
                    "value": "",
                    "defaultValue": "",
                    "description": "Constraint functions; must all be ``>=0`` (a single function\nif only 1 constraint). Each function takes the parameters `x`\nas its first argument, and it can return either a single number or\nan array or list of numbers.",
                    "type": "sequence",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ggdz8ezb",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Extra arguments to pass to function.",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t_7kewme",
                    "encoding": "",
                    "name": "consargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "Extra arguments to pass to constraint functions (default of None means\nuse same extra arguments as those passed to func).\nUse ``()`` for no extra arguments.",
                    "type": "tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y8c3ov56",
                    "encoding": "",
                    "name": "rhobeg",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "Reasonable initial changes to the variables.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "koepelmq",
                    "encoding": "",
                    "name": "rhoend",
                    "value": 0.0001,
                    "defaultValue": 0.0001,
                    "description": "Final accuracy in the optimization (not precisely guaranteed). This\nis a lower bound on the size of the trust region.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a9qdluuj",
                    "encoding": "",
                    "name": "maxfun",
                    "value": 1000,
                    "defaultValue": 1000,
                    "description": "Maximum number of function evaluations.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ijw3g199",
                    "encoding": "",
                    "name": "disp",
                    "value": "",
                    "defaultValue": "",
                    "description": "Controls the frequency of output; 0 implies no output.",
                    "type": "{0, 1, 2, 3}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ief3hev7",
                    "encoding": "",
                    "name": "catol",
                    "value": 0.0002,
                    "defaultValue": 0.0002,
                    "description": "Absolute tolerance for constraint violations.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1agkgpdo",
                    "encoding": "",
                    "name": "callback",
                    "value": "",
                    "defaultValue": "",
                    "description": "Called after each iteration, as ``callback(x)``, where ``x`` is the\ncurrent parameter vector.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iwh0dmwp",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.fmin_cobyla",
                    "defaultValue": "scipy.optimize.fmin_cobyla",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mxdr0967",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nk2hyizd",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "5vxaz4bs",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lr9oqgud",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize",
                    "defaultValue": "scipy.optimize",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y1um5pot",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y7chgq6k",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "qkp3xqy6",
            "name": "optimize.fmin_l_bfgs_b",
            "description": "Minimize a function func using the L-BFGS-B algorithm.\n    \n    Parameters\n    ----------\n    func : callable f(x,*args)\n        Function to minimize.\n    x0 : ndarray\n        Initial guess.\n    fprime : callable fprime(x,*args), optional\n        The gradient of `func`. If None, then `func` returns the function\n        value and the gradient (``f, g = func(x, *args)``), unless\n        `approx_grad` is True in which case `func` returns only ``f``.\n    args : sequence, optional\n        Arguments to pass to `func` and `fprime`.\n    approx_grad : bool, optional\n        Whether to approximate the gradient numerically (in which case\n        `func` returns only the function value).\n    bounds : list, optional\n        ``(min, max)`` pairs for each element in ``x``, defining\n        the bounds on that parameter. Use None or +-inf for one of ``min`` or\n        ``max`` when there is no bound in that direction.\n    m : int, optional\n        The maximum number of variable metric corrections\n        used to define the limited memory matrix. (The limited memory BFGS\n        method does not store the full hessian but uses this many terms in an\n        approximation to it.)\n    factr : float, optional\n        The iteration stops when\n        ``(f^k - f^{k+1})/max{|f^k|,|f^{k+1}|,1} <= factr * eps``,\n        where ``eps`` is the machine precision, which is automatically\n        generated by the code. Typical values for `factr` are: 1e12 for\n        low accuracy; 1e7 for moderate accuracy; 10.0 for extremely\n        high accuracy. See Notes for relationship to `ftol`, which is exposed\n        (instead of `factr`) by the `scipy.optimize.minimize` interface to\n        L-BFGS-B.\n    pgtol : float, optional\n        The iteration will stop when\n        ``max{|proj g_i | i = 1, ..., n} <= pgtol``\n        where ``proj g_i`` is the i-th component of the projected gradient.\n    epsilon : float, optional\n        Step size used when `approx_grad` is True, for numerically\n        calculating the gradient\n    iprint : int, optional\n        Deprecated option that previously controlled the text printed on the\n        screen during the problem solution. Now the code does not emit any\n        output and this keyword has no function.\n    \n        .. deprecated:: 1.15.0\n            This keyword is deprecated and will be removed from SciPy 1.18.0.\n    \n    disp : int, optional\n        Deprecated option that previously controlled the text printed on the\n        screen during the problem solution. Now the code does not emit any\n        output and this keyword has no function.\n    \n        .. deprecated:: 1.15.0\n            This keyword is deprecated and will be removed from SciPy 1.18.0.\n    \n    maxfun : int, optional\n        Maximum number of function evaluations. Note that this function\n        may violate the limit because of evaluating gradients by numerical\n        differentiation.\n    maxiter : int, optional\n        Maximum number of iterations.\n    callback : callable, optional\n        Called after each iteration, as ``callback(xk)``, where ``xk`` is the\n        current parameter vector.\n    maxls : int, optional\n        Maximum number of line search steps (per iteration). Default is 20.\n    \n    Returns\n    -------\n    x : array_like\n        Estimated position of the minimum.\n    f : float\n        Value of `func` at the minimum.\n    d : dict\n        Information dictionary.\n    \n        * d['warnflag'] is\n    \n          - 0 if converged,\n          - 1 if too many function evaluations or too many iterations,\n          - 2 if stopped for another reason, given in d['task']\n    \n        * d['grad'] is the gradient at the minimum (should be 0 ish)\n        * d['funcalls'] is the number of function calls made.\n        * d['nit'] is the number of iterations.\n    \n    See also\n    --------\n    minimize: Interface to minimization algorithms for multivariate\n        functions. See the 'L-BFGS-B' `method` in particular. Note that the\n        `ftol` option is made available via that interface, while `factr` is\n        provided via this interface, where `factr` is the factor multiplying\n        the default machine floating-point precision to arrive at `ftol`:\n        ``ftol = factr * numpy.finfo(float).eps``.\n    \n    Notes\n    -----\n    SciPy uses a C-translated and modified version of the Fortran code,\n    L-BFGS-B v3.0 (released April 25, 2011, BSD-3 licensed). Original Fortran\n    version was written by Ciyou Zhu, Richard Byrd, Jorge Nocedal and,\n    Jose Luis Morales.\n    \n    References\n    ----------\n    * R. H. Byrd, P. Lu and J. Nocedal. A Limited Memory Algorithm for Bound\n      Constrained Optimization, (1995), SIAM Journal on Scientific and\n      Statistical Computing, 16, 5, pp. 1190-1208.\n    * C. Zhu, R. H. Byrd and J. Nocedal. L-BFGS-B: Algorithm 778: L-BFGS-B,\n      FORTRAN routines for large scale bound constrained optimization (1997),\n      ACM Transactions on Mathematical Software, 23, 4, pp. 550 - 560.\n    * J.L. Morales and J. Nocedal. L-BFGS-B: Remark on Algorithm 778: L-BFGS-B,\n      FORTRAN routines for large scale bound constrained optimization (2011),\n      ACM Transactions on Mathematical Software, 38, 1.\n    \n    Examples\n    --------\n    Solve a linear regression problem via `fmin_l_bfgs_b`. To do this, first we\n    define an objective function ``f(m, b) = (y - y_model)**2``, where `y`\n    describes the observations and `y_model` the prediction of the linear model\n    as ``y_model = m*x + b``. The bounds for the parameters, ``m`` and ``b``,\n    are arbitrarily chosen as ``(0,5)`` and ``(5,10)`` for this example.\n    \n    >>> import numpy as np\n    >>> from scipy.optimize import fmin_l_bfgs_b\n    >>> X = np.arange(0, 10, 1)\n    >>> M = 2\n    >>> B = 3\n    >>> Y = M * X + B\n    >>> def func(parameters, *args):\n    ...     x = args[0]\n    ...     y = args[1]\n    ...     m, b = parameters\n    ...     y_model = m*x + b\n    ...     error = sum(np.power((y - y_model), 2))\n    ...     return error\n    \n    >>> initial_values = np.array([0.0, 1.0])\n    \n    >>> x_opt, f_opt, info = fmin_l_bfgs_b(func, x0=initial_values, args=(X, Y),\n    ...                                    approx_grad=True)\n    >>> x_opt, f_opt\n    array([1.99999999, 3.00000006]), 1.7746231151323805e-14  # may vary\n    \n    The optimized parameters in ``x_opt`` agree with the ground truth parameters\n    ``m`` and ``b``. Next, let us perform a bound constrained optimization using\n    the `bounds` parameter.\n    \n    >>> bounds = [(0, 5), (5, 10)]\n    >>> x_opt, f_op, info = fmin_l_bfgs_b(func, x0=initial_values, args=(X, Y),\n    ...                                   approx_grad=True, bounds=bounds)\n    >>> x_opt, f_opt\n    array([1.65990508, 5.31649385]), 15.721334516453945  # may vary",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "db1611ff0e888c7afde1f13408912261528824a7c6fc93d76aded061a7115dbd",
            "fields": [
                {
                    "id": "eox5kvfx",
                    "encoding": "",
                    "name": "func",
                    "value": "",
                    "defaultValue": "",
                    "description": "Function to minimize.",
                    "type": "callable f(x,*args)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ao4h1ik4",
                    "encoding": "",
                    "name": "x0",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial guess.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xqyszyvk",
                    "encoding": "",
                    "name": "fprime",
                    "value": "",
                    "defaultValue": "",
                    "description": "The gradient of `func`. If None, then `func` returns the function\nvalue and the gradient (``f, g = func(x, *args)``), unless\n`approx_grad` is True in which case `func` returns only ``f``.",
                    "type": "callable fprime(x,*args)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dpqjviko",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Arguments to pass to `func` and `fprime`.",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1julpkx1",
                    "encoding": "",
                    "name": "approx_grad",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Whether to approximate the gradient numerically (in which case\n`func` returns only the function value).",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cvz20l8i",
                    "encoding": "",
                    "name": "bounds",
                    "value": "",
                    "defaultValue": "",
                    "description": "``(min, max)`` pairs for each element in ``x``, defining\nthe bounds on that parameter. Use None or +-inf for one of ``min`` or\n``max`` when there is no bound in that direction.",
                    "type": "list",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t2mckqst",
                    "encoding": "",
                    "name": "m",
                    "value": 10,
                    "defaultValue": 10,
                    "description": "The maximum number of variable metric corrections\nused to define the limited memory matrix. (The limited memory BFGS\nmethod does not store the full hessian but uses this many terms in an\napproximation to it.)",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gdzq005o",
                    "encoding": "",
                    "name": "factr",
                    "value": 10000000.0,
                    "defaultValue": 10000000.0,
                    "description": "The iteration stops when\n``(f^k - f^{k+1})/max{|f^k|,|f^{k+1}|,1} <= factr * eps``,\nwhere ``eps`` is the machine precision, which is automatically\ngenerated by the code. Typical values for `factr` are: 1e12 for\nlow accuracy; 1e7 for moderate accuracy; 10.0 for extremely\nhigh accuracy. See Notes for relationship to `ftol`, which is exposed\n(instead of `factr`) by the `scipy.optimize.minimize` interface to\nL-BFGS-B.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a4mci3bv",
                    "encoding": "",
                    "name": "pgtol",
                    "value": 1e-05,
                    "defaultValue": 1e-05,
                    "description": "The iteration will stop when\n``max{|proj g_i | i = 1, ..., n} <= pgtol``\nwhere ``proj g_i`` is the i-th component of the projected gradient.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gai5ohhi",
                    "encoding": "",
                    "name": "epsilon",
                    "value": 1e-08,
                    "defaultValue": 1e-08,
                    "description": "Step size used when `approx_grad` is True, for numerically\ncalculating the gradient",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9cbhx86x",
                    "encoding": "",
                    "name": "iprint",
                    "value": "builtins.object",
                    "defaultValue": "builtins.object",
                    "description": "Deprecated option that previously controlled the text printed on the\nscreen during the problem solution. Now the code does not emit any\noutput and this keyword has no function.\n\n.. deprecated:: 1.15.0\n    This keyword is deprecated and will be removed from SciPy 1.18.0.",
                    "type": "builtins.object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "45beig3c",
                    "encoding": "",
                    "name": "maxfun",
                    "value": 15000,
                    "defaultValue": 15000,
                    "description": "Maximum number of function evaluations. Note that this function\nmay violate the limit because of evaluating gradients by numerical\ndifferentiation.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cqlc9e3j",
                    "encoding": "",
                    "name": "maxiter",
                    "value": 15000,
                    "defaultValue": 15000,
                    "description": "Maximum number of iterations.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mmmz3oor",
                    "encoding": "",
                    "name": "disp",
                    "value": "builtins.object",
                    "defaultValue": "builtins.object",
                    "description": "Deprecated option that previously controlled the text printed on the\nscreen during the problem solution. Now the code does not emit any\noutput and this keyword has no function.\n\n.. deprecated:: 1.15.0\n    This keyword is deprecated and will be removed from SciPy 1.18.0.",
                    "type": "builtins.object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ax98gllg",
                    "encoding": "",
                    "name": "callback",
                    "value": "",
                    "defaultValue": "",
                    "description": "Called after each iteration, as ``callback(xk)``, where ``xk`` is the\ncurrent parameter vector.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kvyaba6v",
                    "encoding": "",
                    "name": "maxls",
                    "value": 20,
                    "defaultValue": 20,
                    "description": "Maximum number of line search steps (per iteration). Default is 20.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x613siu_",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.fmin_l_bfgs_b",
                    "defaultValue": "scipy.optimize.fmin_l_bfgs_b",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6u5cp7gu",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "omtuhkfj",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "vepjpx1d",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o71ca_rz",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize",
                    "defaultValue": "scipy.optimize",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2oj3i0tp",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u0v3hkay",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "n0r7_ssl",
            "name": "optimize.fmin_ncg",
            "description": "Unconstrained minimization of a function using the Newton-CG method.\n    \n    Parameters\n    ----------\n    f : callable ``f(x, *args)``\n        Objective function to be minimized.\n    x0 : ndarray\n        Initial guess.\n    fprime : callable ``f'(x, *args)``\n        Gradient of f.\n    fhess_p : callable ``fhess_p(x, p, *args)``, optional\n        Function which computes the Hessian of f times an\n        arbitrary vector, p.\n    fhess : callable ``fhess(x, *args)``, optional\n        Function to compute the Hessian matrix of f.\n    args : tuple, optional\n        Extra arguments passed to f, fprime, fhess_p, and fhess\n        (the same set of extra arguments is supplied to all of\n        these functions).\n    epsilon : float or ndarray, optional\n        If fhess is approximated, use this value for the step size.\n    callback : callable, optional\n        An optional user-supplied function which is called after\n        each iteration. Called as callback(xk), where xk is the\n        current parameter vector.\n    avextol : float, optional\n        Convergence is assumed when the average relative error in\n        the minimizer falls below this amount.\n    maxiter : int, optional\n        Maximum number of iterations to perform.\n    full_output : bool, optional\n        If True, return the optional outputs.\n    disp : bool, optional\n        If True, print convergence message.\n    retall : bool, optional\n        If True, return a list of results at each iteration.\n    c1 : float, default: 1e-4\n        Parameter for Armijo condition rule.\n    c2 : float, default: 0.9\n        Parameter for curvature condition rule\n    \n    Returns\n    -------\n    xopt : ndarray\n        Parameters which minimize f, i.e., ``f(xopt) == fopt``.\n    fopt : float\n        Value of the function at xopt, i.e., ``fopt = f(xopt)``.\n    fcalls : int\n        Number of function calls made.\n    gcalls : int\n        Number of gradient calls made.\n    hcalls : int\n        Number of Hessian calls made.\n    warnflag : int\n        Warnings generated by the algorithm.\n        1 : Maximum number of iterations exceeded.\n        2 : Line search failure (precision loss).\n        3 : NaN result encountered.\n    allvecs : list\n        The result at each iteration, if retall is True (see below).\n    \n    See also\n    --------\n    minimize: Interface to minimization algorithms for multivariate\n        functions. See the 'Newton-CG' `method` in particular.\n    \n    Notes\n    -----\n    Only one of `fhess_p` or `fhess` need to be given.  If `fhess`\n    is provided, then `fhess_p` will be ignored. If neither `fhess`\n    nor `fhess_p` is provided, then the hessian product will be\n    approximated using finite differences on `fprime`. `fhess_p`\n    must compute the hessian times an arbitrary vector. If it is not\n    given, finite-differences on `fprime` are used to compute\n    it.\n    \n    Newton-CG methods are also called truncated Newton methods. This\n    function differs from scipy.optimize.fmin_tnc because\n    \n    1. scipy.optimize.fmin_ncg is written purely in Python using NumPy\n        and scipy while scipy.optimize.fmin_tnc calls a C function.\n    2. scipy.optimize.fmin_ncg is only for unconstrained minimization\n        while scipy.optimize.fmin_tnc is for unconstrained minimization\n        or box constrained minimization. (Box constraints give\n        lower and upper bounds for each variable separately.)\n    \n    Parameters `c1` and `c2` must satisfy ``0 < c1 < c2 < 1``.\n    \n    References\n    ----------\n    Wright & Nocedal, 'Numerical Optimization', 1999, p. 140.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b29d2e0a85fd0612048ee2d98edb34a6c1e8e068e40f10678d4acd990dc5d915",
            "fields": [
                {
                    "id": "1av5mz3l",
                    "encoding": "",
                    "name": "f",
                    "value": "",
                    "defaultValue": "",
                    "description": "Objective function to be minimized.",
                    "type": "callable f(x, *args)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4lp_36a4",
                    "encoding": "",
                    "name": "x0",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial guess.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l9l5c4vd",
                    "encoding": "",
                    "name": "fprime",
                    "value": "",
                    "defaultValue": "",
                    "description": "Gradient of f.",
                    "type": "callable f'(x, *args)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xea1auxg",
                    "encoding": "",
                    "name": "fhess_p",
                    "value": "",
                    "defaultValue": "",
                    "description": "Function which computes the Hessian of f times an\narbitrary vector, p.",
                    "type": "callable fhessp(x, p, *args)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g47aquhp",
                    "encoding": "",
                    "name": "fhess",
                    "value": "",
                    "defaultValue": "",
                    "description": "Function to compute the Hessian matrix of f.",
                    "type": "callable fhess(x, *args)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sbuk3pdh",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Extra arguments passed to f, fprime, fhess_p, and fhess\n(the same set of extra arguments is supplied to all of\nthese functions).",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ag0fe5lm",
                    "encoding": "",
                    "name": "avextol",
                    "value": 1e-05,
                    "defaultValue": 1e-05,
                    "description": "Convergence is assumed when the average relative error in\nthe minimizer falls below this amount.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i8tylloh",
                    "encoding": "",
                    "name": "epsilon",
                    "value": "np.float64(1.4901161193847656e-08)",
                    "defaultValue": "np.float64(1.4901161193847656e-08)",
                    "description": "If fhess is approximated, use this value for the step size.",
                    "type": "numpy.float64",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dmyl30jr",
                    "encoding": "",
                    "name": "maxiter",
                    "value": "",
                    "defaultValue": "",
                    "description": "Maximum number of iterations to perform.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3uc2gsg0",
                    "encoding": "",
                    "name": "full_output",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "If True, return the optional outputs.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "guf91098",
                    "encoding": "",
                    "name": "disp",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "If True, print convergence message.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ju07rszf",
                    "encoding": "",
                    "name": "retall",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "If True, return a list of results at each iteration.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j18kksrv",
                    "encoding": "",
                    "name": "callback",
                    "value": "",
                    "defaultValue": "",
                    "description": "An optional user-supplied function which is called after\neach iteration. Called as callback(xk), where xk is the\ncurrent parameter vector.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_y75cjhg",
                    "encoding": "",
                    "name": "c1",
                    "value": 0.0001,
                    "defaultValue": 0.0001,
                    "description": "Parameter for Armijo condition rule.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "984x55hw",
                    "encoding": "",
                    "name": "c2",
                    "value": 0.9,
                    "defaultValue": 0.9,
                    "description": "Parameter for curvature condition rule",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gi6mn369",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.fmin_ncg",
                    "defaultValue": "scipy.optimize.fmin_ncg",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qoxrfdvn",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wk0tsqkp",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "_x6toprj",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1jvajkdz",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize",
                    "defaultValue": "scipy.optimize",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rh46ul58",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zost4hui",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ht7uxj8g",
            "name": "optimize.fmin_powell",
            "description": "Minimize a function using modified Powell's method.\n    \n    This method only uses function values, not derivatives.\n    \n    Parameters\n    ----------\n    func : callable f(x,*args)\n        Objective function to be minimized.\n    x0 : ndarray\n        Initial guess.\n    args : tuple, optional\n        Extra arguments passed to func.\n    xtol : float, optional\n        Line-search error tolerance.\n    ftol : float, optional\n        Relative error in ``func(xopt)`` acceptable for convergence.\n    maxiter : int, optional\n        Maximum number of iterations to perform.\n    maxfun : int, optional\n        Maximum number of function evaluations to make.\n    full_output : bool, optional\n        If True, ``fopt``, ``xi``, ``direc``, ``iter``, ``funcalls``, and\n        ``warnflag`` are returned.\n    disp : bool, optional\n        If True, print convergence messages.\n    retall : bool, optional\n        If True, return a list of the solution at each iteration.\n    callback : callable, optional\n        An optional user-supplied function, called after each\n        iteration.  Called as ``callback(xk)``, where ``xk`` is the\n        current parameter vector.\n    direc : ndarray, optional\n        Initial fitting step and parameter order set as an (N, N) array, where N\n        is the number of fitting parameters in `x0`. Defaults to step size 1.0\n        fitting all parameters simultaneously (``np.eye((N, N))``). To\n        prevent initial consideration of values in a step or to change initial\n        step size, set to 0 or desired step size in the Jth position in the Mth\n        block, where J is the position in `x0` and M is the desired evaluation\n        step, with steps being evaluated in index order. Step size and ordering\n        will change freely as minimization proceeds.\n    \n    Returns\n    -------\n    xopt : ndarray\n        Parameter which minimizes `func`.\n    fopt : number\n        Value of function at minimum: ``fopt = func(xopt)``.\n    direc : ndarray\n        Current direction set.\n    iter : int\n        Number of iterations.\n    funcalls : int\n        Number of function calls made.\n    warnflag : int\n        Integer warning flag:\n            1 : Maximum number of function evaluations.\n            2 : Maximum number of iterations.\n            3 : NaN result encountered.\n            4 : The result is out of the provided bounds.\n    allvecs : list\n        List of solutions at each iteration.\n    \n    See also\n    --------\n    minimize: Interface to unconstrained minimization algorithms for\n        multivariate functions. See the 'Powell' method in particular.\n    \n    Notes\n    -----\n    Uses a modification of Powell's method to find the minimum of\n    a function of N variables. Powell's method is a conjugate\n    direction method.\n    \n    The algorithm has two loops. The outer loop merely iterates over the inner\n    loop. The inner loop minimizes over each current direction in the direction\n    set. At the end of the inner loop, if certain conditions are met, the\n    direction that gave the largest decrease is dropped and replaced with the\n    difference between the current estimated x and the estimated x from the\n    beginning of the inner-loop.\n    \n    The technical conditions for replacing the direction of greatest\n    increase amount to checking that\n    \n    1. No further gain can be made along the direction of greatest increase\n       from that iteration.\n    2. The direction of greatest increase accounted for a large sufficient\n       fraction of the decrease in the function value from that iteration of\n       the inner loop.\n    \n    References\n    ----------\n    Powell M.J.D. (1964) An efficient method for finding the minimum of a\n    function of several variables without calculating derivatives,\n    Computer Journal, 7 (2):155-162.\n    \n    Press W., Teukolsky S.A., Vetterling W.T., and Flannery B.P.:\n    Numerical Recipes (any edition), Cambridge University Press\n    \n    Examples\n    --------\n    >>> def f(x):\n    ...     return x**2\n    \n    >>> from scipy import optimize\n    \n    >>> minimum = optimize.fmin_powell(f, -1)\n    Optimization terminated successfully.\n             Current function value: 0.000000\n             Iterations: 2\n             Function evaluations: 16\n    >>> minimum\n    array(0.0)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "51406de63816ca8979740e580cd1b6d8330c0b4e181e898141a50a6af2b0e48e",
            "fields": [
                {
                    "id": "_a7s4ghy",
                    "encoding": "",
                    "name": "func",
                    "value": "",
                    "defaultValue": "",
                    "description": "Objective function to be minimized.",
                    "type": "callable f(x,*args)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cs1y3l_7",
                    "encoding": "",
                    "name": "x0",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial guess.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lx5e6npw",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Extra arguments passed to func.",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2bk470m3",
                    "encoding": "",
                    "name": "xtol",
                    "value": 0.0001,
                    "defaultValue": 0.0001,
                    "description": "Line-search error tolerance.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u02yzrwi",
                    "encoding": "",
                    "name": "ftol",
                    "value": 0.0001,
                    "defaultValue": 0.0001,
                    "description": "Relative error in ``func(xopt)`` acceptable for convergence.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_cj01qsy",
                    "encoding": "",
                    "name": "maxiter",
                    "value": "",
                    "defaultValue": "",
                    "description": "Maximum number of iterations to perform.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dc610nn7",
                    "encoding": "",
                    "name": "maxfun",
                    "value": "",
                    "defaultValue": "",
                    "description": "Maximum number of function evaluations to make.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yyfqga0s",
                    "encoding": "",
                    "name": "full_output",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "If True, ``fopt``, ``xi``, ``direc``, ``iter``, ``funcalls``, and\n``warnflag`` are returned.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9xreiwus",
                    "encoding": "",
                    "name": "disp",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "If True, print convergence messages.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "10cmqkvz",
                    "encoding": "",
                    "name": "retall",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "If True, return a list of the solution at each iteration.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xds0ptvt",
                    "encoding": "",
                    "name": "callback",
                    "value": "",
                    "defaultValue": "",
                    "description": "An optional user-supplied function, called after each\niteration.  Called as ``callback(xk)``, where ``xk`` is the\ncurrent parameter vector.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "djibt6ba",
                    "encoding": "",
                    "name": "direc",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial fitting step and parameter order set as an (N, N) array, where N\nis the number of fitting parameters in `x0`. Defaults to step size 1.0\nfitting all parameters simultaneously (``np.eye((N, N))``). To\nprevent initial consideration of values in a step or to change initial\nstep size, set to 0 or desired step size in the Jth position in the Mth\nblock, where J is the position in `x0` and M is the desired evaluation\nstep, with steps being evaluated in index order. Step size and ordering\nwill change freely as minimization proceeds.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gcyhbk4b",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.fmin_powell",
                    "defaultValue": "scipy.optimize.fmin_powell",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "af18tume",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r3glw37s",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "6_dcfnv_",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "peu4r5w6",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize",
                    "defaultValue": "scipy.optimize",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fa6jx49v",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1gfrecl_",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "kjfd5mxb",
            "name": "optimize.fmin_slsqp",
            "description": "Minimize a function using Sequential Least Squares Programming\n    \n    Python interface function for the SLSQP Optimization subroutine\n    originally implemented by Dieter Kraft.\n    \n    Parameters\n    ----------\n    func : callable f(x,*args)\n        Objective function.  Must return a scalar.\n    x0 : 1-D ndarray of float\n        Initial guess for the independent variable(s).\n    eqcons : list, optional\n        A list of functions of length n such that\n        eqcons[j](x,*args) == 0.0 in a successfully optimized\n        problem.\n    f_eqcons : callable f(x,*args), optional\n        Returns a 1-D array in which each element must equal 0.0 in a\n        successfully optimized problem. If f_eqcons is specified,\n        eqcons is ignored.\n    ieqcons : list, optional\n        A list of functions of length n such that\n        ieqcons[j](x,*args) >= 0.0 in a successfully optimized\n        problem.\n    f_ieqcons : callable f(x,*args), optional\n        Returns a 1-D ndarray in which each element must be greater or\n        equal to 0.0 in a successfully optimized problem. If\n        f_ieqcons is specified, ieqcons is ignored.\n    bounds : list, optional\n        A list of tuples specifying the lower and upper bound\n        for each independent variable [(xl0, xu0),(xl1, xu1),...]\n        Infinite values will be interpreted as large floating values.\n    fprime : callable ``f(x,*args)``, optional\n        A function that evaluates the partial derivatives of func.\n    fprime_eqcons : callable ``f(x,*args)``, optional\n        A function of the form ``f(x, *args)`` that returns the m by n\n        array of equality constraint normals. If not provided,\n        the normals will be approximated. The array returned by\n        fprime_eqcons should be sized as ( len(eqcons), len(x0) ).\n    fprime_ieqcons : callable ``f(x,*args)``, optional\n        A function of the form ``f(x, *args)`` that returns the m by n\n        array of inequality constraint normals. If not provided,\n        the normals will be approximated. The array returned by\n        fprime_ieqcons should be sized as ( len(ieqcons), len(x0) ).\n    args : sequence, optional\n        Additional arguments passed to func and fprime.\n    iter : int, optional\n        The maximum number of iterations.\n    acc : float, optional\n        Requested accuracy.\n    iprint : int, optional\n        The verbosity of fmin_slsqp :\n    \n        * iprint <= 0 : Silent operation\n        * iprint == 1 : Print summary upon completion (default)\n        * iprint >= 2 : Print status of each iterate and summary\n    disp : int, optional\n        Overrides the iprint interface (preferred).\n    full_output : bool, optional\n        If False, return only the minimizer of func (default).\n        Otherwise, output final objective function and summary\n        information.\n    epsilon : float, optional\n        The step size for finite-difference derivative estimates.\n    callback : callable, optional\n        Called after each iteration, as ``callback(x)``, where ``x`` is the\n        current parameter vector.\n    \n    Returns\n    -------\n    out : ndarray of float\n        The final minimizer of func.\n    fx : ndarray of float, if full_output is true\n        The final value of the objective function.\n    its : int, if full_output is true\n        The number of iterations.\n    imode : int, if full_output is true\n        The exit mode from the optimizer (see below).\n    smode : string, if full_output is true\n        Message describing the exit mode from the optimizer.\n    \n    See also\n    --------\n    minimize: Interface to minimization algorithms for multivariate\n        functions. See the 'SLSQP' `method` in particular.\n    \n    Notes\n    -----\n    Exit modes are defined as follows:\n    \n    - ``-1`` : Gradient evaluation required (g & a)\n    - ``0`` : Optimization terminated successfully\n    - ``1`` : Function evaluation required (f & c)\n    - ``2`` : More equality constraints than independent variables\n    - ``3`` : More than 3*n iterations in LSQ subproblem\n    - ``4`` : Inequality constraints incompatible\n    - ``5`` : Singular matrix E in LSQ subproblem\n    - ``6`` : Singular matrix C in LSQ subproblem\n    - ``7`` : Rank-deficient equality constraint subproblem HFTI\n    - ``8`` : Positive directional derivative for linesearch\n    - ``9`` : Iteration limit reached\n    \n    Examples\n    --------\n    Examples are given :ref:`in the tutorial <tutorial-sqlsp>`.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4408f017738535a4acf7b2d8da5afa398d2877ea5d38b006fc367deaff2b573a",
            "fields": [
                {
                    "id": "yqqpj_tq",
                    "encoding": "",
                    "name": "func",
                    "value": "",
                    "defaultValue": "",
                    "description": "Objective function.  Must return a scalar.",
                    "type": "callable f(x,*args)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m0vqy3w3",
                    "encoding": "",
                    "name": "x0",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial guess for the independent variable(s).",
                    "type": "1-D ndarray of float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bzmazs8l",
                    "encoding": "",
                    "name": "eqcons",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "A list of functions of length n such that\neqcons[j](x,*args) == 0.0 in a successfully optimized\nproblem.",
                    "type": "builtins.tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4afi_si4",
                    "encoding": "",
                    "name": "f_eqcons",
                    "value": "",
                    "defaultValue": "",
                    "description": "Returns a 1-D array in which each element must equal 0.0 in a\nsuccessfully optimized problem. If f_eqcons is specified,\neqcons is ignored.",
                    "type": "callable f(x,*args)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "719hag9j",
                    "encoding": "",
                    "name": "ieqcons",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "A list of functions of length n such that\nieqcons[j](x,*args) >= 0.0 in a successfully optimized\nproblem.",
                    "type": "builtins.tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hsquaqj5",
                    "encoding": "",
                    "name": "f_ieqcons",
                    "value": "",
                    "defaultValue": "",
                    "description": "Returns a 1-D ndarray in which each element must be greater or\nequal to 0.0 in a successfully optimized problem. If\nf_ieqcons is specified, ieqcons is ignored.",
                    "type": "callable f(x,*args)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q19k5r55",
                    "encoding": "",
                    "name": "bounds",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "A list of tuples specifying the lower and upper bound\nfor each independent variable [(xl0, xu0),(xl1, xu1),...]\nInfinite values will be interpreted as large floating values.",
                    "type": "builtins.tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k3996ak0",
                    "encoding": "",
                    "name": "fprime",
                    "value": "",
                    "defaultValue": "",
                    "description": "A function that evaluates the partial derivatives of func.",
                    "type": "callable f(x,*args)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7b67ae1j",
                    "encoding": "",
                    "name": "fprime_eqcons",
                    "value": "",
                    "defaultValue": "",
                    "description": "A function of the form ``f(x, *args)`` that returns the m by n\narray of equality constraint normals. If not provided,\nthe normals will be approximated. The array returned by\nfprime_eqcons should be sized as ( len(eqcons), len(x0) ).",
                    "type": "callable f(x,*args)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zv2cjwbk",
                    "encoding": "",
                    "name": "fprime_ieqcons",
                    "value": "",
                    "defaultValue": "",
                    "description": "A function of the form ``f(x, *args)`` that returns the m by n\narray of inequality constraint normals. If not provided,\nthe normals will be approximated. The array returned by\nfprime_ieqcons should be sized as ( len(ieqcons), len(x0) ).",
                    "type": "callable f(x,*args)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ihy9a3fh",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Additional arguments passed to func and fprime.",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yckxg4w5",
                    "encoding": "",
                    "name": "iter",
                    "value": 100,
                    "defaultValue": 100,
                    "description": "The maximum number of iterations.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eqkmbjp1",
                    "encoding": "",
                    "name": "acc",
                    "value": 1e-06,
                    "defaultValue": 1e-06,
                    "description": "Requested accuracy.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gnjoyte1",
                    "encoding": "",
                    "name": "iprint",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "The verbosity of fmin_slsqp :\n\n* iprint <= 0 : Silent operation\n* iprint == 1 : Print summary upon completion (default)\n* iprint >= 2 : Print status of each iterate and summary",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qnkpgbsj",
                    "encoding": "",
                    "name": "disp",
                    "value": "",
                    "defaultValue": "",
                    "description": "Overrides the iprint interface (preferred).",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1flledax",
                    "encoding": "",
                    "name": "full_output",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "If False, return only the minimizer of func (default).\nOtherwise, output final objective function and summary\ninformation.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bdxoi_a8",
                    "encoding": "",
                    "name": "epsilon",
                    "value": "np.float64(1.4901161193847656e-08)",
                    "defaultValue": "np.float64(1.4901161193847656e-08)",
                    "description": "The step size for finite-difference derivative estimates.",
                    "type": "numpy.float64",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7w4rlv2c",
                    "encoding": "",
                    "name": "callback",
                    "value": "",
                    "defaultValue": "",
                    "description": "Called after each iteration, as ``callback(x)``, where ``x`` is the\ncurrent parameter vector.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q5mbrz15",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.fmin_slsqp",
                    "defaultValue": "scipy.optimize.fmin_slsqp",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cy9fewnf",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fvh3_frp",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "nl3v29sp",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ha25_pcc",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize",
                    "defaultValue": "scipy.optimize",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "feuakomz",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hj3z5m2n",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "kqyiwnmb",
            "name": "optimize.fmin_tnc",
            "description": "Minimize a function with variables subject to bounds, using\n    gradient information in a truncated Newton algorithm. This\n    method wraps a C implementation of the algorithm.\n    \n    Parameters\n    ----------\n    func : callable ``func(x, *args)``\n        Function to minimize.  Must do one of:\n    \n        1. Return f and g, where f is the value of the function and g its\n           gradient (a list of floats).\n    \n        2. Return the function value but supply gradient function\n           separately as `fprime`.\n    \n        3. Return the function value and set ``approx_grad=True``.\n    \n        If the function returns None, the minimization\n        is aborted.\n    x0 : array_like\n        Initial estimate of minimum.\n    fprime : callable ``fprime(x, *args)``, optional\n        Gradient of `func`. If None, then either `func` must return the\n        function value and the gradient (``f,g = func(x, *args)``)\n        or `approx_grad` must be True.\n    args : tuple, optional\n        Arguments to pass to function.\n    approx_grad : bool, optional\n        If true, approximate the gradient numerically.\n    bounds : list, optional\n        (min, max) pairs for each element in x0, defining the\n        bounds on that parameter. Use None or +/-inf for one of\n        min or max when there is no bound in that direction.\n    epsilon : float, optional\n        Used if approx_grad is True. The stepsize in a finite\n        difference approximation for fprime.\n    scale : array_like, optional\n        Scaling factors to apply to each variable. If None, the\n        factors are up-low for interval bounded variables and\n        1+|x| for the others. Defaults to None.\n    offset : array_like, optional\n        Value to subtract from each variable. If None, the\n        offsets are (up+low)/2 for interval bounded variables\n        and x for the others.\n    messages : int, optional\n        Bit mask used to select messages display during\n        minimization values defined in the MSGS dict. Defaults to\n        MGS_ALL.\n    disp : int, optional\n        Integer interface to messages. 0 = no message, 5 = all messages\n    maxCGit : int, optional\n        Maximum number of hessian*vector evaluations per main\n        iteration. If maxCGit == 0, the direction chosen is\n        -gradient if maxCGit < 0, maxCGit is set to\n        max(1,min(50,n/2)). Defaults to -1.\n    maxfun : int, optional\n        Maximum number of function evaluation. If None, maxfun is\n        set to max(100, 10*len(x0)). Defaults to None. Note that this function\n        may violate the limit because of evaluating gradients by numerical\n        differentiation.\n    eta : float, optional\n        Severity of the line search. If < 0 or > 1, set to 0.25.\n        Defaults to -1.\n    stepmx : float, optional\n        Maximum step for the line search. May be increased during\n        call. If too small, it will be set to 10.0. Defaults to 0.\n    accuracy : float, optional\n        Relative precision for finite difference calculations. If\n        <= machine_precision, set to sqrt(machine_precision).\n        Defaults to 0.\n    fmin : float, optional\n        Minimum function value estimate. Defaults to 0.\n    ftol : float, optional\n        Precision goal for the value of f in the stopping criterion.\n        If ftol < 0.0, ftol is set to 0.0 defaults to -1.\n    xtol : float, optional\n        Precision goal for the value of x in the stopping\n        criterion (after applying x scaling factors). If xtol <\n        0.0, xtol is set to sqrt(machine_precision). Defaults to\n        -1.\n    pgtol : float, optional\n        Precision goal for the value of the projected gradient in\n        the stopping criterion (after applying x scaling factors).\n        If pgtol < 0.0, pgtol is set to 1e-2 * sqrt(accuracy).\n        Setting it to 0.0 is not recommended. Defaults to -1.\n    rescale : float, optional\n        Scaling factor (in log10) used to trigger f value\n        rescaling. If 0, rescale at each iteration. If a large\n        value, never rescale. If < 0, rescale is set to 1.3.\n    callback : callable, optional\n        Called after each iteration, as callback(xk), where xk is the\n        current parameter vector.\n    \n    Returns\n    -------\n    x : ndarray\n        The solution.\n    nfeval : int\n        The number of function evaluations.\n    rc : int\n        Return code, see below\n    \n    See also\n    --------\n    minimize: Interface to minimization algorithms for multivariate\n        functions. See the 'TNC' `method` in particular.\n    \n    Notes\n    -----\n    The underlying algorithm is truncated Newton, also called\n    Newton Conjugate-Gradient. This method differs from\n    scipy.optimize.fmin_ncg in that\n    \n    1. it wraps a C implementation of the algorithm\n    2. it allows each variable to be given an upper and lower bound.\n    \n    The algorithm incorporates the bound constraints by determining\n    the descent direction as in an unconstrained truncated Newton,\n    but never taking a step-size large enough to leave the space\n    of feasible x's. The algorithm keeps track of a set of\n    currently active constraints, and ignores them when computing\n    the minimum allowable step size. (The x's associated with the\n    active constraint are kept fixed.) If the maximum allowable\n    step size is zero then a new constraint is added. At the end\n    of each iteration one of the constraints may be deemed no\n    longer active and removed. A constraint is considered\n    no longer active is if it is currently active\n    but the gradient for that variable points inward from the\n    constraint. The specific constraint removed is the one\n    associated with the variable of largest index whose\n    constraint is no longer active.\n    \n    Return codes are defined as follows:\n    \n    - ``-1`` : Infeasible (lower bound > upper bound)\n    - ``0`` : Local minimum reached (:math:`|pg| \\approx 0`)\n    - ``1`` : Converged (:math:`|f_n-f_(n-1)| \\approx 0`)\n    - ``2`` : Converged (:math:`|x_n-x_(n-1)| \\approx 0`)\n    - ``3`` : Max. number of function evaluations reached\n    - ``4`` : Linear search failed\n    - ``5`` : All lower bounds are equal to the upper bounds\n    - ``6`` : Unable to progress\n    - ``7`` : User requested end of minimization\n    \n    References\n    ----------\n    Wright S., Nocedal J. (2006), 'Numerical Optimization'\n    \n    Nash S.G. (1984), \"Newton-Type Minimization Via the Lanczos Method\",\n    SIAM Journal of Numerical Analysis 21, pp. 770-778",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5a72f4c0b01d23eb0625fb74638fe53315814127601087e8cb99aee5212e1bbf",
            "fields": [
                {
                    "id": "6u5bb6k5",
                    "encoding": "",
                    "name": "func",
                    "value": "",
                    "defaultValue": "",
                    "description": "Function to minimize.  Must do one of:\n\n1. Return f and g, where f is the value of the function and g its\n   gradient (a list of floats).\n\n2. Return the function value but supply gradient function\n   separately as `fprime`.\n\n3. Return the function value and set ``approx_grad=True``.\n\nIf the function returns None, the minimization\nis aborted.",
                    "type": "callable func(x, *args)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "do14h52f",
                    "encoding": "",
                    "name": "x0",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial estimate of minimum.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xt4wm0m5",
                    "encoding": "",
                    "name": "fprime",
                    "value": "",
                    "defaultValue": "",
                    "description": "Gradient of `func`. If None, then either `func` must return the\nfunction value and the gradient (``f,g = func(x, *args)``)\nor `approx_grad` must be True.",
                    "type": "callable fprime(x, *args)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7p0hke4t",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Arguments to pass to function.",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9r3ubju7",
                    "encoding": "",
                    "name": "approx_grad",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "If true, approximate the gradient numerically.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "23ftjrk8",
                    "encoding": "",
                    "name": "bounds",
                    "value": "",
                    "defaultValue": "",
                    "description": "(min, max) pairs for each element in x0, defining the\nbounds on that parameter. Use None or +/-inf for one of\nmin or max when there is no bound in that direction.",
                    "type": "list",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "su8epq_y",
                    "encoding": "",
                    "name": "epsilon",
                    "value": 1e-08,
                    "defaultValue": 1e-08,
                    "description": "Used if approx_grad is True. The stepsize in a finite\ndifference approximation for fprime.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qnlx0_7o",
                    "encoding": "",
                    "name": "scale",
                    "value": "",
                    "defaultValue": "",
                    "description": "Scaling factors to apply to each variable. If None, the\nfactors are up-low for interval bounded variables and\n1+|x| for the others. Defaults to None.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ynf3e3jw",
                    "encoding": "",
                    "name": "offset",
                    "value": "",
                    "defaultValue": "",
                    "description": "Value to subtract from each variable. If None, the\noffsets are (up+low)/2 for interval bounded variables\nand x for the others.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hmra_psl",
                    "encoding": "",
                    "name": "messages",
                    "value": 15,
                    "defaultValue": 15,
                    "description": "Bit mask used to select messages display during\nminimization values defined in the MSGS dict. Defaults to\nMGS_ALL.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zmiue879",
                    "encoding": "",
                    "name": "maxCGit",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "Maximum number of hessian*vector evaluations per main\niteration. If maxCGit == 0, the direction chosen is\n-gradient if maxCGit < 0, maxCGit is set to\nmax(1,min(50,n/2)). Defaults to -1.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k0zvvo9l",
                    "encoding": "",
                    "name": "maxfun",
                    "value": "",
                    "defaultValue": "",
                    "description": "Maximum number of function evaluation. If None, maxfun is\nset to max(100, 10*len(x0)). Defaults to None. Note that this function\nmay violate the limit because of evaluating gradients by numerical\ndifferentiation.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7mxnl38s",
                    "encoding": "",
                    "name": "eta",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "Severity of the line search. If < 0 or > 1, set to 0.25.\nDefaults to -1.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zrjpboty",
                    "encoding": "",
                    "name": "stepmx",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Maximum step for the line search. May be increased during\ncall. If too small, it will be set to 10.0. Defaults to 0.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g1r7jysz",
                    "encoding": "",
                    "name": "accuracy",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Relative precision for finite difference calculations. If\n<= machine_precision, set to sqrt(machine_precision).\nDefaults to 0.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1ms87q2v",
                    "encoding": "",
                    "name": "fmin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Minimum function value estimate. Defaults to 0.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "thsr7quq",
                    "encoding": "",
                    "name": "ftol",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "Precision goal for the value of f in the stopping criterion.\nIf ftol < 0.0, ftol is set to 0.0 defaults to -1.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "947_6fff",
                    "encoding": "",
                    "name": "xtol",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "Precision goal for the value of x in the stopping\ncriterion (after applying x scaling factors). If xtol <\n0.0, xtol is set to sqrt(machine_precision). Defaults to\n-1.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "684xu93y",
                    "encoding": "",
                    "name": "pgtol",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "Precision goal for the value of the projected gradient in\nthe stopping criterion (after applying x scaling factors).\nIf pgtol < 0.0, pgtol is set to 1e-2 * sqrt(accuracy).\nSetting it to 0.0 is not recommended. Defaults to -1.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "akvbv8jx",
                    "encoding": "",
                    "name": "rescale",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "Scaling factor (in log10) used to trigger f value\nrescaling. If 0, rescale at each iteration. If a large\nvalue, never rescale. If < 0, rescale is set to 1.3.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o7ypadp8",
                    "encoding": "",
                    "name": "disp",
                    "value": "",
                    "defaultValue": "",
                    "description": "Integer interface to messages. 0 = no message, 5 = all messages",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jfptf7ly",
                    "encoding": "",
                    "name": "callback",
                    "value": "",
                    "defaultValue": "",
                    "description": "Called after each iteration, as callback(xk), where xk is the\ncurrent parameter vector.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r_6iw4pc",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.fmin_tnc",
                    "defaultValue": "scipy.optimize.fmin_tnc",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "odgp9sov",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8n8bx_32",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "jdvw6lqv",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vcfcr93m",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize",
                    "defaultValue": "scipy.optimize",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7hkws060",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ufwh_mw2",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "lae2mppa",
            "name": "optimize.fminbound",
            "description": "Bounded minimization for scalar functions.\n    \n    Parameters\n    ----------\n    func : callable f(x,*args)\n        Objective function to be minimized (must accept and return scalars).\n    x1, x2 : float or array scalar\n        Finite optimization bounds.\n    args : tuple, optional\n        Extra arguments passed to function.\n    xtol : float, optional\n        The convergence tolerance.\n    maxfun : int, optional\n        Maximum number of function evaluations allowed.\n    full_output : bool, optional\n        If True, return optional outputs.\n    disp: int, optional\n        If non-zero, print messages.\n    \n        ``0`` : no message printing.\n    \n        ``1`` : non-convergence notification messages only.\n    \n        ``2`` : print a message on convergence too.\n    \n        ``3`` : print iteration results.\n    \n    Returns\n    -------\n    xopt : ndarray\n        Parameters (over given interval) which minimize the\n        objective function.\n    fval : number\n        (Optional output) The function value evaluated at the minimizer.\n    ierr : int\n        (Optional output) An error flag (0 if converged, 1 if maximum number of\n        function calls reached).\n    numfunc : int\n        (Optional output) The number of function calls made.\n    \n    See also\n    --------\n    minimize_scalar: Interface to minimization algorithms for scalar\n        univariate functions. See the 'Bounded' `method` in particular.\n    \n    Notes\n    -----\n    Finds a local minimizer of the scalar function `func` in the\n    interval x1 < xopt < x2 using Brent's method. (See `brent`\n    for auto-bracketing.)\n    \n    References\n    ----------\n    .. [1] Forsythe, G.E., M. A. Malcolm, and C. B. Moler. \"Computer Methods\n           for Mathematical Computations.\" Prentice-Hall Series in Automatic\n           Computation 259 (1977).\n    .. [2] Brent, Richard P. Algorithms for Minimization Without Derivatives.\n           Courier Corporation, 2013.\n    \n    Examples\n    --------\n    `fminbound` finds the minimizer of the function in the given range.\n    The following examples illustrate this.\n    \n    >>> from scipy import optimize\n    >>> def f(x):\n    ...     return (x-1)**2\n    >>> minimizer = optimize.fminbound(f, -4, 4)\n    >>> minimizer\n    1.0\n    >>> minimum = f(minimizer)\n    >>> minimum\n    0.0\n    >>> res = optimize.fminbound(f, 3, 4, full_output=True)\n    >>> minimizer, fval, ierr, numfunc = res\n    >>> minimizer\n    3.000005960860986\n    >>> minimum = f(minimizer)\n    >>> minimum, fval\n    (4.000023843479476, 4.000023843479476)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1034989206ce612dfb57fe696bc2aa39bfe2ca95ba196a1a7cec04bfeb00c7fd",
            "fields": [
                {
                    "id": "yf06ank7",
                    "encoding": "",
                    "name": "func",
                    "value": "",
                    "defaultValue": "",
                    "description": "Objective function to be minimized (must accept and return scalars).",
                    "type": "callable f(x,*args)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m3g03_w_",
                    "encoding": "",
                    "name": "x1",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ts9k_8_s",
                    "encoding": "",
                    "name": "x2",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2ilu95n4",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Extra arguments passed to function.",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4omuriea",
                    "encoding": "",
                    "name": "xtol",
                    "value": 1e-05,
                    "defaultValue": 1e-05,
                    "description": "The convergence tolerance.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "exx18xya",
                    "encoding": "",
                    "name": "maxfun",
                    "value": 500,
                    "defaultValue": 500,
                    "description": "Maximum number of function evaluations allowed.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h0nwodid",
                    "encoding": "",
                    "name": "full_output",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "If True, return optional outputs.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v47whwnd",
                    "encoding": "",
                    "name": "disp",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "If non-zero, print messages.\n\n``0`` : no message printing.\n\n``1`` : non-convergence notification messages only.\n\n``2`` : print a message on convergence too.\n\n``3`` : print iteration results.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3034htbd",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.fminbound",
                    "defaultValue": "scipy.optimize.fminbound",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "idtdnaiy",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y9omsvxi",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "f9qeao1j",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3y5kvbp0",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize",
                    "defaultValue": "scipy.optimize",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hrn04x72",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ydbq82iv",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ayhs63h7",
            "name": "optimize.fsolve",
            "description": "Find the roots of a function.\n    \n    Return the roots of the (non-linear) equations defined by\n    ``func(x) = 0`` given a starting estimate.\n    \n    Parameters\n    ----------\n    func : callable ``f(x, *args)``\n        A function that takes at least one (possibly vector) argument,\n        and returns a value of the same length.\n    x0 : ndarray\n        The starting estimate for the roots of ``func(x) = 0``.\n    args : tuple, optional\n        Any extra arguments to `func`.\n    fprime : callable ``f(x, *args)``, optional\n        A function to compute the Jacobian of `func` with derivatives\n        across the rows. By default, the Jacobian will be estimated.\n    full_output : bool, optional\n        If True, return optional outputs.\n    col_deriv : bool, optional\n        Specify whether the Jacobian function computes derivatives down\n        the columns (faster, because there is no transpose operation).\n    xtol : float, optional\n        The calculation will terminate if the relative error between two\n        consecutive iterates is at most `xtol`.\n    maxfev : int, optional\n        The maximum number of calls to the function. If zero, then\n        ``100*(N+1)`` is the maximum where N is the number of elements\n        in `x0`.\n    band : tuple, optional\n        If set to a two-sequence containing the number of sub- and\n        super-diagonals within the band of the Jacobi matrix, the\n        Jacobi matrix is considered banded (only for ``fprime=None``).\n    epsfcn : float, optional\n        A suitable step length for the forward-difference\n        approximation of the Jacobian (for ``fprime=None``). If\n        `epsfcn` is less than the machine precision, it is assumed\n        that the relative errors in the functions are of the order of\n        the machine precision.\n    factor : float, optional\n        A parameter determining the initial step bound\n        (``factor * || diag * x||``). Should be in the interval\n        ``(0.1, 100)``.\n    diag : sequence, optional\n        N positive entries that serve as a scale factors for the\n        variables.\n    \n    Returns\n    -------\n    x : ndarray\n        The solution (or the result of the last iteration for\n        an unsuccessful call).\n    infodict : dict\n        A dictionary of optional outputs with the keys:\n    \n        ``nfev``\n            number of function calls\n        ``njev``\n            number of Jacobian calls\n        ``fvec``\n            function evaluated at the output\n        ``fjac``\n            the orthogonal matrix, q, produced by the QR\n            factorization of the final approximate Jacobian\n            matrix, stored column wise\n        ``r``\n            upper triangular matrix produced by QR factorization\n            of the same matrix\n        ``qtf``\n            the vector ``(transpose(q) * fvec)``\n    \n    ier : int\n        An integer flag.  Set to 1 if a solution was found, otherwise refer\n        to `mesg` for more information.\n    mesg : str\n        If no solution is found, `mesg` details the cause of failure.\n    \n    See Also\n    --------\n    root : Interface to root finding algorithms for multivariate\n           functions. See the ``method='hybr'`` in particular.\n    \n    Notes\n    -----\n    ``fsolve`` is a wrapper around MINPACK's hybrd and hybrj algorithms.\n    \n    Examples\n    --------\n    Find a solution to the system of equations:\n    ``x0*cos(x1) = 4,  x1*x0 - x1 = 5``.\n    \n    >>> import numpy as np\n    >>> from scipy.optimize import fsolve\n    >>> def func(x):\n    ...     return [x[0] * np.cos(x[1]) - 4,\n    ...             x[1] * x[0] - x[1] - 5]\n    >>> root = fsolve(func, [1, 1])\n    >>> root\n    array([6.50409711, 0.90841421])\n    >>> np.isclose(func(root), [0.0, 0.0])  # func(root) should be almost 0.0.\n    array([ True,  True])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d5087f744b1e3066e227691085fd867422c622fdc0cceddec12ebae28f8fb018",
            "fields": [
                {
                    "id": "gl9ffy8u",
                    "encoding": "",
                    "name": "func",
                    "value": "",
                    "defaultValue": "",
                    "description": "A function that takes at least one (possibly vector) argument,\nand returns a value of the same length.",
                    "type": "callable f(x, *args)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tx8y33h4",
                    "encoding": "",
                    "name": "x0",
                    "value": "",
                    "defaultValue": "",
                    "description": "The starting estimate for the roots of ``func(x) = 0``.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dke5z10_",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Any extra arguments to `func`.",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sc8dh4x4",
                    "encoding": "",
                    "name": "fprime",
                    "value": "",
                    "defaultValue": "",
                    "description": "A function to compute the Jacobian of `func` with derivatives\nacross the rows. By default, the Jacobian will be estimated.",
                    "type": "callable f(x, *args)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gph5jti0",
                    "encoding": "",
                    "name": "full_output",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "If True, return optional outputs.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iqop0vct",
                    "encoding": "",
                    "name": "col_deriv",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Specify whether the Jacobian function computes derivatives down\nthe columns (faster, because there is no transpose operation).",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ggfm5gkq",
                    "encoding": "",
                    "name": "xtol",
                    "value": 1.49012e-08,
                    "defaultValue": 1.49012e-08,
                    "description": "The calculation will terminate if the relative error between two\nconsecutive iterates is at most `xtol`.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qa32sxl4",
                    "encoding": "",
                    "name": "maxfev",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "The maximum number of calls to the function. If zero, then\n``100*(N+1)`` is the maximum where N is the number of elements\nin `x0`.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8zekns1n",
                    "encoding": "",
                    "name": "band",
                    "value": "",
                    "defaultValue": "",
                    "description": "If set to a two-sequence containing the number of sub- and\nsuper-diagonals within the band of the Jacobi matrix, the\nJacobi matrix is considered banded (only for ``fprime=None``).",
                    "type": "tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "918d3d0l",
                    "encoding": "",
                    "name": "epsfcn",
                    "value": "",
                    "defaultValue": "",
                    "description": "A suitable step length for the forward-difference\napproximation of the Jacobian (for ``fprime=None``). If\n`epsfcn` is less than the machine precision, it is assumed\nthat the relative errors in the functions are of the order of\nthe machine precision.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d1nr0_66",
                    "encoding": "",
                    "name": "factor",
                    "value": 100,
                    "defaultValue": 100,
                    "description": "A parameter determining the initial step bound\n(``factor * || diag * x||``). Should be in the interval\n``(0.1, 100)``.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kapdkyrl",
                    "encoding": "",
                    "name": "diag",
                    "value": "",
                    "defaultValue": "",
                    "description": "N positive entries that serve as a scale factors for the\nvariables.",
                    "type": "sequence",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "23cn22yj",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.fsolve",
                    "defaultValue": "scipy.optimize.fsolve",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wd4uj_pg",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ww6vz9l3",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "uit6zxtt",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o01k61td",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize",
                    "defaultValue": "scipy.optimize",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nj2zwm0t",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "id502un2",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "b5c4t9bk",
            "name": "optimize.golden",
            "description": "Return the minimizer of a function of one variable using the golden section\n    method.\n    \n    Given a function of one variable and a possible bracketing interval,\n    return a minimizer of the function isolated to a fractional precision of\n    tol.\n    \n    Parameters\n    ----------\n    func : callable func(x,*args)\n        Objective function to minimize.\n    args : tuple, optional\n        Additional arguments (if present), passed to func.\n    brack : tuple, optional\n        Either a triple ``(xa, xb, xc)`` where ``xa < xb < xc`` and\n        ``func(xb) < func(xa) and  func(xb) < func(xc)``, or a pair (xa, xb)\n        to be used as initial points for a downhill bracket search (see\n        `scipy.optimize.bracket`).\n        The minimizer ``x`` will not necessarily satisfy ``xa <= x <= xb``.\n    tol : float, optional\n        x tolerance stop criterion\n    full_output : bool, optional\n        If True, return optional outputs.\n    maxiter : int\n        Maximum number of iterations to perform.\n    \n    Returns\n    -------\n    xmin : ndarray\n        Optimum point.\n    fval : float\n        (Optional output) Optimum function value.\n    funcalls : int\n        (Optional output) Number of objective function evaluations made.\n    \n    See also\n    --------\n    minimize_scalar: Interface to minimization algorithms for scalar\n        univariate functions. See the 'Golden' `method` in particular.\n    \n    Notes\n    -----\n    Uses analog of bisection method to decrease the bracketed\n    interval.\n    \n    Examples\n    --------\n    We illustrate the behaviour of the function when `brack` is of\n    size 2 and 3, respectively. In the case where `brack` is of the\n    form (xa,xb), we can see for the given values, the output need\n    not necessarily lie in the range ``(xa, xb)``.\n    \n    >>> def f(x):\n    ...     return (x-1)**2\n    \n    >>> from scipy import optimize\n    \n    >>> minimizer = optimize.golden(f, brack=(1, 2))\n    >>> minimizer\n    1\n    >>> res = optimize.golden(f, brack=(-1, 0.5, 2), full_output=True)\n    >>> xmin, fval, funcalls = res\n    >>> f(xmin), fval\n    (9.925165290385052e-18, 9.925165290385052e-18)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a9841eb3138f4c6bf5d1f0e258ebe098dc459d4bf79328b70fe884e5c6467d64",
            "fields": [
                {
                    "id": "e25m_bzj",
                    "encoding": "",
                    "name": "func",
                    "value": "",
                    "defaultValue": "",
                    "description": "Objective function to minimize.",
                    "type": "callable func(x,*args)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "235291ue",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Additional arguments (if present), passed to func.",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jxgyljc_",
                    "encoding": "",
                    "name": "brack",
                    "value": "",
                    "defaultValue": "",
                    "description": "Either a triple ``(xa, xb, xc)`` where ``xa < xb < xc`` and\n``func(xb) < func(xa) and  func(xb) < func(xc)``, or a pair (xa, xb)\nto be used as initial points for a downhill bracket search (see\n`scipy.optimize.bracket`).\nThe minimizer ``x`` will not necessarily satisfy ``xa <= x <= xb``.",
                    "type": "tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "myaum7fe",
                    "encoding": "",
                    "name": "tol",
                    "value": "np.float64(1.4901161193847656e-08)",
                    "defaultValue": "np.float64(1.4901161193847656e-08)",
                    "description": "x tolerance stop criterion",
                    "type": "numpy.float64",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v89hz663",
                    "encoding": "",
                    "name": "full_output",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "If True, return optional outputs.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r8aknorp",
                    "encoding": "",
                    "name": "maxiter",
                    "value": 5000,
                    "defaultValue": 5000,
                    "description": "Maximum number of iterations to perform.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xi7f1y50",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.golden",
                    "defaultValue": "scipy.optimize.golden",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n37vk9kh",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4f76ntvl",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "33a5mh46",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gd31ay2c",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize",
                    "defaultValue": "scipy.optimize",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tonua9z2",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "urrk7ih1",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ij4n8sbx",
            "name": "optimize.isotonic_regression",
            "description": "Nonparametric isotonic regression.\n    \n    A (not strictly) monotonically increasing array `x` with the same length\n    as `y` is calculated by the pool adjacent violators algorithm (PAVA), see\n    [1]_. See the Notes section for more details.\n    \n    Parameters\n    ----------\n    y : (N,) array_like\n        Response variable.\n    weights : (N,) array_like or None\n        Case weights.\n    increasing : bool\n        If True, fit monotonic increasing, i.e. isotonic, regression.\n        If False, fit a monotonic decreasing, i.e. antitonic, regression.\n        Default is True.\n    \n    Returns\n    -------\n    res : OptimizeResult\n        The optimization result represented as a ``OptimizeResult`` object.\n        Important attributes are:\n    \n        - ``x``: The isotonic regression solution, i.e. an increasing (or\n          decreasing) array of the same length than y, with elements in the\n          range from min(y) to max(y).\n        - ``weights`` : Array with the sum of case weights for each block\n          (or pool) B.\n        - ``blocks``: Array of length B+1 with the indices of the start\n          positions of each block (or pool) B. The j-th block is given by\n          ``x[blocks[j]:blocks[j+1]]`` for which all values are the same.\n    \n    Notes\n    -----\n    Given data :math:`y` and case weights :math:`w`, the isotonic regression\n    solves the following optimization problem:\n    \n    .. math::\n    \n        \\operatorname{argmin}_{x_i} \\sum_i w_i (y_i - x_i)^2 \\quad\n        \\text{subject to } x_i \\leq x_j \\text{ whenever } i \\leq j \\,.\n    \n    For every input value :math:`y_i`, it generates a value :math:`x_i` such\n    that :math:`x` is increasing (but not strictly), i.e.\n    :math:`x_i \\leq x_{i+1}`. This is accomplished by the PAVA.\n    The solution consists of pools or blocks, i.e. neighboring elements of\n    :math:`x`, e.g. :math:`x_i` and :math:`x_{i+1}`, that all have the same\n    value.\n    \n    Most interestingly, the solution stays the same if the squared loss is\n    replaced by the wide class of Bregman functions which are the unique\n    class of strictly consistent scoring functions for the mean, see [2]_\n    and references therein.\n    \n    The implemented version of PAVA according to [1]_ has a computational\n    complexity of O(N) with input size N.\n    \n    References\n    ----------\n    .. [1] Busing, F. M. T. A. (2022).\n           Monotone Regression: A Simple and Fast O(n) PAVA Implementation.\n           Journal of Statistical Software, Code Snippets, 102(1), 1-25.\n           :doi:`10.18637/jss.v102.c01`\n    .. [2] Jordan, A.I., M\u00fchlemann, A. & Ziegel, J.F.\n           Characterizing the optimal solutions to the isotonic regression\n           problem for identifiable functionals.\n           Ann Inst Stat Math 74, 489-514 (2022).\n           :doi:`10.1007/s10463-021-00808-0`\n    \n    Examples\n    --------\n    This example demonstrates that ``isotonic_regression`` really solves a\n    constrained optimization problem.\n    \n    >>> import numpy as np\n    >>> from scipy.optimize import isotonic_regression, minimize\n    >>> y = [1.5, 1.0, 4.0, 6.0, 5.7, 5.0, 7.8, 9.0, 7.5, 9.5, 9.0]\n    >>> def objective(yhat, y):\n    ...     return np.sum((yhat - y)**2)\n    >>> def constraint(yhat, y):\n    ...     # This is for a monotonically increasing regression.\n    ...     return np.diff(yhat)\n    >>> result = minimize(objective, x0=y, args=(y,),\n    ...                   constraints=[{'type': 'ineq',\n    ...                                 'fun': lambda x: constraint(x, y)}])\n    >>> result.x\n    array([1.25      , 1.25      , 4.        , 5.56666667, 5.56666667,\n           5.56666667, 7.8       , 8.25      , 8.25      , 9.25      ,\n           9.25      ])\n    >>> result = isotonic_regression(y)\n    >>> result.x\n    array([1.25      , 1.25      , 4.        , 5.56666667, 5.56666667,\n           5.56666667, 7.8       , 8.25      , 8.25      , 9.25      ,\n           9.25      ])\n    \n    The big advantage of ``isotonic_regression`` compared to calling\n    ``minimize`` is that it is more user friendly, i.e. one does not need to\n    define objective and constraint functions, and that it is orders of\n    magnitudes faster. On commodity hardware (in 2023), for normal distributed\n    input y of length 1000, the minimizer takes about 4 seconds, while\n    ``isotonic_regression`` takes about 200 microseconds.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d6ef84d47d07cdea2b4ce1267db604dcad4ea425c2b781bed7616ee914b127c0",
            "fields": [
                {
                    "id": "jhmjg_3f",
                    "encoding": "",
                    "name": "y",
                    "value": "",
                    "defaultValue": "",
                    "description": "Response variable.",
                    "type": "npt.ArrayLike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ap9d5fah",
                    "encoding": "",
                    "name": "weights",
                    "value": "",
                    "defaultValue": "",
                    "description": "Case weights.",
                    "type": "npt.ArrayLike | None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4n9wul7_",
                    "encoding": "",
                    "name": "increasing",
                    "value": true,
                    "defaultValue": true,
                    "description": "If True, fit monotonic increasing, i.e. isotonic, regression.\nIf False, fit a monotonic decreasing, i.e. antitonic, regression.\nDefault is True.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7nox4l_z",
                    "encoding": "dill",
                    "name": "res",
                    "value": null,
                    "defaultValue": null,
                    "description": "The optimization result represented as a ``OptimizeResult`` object.\nImportant attributes are:\n\n- ``x``: The isotonic regression solution, i.e. an increasing (or\n  decreasing) array of the same length than y, with elements in the\n  range from min(y) to max(y).\n- ``weights`` : Array with the sum of case weights for each block\n  (or pool) B.\n- ``blocks``: Array of length B+1 with the indices of the start\n  positions of each block (or pool) B. The j-th block is given by\n  ``x[blocks[j]:blocks[j+1]]`` for which all values are the same.",
                    "type": "scipy.optimize._optimize.OptimizeResult",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zf3kzqe8",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.isotonic_regression",
                    "defaultValue": "scipy.optimize.isotonic_regression",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "on3mgidq",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s3th_2k3",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "havit4_d",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1xzhmmnr",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize",
                    "defaultValue": "scipy.optimize",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u8cgv99u",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gm2ayo6o",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "7oajlv00",
            "name": "optimize.least_squares",
            "description": "Solve a nonlinear least-squares problem with bounds on the variables.\n    \n    Given the residuals f(x) (an m-D real function of n real\n    variables) and the loss function rho(s) (a scalar function), `least_squares`\n    finds a local minimum of the cost function F(x)::\n    \n        minimize F(x) = 0.5 * sum(rho(f_i(x)**2), i = 0, ..., m - 1)\n        subject to lb <= x <= ub\n    \n    The purpose of the loss function rho(s) is to reduce the influence of\n    outliers on the solution.\n    \n    Parameters\n    ----------\n    fun : callable\n        Function which computes the vector of residuals, with the signature\n        ``fun(x, *args, **kwargs)``, i.e., the minimization proceeds with\n        respect to its first argument. The argument ``x`` passed to this\n        function is an ndarray of shape (n,) (never a scalar, even for n=1).\n        It must allocate and return a 1-D array_like of shape (m,) or a scalar.\n        If the argument ``x`` is complex or the function ``fun`` returns\n        complex residuals, it must be wrapped in a real function of real\n        arguments, as shown at the end of the Examples section.\n    x0 : array_like with shape (n,) or float\n        Initial guess on independent variables. If float, it will be treated\n        as a 1-D array with one element. When `method` is 'trf', the initial\n        guess might be slightly adjusted to lie sufficiently within the given\n        `bounds`.\n    jac : {'2-point', '3-point', 'cs', callable}, optional\n        Method of computing the Jacobian matrix (an m-by-n matrix, where\n        element (i, j) is the partial derivative of f[i] with respect to\n        x[j]). The keywords select a finite difference scheme for numerical\n        estimation. The scheme '3-point' is more accurate, but requires\n        twice as many operations as '2-point' (default). The scheme 'cs'\n        uses complex steps, and while potentially the most accurate, it is\n        applicable only when `fun` correctly handles complex inputs and\n        can be analytically continued to the complex plane. If callable, it is used as\n        ``jac(x, *args, **kwargs)`` and should return a good approximation\n        (or the exact value) for the Jacobian as an array_like (np.atleast_2d\n        is applied), a sparse array (csr_array preferred for performance) or\n        a `scipy.sparse.linalg.LinearOperator`.\n    \n        .. versionchanged:: 1.16.0\n            An ability to use the '3-point', 'cs' keywords with the 'lm' method.\n            Previously 'lm' was limited to '2-point' and callable.\n    \n    bounds : 2-tuple of array_like or `Bounds`, optional\n        There are two ways to specify bounds:\n    \n        1. Instance of `Bounds` class\n        2. Lower and upper bounds on independent variables. Defaults to no\n           bounds. Each array must match the size of `x0` or be a scalar,\n           in the latter case a bound will be the same for all variables.\n           Use ``np.inf`` with an appropriate sign to disable bounds on all\n           or some variables.\n    \n    method : {'trf', 'dogbox', 'lm'}, optional\n        Algorithm to perform minimization.\n    \n        * 'trf' : Trust Region Reflective algorithm, particularly suitable\n          for large sparse problems with bounds. Generally robust method.\n        * 'dogbox' : dogleg algorithm with rectangular trust regions,\n          typical use case is small problems with bounds. Not recommended\n          for problems with rank-deficient Jacobian.\n        * 'lm' : Levenberg-Marquardt algorithm as implemented in MINPACK.\n          Doesn't handle bounds and sparse Jacobians. Usually the most\n          efficient method for small unconstrained problems.\n    \n        Default is 'trf'. See Notes for more information.\n    ftol : float or None, optional\n        Tolerance for termination by the change of the cost function. Default\n        is 1e-8. The optimization process is stopped when ``dF < ftol * F``,\n        and there was an adequate agreement between a local quadratic model and\n        the true model in the last step.\n    \n        If None and 'method' is not 'lm', the termination by this condition is\n        disabled. If 'method' is 'lm', this tolerance must be higher than\n        machine epsilon.\n    xtol : float or None, optional\n        Tolerance for termination by the change of the independent variables.\n        Default is 1e-8. The exact condition depends on the `method` used:\n    \n        * For 'trf' and 'dogbox' : ``norm(dx) < xtol * (xtol + norm(x))``.\n        * For 'lm' : ``Delta < xtol * norm(xs)``, where ``Delta`` is\n          a trust-region radius and ``xs`` is the value of ``x``\n          scaled according to `x_scale` parameter (see below).\n    \n        If None and 'method' is not 'lm', the termination by this condition is\n        disabled. If 'method' is 'lm', this tolerance must be higher than\n        machine epsilon.\n    gtol : float or None, optional\n        Tolerance for termination by the norm of the gradient. Default is 1e-8.\n        The exact condition depends on a `method` used:\n    \n        * For 'trf' : ``norm(g_scaled, ord=np.inf) < gtol``, where\n          ``g_scaled`` is the value of the gradient scaled to account for\n          the presence of the bounds [STIR]_.\n        * For 'dogbox' : ``norm(g_free, ord=np.inf) < gtol``, where\n          ``g_free`` is the gradient with respect to the variables which\n          are not in the optimal state on the boundary.\n        * For 'lm' : the maximum absolute value of the cosine of angles\n          between columns of the Jacobian and the residual vector is less\n          than `gtol`, or the residual vector is zero.\n    \n        If None and 'method' is not 'lm', the termination by this condition is\n        disabled. If 'method' is 'lm', this tolerance must be higher than\n        machine epsilon.\n    x_scale : {None, array_like, 'jac'}, optional\n        Characteristic scale of each variable. Setting `x_scale` is equivalent\n        to reformulating the problem in scaled variables ``xs = x / x_scale``.\n        An alternative view is that the size of a trust region along jth\n        dimension is proportional to ``x_scale[j]``. Improved convergence may\n        be achieved by setting `x_scale` such that a step of a given size\n        along any of the scaled variables has a similar effect on the cost\n        function. If set to 'jac', the scale is iteratively updated using the\n        inverse norms of the columns of the Jacobian matrix (as described in\n        [JJMore]_). The default scaling for each method (i.e.\n        if ``x_scale is None``) is as follows:\n    \n        * For 'trf'    : ``x_scale == 1``\n        * For 'dogbox' : ``x_scale == 1``\n        * For 'lm'     : ``x_scale == 'jac'``\n    \n        .. versionchanged:: 1.16.0\n            The default keyword value is changed from 1 to None to indicate that\n            a default approach to scaling is used.\n            For the 'lm' method the default scaling is changed from 1 to 'jac'.\n            This has been found to give better performance, and is the same\n            scaling as performed by ``leastsq``.\n    \n    loss : str or callable, optional\n        Determines the loss function. The following keyword values are allowed:\n    \n        * 'linear' (default) : ``rho(z) = z``. Gives a standard\n          least-squares problem.\n        * 'soft_l1' : ``rho(z) = 2 * ((1 + z)**0.5 - 1)``. The smooth\n          approximation of l1 (absolute value) loss. Usually a good\n          choice for robust least squares.\n        * 'huber' : ``rho(z) = z if z <= 1 else 2*z**0.5 - 1``. Works\n          similarly to 'soft_l1'.\n        * 'cauchy' : ``rho(z) = ln(1 + z)``. Severely weakens outliers\n          influence, but may cause difficulties in optimization process.\n        * 'arctan' : ``rho(z) = arctan(z)``. Limits a maximum loss on\n          a single residual, has properties similar to 'cauchy'.\n    \n        If callable, it must take a 1-D ndarray ``z=f**2`` and return an\n        array_like with shape (3, m) where row 0 contains function values,\n        row 1 contains first derivatives and row 2 contains second\n        derivatives. Method 'lm' supports only 'linear' loss.\n    f_scale : float, optional\n        Value of soft margin between inlier and outlier residuals, default\n        is 1.0. The loss function is evaluated as follows\n        ``rho_(f**2) = C**2 * rho(f**2 / C**2)``, where ``C`` is `f_scale`,\n        and ``rho`` is determined by `loss` parameter. This parameter has\n        no effect with ``loss='linear'``, but for other `loss` values it is\n        of crucial importance.\n    max_nfev : None or int, optional\n        For all methods this parameter controls the maximum number of function\n        evaluations used by each method, separate to those used in numerical\n        approximation of the jacobian.\n        If None (default), the value is chosen automatically as 100 * n.\n    \n        .. versionchanged:: 1.16.0\n            The default for the 'lm' method is changed to 100 * n, for both a callable\n            and a numerically estimated jacobian. Previously the default when using an\n            estimated jacobian was 100 * n * (n + 1), because the method included\n            evaluations used in the estimation.\n    \n    diff_step : None or array_like, optional\n        Determines the relative step size for the finite difference\n        approximation of the Jacobian. The actual step is computed as\n        ``x * diff_step``. If None (default), then `diff_step` is taken to be\n        a conventional \"optimal\" power of machine epsilon for the finite\n        difference scheme used [NR]_.\n    tr_solver : {None, 'exact', 'lsmr'}, optional\n        Method for solving trust-region subproblems, relevant only for 'trf'\n        and 'dogbox' methods.\n    \n        * 'exact' is suitable for not very large problems with dense\n          Jacobian matrices. The computational complexity per iteration is\n          comparable to a singular value decomposition of the Jacobian\n          matrix.\n        * 'lsmr' is suitable for problems with sparse and large Jacobian\n          matrices. It uses the iterative procedure\n          `scipy.sparse.linalg.lsmr` for finding a solution of a linear\n          least-squares problem and only requires matrix-vector product\n          evaluations.\n    \n        If None (default), the solver is chosen based on the type of Jacobian\n        returned on the first iteration.\n    tr_options : dict, optional\n        Keyword options passed to trust-region solver.\n    \n        * ``tr_solver='exact'``: `tr_options` are ignored.\n        * ``tr_solver='lsmr'``: options for `scipy.sparse.linalg.lsmr`.\n          Additionally,  ``method='trf'`` supports  'regularize' option\n          (bool, default is True), which adds a regularization term to the\n          normal equation, which improves convergence if the Jacobian is\n          rank-deficient [Byrd]_ (eq. 3.4).\n    \n    jac_sparsity : {None, array_like, sparse array}, optional\n        Defines the sparsity structure of the Jacobian matrix for finite\n        difference estimation, its shape must be (m, n). If the Jacobian has\n        only few non-zero elements in *each* row, providing the sparsity\n        structure will greatly speed up the computations [Curtis]_. A zero\n        entry means that a corresponding element in the Jacobian is identically\n        zero. If provided, forces the use of 'lsmr' trust-region solver.\n        If None (default), then dense differencing will be used. Has no effect\n        for 'lm' method.\n    verbose : {0, 1, 2}, optional\n        Level of algorithm's verbosity:\n    \n        * 0 (default) : work silently.\n        * 1 : display a termination report.\n        * 2 : display progress during iterations (not supported by 'lm'\n          method).\n    \n    args, kwargs : tuple and dict, optional\n        Additional arguments passed to `fun` and `jac`. Both empty by default.\n        The calling signature is ``fun(x, *args, **kwargs)`` and the same for\n        `jac`.\n    callback : None or callable, optional\n        Callback function that is called by the algorithm on each iteration.\n        This can be used to print or plot the optimization results at each\n        step, and to stop the optimization algorithm based on some user-defined\n        condition.  Only implemented for the `trf` and `dogbox` methods.\n    \n        The signature is ``callback(intermediate_result: OptimizeResult)``\n    \n        `intermediate_result is a `scipy.optimize.OptimizeResult`\n        which contains the intermediate results of the optimization at the\n        current iteration.\n    \n        The callback also supports a signature like: ``callback(x)``\n    \n        Introspection is used to determine which of the signatures is invoked.\n    \n        If the `callback` function raises `StopIteration` the optimization algorithm\n        will stop and return with status code -2.\n    \n        .. versionadded:: 1.16.0\n    workers : map-like callable, optional\n        A map-like callable, such as `multiprocessing.Pool.map` for evaluating\n        any numerical differentiation in parallel.\n        This evaluation is carried out as ``workers(fun, iterable)``.\n    \n        .. versionadded:: 1.16.0\n    \n    Returns\n    -------\n    result : OptimizeResult\n        `OptimizeResult` with the following fields defined:\n    \n        x : ndarray, shape (n,)\n            Solution found.\n        cost : float\n            Value of the cost function at the solution.\n        fun : ndarray, shape (m,)\n            Vector of residuals at the solution.\n        jac : ndarray, sparse array or LinearOperator, shape (m, n)\n            Modified Jacobian matrix at the solution, in the sense that J^T J\n            is a Gauss-Newton approximation of the Hessian of the cost function.\n            The type is the same as the one used by the algorithm.\n        grad : ndarray, shape (m,)\n            Gradient of the cost function at the solution.\n        optimality : float\n            First-order optimality measure. In unconstrained problems, it is\n            always the uniform norm of the gradient. In constrained problems,\n            it is the quantity which was compared with `gtol` during iterations.\n        active_mask : ndarray of int, shape (n,)\n            Each component shows whether a corresponding constraint is active\n            (that is, whether a variable is at the bound):\n    \n            *  0 : a constraint is not active.\n            * -1 : a lower bound is active.\n            *  1 : an upper bound is active.\n    \n            Might be somewhat arbitrary for 'trf' method as it generates a\n            sequence of strictly feasible iterates and `active_mask` is\n            determined within a tolerance threshold.\n        nfev : int\n            Number of function evaluations done. This number does not include\n            the function calls used for numerical Jacobian approximation.\n    \n            .. versionchanged:: 1.16.0\n                For the 'lm' method the number of function calls used in numerical\n                Jacobian approximation is no longer included. This is to bring all\n                methods into line.\n    \n        njev : int or None\n            Number of Jacobian evaluations done. If numerical Jacobian\n            approximation is used in 'lm' method, it is set to None.\n        status : int\n            The reason for algorithm termination:\n    \n            * -2 : terminated because callback raised StopIteration.\n            * -1 : improper input parameters status returned from MINPACK.\n            *  0 : the maximum number of function evaluations is exceeded.\n            *  1 : `gtol` termination condition is satisfied.\n            *  2 : `ftol` termination condition is satisfied.\n            *  3 : `xtol` termination condition is satisfied.\n            *  4 : Both `ftol` and `xtol` termination conditions are satisfied.\n    \n        message : str\n            Verbal description of the termination reason.\n        success : bool\n            True if one of the convergence criteria is satisfied (`status` > 0).\n    \n    See Also\n    --------\n    leastsq : A legacy wrapper for the MINPACK implementation of the\n              Levenberg-Marquadt algorithm.\n    curve_fit : Least-squares minimization applied to a curve-fitting problem.\n    \n    Notes\n    -----\n    Method 'lm' (Levenberg-Marquardt) calls a wrapper over a least-squares\n    algorithm implemented in MINPACK (lmder). It runs the\n    Levenberg-Marquardt algorithm formulated as a trust-region type algorithm.\n    The implementation is based on paper [JJMore]_, it is very robust and\n    efficient with a lot of smart tricks. It should be your first choice\n    for unconstrained problems. Note that it doesn't support bounds. Also,\n    it doesn't work when m < n.\n    \n    Method 'trf' (Trust Region Reflective) is motivated by the process of\n    solving a system of equations, which constitute the first-order optimality\n    condition for a bound-constrained minimization problem as formulated in\n    [STIR]_. The algorithm iteratively solves trust-region subproblems\n    augmented by a special diagonal quadratic term and with trust-region shape\n    determined by the distance from the bounds and the direction of the\n    gradient. This enhancements help to avoid making steps directly into bounds\n    and efficiently explore the whole space of variables. To further improve\n    convergence, the algorithm considers search directions reflected from the\n    bounds. To obey theoretical requirements, the algorithm keeps iterates\n    strictly feasible. With dense Jacobians trust-region subproblems are\n    solved by an exact method very similar to the one described in [JJMore]_\n    (and implemented in MINPACK). The difference from the MINPACK\n    implementation is that a singular value decomposition of a Jacobian\n    matrix is done once per iteration, instead of a QR decomposition and series\n    of Givens rotation eliminations. For large sparse Jacobians a 2-D subspace\n    approach of solving trust-region subproblems is used [STIR]_, [Byrd]_.\n    The subspace is spanned by a scaled gradient and an approximate\n    Gauss-Newton solution delivered by `scipy.sparse.linalg.lsmr`. When no\n    constraints are imposed the algorithm is very similar to MINPACK and has\n    generally comparable performance. The algorithm works quite robust in\n    unbounded and bounded problems, thus it is chosen as a default algorithm.\n    \n    Method 'dogbox' operates in a trust-region framework, but considers\n    rectangular trust regions as opposed to conventional ellipsoids [Voglis]_.\n    The intersection of a current trust region and initial bounds is again\n    rectangular, so on each iteration a quadratic minimization problem subject\n    to bound constraints is solved approximately by Powell's dogleg method\n    [NumOpt]_. The required Gauss-Newton step can be computed exactly for\n    dense Jacobians or approximately by `scipy.sparse.linalg.lsmr` for large\n    sparse Jacobians. The algorithm is likely to exhibit slow convergence when\n    the rank of Jacobian is less than the number of variables. The algorithm\n    often outperforms 'trf' in bounded problems with a small number of\n    variables.\n    \n    Robust loss functions are implemented as described in [BA]_. The idea\n    is to modify a residual vector and a Jacobian matrix on each iteration\n    such that computed gradient and Gauss-Newton Hessian approximation match\n    the true gradient and Hessian approximation of the cost function. Then\n    the algorithm proceeds in a normal way, i.e., robust loss functions are\n    implemented as a simple wrapper over standard least-squares algorithms.\n    \n    .. versionadded:: 0.17.0\n    \n    References\n    ----------\n    .. [STIR] M. A. Branch, T. F. Coleman, and Y. Li, \"A Subspace, Interior,\n              and Conjugate Gradient Method for Large-Scale Bound-Constrained\n              Minimization Problems,\" SIAM Journal on Scientific Computing,\n              Vol. 21, Number 1, pp 1-23, 1999.\n    .. [NR] William H. Press et. al., \"Numerical Recipes. The Art of Scientific\n            Computing. 3rd edition\", Sec. 5.7.\n    .. [Byrd] R. H. Byrd, R. B. Schnabel and G. A. Shultz, \"Approximate\n              solution of the trust region problem by minimization over\n              two-dimensional subspaces\", Math. Programming, 40, pp. 247-263,\n              1988.\n    .. [Curtis] A. Curtis, M. J. D. Powell, and J. Reid, \"On the estimation of\n                sparse Jacobian matrices\", Journal of the Institute of\n                Mathematics and its Applications, 13, pp. 117-120, 1974.\n    .. [JJMore] J. J. More, \"The Levenberg-Marquardt Algorithm: Implementation\n                and Theory,\" Numerical Analysis, ed. G. A. Watson, Lecture\n                Notes in Mathematics 630, Springer Verlag, pp. 105-116, 1977.\n    .. [Voglis] C. Voglis and I. E. Lagaris, \"A Rectangular Trust Region\n                Dogleg Approach for Unconstrained and Bound Constrained\n                Nonlinear Optimization\", WSEAS International Conference on\n                Applied Mathematics, Corfu, Greece, 2004.\n    .. [NumOpt] J. Nocedal and S. J. Wright, \"Numerical optimization,\n                2nd edition\", Chapter 4.\n    .. [BA] B. Triggs et. al., \"Bundle Adjustment - A Modern Synthesis\",\n            Proceedings of the International Workshop on Vision Algorithms:\n            Theory and Practice, pp. 298-372, 1999.\n    \n    Examples\n    --------\n    In this example we find a minimum of the Rosenbrock function without bounds\n    on independent variables.\n    \n    >>> import numpy as np\n    >>> def fun_rosenbrock(x):\n    ...     return np.array([10 * (x[1] - x[0]**2), (1 - x[0])])\n    \n    Notice that we only provide the vector of the residuals. The algorithm\n    constructs the cost function as a sum of squares of the residuals, which\n    gives the Rosenbrock function. The exact minimum is at ``x = [1.0, 1.0]``.\n    \n    >>> from scipy.optimize import least_squares\n    >>> x0_rosenbrock = np.array([2, 2])\n    >>> res_1 = least_squares(fun_rosenbrock, x0_rosenbrock)\n    >>> res_1.x\n    array([ 1.,  1.])\n    >>> res_1.cost\n    9.8669242910846867e-30\n    >>> res_1.optimality\n    8.8928864934219529e-14\n    \n    We now constrain the variables, in such a way that the previous solution\n    becomes infeasible. Specifically, we require that ``x[1] >= 1.5``, and\n    ``x[0]`` left unconstrained. To this end, we specify the `bounds` parameter\n    to `least_squares` in the form ``bounds=([-np.inf, 1.5], np.inf)``.\n    \n    We also provide the analytic Jacobian:\n    \n    >>> def jac_rosenbrock(x):\n    ...     return np.array([\n    ...         [-20 * x[0], 10],\n    ...         [-1, 0]])\n    \n    Putting this all together, we see that the new solution lies on the bound:\n    \n    >>> res_2 = least_squares(fun_rosenbrock, x0_rosenbrock, jac_rosenbrock,\n    ...                       bounds=([-np.inf, 1.5], np.inf))\n    >>> res_2.x\n    array([ 1.22437075,  1.5       ])\n    >>> res_2.cost\n    0.025213093946805685\n    >>> res_2.optimality\n    1.5885401433157753e-07\n    \n    Now we solve a system of equations (i.e., the cost function should be zero\n    at a minimum) for a Broyden tridiagonal vector-valued function of 100000\n    variables:\n    \n    >>> def fun_broyden(x):\n    ...     f = (3 - x) * x + 1\n    ...     f[1:] -= x[:-1]\n    ...     f[:-1] -= 2 * x[1:]\n    ...     return f\n    \n    The corresponding Jacobian matrix is sparse. We tell the algorithm to\n    estimate it by finite differences and provide the sparsity structure of\n    Jacobian to significantly speed up this process.\n    \n    >>> from scipy.sparse import lil_array\n    >>> def sparsity_broyden(n):\n    ...     sparsity = lil_array((n, n), dtype=int)\n    ...     i = np.arange(n)\n    ...     sparsity[i, i] = 1\n    ...     i = np.arange(1, n)\n    ...     sparsity[i, i - 1] = 1\n    ...     i = np.arange(n - 1)\n    ...     sparsity[i, i + 1] = 1\n    ...     return sparsity\n    ...\n    >>> n = 100000\n    >>> x0_broyden = -np.ones(n)\n    ...\n    >>> res_3 = least_squares(fun_broyden, x0_broyden,\n    ...                       jac_sparsity=sparsity_broyden(n))\n    >>> res_3.cost\n    4.5687069299604613e-23\n    >>> res_3.optimality\n    1.1650454296851518e-11\n    \n    Let's also solve a curve fitting problem using robust loss function to\n    take care of outliers in the data. Define the model function as\n    ``y = a + b * exp(c * t)``, where t is a predictor variable, y is an\n    observation and a, b, c are parameters to estimate.\n    \n    First, define the function which generates the data with noise and\n    outliers, define the model parameters, and generate data:\n    \n    >>> from numpy.random import default_rng\n    >>> rng = default_rng()\n    >>> def gen_data(t, a, b, c, noise=0., n_outliers=0, seed=None):\n    ...     rng = default_rng(seed)\n    ...\n    ...     y = a + b * np.exp(t * c)\n    ...\n    ...     error = noise * rng.standard_normal(t.size)\n    ...     outliers = rng.integers(0, t.size, n_outliers)\n    ...     error[outliers] *= 10\n    ...\n    ...     return y + error\n    ...\n    >>> a = 0.5\n    >>> b = 2.0\n    >>> c = -1\n    >>> t_min = 0\n    >>> t_max = 10\n    >>> n_points = 15\n    ...\n    >>> t_train = np.linspace(t_min, t_max, n_points)\n    >>> y_train = gen_data(t_train, a, b, c, noise=0.1, n_outliers=3)\n    \n    Define function for computing residuals and initial estimate of\n    parameters.\n    \n    >>> def fun(x, t, y):\n    ...     return x[0] + x[1] * np.exp(x[2] * t) - y\n    ...\n    >>> x0 = np.array([1.0, 1.0, 0.0])\n    \n    Compute a standard least-squares solution:\n    \n    >>> res_lsq = least_squares(fun, x0, args=(t_train, y_train))\n    \n    Now compute two solutions with two different robust loss functions. The\n    parameter `f_scale` is set to 0.1, meaning that inlier residuals should\n    not significantly exceed 0.1 (the noise level used).\n    \n    >>> res_soft_l1 = least_squares(fun, x0, loss='soft_l1', f_scale=0.1,\n    ...                             args=(t_train, y_train))\n    >>> res_log = least_squares(fun, x0, loss='cauchy', f_scale=0.1,\n    ...                         args=(t_train, y_train))\n    \n    And, finally, plot all the curves. We see that by selecting an appropriate\n    `loss`  we can get estimates close to optimal even in the presence of\n    strong outliers. But keep in mind that generally it is recommended to try\n    'soft_l1' or 'huber' losses first (if at all necessary) as the other two\n    options may cause difficulties in optimization process.\n    \n    >>> t_test = np.linspace(t_min, t_max, n_points * 10)\n    >>> y_true = gen_data(t_test, a, b, c)\n    >>> y_lsq = gen_data(t_test, *res_lsq.x)\n    >>> y_soft_l1 = gen_data(t_test, *res_soft_l1.x)\n    >>> y_log = gen_data(t_test, *res_log.x)\n    ...\n    >>> import matplotlib.pyplot as plt\n    >>> plt.plot(t_train, y_train, 'o')\n    >>> plt.plot(t_test, y_true, 'k', linewidth=2, label='true')\n    >>> plt.plot(t_test, y_lsq, label='linear loss')\n    >>> plt.plot(t_test, y_soft_l1, label='soft_l1 loss')\n    >>> plt.plot(t_test, y_log, label='cauchy loss')\n    >>> plt.xlabel(\"t\")\n    >>> plt.ylabel(\"y\")\n    >>> plt.legend()\n    >>> plt.show()\n    \n    In the next example, we show how complex-valued residual functions of\n    complex variables can be optimized with ``least_squares()``. Consider the\n    following function:\n    \n    >>> def f(z):\n    ...     return z - (0.5 + 0.5j)\n    \n    We wrap it into a function of real variables that returns real residuals\n    by simply handling the real and imaginary parts as independent variables:\n    \n    >>> def f_wrap(x):\n    ...     fx = f(x[0] + 1j*x[1])\n    ...     return np.array([fx.real, fx.imag])\n    \n    Thus, instead of the original m-D complex function of n complex\n    variables we optimize a 2m-D real function of 2n real variables:\n    \n    >>> from scipy.optimize import least_squares\n    >>> res_wrapped = least_squares(f_wrap, (0.1, 0.1), bounds=([0, 0], [1, 1]))\n    >>> z = res_wrapped.x[0] + res_wrapped.x[1]*1j\n    >>> z\n    (0.49999999999925893+0.49999999999925893j)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c20ae8d05cf91b67f67285e0c88a19ebb2546c7e0d9c25d779afd02c1fc07f5f",
            "fields": [
                {
                    "id": "palzlxqr",
                    "encoding": "",
                    "name": "fun",
                    "value": "",
                    "defaultValue": "",
                    "description": "Function which computes the vector of residuals, with the signature\n``fun(x, *args, **kwargs)``, i.e., the minimization proceeds with\nrespect to its first argument. The argument ``x`` passed to this\nfunction is an ndarray of shape (n,) (never a scalar, even for n=1).\nIt must allocate and return a 1-D array_like of shape (m,) or a scalar.\nIf the argument ``x`` is complex or the function ``fun`` returns\ncomplex residuals, it must be wrapped in a real function of real\narguments, as shown at the end of the Examples section.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "busv2hnq",
                    "encoding": "",
                    "name": "x0",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial guess on independent variables. If float, it will be treated\nas a 1-D array with one element. When `method` is 'trf', the initial\nguess might be slightly adjusted to lie sufficiently within the given\n`bounds`.",
                    "type": "arraylike with shape (n,) or float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_d_1mii8",
                    "encoding": "",
                    "name": "jac",
                    "value": "2-point",
                    "defaultValue": "2-point",
                    "description": "Method of computing the Jacobian matrix (an m-by-n matrix, where\nelement (i, j) is the partial derivative of f[i] with respect to\nx[j]). The keywords select a finite difference scheme for numerical\nestimation. The scheme '3-point' is more accurate, but requires\ntwice as many operations as '2-point' (default). The scheme 'cs'\nuses complex steps, and while potentially the most accurate, it is\napplicable only when `fun` correctly handles complex inputs and\ncan be analytically continued to the complex plane. If callable, it is used as\n``jac(x, *args, **kwargs)`` and should return a good approximation\n(or the exact value) for the Jacobian as an array_like (np.atleast_2d\nis applied), a sparse array (csr_array preferred for performance) or\na `scipy.sparse.linalg.LinearOperator`.\n\n.. versionchanged:: 1.16.0\n    An ability to use the '3-point', 'cs' keywords with the 'lm' method.\n    Previously 'lm' was limited to '2-point' and callable.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zed9qd8z",
                    "encoding": "",
                    "name": "bounds",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "There are two ways to specify bounds:\n\n1. Instance of `Bounds` class\n2. Lower and upper bounds on independent variables. Defaults to no\n   bounds. Each array must match the size of `x0` or be a scalar,\n   in the latter case a bound will be the same for all variables.\n   Use ``np.inf`` with an appropriate sign to disable bounds on all\n   or some variables.",
                    "type": "builtins.tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "50xiqfg1",
                    "encoding": "",
                    "name": "method",
                    "value": "trf",
                    "defaultValue": "trf",
                    "description": "Algorithm to perform minimization.\n\n* 'trf' : Trust Region Reflective algorithm, particularly suitable\n  for large sparse problems with bounds. Generally robust method.\n* 'dogbox' : dogleg algorithm with rectangular trust regions,\n  typical use case is small problems with bounds. Not recommended\n  for problems with rank-deficient Jacobian.\n* 'lm' : Levenberg-Marquardt algorithm as implemented in MINPACK.\n  Doesn't handle bounds and sparse Jacobians. Usually the most\n  efficient method for small unconstrained problems.\n\nDefault is 'trf'. See Notes for more information.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5oqwqdgh",
                    "encoding": "",
                    "name": "ftol",
                    "value": 1e-08,
                    "defaultValue": 1e-08,
                    "description": "Tolerance for termination by the change of the cost function. Default\nis 1e-8. The optimization process is stopped when ``dF < ftol * F``,\nand there was an adequate agreement between a local quadratic model and\nthe true model in the last step.\n\nIf None and 'method' is not 'lm', the termination by this condition is\ndisabled. If 'method' is 'lm', this tolerance must be higher than\nmachine epsilon.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4masz12i",
                    "encoding": "",
                    "name": "xtol",
                    "value": 1e-08,
                    "defaultValue": 1e-08,
                    "description": "Tolerance for termination by the change of the independent variables.\nDefault is 1e-8. The exact condition depends on the `method` used:\n\n* For 'trf' and 'dogbox' : ``norm(dx) < xtol * (xtol + norm(x))``.\n* For 'lm' : ``Delta < xtol * norm(xs)``, where ``Delta`` is\n  a trust-region radius and ``xs`` is the value of ``x``\n  scaled according to `x_scale` parameter (see below).\n\nIf None and 'method' is not 'lm', the termination by this condition is\ndisabled. If 'method' is 'lm', this tolerance must be higher than\nmachine epsilon.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ox_dnfkt",
                    "encoding": "",
                    "name": "gtol",
                    "value": 1e-08,
                    "defaultValue": 1e-08,
                    "description": "Tolerance for termination by the norm of the gradient. Default is 1e-8.\nThe exact condition depends on a `method` used:\n\n* For 'trf' : ``norm(g_scaled, ord=np.inf) < gtol``, where\n  ``g_scaled`` is the value of the gradient scaled to account for\n  the presence of the bounds [STIR]_.\n* For 'dogbox' : ``norm(g_free, ord=np.inf) < gtol``, where\n  ``g_free`` is the gradient with respect to the variables which\n  are not in the optimal state on the boundary.\n* For 'lm' : the maximum absolute value of the cosine of angles\n  between columns of the Jacobian and the residual vector is less\n  than `gtol`, or the residual vector is zero.\n\nIf None and 'method' is not 'lm', the termination by this condition is\ndisabled. If 'method' is 'lm', this tolerance must be higher than\nmachine epsilon.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7i_ws6s7",
                    "encoding": "",
                    "name": "x_scale",
                    "value": "",
                    "defaultValue": "",
                    "description": "Characteristic scale of each variable. Setting `x_scale` is equivalent\nto reformulating the problem in scaled variables ``xs = x / x_scale``.\nAn alternative view is that the size of a trust region along jth\ndimension is proportional to ``x_scale[j]``. Improved convergence may\nbe achieved by setting `x_scale` such that a step of a given size\nalong any of the scaled variables has a similar effect on the cost\nfunction. If set to 'jac', the scale is iteratively updated using the\ninverse norms of the columns of the Jacobian matrix (as described in\n[JJMore]_). The default scaling for each method (i.e.\nif ``x_scale is None``) is as follows:\n\n* For 'trf'    : ``x_scale == 1``\n* For 'dogbox' : ``x_scale == 1``\n* For 'lm'     : ``x_scale == 'jac'``\n\n.. versionchanged:: 1.16.0\n    The default keyword value is changed from 1 to None to indicate that\n    a default approach to scaling is used.\n    For the 'lm' method the default scaling is changed from 1 to 'jac'.\n    This has been found to give better performance, and is the same\n    scaling as performed by ``leastsq``.",
                    "type": "{None, arraylike, 'jac'}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9ep2pdu4",
                    "encoding": "",
                    "name": "loss",
                    "value": "linear",
                    "defaultValue": "linear",
                    "description": "Determines the loss function. The following keyword values are allowed:\n\n* 'linear' (default) : ``rho(z) = z``. Gives a standard\n  least-squares problem.\n* 'soft_l1' : ``rho(z) = 2 * ((1 + z)**0.5 - 1)``. The smooth\n  approximation of l1 (absolute value) loss. Usually a good\n  choice for robust least squares.\n* 'huber' : ``rho(z) = z if z <= 1 else 2*z**0.5 - 1``. Works\n  similarly to 'soft_l1'.\n* 'cauchy' : ``rho(z) = ln(1 + z)``. Severely weakens outliers\n  influence, but may cause difficulties in optimization process.\n* 'arctan' : ``rho(z) = arctan(z)``. Limits a maximum loss on\n  a single residual, has properties similar to 'cauchy'.\n\nIf callable, it must take a 1-D ndarray ``z=f**2`` and return an\narray_like with shape (3, m) where row 0 contains function values,\nrow 1 contains first derivatives and row 2 contains second\nderivatives. Method 'lm' supports only 'linear' loss.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9nxgobo5",
                    "encoding": "",
                    "name": "f_scale",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "Value of soft margin between inlier and outlier residuals, default\nis 1.0. The loss function is evaluated as follows\n``rho_(f**2) = C**2 * rho(f**2 / C**2)``, where ``C`` is `f_scale`,\nand ``rho`` is determined by `loss` parameter. This parameter has\nno effect with ``loss='linear'``, but for other `loss` values it is\nof crucial importance.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7j82z1fl",
                    "encoding": "",
                    "name": "diff_step",
                    "value": "",
                    "defaultValue": "",
                    "description": "Determines the relative step size for the finite difference\napproximation of the Jacobian. The actual step is computed as\n``x * diff_step``. If None (default), then `diff_step` is taken to be\na conventional \"optimal\" power of machine epsilon for the finite\ndifference scheme used [NR]_.",
                    "type": "None or arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "opguhikd",
                    "encoding": "",
                    "name": "tr_solver",
                    "value": "",
                    "defaultValue": "",
                    "description": "Method for solving trust-region subproblems, relevant only for 'trf'\nand 'dogbox' methods.\n\n* 'exact' is suitable for not very large problems with dense\n  Jacobian matrices. The computational complexity per iteration is\n  comparable to a singular value decomposition of the Jacobian\n  matrix.\n* 'lsmr' is suitable for problems with sparse and large Jacobian\n  matrices. It uses the iterative procedure\n  `scipy.sparse.linalg.lsmr` for finding a solution of a linear\n  least-squares problem and only requires matrix-vector product\n  evaluations.\n\nIf None (default), the solver is chosen based on the type of Jacobian\nreturned on the first iteration.",
                    "type": "{None, 'exact', 'lsmr'}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "98lgsh2q",
                    "encoding": "",
                    "name": "tr_options",
                    "value": "",
                    "defaultValue": "",
                    "description": "Keyword options passed to trust-region solver.\n\n* ``tr_solver='exact'``: `tr_options` are ignored.\n* ``tr_solver='lsmr'``: options for `scipy.sparse.linalg.lsmr`.\n  Additionally,  ``method='trf'`` supports  'regularize' option\n  (bool, default is True), which adds a regularization term to the\n  normal equation, which improves convergence if the Jacobian is\n  rank-deficient [Byrd]_ (eq. 3.4).",
                    "type": "dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_iqow69x",
                    "encoding": "",
                    "name": "jac_sparsity",
                    "value": "",
                    "defaultValue": "",
                    "description": "Defines the sparsity structure of the Jacobian matrix for finite\ndifference estimation, its shape must be (m, n). If the Jacobian has\nonly few non-zero elements in *each* row, providing the sparsity\nstructure will greatly speed up the computations [Curtis]_. A zero\nentry means that a corresponding element in the Jacobian is identically\nzero. If provided, forces the use of 'lsmr' trust-region solver.\nIf None (default), then dense differencing will be used. Has no effect\nfor 'lm' method.",
                    "type": "{None, arraylike, sparse array}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q_veahvy",
                    "encoding": "",
                    "name": "max_nfev",
                    "value": "",
                    "defaultValue": "",
                    "description": "For all methods this parameter controls the maximum number of function\nevaluations used by each method, separate to those used in numerical\napproximation of the jacobian.\nIf None (default), the value is chosen automatically as 100 * n.\n\n.. versionchanged:: 1.16.0\n    The default for the 'lm' method is changed to 100 * n, for both a callable\n    and a numerically estimated jacobian. Previously the default when using an\n    estimated jacobian was 100 * n * (n + 1), because the method included\n    evaluations used in the estimation.",
                    "type": "None or int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "foyzcp2g",
                    "encoding": "",
                    "name": "verbose",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Level of algorithm's verbosity:\n\n* 0 (default) : work silently.\n* 1 : display a termination report.\n* 2 : display progress during iterations (not supported by 'lm'\n  method).",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ut6ifzp_",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vhq4n1u0",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x7dqw9tf",
                    "encoding": "",
                    "name": "callback",
                    "value": "",
                    "defaultValue": "",
                    "description": "Callback function that is called by the algorithm on each iteration.\nThis can be used to print or plot the optimization results at each\nstep, and to stop the optimization algorithm based on some user-defined\ncondition.  Only implemented for the `trf` and `dogbox` methods.\n\nThe signature is ``callback(intermediate_result: OptimizeResult)``\n\n`intermediate_result is a `scipy.optimize.OptimizeResult`\nwhich contains the intermediate results of the optimization at the\ncurrent iteration.\n\nThe callback also supports a signature like: ``callback(x)``\n\nIntrospection is used to determine which of the signatures is invoked.\n\nIf the `callback` function raises `StopIteration` the optimization algorithm\nwill stop and return with status code -2.\n\n.. versionadded:: 1.16.0",
                    "type": "None or callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z57lbr9a",
                    "encoding": "",
                    "name": "workers",
                    "value": "",
                    "defaultValue": "",
                    "description": "A map-like callable, such as `multiprocessing.Pool.map` for evaluating\nany numerical differentiation in parallel.\nThis evaluation is carried out as ``workers(fun, iterable)``.\n\n.. versionadded:: 1.16.0",
                    "type": "map-like callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tnj57c0v",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.least_squares",
                    "defaultValue": "scipy.optimize.least_squares",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nbv8fyxp",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ywtiwjx3",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "9rg7o402",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mud0_hsp",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize",
                    "defaultValue": "scipy.optimize",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wciwi6z0",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "unlwgxll",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "tywhhotf",
            "name": "optimize.leastsq",
            "description": "Minimize the sum of squares of a set of equations.\n    \n    ::\n    \n        x = arg min(sum(func(y)**2,axis=0))\n                 y\n    \n    Parameters\n    ----------\n    func : callable\n        Should take at least one (possibly length ``N`` vector) argument and\n        returns ``M`` floating point numbers. It must not return NaNs or\n        fitting might fail. ``M`` must be greater than or equal to ``N``.\n    x0 : ndarray\n        The starting estimate for the minimization.\n    args : tuple, optional\n        Any extra arguments to func are placed in this tuple.\n    Dfun : callable, optional\n        A function or method to compute the Jacobian of func with derivatives\n        across the rows. If this is None, the Jacobian will be estimated.\n    full_output : bool, optional\n        If ``True``, return all optional outputs (not just `x` and `ier`).\n    col_deriv : bool, optional\n        If ``True``, specify that the Jacobian function computes derivatives\n        down the columns (faster, because there is no transpose operation).\n    ftol : float, optional\n        Relative error desired in the sum of squares.\n    xtol : float, optional\n        Relative error desired in the approximate solution.\n    gtol : float, optional\n        Orthogonality desired between the function vector and the columns of\n        the Jacobian.\n    maxfev : int, optional\n        The maximum number of calls to the function. If `Dfun` is provided,\n        then the default `maxfev` is 100*(N+1) where N is the number of elements\n        in x0, otherwise the default `maxfev` is 200*(N+1).\n    epsfcn : float, optional\n        A variable used in determining a suitable step length for the forward-\n        difference approximation of the Jacobian (for Dfun=None).\n        Normally the actual step length will be sqrt(epsfcn)*x\n        If epsfcn is less than the machine precision, it is assumed that the\n        relative errors are of the order of the machine precision.\n    factor : float, optional\n        A parameter determining the initial step bound\n        (``factor * || diag * x||``). Should be in interval ``(0.1, 100)``.\n    diag : sequence, optional\n        N positive entries that serve as a scale factors for the variables.\n    \n    Returns\n    -------\n    x : ndarray\n        The solution (or the result of the last iteration for an unsuccessful\n        call).\n    cov_x : ndarray\n        The inverse of the Hessian. `fjac` and `ipvt` are used to construct an\n        estimate of the Hessian. A value of None indicates a singular matrix,\n        which means the curvature in parameters `x` is numerically flat. To\n        obtain the covariance matrix of the parameters `x`, `cov_x` must be\n        multiplied by the variance of the residuals -- see curve_fit. Only\n        returned if `full_output` is ``True``.\n    infodict : dict\n        a dictionary of optional outputs with the keys:\n    \n        ``nfev``\n            The number of function calls\n        ``fvec``\n            The function evaluated at the output\n        ``fjac``\n            A permutation of the R matrix of a QR\n            factorization of the final approximate\n            Jacobian matrix, stored column wise.\n            Together with ipvt, the covariance of the\n            estimate can be approximated.\n        ``ipvt``\n            An integer array of length N which defines\n            a permutation matrix, p, such that\n            fjac*p = q*r, where r is upper triangular\n            with diagonal elements of nonincreasing\n            magnitude. Column j of p is column ipvt(j)\n            of the identity matrix.\n        ``qtf``\n            The vector (transpose(q) * fvec).\n    \n        Only returned if `full_output` is ``True``.\n    mesg : str\n        A string message giving information about the cause of failure.\n        Only returned if `full_output` is ``True``.\n    ier : int\n        An integer flag. If it is equal to 1, 2, 3 or 4, the solution was\n        found. Otherwise, the solution was not found. In either case, the\n        optional output variable 'mesg' gives more information.\n    \n    See Also\n    --------\n    least_squares : Newer interface to solve nonlinear least-squares problems\n        with bounds on the variables. See ``method='lm'`` in particular.\n    \n    Notes\n    -----\n    \"leastsq\" is a wrapper around MINPACK's lmdif and lmder algorithms.\n    \n    cov_x is a Jacobian approximation to the Hessian of the least squares\n    objective function.\n    This approximation assumes that the objective function is based on the\n    difference between some observed target data (ydata) and a (non-linear)\n    function of the parameters `f(xdata, params)` ::\n    \n           func(params) = ydata - f(xdata, params)\n    \n    so that the objective function is ::\n    \n           min   sum((ydata - f(xdata, params))**2, axis=0)\n         params\n    \n    The solution, `x`, is always a 1-D array, regardless of the shape of `x0`,\n    or whether `x0` is a scalar.\n    \n    Examples\n    --------\n    >>> from scipy.optimize import leastsq\n    >>> def func(x):\n    ...     return 2*(x-3)**2+1\n    >>> leastsq(func, 0)\n    (array([2.99999999]), 1)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e9a87be76f93813af157dac051cd679f0f6bd5db5261caf12e43fe3bbe74aca8",
            "fields": [
                {
                    "id": "ss0csshk",
                    "encoding": "",
                    "name": "func",
                    "value": "",
                    "defaultValue": "",
                    "description": "Should take at least one (possibly length ``N`` vector) argument and\nreturns ``M`` floating point numbers. It must not return NaNs or\nfitting might fail. ``M`` must be greater than or equal to ``N``.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jelo89sk",
                    "encoding": "",
                    "name": "x0",
                    "value": "",
                    "defaultValue": "",
                    "description": "The starting estimate for the minimization.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "88ac442u",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Any extra arguments to func are placed in this tuple.",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "80ivrgqj",
                    "encoding": "",
                    "name": "Dfun",
                    "value": "",
                    "defaultValue": "",
                    "description": "A function or method to compute the Jacobian of func with derivatives\nacross the rows. If this is None, the Jacobian will be estimated.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b5zgwdlz",
                    "encoding": "",
                    "name": "full_output",
                    "value": false,
                    "defaultValue": false,
                    "description": "If ``True``, return all optional outputs (not just `x` and `ier`).",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mmykjo1p",
                    "encoding": "",
                    "name": "col_deriv",
                    "value": false,
                    "defaultValue": false,
                    "description": "If ``True``, specify that the Jacobian function computes derivatives\ndown the columns (faster, because there is no transpose operation).",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r_u4o7ex",
                    "encoding": "",
                    "name": "ftol",
                    "value": 1.49012e-08,
                    "defaultValue": 1.49012e-08,
                    "description": "Relative error desired in the sum of squares.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w_le6unl",
                    "encoding": "",
                    "name": "xtol",
                    "value": 1.49012e-08,
                    "defaultValue": 1.49012e-08,
                    "description": "Relative error desired in the approximate solution.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "65zb8ovw",
                    "encoding": "",
                    "name": "gtol",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Orthogonality desired between the function vector and the columns of\nthe Jacobian.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8q_nuwtb",
                    "encoding": "",
                    "name": "maxfev",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "The maximum number of calls to the function. If `Dfun` is provided,\nthen the default `maxfev` is 100*(N+1) where N is the number of elements\nin x0, otherwise the default `maxfev` is 200*(N+1).",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d33wg1h9",
                    "encoding": "",
                    "name": "epsfcn",
                    "value": "",
                    "defaultValue": "",
                    "description": "A variable used in determining a suitable step length for the forward-\ndifference approximation of the Jacobian (for Dfun=None).\nNormally the actual step length will be sqrt(epsfcn)*x\nIf epsfcn is less than the machine precision, it is assumed that the\nrelative errors are of the order of the machine precision.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1sz6y9jc",
                    "encoding": "",
                    "name": "factor",
                    "value": 100,
                    "defaultValue": 100,
                    "description": "A parameter determining the initial step bound\n(``factor * || diag * x||``). Should be in interval ``(0.1, 100)``.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8u_p210e",
                    "encoding": "",
                    "name": "diag",
                    "value": "",
                    "defaultValue": "",
                    "description": "N positive entries that serve as a scale factors for the variables.",
                    "type": "sequence",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "acg51kgw",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.leastsq",
                    "defaultValue": "scipy.optimize.leastsq",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "we_477mx",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jsll4a67",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "qr0z6mcu",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fvz7cp0r",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize",
                    "defaultValue": "scipy.optimize",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "03bbhui7",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x9uuibln",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "vp7v8drd",
            "name": "line_search_wolfe2",
            "description": "Find alpha that satisfies strong Wolfe conditions.\n    \n    Parameters\n    ----------\n    f : callable f(x,*args)\n        Objective function.\n    myfprime : callable f'(x,*args)\n        Objective function gradient.\n    xk : ndarray\n        Starting point.\n    pk : ndarray\n        Search direction. The search direction must be a descent direction\n        for the algorithm to converge.\n    gfk : ndarray, optional\n        Gradient value for x=xk (xk being the current parameter\n        estimate). Will be recomputed if omitted.\n    old_fval : float, optional\n        Function value for x=xk. Will be recomputed if omitted.\n    old_old_fval : float, optional\n        Function value for the point preceding x=xk.\n    args : tuple, optional\n        Additional arguments passed to objective function.\n    c1 : float, optional\n        Parameter for Armijo condition rule.\n    c2 : float, optional\n        Parameter for curvature condition rule.\n    amax : float, optional\n        Maximum step size\n    extra_condition : callable, optional\n        A callable of the form ``extra_condition(alpha, x, f, g)``\n        returning a boolean. Arguments are the proposed step ``alpha``\n        and the corresponding ``x``, ``f`` and ``g`` values. The line search\n        accepts the value of ``alpha`` only if this\n        callable returns ``True``. If the callable returns ``False``\n        for the step length, the algorithm will continue with\n        new iterates. The callable is only called for iterates\n        satisfying the strong Wolfe conditions.\n    maxiter : int, optional\n        Maximum number of iterations to perform.\n    \n    Returns\n    -------\n    alpha : float or None\n        Alpha for which ``x_new = x0 + alpha * pk``,\n        or None if the line search algorithm did not converge.\n    fc : int\n        Number of function evaluations made.\n    gc : int\n        Number of gradient evaluations made.\n    new_fval : float or None\n        New function value ``f(x_new)=f(x0+alpha*pk)``,\n        or None if the line search algorithm did not converge.\n    old_fval : float\n        Old function value ``f(x0)``.\n    new_slope : float or None\n        The local slope along the search direction at the\n        new value ``<myfprime(x_new), pk>``,\n        or None if the line search algorithm did not converge.\n    \n    \n    Notes\n    -----\n    Uses the line search algorithm to enforce strong Wolfe\n    conditions. See Wright and Nocedal, 'Numerical Optimization',\n    1999, pp. 59-61.\n    \n    The search direction `pk` must be a descent direction (e.g.\n    ``-myfprime(xk)``) to find a step length that satisfies the strong Wolfe\n    conditions. If the search direction is not a descent direction (e.g.\n    ``myfprime(xk)``), then `alpha`, `new_fval`, and `new_slope` will be None.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.optimize import line_search\n    \n    A objective function and its gradient are defined.\n    \n    >>> def obj_func(x):\n    ...     return (x[0])**2+(x[1])**2\n    >>> def obj_grad(x):\n    ...     return [2*x[0], 2*x[1]]\n    \n    We can find alpha that satisfies strong Wolfe conditions.\n    \n    >>> start_point = np.array([1.8, 1.7])\n    >>> search_gradient = np.array([-1.0, -1.0])\n    >>> line_search(obj_func, obj_grad, start_point, search_gradient)\n    (1.0, 2, 1, 1.1300000000000001, 6.13, [1.6, 1.4])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "659c99b908843d9fa5475a8808aecc3e5647a2074300c04ff8174a08193f6d3a",
            "fields": [
                {
                    "id": "aiyiurkm",
                    "encoding": "",
                    "name": "f",
                    "value": "",
                    "defaultValue": "",
                    "description": "Objective function.",
                    "type": "callable f(x,*args)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mw_rjosi",
                    "encoding": "",
                    "name": "myfprime",
                    "value": "",
                    "defaultValue": "",
                    "description": "Objective function gradient.",
                    "type": "callable f'(x,*args)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gmvd3tcm",
                    "encoding": "",
                    "name": "xk",
                    "value": "",
                    "defaultValue": "",
                    "description": "Starting point.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eh_qla9m",
                    "encoding": "",
                    "name": "pk",
                    "value": "",
                    "defaultValue": "",
                    "description": "Search direction. The search direction must be a descent direction\nfor the algorithm to converge.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dsr49dgs",
                    "encoding": "",
                    "name": "gfk",
                    "value": "",
                    "defaultValue": "",
                    "description": "Gradient value for x=xk (xk being the current parameter\nestimate). Will be recomputed if omitted.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1ugs3s4f",
                    "encoding": "",
                    "name": "old_fval",
                    "value": "",
                    "defaultValue": "",
                    "description": "Function value for x=xk. Will be recomputed if omitted.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c_11wkuj",
                    "encoding": "",
                    "name": "old_old_fval",
                    "value": "",
                    "defaultValue": "",
                    "description": "Function value for the point preceding x=xk.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b622abc3",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Additional arguments passed to objective function.",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mw05oot5",
                    "encoding": "",
                    "name": "c1",
                    "value": 0.0001,
                    "defaultValue": 0.0001,
                    "description": "Parameter for Armijo condition rule.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "havoexn6",
                    "encoding": "",
                    "name": "c2",
                    "value": 0.9,
                    "defaultValue": 0.9,
                    "description": "Parameter for curvature condition rule.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_uljdbvx",
                    "encoding": "",
                    "name": "amax",
                    "value": "",
                    "defaultValue": "",
                    "description": "Maximum step size",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k8jpom44",
                    "encoding": "",
                    "name": "extra_condition",
                    "value": "",
                    "defaultValue": "",
                    "description": "A callable of the form ``extra_condition(alpha, x, f, g)``\nreturning a boolean. Arguments are the proposed step ``alpha``\nand the corresponding ``x``, ``f`` and ``g`` values. The line search\naccepts the value of ``alpha`` only if this\ncallable returns ``True``. If the callable returns ``False``\nfor the step length, the algorithm will continue with\nnew iterates. The callable is only called for iterates\nsatisfying the strong Wolfe conditions.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u1k6uefb",
                    "encoding": "",
                    "name": "maxiter",
                    "value": 10,
                    "defaultValue": 10,
                    "description": "Maximum number of iterations to perform.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uigm4uvu",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.line_search_wolfe2",
                    "defaultValue": "scipy.optimize.line_search_wolfe2",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aiaorqwd",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "260snnt0",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ph0ixpsw",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nxyj8lgw",
                    "encoding": "",
                    "name": "base_name",
                    "value": "",
                    "defaultValue": "",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "clrpsmud",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f6bulxvi",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "39q7m3z_",
            "name": "optimize.linear_sum_assignment",
            "description": "Parameters\n----------\ncost_matrix : array\n    The cost matrix of the bipartite graph.\n\nmaximize : bool (default: False)\n    Calculates a maximum weight matching if true.\n\nReturns\n-------\nrow_ind, col_ind : array\n    An array of row indices and one of corresponding column indices giving\n    the optimal assignment. The cost of the assignment can be computed\n    as ``cost_matrix[row_ind, col_ind].sum()``. The row indices will be\n    sorted; in the case of a square cost matrix they will be equal to\n    ``numpy.arange(cost_matrix.shape[0])``.\n\nSee Also\n--------\nscipy.sparse.csgraph.min_weight_full_bipartite_matching : for sparse inputs\n\nNotes\n-----\n\nThe linear sum assignment problem [1]_ is also known as minimum weight\nmatching in bipartite graphs. A problem instance is described by a matrix\nC, where each C[i,j] is the cost of matching vertex i of the first partite\nset (a 'worker') and vertex j of the second set (a 'job'). The goal is to\nfind a complete assignment of workers to jobs of minimal cost.\n\nFormally, let X be a boolean matrix where :math:`X[i,j] = 1` iff row i is\nassigned to column j. Then the optimal assignment has cost\n\n.. math::\n    \\min \\sum_i \\sum_j C_{i,j} X_{i,j}\n\nwhere, in the case where the matrix X is square, each row is assigned to\nexactly one column, and each column to exactly one row.\n\nThis function can also solve a generalization of the classic assignment\nproblem where the cost matrix is rectangular. If it has more rows than\ncolumns, then not every row needs to be assigned to a column, and vice\nversa.\n\nThis implementation is a modified Jonker-Volgenant algorithm with no\ninitialization, described in ref. [2]_.\n\n.. versionadded:: 0.17.0\n\nReferences\n----------\n\n.. [1] https://en.wikipedia.org/wiki/Assignment_problem\n\n.. [2] DF Crouse. On implementing 2D rectangular assignment algorithms.\n       *IEEE Transactions on Aerospace and Electronic Systems*,\n       52(4):1679-1696, August 2016, :doi:`10.1109/TAES.2016.140952`\n\nExamples\n--------\n>>> import numpy as np\n>>> cost = np.array([[4, 1, 3], [2, 0, 5], [3, 2, 2]])\n>>> from scipy.optimize import linear_sum_assignment\n>>> row_ind, col_ind = linear_sum_assignment(cost)\n>>> col_ind\narray([1, 0, 2])\n>>> cost[row_ind, col_ind].sum()\n5",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b0c2b7023d1c4b2f6c64dd9576ce8029232e3919ecac3b5582837373c42f70dc",
            "fields": [
                {
                    "id": "mpv2s9ii",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.linear_sum_assignment",
                    "defaultValue": "scipy.optimize.linear_sum_assignment",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xyjeowp8",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aposfyhq",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "s0i1q_r7",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nogdx4ej",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize",
                    "defaultValue": "scipy.optimize",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0iif7fqm",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mmxjjqo6",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "duobo3s3",
            "name": "optimize.linearmixing",
            "description": "Find a root of a function, using a scalar Jacobian approximation.\n    \n    .. warning::\n    \n       This algorithm may be useful for specific problems, but whether\n       it will work may depend strongly on the problem.\n    \n    Parameters\n    ----------\n    F : function(x) -> f\n        Function whose root to find; should take and return an array-like\n        object.\n    xin : array_like\n        Initial guess for the solution\n    alpha : float, optional\n        The Jacobian approximation is (-1/alpha).\n    iter : int, optional\n        Number of iterations to make. If omitted (default), make as many\n        as required to meet tolerances.\n    verbose : bool, optional\n        Print status to stdout on every iteration.\n    maxiter : int, optional\n        Maximum number of iterations to make. If more are needed to\n        meet convergence, `NoConvergence` is raised.\n    f_tol : float, optional\n        Absolute tolerance (in max-norm) for the residual.\n        If omitted, default is 6e-6.\n    f_rtol : float, optional\n        Relative tolerance for the residual. If omitted, not used.\n    x_tol : float, optional\n        Absolute minimum step size, as determined from the Jacobian\n        approximation. If the step size is smaller than this, optimization\n        is terminated as successful. If omitted, not used.\n    x_rtol : float, optional\n        Relative minimum step size. If omitted, not used.\n    tol_norm : function(vector) -> scalar, optional\n        Norm to use in convergence check. Default is the maximum norm.\n    line_search : {None, 'armijo' (default), 'wolfe'}, optional\n        Which type of a line search to use to determine the step size in the\n        direction given by the Jacobian approximation. Defaults to 'armijo'.\n    callback : function, optional\n        Optional callback function. It is called on every iteration as\n        ``callback(x, f)`` where `x` is the current solution and `f`\n        the corresponding residual.\n    \n    Returns\n    -------\n    sol : ndarray\n        An array (of similar array type as `x0`) containing the final solution.\n    \n    Raises\n    ------\n    NoConvergence\n        When a solution was not found.\n    \n    See Also\n    --------\n    root : Interface to root finding algorithms for multivariate\n           functions. See ``method='linearmixing'`` in particular.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "61c1f4c347a585fe5b061ef48c693e9cbe03c48f35b9dafe1401f8b4ea783841",
            "fields": [
                {
                    "id": "_163wbax",
                    "encoding": "",
                    "name": "F",
                    "value": "",
                    "defaultValue": "",
                    "description": "Function whose root to find; should take and return an array-like\nobject.",
                    "type": "function(x) -> f",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6w346qci",
                    "encoding": "",
                    "name": "xin",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial guess for the solution",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6txs4f49",
                    "encoding": "",
                    "name": "iter",
                    "value": "",
                    "defaultValue": "",
                    "description": "Number of iterations to make. If omitted (default), make as many\nas required to meet tolerances.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vh50o4w7",
                    "encoding": "",
                    "name": "alpha",
                    "value": "",
                    "defaultValue": "",
                    "description": "The Jacobian approximation is (-1/alpha).",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_s6vr6gm",
                    "encoding": "",
                    "name": "verbose",
                    "value": false,
                    "defaultValue": false,
                    "description": "Print status to stdout on every iteration.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e7t326s6",
                    "encoding": "",
                    "name": "maxiter",
                    "value": "",
                    "defaultValue": "",
                    "description": "Maximum number of iterations to make. If more are needed to\nmeet convergence, `NoConvergence` is raised.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h62b4gwc",
                    "encoding": "",
                    "name": "f_tol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Absolute tolerance (in max-norm) for the residual.\nIf omitted, default is 6e-6.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t5i_96uo",
                    "encoding": "",
                    "name": "f_rtol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Relative tolerance for the residual. If omitted, not used.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z4oqgwde",
                    "encoding": "",
                    "name": "x_tol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Absolute minimum step size, as determined from the Jacobian\napproximation. If the step size is smaller than this, optimization\nis terminated as successful. If omitted, not used.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "idqfoyln",
                    "encoding": "",
                    "name": "x_rtol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Relative minimum step size. If omitted, not used.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i4xv1g7q",
                    "encoding": "",
                    "name": "tol_norm",
                    "value": "",
                    "defaultValue": "",
                    "description": "Norm to use in convergence check. Default is the maximum norm.",
                    "type": "function(vector) -> scalar",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ibz0gaib",
                    "encoding": "",
                    "name": "line_search",
                    "value": "armijo",
                    "defaultValue": "armijo",
                    "description": "Which type of a line search to use to determine the step size in the\ndirection given by the Jacobian approximation. Defaults to 'armijo'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wq46fxry",
                    "encoding": "",
                    "name": "callback",
                    "value": "",
                    "defaultValue": "",
                    "description": "Optional callback function. It is called on every iteration as\n``callback(x, f)`` where `x` is the current solution and `f`\nthe corresponding residual.",
                    "type": "function",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qpi1nzld",
                    "encoding": "",
                    "name": "kw",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cy16tyw_",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.linearmixing",
                    "defaultValue": "scipy.optimize.linearmixing",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bgn6vhx4",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4il907qe",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "w7962joc",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0sxnbgib",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize",
                    "defaultValue": "scipy.optimize",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f10bg1e1",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kvagt9ds",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "s6z2pxg0",
            "name": "optimize.linprog",
            "description": "Linear programming: minimize a linear objective function subject to linear\n    equality and inequality constraints.\n    \n    Linear programming solves problems of the following form:\n    \n    .. math::\n    \n        \\min_x \\ & c^T x \\\\\n        \\mbox{such that} \\ & A_{ub} x \\leq b_{ub},\\\\\n        & A_{eq} x = b_{eq},\\\\\n        & l \\leq x \\leq u ,\n    \n    where :math:`x` is a vector of decision variables; :math:`c`,\n    :math:`b_{ub}`, :math:`b_{eq}`, :math:`l`, and :math:`u` are vectors; and\n    :math:`A_{ub}` and :math:`A_{eq}` are matrices.\n    \n    Alternatively, that's:\n    \n    - minimize ::\n    \n        c @ x\n    \n    - such that ::\n    \n        A_ub @ x <= b_ub\n        A_eq @ x == b_eq\n        lb <= x <= ub\n    \n    Note that by default ``lb = 0`` and ``ub = None``. Other bounds can be\n    specified with ``bounds``.\n    \n    Parameters\n    ----------\n    c : 1-D array\n        The coefficients of the linear objective function to be minimized.\n    A_ub : 2-D array, optional\n        The inequality constraint matrix. Each row of ``A_ub`` specifies the\n        coefficients of a linear inequality constraint on ``x``.\n    b_ub : 1-D array, optional\n        The inequality constraint vector. Each element represents an\n        upper bound on the corresponding value of ``A_ub @ x``.\n    A_eq : 2-D array, optional\n        The equality constraint matrix. Each row of ``A_eq`` specifies the\n        coefficients of a linear equality constraint on ``x``.\n    b_eq : 1-D array, optional\n        The equality constraint vector. Each element of ``A_eq @ x`` must equal\n        the corresponding element of ``b_eq``.\n    bounds : sequence, optional\n        A sequence of ``(min, max)`` pairs for each element in ``x``, defining\n        the minimum and maximum values of that decision variable.\n        If a single tuple ``(min, max)`` is provided, then ``min`` and ``max``\n        will serve as bounds for all decision variables.\n        Use ``None`` to indicate that there is no bound. For instance, the\n        default bound ``(0, None)`` means that all decision variables are\n        non-negative, and the pair ``(None, None)`` means no bounds at all,\n        i.e. all variables are allowed to be any real.\n    method : str, optional\n        The algorithm used to solve the standard form problem.\n        The following are supported.\n    \n        - :ref:`'highs' <optimize.linprog-highs>` (default)\n        - :ref:`'highs-ds' <optimize.linprog-highs-ds>`\n        - :ref:`'highs-ipm' <optimize.linprog-highs-ipm>`\n        - :ref:`'interior-point' <optimize.linprog-interior-point>` (legacy)\n        - :ref:`'revised simplex' <optimize.linprog-revised_simplex>` (legacy)\n        - :ref:`'simplex' <optimize.linprog-simplex>` (legacy)\n    \n        The legacy methods are deprecated and will be removed in SciPy 1.11.0.\n    callback : callable, optional\n        If a callback function is provided, it will be called at least once per\n        iteration of the algorithm. The callback function must accept a single\n        `scipy.optimize.OptimizeResult` consisting of the following fields:\n    \n        x : 1-D array\n            The current solution vector.\n        fun : float\n            The current value of the objective function ``c @ x``.\n        success : bool\n            ``True`` when the algorithm has completed successfully.\n        slack : 1-D array\n            The (nominally positive) values of the slack,\n            ``b_ub - A_ub @ x``.\n        con : 1-D array\n            The (nominally zero) residuals of the equality constraints,\n            ``b_eq - A_eq @ x``.\n        phase : int\n            The phase of the algorithm being executed.\n        status : int\n            An integer representing the status of the algorithm.\n    \n            ``0`` : Optimization proceeding nominally.\n    \n            ``1`` : Iteration limit reached.\n    \n            ``2`` : Problem appears to be infeasible.\n    \n            ``3`` : Problem appears to be unbounded.\n    \n            ``4`` : Numerical difficulties encountered.\n    \n        nit : int\n            The current iteration number.\n        message : str\n            A string descriptor of the algorithm status.\n    \n        Callback functions are not currently supported by the HiGHS methods.\n    \n    options : dict, optional\n        A dictionary of solver options. All methods accept the following\n        options:\n    \n        maxiter : int\n            Maximum number of iterations to perform.\n            Default: see method-specific documentation.\n        disp : bool\n            Set to ``True`` to print convergence messages.\n            Default: ``False``.\n        presolve : bool\n            Set to ``False`` to disable automatic presolve.\n            Default: ``True``.\n    \n        All methods except the HiGHS solvers also accept:\n    \n        tol : float\n            A tolerance which determines when a residual is \"close enough\" to\n            zero to be considered exactly zero.\n        autoscale : bool\n            Set to ``True`` to automatically perform equilibration.\n            Consider using this option if the numerical values in the\n            constraints are separated by several orders of magnitude.\n            Default: ``False``.\n        rr : bool\n            Set to ``False`` to disable automatic redundancy removal.\n            Default: ``True``.\n        rr_method : string\n            Method used to identify and remove redundant rows from the\n            equality constraint matrix after presolve. For problems with\n            dense input, the available methods for redundancy removal are:\n    \n            ``SVD``:\n                Repeatedly performs singular value decomposition on\n                the matrix, detecting redundant rows based on nonzeros\n                in the left singular vectors that correspond with\n                zero singular values. May be fast when the matrix is\n                nearly full rank.\n            ``pivot``:\n                Uses the algorithm presented in [5]_ to identify\n                redundant rows.\n            ``ID``:\n                Uses a randomized interpolative decomposition.\n                Identifies columns of the matrix transpose not used in\n                a full-rank interpolative decomposition of the matrix.\n            ``None``:\n                Uses ``svd`` if the matrix is nearly full rank, that is,\n                the difference between the matrix rank and the number\n                of rows is less than five. If not, uses ``pivot``. The\n                behavior of this default is subject to change without\n                prior notice.\n    \n            Default: None.\n            For problems with sparse input, this option is ignored, and the\n            pivot-based algorithm presented in [5]_ is used.\n    \n        For method-specific options, see\n        :func:`show_options('linprog') <show_options>`.\n    \n    x0 : 1-D array, optional\n        Guess values of the decision variables, which will be refined by\n        the optimization algorithm. This argument is currently used only by the\n        :ref:`'revised simplex' <optimize.linprog-revised_simplex>` method,\n        and can only be used if `x0` represents a basic feasible solution.\n    \n    integrality : 1-D array or int, optional\n        Indicates the type of integrality constraint on each decision variable.\n    \n        ``0`` : Continuous variable; no integrality constraint.\n    \n        ``1`` : Integer variable; decision variable must be an integer\n        within `bounds`.\n    \n        ``2`` : Semi-continuous variable; decision variable must be within\n        `bounds` or take value ``0``.\n    \n        ``3`` : Semi-integer variable; decision variable must be an integer\n        within `bounds` or take value ``0``.\n    \n        By default, all variables are continuous.\n    \n        For mixed integrality constraints, supply an array of shape ``c.shape``.\n        To infer a constraint on each decision variable from shorter inputs,\n        the argument will be broadcast to ``c.shape`` using `numpy.broadcast_to`.\n    \n        This argument is currently used only by the\n        :ref:`'highs' <optimize.linprog-highs>` method and is ignored otherwise.\n    \n    Returns\n    -------\n    res : OptimizeResult\n        A :class:`scipy.optimize.OptimizeResult` consisting of the fields\n        below. Note that the return types of the fields may depend on whether\n        the optimization was successful, therefore it is recommended to check\n        `OptimizeResult.status` before relying on the other fields:\n    \n        x : 1-D array\n            The values of the decision variables that minimizes the\n            objective function while satisfying the constraints.\n        fun : float\n            The optimal value of the objective function ``c @ x``.\n        slack : 1-D array\n            The (nominally positive) values of the slack variables,\n            ``b_ub - A_ub @ x``.\n        con : 1-D array\n            The (nominally zero) residuals of the equality constraints,\n            ``b_eq - A_eq @ x``.\n        success : bool\n            ``True`` when the algorithm succeeds in finding an optimal\n            solution.\n        status : int\n            An integer representing the exit status of the algorithm.\n    \n            ``0`` : Optimization terminated successfully.\n    \n            ``1`` : Iteration limit reached.\n    \n            ``2`` : Problem appears to be infeasible.\n    \n            ``3`` : Problem appears to be unbounded.\n    \n            ``4`` : Numerical difficulties encountered.\n    \n        nit : int\n            The total number of iterations performed in all phases.\n        message : str\n            A string descriptor of the exit status of the algorithm.\n    \n    See Also\n    --------\n    show_options : Additional options accepted by the solvers.\n    \n    Notes\n    -----\n    This section describes the available solvers that can be selected by the\n    'method' parameter.\n    \n    :ref:`'highs-ds' <optimize.linprog-highs-ds>`, and\n    :ref:`'highs-ipm' <optimize.linprog-highs-ipm>` are interfaces to the\n    HiGHS simplex and interior-point method solvers [13]_, respectively.\n    :ref:`'highs' <optimize.linprog-highs>` (default) chooses between\n    the two automatically. These are the fastest linear\n    programming solvers in SciPy, especially for large, sparse problems;\n    which of these two is faster is problem-dependent.\n    The other solvers are legacy methods and will be removed when `callback` is\n    supported by the HiGHS methods.\n    \n    Method :ref:`'highs-ds' <optimize.linprog-highs-ds>`, is a wrapper of the C++ high\n    performance dual revised simplex implementation (HSOL) [13]_, [14]_.\n    Method :ref:`'highs-ipm' <optimize.linprog-highs-ipm>` is a wrapper of a C++\n    implementation of an **i**\\ nterior-\\ **p**\\ oint **m**\\ ethod [13]_; it\n    features a crossover routine, so it is as accurate as a simplex solver.\n    Method :ref:`'highs' <optimize.linprog-highs>` chooses between the two\n    automatically.\n    For new code involving `linprog`, we recommend explicitly choosing one of\n    these three method values.\n    \n    .. versionadded:: 1.6.0\n    \n    Method :ref:`'interior-point' <optimize.linprog-interior-point>`\n    uses the primal-dual path following algorithm\n    as outlined in [4]_. This algorithm supports sparse constraint matrices and\n    is typically faster than the simplex methods, especially for large, sparse\n    problems. Note, however, that the solution returned may be slightly less\n    accurate than those of the simplex methods and will not, in general,\n    correspond with a vertex of the polytope defined by the constraints.\n    \n    .. versionadded:: 1.0.0\n    \n    Method :ref:`'revised simplex' <optimize.linprog-revised_simplex>`\n    uses the revised simplex method as described in\n    [9]_, except that a factorization [11]_ of the basis matrix, rather than\n    its inverse, is efficiently maintained and used to solve the linear systems\n    at each iteration of the algorithm.\n    \n    .. versionadded:: 1.3.0\n    \n    Method :ref:`'simplex' <optimize.linprog-simplex>` uses a traditional,\n    full-tableau implementation of\n    Dantzig's simplex algorithm [1]_, [2]_ (*not* the\n    Nelder-Mead simplex). This algorithm is included for backwards\n    compatibility and educational purposes.\n    \n    .. versionadded:: 0.15.0\n    \n    Before applying :ref:`'interior-point' <optimize.linprog-interior-point>`,\n    :ref:`'revised simplex' <optimize.linprog-revised_simplex>`, or\n    :ref:`'simplex' <optimize.linprog-simplex>`,\n    a presolve procedure based on [8]_ attempts\n    to identify trivial infeasibilities, trivial unboundedness, and potential\n    problem simplifications. Specifically, it checks for:\n    \n    - rows of zeros in ``A_eq`` or ``A_ub``, representing trivial constraints;\n    - columns of zeros in ``A_eq`` `and` ``A_ub``, representing unconstrained\n      variables;\n    - column singletons in ``A_eq``, representing fixed variables; and\n    - column singletons in ``A_ub``, representing simple bounds.\n    \n    If presolve reveals that the problem is unbounded (e.g. an unconstrained\n    and unbounded variable has negative cost) or infeasible (e.g., a row of\n    zeros in ``A_eq`` corresponds with a nonzero in ``b_eq``), the solver\n    terminates with the appropriate status code. Note that presolve terminates\n    as soon as any sign of unboundedness is detected; consequently, a problem\n    may be reported as unbounded when in reality the problem is infeasible\n    (but infeasibility has not been detected yet). Therefore, if it is\n    important to know whether the problem is actually infeasible, solve the\n    problem again with option ``presolve=False``.\n    \n    If neither infeasibility nor unboundedness are detected in a single pass\n    of the presolve, bounds are tightened where possible and fixed\n    variables are removed from the problem. Then, linearly dependent rows\n    of the ``A_eq`` matrix are removed, (unless they represent an\n    infeasibility) to avoid numerical difficulties in the primary solve\n    routine. Note that rows that are nearly linearly dependent (within a\n    prescribed tolerance) may also be removed, which can change the optimal\n    solution in rare cases. If this is a concern, eliminate redundancy from\n    your problem formulation and run with option ``rr=False`` or\n    ``presolve=False``.\n    \n    Several potential improvements can be made here: additional presolve\n    checks outlined in [8]_ should be implemented, the presolve routine should\n    be run multiple times (until no further simplifications can be made), and\n    more of the efficiency improvements from [5]_ should be implemented in the\n    redundancy removal routines.\n    \n    After presolve, the problem is transformed to standard form by converting\n    the (tightened) simple bounds to upper bound constraints, introducing\n    non-negative slack variables for inequality constraints, and expressing\n    unbounded variables as the difference between two non-negative variables.\n    Optionally, the problem is automatically scaled via equilibration [12]_.\n    The selected algorithm solves the standard form problem, and a\n    postprocessing routine converts the result to a solution to the original\n    problem.\n    \n    References\n    ----------\n    .. [1] Dantzig, George B., Linear programming and extensions. Rand\n           Corporation Research Study Princeton Univ. Press, Princeton, NJ,\n           1963\n    .. [2] Hillier, S.H. and Lieberman, G.J. (1995), \"Introduction to\n           Mathematical Programming\", McGraw-Hill, Chapter 4.\n    .. [3] Bland, Robert G. New finite pivoting rules for the simplex method.\n           Mathematics of Operations Research (2), 1977: pp. 103-107.\n    .. [4] Andersen, Erling D., and Knud D. Andersen. \"The MOSEK interior point\n           optimizer for linear programming: an implementation of the\n           homogeneous algorithm.\" High performance optimization. Springer US,\n           2000. 197-232.\n    .. [5] Andersen, Erling D. \"Finding all linearly dependent rows in\n           large-scale linear programming.\" Optimization Methods and Software\n           6.3 (1995): 219-227.\n    .. [6] Freund, Robert M. \"Primal-Dual Interior-Point Methods for Linear\n           Programming based on Newton's Method.\" Unpublished Course Notes,\n           March 2004. Available 2/25/2017 at\n           https://ocw.mit.edu/courses/sloan-school-of-management/15-084j-nonlinear-programming-spring-2004/lecture-notes/lec14_int_pt_mthd.pdf\n    .. [7] Fourer, Robert. \"Solving Linear Programs by Interior-Point Methods.\"\n           Unpublished Course Notes, August 26, 2005. Available 2/25/2017 at\n           http://www.4er.org/CourseNotes/Book%20B/B-III.pdf\n    .. [8] Andersen, Erling D., and Knud D. Andersen. \"Presolving in linear\n           programming.\" Mathematical Programming 71.2 (1995): 221-245.\n    .. [9] Bertsimas, Dimitris, and J. Tsitsiklis. \"Introduction to linear\n           programming.\" Athena Scientific 1 (1997): 997.\n    .. [10] Andersen, Erling D., et al. Implementation of interior point\n            methods for large scale linear programming. HEC/Universite de\n            Geneve, 1996.\n    .. [11] Bartels, Richard H. \"A stabilization of the simplex method.\"\n            Journal in  Numerische Mathematik 16.5 (1971): 414-434.\n    .. [12] Tomlin, J. A. \"On scaling linear programming problems.\"\n            Mathematical Programming Study 4 (1975): 146-166.\n    .. [13] Huangfu, Q., Galabova, I., Feldmeier, M., and Hall, J. A. J.\n            \"HiGHS - high performance software for linear optimization.\"\n            https://highs.dev/\n    .. [14] Huangfu, Q. and Hall, J. A. J. \"Parallelizing the dual revised\n            simplex method.\" Mathematical Programming Computation, 10 (1),\n            119-142, 2018. DOI: 10.1007/s12532-017-0130-5\n    \n    Examples\n    --------\n    Consider the following problem:\n    \n    .. math::\n    \n        \\min_{x_0, x_1} \\ -x_0 + 4x_1 & \\\\\n        \\mbox{such that} \\ -3x_0 + x_1 & \\leq 6,\\\\\n        -x_0 - 2x_1 & \\geq -4,\\\\\n        x_1 & \\geq -3.\n    \n    The problem is not presented in the form accepted by `linprog`. This is\n    easily remedied by converting the \"greater than\" inequality\n    constraint to a \"less than\" inequality constraint by\n    multiplying both sides by a factor of :math:`-1`. Note also that the last\n    constraint is really the simple bound :math:`-3 \\leq x_1 \\leq \\infty`.\n    Finally, since there are no bounds on :math:`x_0`, we must explicitly\n    specify the bounds :math:`-\\infty \\leq x_0 \\leq \\infty`, as the\n    default is for variables to be non-negative. After collecting coeffecients\n    into arrays and tuples, the input for this problem is:\n    \n    >>> from scipy.optimize import linprog\n    >>> c = [-1, 4]\n    >>> A = [[-3, 1], [1, 2]]\n    >>> b = [6, 4]\n    >>> x0_bounds = (None, None)\n    >>> x1_bounds = (-3, None)\n    >>> res = linprog(c, A_ub=A, b_ub=b, bounds=[x0_bounds, x1_bounds])\n    >>> res.fun\n    -22.0\n    >>> res.x\n    array([10., -3.])\n    >>> res.message\n    'Optimization terminated successfully. (HiGHS Status 7: Optimal)'\n    \n    The marginals (AKA dual values / shadow prices / Lagrange multipliers)\n    and residuals (slacks) are also available.\n    \n    >>> res.ineqlin\n      residual: [ 3.900e+01  0.000e+00]\n     marginals: [-0.000e+00 -1.000e+00]\n    \n    For example, because the marginal associated with the second inequality\n    constraint is -1, we expect the optimal value of the objective function\n    to decrease by ``eps`` if we add a small amount ``eps`` to the right hand\n    side of the second inequality constraint:\n    \n    >>> eps = 0.05\n    >>> b[1] += eps\n    >>> linprog(c, A_ub=A, b_ub=b, bounds=[x0_bounds, x1_bounds]).fun\n    -22.05\n    \n    Also, because the residual on the first inequality constraint is 39, we\n    can decrease the right hand side of the first constraint by 39 without\n    affecting the optimal solution.\n    \n    >>> b = [6, 4]  # reset to original values\n    >>> b[0] -= 39\n    >>> linprog(c, A_ub=A, b_ub=b, bounds=[x0_bounds, x1_bounds]).fun\n    -22.0",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7f6bcf4f01c4e58ef84578e6eeb4d85c7bafabdbdeb06700d589b02bd36173f0",
            "fields": [
                {
                    "id": "nubhgp2b",
                    "encoding": "",
                    "name": "c",
                    "value": "",
                    "defaultValue": "",
                    "description": "The coefficients of the linear objective function to be minimized.",
                    "type": "1-D array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cjs5z9e7",
                    "encoding": "",
                    "name": "A_ub",
                    "value": "",
                    "defaultValue": "",
                    "description": "The inequality constraint matrix. Each row of ``A_ub`` specifies the\ncoefficients of a linear inequality constraint on ``x``.",
                    "type": "2-D array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gteovke7",
                    "encoding": "",
                    "name": "b_ub",
                    "value": "",
                    "defaultValue": "",
                    "description": "The inequality constraint vector. Each element represents an\nupper bound on the corresponding value of ``A_ub @ x``.",
                    "type": "1-D array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tjylhftd",
                    "encoding": "",
                    "name": "A_eq",
                    "value": "",
                    "defaultValue": "",
                    "description": "The equality constraint matrix. Each row of ``A_eq`` specifies the\ncoefficients of a linear equality constraint on ``x``.",
                    "type": "2-D array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xfkgxrl9",
                    "encoding": "",
                    "name": "b_eq",
                    "value": "",
                    "defaultValue": "",
                    "description": "The equality constraint vector. Each element of ``A_eq @ x`` must equal\nthe corresponding element of ``b_eq``.",
                    "type": "1-D array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dd42vd7u",
                    "encoding": "",
                    "name": "bounds",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "A sequence of ``(min, max)`` pairs for each element in ``x``, defining\nthe minimum and maximum values of that decision variable.\nIf a single tuple ``(min, max)`` is provided, then ``min`` and ``max``\nwill serve as bounds for all decision variables.\nUse ``None`` to indicate that there is no bound. For instance, the\ndefault bound ``(0, None)`` means that all decision variables are\nnon-negative, and the pair ``(None, None)`` means no bounds at all,\ni.e. all variables are allowed to be any real.",
                    "type": "builtins.tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a50gfau9",
                    "encoding": "",
                    "name": "method",
                    "value": "highs",
                    "defaultValue": "highs",
                    "description": "The algorithm used to solve the standard form problem.\nThe following are supported.\n\n- :ref:`'highs' <optimize.linprog-highs>` (default)\n- :ref:`'highs-ds' <optimize.linprog-highs-ds>`\n- :ref:`'highs-ipm' <optimize.linprog-highs-ipm>`\n- :ref:`'interior-point' <optimize.linprog-interior-point>` (legacy)\n- :ref:`'revised simplex' <optimize.linprog-revised_simplex>` (legacy)\n- :ref:`'simplex' <optimize.linprog-simplex>` (legacy)\n\nThe legacy methods are deprecated and will be removed in SciPy 1.11.0.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_g4w562f",
                    "encoding": "",
                    "name": "callback",
                    "value": "",
                    "defaultValue": "",
                    "description": "If a callback function is provided, it will be called at least once per\niteration of the algorithm. The callback function must accept a single\n`scipy.optimize.OptimizeResult` consisting of the following fields:\n\nx : 1-D array\n    The current solution vector.\nfun : float\n    The current value of the objective function ``c @ x``.\nsuccess : bool\n    ``True`` when the algorithm has completed successfully.\nslack : 1-D array\n    The (nominally positive) values of the slack,\n    ``b_ub - A_ub @ x``.\ncon : 1-D array\n    The (nominally zero) residuals of the equality constraints,\n    ``b_eq - A_eq @ x``.\nphase : int\n    The phase of the algorithm being executed.\nstatus : int\n    An integer representing the status of the algorithm.\n\n    ``0`` : Optimization proceeding nominally.\n\n    ``1`` : Iteration limit reached.\n\n    ``2`` : Problem appears to be infeasible.\n\n    ``3`` : Problem appears to be unbounded.\n\n    ``4`` : Numerical difficulties encountered.\n\nnit : int\n    The current iteration number.\nmessage : str\n    A string descriptor of the algorithm status.\n\nCallback functions are not currently supported by the HiGHS methods.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9q732vyg",
                    "encoding": "",
                    "name": "options",
                    "value": "",
                    "defaultValue": "",
                    "description": "A dictionary of solver options. All methods accept the following\noptions:\n\nmaxiter : int\n    Maximum number of iterations to perform.\n    Default: see method-specific documentation.\ndisp : bool\n    Set to ``True`` to print convergence messages.\n    Default: ``False``.\npresolve : bool\n    Set to ``False`` to disable automatic presolve.\n    Default: ``True``.\n\nAll methods except the HiGHS solvers also accept:\n\ntol : float\n    A tolerance which determines when a residual is \"close enough\" to\n    zero to be considered exactly zero.\nautoscale : bool\n    Set to ``True`` to automatically perform equilibration.\n    Consider using this option if the numerical values in the\n    constraints are separated by several orders of magnitude.\n    Default: ``False``.\nrr : bool\n    Set to ``False`` to disable automatic redundancy removal.\n    Default: ``True``.\nrr_method : string\n    Method used to identify and remove redundant rows from the\n    equality constraint matrix after presolve. For problems with\n    dense input, the available methods for redundancy removal are:\n\n    ``SVD``:\n        Repeatedly performs singular value decomposition on\n        the matrix, detecting redundant rows based on nonzeros\n        in the left singular vectors that correspond with\n        zero singular values. May be fast when the matrix is\n        nearly full rank.\n    ``pivot``:\n        Uses the algorithm presented in [5]_ to identify\n        redundant rows.\n    ``ID``:\n        Uses a randomized interpolative decomposition.\n        Identifies columns of the matrix transpose not used in\n        a full-rank interpolative decomposition of the matrix.\n    ``None``:\n        Uses ``svd`` if the matrix is nearly full rank, that is,\n        the difference between the matrix rank and the number\n        of rows is less than five. If not, uses ``pivot``. The\n        behavior of this default is subject to change without\n        prior notice.\n\n    Default: None.\n    For problems with sparse input, this option is ignored, and the\n    pivot-based algorithm presented in [5]_ is used.\n\nFor method-specific options, see\n:func:`show_options('linprog') <show_options>`.",
                    "type": "dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d55qmqx9",
                    "encoding": "",
                    "name": "x0",
                    "value": "",
                    "defaultValue": "",
                    "description": "Guess values of the decision variables, which will be refined by\nthe optimization algorithm. This argument is currently used only by the\n:ref:`'revised simplex' <optimize.linprog-revised_simplex>` method,\nand can only be used if `x0` represents a basic feasible solution.",
                    "type": "1-D array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k2v8t5j1",
                    "encoding": "",
                    "name": "integrality",
                    "value": "",
                    "defaultValue": "",
                    "description": "Indicates the type of integrality constraint on each decision variable.\n\n``0`` : Continuous variable; no integrality constraint.\n\n``1`` : Integer variable; decision variable must be an integer\nwithin `bounds`.\n\n``2`` : Semi-continuous variable; decision variable must be within\n`bounds` or take value ``0``.\n\n``3`` : Semi-integer variable; decision variable must be an integer\nwithin `bounds` or take value ``0``.\n\nBy default, all variables are continuous.\n\nFor mixed integrality constraints, supply an array of shape ``c.shape``.\nTo infer a constraint on each decision variable from shorter inputs,\nthe argument will be broadcast to ``c.shape`` using `numpy.broadcast_to`.\n\nThis argument is currently used only by the\n:ref:`'highs' <optimize.linprog-highs>` method and is ignored otherwise.",
                    "type": "1-D array or int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "weolrd1y",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.linprog",
                    "defaultValue": "scipy.optimize.linprog",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p344v683",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "shi6r8gk",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "bx9ivdwu",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dk7z2adt",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize",
                    "defaultValue": "scipy.optimize",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bm_s9nif",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "97tmj9ws",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "qt7b5rjt",
            "name": "optimize.linprog_verbose_callback",
            "description": "A sample callback function demonstrating the linprog callback interface.\n    This callback produces detailed output to sys.stdout before each iteration\n    and after the final iteration of the simplex algorithm.\n    \n    Parameters\n    ----------\n    res : A `scipy.optimize.OptimizeResult` consisting of the following fields:\n    \n        x : 1-D array\n            The independent variable vector which optimizes the linear\n            programming problem.\n        fun : float\n            Value of the objective function.\n        success : bool\n            True if the algorithm succeeded in finding an optimal solution.\n        slack : 1-D array\n            The values of the slack variables. Each slack variable corresponds\n            to an inequality constraint. If the slack is zero, then the\n            corresponding constraint is active.\n        con : 1-D array\n            The (nominally zero) residuals of the equality constraints, that is,\n            ``b - A_eq @ x``\n        phase : int\n            The phase of the optimization being executed. In phase 1 a basic\n            feasible solution is sought and the T has an additional row\n            representing an alternate objective function.\n        status : int\n            An integer representing the exit status of the optimization:\n    \n            ``0`` : Optimization terminated successfully\n    \n            ``1`` : Iteration limit reached\n    \n            ``2`` : Problem appears to be infeasible\n    \n            ``3`` : Problem appears to be unbounded\n    \n            ``4`` : Serious numerical difficulties encountered\n    \n        nit : int\n            The number of iterations performed.\n        message : str\n            A string descriptor of the exit status of the optimization.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "aec62206af3c59b5e9295baf525fd563b654167bca6f7b84482e5c49f38db0a5",
            "fields": [
                {
                    "id": "rd154g0v",
                    "encoding": "",
                    "name": "res",
                    "value": "",
                    "defaultValue": "",
                    "description": "x : 1-D array\n    The independent variable vector which optimizes the linear\n    programming problem.\nfun : float\n    Value of the objective function.\nsuccess : bool\n    True if the algorithm succeeded in finding an optimal solution.\nslack : 1-D array\n    The values of the slack variables. Each slack variable corresponds\n    to an inequality constraint. If the slack is zero, then the\n    corresponding constraint is active.\ncon : 1-D array\n    The (nominally zero) residuals of the equality constraints, that is,\n    ``b - A_eq @ x``\nphase : int\n    The phase of the optimization being executed. In phase 1 a basic\n    feasible solution is sought and the T has an additional row\n    representing an alternate objective function.\nstatus : int\n    An integer representing the exit status of the optimization:\n\n    ``0`` : Optimization terminated successfully\n\n    ``1`` : Iteration limit reached\n\n    ``2`` : Problem appears to be infeasible\n\n    ``3`` : Problem appears to be unbounded\n\n    ``4`` : Serious numerical difficulties encountered\n\nnit : int\n    The number of iterations performed.\nmessage : str\n    A string descriptor of the exit status of the optimization.",
                    "type": "A scipy.optimize.OptimizeResult consisting of the following fields:",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wgnrwusx",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.linprog_verbose_callback",
                    "defaultValue": "scipy.optimize.linprog_verbose_callback",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hmb8v4xh",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gosn8p1i",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "vjw10073",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3o6ho_ex",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize",
                    "defaultValue": "scipy.optimize",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "84aty4_9",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sgitjhqx",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "flt3i5zw",
            "name": "optimize.lsq_linear",
            "description": "Solve a linear least-squares problem with bounds on the variables.\n    \n    Given a m-by-n design matrix A and a target vector b with m elements,\n    `lsq_linear` solves the following optimization problem::\n    \n        minimize 0.5 * ||A x - b||**2\n        subject to lb <= x <= ub\n    \n    This optimization problem is convex, hence a found minimum (if iterations\n    have converged) is guaranteed to be global.\n    \n    Parameters\n    ----------\n    A : array_like, sparse array or LinearOperator, shape (m, n)\n        Design matrix. Can be `scipy.sparse.linalg.LinearOperator`.\n    b : array_like, shape (m,)\n        Target vector.\n    bounds : 2-tuple of array_like or `Bounds`, optional\n        Lower and upper bounds on parameters. Defaults to no bounds.\n        There are two ways to specify the bounds:\n    \n        - Instance of `Bounds` class.\n        - 2-tuple of array_like: Each element of the tuple must be either\n          an array with the length equal to the number of parameters, or a\n          scalar (in which case the bound is taken to be the same for all\n          parameters). Use ``np.inf`` with an appropriate sign to disable\n          bounds on all or some parameters.\n    \n    method : 'trf' or 'bvls', optional\n        Method to perform minimization.\n    \n        * 'trf' : Trust Region Reflective algorithm adapted for a linear\n          least-squares problem. This is an interior-point-like method\n          and the required number of iterations is weakly correlated with\n          the number of variables.\n        * 'bvls' : Bounded-variable least-squares algorithm. This is\n          an active set method, which requires the number of iterations\n          comparable to the number of variables. Can't be used when `A` is\n          sparse or LinearOperator.\n    \n        Default is 'trf'.\n    tol : float, optional\n        Tolerance parameter. The algorithm terminates if a relative change\n        of the cost function is less than `tol` on the last iteration.\n        Additionally, the first-order optimality measure is considered:\n    \n        * ``method='trf'`` terminates if the uniform norm of the gradient,\n          scaled to account for the presence of the bounds, is less than\n          `tol`.\n        * ``method='bvls'`` terminates if Karush-Kuhn-Tucker conditions\n          are satisfied within `tol` tolerance.\n    \n    lsq_solver : {None, 'exact', 'lsmr'}, optional\n        Method of solving unbounded least-squares problems throughout\n        iterations:\n    \n        * 'exact' : Use dense QR or SVD decomposition approach. Can't be\n          used when `A` is sparse or LinearOperator.\n        * 'lsmr' : Use `scipy.sparse.linalg.lsmr` iterative procedure\n          which requires only matrix-vector product evaluations. Can't\n          be used with ``method='bvls'``.\n    \n        If None (default), the solver is chosen based on type of `A`.\n    lsmr_tol : None, float or 'auto', optional\n        Tolerance parameters 'atol' and 'btol' for `scipy.sparse.linalg.lsmr`\n        If None (default), it is set to ``1e-2 * tol``. If 'auto', the\n        tolerance will be adjusted based on the optimality of the current\n        iterate, which can speed up the optimization process, but is not always\n        reliable.\n    max_iter : None or int, optional\n        Maximum number of iterations before termination. If None (default), it\n        is set to 100 for ``method='trf'`` or to the number of variables for\n        ``method='bvls'`` (not counting iterations for 'bvls' initialization).\n    verbose : {0, 1, 2}, optional\n        Level of algorithm's verbosity:\n    \n        * 0 : work silently (default).\n        * 1 : display a termination report.\n        * 2 : display progress during iterations.\n    \n    lsmr_maxiter : None or int, optional\n        Maximum number of iterations for the lsmr least squares solver,\n        if it is used (by setting ``lsq_solver='lsmr'``). If None (default), it\n        uses lsmr's default of ``min(m, n)`` where ``m`` and ``n`` are the\n        number of rows and columns of `A`, respectively. Has no effect if\n        ``lsq_solver='exact'``.\n    \n    Returns\n    -------\n    OptimizeResult with the following fields defined:\n    x : ndarray, shape (n,)\n        Solution found.\n    cost : float\n        Value of the cost function at the solution.\n    fun : ndarray, shape (m,)\n        Vector of residuals at the solution.\n    optimality : float\n        First-order optimality measure. The exact meaning depends on `method`,\n        refer to the description of `tol` parameter.\n    active_mask : ndarray of int, shape (n,)\n        Each component shows whether a corresponding constraint is active\n        (that is, whether a variable is at the bound):\n    \n        *  0 : a constraint is not active.\n        * -1 : a lower bound is active.\n        *  1 : an upper bound is active.\n    \n        Might be somewhat arbitrary for the `trf` method as it generates a\n        sequence of strictly feasible iterates and active_mask is determined\n        within a tolerance threshold.\n    unbounded_sol : tuple\n        Unbounded least squares solution tuple returned by the least squares\n        solver (set with `lsq_solver` option). If `lsq_solver` is not set or is\n        set to ``'exact'``, the tuple contains an ndarray of shape (n,) with\n        the unbounded solution, an ndarray with the sum of squared residuals,\n        an int with the rank of `A`, and an ndarray with the singular values\n        of `A` (see NumPy's ``linalg.lstsq`` for more information). If\n        `lsq_solver` is set to ``'lsmr'``, the tuple contains an ndarray of\n        shape (n,) with the unbounded solution, an int with the exit code,\n        an int with the number of iterations, and five floats with\n        various norms and the condition number of `A` (see SciPy's\n        ``sparse.linalg.lsmr`` for more information). This output can be\n        useful for determining the convergence of the least squares solver,\n        particularly the iterative ``'lsmr'`` solver. The unbounded least\n        squares problem is to minimize ``0.5 * ||A x - b||**2``.\n    nit : int\n        Number of iterations. Zero if the unconstrained solution is optimal.\n    status : int\n        Reason for algorithm termination:\n    \n        * -1 : the algorithm was not able to make progress on the last\n          iteration.\n        *  0 : the maximum number of iterations is exceeded.\n        *  1 : the first-order optimality measure is less than `tol`.\n        *  2 : the relative change of the cost function is less than `tol`.\n        *  3 : the unconstrained solution is optimal.\n    \n    message : str\n        Verbal description of the termination reason.\n    success : bool\n        True if one of the convergence criteria is satisfied (`status` > 0).\n    \n    See Also\n    --------\n    nnls : Linear least squares with non-negativity constraint.\n    least_squares : Nonlinear least squares with bounds on the variables.\n    \n    Notes\n    -----\n    The algorithm first computes the unconstrained least-squares solution by\n    `numpy.linalg.lstsq` or `scipy.sparse.linalg.lsmr` depending on\n    `lsq_solver`. This solution is returned as optimal if it lies within the\n    bounds.\n    \n    Method 'trf' runs the adaptation of the algorithm described in [STIR]_ for\n    a linear least-squares problem. The iterations are essentially the same as\n    in the nonlinear least-squares algorithm, but as the quadratic function\n    model is always accurate, we don't need to track or modify the radius of\n    a trust region. The line search (backtracking) is used as a safety net\n    when a selected step does not decrease the cost function. Read more\n    detailed description of the algorithm in `scipy.optimize.least_squares`.\n    \n    Method 'bvls' runs a Python implementation of the algorithm described in\n    [BVLS]_. The algorithm maintains active and free sets of variables, on\n    each iteration chooses a new variable to move from the active set to the\n    free set and then solves the unconstrained least-squares problem on free\n    variables. This algorithm is guaranteed to give an accurate solution\n    eventually, but may require up to n iterations for a problem with n\n    variables. Additionally, an ad-hoc initialization procedure is\n    implemented, that determines which variables to set free or active\n    initially. It takes some number of iterations before actual BVLS starts,\n    but can significantly reduce the number of further iterations.\n    \n    References\n    ----------\n    .. [STIR] M. A. Branch, T. F. Coleman, and Y. Li, \"A Subspace, Interior,\n              and Conjugate Gradient Method for Large-Scale Bound-Constrained\n              Minimization Problems,\" SIAM Journal on Scientific Computing,\n              Vol. 21, Number 1, pp 1-23, 1999.\n    .. [BVLS] P. B. Start and R. L. Parker, \"Bounded-Variable Least-Squares:\n              an Algorithm and Applications\", Computational Statistics, 10,\n              129-141, 1995.\n    \n    Examples\n    --------\n    In this example, a problem with a large sparse arrays and bounds on the\n    variables is solved.\n    \n    >>> import numpy as np\n    >>> from scipy.sparse import random_array\n    >>> from scipy.optimize import lsq_linear\n    >>> rng = np.random.default_rng()\n    ...\n    >>> m = 2000\n    >>> n = 1000\n    ...\n    >>> A = random_array((m, n), density=1e-4, random_state=rng)\n    >>> b = rng.standard_normal(m)\n    ...\n    >>> lb = rng.standard_normal(n)\n    >>> ub = lb + 1\n    ...\n    >>> res = lsq_linear(A, b, bounds=(lb, ub), lsmr_tol='auto', verbose=1)\n    The relative change of the cost function is less than `tol`.\n    Number of iterations 10, initial cost 1.0070e+03, final cost 9.6602e+02,\n    first-order optimality 2.21e-09.        # may vary",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d91a3240a3467a957537d993dbad9edb39d14b213438f8f88fc1744d776b5a2f",
            "fields": [
                {
                    "id": "ekk57sck",
                    "encoding": "",
                    "name": "A",
                    "value": "",
                    "defaultValue": "",
                    "description": "Design matrix. Can be `scipy.sparse.linalg.LinearOperator`.",
                    "type": "arraylike, sparse array or LinearOperator, shape (m, n)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lhhwgx1z",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "Target vector.",
                    "type": "arraylike, shape (m,)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k05mfdmo",
                    "encoding": "",
                    "name": "bounds",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Lower and upper bounds on parameters. Defaults to no bounds.\nThere are two ways to specify the bounds:\n\n- Instance of `Bounds` class.\n- 2-tuple of array_like: Each element of the tuple must be either\n  an array with the length equal to the number of parameters, or a\n  scalar (in which case the bound is taken to be the same for all\n  parameters). Use ``np.inf`` with an appropriate sign to disable\n  bounds on all or some parameters.",
                    "type": "builtins.tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wwncd6tc",
                    "encoding": "",
                    "name": "method",
                    "value": "trf",
                    "defaultValue": "trf",
                    "description": "Method to perform minimization.\n\n* 'trf' : Trust Region Reflective algorithm adapted for a linear\n  least-squares problem. This is an interior-point-like method\n  and the required number of iterations is weakly correlated with\n  the number of variables.\n* 'bvls' : Bounded-variable least-squares algorithm. This is\n  an active set method, which requires the number of iterations\n  comparable to the number of variables. Can't be used when `A` is\n  sparse or LinearOperator.\n\nDefault is 'trf'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f4s3v785",
                    "encoding": "",
                    "name": "tol",
                    "value": 1e-10,
                    "defaultValue": 1e-10,
                    "description": "Tolerance parameter. The algorithm terminates if a relative change\nof the cost function is less than `tol` on the last iteration.\nAdditionally, the first-order optimality measure is considered:\n\n* ``method='trf'`` terminates if the uniform norm of the gradient,\n  scaled to account for the presence of the bounds, is less than\n  `tol`.\n* ``method='bvls'`` terminates if Karush-Kuhn-Tucker conditions\n  are satisfied within `tol` tolerance.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ashrvjz2",
                    "encoding": "",
                    "name": "lsq_solver",
                    "value": "",
                    "defaultValue": "",
                    "description": "Method of solving unbounded least-squares problems throughout\niterations:\n\n* 'exact' : Use dense QR or SVD decomposition approach. Can't be\n  used when `A` is sparse or LinearOperator.\n* 'lsmr' : Use `scipy.sparse.linalg.lsmr` iterative procedure\n  which requires only matrix-vector product evaluations. Can't\n  be used with ``method='bvls'``.\n\nIf None (default), the solver is chosen based on type of `A`.",
                    "type": "{None, 'exact', 'lsmr'}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4a35e6y3",
                    "encoding": "",
                    "name": "lsmr_tol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Tolerance parameters 'atol' and 'btol' for `scipy.sparse.linalg.lsmr`\nIf None (default), it is set to ``1e-2 * tol``. If 'auto', the\ntolerance will be adjusted based on the optimality of the current\niterate, which can speed up the optimization process, but is not always\nreliable.",
                    "type": "None, float or 'auto'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c4h26y9v",
                    "encoding": "",
                    "name": "max_iter",
                    "value": "",
                    "defaultValue": "",
                    "description": "Maximum number of iterations before termination. If None (default), it\nis set to 100 for ``method='trf'`` or to the number of variables for\n``method='bvls'`` (not counting iterations for 'bvls' initialization).",
                    "type": "None or int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g90y0qra",
                    "encoding": "",
                    "name": "verbose",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Level of algorithm's verbosity:\n\n* 0 : work silently (default).\n* 1 : display a termination report.\n* 2 : display progress during iterations.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o_7chds6",
                    "encoding": "",
                    "name": "lsmr_maxiter",
                    "value": "",
                    "defaultValue": "",
                    "description": "Maximum number of iterations for the lsmr least squares solver,\nif it is used (by setting ``lsq_solver='lsmr'``). If None (default), it\nuses lsmr's default of ``min(m, n)`` where ``m`` and ``n`` are the\nnumber of rows and columns of `A`, respectively. Has no effect if\n``lsq_solver='exact'``.",
                    "type": "None or int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a6vf2rmk",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.lsq_linear",
                    "defaultValue": "scipy.optimize.lsq_linear",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xwaicx3z",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s7ny0wh0",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "hmibeme_",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iluh6a2s",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize",
                    "defaultValue": "scipy.optimize",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hpt4zau5",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z0dswflf",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ymccf2ei",
            "name": "optimize.milp",
            "description": "Mixed-integer linear programming\n    \n    Solves problems of the following form:\n    \n    .. math::\n    \n        \\min_x \\ & c^T x \\\\\n        \\mbox{such that} \\ & b_l \\leq A x \\leq b_u,\\\\\n        & l \\leq x \\leq u, \\\\\n        & x_i \\in \\mathbb{Z}, i \\in X_i\n    \n    where :math:`x` is a vector of decision variables;\n    :math:`c`, :math:`b_l`, :math:`b_u`, :math:`l`, and :math:`u` are vectors;\n    :math:`A` is a matrix, and :math:`X_i` is the set of indices of\n    decision variables that must be integral. (In this context, a\n    variable that can assume only integer values is said to be \"integral\";\n    it has an \"integrality\" constraint.)\n    \n    Alternatively, that's:\n    \n    minimize::\n    \n        c @ x\n    \n    such that::\n    \n        b_l <= A @ x <= b_u\n        l <= x <= u\n        Specified elements of x must be integers\n    \n    By default, ``l = 0`` and ``u = np.inf`` unless specified with\n    ``bounds``.\n    \n    Parameters\n    ----------\n    c : 1D dense array_like\n        The coefficients of the linear objective function to be minimized.\n        `c` is converted to a double precision array before the problem is\n        solved.\n    integrality : 1D dense array_like, optional\n        Indicates the type of integrality constraint on each decision variable.\n    \n        ``0`` : Continuous variable; no integrality constraint.\n    \n        ``1`` : Integer variable; decision variable must be an integer\n        within `bounds`.\n    \n        ``2`` : Semi-continuous variable; decision variable must be within\n        `bounds` or take value ``0``.\n    \n        ``3`` : Semi-integer variable; decision variable must be an integer\n        within `bounds` or take value ``0``.\n    \n        By default, all variables are continuous. `integrality` is converted\n        to an array of integers before the problem is solved.\n    \n    bounds : scipy.optimize.Bounds, optional\n        Bounds on the decision variables. Lower and upper bounds are converted\n        to double precision arrays before the problem is solved. The\n        ``keep_feasible`` parameter of the `Bounds` object is ignored. If\n        not specified, all decision variables are constrained to be\n        non-negative.\n    constraints : sequence of scipy.optimize.LinearConstraint, optional\n        Linear constraints of the optimization problem. Arguments may be\n        one of the following:\n    \n        1. A single `LinearConstraint` object\n        2. A single tuple that can be converted to a `LinearConstraint` object\n           as ``LinearConstraint(*constraints)``\n        3. A sequence composed entirely of objects of type 1. and 2.\n    \n        Before the problem is solved, all values are converted to double\n        precision, and the matrices of constraint coefficients are converted to\n        instances of `scipy.sparse.csc_array`. The ``keep_feasible`` parameter\n        of `LinearConstraint` objects is ignored.\n    options : dict, optional\n        A dictionary of solver options. The following keys are recognized.\n    \n        disp : bool (default: ``False``)\n            Set to ``True`` if indicators of optimization status are to be\n            printed to the console during optimization.\n        node_limit : int, optional\n            The maximum number of nodes (linear program relaxations) to solve\n            before stopping. Default is no maximum number of nodes.\n        presolve : bool (default: ``True``)\n            Presolve attempts to identify trivial infeasibilities,\n            identify trivial unboundedness, and simplify the problem before\n            sending it to the main solver.\n        time_limit : float, optional\n            The maximum number of seconds allotted to solve the problem.\n            Default is no time limit.\n        mip_rel_gap : float, optional\n            Termination criterion for MIP solver: solver will terminate when\n            the gap between the primal objective value and the dual objective\n            bound, scaled by the primal objective value, is <= mip_rel_gap.\n    \n    Returns\n    -------\n    res : OptimizeResult\n        An instance of :class:`scipy.optimize.OptimizeResult`. The object\n        is guaranteed to have the following attributes.\n    \n        status : int\n            An integer representing the exit status of the algorithm.\n    \n            ``0`` : Optimal solution found.\n    \n            ``1`` : Iteration or time limit reached.\n    \n            ``2`` : Problem is infeasible.\n    \n            ``3`` : Problem is unbounded.\n    \n            ``4`` : Other; see message for details.\n    \n        success : bool\n            ``True`` when an optimal solution is found and ``False`` otherwise.\n    \n        message : str\n            A string descriptor of the exit status of the algorithm.\n    \n        The following attributes will also be present, but the values may be\n        ``None``, depending on the solution status.\n    \n        x : ndarray\n            The values of the decision variables that minimize the\n            objective function while satisfying the constraints.\n        fun : float\n            The optimal value of the objective function ``c @ x``.\n        mip_node_count : int\n            The number of subproblems or \"nodes\" solved by the MILP solver.\n        mip_dual_bound : float\n            The MILP solver's final estimate of the lower bound on the optimal\n            solution.\n        mip_gap : float\n            The difference between the primal objective value and the dual\n            objective bound, scaled by the primal objective value.\n    \n    Notes\n    -----\n    `milp` is a wrapper of the HiGHS linear optimization software [1]_. The\n    algorithm is deterministic, and it typically finds the global optimum of\n    moderately challenging mixed-integer linear programs (when it exists).\n    \n    References\n    ----------\n    .. [1] Huangfu, Q., Galabova, I., Feldmeier, M., and Hall, J. A. J.\n           \"HiGHS - high performance software for linear optimization.\"\n           https://highs.dev/\n    .. [2] Huangfu, Q. and Hall, J. A. J. \"Parallelizing the dual revised\n           simplex method.\" Mathematical Programming Computation, 10 (1),\n           119-142, 2018. DOI: 10.1007/s12532-017-0130-5\n    \n    Examples\n    --------\n    Consider the problem at\n    https://en.wikipedia.org/wiki/Integer_programming#Example, which is\n    expressed as a maximization problem of two variables. Since `milp` requires\n    that the problem be expressed as a minimization problem, the objective\n    function coefficients on the decision variables are:\n    \n    >>> import numpy as np\n    >>> c = -np.array([0, 1])\n    \n    Note the negative sign: we maximize the original objective function\n    by minimizing the negative of the objective function.\n    \n    We collect the coefficients of the constraints into arrays like:\n    \n    >>> A = np.array([[-1, 1], [3, 2], [2, 3]])\n    >>> b_u = np.array([1, 12, 12])\n    >>> b_l = np.full_like(b_u, -np.inf, dtype=float)\n    \n    Because there is no lower limit on these constraints, we have defined a\n    variable ``b_l`` full of values representing negative infinity. This may\n    be unfamiliar to users of `scipy.optimize.linprog`, which only accepts\n    \"less than\" (or \"upper bound\") inequality constraints of the form\n    ``A_ub @ x <= b_u``. By accepting both ``b_l`` and ``b_u`` of constraints\n    ``b_l <= A_ub @ x <= b_u``, `milp` makes it easy to specify \"greater than\"\n    inequality constraints, \"less than\" inequality constraints, and equality\n    constraints concisely.\n    \n    These arrays are collected into a single `LinearConstraint` object like:\n    \n    >>> from scipy.optimize import LinearConstraint\n    >>> constraints = LinearConstraint(A, b_l, b_u)\n    \n    The non-negativity bounds on the decision variables are enforced by\n    default, so we do not need to provide an argument for `bounds`.\n    \n    Finally, the problem states that both decision variables must be integers:\n    \n    >>> integrality = np.ones_like(c)\n    \n    We solve the problem like:\n    \n    >>> from scipy.optimize import milp\n    >>> res = milp(c=c, constraints=constraints, integrality=integrality)\n    >>> res.x\n    [2.0, 2.0]\n    \n    Note that had we solved the relaxed problem (without integrality\n    constraints):\n    \n    >>> res = milp(c=c, constraints=constraints)  # OR:\n    >>> # from scipy.optimize import linprog; res = linprog(c, A, b_u)\n    >>> res.x\n    [1.8, 2.8]\n    \n    we would not have obtained the correct solution by rounding to the nearest\n    integers.\n    \n    Other examples are given :ref:`in the tutorial <tutorial-optimize_milp>`.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "add2b4e8ec05b76f8e44d505432ea5b2b1a8a02f0dae39c1112dd43ca3baa259",
            "fields": [
                {
                    "id": "gdfhh4rx",
                    "encoding": "",
                    "name": "c",
                    "value": "",
                    "defaultValue": "",
                    "description": "The coefficients of the linear objective function to be minimized.\n`c` is converted to a double precision array before the problem is\nsolved.",
                    "type": "1D dense arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "diw33onv",
                    "encoding": "",
                    "name": "integrality",
                    "value": "",
                    "defaultValue": "",
                    "description": "Indicates the type of integrality constraint on each decision variable.\n\n``0`` : Continuous variable; no integrality constraint.\n\n``1`` : Integer variable; decision variable must be an integer\nwithin `bounds`.\n\n``2`` : Semi-continuous variable; decision variable must be within\n`bounds` or take value ``0``.\n\n``3`` : Semi-integer variable; decision variable must be an integer\nwithin `bounds` or take value ``0``.\n\nBy default, all variables are continuous. `integrality` is converted\nto an array of integers before the problem is solved.",
                    "type": "1D dense arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qf362v8w",
                    "encoding": "",
                    "name": "bounds",
                    "value": "",
                    "defaultValue": "",
                    "description": "Bounds on the decision variables. Lower and upper bounds are converted\nto double precision arrays before the problem is solved. The\n``keep_feasible`` parameter of the `Bounds` object is ignored. If\nnot specified, all decision variables are constrained to be\nnon-negative.",
                    "type": "scipy.optimize.Bounds",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k15slt2j",
                    "encoding": "",
                    "name": "constraints",
                    "value": "",
                    "defaultValue": "",
                    "description": "Linear constraints of the optimization problem. Arguments may be\none of the following:\n\n1. A single `LinearConstraint` object\n2. A single tuple that can be converted to a `LinearConstraint` object\n   as ``LinearConstraint(*constraints)``\n3. A sequence composed entirely of objects of type 1. and 2.\n\nBefore the problem is solved, all values are converted to double\nprecision, and the matrices of constraint coefficients are converted to\ninstances of `scipy.sparse.csc_array`. The ``keep_feasible`` parameter\nof `LinearConstraint` objects is ignored.",
                    "type": "sequence of scipy.optimize.LinearConstraint",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c9l13usc",
                    "encoding": "",
                    "name": "options",
                    "value": "",
                    "defaultValue": "",
                    "description": "A dictionary of solver options. The following keys are recognized.\n\ndisp : bool (default: ``False``)\n    Set to ``True`` if indicators of optimization status are to be\n    printed to the console during optimization.\nnode_limit : int, optional\n    The maximum number of nodes (linear program relaxations) to solve\n    before stopping. Default is no maximum number of nodes.\npresolve : bool (default: ``True``)\n    Presolve attempts to identify trivial infeasibilities,\n    identify trivial unboundedness, and simplify the problem before\n    sending it to the main solver.\ntime_limit : float, optional\n    The maximum number of seconds allotted to solve the problem.\n    Default is no time limit.\nmip_rel_gap : float, optional\n    Termination criterion for MIP solver: solver will terminate when\n    the gap between the primal objective value and the dual objective\n    bound, scaled by the primal objective value, is <= mip_rel_gap.",
                    "type": "dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rjv1zg26",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.milp",
                    "defaultValue": "scipy.optimize.milp",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_21rbtbt",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ujkrfike",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "tub1ixmm",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u4xh6m6k",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize",
                    "defaultValue": "scipy.optimize",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qz64ox7m",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2jc7f5jy",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "u4fp99n0",
            "name": "optimize.minimize",
            "description": "Minimization of scalar function of one or more variables.\n    \n    Parameters\n    ----------\n    fun : callable\n        The objective function to be minimized::\n    \n            fun(x, *args) -> float\n    \n        where ``x`` is a 1-D array with shape (n,) and ``args``\n        is a tuple of the fixed parameters needed to completely\n        specify the function.\n    \n        Suppose the callable has signature ``f0(x, *my_args, **my_kwargs)``, where\n        ``my_args`` and ``my_kwargs`` are required positional and keyword arguments.\n        Rather than passing ``f0`` as the callable, wrap it to accept\n        only ``x``; e.g., pass ``fun=lambda x: f0(x, *my_args, **my_kwargs)`` as the\n        callable, where ``my_args`` (tuple) and ``my_kwargs`` (dict) have been\n        gathered before invoking this function.\n    x0 : ndarray, shape (n,)\n        Initial guess. Array of real elements of size (n,),\n        where ``n`` is the number of independent variables.\n    args : tuple, optional\n        Extra arguments passed to the objective function and its\n        derivatives (`fun`, `jac` and `hess` functions).\n    method : str or callable, optional\n        Type of solver.  Should be one of\n    \n        - 'Nelder-Mead' :ref:`(see here) <optimize.minimize-neldermead>`\n        - 'Powell'      :ref:`(see here) <optimize.minimize-powell>`\n        - 'CG'          :ref:`(see here) <optimize.minimize-cg>`\n        - 'BFGS'        :ref:`(see here) <optimize.minimize-bfgs>`\n        - 'Newton-CG'   :ref:`(see here) <optimize.minimize-newtoncg>`\n        - 'L-BFGS-B'    :ref:`(see here) <optimize.minimize-lbfgsb>`\n        - 'TNC'         :ref:`(see here) <optimize.minimize-tnc>`\n        - 'COBYLA'      :ref:`(see here) <optimize.minimize-cobyla>`\n        - 'COBYQA'      :ref:`(see here) <optimize.minimize-cobyqa>`\n        - 'SLSQP'       :ref:`(see here) <optimize.minimize-slsqp>`\n        - 'trust-constr':ref:`(see here) <optimize.minimize-trustconstr>`\n        - 'dogleg'      :ref:`(see here) <optimize.minimize-dogleg>`\n        - 'trust-ncg'   :ref:`(see here) <optimize.minimize-trustncg>`\n        - 'trust-exact' :ref:`(see here) <optimize.minimize-trustexact>`\n        - 'trust-krylov' :ref:`(see here) <optimize.minimize-trustkrylov>`\n        - custom - a callable object, see below for description.\n    \n        If not given, chosen to be one of ``BFGS``, ``L-BFGS-B``, ``SLSQP``,\n        depending on whether or not the problem has constraints or bounds.\n    jac : {callable,  '2-point', '3-point', 'cs', bool}, optional\n        Method for computing the gradient vector. Only for CG, BFGS,\n        Newton-CG, L-BFGS-B, TNC, SLSQP, dogleg, trust-ncg, trust-krylov,\n        trust-exact and trust-constr.\n        If it is a callable, it should be a function that returns the gradient\n        vector::\n    \n            jac(x, *args) -> array_like, shape (n,)\n    \n        where ``x`` is an array with shape (n,) and ``args`` is a tuple with\n        the fixed parameters. If `jac` is a Boolean and is True, `fun` is\n        assumed to return a tuple ``(f, g)`` containing the objective\n        function and the gradient.\n        Methods 'Newton-CG', 'trust-ncg', 'dogleg', 'trust-exact', and\n        'trust-krylov' require that either a callable be supplied, or that\n        `fun` return the objective and gradient.\n        If None or False, the gradient will be estimated using 2-point finite\n        difference estimation with an absolute step size.\n        Alternatively, the keywords  {'2-point', '3-point', 'cs'} can be used\n        to select a finite difference scheme for numerical estimation of the\n        gradient with a relative step size. These finite difference schemes\n        obey any specified `bounds`.\n    hess : {callable, '2-point', '3-point', 'cs', HessianUpdateStrategy}, optional\n        Method for computing the Hessian matrix. Only for Newton-CG, dogleg,\n        trust-ncg, trust-krylov, trust-exact and trust-constr.\n        If it is callable, it should return the Hessian matrix::\n    \n            hess(x, *args) -> {LinearOperator, spmatrix, array}, (n, n)\n    \n        where ``x`` is a (n,) ndarray and ``args`` is a tuple with the fixed\n        parameters.\n        The keywords {'2-point', '3-point', 'cs'} can also be used to select\n        a finite difference scheme for numerical estimation of the hessian.\n        Alternatively, objects implementing the `HessianUpdateStrategy`\n        interface can be used to approximate the Hessian. Available\n        quasi-Newton methods implementing this interface are:\n    \n        - `BFGS`\n        - `SR1`\n    \n        Not all of the options are available for each of the methods; for\n        availability refer to the notes.\n    hessp : callable, optional\n        Hessian of objective function times an arbitrary vector p. Only for\n        Newton-CG, trust-ncg, trust-krylov, trust-constr.\n        Only one of `hessp` or `hess` needs to be given. If `hess` is\n        provided, then `hessp` will be ignored. `hessp` must compute the\n        Hessian times an arbitrary vector::\n    \n            hessp(x, p, *args) ->  ndarray shape (n,)\n    \n        where ``x`` is a (n,) ndarray, ``p`` is an arbitrary vector with\n        dimension (n,) and ``args`` is a tuple with the fixed\n        parameters.\n    bounds : sequence or `Bounds`, optional\n        Bounds on variables for Nelder-Mead, L-BFGS-B, TNC, SLSQP, Powell,\n        trust-constr, COBYLA, and COBYQA methods. There are two ways to specify\n        the bounds:\n    \n        1. Instance of `Bounds` class.\n        2. Sequence of ``(min, max)`` pairs for each element in `x`. None\n           is used to specify no bound.\n    \n    constraints : {Constraint, dict} or List of {Constraint, dict}, optional\n        Constraints definition. Only for COBYLA, COBYQA, SLSQP and trust-constr.\n    \n        Constraints for 'trust-constr', 'cobyqa', and 'cobyla' are defined as a single\n        object or a list of objects specifying constraints to the optimization problem.\n        Available constraints are:\n    \n        - `LinearConstraint`\n        - `NonlinearConstraint`\n    \n        Constraints for COBYLA, SLSQP are defined as a list of dictionaries.\n        Each dictionary with fields:\n    \n        type : str\n            Constraint type: 'eq' for equality, 'ineq' for inequality.\n        fun : callable\n            The function defining the constraint.\n        jac : callable, optional\n            The Jacobian of `fun` (only for SLSQP).\n        args : sequence, optional\n            Extra arguments to be passed to the function and Jacobian.\n    \n        Equality constraint means that the constraint function result is to\n        be zero whereas inequality means that it is to be non-negative.\n    \n    tol : float, optional\n        Tolerance for termination. When `tol` is specified, the selected\n        minimization algorithm sets some relevant solver-specific tolerance(s)\n        equal to `tol`. For detailed control, use solver-specific\n        options.\n    options : dict, optional\n        A dictionary of solver options. All methods except `TNC` accept the\n        following generic options:\n    \n        maxiter : int\n            Maximum number of iterations to perform. Depending on the\n            method each iteration may use several function evaluations.\n    \n            For `TNC` use `maxfun` instead of `maxiter`.\n        disp : bool\n            Set to True to print convergence messages.\n    \n        For method-specific options, see :func:`show_options()`.\n    callback : callable, optional\n        A callable called after each iteration.\n    \n        All methods except TNC and SLSQP support a callable with\n        the signature::\n    \n            callback(intermediate_result: OptimizeResult)\n    \n        where ``intermediate_result`` is a keyword parameter containing an\n        `OptimizeResult` with attributes ``x`` and ``fun``, the present values\n        of the parameter vector and objective function. Not all attributes of\n        `OptimizeResult` may be present. The name of the parameter must be\n        ``intermediate_result`` for the callback to be passed an `OptimizeResult`.\n        These methods will also terminate if the callback raises ``StopIteration``.\n    \n        All methods except trust-constr (also) support a signature like::\n    \n            callback(xk)\n    \n        where ``xk`` is the current parameter vector.\n    \n        Introspection is used to determine which of the signatures above to\n        invoke.\n    \n    Returns\n    -------\n    res : OptimizeResult\n        The optimization result represented as a ``OptimizeResult`` object.\n        Important attributes are: ``x`` the solution array, ``success`` a\n        Boolean flag indicating if the optimizer exited successfully and\n        ``message`` which describes the cause of the termination. See\n        `OptimizeResult` for a description of other attributes.\n    \n    See also\n    --------\n    minimize_scalar : Interface to minimization algorithms for scalar\n        univariate functions\n    show_options : Additional options accepted by the solvers\n    \n    Notes\n    -----\n    This section describes the available solvers that can be selected by the\n    'method' parameter. The default method is *BFGS*.\n    \n    **Unconstrained minimization**\n    \n    Method :ref:`CG <optimize.minimize-cg>` uses a nonlinear conjugate\n    gradient algorithm by Polak and Ribiere, a variant of the\n    Fletcher-Reeves method described in [5]_ pp.120-122. Only the\n    first derivatives are used.\n    \n    Method :ref:`BFGS <optimize.minimize-bfgs>` uses the quasi-Newton\n    method of Broyden, Fletcher, Goldfarb, and Shanno (BFGS) [5]_\n    pp. 136. It uses the first derivatives only. BFGS has proven good\n    performance even for non-smooth optimizations. This method also\n    returns an approximation of the Hessian inverse, stored as\n    `hess_inv` in the OptimizeResult object.\n    \n    Method :ref:`Newton-CG <optimize.minimize-newtoncg>` uses a\n    Newton-CG algorithm [5]_ pp. 168 (also known as the truncated\n    Newton method). It uses a CG method to the compute the search\n    direction. See also *TNC* method for a box-constrained\n    minimization with a similar algorithm. Suitable for large-scale\n    problems.\n    \n    Method :ref:`dogleg <optimize.minimize-dogleg>` uses the dog-leg\n    trust-region algorithm [5]_ for unconstrained minimization. This\n    algorithm requires the gradient and Hessian; furthermore the\n    Hessian is required to be positive definite.\n    \n    Method :ref:`trust-ncg <optimize.minimize-trustncg>` uses the\n    Newton conjugate gradient trust-region algorithm [5]_ for\n    unconstrained minimization. This algorithm requires the gradient\n    and either the Hessian or a function that computes the product of\n    the Hessian with a given vector. Suitable for large-scale problems.\n    \n    Method :ref:`trust-krylov <optimize.minimize-trustkrylov>` uses\n    the Newton GLTR trust-region algorithm [14]_, [15]_ for unconstrained\n    minimization. This algorithm requires the gradient\n    and either the Hessian or a function that computes the product of\n    the Hessian with a given vector. Suitable for large-scale problems.\n    On indefinite problems it requires usually less iterations than the\n    `trust-ncg` method and is recommended for medium and large-scale problems.\n    \n    Method :ref:`trust-exact <optimize.minimize-trustexact>`\n    is a trust-region method for unconstrained minimization in which\n    quadratic subproblems are solved almost exactly [13]_. This\n    algorithm requires the gradient and the Hessian (which is\n    *not* required to be positive definite). It is, in many\n    situations, the Newton method to converge in fewer iterations\n    and the most recommended for small and medium-size problems.\n    \n    **Bound-Constrained minimization**\n    \n    Method :ref:`Nelder-Mead <optimize.minimize-neldermead>` uses the\n    Simplex algorithm [1]_, [2]_. This algorithm is robust in many\n    applications. However, if numerical computation of derivative can be\n    trusted, other algorithms using the first and/or second derivatives\n    information might be preferred for their better performance in\n    general.\n    \n    Method :ref:`L-BFGS-B <optimize.minimize-lbfgsb>` uses the L-BFGS-B\n    algorithm [6]_, [7]_ for bound constrained minimization.\n    \n    Method :ref:`Powell <optimize.minimize-powell>` is a modification\n    of Powell's method [3]_, [4]_ which is a conjugate direction\n    method. It performs sequential one-dimensional minimizations along\n    each vector of the directions set (`direc` field in `options` and\n    `info`), which is updated at each iteration of the main\n    minimization loop. The function need not be differentiable, and no\n    derivatives are taken. If bounds are not provided, then an\n    unbounded line search will be used. If bounds are provided and\n    the initial guess is within the bounds, then every function\n    evaluation throughout the minimization procedure will be within\n    the bounds. If bounds are provided, the initial guess is outside\n    the bounds, and `direc` is full rank (default has full rank), then\n    some function evaluations during the first iteration may be\n    outside the bounds, but every function evaluation after the first\n    iteration will be within the bounds. If `direc` is not full rank,\n    then some parameters may not be optimized and the solution is not\n    guaranteed to be within the bounds.\n    \n    Method :ref:`TNC <optimize.minimize-tnc>` uses a truncated Newton\n    algorithm [5]_, [8]_ to minimize a function with variables subject\n    to bounds. This algorithm uses gradient information; it is also\n    called Newton Conjugate-Gradient. It differs from the *Newton-CG*\n    method described above as it wraps a C implementation and allows\n    each variable to be given upper and lower bounds.\n    \n    **Constrained Minimization**\n    \n    Method :ref:`COBYLA <optimize.minimize-cobyla>` uses the PRIMA\n    implementation [19]_ of the\n    Constrained Optimization BY Linear Approximation (COBYLA) method\n    [9]_, [10]_, [11]_. The algorithm is based on linear\n    approximations to the objective function and each constraint.\n    \n    Method :ref:`COBYQA <optimize.minimize-cobyqa>` uses the Constrained\n    Optimization BY Quadratic Approximations (COBYQA) method [18]_. The\n    algorithm is a derivative-free trust-region SQP method based on quadratic\n    approximations to the objective function and each nonlinear constraint. The\n    bounds are treated as unrelaxable constraints, in the sense that the\n    algorithm always respects them throughout the optimization process.\n    \n    Method :ref:`SLSQP <optimize.minimize-slsqp>` uses Sequential\n    Least SQuares Programming to minimize a function of several\n    variables with any combination of bounds, equality and inequality\n    constraints. The method wraps the SLSQP Optimization subroutine\n    originally implemented by Dieter Kraft [12]_. Note that the\n    wrapper handles infinite values in bounds by converting them into\n    large floating values.\n    \n    Method :ref:`trust-constr <optimize.minimize-trustconstr>` is a\n    trust-region algorithm for constrained optimization. It switches\n    between two implementations depending on the problem definition.\n    It is the most versatile constrained minimization algorithm\n    implemented in SciPy and the most appropriate for large-scale problems.\n    For equality constrained problems it is an implementation of Byrd-Omojokun\n    Trust-Region SQP method described in [17]_ and in [5]_, p. 549. When\n    inequality constraints are imposed as well, it switches to the trust-region\n    interior point method described in [16]_. This interior point algorithm,\n    in turn, solves inequality constraints by introducing slack variables\n    and solving a sequence of equality-constrained barrier problems\n    for progressively smaller values of the barrier parameter.\n    The previously described equality constrained SQP method is\n    used to solve the subproblems with increasing levels of accuracy\n    as the iterate gets closer to a solution.\n    \n    **Finite-Difference Options**\n    \n    For Method :ref:`trust-constr <optimize.minimize-trustconstr>`\n    the gradient and the Hessian may be approximated using\n    three finite-difference schemes: {'2-point', '3-point', 'cs'}.\n    The scheme 'cs' is, potentially, the most accurate but it\n    requires the function to correctly handle complex inputs and to\n    be differentiable in the complex plane. The scheme '3-point' is more\n    accurate than '2-point' but requires twice as many operations. If the\n    gradient is estimated via finite-differences the Hessian must be\n    estimated using one of the quasi-Newton strategies.\n    \n    **Method specific options for the** `hess` **keyword**\n    \n    +--------------+------+----------+-------------------------+-----+\n    | method/Hess  | None | callable | '2-point/'3-point'/'cs' | HUS |\n    +==============+======+==========+=========================+=====+\n    | Newton-CG    | x    | (n, n)   | x                       | x   |\n    |              |      | LO       |                         |     |\n    +--------------+------+----------+-------------------------+-----+\n    | dogleg       |      | (n, n)   |                         |     |\n    +--------------+------+----------+-------------------------+-----+\n    | trust-ncg    |      | (n, n)   | x                       | x   |\n    +--------------+------+----------+-------------------------+-----+\n    | trust-krylov |      | (n, n)   | x                       | x   |\n    +--------------+------+----------+-------------------------+-----+\n    | trust-exact  |      | (n, n)   |                         |     |\n    +--------------+------+----------+-------------------------+-----+\n    | trust-constr | x    | (n, n)   |  x                      | x   |\n    |              |      | LO       |                         |     |\n    |              |      | sp       |                         |     |\n    +--------------+------+----------+-------------------------+-----+\n    \n    where LO=LinearOperator, sp=Sparse matrix, HUS=HessianUpdateStrategy\n    \n    **Custom minimizers**\n    \n    It may be useful to pass a custom minimization method, for example\n    when using a frontend to this method such as `scipy.optimize.basinhopping`\n    or a different library.  You can simply pass a callable as the ``method``\n    parameter.\n    \n    The callable is called as ``method(fun, x0, args, **kwargs, **options)``\n    where ``kwargs`` corresponds to any other parameters passed to `minimize`\n    (such as `callback`, `hess`, etc.), except the `options` dict, which has\n    its contents also passed as `method` parameters pair by pair.  Also, if\n    `jac` has been passed as a bool type, `jac` and `fun` are mangled so that\n    `fun` returns just the function values and `jac` is converted to a function\n    returning the Jacobian.  The method shall return an `OptimizeResult`\n    object.\n    \n    The provided `method` callable must be able to accept (and possibly ignore)\n    arbitrary parameters; the set of parameters accepted by `minimize` may\n    expand in future versions and then these parameters will be passed to\n    the method.  You can find an example in the scipy.optimize tutorial.\n    \n    References\n    ----------\n    .. [1] Nelder, J A, and R Mead. 1965. A Simplex Method for Function\n        Minimization. The Computer Journal 7: 308-13.\n    .. [2] Wright M H. 1996. Direct search methods: Once scorned, now\n        respectable, in Numerical Analysis 1995: Proceedings of the 1995\n        Dundee Biennial Conference in Numerical Analysis (Eds. D F\n        Griffiths and G A Watson). Addison Wesley Longman, Harlow, UK.\n        191-208.\n    .. [3] Powell, M J D. 1964. An efficient method for finding the minimum of\n       a function of several variables without calculating derivatives. The\n       Computer Journal 7: 155-162.\n    .. [4] Press W, S A Teukolsky, W T Vetterling and B P Flannery.\n       Numerical Recipes (any edition), Cambridge University Press.\n    .. [5] Nocedal, J, and S J Wright. 2006. Numerical Optimization.\n       Springer New York.\n    .. [6] Byrd, R H and P Lu and J. Nocedal. 1995. A Limited Memory\n       Algorithm for Bound Constrained Optimization. SIAM Journal on\n       Scientific and Statistical Computing 16 (5): 1190-1208.\n    .. [7] Zhu, C and R H Byrd and J Nocedal. 1997. L-BFGS-B: Algorithm\n       778: L-BFGS-B, FORTRAN routines for large scale bound constrained\n       optimization. ACM Transactions on Mathematical Software 23 (4):\n       550-560.\n    .. [8] Nash, S G. Newton-Type Minimization Via the Lanczos Method.\n       1984. SIAM Journal of Numerical Analysis 21: 770-778.\n    .. [9] Powell, M J D. A direct search optimization method that models\n       the objective and constraint functions by linear interpolation.\n       1994. Advances in Optimization and Numerical Analysis, eds. S. Gomez\n       and J-P Hennart, Kluwer Academic (Dordrecht), 51-67.\n    .. [10] Powell M J D. Direct search algorithms for optimization\n       calculations. 1998. Acta Numerica 7: 287-336.\n    .. [11] Powell M J D. A view of algorithms for optimization without\n       derivatives. 2007.Cambridge University Technical Report DAMTP\n       2007/NA03\n    .. [12] Kraft, D. A software package for sequential quadratic\n       programming. 1988. Tech. Rep. DFVLR-FB 88-28, DLR German Aerospace\n       Center -- Institute for Flight Mechanics, Koln, Germany.\n    .. [13] Conn, A. R., Gould, N. I., and Toint, P. L.\n       Trust region methods. 2000. Siam. pp. 169-200.\n    .. [14] F. Lenders, C. Kirches, A. Potschka: \"trlib: A vector-free\n       implementation of the GLTR method for iterative solution of\n       the trust region problem\", :arxiv:`1611.04718`\n    .. [15] N. Gould, S. Lucidi, M. Roma, P. Toint: \"Solving the\n       Trust-Region Subproblem using the Lanczos Method\",\n       SIAM J. Optim., 9(2), 504--525, (1999).\n    .. [16] Byrd, Richard H., Mary E. Hribar, and Jorge Nocedal. 1999.\n        An interior point algorithm for large-scale nonlinear  programming.\n        SIAM Journal on Optimization 9.4: 877-900.\n    .. [17] Lalee, Marucha, Jorge Nocedal, and Todd Plantenga. 1998. On the\n        implementation of an algorithm for large-scale equality constrained\n        optimization. SIAM Journal on Optimization 8.3: 682-706.\n    .. [18] Ragonneau, T. M. *Model-Based Derivative-Free Optimization Methods\n        and Software*. PhD thesis, Department of Applied Mathematics, The Hong\n        Kong Polytechnic University, Hong Kong, China, 2022. URL:\n        https://theses.lib.polyu.edu.hk/handle/200/12294.\n    .. [19] Zhang, Z. \"PRIMA: Reference Implementation for Powell's Methods with\n        Modernization and Amelioration\", https://www.libprima.net,\n        :doi:`10.5281/zenodo.8052654`\n    .. [20] Karush-Kuhn-Tucker conditions,\n        https://en.wikipedia.org/wiki/Karush%E2%80%93Kuhn%E2%80%93Tucker_conditions\n    \n    Examples\n    --------\n    Let us consider the problem of minimizing the Rosenbrock function. This\n    function (and its respective derivatives) is implemented in `rosen`\n    (resp. `rosen_der`, `rosen_hess`) in the `scipy.optimize`.\n    \n    >>> from scipy.optimize import minimize, rosen, rosen_der\n    \n    A simple application of the *Nelder-Mead* method is:\n    \n    >>> x0 = [1.3, 0.7, 0.8, 1.9, 1.2]\n    >>> res = minimize(rosen, x0, method='Nelder-Mead', tol=1e-6)\n    >>> res.x\n    array([ 1.,  1.,  1.,  1.,  1.])\n    \n    Now using the *BFGS* algorithm, using the first derivative and a few\n    options:\n    \n    >>> res = minimize(rosen, x0, method='BFGS', jac=rosen_der,\n    ...                options={'gtol': 1e-6, 'disp': True})\n    Optimization terminated successfully.\n             Current function value: 0.000000\n             Iterations: 26\n             Function evaluations: 31\n             Gradient evaluations: 31\n    >>> res.x\n    array([ 1.,  1.,  1.,  1.,  1.])\n    >>> print(res.message)\n    Optimization terminated successfully.\n    >>> res.hess_inv\n    array([\n        [ 0.00749589,  0.01255155,  0.02396251,  0.04750988,  0.09495377],  # may vary\n        [ 0.01255155,  0.02510441,  0.04794055,  0.09502834,  0.18996269],\n        [ 0.02396251,  0.04794055,  0.09631614,  0.19092151,  0.38165151],\n        [ 0.04750988,  0.09502834,  0.19092151,  0.38341252,  0.7664427 ],\n        [ 0.09495377,  0.18996269,  0.38165151,  0.7664427,   1.53713523]\n    ])\n    \n    Next, consider a minimization problem with several constraints (namely\n    Example 16.4 from [5]_). The objective function is:\n    \n    >>> fun = lambda x: (x[0] - 1)**2 + (x[1] - 2.5)**2\n    \n    There are three constraints defined as:\n    \n    >>> cons = ({'type': 'ineq', 'fun': lambda x:  x[0] - 2 * x[1] + 2},\n    ...         {'type': 'ineq', 'fun': lambda x: -x[0] - 2 * x[1] + 6},\n    ...         {'type': 'ineq', 'fun': lambda x: -x[0] + 2 * x[1] + 2})\n    \n    And variables must be positive, hence the following bounds:\n    \n    >>> bnds = ((0, None), (0, None))\n    \n    The optimization problem is solved using the SLSQP method as:\n    \n    >>> res = minimize(fun, (2, 0), method='SLSQP', bounds=bnds, constraints=cons)\n    \n    It should converge to the theoretical solution ``[1.4 ,1.7]``. *SLSQP* also\n    returns the multipliers that are used in the solution of the problem. These\n    multipliers, when the problem constraints are linear, can be thought of as the\n    Karush-Kuhn-Tucker (KKT) multipliers, which are a generalization\n    of Lagrange multipliers to inequality-constrained optimization problems ([20]_).\n    \n    Notice that at the solution, the first constraint is active. Let's evaluate the\n    function at solution:\n    \n    >>> cons[0]['fun'](res.x)\n    np.float64(1.4901224698604665e-09)\n    \n    Also, notice that at optimality there is a non-zero multiplier:\n    \n    >>> res.multipliers\n    array([0.8, 0. , 0. ])\n    \n    This can be understood as the local sensitivity of the optimal value of the\n    objective function with respect to changes in the first constraint. If we\n    tighten the constraint by a small amount ``eps``:\n    \n    >>> eps = 0.01\n    >>> cons[0]['fun'] = lambda x: x[0] - 2 * x[1] + 2 - eps\n    \n    we expect the optimal value of the objective function to increase by\n    approximately ``eps * res.multipliers[0]``:\n    \n    >>> eps * res.multipliers[0]  # Expected change in f0\n    np.float64(0.008000000027153205)\n    >>> f0 = res.fun  # Keep track of the previous optimal value\n    >>> res = minimize(fun, (2, 0), method='SLSQP', bounds=bnds, constraints=cons)\n    >>> f1 = res.fun  # New optimal value\n    >>> f1 - f0\n    np.float64(0.008019998807885509)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "74163229ab0a5c88423d9ab4226655100f8d52dda1c04cb5d93ecaa4c9a6306b",
            "fields": [
                {
                    "id": "8ere5399",
                    "encoding": "",
                    "name": "fun",
                    "value": "",
                    "defaultValue": "",
                    "description": "The objective function to be minimized::\n\n    fun(x, *args) -> float\n\nwhere ``x`` is a 1-D array with shape (n,) and ``args``\nis a tuple of the fixed parameters needed to completely\nspecify the function.\n\nSuppose the callable has signature ``f0(x, *my_args, **my_kwargs)``, where\n``my_args`` and ``my_kwargs`` are required positional and keyword arguments.\nRather than passing ``f0`` as the callable, wrap it to accept\nonly ``x``; e.g., pass ``fun=lambda x: f0(x, *my_args, **my_kwargs)`` as the\ncallable, where ``my_args`` (tuple) and ``my_kwargs`` (dict) have been\ngathered before invoking this function.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w6pqfeh0",
                    "encoding": "",
                    "name": "x0",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial guess. Array of real elements of size (n,),\nwhere ``n`` is the number of independent variables.",
                    "type": "ndarray, shape (n,)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "srrxzl2f",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Extra arguments passed to the objective function and its\nderivatives (`fun`, `jac` and `hess` functions).",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d28psgnj",
                    "encoding": "",
                    "name": "method",
                    "value": "",
                    "defaultValue": "",
                    "description": "Type of solver.  Should be one of\n\n- 'Nelder-Mead' :ref:`(see here) <optimize.minimize-neldermead>`\n- 'Powell'      :ref:`(see here) <optimize.minimize-powell>`\n- 'CG'          :ref:`(see here) <optimize.minimize-cg>`\n- 'BFGS'        :ref:`(see here) <optimize.minimize-bfgs>`\n- 'Newton-CG'   :ref:`(see here) <optimize.minimize-newtoncg>`\n- 'L-BFGS-B'    :ref:`(see here) <optimize.minimize-lbfgsb>`\n- 'TNC'         :ref:`(see here) <optimize.minimize-tnc>`\n- 'COBYLA'      :ref:`(see here) <optimize.minimize-cobyla>`\n- 'COBYQA'      :ref:`(see here) <optimize.minimize-cobyqa>`\n- 'SLSQP'       :ref:`(see here) <optimize.minimize-slsqp>`\n- 'trust-constr':ref:`(see here) <optimize.minimize-trustconstr>`\n- 'dogleg'      :ref:`(see here) <optimize.minimize-dogleg>`\n- 'trust-ncg'   :ref:`(see here) <optimize.minimize-trustncg>`\n- 'trust-exact' :ref:`(see here) <optimize.minimize-trustexact>`\n- 'trust-krylov' :ref:`(see here) <optimize.minimize-trustkrylov>`\n- custom - a callable object, see below for description.\n\nIf not given, chosen to be one of ``BFGS``, ``L-BFGS-B``, ``SLSQP``,\ndepending on whether or not the problem has constraints or bounds.",
                    "type": "str or callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "my3j131g",
                    "encoding": "",
                    "name": "jac",
                    "value": "",
                    "defaultValue": "",
                    "description": "Method for computing the gradient vector. Only for CG, BFGS,\nNewton-CG, L-BFGS-B, TNC, SLSQP, dogleg, trust-ncg, trust-krylov,\ntrust-exact and trust-constr.\nIf it is a callable, it should be a function that returns the gradient\nvector::\n\n    jac(x, *args) -> array_like, shape (n,)\n\nwhere ``x`` is an array with shape (n,) and ``args`` is a tuple with\nthe fixed parameters. If `jac` is a Boolean and is True, `fun` is\nassumed to return a tuple ``(f, g)`` containing the objective\nfunction and the gradient.\nMethods 'Newton-CG', 'trust-ncg', 'dogleg', 'trust-exact', and\n'trust-krylov' require that either a callable be supplied, or that\n`fun` return the objective and gradient.\nIf None or False, the gradient will be estimated using 2-point finite\ndifference estimation with an absolute step size.\nAlternatively, the keywords  {'2-point', '3-point', 'cs'} can be used\nto select a finite difference scheme for numerical estimation of the\ngradient with a relative step size. These finite difference schemes\nobey any specified `bounds`.",
                    "type": "{callable,  '2-point', '3-point', 'cs', bool}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tnk3ait2",
                    "encoding": "",
                    "name": "hess",
                    "value": "",
                    "defaultValue": "",
                    "description": "Method for computing the Hessian matrix. Only for Newton-CG, dogleg,\ntrust-ncg, trust-krylov, trust-exact and trust-constr.\nIf it is callable, it should return the Hessian matrix::\n\n    hess(x, *args) -> {LinearOperator, spmatrix, array}, (n, n)\n\nwhere ``x`` is a (n,) ndarray and ``args`` is a tuple with the fixed\nparameters.\nThe keywords {'2-point', '3-point', 'cs'} can also be used to select\na finite difference scheme for numerical estimation of the hessian.\nAlternatively, objects implementing the `HessianUpdateStrategy`\ninterface can be used to approximate the Hessian. Available\nquasi-Newton methods implementing this interface are:\n\n- `BFGS`\n- `SR1`\n\nNot all of the options are available for each of the methods; for\navailability refer to the notes.",
                    "type": "{callable, '2-point', '3-point', 'cs', HessianUpdateStrategy}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ks26s7be",
                    "encoding": "",
                    "name": "hessp",
                    "value": "",
                    "defaultValue": "",
                    "description": "Hessian of objective function times an arbitrary vector p. Only for\nNewton-CG, trust-ncg, trust-krylov, trust-constr.\nOnly one of `hessp` or `hess` needs to be given. If `hess` is\nprovided, then `hessp` will be ignored. `hessp` must compute the\nHessian times an arbitrary vector::\n\n    hessp(x, p, *args) ->  ndarray shape (n,)\n\nwhere ``x`` is a (n,) ndarray, ``p`` is an arbitrary vector with\ndimension (n,) and ``args`` is a tuple with the fixed\nparameters.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qema0m3_",
                    "encoding": "",
                    "name": "bounds",
                    "value": "",
                    "defaultValue": "",
                    "description": "Bounds on variables for Nelder-Mead, L-BFGS-B, TNC, SLSQP, Powell,\ntrust-constr, COBYLA, and COBYQA methods. There are two ways to specify\nthe bounds:\n\n1. Instance of `Bounds` class.\n2. Sequence of ``(min, max)`` pairs for each element in `x`. None\n   is used to specify no bound.",
                    "type": "sequence or Bounds",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vwm_qsvl",
                    "encoding": "",
                    "name": "constraints",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Constraints definition. Only for COBYLA, COBYQA, SLSQP and trust-constr.\n\nConstraints for 'trust-constr', 'cobyqa', and 'cobyla' are defined as a single\nobject or a list of objects specifying constraints to the optimization problem.\nAvailable constraints are:\n\n- `LinearConstraint`\n- `NonlinearConstraint`\n\nConstraints for COBYLA, SLSQP are defined as a list of dictionaries.\nEach dictionary with fields:\n\ntype : str\n    Constraint type: 'eq' for equality, 'ineq' for inequality.\nfun : callable\n    The function defining the constraint.\njac : callable, optional\n    The Jacobian of `fun` (only for SLSQP).\nargs : sequence, optional\n    Extra arguments to be passed to the function and Jacobian.\n\nEquality constraint means that the constraint function result is to\nbe zero whereas inequality means that it is to be non-negative.",
                    "type": "builtins.tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n8zkemq5",
                    "encoding": "",
                    "name": "tol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Tolerance for termination. When `tol` is specified, the selected\nminimization algorithm sets some relevant solver-specific tolerance(s)\nequal to `tol`. For detailed control, use solver-specific\noptions.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ddyc1li5",
                    "encoding": "",
                    "name": "callback",
                    "value": "",
                    "defaultValue": "",
                    "description": "A callable called after each iteration.\n\nAll methods except TNC and SLSQP support a callable with\nthe signature::\n\n    callback(intermediate_result: OptimizeResult)\n\nwhere ``intermediate_result`` is a keyword parameter containing an\n`OptimizeResult` with attributes ``x`` and ``fun``, the present values\nof the parameter vector and objective function. Not all attributes of\n`OptimizeResult` may be present. The name of the parameter must be\n``intermediate_result`` for the callback to be passed an `OptimizeResult`.\nThese methods will also terminate if the callback raises ``StopIteration``.\n\nAll methods except trust-constr (also) support a signature like::\n\n    callback(xk)\n\nwhere ``xk`` is the current parameter vector.\n\nIntrospection is used to determine which of the signatures above to\ninvoke.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fhdrp7ua",
                    "encoding": "",
                    "name": "options",
                    "value": "",
                    "defaultValue": "",
                    "description": "A dictionary of solver options. All methods except `TNC` accept the\nfollowing generic options:\n\nmaxiter : int\n    Maximum number of iterations to perform. Depending on the\n    method each iteration may use several function evaluations.\n\n    For `TNC` use `maxfun` instead of `maxiter`.\ndisp : bool\n    Set to True to print convergence messages.\n\nFor method-specific options, see :func:`show_options()`.",
                    "type": "dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5d6vtsjf",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.minimize",
                    "defaultValue": "scipy.optimize.minimize",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i4ijb403",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wou0p45o",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "4li6azdg",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pyj41d9k",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize",
                    "defaultValue": "scipy.optimize",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oel_uwf7",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "arjow2ub",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "khpfedal",
            "name": "optimize.minimize_scalar",
            "description": "Local minimization of scalar function of one variable.\n    \n    Parameters\n    ----------\n    fun : callable\n        Objective function.\n        Scalar function, must return a scalar.\n    \n        Suppose the callable has signature ``f0(x, *my_args, **my_kwargs)``, where\n        ``my_args`` and ``my_kwargs`` are required positional and keyword arguments.\n        Rather than passing ``f0`` as the callable, wrap it to accept\n        only ``x``; e.g., pass ``fun=lambda x: f0(x, *my_args, **my_kwargs)`` as the\n        callable, where ``my_args`` (tuple) and ``my_kwargs`` (dict) have been\n        gathered before invoking this function.\n    \n    bracket : sequence, optional\n        For methods 'brent' and 'golden', `bracket` defines the bracketing\n        interval and is required.\n        Either a triple ``(xa, xb, xc)`` satisfying ``xa < xb < xc`` and\n        ``func(xb) < func(xa) and  func(xb) < func(xc)``, or a pair\n        ``(xa, xb)`` to be used as initial points for a downhill bracket search\n        (see `scipy.optimize.bracket`).\n        The minimizer ``res.x`` will not necessarily satisfy\n        ``xa <= res.x <= xb``.\n    bounds : sequence, optional\n        For method 'bounded', `bounds` is mandatory and must have two finite\n        items corresponding to the optimization bounds.\n    args : tuple, optional\n        Extra arguments passed to the objective function.\n    method : str or callable, optional\n        Type of solver.  Should be one of:\n    \n        - :ref:`Brent <optimize.minimize_scalar-brent>`\n        - :ref:`Bounded <optimize.minimize_scalar-bounded>`\n        - :ref:`Golden <optimize.minimize_scalar-golden>`\n        - custom - a callable object (added in version 0.14.0), see below\n    \n        Default is \"Bounded\" if bounds are provided and \"Brent\" otherwise.\n        See the 'Notes' section for details of each solver.\n    \n    tol : float, optional\n        Tolerance for termination. For detailed control, use solver-specific\n        options.\n    options : dict, optional\n        A dictionary of solver options.\n    \n        maxiter : int\n            Maximum number of iterations to perform.\n        disp : bool\n            Set to True to print convergence messages.\n    \n        See :func:`show_options()` for solver-specific options.\n    \n    Returns\n    -------\n    res : OptimizeResult\n        The optimization result represented as a ``OptimizeResult`` object.\n        Important attributes are: ``x`` the solution array, ``success`` a\n        Boolean flag indicating if the optimizer exited successfully and\n        ``message`` which describes the cause of the termination. See\n        `OptimizeResult` for a description of other attributes.\n    \n    See also\n    --------\n    minimize : Interface to minimization algorithms for scalar multivariate\n        functions\n    show_options : Additional options accepted by the solvers\n    \n    Notes\n    -----\n    This section describes the available solvers that can be selected by the\n    'method' parameter. The default method is the ``\"Bounded\"`` Brent method if\n    `bounds` are passed and unbounded ``\"Brent\"`` otherwise.\n    \n    Method :ref:`Brent <optimize.minimize_scalar-brent>` uses Brent's\n    algorithm [1]_ to find a local minimum.  The algorithm uses inverse\n    parabolic interpolation when possible to speed up convergence of\n    the golden section method.\n    \n    Method :ref:`Golden <optimize.minimize_scalar-golden>` uses the\n    golden section search technique [1]_. It uses analog of the bisection\n    method to decrease the bracketed interval. It is usually\n    preferable to use the *Brent* method.\n    \n    Method :ref:`Bounded <optimize.minimize_scalar-bounded>` can\n    perform bounded minimization [2]_ [3]_. It uses the Brent method to find a\n    local minimum in the interval x1 < xopt < x2.\n    \n    Note that the Brent and Golden methods do not guarantee success unless a\n    valid ``bracket`` triple is provided. If a three-point bracket cannot be\n    found, consider `scipy.optimize.minimize`. Also, all methods are intended\n    only for local minimization. When the function of interest has more than\n    one local minimum, consider :ref:`global_optimization`.\n    \n    **Custom minimizers**\n    \n    It may be useful to pass a custom minimization method, for example\n    when using some library frontend to minimize_scalar. You can simply\n    pass a callable as the ``method`` parameter.\n    \n    The callable is called as ``method(fun, args, **kwargs, **options)``\n    where ``kwargs`` corresponds to any other parameters passed to `minimize`\n    (such as `bracket`, `tol`, etc.), except the `options` dict, which has\n    its contents also passed as `method` parameters pair by pair.  The method\n    shall return an `OptimizeResult` object.\n    \n    The provided `method` callable must be able to accept (and possibly ignore)\n    arbitrary parameters; the set of parameters accepted by `minimize` may\n    expand in future versions and then these parameters will be passed to\n    the method. You can find an example in the scipy.optimize tutorial.\n    \n    .. versionadded:: 0.11.0\n    \n    References\n    ----------\n    .. [1] Press, W., S.A. Teukolsky, W.T. Vetterling, and B.P. Flannery.\n           Numerical Recipes in C. Cambridge University Press.\n    .. [2] Forsythe, G.E., M. A. Malcolm, and C. B. Moler. \"Computer Methods\n           for Mathematical Computations.\" Prentice-Hall Series in Automatic\n           Computation 259 (1977).\n    .. [3] Brent, Richard P. Algorithms for Minimization Without Derivatives.\n           Courier Corporation, 2013.\n    \n    Examples\n    --------\n    Consider the problem of minimizing the following function.\n    \n    >>> def f(x):\n    ...     return (x - 2) * x * (x + 2)**2\n    \n    Using the *Brent* method, we find the local minimum as:\n    \n    >>> from scipy.optimize import minimize_scalar\n    >>> res = minimize_scalar(f)\n    >>> res.fun\n    -9.9149495908\n    \n    The minimizer is:\n    \n    >>> res.x\n    1.28077640403\n    \n    Using the *Bounded* method, we find a local minimum with specified\n    bounds as:\n    \n    >>> res = minimize_scalar(f, bounds=(-3, -1), method='bounded')\n    >>> res.fun  # minimum\n    3.28365179850e-13\n    >>> res.x  # minimizer\n    -2.0000002026",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "bd77acd54a11383da26675970efe46e8dab0d8a80aea1488612f64170f0dd7d9",
            "fields": [
                {
                    "id": "731fghmq",
                    "encoding": "",
                    "name": "fun",
                    "value": "",
                    "defaultValue": "",
                    "description": "Objective function.\nScalar function, must return a scalar.\n\nSuppose the callable has signature ``f0(x, *my_args, **my_kwargs)``, where\n``my_args`` and ``my_kwargs`` are required positional and keyword arguments.\nRather than passing ``f0`` as the callable, wrap it to accept\nonly ``x``; e.g., pass ``fun=lambda x: f0(x, *my_args, **my_kwargs)`` as the\ncallable, where ``my_args`` (tuple) and ``my_kwargs`` (dict) have been\ngathered before invoking this function.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_fvk4pbi",
                    "encoding": "",
                    "name": "bracket",
                    "value": "",
                    "defaultValue": "",
                    "description": "For methods 'brent' and 'golden', `bracket` defines the bracketing\ninterval and is required.\nEither a triple ``(xa, xb, xc)`` satisfying ``xa < xb < xc`` and\n``func(xb) < func(xa) and  func(xb) < func(xc)``, or a pair\n``(xa, xb)`` to be used as initial points for a downhill bracket search\n(see `scipy.optimize.bracket`).\nThe minimizer ``res.x`` will not necessarily satisfy\n``xa <= res.x <= xb``.",
                    "type": "sequence",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e9lee3vu",
                    "encoding": "",
                    "name": "bounds",
                    "value": "",
                    "defaultValue": "",
                    "description": "For method 'bounded', `bounds` is mandatory and must have two finite\nitems corresponding to the optimization bounds.",
                    "type": "sequence",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4wgad6d4",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Extra arguments passed to the objective function.",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tdab7bo2",
                    "encoding": "",
                    "name": "method",
                    "value": "",
                    "defaultValue": "",
                    "description": "Type of solver.  Should be one of:\n\n- :ref:`Brent <optimize.minimize_scalar-brent>`\n- :ref:`Bounded <optimize.minimize_scalar-bounded>`\n- :ref:`Golden <optimize.minimize_scalar-golden>`\n- custom - a callable object (added in version 0.14.0), see below\n\nDefault is \"Bounded\" if bounds are provided and \"Brent\" otherwise.\nSee the 'Notes' section for details of each solver.",
                    "type": "str or callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "68jr_hs2",
                    "encoding": "",
                    "name": "tol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Tolerance for termination. For detailed control, use solver-specific\noptions.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v_iixp2d",
                    "encoding": "",
                    "name": "options",
                    "value": "",
                    "defaultValue": "",
                    "description": "A dictionary of solver options.\n\nmaxiter : int\n    Maximum number of iterations to perform.\ndisp : bool\n    Set to True to print convergence messages.\n\nSee :func:`show_options()` for solver-specific options.",
                    "type": "dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f42xhdqc",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.minimize_scalar",
                    "defaultValue": "scipy.optimize.minimize_scalar",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hialckpo",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jigu4viu",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "gti7jbui",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9fspjweg",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize",
                    "defaultValue": "scipy.optimize",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "znx_zpkv",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2513knef",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "5_mwwdrc",
            "name": "optimize.newton",
            "description": "Find a root of a real or complex function using the Newton-Raphson\n    (or secant or Halley's) method.\n    \n    Find a root of the scalar-valued function `func` given a nearby scalar\n    starting point `x0`.\n    The Newton-Raphson method is used if the derivative `fprime` of `func`\n    is provided, otherwise the secant method is used. If the second order\n    derivative `fprime2` of `func` is also provided, then Halley's method is\n    used.\n    \n    If `x0` is a sequence with more than one item, `newton` returns an array:\n    the roots of the function from each (scalar) starting point in `x0`.\n    In this case, `func` must be vectorized to return a sequence or array of\n    the same shape as its first argument. If `fprime` (`fprime2`) is given,\n    then its return must also have the same shape: each element is the first\n    (second) derivative of `func` with respect to its only variable evaluated\n    at each element of its first argument.\n    \n    `newton` is for finding roots of a scalar-valued functions of a single\n    variable. For problems involving several variables, see `root`.\n    \n    Parameters\n    ----------\n    func : callable\n        The function whose root is wanted. It must be a function of a\n        single variable of the form ``f(x,a,b,c...)``, where ``a,b,c...``\n        are extra arguments that can be passed in the `args` parameter.\n    x0 : float, sequence, or ndarray\n        An initial estimate of the root that should be somewhere near the\n        actual root. If not scalar, then `func` must be vectorized and return\n        a sequence or array of the same shape as its first argument.\n    fprime : callable, optional\n        The derivative of the function when available and convenient. If it\n        is None (default), then the secant method is used.\n    args : tuple, optional\n        Extra arguments to be used in the function call.\n    tol : float, optional\n        The allowable error of the root's value. If `func` is complex-valued,\n        a larger `tol` is recommended as both the real and imaginary parts\n        of `x` contribute to ``|x - x0|``.\n    maxiter : int, optional\n        Maximum number of iterations.\n    fprime2 : callable, optional\n        The second order derivative of the function when available and\n        convenient. If it is None (default), then the normal Newton-Raphson\n        or the secant method is used. If it is not None, then Halley's method\n        is used.\n    x1 : float, optional\n        Another estimate of the root that should be somewhere near the\n        actual root. Used if `fprime` is not provided.\n    rtol : float, optional\n        Tolerance (relative) for termination.\n    full_output : bool, optional\n        If `full_output` is False (default), the root is returned.\n        If True and `x0` is scalar, the return value is ``(x, r)``, where ``x``\n        is the root and ``r`` is a `RootResults` object.\n        If True and `x0` is non-scalar, the return value is ``(x, converged,\n        zero_der)`` (see Returns section for details).\n    disp : bool, optional\n        If True, raise a RuntimeError if the algorithm didn't converge, with\n        the error message containing the number of iterations and current\n        function value. Otherwise, the convergence status is recorded in a\n        `RootResults` return object.\n        Ignored if `x0` is not scalar.\n        *Note: this has little to do with displaying, however,\n        the `disp` keyword cannot be renamed for backwards compatibility.*\n    \n    Returns\n    -------\n    root : float, sequence, or ndarray\n        Estimated location where function is zero.\n    r : `RootResults`, optional\n        Present if ``full_output=True`` and `x0` is scalar.\n        Object containing information about the convergence. In particular,\n        ``r.converged`` is True if the routine converged.\n    converged : ndarray of bool, optional\n        Present if ``full_output=True`` and `x0` is non-scalar.\n        For vector functions, indicates which elements converged successfully.\n    zero_der : ndarray of bool, optional\n        Present if ``full_output=True`` and `x0` is non-scalar.\n        For vector functions, indicates which elements had a zero derivative.\n    \n    See Also\n    --------\n    root_scalar : interface to root solvers for scalar functions\n    root : interface to root solvers for multi-input, multi-output functions\n    \n    Notes\n    -----\n    The convergence rate of the Newton-Raphson method is quadratic,\n    the Halley method is cubic, and the secant method is\n    sub-quadratic. This means that if the function is well-behaved\n    the actual error in the estimated root after the nth iteration\n    is approximately the square (cube for Halley) of the error\n    after the (n-1)th step. However, the stopping criterion used\n    here is the step size and there is no guarantee that a root\n    has been found. Consequently, the result should be verified.\n    Safer algorithms are brentq, brenth, ridder, and bisect,\n    but they all require that the root first be bracketed in an\n    interval where the function changes sign. The brentq algorithm\n    is recommended for general use in one dimensional problems\n    when such an interval has been found.\n    \n    When `newton` is used with arrays, it is best suited for the following\n    types of problems:\n    \n    * The initial guesses, `x0`, are all relatively the same distance from\n      the roots.\n    * Some or all of the extra arguments, `args`, are also arrays so that a\n      class of similar problems can be solved together.\n    * The size of the initial guesses, `x0`, is larger than O(100) elements.\n      Otherwise, a naive loop may perform as well or better than a vector.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> import matplotlib.pyplot as plt\n    >>> from scipy import optimize\n    \n    >>> def f(x):\n    ...     return (x**3 - 1)  # only one real root at x = 1\n    \n    ``fprime`` is not provided, use the secant method:\n    \n    >>> root = optimize.newton(f, 1.5)\n    >>> root\n    1.0000000000000016\n    >>> root = optimize.newton(f, 1.5, fprime2=lambda x: 6 * x)\n    >>> root\n    1.0000000000000016\n    \n    Only ``fprime`` is provided, use the Newton-Raphson method:\n    \n    >>> root = optimize.newton(f, 1.5, fprime=lambda x: 3 * x**2)\n    >>> root\n    1.0\n    \n    Both ``fprime2`` and ``fprime`` are provided, use Halley's method:\n    \n    >>> root = optimize.newton(f, 1.5, fprime=lambda x: 3 * x**2,\n    ...                        fprime2=lambda x: 6 * x)\n    >>> root\n    1.0\n    \n    When we want to find roots for a set of related starting values and/or\n    function parameters, we can provide both of those as an array of inputs:\n    \n    >>> f = lambda x, a: x**3 - a\n    >>> fder = lambda x, a: 3 * x**2\n    >>> rng = np.random.default_rng()\n    >>> x = rng.standard_normal(100)\n    >>> a = np.arange(-50, 50)\n    >>> vec_res = optimize.newton(f, x, fprime=fder, args=(a, ), maxiter=200)\n    \n    The above is the equivalent of solving for each value in ``(x, a)``\n    separately in a for-loop, just faster:\n    \n    >>> loop_res = [optimize.newton(f, x0, fprime=fder, args=(a0,),\n    ...                             maxiter=200)\n    ...             for x0, a0 in zip(x, a)]\n    >>> np.allclose(vec_res, loop_res)\n    True\n    \n    Plot the results found for all values of ``a``:\n    \n    >>> analytical_result = np.sign(a) * np.abs(a)**(1/3)\n    >>> fig, ax = plt.subplots()\n    >>> ax.plot(a, analytical_result, 'o')\n    >>> ax.plot(a, vec_res, '.')\n    >>> ax.set_xlabel('$a$')\n    >>> ax.set_ylabel('$x$ where $f(x, a)=0$')\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "649cde7dda2b33f16a691c739fc57acb3323f4af3e0d54d922f5c193b8fce0ef",
            "fields": [
                {
                    "id": "b1x4aumc",
                    "encoding": "",
                    "name": "func",
                    "value": "",
                    "defaultValue": "",
                    "description": "The function whose root is wanted. It must be a function of a\nsingle variable of the form ``f(x,a,b,c...)``, where ``a,b,c...``\nare extra arguments that can be passed in the `args` parameter.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7712g2mu",
                    "encoding": "",
                    "name": "x0",
                    "value": "",
                    "defaultValue": "",
                    "description": "An initial estimate of the root that should be somewhere near the\nactual root. If not scalar, then `func` must be vectorized and return\na sequence or array of the same shape as its first argument.",
                    "type": "float, sequence, or ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lmyadwhc",
                    "encoding": "",
                    "name": "fprime",
                    "value": "",
                    "defaultValue": "",
                    "description": "The derivative of the function when available and convenient. If it\nis None (default), then the secant method is used.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5gmyugxq",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Extra arguments to be used in the function call.",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6p4_brqs",
                    "encoding": "",
                    "name": "tol",
                    "value": 1.48e-08,
                    "defaultValue": 1.48e-08,
                    "description": "The allowable error of the root's value. If `func` is complex-valued,\na larger `tol` is recommended as both the real and imaginary parts\nof `x` contribute to ``|x - x0|``.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5diiaf5_",
                    "encoding": "",
                    "name": "maxiter",
                    "value": 50,
                    "defaultValue": 50,
                    "description": "Maximum number of iterations.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1kvho5m4",
                    "encoding": "",
                    "name": "fprime2",
                    "value": "",
                    "defaultValue": "",
                    "description": "The second order derivative of the function when available and\nconvenient. If it is None (default), then the normal Newton-Raphson\nor the secant method is used. If it is not None, then Halley's method\nis used.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rf6w0xze",
                    "encoding": "",
                    "name": "x1",
                    "value": "",
                    "defaultValue": "",
                    "description": "Another estimate of the root that should be somewhere near the\nactual root. Used if `fprime` is not provided.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b1gjpl__",
                    "encoding": "",
                    "name": "rtol",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Tolerance (relative) for termination.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rp1sl7xx",
                    "encoding": "",
                    "name": "full_output",
                    "value": false,
                    "defaultValue": false,
                    "description": "If `full_output` is False (default), the root is returned.\nIf True and `x0` is scalar, the return value is ``(x, r)``, where ``x``\nis the root and ``r`` is a `RootResults` object.\nIf True and `x0` is non-scalar, the return value is ``(x, converged,\nzero_der)`` (see Returns section for details).",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qlzroens",
                    "encoding": "",
                    "name": "disp",
                    "value": true,
                    "defaultValue": true,
                    "description": "If True, raise a RuntimeError if the algorithm didn't converge, with\nthe error message containing the number of iterations and current\nfunction value. Otherwise, the convergence status is recorded in a\n`RootResults` return object.\nIgnored if `x0` is not scalar.\n*Note: this has little to do with displaying, however,\nthe `disp` keyword cannot be renamed for backwards compatibility.*",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wxc80tpn",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.newton",
                    "defaultValue": "scipy.optimize.newton",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nq6nkshb",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bb3m8zfh",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "144iw3ih",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e1u28aw5",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize",
                    "defaultValue": "scipy.optimize",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hk0eabas",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ks78lj_6",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "qbpoyf89",
            "name": "optimize.newton_krylov",
            "description": "Find a root of a function, using Krylov approximation for inverse Jacobian.\n    \n    This method is suitable for solving large-scale problems.\n    \n    Parameters\n    ----------\n    F : function(x) -> f\n        Function whose root to find; should take and return an array-like\n        object.\n    xin : array_like\n        Initial guess for the solution\n    rdiff : float, optional\n        Relative step size to use in numerical differentiation.\n    method : str or callable, optional\n        Krylov method to use to approximate the Jacobian.  Can be a string,\n        or a function implementing the same interface as the iterative\n        solvers in `scipy.sparse.linalg`. If a string, needs to be one of:\n        ``'lgmres'``, ``'gmres'``, ``'bicgstab'``, ``'cgs'``, ``'minres'``,\n        ``'tfqmr'``.\n    \n        The default is `scipy.sparse.linalg.lgmres`.\n    inner_maxiter : int, optional\n        Parameter to pass to the \"inner\" Krylov solver: maximum number of\n        iterations. Iteration will stop after maxiter steps even if the\n        specified tolerance has not been achieved.\n    inner_M : LinearOperator or InverseJacobian\n        Preconditioner for the inner Krylov iteration.\n        Note that you can use also inverse Jacobians as (adaptive)\n        preconditioners. For example,\n    \n        >>> from scipy.optimize import BroydenFirst, KrylovJacobian\n        >>> from scipy.optimize import InverseJacobian\n        >>> jac = BroydenFirst()\n        >>> kjac = KrylovJacobian(inner_M=InverseJacobian(jac))\n    \n        If the preconditioner has a method named 'update', it will be called\n        as ``update(x, f)`` after each nonlinear step, with ``x`` giving\n        the current point, and ``f`` the current function value.\n    outer_k : int, optional\n        Size of the subspace kept across LGMRES nonlinear iterations.\n        See `scipy.sparse.linalg.lgmres` for details.\n    inner_kwargs : kwargs\n        Keyword parameters for the \"inner\" Krylov solver\n        (defined with `method`). Parameter names must start with\n        the `inner_` prefix which will be stripped before passing on\n        the inner method. See, e.g., `scipy.sparse.linalg.gmres` for details.\n    iter : int, optional\n        Number of iterations to make. If omitted (default), make as many\n        as required to meet tolerances.\n    verbose : bool, optional\n        Print status to stdout on every iteration.\n    maxiter : int, optional\n        Maximum number of iterations to make. If more are needed to\n        meet convergence, `NoConvergence` is raised.\n    f_tol : float, optional\n        Absolute tolerance (in max-norm) for the residual.\n        If omitted, default is 6e-6.\n    f_rtol : float, optional\n        Relative tolerance for the residual. If omitted, not used.\n    x_tol : float, optional\n        Absolute minimum step size, as determined from the Jacobian\n        approximation. If the step size is smaller than this, optimization\n        is terminated as successful. If omitted, not used.\n    x_rtol : float, optional\n        Relative minimum step size. If omitted, not used.\n    tol_norm : function(vector) -> scalar, optional\n        Norm to use in convergence check. Default is the maximum norm.\n    line_search : {None, 'armijo' (default), 'wolfe'}, optional\n        Which type of a line search to use to determine the step size in the\n        direction given by the Jacobian approximation. Defaults to 'armijo'.\n    callback : function, optional\n        Optional callback function. It is called on every iteration as\n        ``callback(x, f)`` where `x` is the current solution and `f`\n        the corresponding residual.\n    \n    Returns\n    -------\n    sol : ndarray\n        An array (of similar array type as `x0`) containing the final solution.\n    \n    Raises\n    ------\n    NoConvergence\n        When a solution was not found.\n    \n    See Also\n    --------\n    root : Interface to root finding algorithms for multivariate\n           functions. See ``method='krylov'`` in particular.\n    scipy.sparse.linalg.gmres\n    scipy.sparse.linalg.lgmres\n    \n    Notes\n    -----\n    This function implements a Newton-Krylov solver. The basic idea is\n    to compute the inverse of the Jacobian with an iterative Krylov\n    method. These methods require only evaluating the Jacobian-vector\n    products, which are conveniently approximated by a finite difference:\n    \n    .. math:: J v \\approx (f(x + \\omega*v/|v|) - f(x)) / \\omega\n    \n    Due to the use of iterative matrix inverses, these methods can\n    deal with large nonlinear problems.\n    \n    SciPy's `scipy.sparse.linalg` module offers a selection of Krylov\n    solvers to choose from. The default here is `lgmres`, which is a\n    variant of restarted GMRES iteration that reuses some of the\n    information obtained in the previous Newton steps to invert\n    Jacobians in subsequent steps.\n    \n    For a review on Newton-Krylov methods, see for example [1]_,\n    and for the LGMRES sparse inverse method, see [2]_.\n    \n    References\n    ----------\n    .. [1] C. T. Kelley, Solving Nonlinear Equations with Newton's Method,\n           SIAM, pp.57-83, 2003.\n           :doi:`10.1137/1.9780898718898.ch3`\n    .. [2] D.A. Knoll and D.E. Keyes, J. Comp. Phys. 193, 357 (2004).\n           :doi:`10.1016/j.jcp.2003.08.010`\n    .. [3] A.H. Baker and E.R. Jessup and T. Manteuffel,\n           SIAM J. Matrix Anal. Appl. 26, 962 (2005).\n           :doi:`10.1137/S0895479803422014`\n    \n    Examples\n    --------\n    The following functions define a system of nonlinear equations\n    \n    >>> def fun(x):\n    ...     return [x[0] + 0.5 * x[1] - 1.0,\n    ...             0.5 * (x[1] - x[0]) ** 2]\n    \n    A solution can be obtained as follows.\n    \n    >>> from scipy import optimize\n    >>> sol = optimize.newton_krylov(fun, [0, 0])\n    >>> sol\n    array([0.66731771, 0.66536458])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "552c2f0f916fac09f472a9a73a0fd48945727857664106f5ecce059a87587013",
            "fields": [
                {
                    "id": "ei4iene7",
                    "encoding": "",
                    "name": "F",
                    "value": "",
                    "defaultValue": "",
                    "description": "Function whose root to find; should take and return an array-like\nobject.",
                    "type": "function(x) -> f",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u5f8t6yg",
                    "encoding": "",
                    "name": "xin",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial guess for the solution",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tvwknjb_",
                    "encoding": "",
                    "name": "iter",
                    "value": "",
                    "defaultValue": "",
                    "description": "Number of iterations to make. If omitted (default), make as many\nas required to meet tolerances.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jvb9g6yn",
                    "encoding": "",
                    "name": "rdiff",
                    "value": "",
                    "defaultValue": "",
                    "description": "Relative step size to use in numerical differentiation.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k_wiv24e",
                    "encoding": "",
                    "name": "method",
                    "value": "lgmres",
                    "defaultValue": "lgmres",
                    "description": "Krylov method to use to approximate the Jacobian.  Can be a string,\nor a function implementing the same interface as the iterative\nsolvers in `scipy.sparse.linalg`. If a string, needs to be one of:\n``'lgmres'``, ``'gmres'``, ``'bicgstab'``, ``'cgs'``, ``'minres'``,\n``'tfqmr'``.\n\nThe default is `scipy.sparse.linalg.lgmres`.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ayns4blu",
                    "encoding": "",
                    "name": "inner_maxiter",
                    "value": 20,
                    "defaultValue": 20,
                    "description": "Parameter to pass to the \"inner\" Krylov solver: maximum number of\niterations. Iteration will stop after maxiter steps even if the\nspecified tolerance has not been achieved.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6cvwdu9a",
                    "encoding": "",
                    "name": "inner_M",
                    "value": "",
                    "defaultValue": "",
                    "description": "Preconditioner for the inner Krylov iteration.\nNote that you can use also inverse Jacobians as (adaptive)\npreconditioners. For example,\n\n>>> from scipy.optimize import BroydenFirst, KrylovJacobian\n>>> from scipy.optimize import InverseJacobian\n>>> jac = BroydenFirst()\n>>> kjac = KrylovJacobian(inner_M=InverseJacobian(jac))\n\nIf the preconditioner has a method named 'update', it will be called\nas ``update(x, f)`` after each nonlinear step, with ``x`` giving\nthe current point, and ``f`` the current function value.",
                    "type": "LinearOperator or InverseJacobian",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "16dexrq2",
                    "encoding": "",
                    "name": "outer_k",
                    "value": 10,
                    "defaultValue": 10,
                    "description": "Size of the subspace kept across LGMRES nonlinear iterations.\nSee `scipy.sparse.linalg.lgmres` for details.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9lr_1bvn",
                    "encoding": "",
                    "name": "verbose",
                    "value": false,
                    "defaultValue": false,
                    "description": "Print status to stdout on every iteration.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3y7ubi2y",
                    "encoding": "",
                    "name": "maxiter",
                    "value": "",
                    "defaultValue": "",
                    "description": "Maximum number of iterations to make. If more are needed to\nmeet convergence, `NoConvergence` is raised.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "csxz5zud",
                    "encoding": "",
                    "name": "f_tol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Absolute tolerance (in max-norm) for the residual.\nIf omitted, default is 6e-6.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u866yucf",
                    "encoding": "",
                    "name": "f_rtol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Relative tolerance for the residual. If omitted, not used.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zawfj4p2",
                    "encoding": "",
                    "name": "x_tol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Absolute minimum step size, as determined from the Jacobian\napproximation. If the step size is smaller than this, optimization\nis terminated as successful. If omitted, not used.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9fzh3qxq",
                    "encoding": "",
                    "name": "x_rtol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Relative minimum step size. If omitted, not used.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q9kwd0w_",
                    "encoding": "",
                    "name": "tol_norm",
                    "value": "",
                    "defaultValue": "",
                    "description": "Norm to use in convergence check. Default is the maximum norm.",
                    "type": "function(vector) -> scalar",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hm_hrkc5",
                    "encoding": "",
                    "name": "line_search",
                    "value": "armijo",
                    "defaultValue": "armijo",
                    "description": "Which type of a line search to use to determine the step size in the\ndirection given by the Jacobian approximation. Defaults to 'armijo'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4zsttat0",
                    "encoding": "",
                    "name": "callback",
                    "value": "",
                    "defaultValue": "",
                    "description": "Optional callback function. It is called on every iteration as\n``callback(x, f)`` where `x` is the current solution and `f`\nthe corresponding residual.",
                    "type": "function",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gob5tiqa",
                    "encoding": "",
                    "name": "kw",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1jbwdf6p",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.newton_krylov",
                    "defaultValue": "scipy.optimize.newton_krylov",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g939o9ax",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "32yogkhb",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "1dreln01",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j2_59gfy",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize",
                    "defaultValue": "scipy.optimize",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0u_r4tki",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q9sxy_95",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ryuclsjq",
            "name": "optimize.nnls",
            "description": "Solve ``argmin_x || Ax - b ||_2`` for ``x>=0``.\n    \n    This problem, often called as NonNegative Least Squares, is a convex\n    optimization problem with convex constraints. It typically arises when\n    the ``x`` models quantities for which only nonnegative values are\n    attainable; weight of ingredients, component costs and so on.\n    \n    .. deprecated:: 1.18.0\n        Use of argument(s) ``{'maxiter'}`` by position is deprecated; beginning in \n        SciPy 1.18.0, these will be keyword-only. Argument(s) ``{'atol'}`` are deprecated, whether passed by position or keyword; they will be removed in SciPy 1.18.0. \n    \n    Parameters\n    ----------\n    A : (m, n) ndarray\n        Coefficient array\n    b : (m,) ndarray, float\n        Right-hand side vector.\n    maxiter: int, optional\n        Maximum number of iterations, optional. Default value is ``3 * n``.\n    atol : float, optional\n        .. deprecated:: 1.18.0\n            This parameter is deprecated and will be removed in SciPy 1.18.0.\n            It is not used in the implementation.\n    \n    Returns\n    -------\n    x : ndarray\n        Solution vector.\n    rnorm : float\n        The 2-norm of the residual, ``|| Ax-b ||_2``.\n    \n    See Also\n    --------\n    \n    :func:`lsq_linear`\n        Linear least squares with bounds on the variables\n    \n    \n    Notes\n    -----\n    The code is based on the classical algorithm of [1]_. It utilizes an active\n    set method and solves the KKK (Karush-Kuhn-Tucker) conditions for the\n    non-negative least squares problem.\n    \n    References\n    ----------\n    .. [1] : Lawson C., Hanson R.J., \"Solving Least Squares Problems\", SIAM,\n       1995, :doi:`10.1137/1.9781611971217`\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.optimize import nnls\n    ...\n    >>> A = np.array([[1, 0], [1, 0], [0, 1]])\n    >>> b = np.array([2, 1, 1])\n    >>> nnls(A, b)\n    (array([1.5, 1. ]), 0.7071067811865475)\n    \n    >>> b = np.array([-1, -1, -1])\n    >>> nnls(A, b)\n    (array([0., 0.]), 1.7320508075688772)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "54330a3a89d8aaa7672d01aeec49cf89dcea86eed6823b8484bd574d526e5c30",
            "fields": [
                {
                    "id": "qwxhvnpv",
                    "encoding": "",
                    "name": "A",
                    "value": "",
                    "defaultValue": "",
                    "description": "Coefficient array",
                    "type": "(m, n) ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6r8e5040",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "Right-hand side vector.",
                    "type": "(m,) ndarray, float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nbpl0nst",
                    "encoding": "",
                    "name": "maxiter",
                    "value": "",
                    "defaultValue": "",
                    "description": "Maximum number of iterations, optional. Default value is ``3 * n``.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "md38i1yu",
                    "encoding": "",
                    "name": "atol",
                    "value": "builtins.object",
                    "defaultValue": "builtins.object",
                    "description": ".. deprecated:: 1.18.0\n    This parameter is deprecated and will be removed in SciPy 1.18.0.\n    It is not used in the implementation.",
                    "type": "builtins.object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8ho296t0",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.nnls",
                    "defaultValue": "scipy.optimize.nnls",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wv6eninm",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xofbsrdc",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "lh2p9xi1",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dgqu8unw",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize",
                    "defaultValue": "scipy.optimize",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i95dp257",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t0e7p1zq",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "8q6cuelh",
            "name": "optimize.quadratic_assignment",
            "description": "Approximates solution to the quadratic assignment problem and\n    the graph matching problem.\n    \n    Quadratic assignment solves problems of the following form:\n    \n    .. math::\n    \n        \\min_P & \\ {\\ \\text{trace}(A^T P B P^T)}\\\\\n        \\mbox{s.t. } & {P \\ \\epsilon \\ \\mathcal{P}}\\\\\n    \n    where :math:`\\mathcal{P}` is the set of all permutation matrices,\n    and :math:`A` and :math:`B` are square matrices.\n    \n    Graph matching tries to *maximize* the same objective function.\n    This algorithm can be thought of as finding the alignment of the\n    nodes of two graphs that minimizes the number of induced edge\n    disagreements, or, in the case of weighted graphs, the sum of squared\n    edge weight differences.\n    \n    Note that the quadratic assignment problem is NP-hard. The results given\n    here are approximations and are not guaranteed to be optimal.\n    \n    \n    Parameters\n    ----------\n    A : 2-D array, square\n        The square matrix :math:`A` in the objective function above.\n    \n    B : 2-D array, square\n        The square matrix :math:`B` in the objective function above.\n    \n    method :  str in {'faq', '2opt'} (default: 'faq')\n        The algorithm used to solve the problem.\n        :ref:`'faq' <optimize.qap-faq>` (default) and\n        :ref:`'2opt' <optimize.qap-2opt>` are available.\n    \n    options : dict, optional\n        A dictionary of solver options. All solvers support the following:\n    \n        maximize : bool (default: False)\n            Maximizes the objective function if ``True``.\n    \n        partial_match : 2-D array of integers, optional (default: None)\n            Fixes part of the matching. Also known as a \"seed\" [2]_.\n    \n            Each row of `partial_match` specifies a pair of matched nodes:\n            node ``partial_match[i, 0]`` of `A` is matched to node\n            ``partial_match[i, 1]`` of `B`. The array has shape ``(m, 2)``,\n            where ``m`` is not greater than the number of nodes, :math:`n`.\n    \n        rng : `numpy.random.Generator`, optional\n            Pseudorandom number generator state. When `rng` is None, a new\n            `numpy.random.Generator` is created using entropy from the\n            operating system. Types other than `numpy.random.Generator` are\n            passed to `numpy.random.default_rng` to instantiate a ``Generator``.\n    \n            .. versionchanged:: 1.15.0\n                As part of the `SPEC-007 <https://scientific-python.org/specs/spec-0007/>`_\n                transition from use of `numpy.random.RandomState` to\n                `numpy.random.Generator` is occurring. Supplying\n                `np.random.RandomState` to this function will now emit a\n                `DeprecationWarning`. In SciPy 1.17 its use will raise an exception.\n                In addition relying on global state using `np.random.seed`\n                will emit a `FutureWarning`. In SciPy 1.17 the global random number\n                generator will no longer be used.\n                Use of an int-like seed will raise a `FutureWarning`, in SciPy 1.17 it\n                will be normalized via `np.random.default_rng` rather than\n                `np.random.RandomState`.\n    \n        For method-specific options, see\n        :func:`show_options('quadratic_assignment') <show_options>`.\n    \n    Returns\n    -------\n    res : OptimizeResult\n        `OptimizeResult` containing the following fields.\n    \n        col_ind : 1-D array\n            Column indices corresponding to the best permutation found of the\n            nodes of `B`.\n        fun : float\n            The objective value of the solution.\n        nit : int\n            The number of iterations performed during optimization.\n    \n    Notes\n    -----\n    The default method :ref:`'faq' <optimize.qap-faq>` uses the Fast\n    Approximate QAP algorithm [1]_; it typically offers the best combination of\n    speed and accuracy.\n    Method :ref:`'2opt' <optimize.qap-2opt>` can be computationally expensive,\n    but may be a useful alternative, or it can be used to refine the solution\n    returned by another method.\n    \n    References\n    ----------\n    .. [1] J.T. Vogelstein, J.M. Conroy, V. Lyzinski, L.J. Podrazik,\n           S.G. Kratzer, E.T. Harley, D.E. Fishkind, R.J. Vogelstein, and\n           C.E. Priebe, \"Fast approximate quadratic programming for graph\n           matching,\" PLOS one, vol. 10, no. 4, p. e0121002, 2015,\n           :doi:`10.1371/journal.pone.0121002`\n    \n    .. [2] D. Fishkind, S. Adali, H. Patsolic, L. Meng, D. Singh, V. Lyzinski,\n           C. Priebe, \"Seeded graph matching\", Pattern Recognit. 87 (2019):\n           203-215, :doi:`10.1016/j.patcog.2018.09.014`\n    \n    .. [3] \"2-opt,\" Wikipedia.\n           https://en.wikipedia.org/wiki/2-opt\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.optimize import quadratic_assignment\n    >>> rng = np.random.default_rng()\n    >>> A = np.array([[0, 80, 150, 170], [80, 0, 130, 100],\n    ...               [150, 130, 0, 120], [170, 100, 120, 0]])\n    >>> B = np.array([[0, 5, 2, 7], [0, 0, 3, 8],\n    ...               [0, 0, 0, 3], [0, 0, 0, 0]])\n    >>> res = quadratic_assignment(A, B, options={'rng': rng})\n    >>> print(res)\n         fun: 3260\n     col_ind: [0 3 2 1]\n         nit: 9\n    \n    The see the relationship between the returned ``col_ind`` and ``fun``,\n    use ``col_ind`` to form the best permutation matrix found, then evaluate\n    the objective function :math:`f(P) = trace(A^T P B P^T )`.\n    \n    >>> perm = res['col_ind']\n    >>> P = np.eye(len(A), dtype=int)[perm]\n    >>> fun = np.trace(A.T @ P @ B @ P.T)\n    >>> print(fun)\n    3260\n    \n    Alternatively, to avoid constructing the permutation matrix explicitly,\n    directly permute the rows and columns of the distance matrix.\n    \n    >>> fun = np.trace(A.T @ B[perm][:, perm])\n    >>> print(fun)\n    3260\n    \n    Although not guaranteed in general, ``quadratic_assignment`` happens to\n    have found the globally optimal solution.\n    \n    >>> from itertools import permutations\n    >>> perm_opt, fun_opt = None, np.inf\n    >>> for perm in permutations([0, 1, 2, 3]):\n    ...     perm = np.array(perm)\n    ...     fun = np.trace(A.T @ B[perm][:, perm])\n    ...     if fun < fun_opt:\n    ...         fun_opt, perm_opt = fun, perm\n    >>> print(np.array_equal(perm_opt, res['col_ind']))\n    True\n    \n    Here is an example for which the default method,\n    :ref:`'faq' <optimize.qap-faq>`, does not find the global optimum.\n    \n    >>> A = np.array([[0, 5, 8, 6], [5, 0, 5, 1],\n    ...               [8, 5, 0, 2], [6, 1, 2, 0]])\n    >>> B = np.array([[0, 1, 8, 4], [1, 0, 5, 2],\n    ...               [8, 5, 0, 5], [4, 2, 5, 0]])\n    >>> res = quadratic_assignment(A, B, options={'rng': rng})\n    >>> print(res)\n         fun: 178\n     col_ind: [1 0 3 2]\n         nit: 13\n    \n    If accuracy is important, consider using  :ref:`'2opt' <optimize.qap-2opt>`\n    to refine the solution.\n    \n    >>> guess = np.array([np.arange(len(A)), res.col_ind]).T\n    >>> res = quadratic_assignment(A, B, method=\"2opt\",\n    ...     options = {'rng': rng, 'partial_guess': guess})\n    >>> print(res)\n         fun: 176\n     col_ind: [1 2 3 0]\n         nit: 17",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c348e083dd73e9968e06d9d599d2591d5ddfd9c9fa58db187649318eda861dd4",
            "fields": [
                {
                    "id": "3bo0ujka",
                    "encoding": "",
                    "name": "A",
                    "value": "",
                    "defaultValue": "",
                    "description": "The square matrix :math:`A` in the objective function above.",
                    "type": "2-D array, square",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0j9q2ajl",
                    "encoding": "",
                    "name": "B",
                    "value": "",
                    "defaultValue": "",
                    "description": "The square matrix :math:`B` in the objective function above.",
                    "type": "2-D array, square",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lprug1sx",
                    "encoding": "",
                    "name": "method",
                    "value": "faq",
                    "defaultValue": "faq",
                    "description": "The algorithm used to solve the problem.\n:ref:`'faq' <optimize.qap-faq>` (default) and\n:ref:`'2opt' <optimize.qap-2opt>` are available.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "__rrs6u3",
                    "encoding": "",
                    "name": "options",
                    "value": "",
                    "defaultValue": "",
                    "description": "A dictionary of solver options. All solvers support the following:\n\nmaximize : bool (default: False)\n    Maximizes the objective function if ``True``.\n\npartial_match : 2-D array of integers, optional (default: None)\n    Fixes part of the matching. Also known as a \"seed\" [2]_.\n\n    Each row of `partial_match` specifies a pair of matched nodes:\n    node ``partial_match[i, 0]`` of `A` is matched to node\n    ``partial_match[i, 1]`` of `B`. The array has shape ``(m, 2)``,\n    where ``m`` is not greater than the number of nodes, :math:`n`.\n\nrng : `numpy.random.Generator`, optional\n    Pseudorandom number generator state. When `rng` is None, a new\n    `numpy.random.Generator` is created using entropy from the\n    operating system. Types other than `numpy.random.Generator` are\n    passed to `numpy.random.default_rng` to instantiate a ``Generator``.\n\n    .. versionchanged:: 1.15.0\n        As part of the `SPEC-007 <https://scientific-python.org/specs/spec-0007/>`_\n        transition from use of `numpy.random.RandomState` to\n        `numpy.random.Generator` is occurring. Supplying\n        `np.random.RandomState` to this function will now emit a\n        `DeprecationWarning`. In SciPy 1.17 its use will raise an exception.\n        In addition relying on global state using `np.random.seed`\n        will emit a `FutureWarning`. In SciPy 1.17 the global random number\n        generator will no longer be used.\n        Use of an int-like seed will raise a `FutureWarning`, in SciPy 1.17 it\n        will be normalized via `np.random.default_rng` rather than\n        `np.random.RandomState`.\n\nFor method-specific options, see\n:func:`show_options('quadratic_assignment') <show_options>`.",
                    "type": "dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dlxthp66",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.quadratic_assignment",
                    "defaultValue": "scipy.optimize.quadratic_assignment",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "71eu7imx",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "356g2srd",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ihohyb9n",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h93d2iy3",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize",
                    "defaultValue": "scipy.optimize",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zre0qiyk",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2vwo45in",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "eue__gxi",
            "name": "optimize.ridder",
            "description": "Find a root of a function in an interval using Ridder's method.\n    \n    Parameters\n    ----------\n    f : function\n        Python function returning a number. f must be continuous, and f(a) and\n        f(b) must have opposite signs.\n    a : scalar\n        One end of the bracketing interval [a,b].\n    b : scalar\n        The other end of the bracketing interval [a,b].\n    xtol : number, optional\n        The computed root ``x0`` will satisfy ``np.isclose(x, x0,\n        atol=xtol, rtol=rtol)``, where ``x`` is the exact root. The\n        parameter must be positive.\n    rtol : number, optional\n        The computed root ``x0`` will satisfy ``np.isclose(x, x0,\n        atol=xtol, rtol=rtol)``, where ``x`` is the exact root. The\n        parameter cannot be smaller than its default value of\n        ``4*np.finfo(float).eps``.\n    maxiter : int, optional\n        If convergence is not achieved in `maxiter` iterations, an error is\n        raised. Must be >= 0.\n    args : tuple, optional\n        Containing extra arguments for the function `f`.\n        `f` is called by ``apply(f, (x)+args)``.\n    full_output : bool, optional\n        If `full_output` is False, the root is returned. If `full_output` is\n        True, the return value is ``(x, r)``, where `x` is the root, and `r` is\n        a `RootResults` object.\n    disp : bool, optional\n        If True, raise RuntimeError if the algorithm didn't converge.\n        Otherwise, the convergence status is recorded in any `RootResults`\n        return object.\n    \n    Returns\n    -------\n    root : float\n        Root of `f` between `a` and `b`.\n    r : `RootResults` (present if ``full_output = True``)\n        Object containing information about the convergence.\n        In particular, ``r.converged`` is True if the routine converged.\n    \n    See Also\n    --------\n    brentq, brenth, bisect, newton : 1-D root-finding\n    fixed_point : scalar fixed-point finder\n    elementwise.find_root : efficient elementwise 1-D root-finder\n    \n    Notes\n    -----\n    Uses [Ridders1979]_ method to find a root of the function `f` between the\n    arguments `a` and `b`. Ridders' method is faster than bisection, but not\n    generally as fast as the Brent routines. [Ridders1979]_ provides the\n    classic description and source of the algorithm. A description can also be\n    found in any recent edition of Numerical Recipes.\n    \n    The routine used here diverges slightly from standard presentations in\n    order to be a bit more careful of tolerance.\n    \n    As mentioned in the parameter documentation, the computed root ``x0`` will\n    satisfy ``np.isclose(x, x0, atol=xtol, rtol=rtol)``, where ``x`` is the\n    exact root. In equation form, this terminating condition is ``abs(x - x0)\n    <= xtol + rtol * abs(x0)``.\n    \n    The default value ``xtol=2e-12`` may lead to surprising behavior if one\n    expects `ridder` to always compute roots with relative error near machine\n    precision. Care should be taken to select `xtol` for the use case at hand.\n    Setting ``xtol=5e-324``, the smallest subnormal number, will ensure the\n    highest level of accuracy. Larger values of `xtol` may be useful for saving\n    function evaluations when a root is at or near zero in applications where\n    the tiny absolute differences available between floating point numbers near\n    zero are not meaningful.\n    \n    References\n    ----------\n    .. [Ridders1979]\n       Ridders, C. F. J. \"A New Algorithm for Computing a\n       Single Root of a Real Continuous Function.\"\n       IEEE Trans. Circuits Systems 26, 979-980, 1979.\n    \n    Examples\n    --------\n    \n    >>> def f(x):\n    ...     return (x**2 - 1)\n    \n    >>> from scipy import optimize\n    \n    >>> root = optimize.ridder(f, 0, 2)\n    >>> root\n    1.0\n    \n    >>> root = optimize.ridder(f, -2, 0)\n    >>> root\n    -1.0",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9037c9e96c74108107d9a0fdeeeb3b31335b8f2dcaca3dbfbe44f9c8a68e317c",
            "fields": [
                {
                    "id": "lrnpyacw",
                    "encoding": "",
                    "name": "f",
                    "value": "",
                    "defaultValue": "",
                    "description": "Python function returning a number. f must be continuous, and f(a) and\nf(b) must have opposite signs.",
                    "type": "function",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nzksj8qv",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "One end of the bracketing interval [a,b].",
                    "type": "scalar",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z2yux_uk",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "The other end of the bracketing interval [a,b].",
                    "type": "scalar",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "955eieqh",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Containing extra arguments for the function `f`.\n`f` is called by ``apply(f, (x)+args)``.",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0x2hd04i",
                    "encoding": "",
                    "name": "xtol",
                    "value": 2e-12,
                    "defaultValue": 2e-12,
                    "description": "The computed root ``x0`` will satisfy ``np.isclose(x, x0,\natol=xtol, rtol=rtol)``, where ``x`` is the exact root. The\nparameter must be positive.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a21dr_md",
                    "encoding": "",
                    "name": "rtol",
                    "value": "np.float64(8.881784197001252e-16)",
                    "defaultValue": "np.float64(8.881784197001252e-16)",
                    "description": "The computed root ``x0`` will satisfy ``np.isclose(x, x0,\natol=xtol, rtol=rtol)``, where ``x`` is the exact root. The\nparameter cannot be smaller than its default value of\n``4*np.finfo(float).eps``.",
                    "type": "numpy.float64",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bt5z25j9",
                    "encoding": "",
                    "name": "maxiter",
                    "value": 100,
                    "defaultValue": 100,
                    "description": "If convergence is not achieved in `maxiter` iterations, an error is\nraised. Must be >= 0.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "drstugn7",
                    "encoding": "",
                    "name": "full_output",
                    "value": false,
                    "defaultValue": false,
                    "description": "If `full_output` is False, the root is returned. If `full_output` is\nTrue, the return value is ``(x, r)``, where `x` is the root, and `r` is\na `RootResults` object.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9ko_k9c5",
                    "encoding": "",
                    "name": "disp",
                    "value": true,
                    "defaultValue": true,
                    "description": "If True, raise RuntimeError if the algorithm didn't converge.\nOtherwise, the convergence status is recorded in any `RootResults`\nreturn object.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1zy429_c",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.ridder",
                    "defaultValue": "scipy.optimize.ridder",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9xhcxg80",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ppi5_6sy",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "5zp_j2b2",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n3v0svi_",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize",
                    "defaultValue": "scipy.optimize",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "seyjbowb",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sip8xzp6",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "kgdli9i7",
            "name": "optimize.root",
            "description": "Find a root of a vector function.\n    \n    Parameters\n    ----------\n    fun : callable\n        A vector function to find a root of.\n    \n        Suppose the callable has signature ``f0(x, *my_args, **my_kwargs)``, where\n        ``my_args`` and ``my_kwargs`` are required positional and keyword arguments.\n        Rather than passing ``f0`` as the callable, wrap it to accept\n        only ``x``; e.g., pass ``fun=lambda x: f0(x, *my_args, **my_kwargs)`` as the\n        callable, where ``my_args`` (tuple) and ``my_kwargs`` (dict) have been\n        gathered before invoking this function.\n    x0 : ndarray\n        Initial guess.\n    args : tuple, optional\n        Extra arguments passed to the objective function and its Jacobian.\n    method : str, optional\n        Type of solver. Should be one of\n    \n        - 'hybr'             :ref:`(see here) <optimize.root-hybr>`\n        - 'lm'               :ref:`(see here) <optimize.root-lm>`\n        - 'broyden1'         :ref:`(see here) <optimize.root-broyden1>`\n        - 'broyden2'         :ref:`(see here) <optimize.root-broyden2>`\n        - 'anderson'         :ref:`(see here) <optimize.root-anderson>`\n        - 'linearmixing'     :ref:`(see here) <optimize.root-linearmixing>`\n        - 'diagbroyden'      :ref:`(see here) <optimize.root-diagbroyden>`\n        - 'excitingmixing'   :ref:`(see here) <optimize.root-excitingmixing>`\n        - 'krylov'           :ref:`(see here) <optimize.root-krylov>`\n        - 'df-sane'          :ref:`(see here) <optimize.root-dfsane>`\n    \n    jac : bool or callable, optional\n        If `jac` is a Boolean and is True, `fun` is assumed to return the\n        value of Jacobian along with the objective function. If False, the\n        Jacobian will be estimated numerically.\n        `jac` can also be a callable returning the Jacobian of `fun`. In\n        this case, it must accept the same arguments as `fun`.\n    tol : float, optional\n        Tolerance for termination. For detailed control, use solver-specific\n        options.\n    callback : function, optional\n        Optional callback function. It is called on every iteration as\n        ``callback(x, f)`` where `x` is the current solution and `f`\n        the corresponding residual. For all methods but 'hybr' and 'lm'.\n    options : dict, optional\n        A dictionary of solver options. E.g., `xtol` or `maxiter`, see\n        :obj:`show_options()` for details.\n    \n    Returns\n    -------\n    sol : OptimizeResult\n        The solution represented as a ``OptimizeResult`` object.\n        Important attributes are: ``x`` the solution array, ``success`` a\n        Boolean flag indicating if the algorithm exited successfully and\n        ``message`` which describes the cause of the termination. See\n        `OptimizeResult` for a description of other attributes.\n    \n    See also\n    --------\n    show_options : Additional options accepted by the solvers\n    \n    Notes\n    -----\n    This section describes the available solvers that can be selected by the\n    'method' parameter. The default method is *hybr*.\n    \n    Method *hybr* uses a modification of the Powell hybrid method as\n    implemented in MINPACK [1]_.\n    \n    Method *lm* solves the system of nonlinear equations in a least squares\n    sense using a modification of the Levenberg-Marquardt algorithm as\n    implemented in MINPACK [1]_.\n    \n    Method *df-sane* is a derivative-free spectral method. [3]_\n    \n    Methods *broyden1*, *broyden2*, *anderson*, *linearmixing*,\n    *diagbroyden*, *excitingmixing*, *krylov* are inexact Newton methods,\n    with backtracking or full line searches [2]_. Each method corresponds\n    to a particular Jacobian approximations.\n    \n    - Method *broyden1* uses Broyden's first Jacobian approximation, it is\n      known as Broyden's good method.\n    - Method *broyden2* uses Broyden's second Jacobian approximation, it\n      is known as Broyden's bad method.\n    - Method *anderson* uses (extended) Anderson mixing.\n    - Method *Krylov* uses Krylov approximation for inverse Jacobian. It\n      is suitable for large-scale problem.\n    - Method *diagbroyden* uses diagonal Broyden Jacobian approximation.\n    - Method *linearmixing* uses a scalar Jacobian approximation.\n    - Method *excitingmixing* uses a tuned diagonal Jacobian\n      approximation.\n    \n    .. warning::\n    \n        The algorithms implemented for methods *diagbroyden*,\n        *linearmixing* and *excitingmixing* may be useful for specific\n        problems, but whether they will work may depend strongly on the\n        problem.\n    \n    .. versionadded:: 0.11.0\n    \n    References\n    ----------\n    .. [1] More, Jorge J., Burton S. Garbow, and Kenneth E. Hillstrom.\n       1980. User Guide for MINPACK-1.\n    .. [2] C. T. Kelley. 1995. Iterative Methods for Linear and Nonlinear\n       Equations. Society for Industrial and Applied Mathematics.\n       <https://archive.siam.org/books/kelley/fr16/>\n    .. [3] W. La Cruz, J.M. Martinez, M. Raydan. Math. Comp. 75, 1429 (2006).\n    \n    Examples\n    --------\n    The following functions define a system of nonlinear equations and its\n    jacobian.\n    \n    >>> import numpy as np\n    >>> def fun(x):\n    ...     return [x[0]  + 0.5 * (x[0] - x[1])**3 - 1.0,\n    ...             0.5 * (x[1] - x[0])**3 + x[1]]\n    \n    >>> def jac(x):\n    ...     return np.array([[1 + 1.5 * (x[0] - x[1])**2,\n    ...                       -1.5 * (x[0] - x[1])**2],\n    ...                      [-1.5 * (x[1] - x[0])**2,\n    ...                       1 + 1.5 * (x[1] - x[0])**2]])\n    \n    A solution can be obtained as follows.\n    \n    >>> from scipy import optimize\n    >>> sol = optimize.root(fun, [0, 0], jac=jac, method='hybr')\n    >>> sol.x\n    array([ 0.8411639,  0.1588361])\n    \n    **Large problem**\n    \n    Suppose that we needed to solve the following integrodifferential\n    equation on the square :math:`[0,1]\\times[0,1]`:\n    \n    .. math::\n    \n       \\nabla^2 P = 10 \\left(\\int_0^1\\int_0^1\\cosh(P)\\,dx\\,dy\\right)^2\n    \n    with :math:`P(x,1) = 1` and :math:`P=0` elsewhere on the boundary of\n    the square.\n    \n    The solution can be found using the ``method='krylov'`` solver:\n    \n    >>> from scipy import optimize\n    >>> # parameters\n    >>> nx, ny = 75, 75\n    >>> hx, hy = 1./(nx-1), 1./(ny-1)\n    \n    >>> P_left, P_right = 0, 0\n    >>> P_top, P_bottom = 1, 0\n    \n    >>> def residual(P):\n    ...    d2x = np.zeros_like(P)\n    ...    d2y = np.zeros_like(P)\n    ...\n    ...    d2x[1:-1] = (P[2:]   - 2*P[1:-1] + P[:-2]) / hx/hx\n    ...    d2x[0]    = (P[1]    - 2*P[0]    + P_left)/hx/hx\n    ...    d2x[-1]   = (P_right - 2*P[-1]   + P[-2])/hx/hx\n    ...\n    ...    d2y[:,1:-1] = (P[:,2:] - 2*P[:,1:-1] + P[:,:-2])/hy/hy\n    ...    d2y[:,0]    = (P[:,1]  - 2*P[:,0]    + P_bottom)/hy/hy\n    ...    d2y[:,-1]   = (P_top   - 2*P[:,-1]   + P[:,-2])/hy/hy\n    ...\n    ...    return d2x + d2y - 10*np.cosh(P).mean()**2\n    \n    >>> guess = np.zeros((nx, ny), float)\n    >>> sol = optimize.root(residual, guess, method='krylov')\n    >>> print('Residual: %g' % abs(residual(sol.x)).max())\n    Residual: 5.7972e-06  # may vary\n    \n    >>> import matplotlib.pyplot as plt\n    >>> x, y = np.mgrid[0:1:(nx*1j), 0:1:(ny*1j)]\n    >>> plt.pcolormesh(x, y, sol.x, shading='gouraud')\n    >>> plt.colorbar()\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "62ff6e4e25d4e02f4932fb72cefc79a0b0a2dda3ba5821a6b7384dda39217ad2",
            "fields": [
                {
                    "id": "1i3aiwwp",
                    "encoding": "",
                    "name": "fun",
                    "value": "",
                    "defaultValue": "",
                    "description": "A vector function to find a root of.\n\nSuppose the callable has signature ``f0(x, *my_args, **my_kwargs)``, where\n``my_args`` and ``my_kwargs`` are required positional and keyword arguments.\nRather than passing ``f0`` as the callable, wrap it to accept\nonly ``x``; e.g., pass ``fun=lambda x: f0(x, *my_args, **my_kwargs)`` as the\ncallable, where ``my_args`` (tuple) and ``my_kwargs`` (dict) have been\ngathered before invoking this function.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fb0h7ovt",
                    "encoding": "",
                    "name": "x0",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial guess.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u893ech6",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Extra arguments passed to the objective function and its Jacobian.",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5xji9txh",
                    "encoding": "",
                    "name": "method",
                    "value": "hybr",
                    "defaultValue": "hybr",
                    "description": "Type of solver. Should be one of\n\n- 'hybr'             :ref:`(see here) <optimize.root-hybr>`\n- 'lm'               :ref:`(see here) <optimize.root-lm>`\n- 'broyden1'         :ref:`(see here) <optimize.root-broyden1>`\n- 'broyden2'         :ref:`(see here) <optimize.root-broyden2>`\n- 'anderson'         :ref:`(see here) <optimize.root-anderson>`\n- 'linearmixing'     :ref:`(see here) <optimize.root-linearmixing>`\n- 'diagbroyden'      :ref:`(see here) <optimize.root-diagbroyden>`\n- 'excitingmixing'   :ref:`(see here) <optimize.root-excitingmixing>`\n- 'krylov'           :ref:`(see here) <optimize.root-krylov>`\n- 'df-sane'          :ref:`(see here) <optimize.root-dfsane>`",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wz9bet28",
                    "encoding": "",
                    "name": "jac",
                    "value": "",
                    "defaultValue": "",
                    "description": "If `jac` is a Boolean and is True, `fun` is assumed to return the\nvalue of Jacobian along with the objective function. If False, the\nJacobian will be estimated numerically.\n`jac` can also be a callable returning the Jacobian of `fun`. In\nthis case, it must accept the same arguments as `fun`.",
                    "type": "bool or callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9_fpaig2",
                    "encoding": "",
                    "name": "tol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Tolerance for termination. For detailed control, use solver-specific\noptions.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "839jtr64",
                    "encoding": "",
                    "name": "callback",
                    "value": "",
                    "defaultValue": "",
                    "description": "Optional callback function. It is called on every iteration as\n``callback(x, f)`` where `x` is the current solution and `f`\nthe corresponding residual. For all methods but 'hybr' and 'lm'.",
                    "type": "function",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qhz8h0kv",
                    "encoding": "",
                    "name": "options",
                    "value": "",
                    "defaultValue": "",
                    "description": "A dictionary of solver options. E.g., `xtol` or `maxiter`, see\n:obj:`show_options()` for details.",
                    "type": "dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o3l0jyhh",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.root",
                    "defaultValue": "scipy.optimize.root",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gissjuup",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xlym09ie",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "c6g_bw13",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r06w321y",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize",
                    "defaultValue": "scipy.optimize",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sgkcbp2b",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "exbzmx7s",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "euxst040",
            "name": "optimize.root_scalar",
            "description": "Find a root of a scalar function.\n    \n    Parameters\n    ----------\n    f : callable\n        A function to find a root of.\n    \n        Suppose the callable has signature ``f0(x, *my_args, **my_kwargs)``, where\n        ``my_args`` and ``my_kwargs`` are required positional and keyword arguments.\n        Rather than passing ``f0`` as the callable, wrap it to accept\n        only ``x``; e.g., pass ``fun=lambda x: f0(x, *my_args, **my_kwargs)`` as the\n        callable, where ``my_args`` (tuple) and ``my_kwargs`` (dict) have been\n        gathered before invoking this function.\n    args : tuple, optional\n        Extra arguments passed to the objective function and its derivative(s).\n    method : str, optional\n        Type of solver.  Should be one of\n    \n        - 'bisect'    :ref:`(see here) <optimize.root_scalar-bisect>`\n        - 'brentq'    :ref:`(see here) <optimize.root_scalar-brentq>`\n        - 'brenth'    :ref:`(see here) <optimize.root_scalar-brenth>`\n        - 'ridder'    :ref:`(see here) <optimize.root_scalar-ridder>`\n        - 'toms748'    :ref:`(see here) <optimize.root_scalar-toms748>`\n        - 'newton'    :ref:`(see here) <optimize.root_scalar-newton>`\n        - 'secant'    :ref:`(see here) <optimize.root_scalar-secant>`\n        - 'halley'    :ref:`(see here) <optimize.root_scalar-halley>`\n    \n    bracket: A sequence of 2 floats, optional\n        An interval bracketing a root.  ``f(x, *args)`` must have different\n        signs at the two endpoints.\n    x0 : float, optional\n        Initial guess.\n    x1 : float, optional\n        A second guess.\n    fprime : bool or callable, optional\n        If `fprime` is a boolean and is True, `f` is assumed to return the\n        value of the objective function and of the derivative.\n        `fprime` can also be a callable returning the derivative of `f`. In\n        this case, it must accept the same arguments as `f`.\n    fprime2 : bool or callable, optional\n        If `fprime2` is a boolean and is True, `f` is assumed to return the\n        value of the objective function and of the\n        first and second derivatives.\n        `fprime2` can also be a callable returning the second derivative of `f`.\n        In this case, it must accept the same arguments as `f`.\n    xtol : float, optional\n        Tolerance (absolute) for termination.\n    rtol : float, optional\n        Tolerance (relative) for termination.\n    maxiter : int, optional\n        Maximum number of iterations.\n    options : dict, optional\n        A dictionary of solver options. E.g., ``k``, see\n        :obj:`show_options()` for details.\n    \n    Returns\n    -------\n    sol : RootResults\n        The solution represented as a ``RootResults`` object.\n        Important attributes are: ``root`` the solution , ``converged`` a\n        boolean flag indicating if the algorithm exited successfully and\n        ``flag`` which describes the cause of the termination. See\n        `RootResults` for a description of other attributes.\n    \n    See also\n    --------\n    show_options : Additional options accepted by the solvers\n    root : Find a root of a vector function.\n    \n    Notes\n    -----\n    This section describes the available solvers that can be selected by the\n    'method' parameter.\n    \n    The default is to use the best method available for the situation\n    presented.\n    If a bracket is provided, it may use one of the bracketing methods.\n    If a derivative and an initial value are specified, it may\n    select one of the derivative-based methods.\n    If no method is judged applicable, it will raise an Exception.\n    \n    Arguments for each method are as follows (x=required, o=optional).\n    \n    +-----------------------------------------------+---+------+---------+----+----+--------+---------+------+------+---------+---------+\n    |                    method                     | f | args | bracket | x0 | x1 | fprime | fprime2 | xtol | rtol | maxiter | options |\n    +===============================================+===+======+=========+====+====+========+=========+======+======+=========+=========+\n    | :ref:`bisect <optimize.root_scalar-bisect>`   | x |  o   |    x    |    |    |        |         |  o   |  o   |    o    |   o     |\n    +-----------------------------------------------+---+------+---------+----+----+--------+---------+------+------+---------+---------+\n    | :ref:`brentq <optimize.root_scalar-brentq>`   | x |  o   |    x    |    |    |        |         |  o   |  o   |    o    |   o     |\n    +-----------------------------------------------+---+------+---------+----+----+--------+---------+------+------+---------+---------+\n    | :ref:`brenth <optimize.root_scalar-brenth>`   | x |  o   |    x    |    |    |        |         |  o   |  o   |    o    |   o     |\n    +-----------------------------------------------+---+------+---------+----+----+--------+---------+------+------+---------+---------+\n    | :ref:`ridder <optimize.root_scalar-ridder>`   | x |  o   |    x    |    |    |        |         |  o   |  o   |    o    |   o     |\n    +-----------------------------------------------+---+------+---------+----+----+--------+---------+------+------+---------+---------+\n    | :ref:`toms748 <optimize.root_scalar-toms748>` | x |  o   |    x    |    |    |        |         |  o   |  o   |    o    |   o     |\n    +-----------------------------------------------+---+------+---------+----+----+--------+---------+------+------+---------+---------+\n    | :ref:`secant <optimize.root_scalar-secant>`   | x |  o   |         | x  | o  |        |         |  o   |  o   |    o    |   o     |\n    +-----------------------------------------------+---+------+---------+----+----+--------+---------+------+------+---------+---------+\n    | :ref:`newton <optimize.root_scalar-newton>`   | x |  o   |         | x  |    |   o    |         |  o   |  o   |    o    |   o     |\n    +-----------------------------------------------+---+------+---------+----+----+--------+---------+------+------+---------+---------+\n    | :ref:`halley <optimize.root_scalar-halley>`   | x |  o   |         | x  |    |   x    |    x    |  o   |  o   |    o    |   o     |\n    +-----------------------------------------------+---+------+---------+----+----+--------+---------+------+------+---------+---------+\n    \n    Examples\n    --------\n    \n    Find the root of a simple cubic\n    \n    >>> from scipy import optimize\n    >>> def f(x):\n    ...     return (x**3 - 1)  # only one real root at x = 1\n    \n    >>> def fprime(x):\n    ...     return 3*x**2\n    \n    The `brentq` method takes as input a bracket\n    \n    >>> sol = optimize.root_scalar(f, bracket=[0, 3], method='brentq')\n    >>> sol.root, sol.iterations, sol.function_calls\n    (1.0, 10, 11)\n    \n    The `newton` method takes as input a single point and uses the\n    derivative(s).\n    \n    >>> sol = optimize.root_scalar(f, x0=0.2, fprime=fprime, method='newton')\n    >>> sol.root, sol.iterations, sol.function_calls\n    (1.0, 11, 22)\n    \n    The function can provide the value and derivative(s) in a single call.\n    \n    >>> def f_p_pp(x):\n    ...     return (x**3 - 1), 3*x**2, 6*x\n    \n    >>> sol = optimize.root_scalar(\n    ...     f_p_pp, x0=0.2, fprime=True, method='newton'\n    ... )\n    >>> sol.root, sol.iterations, sol.function_calls\n    (1.0, 11, 11)\n    \n    >>> sol = optimize.root_scalar(\n    ...     f_p_pp, x0=0.2, fprime=True, fprime2=True, method='halley'\n    ... )\n    >>> sol.root, sol.iterations, sol.function_calls\n    (1.0, 7, 8)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e175f469376b542107f728d46db692da472b64445621b1ec53125cc17197df76",
            "fields": [
                {
                    "id": "4gss2hgn",
                    "encoding": "",
                    "name": "f",
                    "value": "",
                    "defaultValue": "",
                    "description": "A function to find a root of.\n\nSuppose the callable has signature ``f0(x, *my_args, **my_kwargs)``, where\n``my_args`` and ``my_kwargs`` are required positional and keyword arguments.\nRather than passing ``f0`` as the callable, wrap it to accept\nonly ``x``; e.g., pass ``fun=lambda x: f0(x, *my_args, **my_kwargs)`` as the\ncallable, where ``my_args`` (tuple) and ``my_kwargs`` (dict) have been\ngathered before invoking this function.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mc1wpqon",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Extra arguments passed to the objective function and its derivative(s).",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bg2f50hs",
                    "encoding": "",
                    "name": "method",
                    "value": "",
                    "defaultValue": "",
                    "description": "Type of solver.  Should be one of\n\n- 'bisect'    :ref:`(see here) <optimize.root_scalar-bisect>`\n- 'brentq'    :ref:`(see here) <optimize.root_scalar-brentq>`\n- 'brenth'    :ref:`(see here) <optimize.root_scalar-brenth>`\n- 'ridder'    :ref:`(see here) <optimize.root_scalar-ridder>`\n- 'toms748'    :ref:`(see here) <optimize.root_scalar-toms748>`\n- 'newton'    :ref:`(see here) <optimize.root_scalar-newton>`\n- 'secant'    :ref:`(see here) <optimize.root_scalar-secant>`\n- 'halley'    :ref:`(see here) <optimize.root_scalar-halley>`",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5cfjy7gx",
                    "encoding": "",
                    "name": "bracket",
                    "value": "",
                    "defaultValue": "",
                    "description": "An interval bracketing a root.  ``f(x, *args)`` must have different\nsigns at the two endpoints.",
                    "type": "A sequence of 2 floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "345g00j6",
                    "encoding": "",
                    "name": "fprime",
                    "value": "",
                    "defaultValue": "",
                    "description": "If `fprime` is a boolean and is True, `f` is assumed to return the\nvalue of the objective function and of the derivative.\n`fprime` can also be a callable returning the derivative of `f`. In\nthis case, it must accept the same arguments as `f`.",
                    "type": "bool or callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "de91wngf",
                    "encoding": "",
                    "name": "fprime2",
                    "value": "",
                    "defaultValue": "",
                    "description": "If `fprime2` is a boolean and is True, `f` is assumed to return the\nvalue of the objective function and of the\nfirst and second derivatives.\n`fprime2` can also be a callable returning the second derivative of `f`.\nIn this case, it must accept the same arguments as `f`.",
                    "type": "bool or callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d0y3ul0q",
                    "encoding": "",
                    "name": "x0",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial guess.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tf1m24m5",
                    "encoding": "",
                    "name": "x1",
                    "value": "",
                    "defaultValue": "",
                    "description": "A second guess.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5p7ve82s",
                    "encoding": "",
                    "name": "xtol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Tolerance (absolute) for termination.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fikkw5dj",
                    "encoding": "",
                    "name": "rtol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Tolerance (relative) for termination.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eee0_nkw",
                    "encoding": "",
                    "name": "maxiter",
                    "value": "",
                    "defaultValue": "",
                    "description": "Maximum number of iterations.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fecmzzew",
                    "encoding": "",
                    "name": "options",
                    "value": "",
                    "defaultValue": "",
                    "description": "A dictionary of solver options. E.g., ``k``, see\n:obj:`show_options()` for details.",
                    "type": "dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6vwt8pj5",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.root_scalar",
                    "defaultValue": "scipy.optimize.root_scalar",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wc6dlqhs",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nhc6apfq",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "4iavgy05",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2lbzkxj8",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize",
                    "defaultValue": "scipy.optimize",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "45rzogmg",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m_4_u82f",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "l1nwfnhb",
            "name": "optimize.rosen",
            "description": "The Rosenbrock function.\n    \n    The function computed is::\n    \n        sum(100.0*(x[1:] - x[:-1]**2.0)**2.0 + (1 - x[:-1])**2.0)\n    \n    Parameters\n    ----------\n    x : array_like\n        1-D array of points at which the Rosenbrock function is to be computed.\n    \n    Returns\n    -------\n    f : float\n        The value of the Rosenbrock function.\n    \n    See Also\n    --------\n    \n    :func:`rosen_der`, :func:`rosen_hess`, :func:`rosen_hess_prod`\n        ..\n    \n    Notes\n    -----\n    \n    `rosen` has experimental support for Python Array API Standard compatible\n    backends in addition to NumPy. Please consider testing these features\n    by setting an environment variable ``SCIPY_ARRAY_API=1`` and providing\n    CuPy, PyTorch, JAX, or Dask arrays as array arguments. The following\n    combinations of backend and device (or other capability) are supported.\n    \n    ====================  ====================  ====================\n    Library               CPU                   GPU\n    ====================  ====================  ====================\n    NumPy                 \u2705                     n/a                 \n    CuPy                  n/a                   \u2705                   \n    PyTorch               \u2705                     \u2705                   \n    JAX                   \u2705                     \u2705                   \n    Dask                  \u2705                     n/a                 \n    ====================  ====================  ====================\n    \n    See :ref:`dev-arrayapi` for more information.\n    \n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.optimize import rosen\n    >>> X = 0.1 * np.arange(10)\n    >>> rosen(X)\n    76.56\n    \n    For higher-dimensional input ``rosen`` broadcasts.\n    In the following example, we use this to plot a 2D landscape.\n    Note that ``rosen_hess`` does not broadcast in this manner.\n    \n    >>> import matplotlib.pyplot as plt\n    >>> from mpl_toolkits.mplot3d import Axes3D\n    >>> x = np.linspace(-1, 1, 50)\n    >>> X, Y = np.meshgrid(x, x)\n    >>> ax = plt.subplot(111, projection='3d')\n    >>> ax.plot_surface(X, Y, rosen([X, Y]))\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "64c3ca098963a763586fd02f360bad4b1a36ef96d1f6976283efc6d3ae8bc4b5",
            "fields": [
                {
                    "id": "k8059629",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "1-D array of points at which the Rosenbrock function is to be computed.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2op9fl92",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.rosen",
                    "defaultValue": "scipy.optimize.rosen",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uhn4k7jk",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_j_fyn0c",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "vso1ke0h",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fis8ko1f",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize",
                    "defaultValue": "scipy.optimize",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "60c3v1he",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sel0pyn4",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "lstwvswp",
            "name": "optimize.rosen_der",
            "description": "The derivative (i.e. gradient) of the Rosenbrock function.\n    \n    Parameters\n    ----------\n    x : array_like\n        1-D array of points at which the derivative is to be computed.\n    \n    Returns\n    -------\n    rosen_der : (N,) ndarray\n        The gradient of the Rosenbrock function at `x`.\n    \n    See Also\n    --------\n    \n    :func:`rosen`, :func:`rosen_hess`, :func:`rosen_hess_prod`\n        ..\n    \n    Notes\n    -----\n    \n    `rosen_der` has experimental support for Python Array API Standard compatible\n    backends in addition to NumPy. Please consider testing these features\n    by setting an environment variable ``SCIPY_ARRAY_API=1`` and providing\n    CuPy, PyTorch, JAX, or Dask arrays as array arguments. The following\n    combinations of backend and device (or other capability) are supported.\n    \n    ====================  ====================  ====================\n    Library               CPU                   GPU\n    ====================  ====================  ====================\n    NumPy                 \u2705                     n/a                 \n    CuPy                  n/a                   \u2705                   \n    PyTorch               \u2705                     \u2705                   \n    JAX                   \u26d4                     \u26d4                   \n    Dask                  \u2705                     n/a                 \n    ====================  ====================  ====================\n    \n    See :ref:`dev-arrayapi` for more information.\n    \n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.optimize import rosen_der\n    >>> X = 0.1 * np.arange(9)\n    >>> rosen_der(X)\n    array([ -2. ,  10.6,  15.6,  13.4,   6.4,  -3. , -12.4, -19.4,  62. ])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "518c303d41a282696a3dcd3ce33206fae655c2dd8a209c45ad6c7213970b5c8b",
            "fields": [
                {
                    "id": "pvdt2o0x",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "1-D array of points at which the derivative is to be computed.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9thx8z92",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.rosen_der",
                    "defaultValue": "scipy.optimize.rosen_der",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8_x9033p",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_xq1nnj9",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "qpxifjuc",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6jx5t3ds",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize",
                    "defaultValue": "scipy.optimize",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ub9x96sl",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s33nrh4i",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "_m10k_cg",
            "name": "optimize.rosen_hess",
            "description": "The Hessian matrix of the Rosenbrock function.\n    \n    Parameters\n    ----------\n    x : array_like\n        1-D array of points at which the Hessian matrix is to be computed.\n    \n    Returns\n    -------\n    rosen_hess : ndarray\n        The Hessian matrix of the Rosenbrock function at `x`.\n    \n    See Also\n    --------\n    \n    :func:`rosen`, :func:`rosen_der`, :func:`rosen_hess_prod`\n        ..\n    \n    Notes\n    -----\n    \n    `rosen_hess` has experimental support for Python Array API Standard compatible\n    backends in addition to NumPy. Please consider testing these features\n    by setting an environment variable ``SCIPY_ARRAY_API=1`` and providing\n    CuPy, PyTorch, JAX, or Dask arrays as array arguments. The following\n    combinations of backend and device (or other capability) are supported.\n    \n    ====================  ====================  ====================\n    Library               CPU                   GPU\n    ====================  ====================  ====================\n    NumPy                 \u2705                     n/a                 \n    CuPy                  n/a                   \u2705                   \n    PyTorch               \u2705                     \u2705                   \n    JAX                   \u26d4                     \u26d4                   \n    Dask                  \u2705                     n/a                 \n    ====================  ====================  ====================\n    \n    See :ref:`dev-arrayapi` for more information.\n    \n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.optimize import rosen_hess\n    >>> X = 0.1 * np.arange(4)\n    >>> rosen_hess(X)\n    array([[-38.,   0.,   0.,   0.],\n           [  0., 134., -40.,   0.],\n           [  0., -40., 130., -80.],\n           [  0.,   0., -80., 200.]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "571c2ff90e8b7128760a1a728d04c5b3f7ccc54a7475139c5cc4d0748f7f0348",
            "fields": [
                {
                    "id": "d55tybqd",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "1-D array of points at which the Hessian matrix is to be computed.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5odao8wt",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.rosen_hess",
                    "defaultValue": "scipy.optimize.rosen_hess",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_isg5tkr",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "reke7jcc",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "fki49lkw",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cdqlxws6",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize",
                    "defaultValue": "scipy.optimize",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c5kfpp19",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r8mzslg0",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "kssj99e8",
            "name": "optimize.rosen_hess_prod",
            "description": "Product of the Hessian matrix of the Rosenbrock function with a vector.\n    \n    Parameters\n    ----------\n    x : array_like\n        1-D array of points at which the Hessian matrix is to be computed.\n    p : array_like\n        1-D array, the vector to be multiplied by the Hessian matrix.\n    \n    Returns\n    -------\n    rosen_hess_prod : ndarray\n        The Hessian matrix of the Rosenbrock function at `x` multiplied\n        by the vector `p`.\n    \n    See Also\n    --------\n    \n    :func:`rosen`, :func:`rosen_der`, :func:`rosen_hess`\n        ..\n    \n    Notes\n    -----\n    \n    `rosen_hess_prod` has experimental support for Python Array API Standard compatible\n    backends in addition to NumPy. Please consider testing these features\n    by setting an environment variable ``SCIPY_ARRAY_API=1`` and providing\n    CuPy, PyTorch, JAX, or Dask arrays as array arguments. The following\n    combinations of backend and device (or other capability) are supported.\n    \n    ====================  ====================  ====================\n    Library               CPU                   GPU\n    ====================  ====================  ====================\n    NumPy                 \u2705                     n/a                 \n    CuPy                  n/a                   \u2705                   \n    PyTorch               \u2705                     \u2705                   \n    JAX                   \u26d4                     \u26d4                   \n    Dask                  \u2705                     n/a                 \n    ====================  ====================  ====================\n    \n    See :ref:`dev-arrayapi` for more information.\n    \n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.optimize import rosen_hess_prod\n    >>> X = 0.1 * np.arange(9)\n    >>> p = 0.5 * np.arange(9)\n    >>> rosen_hess_prod(X, p)\n    array([  -0.,   27.,  -10.,  -95., -192., -265., -278., -195., -180.])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "77338878e9d04ee53ee92f6efe625ad59343a72e12e88005e194bddbe740af17",
            "fields": [
                {
                    "id": "_8qapthi",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "1-D array of points at which the Hessian matrix is to be computed.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "28hcr4jj",
                    "encoding": "",
                    "name": "p",
                    "value": "",
                    "defaultValue": "",
                    "description": "1-D array, the vector to be multiplied by the Hessian matrix.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rmbb5eid",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.rosen_hess_prod",
                    "defaultValue": "scipy.optimize.rosen_hess_prod",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nysd8ot8",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zr101wws",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "v85cmdmt",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1r0fvaxb",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize",
                    "defaultValue": "scipy.optimize",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_b4dnerr",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mox4qayu",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "etpum70s",
            "name": "optimize.shgo",
            "description": "Finds the global minimum of a function using SHG optimization.\n    \n    SHGO stands for \"simplicial homology global optimization\".\n    \n    Parameters\n    ----------\n    func : callable\n        The objective function to be minimized.  Must be in the form\n        ``f(x, *args)``, where ``x`` is the argument in the form of a 1-D array\n        and ``args`` is a tuple of any additional fixed parameters needed to\n        completely specify the function.\n    bounds : sequence or `Bounds`\n        Bounds for variables. There are two ways to specify the bounds:\n    \n        1. Instance of `Bounds` class.\n        2. Sequence of ``(min, max)`` pairs for each element in `x`.\n    \n    args : tuple, optional\n        Any additional fixed parameters needed to completely specify the\n        objective function.\n    constraints : {Constraint, dict} or List of {Constraint, dict}, optional\n        Constraints definition. Only for COBYLA, COBYQA, SLSQP and trust-constr.\n        See the tutorial [5]_ for further details on specifying constraints.\n    \n        .. note::\n    \n           Only COBYLA, COBYQA, SLSQP, and trust-constr local minimize methods\n           currently support constraint arguments. If the ``constraints``\n           sequence used in the local optimization problem is not defined in\n           ``minimizer_kwargs`` and a constrained method is used then the\n           global ``constraints`` will be used.\n           (Defining a ``constraints`` sequence in ``minimizer_kwargs``\n           means that ``constraints`` will not be added so if equality\n           constraints and so forth need to be added then the inequality\n           functions in ``constraints`` need to be added to\n           ``minimizer_kwargs`` too).\n           COBYLA only supports inequality constraints.\n    \n        .. versionchanged:: 1.11.0\n    \n           ``constraints`` accepts `NonlinearConstraint`, `LinearConstraint`.\n    \n    n : int, optional\n        Number of sampling points used in the construction of the simplicial\n        complex. For the default ``simplicial`` sampling method 2**dim + 1\n        sampling points are generated instead of the default ``n=100``. For all\n        other specified values `n` sampling points are generated. For\n        ``sobol``, ``halton`` and other arbitrary `sampling_methods` ``n=100`` or\n        another specified number of sampling points are generated.\n    iters : int, optional\n        Number of iterations used in the construction of the simplicial\n        complex. Default is 1.\n    callback : callable, optional\n        Called after each iteration, as ``callback(xk)``, where ``xk`` is the\n        current parameter vector.\n    minimizer_kwargs : dict, optional\n        Extra keyword arguments to be passed to the minimizer\n        ``scipy.optimize.minimize``. Some important options could be:\n    \n        method : str\n            The minimization method. If not given, chosen to be one of\n            BFGS, L-BFGS-B, SLSQP, depending on whether or not the\n            problem has constraints or bounds.\n        args : tuple\n            Extra arguments passed to the objective function (``func``) and\n            its derivatives (Jacobian, Hessian).\n        options : dict, optional\n            Note that by default the tolerance is specified as\n            ``{ftol: 1e-12}``\n    \n    options : dict, optional\n        A dictionary of solver options. Many of the options specified for the\n        global routine are also passed to the ``scipy.optimize.minimize``\n        routine. The options that are also passed to the local routine are\n        marked with \"(L)\".\n    \n        Stopping criteria, the algorithm will terminate if any of the specified\n        criteria are met. However, the default algorithm does not require any\n        to be specified:\n    \n        maxfev : int (L)\n            Maximum number of function evaluations in the feasible domain.\n            (Note only methods that support this option will terminate\n            the routine at precisely exact specified value. Otherwise the\n            criterion will only terminate during a global iteration)\n        f_min : float\n            Specify the minimum objective function value, if it is known.\n        f_tol : float\n            Precision goal for the value of f in the stopping\n            criterion. Note that the global routine will also\n            terminate if a sampling point in the global routine is\n            within this tolerance.\n        maxiter : int\n            Maximum number of iterations to perform.\n        maxev : int\n            Maximum number of sampling evaluations to perform (includes\n            searching in infeasible points).\n        maxtime : float\n            Maximum processing runtime allowed\n        minhgrd : int\n            Minimum homology group rank differential. The homology group of the\n            objective function is calculated (approximately) during every\n            iteration. The rank of this group has a one-to-one correspondence\n            with the number of locally convex subdomains in the objective\n            function (after adequate sampling points each of these subdomains\n            contain a unique global minimum). If the difference in the hgr is 0\n            between iterations for ``maxhgrd`` specified iterations the\n            algorithm will terminate.\n    \n        Objective function knowledge:\n    \n        symmetry : list or bool\n            Specify if the objective function contains symmetric variables.\n            The search space (and therefore performance) is decreased by up to\n            O(n!) times in the fully symmetric case. If `True` is specified\n            then all variables will be set symmetric to the first variable.\n            Default\n            is set to False.\n    \n            E.g.  f(x) = (x_1 + x_2 + x_3) + (x_4)**2 + (x_5)**2 + (x_6)**2\n    \n            In this equation x_2 and x_3 are symmetric to x_1, while x_5 and\n            x_6 are symmetric to x_4, this can be specified to the solver as::\n    \n                symmetry = [0,  # Variable 1\n                            0,  # symmetric to variable 1\n                            0,  # symmetric to variable 1\n                            3,  # Variable 4\n                            3,  # symmetric to variable 4\n                            3,  # symmetric to variable 4\n                            ]\n    \n        jac : bool or callable, optional\n            Jacobian (gradient) of objective function. Only for CG, BFGS,\n            Newton-CG, L-BFGS-B, TNC, SLSQP, dogleg, trust-ncg. If ``jac`` is a\n            boolean and is True, ``fun`` is assumed to return the gradient\n            along with the objective function. If False, the gradient will be\n            estimated numerically. ``jac`` can also be a callable returning the\n            gradient of the objective. In this case, it must accept the same\n            arguments as ``fun``. (Passed to `scipy.optimize.minimize`\n            automatically)\n    \n        hess, hessp : callable, optional\n            Hessian (matrix of second-order derivatives) of objective function\n            or Hessian of objective function times an arbitrary vector p.\n            Only for Newton-CG, dogleg, trust-ncg. Only one of ``hessp`` or\n            ``hess`` needs to be given. If ``hess`` is provided, then\n            ``hessp`` will be ignored. If neither ``hess`` nor ``hessp`` is\n            provided, then the Hessian product will be approximated using\n            finite differences on ``jac``. ``hessp`` must compute the Hessian\n            times an arbitrary vector. (Passed to `scipy.optimize.minimize`\n            automatically)\n    \n        Algorithm settings:\n    \n        minimize_every_iter : bool\n            If True then promising global sampling points will be passed to a\n            local minimization routine every iteration. If True then only the\n            final minimizer pool will be run. Defaults to True.\n    \n        local_iter : int\n            Only evaluate a few of the best minimizer pool candidates every\n            iteration. If False all potential points are passed to the local\n            minimization routine.\n    \n        infty_constraints : bool\n            If True then any sampling points generated which are outside will\n            the feasible domain will be saved and given an objective function\n            value of ``inf``. If False then these points will be discarded.\n            Using this functionality could lead to higher performance with\n            respect to function evaluations before the global minimum is found,\n            specifying False will use less memory at the cost of a slight\n            decrease in performance. Defaults to True.\n    \n        Feedback:\n    \n        disp : bool (L)\n            Set to True to print convergence messages.\n    \n    sampling_method : str or function, optional\n        Current built in sampling method options are ``halton``, ``sobol`` and\n        ``simplicial``. The default ``simplicial`` provides\n        the theoretical guarantee of convergence to the global minimum in\n        finite time. ``halton`` and ``sobol`` method are faster in terms of\n        sampling point generation at the cost of the loss of\n        guaranteed convergence. It is more appropriate for most \"easier\"\n        problems where the convergence is relatively fast.\n        User defined sampling functions must accept two arguments of ``n``\n        sampling points of dimension ``dim`` per call and output an array of\n        sampling points with shape `n x dim`.\n    \n    workers : int or map-like callable, optional\n        Sample and run the local serial minimizations in parallel.\n        Supply -1 to use all available CPU cores, or an int to use\n        that many Processes (uses `multiprocessing.Pool <multiprocessing>`).\n    \n        Alternatively supply a map-like callable, such as\n        `multiprocessing.Pool.map` for parallel evaluation.\n        This evaluation is carried out as ``workers(func, iterable)``.\n        Requires that `func` be pickleable.\n    \n        .. versionadded:: 1.11.0\n    \n    Returns\n    -------\n    res : OptimizeResult\n        The optimization result represented as a `OptimizeResult` object.\n        Important attributes are:\n        ``x`` the solution array corresponding to the global minimum,\n        ``fun`` the function output at the global solution,\n        ``xl`` an ordered list of local minima solutions,\n        ``funl`` the function output at the corresponding local solutions,\n        ``success`` a Boolean flag indicating if the optimizer exited\n        successfully,\n        ``message`` which describes the cause of the termination,\n        ``nfev`` the total number of objective function evaluations including\n        the sampling calls,\n        ``nlfev`` the total number of objective function evaluations\n        culminating from all local search optimizations,\n        ``nit`` number of iterations performed by the global routine.\n    \n    Notes\n    -----\n    Global optimization using simplicial homology global optimization [1]_.\n    Appropriate for solving general purpose NLP and blackbox optimization\n    problems to global optimality (low-dimensional problems).\n    \n    In general, the optimization problems are of the form::\n    \n        minimize f(x) subject to\n    \n        g_i(x) >= 0,  i = 1,...,m\n        h_j(x)  = 0,  j = 1,...,p\n    \n    where x is a vector of one or more variables. ``f(x)`` is the objective\n    function ``R^n -> R``, ``g_i(x)`` are the inequality constraints, and\n    ``h_j(x)`` are the equality constraints.\n    \n    Optionally, the lower and upper bounds for each element in x can also be\n    specified using the `bounds` argument.\n    \n    While most of the theoretical advantages of SHGO are only proven for when\n    ``f(x)`` is a Lipschitz smooth function, the algorithm is also proven to\n    converge to the global optimum for the more general case where ``f(x)`` is\n    non-continuous, non-convex and non-smooth, if the default sampling method\n    is used [1]_.\n    \n    The local search method may be specified using the ``minimizer_kwargs``\n    parameter which is passed on to ``scipy.optimize.minimize``. By default,\n    the ``SLSQP`` method is used. In general, it is recommended to use the\n    ``SLSQP``, ``COBYLA``, or ``COBYQA`` local minimization if inequality\n    constraints are defined for the problem since the other methods do not use\n    constraints.\n    \n    The ``halton`` and ``sobol`` method points are generated using\n    `scipy.stats.qmc`. Any other QMC method could be used.\n    \n    References\n    ----------\n    .. [1] Endres, SC, Sandrock, C, Focke, WW (2018) \"A simplicial homology\n           algorithm for lipschitz optimisation\", Journal of Global\n           Optimization.\n    .. [2] Joe, SW and Kuo, FY (2008) \"Constructing Sobol' sequences with\n           better  two-dimensional projections\", SIAM J. Sci. Comput. 30,\n           2635-2654.\n    .. [3] Hock, W and Schittkowski, K (1981) \"Test examples for nonlinear\n           programming codes\", Lecture Notes in Economics and Mathematical\n           Systems, 187. Springer-Verlag, New York.\n           http://www.ai7.uni-bayreuth.de/test_problem_coll.pdf\n    .. [4] Wales, DJ (2015) \"Perspective: Insight into reaction coordinates and\n           dynamics from the potential energy landscape\",\n           Journal of Chemical Physics, 142(13), 2015.\n    .. [5] https://docs.scipy.org/doc/scipy/tutorial/optimize.html#constrained-minimization-of-multivariate-scalar-functions-minimize\n    \n    Examples\n    --------\n    First consider the problem of minimizing the Rosenbrock function, `rosen`:\n    \n    >>> from scipy.optimize import rosen, shgo\n    >>> bounds = [(0,2), (0, 2), (0, 2), (0, 2), (0, 2)]\n    >>> result = shgo(rosen, bounds)\n    >>> result.x, result.fun\n    (array([1., 1., 1., 1., 1.]), 2.920392374190081e-18)\n    \n    Note that bounds determine the dimensionality of the objective\n    function and is therefore a required input, however you can specify\n    empty bounds using ``None`` or objects like ``np.inf`` which will be\n    converted to large float numbers.\n    \n    >>> bounds = [(None, None), ]*4\n    >>> result = shgo(rosen, bounds)\n    >>> result.x\n    array([0.99999851, 0.99999704, 0.99999411, 0.9999882 ])\n    \n    Next, we consider the Eggholder function, a problem with several local\n    minima and one global minimum. We will demonstrate the use of arguments and\n    the capabilities of `shgo`.\n    (https://en.wikipedia.org/wiki/Test_functions_for_optimization)\n    \n    >>> import numpy as np\n    >>> def eggholder(x):\n    ...     return (-(x[1] + 47.0)\n    ...             * np.sin(np.sqrt(abs(x[0]/2.0 + (x[1] + 47.0))))\n    ...             - x[0] * np.sin(np.sqrt(abs(x[0] - (x[1] + 47.0))))\n    ...             )\n    ...\n    >>> bounds = [(-512, 512), (-512, 512)]\n    \n    `shgo` has built-in low discrepancy sampling sequences. First, we will\n    input 64 initial sampling points of the *Sobol'* sequence:\n    \n    >>> result = shgo(eggholder, bounds, n=64, sampling_method='sobol')\n    >>> result.x, result.fun\n    (array([512.        , 404.23180824]), -959.6406627208397)\n    \n    `shgo` also has a return for any other local minima that was found, these\n    can be called using:\n    \n    >>> result.xl\n    array([[ 512.        ,  404.23180824],\n           [ 283.0759062 , -487.12565635],\n           [-294.66820039, -462.01964031],\n           [-105.87688911,  423.15323845],\n           [-242.97926   ,  274.38030925],\n           [-506.25823477,    6.3131022 ],\n           [-408.71980731, -156.10116949],\n           [ 150.23207937,  301.31376595],\n           [  91.00920901, -391.283763  ],\n           [ 202.89662724, -269.38043241],\n           [ 361.66623976, -106.96493868],\n           [-219.40612786, -244.06020508]])\n    \n    >>> result.funl\n    array([-959.64066272, -718.16745962, -704.80659592, -565.99778097,\n           -559.78685655, -557.36868733, -507.87385942, -493.9605115 ,\n           -426.48799655, -421.15571437, -419.31194957, -410.98477763])\n    \n    These results are useful in applications where there are many global minima\n    and the values of other global minima are desired or where the local minima\n    can provide insight into the system (for example morphologies\n    in physical chemistry [4]_).\n    \n    If we want to find a larger number of local minima, we can increase the\n    number of sampling points or the number of iterations. We'll increase the\n    number of sampling points to 64 and the number of iterations from the\n    default of 1 to 3. Using ``simplicial`` this would have given us\n    64 x 3 = 192 initial sampling points.\n    \n    >>> result_2 = shgo(eggholder,\n    ...                 bounds, n=64, iters=3, sampling_method='sobol')\n    >>> len(result.xl), len(result_2.xl)\n    (12, 23)\n    \n    Note the difference between, e.g., ``n=192, iters=1`` and ``n=64,\n    iters=3``.\n    In the first case the promising points contained in the minimiser pool\n    are processed only once. In the latter case it is processed every 64\n    sampling points for a total of 3 times.\n    \n    To demonstrate solving problems with non-linear constraints consider the\n    following example from Hock and Schittkowski problem 73 (cattle-feed)\n    [3]_::\n    \n        minimize: f = 24.55 * x_1 + 26.75 * x_2 + 39 * x_3 + 40.50 * x_4\n    \n        subject to: 2.3 * x_1 + 5.6 * x_2 + 11.1 * x_3 + 1.3 * x_4 - 5    >= 0,\n    \n                    12 * x_1 + 11.9 * x_2 + 41.8 * x_3 + 52.1 * x_4 - 21\n                        -1.645 * sqrt(0.28 * x_1**2 + 0.19 * x_2**2 +\n                                      20.5 * x_3**2 + 0.62 * x_4**2)      >= 0,\n    \n                    x_1 + x_2 + x_3 + x_4 - 1                             == 0,\n    \n                    1 >= x_i >= 0 for all i\n    \n    The approximate answer given in [3]_ is::\n    \n        f([0.6355216, -0.12e-11, 0.3127019, 0.05177655]) = 29.894378\n    \n    >>> def f(x):  # (cattle-feed)\n    ...     return 24.55*x[0] + 26.75*x[1] + 39*x[2] + 40.50*x[3]\n    ...\n    >>> def g1(x):\n    ...     return 2.3*x[0] + 5.6*x[1] + 11.1*x[2] + 1.3*x[3] - 5  # >=0\n    ...\n    >>> def g2(x):\n    ...     return (12*x[0] + 11.9*x[1] +41.8*x[2] + 52.1*x[3] - 21\n    ...             - 1.645 * np.sqrt(0.28*x[0]**2 + 0.19*x[1]**2\n    ...                             + 20.5*x[2]**2 + 0.62*x[3]**2)\n    ...             ) # >=0\n    ...\n    >>> def h1(x):\n    ...     return x[0] + x[1] + x[2] + x[3] - 1  # == 0\n    ...\n    >>> cons = ({'type': 'ineq', 'fun': g1},\n    ...         {'type': 'ineq', 'fun': g2},\n    ...         {'type': 'eq', 'fun': h1})\n    >>> bounds = [(0, 1.0),]*4\n    >>> res = shgo(f, bounds, n=150, constraints=cons)\n    >>> res\n     message: Optimization terminated successfully.\n     success: True\n         fun: 29.894378159142136\n        funl: [ 2.989e+01]\n           x: [ 6.355e-01  1.137e-13  3.127e-01  5.178e-02] # may vary\n          xl: [[ 6.355e-01  1.137e-13  3.127e-01  5.178e-02]] # may vary\n         nit: 1\n        nfev: 142 # may vary\n       nlfev: 35 # may vary\n       nljev: 5\n       nlhev: 0\n    \n    >>> g1(res.x), g2(res.x), h1(res.x)\n    (-5.062616992290714e-14, -2.9594104944408173e-12, 0.0)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9ac4ea3326a4b841cd7caab6e88f4b3cadba6a9531f89e298d722efb2cc1ac88",
            "fields": [
                {
                    "id": "6g5va017",
                    "encoding": "",
                    "name": "func",
                    "value": "",
                    "defaultValue": "",
                    "description": "The objective function to be minimized.  Must be in the form\n``f(x, *args)``, where ``x`` is the argument in the form of a 1-D array\nand ``args`` is a tuple of any additional fixed parameters needed to\ncompletely specify the function.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "invwmedq",
                    "encoding": "",
                    "name": "bounds",
                    "value": "",
                    "defaultValue": "",
                    "description": "Bounds for variables. There are two ways to specify the bounds:\n\n1. Instance of `Bounds` class.\n2. Sequence of ``(min, max)`` pairs for each element in `x`.",
                    "type": "sequence or Bounds",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zj6rst6_",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Any additional fixed parameters needed to completely specify the\nobjective function.",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9b37kap9",
                    "encoding": "",
                    "name": "constraints",
                    "value": "",
                    "defaultValue": "",
                    "description": "Constraints definition. Only for COBYLA, COBYQA, SLSQP and trust-constr.\nSee the tutorial [5]_ for further details on specifying constraints.\n\n.. note::\n\n   Only COBYLA, COBYQA, SLSQP, and trust-constr local minimize methods\n   currently support constraint arguments. If the ``constraints``\n   sequence used in the local optimization problem is not defined in\n   ``minimizer_kwargs`` and a constrained method is used then the\n   global ``constraints`` will be used.\n   (Defining a ``constraints`` sequence in ``minimizer_kwargs``\n   means that ``constraints`` will not be added so if equality\n   constraints and so forth need to be added then the inequality\n   functions in ``constraints`` need to be added to\n   ``minimizer_kwargs`` too).\n   COBYLA only supports inequality constraints.\n\n.. versionchanged:: 1.11.0\n\n   ``constraints`` accepts `NonlinearConstraint`, `LinearConstraint`.",
                    "type": "{Constraint, dict} or List of {Constraint, dict}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nf74ml50",
                    "encoding": "",
                    "name": "n",
                    "value": 100,
                    "defaultValue": 100,
                    "description": "Number of sampling points used in the construction of the simplicial\ncomplex. For the default ``simplicial`` sampling method 2**dim + 1\nsampling points are generated instead of the default ``n=100``. For all\nother specified values `n` sampling points are generated. For\n``sobol``, ``halton`` and other arbitrary `sampling_methods` ``n=100`` or\nanother specified number of sampling points are generated.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pz2wwtms",
                    "encoding": "",
                    "name": "iters",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of iterations used in the construction of the simplicial\ncomplex. Default is 1.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4nnfn9u9",
                    "encoding": "",
                    "name": "callback",
                    "value": "",
                    "defaultValue": "",
                    "description": "Called after each iteration, as ``callback(xk)``, where ``xk`` is the\ncurrent parameter vector.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e8xcdguf",
                    "encoding": "",
                    "name": "minimizer_kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "Extra keyword arguments to be passed to the minimizer\n``scipy.optimize.minimize``. Some important options could be:\n\nmethod : str\n    The minimization method. If not given, chosen to be one of\n    BFGS, L-BFGS-B, SLSQP, depending on whether or not the\n    problem has constraints or bounds.\nargs : tuple\n    Extra arguments passed to the objective function (``func``) and\n    its derivatives (Jacobian, Hessian).\noptions : dict, optional\n    Note that by default the tolerance is specified as\n    ``{ftol: 1e-12}``",
                    "type": "dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ge7719c4",
                    "encoding": "",
                    "name": "options",
                    "value": "",
                    "defaultValue": "",
                    "description": "A dictionary of solver options. Many of the options specified for the\nglobal routine are also passed to the ``scipy.optimize.minimize``\nroutine. The options that are also passed to the local routine are\nmarked with \"(L)\".\n\nStopping criteria, the algorithm will terminate if any of the specified\ncriteria are met. However, the default algorithm does not require any\nto be specified:\n\nmaxfev : int (L)\n    Maximum number of function evaluations in the feasible domain.\n    (Note only methods that support this option will terminate\n    the routine at precisely exact specified value. Otherwise the\n    criterion will only terminate during a global iteration)\nf_min : float\n    Specify the minimum objective function value, if it is known.\nf_tol : float\n    Precision goal for the value of f in the stopping\n    criterion. Note that the global routine will also\n    terminate if a sampling point in the global routine is\n    within this tolerance.\nmaxiter : int\n    Maximum number of iterations to perform.\nmaxev : int\n    Maximum number of sampling evaluations to perform (includes\n    searching in infeasible points).\nmaxtime : float\n    Maximum processing runtime allowed\nminhgrd : int\n    Minimum homology group rank differential. The homology group of the\n    objective function is calculated (approximately) during every\n    iteration. The rank of this group has a one-to-one correspondence\n    with the number of locally convex subdomains in the objective\n    function (after adequate sampling points each of these subdomains\n    contain a unique global minimum). If the difference in the hgr is 0\n    between iterations for ``maxhgrd`` specified iterations the\n    algorithm will terminate.\n\nObjective function knowledge:\n\nsymmetry : list or bool\n    Specify if the objective function contains symmetric variables.\n    The search space (and therefore performance) is decreased by up to\n    O(n!) times in the fully symmetric case. If `True` is specified\n    then all variables will be set symmetric to the first variable.\n    Default\n    is set to False.\n\n    E.g.  f(x) = (x_1 + x_2 + x_3) + (x_4)**2 + (x_5)**2 + (x_6)**2\n\n    In this equation x_2 and x_3 are symmetric to x_1, while x_5 and\n    x_6 are symmetric to x_4, this can be specified to the solver as::\n\n        symmetry = [0,  # Variable 1\n                    0,  # symmetric to variable 1\n                    0,  # symmetric to variable 1\n                    3,  # Variable 4\n                    3,  # symmetric to variable 4\n                    3,  # symmetric to variable 4\n                    ]\n\njac : bool or callable, optional\n    Jacobian (gradient) of objective function. Only for CG, BFGS,\n    Newton-CG, L-BFGS-B, TNC, SLSQP, dogleg, trust-ncg. If ``jac`` is a\n    boolean and is True, ``fun`` is assumed to return the gradient\n    along with the objective function. If False, the gradient will be\n    estimated numerically. ``jac`` can also be a callable returning the\n    gradient of the objective. In this case, it must accept the same\n    arguments as ``fun``. (Passed to `scipy.optimize.minimize`\n    automatically)\n\nhess, hessp : callable, optional\n    Hessian (matrix of second-order derivatives) of objective function\n    or Hessian of objective function times an arbitrary vector p.\n    Only for Newton-CG, dogleg, trust-ncg. Only one of ``hessp`` or\n    ``hess`` needs to be given. If ``hess`` is provided, then\n    ``hessp`` will be ignored. If neither ``hess`` nor ``hessp`` is\n    provided, then the Hessian product will be approximated using\n    finite differences on ``jac``. ``hessp`` must compute the Hessian\n    times an arbitrary vector. (Passed to `scipy.optimize.minimize`\n    automatically)\n\nAlgorithm settings:\n\nminimize_every_iter : bool\n    If True then promising global sampling points will be passed to a\n    local minimization routine every iteration. If True then only the\n    final minimizer pool will be run. Defaults to True.\n\nlocal_iter : int\n    Only evaluate a few of the best minimizer pool candidates every\n    iteration. If False all potential points are passed to the local\n    minimization routine.\n\ninfty_constraints : bool\n    If True then any sampling points generated which are outside will\n    the feasible domain will be saved and given an objective function\n    value of ``inf``. If False then these points will be discarded.\n    Using this functionality could lead to higher performance with\n    respect to function evaluations before the global minimum is found,\n    specifying False will use less memory at the cost of a slight\n    decrease in performance. Defaults to True.\n\nFeedback:\n\ndisp : bool (L)\n    Set to True to print convergence messages.",
                    "type": "dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w6xu_qnw",
                    "encoding": "",
                    "name": "sampling_method",
                    "value": "simplicial",
                    "defaultValue": "simplicial",
                    "description": "Current built in sampling method options are ``halton``, ``sobol`` and\n``simplicial``. The default ``simplicial`` provides\nthe theoretical guarantee of convergence to the global minimum in\nfinite time. ``halton`` and ``sobol`` method are faster in terms of\nsampling point generation at the cost of the loss of\nguaranteed convergence. It is more appropriate for most \"easier\"\nproblems where the convergence is relatively fast.\nUser defined sampling functions must accept two arguments of ``n``\nsampling points of dimension ``dim`` per call and output an array of\nsampling points with shape `n x dim`.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "54bn3ixg",
                    "encoding": "",
                    "name": "workers",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Sample and run the local serial minimizations in parallel.\nSupply -1 to use all available CPU cores, or an int to use\nthat many Processes (uses `multiprocessing.Pool <multiprocessing>`).\n\nAlternatively supply a map-like callable, such as\n`multiprocessing.Pool.map` for parallel evaluation.\nThis evaluation is carried out as ``workers(func, iterable)``.\nRequires that `func` be pickleable.\n\n.. versionadded:: 1.11.0",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5ywh2t95",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.shgo",
                    "defaultValue": "scipy.optimize.shgo",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c77t_gma",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q_i6op9y",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "y2k98r9s",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oi_ub8yv",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize",
                    "defaultValue": "scipy.optimize",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v4v6yu5s",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "suet46_k",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "n_h3_nqf",
            "name": "optimize.show_options",
            "description": "Show documentation for additional options of optimization solvers.\n    \n    These are method-specific options that can be supplied through the\n    ``options`` dict.\n    \n    Parameters\n    ----------\n    solver : str\n        Type of optimization solver. One of 'minimize', 'minimize_scalar',\n        'root', 'root_scalar', 'linprog', or 'quadratic_assignment'.\n    method : str, optional\n        If not given, shows all methods of the specified solver. Otherwise,\n        show only the options for the specified method. Valid values\n        corresponds to methods' names of respective solver (e.g., 'BFGS' for\n        'minimize').\n    disp : bool, optional\n        Whether to print the result rather than returning it.\n    \n    Returns\n    -------\n    text\n        Either None (for disp=True) or the text string (disp=False)\n    \n    Notes\n    -----\n    The solver-specific methods are:\n    \n    `scipy.optimize.minimize`\n    \n    - :ref:`Nelder-Mead <optimize.minimize-neldermead>`\n    - :ref:`Powell      <optimize.minimize-powell>`\n    - :ref:`CG          <optimize.minimize-cg>`\n    - :ref:`BFGS        <optimize.minimize-bfgs>`\n    - :ref:`Newton-CG   <optimize.minimize-newtoncg>`\n    - :ref:`L-BFGS-B    <optimize.minimize-lbfgsb>`\n    - :ref:`TNC         <optimize.minimize-tnc>`\n    - :ref:`COBYLA      <optimize.minimize-cobyla>`\n    - :ref:`COBYQA      <optimize.minimize-cobyqa>`\n    - :ref:`SLSQP       <optimize.minimize-slsqp>`\n    - :ref:`dogleg      <optimize.minimize-dogleg>`\n    - :ref:`trust-ncg   <optimize.minimize-trustncg>`\n    \n    `scipy.optimize.root`\n    \n    - :ref:`hybr              <optimize.root-hybr>`\n    - :ref:`lm                <optimize.root-lm>`\n    - :ref:`broyden1          <optimize.root-broyden1>`\n    - :ref:`broyden2          <optimize.root-broyden2>`\n    - :ref:`anderson          <optimize.root-anderson>`\n    - :ref:`linearmixing      <optimize.root-linearmixing>`\n    - :ref:`diagbroyden       <optimize.root-diagbroyden>`\n    - :ref:`excitingmixing    <optimize.root-excitingmixing>`\n    - :ref:`krylov            <optimize.root-krylov>`\n    - :ref:`df-sane           <optimize.root-dfsane>`\n    \n    `scipy.optimize.minimize_scalar`\n    \n    - :ref:`brent       <optimize.minimize_scalar-brent>`\n    - :ref:`golden      <optimize.minimize_scalar-golden>`\n    - :ref:`bounded     <optimize.minimize_scalar-bounded>`\n    \n    `scipy.optimize.root_scalar`\n    \n    - :ref:`bisect  <optimize.root_scalar-bisect>`\n    - :ref:`brentq  <optimize.root_scalar-brentq>`\n    - :ref:`brenth  <optimize.root_scalar-brenth>`\n    - :ref:`ridder  <optimize.root_scalar-ridder>`\n    - :ref:`toms748 <optimize.root_scalar-toms748>`\n    - :ref:`newton  <optimize.root_scalar-newton>`\n    - :ref:`secant  <optimize.root_scalar-secant>`\n    - :ref:`halley  <optimize.root_scalar-halley>`\n    \n    `scipy.optimize.linprog`\n    \n    - :ref:`simplex           <optimize.linprog-simplex>`\n    - :ref:`interior-point    <optimize.linprog-interior-point>`\n    - :ref:`revised simplex   <optimize.linprog-revised_simplex>`\n    - :ref:`highs             <optimize.linprog-highs>`\n    - :ref:`highs-ds          <optimize.linprog-highs-ds>`\n    - :ref:`highs-ipm         <optimize.linprog-highs-ipm>`\n    \n    `scipy.optimize.quadratic_assignment`\n    \n    - :ref:`faq             <optimize.qap-faq>`\n    - :ref:`2opt            <optimize.qap-2opt>`\n    \n    Examples\n    --------\n    We can print documentations of a solver in stdout:\n    \n    >>> from scipy.optimize import show_options\n    >>> show_options(solver=\"minimize\")\n    ...\n    \n    Specifying a method is possible:\n    \n    >>> show_options(solver=\"minimize\", method=\"Nelder-Mead\")\n    ...\n    \n    We can also get the documentations as a string:\n    \n    >>> show_options(solver=\"minimize\", method=\"Nelder-Mead\", disp=False)\n    Minimization of scalar function of one or more variables using the ...",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "85140499478497b2ea83737e6e19aa9b3409a1f41e743ebdc56ba3cc64a3ee3c",
            "fields": [
                {
                    "id": "hoovh_cz",
                    "encoding": "",
                    "name": "solver",
                    "value": "",
                    "defaultValue": "",
                    "description": "Type of optimization solver. One of 'minimize', 'minimize_scalar',\n'root', 'root_scalar', 'linprog', or 'quadratic_assignment'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d3_u2ux3",
                    "encoding": "",
                    "name": "method",
                    "value": "",
                    "defaultValue": "",
                    "description": "If not given, shows all methods of the specified solver. Otherwise,\nshow only the options for the specified method. Valid values\ncorresponds to methods' names of respective solver (e.g., 'BFGS' for\n'minimize').",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gv7pv3oh",
                    "encoding": "",
                    "name": "disp",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to print the result rather than returning it.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "psk1pejo",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.show_options",
                    "defaultValue": "scipy.optimize.show_options",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ve_32d0r",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6go2g3k1",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "j6gdjxb2",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rx08gkov",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize",
                    "defaultValue": "scipy.optimize",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zrkog2za",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_acu8pd8",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "jq1t3782",
            "name": "optimize.toms748",
            "description": "Find a root using TOMS Algorithm 748 method.\n    \n    Implements the Algorithm 748 method of Alefeld, Potro and Shi to find a\n    root of the function `f` on the interval ``[a , b]``, where ``f(a)`` and\n    `f(b)` must have opposite signs.\n    \n    It uses a mixture of inverse cubic interpolation and\n    \"Newton-quadratic\" steps. [APS1995].\n    \n    Parameters\n    ----------\n    f : function\n        Python function returning a scalar. The function :math:`f`\n        must be continuous, and :math:`f(a)` and :math:`f(b)`\n        have opposite signs.\n    a : scalar,\n        lower boundary of the search interval\n    b : scalar,\n        upper boundary of the search interval\n    args : tuple, optional\n        containing extra arguments for the function `f`.\n        `f` is called by ``f(x, *args)``.\n    k : int, optional\n        The number of Newton quadratic steps to perform each\n        iteration. ``k>=1``.\n    xtol : scalar, optional\n        The computed root ``x0`` will satisfy ``np.isclose(x, x0,\n        atol=xtol, rtol=rtol)``, where ``x`` is the exact root. The\n        parameter must be positive.\n    rtol : scalar, optional\n        The computed root ``x0`` will satisfy ``np.isclose(x, x0,\n        atol=xtol, rtol=rtol)``, where ``x`` is the exact root.\n    maxiter : int, optional\n        If convergence is not achieved in `maxiter` iterations, an error is\n        raised. Must be >= 0.\n    full_output : bool, optional\n        If `full_output` is False, the root is returned. If `full_output` is\n        True, the return value is ``(x, r)``, where `x` is the root, and `r` is\n        a `RootResults` object.\n    disp : bool, optional\n        If True, raise RuntimeError if the algorithm didn't converge.\n        Otherwise, the convergence status is recorded in the `RootResults`\n        return object.\n    \n    Returns\n    -------\n    root : float\n        Approximate root of `f`\n    r : `RootResults` (present if ``full_output = True``)\n        Object containing information about the convergence. In particular,\n        ``r.converged`` is True if the routine converged.\n    \n    See Also\n    --------\n    brentq, brenth, ridder, bisect, newton\n    fsolve : find roots in N dimensions.\n    elementwise.find_root : efficient elementwise 1-D root-finder\n    \n    Notes\n    -----\n    `f` must be continuous.\n    Algorithm 748 with ``k=2`` is asymptotically the most efficient\n    algorithm known for finding roots of a four times continuously\n    differentiable function.\n    In contrast with Brent's algorithm, which may only decrease the length of\n    the enclosing bracket on the last step, Algorithm 748 decreases it each\n    iteration with the same asymptotic efficiency as it finds the root.\n    \n    For easy statement of efficiency indices, assume that `f` has 4\n    continuous deriviatives.\n    For ``k=1``, the convergence order is at least 2.7, and with about\n    asymptotically 2 function evaluations per iteration, the efficiency\n    index is approximately 1.65.\n    For ``k=2``, the order is about 4.6 with asymptotically 3 function\n    evaluations per iteration, and the efficiency index 1.66.\n    For higher values of `k`, the efficiency index approaches\n    the kth root of ``(3k-2)``, hence ``k=1`` or ``k=2`` are\n    usually appropriate.\n    \n    As mentioned in the parameter documentation, the computed root ``x0`` will\n    satisfy ``np.isclose(x, x0, atol=xtol, rtol=rtol)``, where ``x`` is the\n    exact root. In equation form, this terminating condition is ``abs(x - x0)\n    <= xtol + rtol * abs(x0)``.\n    \n    The default value ``xtol=2e-12`` may lead to surprising behavior if one\n    expects `toms748` to always compute roots with relative error near machine\n    precision. Care should be taken to select `xtol` for the use case at hand.\n    Setting ``xtol=5e-324``, the smallest subnormal number, will ensure the\n    highest level of accuracy. Larger values of `xtol` may be useful for saving\n    function evaluations when a root is at or near zero in applications where\n    the tiny absolute differences available between floating point numbers near\n    zero are not meaningful.\n    \n    References\n    ----------\n    .. [APS1995]\n       Alefeld, G. E. and Potra, F. A. and Shi, Yixun,\n       *Algorithm 748: Enclosing Zeros of Continuous Functions*,\n       ACM Trans. Math. Softw. Volume 221(1995)\n       doi = {10.1145/210089.210111}\n    \n    Examples\n    --------\n    >>> def f(x):\n    ...     return (x**3 - 1)  # only one real root at x = 1\n    \n    >>> from scipy import optimize\n    >>> root, results = optimize.toms748(f, 0, 2, full_output=True)\n    >>> root\n    1.0\n    >>> results\n          converged: True\n               flag: converged\n     function_calls: 11\n         iterations: 5\n               root: 1.0\n             method: toms748",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7e6278564bae5335b8c2ffbbc27b4ac1a65f4dad3062eb6d3e39c1d6af78ad17",
            "fields": [
                {
                    "id": "mrf3aeci",
                    "encoding": "",
                    "name": "f",
                    "value": "",
                    "defaultValue": "",
                    "description": "Python function returning a scalar. The function :math:`f`\nmust be continuous, and :math:`f(a)` and :math:`f(b)`\nhave opposite signs.",
                    "type": "function",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "28mh600u",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "lower boundary of the search interval",
                    "type": "scalar,",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jae30_2u",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "upper boundary of the search interval",
                    "type": "scalar,",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tsds0x6c",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "containing extra arguments for the function `f`.\n`f` is called by ``f(x, *args)``.",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eq5ysizu",
                    "encoding": "",
                    "name": "k",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "The number of Newton quadratic steps to perform each\niteration. ``k>=1``.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kdwj3uuv",
                    "encoding": "",
                    "name": "xtol",
                    "value": 2e-12,
                    "defaultValue": 2e-12,
                    "description": "The computed root ``x0`` will satisfy ``np.isclose(x, x0,\natol=xtol, rtol=rtol)``, where ``x`` is the exact root. The\nparameter must be positive.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2mstbb48",
                    "encoding": "",
                    "name": "rtol",
                    "value": "np.float64(8.881784197001252e-16)",
                    "defaultValue": "np.float64(8.881784197001252e-16)",
                    "description": "The computed root ``x0`` will satisfy ``np.isclose(x, x0,\natol=xtol, rtol=rtol)``, where ``x`` is the exact root.",
                    "type": "numpy.float64",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "33cymjum",
                    "encoding": "",
                    "name": "maxiter",
                    "value": 100,
                    "defaultValue": 100,
                    "description": "If convergence is not achieved in `maxiter` iterations, an error is\nraised. Must be >= 0.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rsmy6tpq",
                    "encoding": "",
                    "name": "full_output",
                    "value": false,
                    "defaultValue": false,
                    "description": "If `full_output` is False, the root is returned. If `full_output` is\nTrue, the return value is ``(x, r)``, where `x` is the root, and `r` is\na `RootResults` object.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y96j7d6r",
                    "encoding": "",
                    "name": "disp",
                    "value": true,
                    "defaultValue": true,
                    "description": "If True, raise RuntimeError if the algorithm didn't converge.\nOtherwise, the convergence status is recorded in the `RootResults`\nreturn object.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cz2im0lv",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.toms748",
                    "defaultValue": "scipy.optimize.toms748",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "evc2qzcd",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tdtjmsg4",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "9dddstht",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oqxwo4ij",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize",
                    "defaultValue": "scipy.optimize",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "58g6d4mv",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g14a8bbb",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "adxz0kw4",
            "name": "cobyla.fmin_cobyla",
            "description": "Minimize a function using the Constrained Optimization By Linear\n    Approximation (COBYLA) method. This method uses the pure-python implementation\n    of the algorithm from PRIMA.\n    \n    Parameters\n    ----------\n    func : callable\n        Function to minimize. In the form func(x, \\*args).\n    x0 : ndarray\n        Initial guess.\n    cons : sequence\n        Constraint functions; must all be ``>=0`` (a single function\n        if only 1 constraint). Each function takes the parameters `x`\n        as its first argument, and it can return either a single number or\n        an array or list of numbers.\n    args : tuple, optional\n        Extra arguments to pass to function.\n    consargs : tuple, optional\n        Extra arguments to pass to constraint functions (default of None means\n        use same extra arguments as those passed to func).\n        Use ``()`` for no extra arguments.\n    rhobeg : float, optional\n        Reasonable initial changes to the variables.\n    rhoend : float, optional\n        Final accuracy in the optimization (not precisely guaranteed). This\n        is a lower bound on the size of the trust region.\n    disp : {0, 1, 2, 3}, optional\n        Controls the frequency of output; 0 implies no output.\n    maxfun : int, optional\n        Maximum number of function evaluations.\n    catol : float, optional\n        Absolute tolerance for constraint violations.\n    callback : callable, optional\n        Called after each iteration, as ``callback(x)``, where ``x`` is the\n        current parameter vector.\n    \n    Returns\n    -------\n    x : ndarray\n        The argument that minimises `f`.\n    \n    See also\n    --------\n    minimize: Interface to minimization algorithms for multivariate\n        functions. See the 'COBYLA' `method` in particular.\n    \n    Notes\n    -----\n    This algorithm is based on linear approximations to the objective\n    function and each constraint. We briefly describe the algorithm.\n    \n    Suppose the function is being minimized over k variables. At the\n    jth iteration the algorithm has k+1 points v_1, ..., v_(k+1),\n    an approximate solution x_j, and a radius RHO_j.\n    (i.e., linear plus a constant) approximations to the objective\n    function and constraint functions such that their function values\n    agree with the linear approximation on the k+1 points v_1,.., v_(k+1).\n    This gives a linear program to solve (where the linear approximations\n    of the constraint functions are constrained to be non-negative).\n    \n    However, the linear approximations are likely only good\n    approximations near the current simplex, so the linear program is\n    given the further requirement that the solution, which\n    will become x_(j+1), must be within RHO_j from x_j. RHO_j only\n    decreases, never increases. The initial RHO_j is rhobeg and the\n    final RHO_j is rhoend. In this way COBYLA's iterations behave\n    like a trust region algorithm.\n    \n    Additionally, the linear program may be inconsistent, or the\n    approximation may give poor improvement. For details about\n    how these issues are resolved, as well as how the points v_i are\n    updated, refer to the source code or the references below.\n    \n        .. versionchanged:: 1.16.0\n            The original Powell implementation was replaced by a pure\n            Python version from the PRIMA package, with bug fixes and\n            improvements being made.\n    \n    \n    References\n    ----------\n    Powell M.J.D. (1994), \"A direct search optimization method that models\n    the objective and constraint functions by linear interpolation.\", in\n    Advances in Optimization and Numerical Analysis, eds. S. Gomez and\n    J-P Hennart, Kluwer Academic (Dordrecht), pp. 51-67\n    \n    Powell M.J.D. (1998), \"Direct search algorithms for optimization\n    calculations\", Acta Numerica 7, 287-336\n    \n    Powell M.J.D. (2007), \"A view of algorithms for optimization without\n    derivatives\", Cambridge University Technical Report DAMTP 2007/NA03\n    \n    Zhang Z. (2023), \"PRIMA: Reference Implementation for Powell's Methods with\n    Modernization and Amelioration\", https://www.libprima.net,\n    :doi:`10.5281/zenodo.8052654`\n    \n    Examples\n    --------\n    Minimize the objective function f(x,y) = x*y subject\n    to the constraints x**2 + y**2 < 1 and y > 0::\n    \n        >>> def objective(x):\n        ...     return x[0]*x[1]\n        ...\n        >>> def constr1(x):\n        ...     return 1 - (x[0]**2 + x[1]**2)\n        ...\n        >>> def constr2(x):\n        ...     return x[1]\n        ...\n        >>> from scipy.optimize import fmin_cobyla\n        >>> fmin_cobyla(objective, [0.0, 0.1], [constr1, constr2], rhoend=1e-7)\n        array([-0.70710685,  0.70710671])\n    \n    The exact solution is (-sqrt(2)/2, sqrt(2)/2).",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "0624b77d6a93fdbd0f306b448525e8a8c137e1029454879b141b2dbd68295c3d",
            "fields": [
                {
                    "id": "ytnx34ro",
                    "encoding": "",
                    "name": "func",
                    "value": "",
                    "defaultValue": "",
                    "description": "Function to minimize. In the form func(x, \\*args).",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "doemsdkg",
                    "encoding": "",
                    "name": "x0",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial guess.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "knrqyppf",
                    "encoding": "",
                    "name": "cons",
                    "value": "",
                    "defaultValue": "",
                    "description": "Constraint functions; must all be ``>=0`` (a single function\nif only 1 constraint). Each function takes the parameters `x`\nas its first argument, and it can return either a single number or\nan array or list of numbers.",
                    "type": "sequence",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7502nz12",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Extra arguments to pass to function.",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zpigmz04",
                    "encoding": "",
                    "name": "consargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "Extra arguments to pass to constraint functions (default of None means\nuse same extra arguments as those passed to func).\nUse ``()`` for no extra arguments.",
                    "type": "tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pw5byyzg",
                    "encoding": "",
                    "name": "rhobeg",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "Reasonable initial changes to the variables.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wbxe8ula",
                    "encoding": "",
                    "name": "rhoend",
                    "value": 0.0001,
                    "defaultValue": 0.0001,
                    "description": "Final accuracy in the optimization (not precisely guaranteed). This\nis a lower bound on the size of the trust region.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "up1egf6b",
                    "encoding": "",
                    "name": "maxfun",
                    "value": 1000,
                    "defaultValue": 1000,
                    "description": "Maximum number of function evaluations.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ot7ot7za",
                    "encoding": "",
                    "name": "disp",
                    "value": "",
                    "defaultValue": "",
                    "description": "Controls the frequency of output; 0 implies no output.",
                    "type": "{0, 1, 2, 3}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ieqo_sh0",
                    "encoding": "",
                    "name": "catol",
                    "value": 0.0002,
                    "defaultValue": 0.0002,
                    "description": "Absolute tolerance for constraint violations.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jtfs90be",
                    "encoding": "",
                    "name": "callback",
                    "value": "",
                    "defaultValue": "",
                    "description": "Called after each iteration, as ``callback(x)``, where ``x`` is the\ncurrent parameter vector.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ohsb5wl4",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.cobyla.fmin_cobyla",
                    "defaultValue": "scipy.optimize.cobyla.fmin_cobyla",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fveh_4de",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2qqxjpkr",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "x6e18_9i",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f30yartb",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize.cobyla",
                    "defaultValue": "scipy.optimize.cobyla",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5vybc563",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ezczvp_r",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "rikhk5bl",
            "name": "lbfgsb.fmin_l_bfgs_b",
            "description": "Minimize a function func using the L-BFGS-B algorithm.\n    \n    Parameters\n    ----------\n    func : callable f(x,*args)\n        Function to minimize.\n    x0 : ndarray\n        Initial guess.\n    fprime : callable fprime(x,*args), optional\n        The gradient of `func`. If None, then `func` returns the function\n        value and the gradient (``f, g = func(x, *args)``), unless\n        `approx_grad` is True in which case `func` returns only ``f``.\n    args : sequence, optional\n        Arguments to pass to `func` and `fprime`.\n    approx_grad : bool, optional\n        Whether to approximate the gradient numerically (in which case\n        `func` returns only the function value).\n    bounds : list, optional\n        ``(min, max)`` pairs for each element in ``x``, defining\n        the bounds on that parameter. Use None or +-inf for one of ``min`` or\n        ``max`` when there is no bound in that direction.\n    m : int, optional\n        The maximum number of variable metric corrections\n        used to define the limited memory matrix. (The limited memory BFGS\n        method does not store the full hessian but uses this many terms in an\n        approximation to it.)\n    factr : float, optional\n        The iteration stops when\n        ``(f^k - f^{k+1})/max{|f^k|,|f^{k+1}|,1} <= factr * eps``,\n        where ``eps`` is the machine precision, which is automatically\n        generated by the code. Typical values for `factr` are: 1e12 for\n        low accuracy; 1e7 for moderate accuracy; 10.0 for extremely\n        high accuracy. See Notes for relationship to `ftol`, which is exposed\n        (instead of `factr`) by the `scipy.optimize.minimize` interface to\n        L-BFGS-B.\n    pgtol : float, optional\n        The iteration will stop when\n        ``max{|proj g_i | i = 1, ..., n} <= pgtol``\n        where ``proj g_i`` is the i-th component of the projected gradient.\n    epsilon : float, optional\n        Step size used when `approx_grad` is True, for numerically\n        calculating the gradient\n    iprint : int, optional\n        Deprecated option that previously controlled the text printed on the\n        screen during the problem solution. Now the code does not emit any\n        output and this keyword has no function.\n    \n        .. deprecated:: 1.15.0\n            This keyword is deprecated and will be removed from SciPy 1.18.0.\n    \n    disp : int, optional\n        Deprecated option that previously controlled the text printed on the\n        screen during the problem solution. Now the code does not emit any\n        output and this keyword has no function.\n    \n        .. deprecated:: 1.15.0\n            This keyword is deprecated and will be removed from SciPy 1.18.0.\n    \n    maxfun : int, optional\n        Maximum number of function evaluations. Note that this function\n        may violate the limit because of evaluating gradients by numerical\n        differentiation.\n    maxiter : int, optional\n        Maximum number of iterations.\n    callback : callable, optional\n        Called after each iteration, as ``callback(xk)``, where ``xk`` is the\n        current parameter vector.\n    maxls : int, optional\n        Maximum number of line search steps (per iteration). Default is 20.\n    \n    Returns\n    -------\n    x : array_like\n        Estimated position of the minimum.\n    f : float\n        Value of `func` at the minimum.\n    d : dict\n        Information dictionary.\n    \n        * d['warnflag'] is\n    \n          - 0 if converged,\n          - 1 if too many function evaluations or too many iterations,\n          - 2 if stopped for another reason, given in d['task']\n    \n        * d['grad'] is the gradient at the minimum (should be 0 ish)\n        * d['funcalls'] is the number of function calls made.\n        * d['nit'] is the number of iterations.\n    \n    See also\n    --------\n    minimize: Interface to minimization algorithms for multivariate\n        functions. See the 'L-BFGS-B' `method` in particular. Note that the\n        `ftol` option is made available via that interface, while `factr` is\n        provided via this interface, where `factr` is the factor multiplying\n        the default machine floating-point precision to arrive at `ftol`:\n        ``ftol = factr * numpy.finfo(float).eps``.\n    \n    Notes\n    -----\n    SciPy uses a C-translated and modified version of the Fortran code,\n    L-BFGS-B v3.0 (released April 25, 2011, BSD-3 licensed). Original Fortran\n    version was written by Ciyou Zhu, Richard Byrd, Jorge Nocedal and,\n    Jose Luis Morales.\n    \n    References\n    ----------\n    * R. H. Byrd, P. Lu and J. Nocedal. A Limited Memory Algorithm for Bound\n      Constrained Optimization, (1995), SIAM Journal on Scientific and\n      Statistical Computing, 16, 5, pp. 1190-1208.\n    * C. Zhu, R. H. Byrd and J. Nocedal. L-BFGS-B: Algorithm 778: L-BFGS-B,\n      FORTRAN routines for large scale bound constrained optimization (1997),\n      ACM Transactions on Mathematical Software, 23, 4, pp. 550 - 560.\n    * J.L. Morales and J. Nocedal. L-BFGS-B: Remark on Algorithm 778: L-BFGS-B,\n      FORTRAN routines for large scale bound constrained optimization (2011),\n      ACM Transactions on Mathematical Software, 38, 1.\n    \n    Examples\n    --------\n    Solve a linear regression problem via `fmin_l_bfgs_b`. To do this, first we\n    define an objective function ``f(m, b) = (y - y_model)**2``, where `y`\n    describes the observations and `y_model` the prediction of the linear model\n    as ``y_model = m*x + b``. The bounds for the parameters, ``m`` and ``b``,\n    are arbitrarily chosen as ``(0,5)`` and ``(5,10)`` for this example.\n    \n    >>> import numpy as np\n    >>> from scipy.optimize import fmin_l_bfgs_b\n    >>> X = np.arange(0, 10, 1)\n    >>> M = 2\n    >>> B = 3\n    >>> Y = M * X + B\n    >>> def func(parameters, *args):\n    ...     x = args[0]\n    ...     y = args[1]\n    ...     m, b = parameters\n    ...     y_model = m*x + b\n    ...     error = sum(np.power((y - y_model), 2))\n    ...     return error\n    \n    >>> initial_values = np.array([0.0, 1.0])\n    \n    >>> x_opt, f_opt, info = fmin_l_bfgs_b(func, x0=initial_values, args=(X, Y),\n    ...                                    approx_grad=True)\n    >>> x_opt, f_opt\n    array([1.99999999, 3.00000006]), 1.7746231151323805e-14  # may vary\n    \n    The optimized parameters in ``x_opt`` agree with the ground truth parameters\n    ``m`` and ``b``. Next, let us perform a bound constrained optimization using\n    the `bounds` parameter.\n    \n    >>> bounds = [(0, 5), (5, 10)]\n    >>> x_opt, f_op, info = fmin_l_bfgs_b(func, x0=initial_values, args=(X, Y),\n    ...                                   approx_grad=True, bounds=bounds)\n    >>> x_opt, f_opt\n    array([1.65990508, 5.31649385]), 15.721334516453945  # may vary",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c9886e907536f59523f37a158be4347f4975c1311b3cec7f0df1959211ec399f",
            "fields": [
                {
                    "id": "65zgi7nn",
                    "encoding": "",
                    "name": "func",
                    "value": "",
                    "defaultValue": "",
                    "description": "Function to minimize.",
                    "type": "callable f(x,*args)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ssnui2f1",
                    "encoding": "",
                    "name": "x0",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial guess.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mvngwyzf",
                    "encoding": "",
                    "name": "fprime",
                    "value": "",
                    "defaultValue": "",
                    "description": "The gradient of `func`. If None, then `func` returns the function\nvalue and the gradient (``f, g = func(x, *args)``), unless\n`approx_grad` is True in which case `func` returns only ``f``.",
                    "type": "callable fprime(x,*args)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rkftgsey",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Arguments to pass to `func` and `fprime`.",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jcnzalmk",
                    "encoding": "",
                    "name": "approx_grad",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Whether to approximate the gradient numerically (in which case\n`func` returns only the function value).",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1gi1ixbx",
                    "encoding": "",
                    "name": "bounds",
                    "value": "",
                    "defaultValue": "",
                    "description": "``(min, max)`` pairs for each element in ``x``, defining\nthe bounds on that parameter. Use None or +-inf for one of ``min`` or\n``max`` when there is no bound in that direction.",
                    "type": "list",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b5rulc0q",
                    "encoding": "",
                    "name": "m",
                    "value": 10,
                    "defaultValue": 10,
                    "description": "The maximum number of variable metric corrections\nused to define the limited memory matrix. (The limited memory BFGS\nmethod does not store the full hessian but uses this many terms in an\napproximation to it.)",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "feyzxsb2",
                    "encoding": "",
                    "name": "factr",
                    "value": 10000000.0,
                    "defaultValue": 10000000.0,
                    "description": "The iteration stops when\n``(f^k - f^{k+1})/max{|f^k|,|f^{k+1}|,1} <= factr * eps``,\nwhere ``eps`` is the machine precision, which is automatically\ngenerated by the code. Typical values for `factr` are: 1e12 for\nlow accuracy; 1e7 for moderate accuracy; 10.0 for extremely\nhigh accuracy. See Notes for relationship to `ftol`, which is exposed\n(instead of `factr`) by the `scipy.optimize.minimize` interface to\nL-BFGS-B.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dz0co4np",
                    "encoding": "",
                    "name": "pgtol",
                    "value": 1e-05,
                    "defaultValue": 1e-05,
                    "description": "The iteration will stop when\n``max{|proj g_i | i = 1, ..., n} <= pgtol``\nwhere ``proj g_i`` is the i-th component of the projected gradient.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t2pdget3",
                    "encoding": "",
                    "name": "epsilon",
                    "value": 1e-08,
                    "defaultValue": 1e-08,
                    "description": "Step size used when `approx_grad` is True, for numerically\ncalculating the gradient",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ixhfi3uf",
                    "encoding": "",
                    "name": "iprint",
                    "value": "builtins.object",
                    "defaultValue": "builtins.object",
                    "description": "Deprecated option that previously controlled the text printed on the\nscreen during the problem solution. Now the code does not emit any\noutput and this keyword has no function.\n\n.. deprecated:: 1.15.0\n    This keyword is deprecated and will be removed from SciPy 1.18.0.",
                    "type": "builtins.object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "haaesxoj",
                    "encoding": "",
                    "name": "maxfun",
                    "value": 15000,
                    "defaultValue": 15000,
                    "description": "Maximum number of function evaluations. Note that this function\nmay violate the limit because of evaluating gradients by numerical\ndifferentiation.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cf752t_t",
                    "encoding": "",
                    "name": "maxiter",
                    "value": 15000,
                    "defaultValue": 15000,
                    "description": "Maximum number of iterations.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gty62k09",
                    "encoding": "",
                    "name": "disp",
                    "value": "builtins.object",
                    "defaultValue": "builtins.object",
                    "description": "Deprecated option that previously controlled the text printed on the\nscreen during the problem solution. Now the code does not emit any\noutput and this keyword has no function.\n\n.. deprecated:: 1.15.0\n    This keyword is deprecated and will be removed from SciPy 1.18.0.",
                    "type": "builtins.object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "po2mvr09",
                    "encoding": "",
                    "name": "callback",
                    "value": "",
                    "defaultValue": "",
                    "description": "Called after each iteration, as ``callback(xk)``, where ``xk`` is the\ncurrent parameter vector.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ax6n22x_",
                    "encoding": "",
                    "name": "maxls",
                    "value": 20,
                    "defaultValue": 20,
                    "description": "Maximum number of line search steps (per iteration). Default is 20.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fz83dw36",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.lbfgsb.fmin_l_bfgs_b",
                    "defaultValue": "scipy.optimize.lbfgsb.fmin_l_bfgs_b",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t9wcbw5t",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zwrvt2e1",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "3dw47utf",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2sl472tm",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize.lbfgsb",
                    "defaultValue": "scipy.optimize.lbfgsb",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zncmmues",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kmaok6nm",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "1n81kvzk",
            "name": "lbfgsb.zeros",
            "description": "Return a new array of given shape and type, filled with zeros.\n\nParameters\n----------\nshape : int or tuple of ints\n    Shape of the new array, e.g., ``(2, 3)`` or ``2``.\ndtype : data-type, optional\n    The desired data-type for the array, e.g., `numpy.int8`.  Default is\n    `numpy.float64`.\norder : {'C', 'F'}, optional, default: 'C'\n    Whether to store multi-dimensional data in row-major\n    (C-style) or column-major (Fortran-style) order in\n    memory.\nlike : array_like, optional\n    Reference object to allow the creation of arrays which are not\n    NumPy arrays. If an array-like passed in as ``like`` supports\n    the ``__array_function__`` protocol, the result will be defined\n    by it. In this case, it ensures the creation of an array object\n    compatible with that passed in via this argument.\n\n    .. versionadded:: 1.20.0\n\nReturns\n-------\nout : ndarray\n    Array of zeros with the given shape, dtype, and order.\n\nSee Also\n--------\nzeros_like : Return an array of zeros with shape and type of input.\nempty : Return a new uninitialized array.\nones : Return a new array setting values to one.\nfull : Return a new array of given shape filled with value.\n\nExamples\n--------\n>>> import numpy as np\n>>> np.zeros(5)\narray([ 0.,  0.,  0.,  0.,  0.])\n\n>>> np.zeros((5,), dtype=int)\narray([0, 0, 0, 0, 0])\n\n>>> np.zeros((2, 1))\narray([[ 0.],\n       [ 0.]])\n\n>>> s = (2,2)\n>>> np.zeros(s)\narray([[ 0.,  0.],\n       [ 0.,  0.]])\n\n>>> np.zeros((2,), dtype=[('x', 'i4'), ('y', 'i4')]) # custom dtype\narray([(0, 0), (0, 0)],\n      dtype=[('x', '<i4'), ('y', '<i4')])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e0063e639993dadece43b36f5f1b6eace28d15cd7ecdcefb19d9a929b44ab9e6",
            "fields": [
                {
                    "id": "d3kgmrw5",
                    "encoding": "",
                    "name": "shape",
                    "value": "",
                    "defaultValue": "",
                    "description": "Shape of the new array, e.g., ``(2, 3)`` or ``2``.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tymrj8b7",
                    "encoding": "",
                    "name": "dtype",
                    "value": "float",
                    "defaultValue": "float",
                    "description": "The desired data-type for the array, e.g., `numpy.int8`.  Default is\n`numpy.float64`.",
                    "type": "typing.Any",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ay66qa5n",
                    "encoding": "",
                    "name": "order",
                    "value": "'C'",
                    "defaultValue": "'C'",
                    "description": "Whether to store multi-dimensional data in row-major\n(C-style) or column-major (Fortran-style) order in\nmemory.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cweljbti",
                    "encoding": "",
                    "name": "like",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. versionadded:: 1.20.0",
                    "type": "typing.Any",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5h9qy4yw",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.lbfgsb.zeros",
                    "defaultValue": "scipy.optimize.lbfgsb.zeros",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ve8heqe8",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fhztd_pm",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "f69ub5za",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2wehj_19",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize.lbfgsb",
                    "defaultValue": "scipy.optimize.lbfgsb",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "esmes5n2",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m30pbbh9",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "qe6f4vfd",
            "name": "line_search_wolfe1",
            "description": "As `scalar_search_wolfe1` but do a line search to direction `pk`\n    \n    Parameters\n    ----------\n    f : callable\n        Function `f(x)`\n    fprime : callable\n        Gradient of `f`\n    xk : array_like\n        Current point\n    pk : array_like\n        Search direction\n    gfk : array_like, optional\n        Gradient of `f` at point `xk`\n    old_fval : float, optional\n        Value of `f` at point `xk`\n    old_old_fval : float, optional\n        Value of `f` at point preceding `xk`\n    \n    The rest of the parameters are the same as for `scalar_search_wolfe1`.\n    \n    Returns\n    -------\n    stp, f_count, g_count, fval, old_fval\n        As in `line_search_wolfe1`\n    gval : array\n        Gradient of `f` at the final point\n    \n    Notes\n    -----\n    Parameters `c1` and `c2` must satisfy ``0 < c1 < c2 < 1``.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "095f6b3a329196eafd3c9d13e7c94d171aba4967cef17fef94eb4b0888b1c58c",
            "fields": [
                {
                    "id": "f1h2w3m7",
                    "encoding": "",
                    "name": "f",
                    "value": "",
                    "defaultValue": "",
                    "description": "Function `f(x)`",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7loi_quz",
                    "encoding": "",
                    "name": "fprime",
                    "value": "",
                    "defaultValue": "",
                    "description": "Gradient of `f`",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j90vfkdg",
                    "encoding": "",
                    "name": "xk",
                    "value": "",
                    "defaultValue": "",
                    "description": "Current point",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "umsn4scw",
                    "encoding": "",
                    "name": "pk",
                    "value": "",
                    "defaultValue": "",
                    "description": "Search direction",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t0mggd67",
                    "encoding": "",
                    "name": "gfk",
                    "value": "",
                    "defaultValue": "",
                    "description": "Gradient of `f` at point `xk`",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a8guvuyf",
                    "encoding": "",
                    "name": "old_fval",
                    "value": "",
                    "defaultValue": "",
                    "description": "Value of `f` at point `xk`",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e3187x57",
                    "encoding": "",
                    "name": "old_old_fval",
                    "value": "",
                    "defaultValue": "",
                    "description": "Value of `f` at point preceding `xk`",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d_3f7_kb",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zot8h1sx",
                    "encoding": "",
                    "name": "c1",
                    "value": 0.0001,
                    "defaultValue": 0.0001,
                    "description": "",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zh0u1plc",
                    "encoding": "",
                    "name": "c2",
                    "value": 0.9,
                    "defaultValue": 0.9,
                    "description": "",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7iaywuex",
                    "encoding": "",
                    "name": "amax",
                    "value": 50,
                    "defaultValue": 50,
                    "description": "",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b35zkt85",
                    "encoding": "",
                    "name": "amin",
                    "value": 1e-08,
                    "defaultValue": 1e-08,
                    "description": "",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gz05lbmj",
                    "encoding": "",
                    "name": "xtol",
                    "value": 1e-14,
                    "defaultValue": 1e-14,
                    "description": "",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dvw52a55",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.linesearch.line_search_wolfe1",
                    "defaultValue": "scipy.optimize.linesearch.line_search_wolfe1",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "plmrlxsa",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n_on82hj",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "_59krcbu",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bxjfv88i",
                    "encoding": "",
                    "name": "base_name",
                    "value": "",
                    "defaultValue": "",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9_6_1m1s",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "48tp4nxr",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "qh5vo8do",
            "name": "minpack.curve_fit",
            "description": "Use non-linear least squares to fit a function, f, to data.\n    \n    Assumes ``ydata = f(xdata, *params) + eps``.\n    \n    Parameters\n    ----------\n    f : callable\n        The model function, f(x, ...). It must take the independent\n        variable as the first argument and the parameters to fit as\n        separate remaining arguments.\n    xdata : array_like\n        The independent variable where the data is measured.\n        Should usually be an M-length sequence or an (k,M)-shaped array for\n        functions with k predictors, and each element should be float\n        convertible if it is an array like object.\n    ydata : array_like\n        The dependent data, a length M array - nominally ``f(xdata, ...)``.\n    p0 : array_like, optional\n        Initial guess for the parameters (length N). If None, then the\n        initial values will all be 1 (if the number of parameters for the\n        function can be determined using introspection, otherwise a\n        ValueError is raised).\n    sigma : None or scalar or M-length sequence or MxM array, optional\n        Determines the uncertainty in `ydata`. If we define residuals as\n        ``r = ydata - f(xdata, *popt)``, then the interpretation of `sigma`\n        depends on its number of dimensions:\n    \n        - A scalar or 1-D `sigma` should contain values of standard deviations of\n          errors in `ydata`. In this case, the optimized function is\n          ``chisq = sum((r / sigma) ** 2)``.\n    \n        - A 2-D `sigma` should contain the covariance matrix of\n          errors in `ydata`. In this case, the optimized function is\n          ``chisq = r.T @ inv(sigma) @ r``.\n    \n          .. versionadded:: 0.19\n    \n        None (default) is equivalent of 1-D `sigma` filled with ones.\n    absolute_sigma : bool, optional\n        If True, `sigma` is used in an absolute sense and the estimated parameter\n        covariance `pcov` reflects these absolute values.\n    \n        If False (default), only the relative magnitudes of the `sigma` values matter.\n        The returned parameter covariance matrix `pcov` is based on scaling\n        `sigma` by a constant factor. This constant is set by demanding that the\n        reduced `chisq` for the optimal parameters `popt` when using the\n        *scaled* `sigma` equals unity. In other words, `sigma` is scaled to\n        match the sample variance of the residuals after the fit. Default is False.\n        Mathematically,\n        ``pcov(absolute_sigma=False) = pcov(absolute_sigma=True) * chisq(popt)/(M-N)``\n    check_finite : bool, optional\n        If True, check that the input arrays do not contain nans of infs,\n        and raise a ValueError if they do. Setting this parameter to\n        False may silently produce nonsensical results if the input arrays\n        do contain nans. Default is True if `nan_policy` is not specified\n        explicitly and False otherwise.\n    bounds : 2-tuple of array_like or `Bounds`, optional\n        Lower and upper bounds on parameters. Defaults to no bounds.\n        There are two ways to specify the bounds:\n    \n        - Instance of `Bounds` class.\n    \n        - 2-tuple of array_like: Each element of the tuple must be either\n          an array with the length equal to the number of parameters, or a\n          scalar (in which case the bound is taken to be the same for all\n          parameters). Use ``np.inf`` with an appropriate sign to disable\n          bounds on all or some parameters.\n    \n    method : {'lm', 'trf', 'dogbox'}, optional\n        Method to use for optimization. See `least_squares` for more details.\n        Default is 'lm' for unconstrained problems and 'trf' if `bounds` are\n        provided. The method 'lm' won't work when the number of observations\n        is less than the number of variables, use 'trf' or 'dogbox' in this\n        case.\n    \n        .. versionadded:: 0.17\n    jac : callable, string or None, optional\n        Function with signature ``jac(x, ...)`` which computes the Jacobian\n        matrix of the model function with respect to parameters as a dense\n        array_like structure. It will be scaled according to provided `sigma`.\n        If None (default), the Jacobian will be estimated numerically.\n        String keywords for 'trf' and 'dogbox' methods can be used to select\n        a finite difference scheme, see `least_squares`.\n    \n        .. versionadded:: 0.18\n    full_output : boolean, optional\n        If True, this function returns additional information: `infodict`,\n        `mesg`, and `ier`.\n    \n        .. versionadded:: 1.9\n    nan_policy : {'raise', 'omit', None}, optional\n        Defines how to handle when input contains nan.\n        The following options are available (default is None):\n    \n        * 'raise': throws an error\n        * 'omit': performs the calculations ignoring nan values\n        * None: no special handling of NaNs is performed\n          (except what is done by check_finite); the behavior when NaNs\n          are present is implementation-dependent and may change.\n    \n        Note that if this value is specified explicitly (not None),\n        `check_finite` will be set as False.\n    \n        .. versionadded:: 1.11\n    **kwargs\n        Keyword arguments passed to `leastsq` for ``method='lm'`` or\n        `least_squares` otherwise.\n    \n    Returns\n    -------\n    popt : array\n        Optimal values for the parameters so that the sum of the squared\n        residuals of ``f(xdata, *popt) - ydata`` is minimized.\n    pcov : 2-D array\n        The estimated approximate covariance of popt. The diagonals provide\n        the variance of the parameter estimate. To compute one standard\n        deviation errors on the parameters, use\n        ``perr = np.sqrt(np.diag(pcov))``. Note that the relationship between\n        `cov` and parameter error estimates is derived based on a linear\n        approximation to the model function around the optimum [1]_.\n        When this approximation becomes inaccurate, `cov` may not provide an\n        accurate measure of uncertainty.\n    \n        How the `sigma` parameter affects the estimated covariance\n        depends on `absolute_sigma` argument, as described above.\n    \n        If the Jacobian matrix at the solution doesn't have a full rank, then\n        'lm' method returns a matrix filled with ``np.inf``, on the other hand\n        'trf'  and 'dogbox' methods use Moore-Penrose pseudoinverse to compute\n        the covariance matrix. Covariance matrices with large condition numbers\n        (e.g. computed with `numpy.linalg.cond`) may indicate that results are\n        unreliable.\n    infodict : dict (returned only if `full_output` is True)\n        a dictionary of optional outputs with the keys:\n    \n        ``nfev``\n            The number of function calls. Methods 'trf' and 'dogbox' do not\n            count function calls for numerical Jacobian approximation,\n            as opposed to 'lm' method.\n        ``fvec``\n            The residual values evaluated at the solution, for a 1-D `sigma`\n            this is ``(f(x, *popt) - ydata)/sigma``.\n        ``fjac``\n            A permutation of the R matrix of a QR\n            factorization of the final approximate\n            Jacobian matrix, stored column wise.\n            Together with ipvt, the covariance of the\n            estimate can be approximated.\n            Method 'lm' only provides this information.\n        ``ipvt``\n            An integer array of length N which defines\n            a permutation matrix, p, such that\n            fjac*p = q*r, where r is upper triangular\n            with diagonal elements of nonincreasing\n            magnitude. Column j of p is column ipvt(j)\n            of the identity matrix.\n            Method 'lm' only provides this information.\n        ``qtf``\n            The vector (transpose(q) * fvec).\n            Method 'lm' only provides this information.\n    \n        .. versionadded:: 1.9\n    mesg : str (returned only if `full_output` is True)\n        A string message giving information about the solution.\n    \n        .. versionadded:: 1.9\n    ier : int (returned only if `full_output` is True)\n        An integer flag. If it is equal to 1, 2, 3 or 4, the solution was\n        found. Otherwise, the solution was not found. In either case, the\n        optional output variable `mesg` gives more information.\n    \n        .. versionadded:: 1.9\n    \n    Raises\n    ------\n    ValueError\n        if either `ydata` or `xdata` contain NaNs, or if incompatible options\n        are used.\n    \n    RuntimeError\n        if the least-squares minimization fails.\n    \n    OptimizeWarning\n        if covariance of the parameters can not be estimated.\n    \n    See Also\n    --------\n    least_squares : Minimize the sum of squares of nonlinear functions.\n    scipy.stats.linregress : Calculate a linear least squares regression for\n                             two sets of measurements.\n    \n    Notes\n    -----\n    Users should ensure that inputs `xdata`, `ydata`, and the output of `f`\n    are ``float64``, or else the optimization may return incorrect results.\n    \n    With ``method='lm'``, the algorithm uses the Levenberg-Marquardt algorithm\n    through `leastsq`. Note that this algorithm can only deal with\n    unconstrained problems.\n    \n    Box constraints can be handled by methods 'trf' and 'dogbox'. Refer to\n    the docstring of `least_squares` for more information.\n    \n    Parameters to be fitted must have similar scale. Differences of multiple\n    orders of magnitude can lead to incorrect results. For the 'trf' and\n    'dogbox' methods, the `x_scale` keyword argument can be used to scale\n    the parameters.\n    \n    `curve_fit` is for local optimization of parameters to minimize the sum of squares\n    of residuals. For global optimization, other choices of objective function, and\n    other advanced features, consider using SciPy's :ref:`tutorial_optimize_global`\n    tools or the `LMFIT <https://lmfit.github.io/lmfit-py/index.html>`_ package.\n    \n    References\n    ----------\n    .. [1] K. Vugrin et al. Confidence region estimation techniques for nonlinear\n           regression in groundwater flow: Three case studies. Water Resources\n           Research, Vol. 43, W03423, :doi:`10.1029/2005WR004804`\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> import matplotlib.pyplot as plt\n    >>> from scipy.optimize import curve_fit\n    \n    >>> def func(x, a, b, c):\n    ...     return a * np.exp(-b * x) + c\n    \n    Define the data to be fit with some noise:\n    \n    >>> xdata = np.linspace(0, 4, 50)\n    >>> y = func(xdata, 2.5, 1.3, 0.5)\n    >>> rng = np.random.default_rng()\n    >>> y_noise = 0.2 * rng.normal(size=xdata.size)\n    >>> ydata = y + y_noise\n    >>> plt.plot(xdata, ydata, 'b-', label='data')\n    \n    Fit for the parameters a, b, c of the function `func`:\n    \n    >>> popt, pcov = curve_fit(func, xdata, ydata)\n    >>> popt\n    array([2.56274217, 1.37268521, 0.47427475])\n    >>> plt.plot(xdata, func(xdata, *popt), 'r-',\n    ...          label='fit: a=%5.3f, b=%5.3f, c=%5.3f' % tuple(popt))\n    \n    Constrain the optimization to the region of ``0 <= a <= 3``,\n    ``0 <= b <= 1`` and ``0 <= c <= 0.5``:\n    \n    >>> popt, pcov = curve_fit(func, xdata, ydata, bounds=(0, [3., 1., 0.5]))\n    >>> popt\n    array([2.43736712, 1.        , 0.34463856])\n    >>> plt.plot(xdata, func(xdata, *popt), 'g--',\n    ...          label='fit: a=%5.3f, b=%5.3f, c=%5.3f' % tuple(popt))\n    \n    >>> plt.xlabel('x')\n    >>> plt.ylabel('y')\n    >>> plt.legend()\n    >>> plt.show()\n    \n    For reliable results, the model `func` should not be overparametrized;\n    redundant parameters can cause unreliable covariance matrices and, in some\n    cases, poorer quality fits. As a quick check of whether the model may be\n    overparameterized, calculate the condition number of the covariance matrix:\n    \n    >>> np.linalg.cond(pcov)\n    34.571092161547405  # may vary\n    \n    The value is small, so it does not raise much concern. If, however, we were\n    to add a fourth parameter ``d`` to `func` with the same effect as ``a``:\n    \n    >>> def func2(x, a, b, c, d):\n    ...     return a * d * np.exp(-b * x) + c  # a and d are redundant\n    >>> popt, pcov = curve_fit(func2, xdata, ydata)\n    >>> np.linalg.cond(pcov)\n    1.13250718925596e+32  # may vary\n    \n    Such a large value is cause for concern. The diagonal elements of the\n    covariance matrix, which is related to uncertainty of the fit, gives more\n    information:\n    \n    >>> np.diag(pcov)\n    array([1.48814742e+29, 3.78596560e-02, 5.39253738e-03, 2.76417220e+28])  # may vary\n    \n    Note that the first and last terms are much larger than the other elements,\n    suggesting that the optimal values of these parameters are ambiguous and\n    that only one of these parameters is needed in the model.\n    \n    If the optimal parameters of `f` differ by multiple orders of magnitude, the\n    resulting fit can be inaccurate. Sometimes, `curve_fit` can fail to find any\n    results:\n    \n    >>> ydata = func(xdata, 500000, 0.01, 15)\n    >>> try:\n    ...     popt, pcov = curve_fit(func, xdata, ydata, method = 'trf')\n    ... except RuntimeError as e:\n    ...     print(e)\n    Optimal parameters not found: The maximum number of function evaluations is\n    exceeded.\n    \n    If parameter scale is roughly known beforehand, it can be defined in\n    `x_scale` argument:\n    \n    >>> popt, pcov = curve_fit(func, xdata, ydata, method = 'trf',\n    ...                        x_scale = [1000, 1, 1])\n    >>> popt\n    array([5.00000000e+05, 1.00000000e-02, 1.49999999e+01])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4a6a9a6e0b504d8e732e23302bd2452bfc2589da3a57cfef5377fe8c0b6694db",
            "fields": [
                {
                    "id": "avryfjff",
                    "encoding": "",
                    "name": "f",
                    "value": "",
                    "defaultValue": "",
                    "description": "The model function, f(x, ...). It must take the independent\nvariable as the first argument and the parameters to fit as\nseparate remaining arguments.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a9kn27_g",
                    "encoding": "",
                    "name": "xdata",
                    "value": "",
                    "defaultValue": "",
                    "description": "The independent variable where the data is measured.\nShould usually be an M-length sequence or an (k,M)-shaped array for\nfunctions with k predictors, and each element should be float\nconvertible if it is an array like object.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y12zhjqn",
                    "encoding": "",
                    "name": "ydata",
                    "value": "",
                    "defaultValue": "",
                    "description": "The dependent data, a length M array - nominally ``f(xdata, ...)``.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "__uhhd68",
                    "encoding": "",
                    "name": "p0",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial guess for the parameters (length N). If None, then the\ninitial values will all be 1 (if the number of parameters for the\nfunction can be determined using introspection, otherwise a\nValueError is raised).",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zo5xdirm",
                    "encoding": "",
                    "name": "sigma",
                    "value": "",
                    "defaultValue": "",
                    "description": "Determines the uncertainty in `ydata`. If we define residuals as\n``r = ydata - f(xdata, *popt)``, then the interpretation of `sigma`\ndepends on its number of dimensions:\n\n- A scalar or 1-D `sigma` should contain values of standard deviations of\n  errors in `ydata`. In this case, the optimized function is\n  ``chisq = sum((r / sigma) ** 2)``.\n\n- A 2-D `sigma` should contain the covariance matrix of\n  errors in `ydata`. In this case, the optimized function is\n  ``chisq = r.T @ inv(sigma) @ r``.\n\n  .. versionadded:: 0.19\n\nNone (default) is equivalent of 1-D `sigma` filled with ones.",
                    "type": "None or scalar or M-length sequence or MxM array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i2_fifp_",
                    "encoding": "",
                    "name": "absolute_sigma",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, `sigma` is used in an absolute sense and the estimated parameter\ncovariance `pcov` reflects these absolute values.\n\nIf False (default), only the relative magnitudes of the `sigma` values matter.\nThe returned parameter covariance matrix `pcov` is based on scaling\n`sigma` by a constant factor. This constant is set by demanding that the\nreduced `chisq` for the optimal parameters `popt` when using the\n*scaled* `sigma` equals unity. In other words, `sigma` is scaled to\nmatch the sample variance of the residuals after the fit. Default is False.\nMathematically,\n``pcov(absolute_sigma=False) = pcov(absolute_sigma=True) * chisq(popt)/(M-N)``",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v6ibbc_s",
                    "encoding": "",
                    "name": "check_finite",
                    "value": "",
                    "defaultValue": "",
                    "description": "If True, check that the input arrays do not contain nans of infs,\nand raise a ValueError if they do. Setting this parameter to\nFalse may silently produce nonsensical results if the input arrays\ndo contain nans. Default is True if `nan_policy` is not specified\nexplicitly and False otherwise.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ag8vdru3",
                    "encoding": "",
                    "name": "bounds",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Lower and upper bounds on parameters. Defaults to no bounds.\nThere are two ways to specify the bounds:\n\n- Instance of `Bounds` class.\n\n- 2-tuple of array_like: Each element of the tuple must be either\n  an array with the length equal to the number of parameters, or a\n  scalar (in which case the bound is taken to be the same for all\n  parameters). Use ``np.inf`` with an appropriate sign to disable\n  bounds on all or some parameters.",
                    "type": "builtins.tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h42vwm18",
                    "encoding": "",
                    "name": "method",
                    "value": "",
                    "defaultValue": "",
                    "description": "Method to use for optimization. See `least_squares` for more details.\nDefault is 'lm' for unconstrained problems and 'trf' if `bounds` are\nprovided. The method 'lm' won't work when the number of observations\nis less than the number of variables, use 'trf' or 'dogbox' in this\ncase.\n\n.. versionadded:: 0.17",
                    "type": "{'lm', 'trf', 'dogbox'}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ok5w_odf",
                    "encoding": "",
                    "name": "jac",
                    "value": "",
                    "defaultValue": "",
                    "description": "Function with signature ``jac(x, ...)`` which computes the Jacobian\nmatrix of the model function with respect to parameters as a dense\narray_like structure. It will be scaled according to provided `sigma`.\nIf None (default), the Jacobian will be estimated numerically.\nString keywords for 'trf' and 'dogbox' methods can be used to select\na finite difference scheme, see `least_squares`.\n\n.. versionadded:: 0.18",
                    "type": "callable, string or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g6s_6afr",
                    "encoding": "",
                    "name": "full_output",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, this function returns additional information: `infodict`,\n`mesg`, and `ier`.\n\n.. versionadded:: 1.9",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "owehkioo",
                    "encoding": "",
                    "name": "nan_policy",
                    "value": "",
                    "defaultValue": "",
                    "description": "Defines how to handle when input contains nan.\nThe following options are available (default is None):\n\n* 'raise': throws an error\n* 'omit': performs the calculations ignoring nan values\n* None: no special handling of NaNs is performed\n  (except what is done by check_finite); the behavior when NaNs\n  are present is implementation-dependent and may change.\n\nNote that if this value is specified explicitly (not None),\n`check_finite` will be set as False.\n\n.. versionadded:: 1.11",
                    "type": "{'raise', 'omit', None}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c8tyzhg7",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3nooy_dg",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.minpack.curve_fit",
                    "defaultValue": "scipy.optimize.minpack.curve_fit",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d55k2ok4",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q4d0i05_",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "0j9hqs7h",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gwqb575f",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize.minpack",
                    "defaultValue": "scipy.optimize.minpack",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r93ndm1n",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jbxigbjo",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "c47d5xg0",
            "name": "minpack.fixed_point",
            "description": "Find a fixed point of the function.\n    \n    Given a function of one or more variables and a starting point, find a\n    fixed point of the function: i.e., where ``func(x0) == x0``.\n    \n    Parameters\n    ----------\n    func : function\n        Function to evaluate.\n    x0 : array_like\n        Fixed point of function.\n    args : tuple, optional\n        Extra arguments to `func`.\n    xtol : float, optional\n        Convergence tolerance, defaults to 1e-08.\n    maxiter : int, optional\n        Maximum number of iterations, defaults to 500.\n    method : {\"del2\", \"iteration\"}, optional\n        Method of finding the fixed-point, defaults to \"del2\",\n        which uses Steffensen's Method with Aitken's ``Del^2``\n        convergence acceleration [1]_. The \"iteration\" method simply iterates\n        the function until convergence is detected, without attempting to\n        accelerate the convergence.\n    \n    References\n    ----------\n    .. [1] Burden, Faires, \"Numerical Analysis\", 5th edition, pg. 80\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy import optimize\n    >>> def func(x, c1, c2):\n    ...    return np.sqrt(c1/(x+c2))\n    >>> c1 = np.array([10,12.])\n    >>> c2 = np.array([3, 5.])\n    >>> optimize.fixed_point(func, [1.2, 1.3], args=(c1,c2))\n    array([ 1.4920333 ,  1.37228132])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4c9e171e220c14acea8723798fdf6103b9fa7730aac96d00e289c51fb4cd52b7",
            "fields": [
                {
                    "id": "u9c24516",
                    "encoding": "",
                    "name": "func",
                    "value": "",
                    "defaultValue": "",
                    "description": "Function to evaluate.",
                    "type": "function",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u5z_kk2_",
                    "encoding": "",
                    "name": "x0",
                    "value": "",
                    "defaultValue": "",
                    "description": "Fixed point of function.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ltenv4di",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Extra arguments to `func`.",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d2nkzotf",
                    "encoding": "",
                    "name": "xtol",
                    "value": 1e-08,
                    "defaultValue": 1e-08,
                    "description": "Convergence tolerance, defaults to 1e-08.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3h4y080s",
                    "encoding": "",
                    "name": "maxiter",
                    "value": 500,
                    "defaultValue": 500,
                    "description": "Maximum number of iterations, defaults to 500.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gnnbmdml",
                    "encoding": "",
                    "name": "method",
                    "value": "del2",
                    "defaultValue": "del2",
                    "description": "Method of finding the fixed-point, defaults to \"del2\",\nwhich uses Steffensen's Method with Aitken's ``Del^2``\nconvergence acceleration [1]_. The \"iteration\" method simply iterates\nthe function until convergence is detected, without attempting to\naccelerate the convergence.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ybdgy_b6",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.minpack.fixed_point",
                    "defaultValue": "scipy.optimize.minpack.fixed_point",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1gm32jxv",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "obptluj3",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "hg3ne9z7",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hqtru185",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize.minpack",
                    "defaultValue": "scipy.optimize.minpack",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ez3ffg9x",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "30balwgh",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "15w9qhx8",
            "name": "minpack.fsolve",
            "description": "Find the roots of a function.\n    \n    Return the roots of the (non-linear) equations defined by\n    ``func(x) = 0`` given a starting estimate.\n    \n    Parameters\n    ----------\n    func : callable ``f(x, *args)``\n        A function that takes at least one (possibly vector) argument,\n        and returns a value of the same length.\n    x0 : ndarray\n        The starting estimate for the roots of ``func(x) = 0``.\n    args : tuple, optional\n        Any extra arguments to `func`.\n    fprime : callable ``f(x, *args)``, optional\n        A function to compute the Jacobian of `func` with derivatives\n        across the rows. By default, the Jacobian will be estimated.\n    full_output : bool, optional\n        If True, return optional outputs.\n    col_deriv : bool, optional\n        Specify whether the Jacobian function computes derivatives down\n        the columns (faster, because there is no transpose operation).\n    xtol : float, optional\n        The calculation will terminate if the relative error between two\n        consecutive iterates is at most `xtol`.\n    maxfev : int, optional\n        The maximum number of calls to the function. If zero, then\n        ``100*(N+1)`` is the maximum where N is the number of elements\n        in `x0`.\n    band : tuple, optional\n        If set to a two-sequence containing the number of sub- and\n        super-diagonals within the band of the Jacobi matrix, the\n        Jacobi matrix is considered banded (only for ``fprime=None``).\n    epsfcn : float, optional\n        A suitable step length for the forward-difference\n        approximation of the Jacobian (for ``fprime=None``). If\n        `epsfcn` is less than the machine precision, it is assumed\n        that the relative errors in the functions are of the order of\n        the machine precision.\n    factor : float, optional\n        A parameter determining the initial step bound\n        (``factor * || diag * x||``). Should be in the interval\n        ``(0.1, 100)``.\n    diag : sequence, optional\n        N positive entries that serve as a scale factors for the\n        variables.\n    \n    Returns\n    -------\n    x : ndarray\n        The solution (or the result of the last iteration for\n        an unsuccessful call).\n    infodict : dict\n        A dictionary of optional outputs with the keys:\n    \n        ``nfev``\n            number of function calls\n        ``njev``\n            number of Jacobian calls\n        ``fvec``\n            function evaluated at the output\n        ``fjac``\n            the orthogonal matrix, q, produced by the QR\n            factorization of the final approximate Jacobian\n            matrix, stored column wise\n        ``r``\n            upper triangular matrix produced by QR factorization\n            of the same matrix\n        ``qtf``\n            the vector ``(transpose(q) * fvec)``\n    \n    ier : int\n        An integer flag.  Set to 1 if a solution was found, otherwise refer\n        to `mesg` for more information.\n    mesg : str\n        If no solution is found, `mesg` details the cause of failure.\n    \n    See Also\n    --------\n    root : Interface to root finding algorithms for multivariate\n           functions. See the ``method='hybr'`` in particular.\n    \n    Notes\n    -----\n    ``fsolve`` is a wrapper around MINPACK's hybrd and hybrj algorithms.\n    \n    Examples\n    --------\n    Find a solution to the system of equations:\n    ``x0*cos(x1) = 4,  x1*x0 - x1 = 5``.\n    \n    >>> import numpy as np\n    >>> from scipy.optimize import fsolve\n    >>> def func(x):\n    ...     return [x[0] * np.cos(x[1]) - 4,\n    ...             x[1] * x[0] - x[1] - 5]\n    >>> root = fsolve(func, [1, 1])\n    >>> root\n    array([6.50409711, 0.90841421])\n    >>> np.isclose(func(root), [0.0, 0.0])  # func(root) should be almost 0.0.\n    array([ True,  True])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "49cbd9b20e3507e32f6e9fba02a0d34a5b88f044f11316c09c856af635aceadf",
            "fields": [
                {
                    "id": "0chrsi5q",
                    "encoding": "",
                    "name": "func",
                    "value": "",
                    "defaultValue": "",
                    "description": "A function that takes at least one (possibly vector) argument,\nand returns a value of the same length.",
                    "type": "callable f(x, *args)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mahffzpt",
                    "encoding": "",
                    "name": "x0",
                    "value": "",
                    "defaultValue": "",
                    "description": "The starting estimate for the roots of ``func(x) = 0``.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qf_2d9ec",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Any extra arguments to `func`.",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "otp_sqnx",
                    "encoding": "",
                    "name": "fprime",
                    "value": "",
                    "defaultValue": "",
                    "description": "A function to compute the Jacobian of `func` with derivatives\nacross the rows. By default, the Jacobian will be estimated.",
                    "type": "callable f(x, *args)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qugxls4j",
                    "encoding": "",
                    "name": "full_output",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "If True, return optional outputs.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wgrsvu9o",
                    "encoding": "",
                    "name": "col_deriv",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Specify whether the Jacobian function computes derivatives down\nthe columns (faster, because there is no transpose operation).",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mevglw4j",
                    "encoding": "",
                    "name": "xtol",
                    "value": 1.49012e-08,
                    "defaultValue": 1.49012e-08,
                    "description": "The calculation will terminate if the relative error between two\nconsecutive iterates is at most `xtol`.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tza5vnm1",
                    "encoding": "",
                    "name": "maxfev",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "The maximum number of calls to the function. If zero, then\n``100*(N+1)`` is the maximum where N is the number of elements\nin `x0`.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8ib5imrp",
                    "encoding": "",
                    "name": "band",
                    "value": "",
                    "defaultValue": "",
                    "description": "If set to a two-sequence containing the number of sub- and\nsuper-diagonals within the band of the Jacobi matrix, the\nJacobi matrix is considered banded (only for ``fprime=None``).",
                    "type": "tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gje3ik0i",
                    "encoding": "",
                    "name": "epsfcn",
                    "value": "",
                    "defaultValue": "",
                    "description": "A suitable step length for the forward-difference\napproximation of the Jacobian (for ``fprime=None``). If\n`epsfcn` is less than the machine precision, it is assumed\nthat the relative errors in the functions are of the order of\nthe machine precision.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "57hz2lj6",
                    "encoding": "",
                    "name": "factor",
                    "value": 100,
                    "defaultValue": 100,
                    "description": "A parameter determining the initial step bound\n(``factor * || diag * x||``). Should be in the interval\n``(0.1, 100)``.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "328lbrzn",
                    "encoding": "",
                    "name": "diag",
                    "value": "",
                    "defaultValue": "",
                    "description": "N positive entries that serve as a scale factors for the\nvariables.",
                    "type": "sequence",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cg9h812z",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.minpack.fsolve",
                    "defaultValue": "scipy.optimize.minpack.fsolve",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mu7ybilp",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sfxbgbk8",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "i4uwq4p2",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "idvnqza1",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize.minpack",
                    "defaultValue": "scipy.optimize.minpack",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e_s5fq0i",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1j9_h13i",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "cmrq8_yx",
            "name": "minpack.least_squares",
            "description": "Solve a nonlinear least-squares problem with bounds on the variables.\n    \n    Given the residuals f(x) (an m-D real function of n real\n    variables) and the loss function rho(s) (a scalar function), `least_squares`\n    finds a local minimum of the cost function F(x)::\n    \n        minimize F(x) = 0.5 * sum(rho(f_i(x)**2), i = 0, ..., m - 1)\n        subject to lb <= x <= ub\n    \n    The purpose of the loss function rho(s) is to reduce the influence of\n    outliers on the solution.\n    \n    Parameters\n    ----------\n    fun : callable\n        Function which computes the vector of residuals, with the signature\n        ``fun(x, *args, **kwargs)``, i.e., the minimization proceeds with\n        respect to its first argument. The argument ``x`` passed to this\n        function is an ndarray of shape (n,) (never a scalar, even for n=1).\n        It must allocate and return a 1-D array_like of shape (m,) or a scalar.\n        If the argument ``x`` is complex or the function ``fun`` returns\n        complex residuals, it must be wrapped in a real function of real\n        arguments, as shown at the end of the Examples section.\n    x0 : array_like with shape (n,) or float\n        Initial guess on independent variables. If float, it will be treated\n        as a 1-D array with one element. When `method` is 'trf', the initial\n        guess might be slightly adjusted to lie sufficiently within the given\n        `bounds`.\n    jac : {'2-point', '3-point', 'cs', callable}, optional\n        Method of computing the Jacobian matrix (an m-by-n matrix, where\n        element (i, j) is the partial derivative of f[i] with respect to\n        x[j]). The keywords select a finite difference scheme for numerical\n        estimation. The scheme '3-point' is more accurate, but requires\n        twice as many operations as '2-point' (default). The scheme 'cs'\n        uses complex steps, and while potentially the most accurate, it is\n        applicable only when `fun` correctly handles complex inputs and\n        can be analytically continued to the complex plane. If callable, it is used as\n        ``jac(x, *args, **kwargs)`` and should return a good approximation\n        (or the exact value) for the Jacobian as an array_like (np.atleast_2d\n        is applied), a sparse array (csr_array preferred for performance) or\n        a `scipy.sparse.linalg.LinearOperator`.\n    \n        .. versionchanged:: 1.16.0\n            An ability to use the '3-point', 'cs' keywords with the 'lm' method.\n            Previously 'lm' was limited to '2-point' and callable.\n    \n    bounds : 2-tuple of array_like or `Bounds`, optional\n        There are two ways to specify bounds:\n    \n        1. Instance of `Bounds` class\n        2. Lower and upper bounds on independent variables. Defaults to no\n           bounds. Each array must match the size of `x0` or be a scalar,\n           in the latter case a bound will be the same for all variables.\n           Use ``np.inf`` with an appropriate sign to disable bounds on all\n           or some variables.\n    \n    method : {'trf', 'dogbox', 'lm'}, optional\n        Algorithm to perform minimization.\n    \n        * 'trf' : Trust Region Reflective algorithm, particularly suitable\n          for large sparse problems with bounds. Generally robust method.\n        * 'dogbox' : dogleg algorithm with rectangular trust regions,\n          typical use case is small problems with bounds. Not recommended\n          for problems with rank-deficient Jacobian.\n        * 'lm' : Levenberg-Marquardt algorithm as implemented in MINPACK.\n          Doesn't handle bounds and sparse Jacobians. Usually the most\n          efficient method for small unconstrained problems.\n    \n        Default is 'trf'. See Notes for more information.\n    ftol : float or None, optional\n        Tolerance for termination by the change of the cost function. Default\n        is 1e-8. The optimization process is stopped when ``dF < ftol * F``,\n        and there was an adequate agreement between a local quadratic model and\n        the true model in the last step.\n    \n        If None and 'method' is not 'lm', the termination by this condition is\n        disabled. If 'method' is 'lm', this tolerance must be higher than\n        machine epsilon.\n    xtol : float or None, optional\n        Tolerance for termination by the change of the independent variables.\n        Default is 1e-8. The exact condition depends on the `method` used:\n    \n        * For 'trf' and 'dogbox' : ``norm(dx) < xtol * (xtol + norm(x))``.\n        * For 'lm' : ``Delta < xtol * norm(xs)``, where ``Delta`` is\n          a trust-region radius and ``xs`` is the value of ``x``\n          scaled according to `x_scale` parameter (see below).\n    \n        If None and 'method' is not 'lm', the termination by this condition is\n        disabled. If 'method' is 'lm', this tolerance must be higher than\n        machine epsilon.\n    gtol : float or None, optional\n        Tolerance for termination by the norm of the gradient. Default is 1e-8.\n        The exact condition depends on a `method` used:\n    \n        * For 'trf' : ``norm(g_scaled, ord=np.inf) < gtol``, where\n          ``g_scaled`` is the value of the gradient scaled to account for\n          the presence of the bounds [STIR]_.\n        * For 'dogbox' : ``norm(g_free, ord=np.inf) < gtol``, where\n          ``g_free`` is the gradient with respect to the variables which\n          are not in the optimal state on the boundary.\n        * For 'lm' : the maximum absolute value of the cosine of angles\n          between columns of the Jacobian and the residual vector is less\n          than `gtol`, or the residual vector is zero.\n    \n        If None and 'method' is not 'lm', the termination by this condition is\n        disabled. If 'method' is 'lm', this tolerance must be higher than\n        machine epsilon.\n    x_scale : {None, array_like, 'jac'}, optional\n        Characteristic scale of each variable. Setting `x_scale` is equivalent\n        to reformulating the problem in scaled variables ``xs = x / x_scale``.\n        An alternative view is that the size of a trust region along jth\n        dimension is proportional to ``x_scale[j]``. Improved convergence may\n        be achieved by setting `x_scale` such that a step of a given size\n        along any of the scaled variables has a similar effect on the cost\n        function. If set to 'jac', the scale is iteratively updated using the\n        inverse norms of the columns of the Jacobian matrix (as described in\n        [JJMore]_). The default scaling for each method (i.e.\n        if ``x_scale is None``) is as follows:\n    \n        * For 'trf'    : ``x_scale == 1``\n        * For 'dogbox' : ``x_scale == 1``\n        * For 'lm'     : ``x_scale == 'jac'``\n    \n        .. versionchanged:: 1.16.0\n            The default keyword value is changed from 1 to None to indicate that\n            a default approach to scaling is used.\n            For the 'lm' method the default scaling is changed from 1 to 'jac'.\n            This has been found to give better performance, and is the same\n            scaling as performed by ``leastsq``.\n    \n    loss : str or callable, optional\n        Determines the loss function. The following keyword values are allowed:\n    \n        * 'linear' (default) : ``rho(z) = z``. Gives a standard\n          least-squares problem.\n        * 'soft_l1' : ``rho(z) = 2 * ((1 + z)**0.5 - 1)``. The smooth\n          approximation of l1 (absolute value) loss. Usually a good\n          choice for robust least squares.\n        * 'huber' : ``rho(z) = z if z <= 1 else 2*z**0.5 - 1``. Works\n          similarly to 'soft_l1'.\n        * 'cauchy' : ``rho(z) = ln(1 + z)``. Severely weakens outliers\n          influence, but may cause difficulties in optimization process.\n        * 'arctan' : ``rho(z) = arctan(z)``. Limits a maximum loss on\n          a single residual, has properties similar to 'cauchy'.\n    \n        If callable, it must take a 1-D ndarray ``z=f**2`` and return an\n        array_like with shape (3, m) where row 0 contains function values,\n        row 1 contains first derivatives and row 2 contains second\n        derivatives. Method 'lm' supports only 'linear' loss.\n    f_scale : float, optional\n        Value of soft margin between inlier and outlier residuals, default\n        is 1.0. The loss function is evaluated as follows\n        ``rho_(f**2) = C**2 * rho(f**2 / C**2)``, where ``C`` is `f_scale`,\n        and ``rho`` is determined by `loss` parameter. This parameter has\n        no effect with ``loss='linear'``, but for other `loss` values it is\n        of crucial importance.\n    max_nfev : None or int, optional\n        For all methods this parameter controls the maximum number of function\n        evaluations used by each method, separate to those used in numerical\n        approximation of the jacobian.\n        If None (default), the value is chosen automatically as 100 * n.\n    \n        .. versionchanged:: 1.16.0\n            The default for the 'lm' method is changed to 100 * n, for both a callable\n            and a numerically estimated jacobian. Previously the default when using an\n            estimated jacobian was 100 * n * (n + 1), because the method included\n            evaluations used in the estimation.\n    \n    diff_step : None or array_like, optional\n        Determines the relative step size for the finite difference\n        approximation of the Jacobian. The actual step is computed as\n        ``x * diff_step``. If None (default), then `diff_step` is taken to be\n        a conventional \"optimal\" power of machine epsilon for the finite\n        difference scheme used [NR]_.\n    tr_solver : {None, 'exact', 'lsmr'}, optional\n        Method for solving trust-region subproblems, relevant only for 'trf'\n        and 'dogbox' methods.\n    \n        * 'exact' is suitable for not very large problems with dense\n          Jacobian matrices. The computational complexity per iteration is\n          comparable to a singular value decomposition of the Jacobian\n          matrix.\n        * 'lsmr' is suitable for problems with sparse and large Jacobian\n          matrices. It uses the iterative procedure\n          `scipy.sparse.linalg.lsmr` for finding a solution of a linear\n          least-squares problem and only requires matrix-vector product\n          evaluations.\n    \n        If None (default), the solver is chosen based on the type of Jacobian\n        returned on the first iteration.\n    tr_options : dict, optional\n        Keyword options passed to trust-region solver.\n    \n        * ``tr_solver='exact'``: `tr_options` are ignored.\n        * ``tr_solver='lsmr'``: options for `scipy.sparse.linalg.lsmr`.\n          Additionally,  ``method='trf'`` supports  'regularize' option\n          (bool, default is True), which adds a regularization term to the\n          normal equation, which improves convergence if the Jacobian is\n          rank-deficient [Byrd]_ (eq. 3.4).\n    \n    jac_sparsity : {None, array_like, sparse array}, optional\n        Defines the sparsity structure of the Jacobian matrix for finite\n        difference estimation, its shape must be (m, n). If the Jacobian has\n        only few non-zero elements in *each* row, providing the sparsity\n        structure will greatly speed up the computations [Curtis]_. A zero\n        entry means that a corresponding element in the Jacobian is identically\n        zero. If provided, forces the use of 'lsmr' trust-region solver.\n        If None (default), then dense differencing will be used. Has no effect\n        for 'lm' method.\n    verbose : {0, 1, 2}, optional\n        Level of algorithm's verbosity:\n    \n        * 0 (default) : work silently.\n        * 1 : display a termination report.\n        * 2 : display progress during iterations (not supported by 'lm'\n          method).\n    \n    args, kwargs : tuple and dict, optional\n        Additional arguments passed to `fun` and `jac`. Both empty by default.\n        The calling signature is ``fun(x, *args, **kwargs)`` and the same for\n        `jac`.\n    callback : None or callable, optional\n        Callback function that is called by the algorithm on each iteration.\n        This can be used to print or plot the optimization results at each\n        step, and to stop the optimization algorithm based on some user-defined\n        condition.  Only implemented for the `trf` and `dogbox` methods.\n    \n        The signature is ``callback(intermediate_result: OptimizeResult)``\n    \n        `intermediate_result is a `scipy.optimize.OptimizeResult`\n        which contains the intermediate results of the optimization at the\n        current iteration.\n    \n        The callback also supports a signature like: ``callback(x)``\n    \n        Introspection is used to determine which of the signatures is invoked.\n    \n        If the `callback` function raises `StopIteration` the optimization algorithm\n        will stop and return with status code -2.\n    \n        .. versionadded:: 1.16.0\n    workers : map-like callable, optional\n        A map-like callable, such as `multiprocessing.Pool.map` for evaluating\n        any numerical differentiation in parallel.\n        This evaluation is carried out as ``workers(fun, iterable)``.\n    \n        .. versionadded:: 1.16.0\n    \n    Returns\n    -------\n    result : OptimizeResult\n        `OptimizeResult` with the following fields defined:\n    \n        x : ndarray, shape (n,)\n            Solution found.\n        cost : float\n            Value of the cost function at the solution.\n        fun : ndarray, shape (m,)\n            Vector of residuals at the solution.\n        jac : ndarray, sparse array or LinearOperator, shape (m, n)\n            Modified Jacobian matrix at the solution, in the sense that J^T J\n            is a Gauss-Newton approximation of the Hessian of the cost function.\n            The type is the same as the one used by the algorithm.\n        grad : ndarray, shape (m,)\n            Gradient of the cost function at the solution.\n        optimality : float\n            First-order optimality measure. In unconstrained problems, it is\n            always the uniform norm of the gradient. In constrained problems,\n            it is the quantity which was compared with `gtol` during iterations.\n        active_mask : ndarray of int, shape (n,)\n            Each component shows whether a corresponding constraint is active\n            (that is, whether a variable is at the bound):\n    \n            *  0 : a constraint is not active.\n            * -1 : a lower bound is active.\n            *  1 : an upper bound is active.\n    \n            Might be somewhat arbitrary for 'trf' method as it generates a\n            sequence of strictly feasible iterates and `active_mask` is\n            determined within a tolerance threshold.\n        nfev : int\n            Number of function evaluations done. This number does not include\n            the function calls used for numerical Jacobian approximation.\n    \n            .. versionchanged:: 1.16.0\n                For the 'lm' method the number of function calls used in numerical\n                Jacobian approximation is no longer included. This is to bring all\n                methods into line.\n    \n        njev : int or None\n            Number of Jacobian evaluations done. If numerical Jacobian\n            approximation is used in 'lm' method, it is set to None.\n        status : int\n            The reason for algorithm termination:\n    \n            * -2 : terminated because callback raised StopIteration.\n            * -1 : improper input parameters status returned from MINPACK.\n            *  0 : the maximum number of function evaluations is exceeded.\n            *  1 : `gtol` termination condition is satisfied.\n            *  2 : `ftol` termination condition is satisfied.\n            *  3 : `xtol` termination condition is satisfied.\n            *  4 : Both `ftol` and `xtol` termination conditions are satisfied.\n    \n        message : str\n            Verbal description of the termination reason.\n        success : bool\n            True if one of the convergence criteria is satisfied (`status` > 0).\n    \n    See Also\n    --------\n    leastsq : A legacy wrapper for the MINPACK implementation of the\n              Levenberg-Marquadt algorithm.\n    curve_fit : Least-squares minimization applied to a curve-fitting problem.\n    \n    Notes\n    -----\n    Method 'lm' (Levenberg-Marquardt) calls a wrapper over a least-squares\n    algorithm implemented in MINPACK (lmder). It runs the\n    Levenberg-Marquardt algorithm formulated as a trust-region type algorithm.\n    The implementation is based on paper [JJMore]_, it is very robust and\n    efficient with a lot of smart tricks. It should be your first choice\n    for unconstrained problems. Note that it doesn't support bounds. Also,\n    it doesn't work when m < n.\n    \n    Method 'trf' (Trust Region Reflective) is motivated by the process of\n    solving a system of equations, which constitute the first-order optimality\n    condition for a bound-constrained minimization problem as formulated in\n    [STIR]_. The algorithm iteratively solves trust-region subproblems\n    augmented by a special diagonal quadratic term and with trust-region shape\n    determined by the distance from the bounds and the direction of the\n    gradient. This enhancements help to avoid making steps directly into bounds\n    and efficiently explore the whole space of variables. To further improve\n    convergence, the algorithm considers search directions reflected from the\n    bounds. To obey theoretical requirements, the algorithm keeps iterates\n    strictly feasible. With dense Jacobians trust-region subproblems are\n    solved by an exact method very similar to the one described in [JJMore]_\n    (and implemented in MINPACK). The difference from the MINPACK\n    implementation is that a singular value decomposition of a Jacobian\n    matrix is done once per iteration, instead of a QR decomposition and series\n    of Givens rotation eliminations. For large sparse Jacobians a 2-D subspace\n    approach of solving trust-region subproblems is used [STIR]_, [Byrd]_.\n    The subspace is spanned by a scaled gradient and an approximate\n    Gauss-Newton solution delivered by `scipy.sparse.linalg.lsmr`. When no\n    constraints are imposed the algorithm is very similar to MINPACK and has\n    generally comparable performance. The algorithm works quite robust in\n    unbounded and bounded problems, thus it is chosen as a default algorithm.\n    \n    Method 'dogbox' operates in a trust-region framework, but considers\n    rectangular trust regions as opposed to conventional ellipsoids [Voglis]_.\n    The intersection of a current trust region and initial bounds is again\n    rectangular, so on each iteration a quadratic minimization problem subject\n    to bound constraints is solved approximately by Powell's dogleg method\n    [NumOpt]_. The required Gauss-Newton step can be computed exactly for\n    dense Jacobians or approximately by `scipy.sparse.linalg.lsmr` for large\n    sparse Jacobians. The algorithm is likely to exhibit slow convergence when\n    the rank of Jacobian is less than the number of variables. The algorithm\n    often outperforms 'trf' in bounded problems with a small number of\n    variables.\n    \n    Robust loss functions are implemented as described in [BA]_. The idea\n    is to modify a residual vector and a Jacobian matrix on each iteration\n    such that computed gradient and Gauss-Newton Hessian approximation match\n    the true gradient and Hessian approximation of the cost function. Then\n    the algorithm proceeds in a normal way, i.e., robust loss functions are\n    implemented as a simple wrapper over standard least-squares algorithms.\n    \n    .. versionadded:: 0.17.0\n    \n    References\n    ----------\n    .. [STIR] M. A. Branch, T. F. Coleman, and Y. Li, \"A Subspace, Interior,\n              and Conjugate Gradient Method for Large-Scale Bound-Constrained\n              Minimization Problems,\" SIAM Journal on Scientific Computing,\n              Vol. 21, Number 1, pp 1-23, 1999.\n    .. [NR] William H. Press et. al., \"Numerical Recipes. The Art of Scientific\n            Computing. 3rd edition\", Sec. 5.7.\n    .. [Byrd] R. H. Byrd, R. B. Schnabel and G. A. Shultz, \"Approximate\n              solution of the trust region problem by minimization over\n              two-dimensional subspaces\", Math. Programming, 40, pp. 247-263,\n              1988.\n    .. [Curtis] A. Curtis, M. J. D. Powell, and J. Reid, \"On the estimation of\n                sparse Jacobian matrices\", Journal of the Institute of\n                Mathematics and its Applications, 13, pp. 117-120, 1974.\n    .. [JJMore] J. J. More, \"The Levenberg-Marquardt Algorithm: Implementation\n                and Theory,\" Numerical Analysis, ed. G. A. Watson, Lecture\n                Notes in Mathematics 630, Springer Verlag, pp. 105-116, 1977.\n    .. [Voglis] C. Voglis and I. E. Lagaris, \"A Rectangular Trust Region\n                Dogleg Approach for Unconstrained and Bound Constrained\n                Nonlinear Optimization\", WSEAS International Conference on\n                Applied Mathematics, Corfu, Greece, 2004.\n    .. [NumOpt] J. Nocedal and S. J. Wright, \"Numerical optimization,\n                2nd edition\", Chapter 4.\n    .. [BA] B. Triggs et. al., \"Bundle Adjustment - A Modern Synthesis\",\n            Proceedings of the International Workshop on Vision Algorithms:\n            Theory and Practice, pp. 298-372, 1999.\n    \n    Examples\n    --------\n    In this example we find a minimum of the Rosenbrock function without bounds\n    on independent variables.\n    \n    >>> import numpy as np\n    >>> def fun_rosenbrock(x):\n    ...     return np.array([10 * (x[1] - x[0]**2), (1 - x[0])])\n    \n    Notice that we only provide the vector of the residuals. The algorithm\n    constructs the cost function as a sum of squares of the residuals, which\n    gives the Rosenbrock function. The exact minimum is at ``x = [1.0, 1.0]``.\n    \n    >>> from scipy.optimize import least_squares\n    >>> x0_rosenbrock = np.array([2, 2])\n    >>> res_1 = least_squares(fun_rosenbrock, x0_rosenbrock)\n    >>> res_1.x\n    array([ 1.,  1.])\n    >>> res_1.cost\n    9.8669242910846867e-30\n    >>> res_1.optimality\n    8.8928864934219529e-14\n    \n    We now constrain the variables, in such a way that the previous solution\n    becomes infeasible. Specifically, we require that ``x[1] >= 1.5``, and\n    ``x[0]`` left unconstrained. To this end, we specify the `bounds` parameter\n    to `least_squares` in the form ``bounds=([-np.inf, 1.5], np.inf)``.\n    \n    We also provide the analytic Jacobian:\n    \n    >>> def jac_rosenbrock(x):\n    ...     return np.array([\n    ...         [-20 * x[0], 10],\n    ...         [-1, 0]])\n    \n    Putting this all together, we see that the new solution lies on the bound:\n    \n    >>> res_2 = least_squares(fun_rosenbrock, x0_rosenbrock, jac_rosenbrock,\n    ...                       bounds=([-np.inf, 1.5], np.inf))\n    >>> res_2.x\n    array([ 1.22437075,  1.5       ])\n    >>> res_2.cost\n    0.025213093946805685\n    >>> res_2.optimality\n    1.5885401433157753e-07\n    \n    Now we solve a system of equations (i.e., the cost function should be zero\n    at a minimum) for a Broyden tridiagonal vector-valued function of 100000\n    variables:\n    \n    >>> def fun_broyden(x):\n    ...     f = (3 - x) * x + 1\n    ...     f[1:] -= x[:-1]\n    ...     f[:-1] -= 2 * x[1:]\n    ...     return f\n    \n    The corresponding Jacobian matrix is sparse. We tell the algorithm to\n    estimate it by finite differences and provide the sparsity structure of\n    Jacobian to significantly speed up this process.\n    \n    >>> from scipy.sparse import lil_array\n    >>> def sparsity_broyden(n):\n    ...     sparsity = lil_array((n, n), dtype=int)\n    ...     i = np.arange(n)\n    ...     sparsity[i, i] = 1\n    ...     i = np.arange(1, n)\n    ...     sparsity[i, i - 1] = 1\n    ...     i = np.arange(n - 1)\n    ...     sparsity[i, i + 1] = 1\n    ...     return sparsity\n    ...\n    >>> n = 100000\n    >>> x0_broyden = -np.ones(n)\n    ...\n    >>> res_3 = least_squares(fun_broyden, x0_broyden,\n    ...                       jac_sparsity=sparsity_broyden(n))\n    >>> res_3.cost\n    4.5687069299604613e-23\n    >>> res_3.optimality\n    1.1650454296851518e-11\n    \n    Let's also solve a curve fitting problem using robust loss function to\n    take care of outliers in the data. Define the model function as\n    ``y = a + b * exp(c * t)``, where t is a predictor variable, y is an\n    observation and a, b, c are parameters to estimate.\n    \n    First, define the function which generates the data with noise and\n    outliers, define the model parameters, and generate data:\n    \n    >>> from numpy.random import default_rng\n    >>> rng = default_rng()\n    >>> def gen_data(t, a, b, c, noise=0., n_outliers=0, seed=None):\n    ...     rng = default_rng(seed)\n    ...\n    ...     y = a + b * np.exp(t * c)\n    ...\n    ...     error = noise * rng.standard_normal(t.size)\n    ...     outliers = rng.integers(0, t.size, n_outliers)\n    ...     error[outliers] *= 10\n    ...\n    ...     return y + error\n    ...\n    >>> a = 0.5\n    >>> b = 2.0\n    >>> c = -1\n    >>> t_min = 0\n    >>> t_max = 10\n    >>> n_points = 15\n    ...\n    >>> t_train = np.linspace(t_min, t_max, n_points)\n    >>> y_train = gen_data(t_train, a, b, c, noise=0.1, n_outliers=3)\n    \n    Define function for computing residuals and initial estimate of\n    parameters.\n    \n    >>> def fun(x, t, y):\n    ...     return x[0] + x[1] * np.exp(x[2] * t) - y\n    ...\n    >>> x0 = np.array([1.0, 1.0, 0.0])\n    \n    Compute a standard least-squares solution:\n    \n    >>> res_lsq = least_squares(fun, x0, args=(t_train, y_train))\n    \n    Now compute two solutions with two different robust loss functions. The\n    parameter `f_scale` is set to 0.1, meaning that inlier residuals should\n    not significantly exceed 0.1 (the noise level used).\n    \n    >>> res_soft_l1 = least_squares(fun, x0, loss='soft_l1', f_scale=0.1,\n    ...                             args=(t_train, y_train))\n    >>> res_log = least_squares(fun, x0, loss='cauchy', f_scale=0.1,\n    ...                         args=(t_train, y_train))\n    \n    And, finally, plot all the curves. We see that by selecting an appropriate\n    `loss`  we can get estimates close to optimal even in the presence of\n    strong outliers. But keep in mind that generally it is recommended to try\n    'soft_l1' or 'huber' losses first (if at all necessary) as the other two\n    options may cause difficulties in optimization process.\n    \n    >>> t_test = np.linspace(t_min, t_max, n_points * 10)\n    >>> y_true = gen_data(t_test, a, b, c)\n    >>> y_lsq = gen_data(t_test, *res_lsq.x)\n    >>> y_soft_l1 = gen_data(t_test, *res_soft_l1.x)\n    >>> y_log = gen_data(t_test, *res_log.x)\n    ...\n    >>> import matplotlib.pyplot as plt\n    >>> plt.plot(t_train, y_train, 'o')\n    >>> plt.plot(t_test, y_true, 'k', linewidth=2, label='true')\n    >>> plt.plot(t_test, y_lsq, label='linear loss')\n    >>> plt.plot(t_test, y_soft_l1, label='soft_l1 loss')\n    >>> plt.plot(t_test, y_log, label='cauchy loss')\n    >>> plt.xlabel(\"t\")\n    >>> plt.ylabel(\"y\")\n    >>> plt.legend()\n    >>> plt.show()\n    \n    In the next example, we show how complex-valued residual functions of\n    complex variables can be optimized with ``least_squares()``. Consider the\n    following function:\n    \n    >>> def f(z):\n    ...     return z - (0.5 + 0.5j)\n    \n    We wrap it into a function of real variables that returns real residuals\n    by simply handling the real and imaginary parts as independent variables:\n    \n    >>> def f_wrap(x):\n    ...     fx = f(x[0] + 1j*x[1])\n    ...     return np.array([fx.real, fx.imag])\n    \n    Thus, instead of the original m-D complex function of n complex\n    variables we optimize a 2m-D real function of 2n real variables:\n    \n    >>> from scipy.optimize import least_squares\n    >>> res_wrapped = least_squares(f_wrap, (0.1, 0.1), bounds=([0, 0], [1, 1]))\n    >>> z = res_wrapped.x[0] + res_wrapped.x[1]*1j\n    >>> z\n    (0.49999999999925893+0.49999999999925893j)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "cf3b0f7e2b7066e39124ccb6a4ae4307e6037e347f5613348df3e9e351bcf0dd",
            "fields": [
                {
                    "id": "8iod0_fb",
                    "encoding": "",
                    "name": "fun",
                    "value": "",
                    "defaultValue": "",
                    "description": "Function which computes the vector of residuals, with the signature\n``fun(x, *args, **kwargs)``, i.e., the minimization proceeds with\nrespect to its first argument. The argument ``x`` passed to this\nfunction is an ndarray of shape (n,) (never a scalar, even for n=1).\nIt must allocate and return a 1-D array_like of shape (m,) or a scalar.\nIf the argument ``x`` is complex or the function ``fun`` returns\ncomplex residuals, it must be wrapped in a real function of real\narguments, as shown at the end of the Examples section.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o90rkzo_",
                    "encoding": "",
                    "name": "x0",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial guess on independent variables. If float, it will be treated\nas a 1-D array with one element. When `method` is 'trf', the initial\nguess might be slightly adjusted to lie sufficiently within the given\n`bounds`.",
                    "type": "arraylike with shape (n,) or float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "02bzehh6",
                    "encoding": "",
                    "name": "jac",
                    "value": "2-point",
                    "defaultValue": "2-point",
                    "description": "Method of computing the Jacobian matrix (an m-by-n matrix, where\nelement (i, j) is the partial derivative of f[i] with respect to\nx[j]). The keywords select a finite difference scheme for numerical\nestimation. The scheme '3-point' is more accurate, but requires\ntwice as many operations as '2-point' (default). The scheme 'cs'\nuses complex steps, and while potentially the most accurate, it is\napplicable only when `fun` correctly handles complex inputs and\ncan be analytically continued to the complex plane. If callable, it is used as\n``jac(x, *args, **kwargs)`` and should return a good approximation\n(or the exact value) for the Jacobian as an array_like (np.atleast_2d\nis applied), a sparse array (csr_array preferred for performance) or\na `scipy.sparse.linalg.LinearOperator`.\n\n.. versionchanged:: 1.16.0\n    An ability to use the '3-point', 'cs' keywords with the 'lm' method.\n    Previously 'lm' was limited to '2-point' and callable.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5anfht1w",
                    "encoding": "",
                    "name": "bounds",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "There are two ways to specify bounds:\n\n1. Instance of `Bounds` class\n2. Lower and upper bounds on independent variables. Defaults to no\n   bounds. Each array must match the size of `x0` or be a scalar,\n   in the latter case a bound will be the same for all variables.\n   Use ``np.inf`` with an appropriate sign to disable bounds on all\n   or some variables.",
                    "type": "builtins.tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5ztx85h8",
                    "encoding": "",
                    "name": "method",
                    "value": "trf",
                    "defaultValue": "trf",
                    "description": "Algorithm to perform minimization.\n\n* 'trf' : Trust Region Reflective algorithm, particularly suitable\n  for large sparse problems with bounds. Generally robust method.\n* 'dogbox' : dogleg algorithm with rectangular trust regions,\n  typical use case is small problems with bounds. Not recommended\n  for problems with rank-deficient Jacobian.\n* 'lm' : Levenberg-Marquardt algorithm as implemented in MINPACK.\n  Doesn't handle bounds and sparse Jacobians. Usually the most\n  efficient method for small unconstrained problems.\n\nDefault is 'trf'. See Notes for more information.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qu3qvl3h",
                    "encoding": "",
                    "name": "ftol",
                    "value": 1e-08,
                    "defaultValue": 1e-08,
                    "description": "Tolerance for termination by the change of the cost function. Default\nis 1e-8. The optimization process is stopped when ``dF < ftol * F``,\nand there was an adequate agreement between a local quadratic model and\nthe true model in the last step.\n\nIf None and 'method' is not 'lm', the termination by this condition is\ndisabled. If 'method' is 'lm', this tolerance must be higher than\nmachine epsilon.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "976u9j1c",
                    "encoding": "",
                    "name": "xtol",
                    "value": 1e-08,
                    "defaultValue": 1e-08,
                    "description": "Tolerance for termination by the change of the independent variables.\nDefault is 1e-8. The exact condition depends on the `method` used:\n\n* For 'trf' and 'dogbox' : ``norm(dx) < xtol * (xtol + norm(x))``.\n* For 'lm' : ``Delta < xtol * norm(xs)``, where ``Delta`` is\n  a trust-region radius and ``xs`` is the value of ``x``\n  scaled according to `x_scale` parameter (see below).\n\nIf None and 'method' is not 'lm', the termination by this condition is\ndisabled. If 'method' is 'lm', this tolerance must be higher than\nmachine epsilon.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dlzzyx7l",
                    "encoding": "",
                    "name": "gtol",
                    "value": 1e-08,
                    "defaultValue": 1e-08,
                    "description": "Tolerance for termination by the norm of the gradient. Default is 1e-8.\nThe exact condition depends on a `method` used:\n\n* For 'trf' : ``norm(g_scaled, ord=np.inf) < gtol``, where\n  ``g_scaled`` is the value of the gradient scaled to account for\n  the presence of the bounds [STIR]_.\n* For 'dogbox' : ``norm(g_free, ord=np.inf) < gtol``, where\n  ``g_free`` is the gradient with respect to the variables which\n  are not in the optimal state on the boundary.\n* For 'lm' : the maximum absolute value of the cosine of angles\n  between columns of the Jacobian and the residual vector is less\n  than `gtol`, or the residual vector is zero.\n\nIf None and 'method' is not 'lm', the termination by this condition is\ndisabled. If 'method' is 'lm', this tolerance must be higher than\nmachine epsilon.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cqmd6t2g",
                    "encoding": "",
                    "name": "x_scale",
                    "value": "",
                    "defaultValue": "",
                    "description": "Characteristic scale of each variable. Setting `x_scale` is equivalent\nto reformulating the problem in scaled variables ``xs = x / x_scale``.\nAn alternative view is that the size of a trust region along jth\ndimension is proportional to ``x_scale[j]``. Improved convergence may\nbe achieved by setting `x_scale` such that a step of a given size\nalong any of the scaled variables has a similar effect on the cost\nfunction. If set to 'jac', the scale is iteratively updated using the\ninverse norms of the columns of the Jacobian matrix (as described in\n[JJMore]_). The default scaling for each method (i.e.\nif ``x_scale is None``) is as follows:\n\n* For 'trf'    : ``x_scale == 1``\n* For 'dogbox' : ``x_scale == 1``\n* For 'lm'     : ``x_scale == 'jac'``\n\n.. versionchanged:: 1.16.0\n    The default keyword value is changed from 1 to None to indicate that\n    a default approach to scaling is used.\n    For the 'lm' method the default scaling is changed from 1 to 'jac'.\n    This has been found to give better performance, and is the same\n    scaling as performed by ``leastsq``.",
                    "type": "{None, arraylike, 'jac'}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h4v1njm7",
                    "encoding": "",
                    "name": "loss",
                    "value": "linear",
                    "defaultValue": "linear",
                    "description": "Determines the loss function. The following keyword values are allowed:\n\n* 'linear' (default) : ``rho(z) = z``. Gives a standard\n  least-squares problem.\n* 'soft_l1' : ``rho(z) = 2 * ((1 + z)**0.5 - 1)``. The smooth\n  approximation of l1 (absolute value) loss. Usually a good\n  choice for robust least squares.\n* 'huber' : ``rho(z) = z if z <= 1 else 2*z**0.5 - 1``. Works\n  similarly to 'soft_l1'.\n* 'cauchy' : ``rho(z) = ln(1 + z)``. Severely weakens outliers\n  influence, but may cause difficulties in optimization process.\n* 'arctan' : ``rho(z) = arctan(z)``. Limits a maximum loss on\n  a single residual, has properties similar to 'cauchy'.\n\nIf callable, it must take a 1-D ndarray ``z=f**2`` and return an\narray_like with shape (3, m) where row 0 contains function values,\nrow 1 contains first derivatives and row 2 contains second\nderivatives. Method 'lm' supports only 'linear' loss.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r8x25ufn",
                    "encoding": "",
                    "name": "f_scale",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "Value of soft margin between inlier and outlier residuals, default\nis 1.0. The loss function is evaluated as follows\n``rho_(f**2) = C**2 * rho(f**2 / C**2)``, where ``C`` is `f_scale`,\nand ``rho`` is determined by `loss` parameter. This parameter has\nno effect with ``loss='linear'``, but for other `loss` values it is\nof crucial importance.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s2980ha1",
                    "encoding": "",
                    "name": "diff_step",
                    "value": "",
                    "defaultValue": "",
                    "description": "Determines the relative step size for the finite difference\napproximation of the Jacobian. The actual step is computed as\n``x * diff_step``. If None (default), then `diff_step` is taken to be\na conventional \"optimal\" power of machine epsilon for the finite\ndifference scheme used [NR]_.",
                    "type": "None or arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g2q482k0",
                    "encoding": "",
                    "name": "tr_solver",
                    "value": "",
                    "defaultValue": "",
                    "description": "Method for solving trust-region subproblems, relevant only for 'trf'\nand 'dogbox' methods.\n\n* 'exact' is suitable for not very large problems with dense\n  Jacobian matrices. The computational complexity per iteration is\n  comparable to a singular value decomposition of the Jacobian\n  matrix.\n* 'lsmr' is suitable for problems with sparse and large Jacobian\n  matrices. It uses the iterative procedure\n  `scipy.sparse.linalg.lsmr` for finding a solution of a linear\n  least-squares problem and only requires matrix-vector product\n  evaluations.\n\nIf None (default), the solver is chosen based on the type of Jacobian\nreturned on the first iteration.",
                    "type": "{None, 'exact', 'lsmr'}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "97hmtmjr",
                    "encoding": "",
                    "name": "tr_options",
                    "value": "",
                    "defaultValue": "",
                    "description": "Keyword options passed to trust-region solver.\n\n* ``tr_solver='exact'``: `tr_options` are ignored.\n* ``tr_solver='lsmr'``: options for `scipy.sparse.linalg.lsmr`.\n  Additionally,  ``method='trf'`` supports  'regularize' option\n  (bool, default is True), which adds a regularization term to the\n  normal equation, which improves convergence if the Jacobian is\n  rank-deficient [Byrd]_ (eq. 3.4).",
                    "type": "dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tgfjakn5",
                    "encoding": "",
                    "name": "jac_sparsity",
                    "value": "",
                    "defaultValue": "",
                    "description": "Defines the sparsity structure of the Jacobian matrix for finite\ndifference estimation, its shape must be (m, n). If the Jacobian has\nonly few non-zero elements in *each* row, providing the sparsity\nstructure will greatly speed up the computations [Curtis]_. A zero\nentry means that a corresponding element in the Jacobian is identically\nzero. If provided, forces the use of 'lsmr' trust-region solver.\nIf None (default), then dense differencing will be used. Has no effect\nfor 'lm' method.",
                    "type": "{None, arraylike, sparse array}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qt555wbb",
                    "encoding": "",
                    "name": "max_nfev",
                    "value": "",
                    "defaultValue": "",
                    "description": "For all methods this parameter controls the maximum number of function\nevaluations used by each method, separate to those used in numerical\napproximation of the jacobian.\nIf None (default), the value is chosen automatically as 100 * n.\n\n.. versionchanged:: 1.16.0\n    The default for the 'lm' method is changed to 100 * n, for both a callable\n    and a numerically estimated jacobian. Previously the default when using an\n    estimated jacobian was 100 * n * (n + 1), because the method included\n    evaluations used in the estimation.",
                    "type": "None or int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "50d7he8l",
                    "encoding": "",
                    "name": "verbose",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Level of algorithm's verbosity:\n\n* 0 (default) : work silently.\n* 1 : display a termination report.\n* 2 : display progress during iterations (not supported by 'lm'\n  method).",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "af_6j5en",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0ilqopun",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z_93qgce",
                    "encoding": "",
                    "name": "callback",
                    "value": "",
                    "defaultValue": "",
                    "description": "Callback function that is called by the algorithm on each iteration.\nThis can be used to print or plot the optimization results at each\nstep, and to stop the optimization algorithm based on some user-defined\ncondition.  Only implemented for the `trf` and `dogbox` methods.\n\nThe signature is ``callback(intermediate_result: OptimizeResult)``\n\n`intermediate_result is a `scipy.optimize.OptimizeResult`\nwhich contains the intermediate results of the optimization at the\ncurrent iteration.\n\nThe callback also supports a signature like: ``callback(x)``\n\nIntrospection is used to determine which of the signatures is invoked.\n\nIf the `callback` function raises `StopIteration` the optimization algorithm\nwill stop and return with status code -2.\n\n.. versionadded:: 1.16.0",
                    "type": "None or callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yt7_w04p",
                    "encoding": "",
                    "name": "workers",
                    "value": "",
                    "defaultValue": "",
                    "description": "A map-like callable, such as `multiprocessing.Pool.map` for evaluating\nany numerical differentiation in parallel.\nThis evaluation is carried out as ``workers(fun, iterable)``.\n\n.. versionadded:: 1.16.0",
                    "type": "map-like callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y1xrxloi",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.minpack.least_squares",
                    "defaultValue": "scipy.optimize.minpack.least_squares",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jsukumot",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "16ifikcn",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "v5uib6aq",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bgrqqdeo",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize.minpack",
                    "defaultValue": "scipy.optimize.minpack",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xbqhggnj",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2u7u94sv",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "d26kxtc6",
            "name": "minpack.leastsq",
            "description": "Minimize the sum of squares of a set of equations.\n    \n    ::\n    \n        x = arg min(sum(func(y)**2,axis=0))\n                 y\n    \n    Parameters\n    ----------\n    func : callable\n        Should take at least one (possibly length ``N`` vector) argument and\n        returns ``M`` floating point numbers. It must not return NaNs or\n        fitting might fail. ``M`` must be greater than or equal to ``N``.\n    x0 : ndarray\n        The starting estimate for the minimization.\n    args : tuple, optional\n        Any extra arguments to func are placed in this tuple.\n    Dfun : callable, optional\n        A function or method to compute the Jacobian of func with derivatives\n        across the rows. If this is None, the Jacobian will be estimated.\n    full_output : bool, optional\n        If ``True``, return all optional outputs (not just `x` and `ier`).\n    col_deriv : bool, optional\n        If ``True``, specify that the Jacobian function computes derivatives\n        down the columns (faster, because there is no transpose operation).\n    ftol : float, optional\n        Relative error desired in the sum of squares.\n    xtol : float, optional\n        Relative error desired in the approximate solution.\n    gtol : float, optional\n        Orthogonality desired between the function vector and the columns of\n        the Jacobian.\n    maxfev : int, optional\n        The maximum number of calls to the function. If `Dfun` is provided,\n        then the default `maxfev` is 100*(N+1) where N is the number of elements\n        in x0, otherwise the default `maxfev` is 200*(N+1).\n    epsfcn : float, optional\n        A variable used in determining a suitable step length for the forward-\n        difference approximation of the Jacobian (for Dfun=None).\n        Normally the actual step length will be sqrt(epsfcn)*x\n        If epsfcn is less than the machine precision, it is assumed that the\n        relative errors are of the order of the machine precision.\n    factor : float, optional\n        A parameter determining the initial step bound\n        (``factor * || diag * x||``). Should be in interval ``(0.1, 100)``.\n    diag : sequence, optional\n        N positive entries that serve as a scale factors for the variables.\n    \n    Returns\n    -------\n    x : ndarray\n        The solution (or the result of the last iteration for an unsuccessful\n        call).\n    cov_x : ndarray\n        The inverse of the Hessian. `fjac` and `ipvt` are used to construct an\n        estimate of the Hessian. A value of None indicates a singular matrix,\n        which means the curvature in parameters `x` is numerically flat. To\n        obtain the covariance matrix of the parameters `x`, `cov_x` must be\n        multiplied by the variance of the residuals -- see curve_fit. Only\n        returned if `full_output` is ``True``.\n    infodict : dict\n        a dictionary of optional outputs with the keys:\n    \n        ``nfev``\n            The number of function calls\n        ``fvec``\n            The function evaluated at the output\n        ``fjac``\n            A permutation of the R matrix of a QR\n            factorization of the final approximate\n            Jacobian matrix, stored column wise.\n            Together with ipvt, the covariance of the\n            estimate can be approximated.\n        ``ipvt``\n            An integer array of length N which defines\n            a permutation matrix, p, such that\n            fjac*p = q*r, where r is upper triangular\n            with diagonal elements of nonincreasing\n            magnitude. Column j of p is column ipvt(j)\n            of the identity matrix.\n        ``qtf``\n            The vector (transpose(q) * fvec).\n    \n        Only returned if `full_output` is ``True``.\n    mesg : str\n        A string message giving information about the cause of failure.\n        Only returned if `full_output` is ``True``.\n    ier : int\n        An integer flag. If it is equal to 1, 2, 3 or 4, the solution was\n        found. Otherwise, the solution was not found. In either case, the\n        optional output variable 'mesg' gives more information.\n    \n    See Also\n    --------\n    least_squares : Newer interface to solve nonlinear least-squares problems\n        with bounds on the variables. See ``method='lm'`` in particular.\n    \n    Notes\n    -----\n    \"leastsq\" is a wrapper around MINPACK's lmdif and lmder algorithms.\n    \n    cov_x is a Jacobian approximation to the Hessian of the least squares\n    objective function.\n    This approximation assumes that the objective function is based on the\n    difference between some observed target data (ydata) and a (non-linear)\n    function of the parameters `f(xdata, params)` ::\n    \n           func(params) = ydata - f(xdata, params)\n    \n    so that the objective function is ::\n    \n           min   sum((ydata - f(xdata, params))**2, axis=0)\n         params\n    \n    The solution, `x`, is always a 1-D array, regardless of the shape of `x0`,\n    or whether `x0` is a scalar.\n    \n    Examples\n    --------\n    >>> from scipy.optimize import leastsq\n    >>> def func(x):\n    ...     return 2*(x-3)**2+1\n    >>> leastsq(func, 0)\n    (array([2.99999999]), 1)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "92c3b18633c66f8d1fa800244abf89b4a99b1d4b65c74c42c7591236594f987e",
            "fields": [
                {
                    "id": "b69bp0y3",
                    "encoding": "",
                    "name": "func",
                    "value": "",
                    "defaultValue": "",
                    "description": "Should take at least one (possibly length ``N`` vector) argument and\nreturns ``M`` floating point numbers. It must not return NaNs or\nfitting might fail. ``M`` must be greater than or equal to ``N``.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c0i83lkg",
                    "encoding": "",
                    "name": "x0",
                    "value": "",
                    "defaultValue": "",
                    "description": "The starting estimate for the minimization.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "20vj3gq4",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Any extra arguments to func are placed in this tuple.",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t4t3_p0p",
                    "encoding": "",
                    "name": "Dfun",
                    "value": "",
                    "defaultValue": "",
                    "description": "A function or method to compute the Jacobian of func with derivatives\nacross the rows. If this is None, the Jacobian will be estimated.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q4e65uyl",
                    "encoding": "",
                    "name": "full_output",
                    "value": false,
                    "defaultValue": false,
                    "description": "If ``True``, return all optional outputs (not just `x` and `ier`).",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tp4yzrje",
                    "encoding": "",
                    "name": "col_deriv",
                    "value": false,
                    "defaultValue": false,
                    "description": "If ``True``, specify that the Jacobian function computes derivatives\ndown the columns (faster, because there is no transpose operation).",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dm5uqdb7",
                    "encoding": "",
                    "name": "ftol",
                    "value": 1.49012e-08,
                    "defaultValue": 1.49012e-08,
                    "description": "Relative error desired in the sum of squares.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3tuuenvb",
                    "encoding": "",
                    "name": "xtol",
                    "value": 1.49012e-08,
                    "defaultValue": 1.49012e-08,
                    "description": "Relative error desired in the approximate solution.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "joww32hs",
                    "encoding": "",
                    "name": "gtol",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Orthogonality desired between the function vector and the columns of\nthe Jacobian.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "65742u59",
                    "encoding": "",
                    "name": "maxfev",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "The maximum number of calls to the function. If `Dfun` is provided,\nthen the default `maxfev` is 100*(N+1) where N is the number of elements\nin x0, otherwise the default `maxfev` is 200*(N+1).",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eaj0rjma",
                    "encoding": "",
                    "name": "epsfcn",
                    "value": "",
                    "defaultValue": "",
                    "description": "A variable used in determining a suitable step length for the forward-\ndifference approximation of the Jacobian (for Dfun=None).\nNormally the actual step length will be sqrt(epsfcn)*x\nIf epsfcn is less than the machine precision, it is assumed that the\nrelative errors are of the order of the machine precision.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gzssvz1v",
                    "encoding": "",
                    "name": "factor",
                    "value": 100,
                    "defaultValue": 100,
                    "description": "A parameter determining the initial step bound\n(``factor * || diag * x||``). Should be in interval ``(0.1, 100)``.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tlssd2xt",
                    "encoding": "",
                    "name": "diag",
                    "value": "",
                    "defaultValue": "",
                    "description": "N positive entries that serve as a scale factors for the variables.",
                    "type": "sequence",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4hj80hqf",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.minpack.leastsq",
                    "defaultValue": "scipy.optimize.minpack.leastsq",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jvwd6yae",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dpg1ftqq",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "vf18pnah",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "smlskmg4",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize.minpack",
                    "defaultValue": "scipy.optimize.minpack",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oam12vm_",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ptsj87uf",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "jmjvtpaz",
            "name": "minpack.zeros",
            "description": "Return a new array of given shape and type, filled with zeros.\n\nParameters\n----------\nshape : int or tuple of ints\n    Shape of the new array, e.g., ``(2, 3)`` or ``2``.\ndtype : data-type, optional\n    The desired data-type for the array, e.g., `numpy.int8`.  Default is\n    `numpy.float64`.\norder : {'C', 'F'}, optional, default: 'C'\n    Whether to store multi-dimensional data in row-major\n    (C-style) or column-major (Fortran-style) order in\n    memory.\nlike : array_like, optional\n    Reference object to allow the creation of arrays which are not\n    NumPy arrays. If an array-like passed in as ``like`` supports\n    the ``__array_function__`` protocol, the result will be defined\n    by it. In this case, it ensures the creation of an array object\n    compatible with that passed in via this argument.\n\n    .. versionadded:: 1.20.0\n\nReturns\n-------\nout : ndarray\n    Array of zeros with the given shape, dtype, and order.\n\nSee Also\n--------\nzeros_like : Return an array of zeros with shape and type of input.\nempty : Return a new uninitialized array.\nones : Return a new array setting values to one.\nfull : Return a new array of given shape filled with value.\n\nExamples\n--------\n>>> import numpy as np\n>>> np.zeros(5)\narray([ 0.,  0.,  0.,  0.,  0.])\n\n>>> np.zeros((5,), dtype=int)\narray([0, 0, 0, 0, 0])\n\n>>> np.zeros((2, 1))\narray([[ 0.],\n       [ 0.]])\n\n>>> s = (2,2)\n>>> np.zeros(s)\narray([[ 0.,  0.],\n       [ 0.,  0.]])\n\n>>> np.zeros((2,), dtype=[('x', 'i4'), ('y', 'i4')]) # custom dtype\narray([(0, 0), (0, 0)],\n      dtype=[('x', '<i4'), ('y', '<i4')])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c1ffd67cf995b8411989a0af8bd0933ee01e821a14ec0b35a5af5488b6999a81",
            "fields": [
                {
                    "id": "x8uzrqr8",
                    "encoding": "",
                    "name": "shape",
                    "value": "",
                    "defaultValue": "",
                    "description": "Shape of the new array, e.g., ``(2, 3)`` or ``2``.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u44ymo1c",
                    "encoding": "",
                    "name": "dtype",
                    "value": "float",
                    "defaultValue": "float",
                    "description": "The desired data-type for the array, e.g., `numpy.int8`.  Default is\n`numpy.float64`.",
                    "type": "typing.Any",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "clyws0_n",
                    "encoding": "",
                    "name": "order",
                    "value": "'C'",
                    "defaultValue": "'C'",
                    "description": "Whether to store multi-dimensional data in row-major\n(C-style) or column-major (Fortran-style) order in\nmemory.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_eqb2f1d",
                    "encoding": "",
                    "name": "like",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. versionadded:: 1.20.0",
                    "type": "typing.Any",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e85z0ymi",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.minpack.zeros",
                    "defaultValue": "scipy.optimize.minpack.zeros",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e0umd0oe",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8d77539s",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "6zodsa04",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hktikb4s",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize.minpack",
                    "defaultValue": "scipy.optimize.minpack",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j1s00oye",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rdj9gzgl",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "u9swxify",
            "name": "nonlin.anderson",
            "description": "Find a root of a function, using (extended) Anderson mixing.\n    \n    The Jacobian is formed by for a 'best' solution in the space\n    spanned by last `M` vectors. As a result, only a MxM matrix\n    inversions and MxN multiplications are required. [Ey]_\n    \n    Parameters\n    ----------\n    F : function(x) -> f\n        Function whose root to find; should take and return an array-like\n        object.\n    xin : array_like\n        Initial guess for the solution\n    alpha : float, optional\n        Initial guess for the Jacobian is (-1/alpha).\n    M : float, optional\n        Number of previous vectors to retain. Defaults to 5.\n    w0 : float, optional\n        Regularization parameter for numerical stability.\n        Compared to unity, good values of the order of 0.01.\n    iter : int, optional\n        Number of iterations to make. If omitted (default), make as many\n        as required to meet tolerances.\n    verbose : bool, optional\n        Print status to stdout on every iteration.\n    maxiter : int, optional\n        Maximum number of iterations to make. If more are needed to\n        meet convergence, `NoConvergence` is raised.\n    f_tol : float, optional\n        Absolute tolerance (in max-norm) for the residual.\n        If omitted, default is 6e-6.\n    f_rtol : float, optional\n        Relative tolerance for the residual. If omitted, not used.\n    x_tol : float, optional\n        Absolute minimum step size, as determined from the Jacobian\n        approximation. If the step size is smaller than this, optimization\n        is terminated as successful. If omitted, not used.\n    x_rtol : float, optional\n        Relative minimum step size. If omitted, not used.\n    tol_norm : function(vector) -> scalar, optional\n        Norm to use in convergence check. Default is the maximum norm.\n    line_search : {None, 'armijo' (default), 'wolfe'}, optional\n        Which type of a line search to use to determine the step size in the\n        direction given by the Jacobian approximation. Defaults to 'armijo'.\n    callback : function, optional\n        Optional callback function. It is called on every iteration as\n        ``callback(x, f)`` where `x` is the current solution and `f`\n        the corresponding residual.\n    \n    Returns\n    -------\n    sol : ndarray\n        An array (of similar array type as `x0`) containing the final solution.\n    \n    Raises\n    ------\n    NoConvergence\n        When a solution was not found.\n    \n    See Also\n    --------\n    root : Interface to root finding algorithms for multivariate\n           functions. See ``method='anderson'`` in particular.\n    \n    References\n    ----------\n    .. [Ey] V. Eyert, J. Comp. Phys., 124, 271 (1996).\n    \n    Examples\n    --------\n    The following functions define a system of nonlinear equations\n    \n    >>> def fun(x):\n    ...     return [x[0]  + 0.5 * (x[0] - x[1])**3 - 1.0,\n    ...             0.5 * (x[1] - x[0])**3 + x[1]]\n    \n    A solution can be obtained as follows.\n    \n    >>> from scipy import optimize\n    >>> sol = optimize.anderson(fun, [0, 0])\n    >>> sol\n    array([0.84116588, 0.15883789])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7b55f937b19b98b9f65c131995d6562b2f3cab6b0283705d22009ab108be06a5",
            "fields": [
                {
                    "id": "v8790_w3",
                    "encoding": "",
                    "name": "F",
                    "value": "",
                    "defaultValue": "",
                    "description": "Function whose root to find; should take and return an array-like\nobject.",
                    "type": "function(x) -> f",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4etzhr0y",
                    "encoding": "",
                    "name": "xin",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial guess for the solution",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bhqlt6jf",
                    "encoding": "",
                    "name": "iter",
                    "value": "",
                    "defaultValue": "",
                    "description": "Number of iterations to make. If omitted (default), make as many\nas required to meet tolerances.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o_umr963",
                    "encoding": "",
                    "name": "alpha",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial guess for the Jacobian is (-1/alpha).",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f2ejvdo6",
                    "encoding": "",
                    "name": "w0",
                    "value": 0.01,
                    "defaultValue": 0.01,
                    "description": "Regularization parameter for numerical stability.\nCompared to unity, good values of the order of 0.01.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wkks6pm5",
                    "encoding": "",
                    "name": "M",
                    "value": 5,
                    "defaultValue": 5,
                    "description": "Number of previous vectors to retain. Defaults to 5.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wnjjtjau",
                    "encoding": "",
                    "name": "verbose",
                    "value": false,
                    "defaultValue": false,
                    "description": "Print status to stdout on every iteration.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "acx6mp1a",
                    "encoding": "",
                    "name": "maxiter",
                    "value": "",
                    "defaultValue": "",
                    "description": "Maximum number of iterations to make. If more are needed to\nmeet convergence, `NoConvergence` is raised.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vbmrxhg5",
                    "encoding": "",
                    "name": "f_tol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Absolute tolerance (in max-norm) for the residual.\nIf omitted, default is 6e-6.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5o6fobwd",
                    "encoding": "",
                    "name": "f_rtol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Relative tolerance for the residual. If omitted, not used.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pzdadn6x",
                    "encoding": "",
                    "name": "x_tol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Absolute minimum step size, as determined from the Jacobian\napproximation. If the step size is smaller than this, optimization\nis terminated as successful. If omitted, not used.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4fqs0ooc",
                    "encoding": "",
                    "name": "x_rtol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Relative minimum step size. If omitted, not used.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_5dnrnl9",
                    "encoding": "",
                    "name": "tol_norm",
                    "value": "",
                    "defaultValue": "",
                    "description": "Norm to use in convergence check. Default is the maximum norm.",
                    "type": "function(vector) -> scalar",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vktkt3_x",
                    "encoding": "",
                    "name": "line_search",
                    "value": "armijo",
                    "defaultValue": "armijo",
                    "description": "Which type of a line search to use to determine the step size in the\ndirection given by the Jacobian approximation. Defaults to 'armijo'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yah_noew",
                    "encoding": "",
                    "name": "callback",
                    "value": "",
                    "defaultValue": "",
                    "description": "Optional callback function. It is called on every iteration as\n``callback(x, f)`` where `x` is the current solution and `f`\nthe corresponding residual.",
                    "type": "function",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vki949gp",
                    "encoding": "",
                    "name": "kw",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zl5mnvdj",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.nonlin.anderson",
                    "defaultValue": "scipy.optimize.nonlin.anderson",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0xeo7hxl",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3dva_9zi",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "zr3r5med",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1vx1jeiu",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize.nonlin",
                    "defaultValue": "scipy.optimize.nonlin",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gpk4fmip",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dc3iobts",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "leu0uwja",
            "name": "nonlin.broyden1",
            "description": "Find a root of a function, using Broyden's first Jacobian approximation.\n    \n    This method is also known as \"Broyden's good method\".\n    \n    Parameters\n    ----------\n    F : function(x) -> f\n        Function whose root to find; should take and return an array-like\n        object.\n    xin : array_like\n        Initial guess for the solution\n    alpha : float, optional\n        Initial guess for the Jacobian is ``(-1/alpha)``.\n    reduction_method : str or tuple, optional\n        Method used in ensuring that the rank of the Broyden matrix\n        stays low. Can either be a string giving the name of the method,\n        or a tuple of the form ``(method, param1, param2, ...)``\n        that gives the name of the method and values for additional parameters.\n    \n        Methods available:\n    \n        - ``restart``: drop all matrix columns. Has no extra parameters.\n        - ``simple``: drop oldest matrix column. Has no extra parameters.\n        - ``svd``: keep only the most significant SVD components.\n          Takes an extra parameter, ``to_retain``, which determines the\n          number of SVD components to retain when rank reduction is done.\n          Default is ``max_rank - 2``.\n    \n    max_rank : int, optional\n        Maximum rank for the Broyden matrix.\n        Default is infinity (i.e., no rank reduction).\n    iter : int, optional\n        Number of iterations to make. If omitted (default), make as many\n        as required to meet tolerances.\n    verbose : bool, optional\n        Print status to stdout on every iteration.\n    maxiter : int, optional\n        Maximum number of iterations to make. If more are needed to\n        meet convergence, `NoConvergence` is raised.\n    f_tol : float, optional\n        Absolute tolerance (in max-norm) for the residual.\n        If omitted, default is 6e-6.\n    f_rtol : float, optional\n        Relative tolerance for the residual. If omitted, not used.\n    x_tol : float, optional\n        Absolute minimum step size, as determined from the Jacobian\n        approximation. If the step size is smaller than this, optimization\n        is terminated as successful. If omitted, not used.\n    x_rtol : float, optional\n        Relative minimum step size. If omitted, not used.\n    tol_norm : function(vector) -> scalar, optional\n        Norm to use in convergence check. Default is the maximum norm.\n    line_search : {None, 'armijo' (default), 'wolfe'}, optional\n        Which type of a line search to use to determine the step size in the\n        direction given by the Jacobian approximation. Defaults to 'armijo'.\n    callback : function, optional\n        Optional callback function. It is called on every iteration as\n        ``callback(x, f)`` where `x` is the current solution and `f`\n        the corresponding residual.\n    \n    Returns\n    -------\n    sol : ndarray\n        An array (of similar array type as `x0`) containing the final solution.\n    \n    Raises\n    ------\n    NoConvergence\n        When a solution was not found.\n    \n    See Also\n    --------\n    root : Interface to root finding algorithms for multivariate\n           functions. See ``method='broyden1'`` in particular.\n    \n    Notes\n    -----\n    This algorithm implements the inverse Jacobian Quasi-Newton update\n    \n    .. math:: H_+ = H + (dx - H df) dx^\\dagger H / ( dx^\\dagger H df)\n    \n    which corresponds to Broyden's first Jacobian update\n    \n    .. math:: J_+ = J + (df - J dx) dx^\\dagger / dx^\\dagger dx\n    \n    \n    References\n    ----------\n    .. [1] B.A. van der Rotten, PhD thesis,\n       \"A limited memory Broyden method to solve high-dimensional\n       systems of nonlinear equations\". Mathematisch Instituut,\n       Universiteit Leiden, The Netherlands (2003).\n       https://math.leidenuniv.nl/scripties/Rotten.pdf\n    \n    Examples\n    --------\n    The following functions define a system of nonlinear equations\n    \n    >>> def fun(x):\n    ...     return [x[0]  + 0.5 * (x[0] - x[1])**3 - 1.0,\n    ...             0.5 * (x[1] - x[0])**3 + x[1]]\n    \n    A solution can be obtained as follows.\n    \n    >>> from scipy import optimize\n    >>> sol = optimize.broyden1(fun, [0, 0])\n    >>> sol\n    array([0.84116396, 0.15883641])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1a9ebe8280d08bb3633410fe68ae386a6aa1f7d1eba05198a33bb047aed04e8f",
            "fields": [
                {
                    "id": "wtvo0n6i",
                    "encoding": "",
                    "name": "F",
                    "value": "",
                    "defaultValue": "",
                    "description": "Function whose root to find; should take and return an array-like\nobject.",
                    "type": "function(x) -> f",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wxpvvaay",
                    "encoding": "",
                    "name": "xin",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial guess for the solution",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xidyr17i",
                    "encoding": "",
                    "name": "iter",
                    "value": "",
                    "defaultValue": "",
                    "description": "Number of iterations to make. If omitted (default), make as many\nas required to meet tolerances.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tqq8d_5z",
                    "encoding": "",
                    "name": "alpha",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial guess for the Jacobian is ``(-1/alpha)``.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j6yanby_",
                    "encoding": "",
                    "name": "reduction_method",
                    "value": "restart",
                    "defaultValue": "restart",
                    "description": "Method used in ensuring that the rank of the Broyden matrix\nstays low. Can either be a string giving the name of the method,\nor a tuple of the form ``(method, param1, param2, ...)``\nthat gives the name of the method and values for additional parameters.\n\nMethods available:\n\n- ``restart``: drop all matrix columns. Has no extra parameters.\n- ``simple``: drop oldest matrix column. Has no extra parameters.\n- ``svd``: keep only the most significant SVD components.\n  Takes an extra parameter, ``to_retain``, which determines the\n  number of SVD components to retain when rank reduction is done.\n  Default is ``max_rank - 2``.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kob22fc4",
                    "encoding": "",
                    "name": "max_rank",
                    "value": "",
                    "defaultValue": "",
                    "description": "Maximum rank for the Broyden matrix.\nDefault is infinity (i.e., no rank reduction).",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7s4zlw6d",
                    "encoding": "",
                    "name": "verbose",
                    "value": false,
                    "defaultValue": false,
                    "description": "Print status to stdout on every iteration.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cplughva",
                    "encoding": "",
                    "name": "maxiter",
                    "value": "",
                    "defaultValue": "",
                    "description": "Maximum number of iterations to make. If more are needed to\nmeet convergence, `NoConvergence` is raised.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kkfw7kqb",
                    "encoding": "",
                    "name": "f_tol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Absolute tolerance (in max-norm) for the residual.\nIf omitted, default is 6e-6.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0ddjg1n8",
                    "encoding": "",
                    "name": "f_rtol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Relative tolerance for the residual. If omitted, not used.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qqy202w6",
                    "encoding": "",
                    "name": "x_tol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Absolute minimum step size, as determined from the Jacobian\napproximation. If the step size is smaller than this, optimization\nis terminated as successful. If omitted, not used.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mpciuby2",
                    "encoding": "",
                    "name": "x_rtol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Relative minimum step size. If omitted, not used.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ikijkhql",
                    "encoding": "",
                    "name": "tol_norm",
                    "value": "",
                    "defaultValue": "",
                    "description": "Norm to use in convergence check. Default is the maximum norm.",
                    "type": "function(vector) -> scalar",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yst_3ejy",
                    "encoding": "",
                    "name": "line_search",
                    "value": "armijo",
                    "defaultValue": "armijo",
                    "description": "Which type of a line search to use to determine the step size in the\ndirection given by the Jacobian approximation. Defaults to 'armijo'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0c9m1aoh",
                    "encoding": "",
                    "name": "callback",
                    "value": "",
                    "defaultValue": "",
                    "description": "Optional callback function. It is called on every iteration as\n``callback(x, f)`` where `x` is the current solution and `f`\nthe corresponding residual.",
                    "type": "function",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xt6n_zob",
                    "encoding": "",
                    "name": "kw",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z3_1u5xy",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.nonlin.broyden1",
                    "defaultValue": "scipy.optimize.nonlin.broyden1",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t6tcpgr8",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tntemf11",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "fe84neid",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ohykqicl",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize.nonlin",
                    "defaultValue": "scipy.optimize.nonlin",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uwuz90o_",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jo_a0i6y",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "te1hawps",
            "name": "nonlin.broyden2",
            "description": "Find a root of a function, using Broyden's second Jacobian approximation.\n    \n    This method is also known as \"Broyden's bad method\".\n    \n    Parameters\n    ----------\n    F : function(x) -> f\n        Function whose root to find; should take and return an array-like\n        object.\n    xin : array_like\n        Initial guess for the solution\n    alpha : float, optional\n        Initial guess for the Jacobian is ``(-1/alpha)``.\n    reduction_method : str or tuple, optional\n        Method used in ensuring that the rank of the Broyden matrix\n        stays low. Can either be a string giving the name of the method,\n        or a tuple of the form ``(method, param1, param2, ...)``\n        that gives the name of the method and values for additional parameters.\n    \n        Methods available:\n    \n        - ``restart``: drop all matrix columns. Has no extra parameters.\n        - ``simple``: drop oldest matrix column. Has no extra parameters.\n        - ``svd``: keep only the most significant SVD components.\n          Takes an extra parameter, ``to_retain``, which determines the\n          number of SVD components to retain when rank reduction is done.\n          Default is ``max_rank - 2``.\n    \n    max_rank : int, optional\n        Maximum rank for the Broyden matrix.\n        Default is infinity (i.e., no rank reduction).\n    iter : int, optional\n        Number of iterations to make. If omitted (default), make as many\n        as required to meet tolerances.\n    verbose : bool, optional\n        Print status to stdout on every iteration.\n    maxiter : int, optional\n        Maximum number of iterations to make. If more are needed to\n        meet convergence, `NoConvergence` is raised.\n    f_tol : float, optional\n        Absolute tolerance (in max-norm) for the residual.\n        If omitted, default is 6e-6.\n    f_rtol : float, optional\n        Relative tolerance for the residual. If omitted, not used.\n    x_tol : float, optional\n        Absolute minimum step size, as determined from the Jacobian\n        approximation. If the step size is smaller than this, optimization\n        is terminated as successful. If omitted, not used.\n    x_rtol : float, optional\n        Relative minimum step size. If omitted, not used.\n    tol_norm : function(vector) -> scalar, optional\n        Norm to use in convergence check. Default is the maximum norm.\n    line_search : {None, 'armijo' (default), 'wolfe'}, optional\n        Which type of a line search to use to determine the step size in the\n        direction given by the Jacobian approximation. Defaults to 'armijo'.\n    callback : function, optional\n        Optional callback function. It is called on every iteration as\n        ``callback(x, f)`` where `x` is the current solution and `f`\n        the corresponding residual.\n    \n    Returns\n    -------\n    sol : ndarray\n        An array (of similar array type as `x0`) containing the final solution.\n    \n    Raises\n    ------\n    NoConvergence\n        When a solution was not found.\n    \n    See Also\n    --------\n    root : Interface to root finding algorithms for multivariate\n           functions. See ``method='broyden2'`` in particular.\n    \n    Notes\n    -----\n    This algorithm implements the inverse Jacobian Quasi-Newton update\n    \n    .. math:: H_+ = H + (dx - H df) df^\\dagger / ( df^\\dagger df)\n    \n    corresponding to Broyden's second method.\n    \n    References\n    ----------\n    .. [1] B.A. van der Rotten, PhD thesis,\n       \"A limited memory Broyden method to solve high-dimensional\n       systems of nonlinear equations\". Mathematisch Instituut,\n       Universiteit Leiden, The Netherlands (2003).\n    \n       https://web.archive.org/web/20161022015821/http://www.math.leidenuniv.nl/scripties/Rotten.pdf\n    \n    Examples\n    --------\n    The following functions define a system of nonlinear equations\n    \n    >>> def fun(x):\n    ...     return [x[0]  + 0.5 * (x[0] - x[1])**3 - 1.0,\n    ...             0.5 * (x[1] - x[0])**3 + x[1]]\n    \n    A solution can be obtained as follows.\n    \n    >>> from scipy import optimize\n    >>> sol = optimize.broyden2(fun, [0, 0])\n    >>> sol\n    array([0.84116365, 0.15883529])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "3251e2269745832afa103ad8a1eca8196bc8a2cf985990305a4e88f2612b0694",
            "fields": [
                {
                    "id": "urpq9i4c",
                    "encoding": "",
                    "name": "F",
                    "value": "",
                    "defaultValue": "",
                    "description": "Function whose root to find; should take and return an array-like\nobject.",
                    "type": "function(x) -> f",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_hwgfqu2",
                    "encoding": "",
                    "name": "xin",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial guess for the solution",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cbx3menj",
                    "encoding": "",
                    "name": "iter",
                    "value": "",
                    "defaultValue": "",
                    "description": "Number of iterations to make. If omitted (default), make as many\nas required to meet tolerances.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2_jonwc8",
                    "encoding": "",
                    "name": "alpha",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial guess for the Jacobian is ``(-1/alpha)``.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z73bnxha",
                    "encoding": "",
                    "name": "reduction_method",
                    "value": "restart",
                    "defaultValue": "restart",
                    "description": "Method used in ensuring that the rank of the Broyden matrix\nstays low. Can either be a string giving the name of the method,\nor a tuple of the form ``(method, param1, param2, ...)``\nthat gives the name of the method and values for additional parameters.\n\nMethods available:\n\n- ``restart``: drop all matrix columns. Has no extra parameters.\n- ``simple``: drop oldest matrix column. Has no extra parameters.\n- ``svd``: keep only the most significant SVD components.\n  Takes an extra parameter, ``to_retain``, which determines the\n  number of SVD components to retain when rank reduction is done.\n  Default is ``max_rank - 2``.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hvg4v5a7",
                    "encoding": "",
                    "name": "max_rank",
                    "value": "",
                    "defaultValue": "",
                    "description": "Maximum rank for the Broyden matrix.\nDefault is infinity (i.e., no rank reduction).",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ep58evxs",
                    "encoding": "",
                    "name": "verbose",
                    "value": false,
                    "defaultValue": false,
                    "description": "Print status to stdout on every iteration.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m_gkq090",
                    "encoding": "",
                    "name": "maxiter",
                    "value": "",
                    "defaultValue": "",
                    "description": "Maximum number of iterations to make. If more are needed to\nmeet convergence, `NoConvergence` is raised.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a1q7ouvs",
                    "encoding": "",
                    "name": "f_tol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Absolute tolerance (in max-norm) for the residual.\nIf omitted, default is 6e-6.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ujcdr04c",
                    "encoding": "",
                    "name": "f_rtol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Relative tolerance for the residual. If omitted, not used.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3nucc7mg",
                    "encoding": "",
                    "name": "x_tol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Absolute minimum step size, as determined from the Jacobian\napproximation. If the step size is smaller than this, optimization\nis terminated as successful. If omitted, not used.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "clv61o44",
                    "encoding": "",
                    "name": "x_rtol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Relative minimum step size. If omitted, not used.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4ixahj1i",
                    "encoding": "",
                    "name": "tol_norm",
                    "value": "",
                    "defaultValue": "",
                    "description": "Norm to use in convergence check. Default is the maximum norm.",
                    "type": "function(vector) -> scalar",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a_0abt_m",
                    "encoding": "",
                    "name": "line_search",
                    "value": "armijo",
                    "defaultValue": "armijo",
                    "description": "Which type of a line search to use to determine the step size in the\ndirection given by the Jacobian approximation. Defaults to 'armijo'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y5e6vjtv",
                    "encoding": "",
                    "name": "callback",
                    "value": "",
                    "defaultValue": "",
                    "description": "Optional callback function. It is called on every iteration as\n``callback(x, f)`` where `x` is the current solution and `f`\nthe corresponding residual.",
                    "type": "function",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_vle0929",
                    "encoding": "",
                    "name": "kw",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xxgcv3th",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.nonlin.broyden2",
                    "defaultValue": "scipy.optimize.nonlin.broyden2",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2dvpvk85",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zvskq16u",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "783vz4dr",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m_5_5fwd",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize.nonlin",
                    "defaultValue": "scipy.optimize.nonlin",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kqfksnaj",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "brwz2yfj",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "fum2zndp",
            "name": "nonlin.diagbroyden",
            "description": "Find a root of a function, using diagonal Broyden Jacobian approximation.\n    \n    The Jacobian approximation is derived from previous iterations, by\n    retaining only the diagonal of Broyden matrices.\n    \n    .. warning::\n    \n       This algorithm may be useful for specific problems, but whether\n       it will work may depend strongly on the problem.\n    \n    Parameters\n    ----------\n    F : function(x) -> f\n        Function whose root to find; should take and return an array-like\n        object.\n    xin : array_like\n        Initial guess for the solution\n    alpha : float, optional\n        Initial guess for the Jacobian is (-1/alpha).\n    iter : int, optional\n        Number of iterations to make. If omitted (default), make as many\n        as required to meet tolerances.\n    verbose : bool, optional\n        Print status to stdout on every iteration.\n    maxiter : int, optional\n        Maximum number of iterations to make. If more are needed to\n        meet convergence, `NoConvergence` is raised.\n    f_tol : float, optional\n        Absolute tolerance (in max-norm) for the residual.\n        If omitted, default is 6e-6.\n    f_rtol : float, optional\n        Relative tolerance for the residual. If omitted, not used.\n    x_tol : float, optional\n        Absolute minimum step size, as determined from the Jacobian\n        approximation. If the step size is smaller than this, optimization\n        is terminated as successful. If omitted, not used.\n    x_rtol : float, optional\n        Relative minimum step size. If omitted, not used.\n    tol_norm : function(vector) -> scalar, optional\n        Norm to use in convergence check. Default is the maximum norm.\n    line_search : {None, 'armijo' (default), 'wolfe'}, optional\n        Which type of a line search to use to determine the step size in the\n        direction given by the Jacobian approximation. Defaults to 'armijo'.\n    callback : function, optional\n        Optional callback function. It is called on every iteration as\n        ``callback(x, f)`` where `x` is the current solution and `f`\n        the corresponding residual.\n    \n    Returns\n    -------\n    sol : ndarray\n        An array (of similar array type as `x0`) containing the final solution.\n    \n    Raises\n    ------\n    NoConvergence\n        When a solution was not found.\n    \n    See Also\n    --------\n    root : Interface to root finding algorithms for multivariate\n           functions. See ``method='diagbroyden'`` in particular.\n    \n    Examples\n    --------\n    The following functions define a system of nonlinear equations\n    \n    >>> def fun(x):\n    ...     return [x[0]  + 0.5 * (x[0] - x[1])**3 - 1.0,\n    ...             0.5 * (x[1] - x[0])**3 + x[1]]\n    \n    A solution can be obtained as follows.\n    \n    >>> from scipy import optimize\n    >>> sol = optimize.diagbroyden(fun, [0, 0])\n    >>> sol\n    array([0.84116403, 0.15883384])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c84aa640227c666ef2d2467932034ba70cf566ce35ea93ec330c6259fba339c0",
            "fields": [
                {
                    "id": "y0i3dbah",
                    "encoding": "",
                    "name": "F",
                    "value": "",
                    "defaultValue": "",
                    "description": "Function whose root to find; should take and return an array-like\nobject.",
                    "type": "function(x) -> f",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i_b23xgi",
                    "encoding": "",
                    "name": "xin",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial guess for the solution",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6_wwm2x6",
                    "encoding": "",
                    "name": "iter",
                    "value": "",
                    "defaultValue": "",
                    "description": "Number of iterations to make. If omitted (default), make as many\nas required to meet tolerances.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h7p8dhta",
                    "encoding": "",
                    "name": "alpha",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial guess for the Jacobian is (-1/alpha).",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q5lemyr7",
                    "encoding": "",
                    "name": "verbose",
                    "value": false,
                    "defaultValue": false,
                    "description": "Print status to stdout on every iteration.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o8cf_k06",
                    "encoding": "",
                    "name": "maxiter",
                    "value": "",
                    "defaultValue": "",
                    "description": "Maximum number of iterations to make. If more are needed to\nmeet convergence, `NoConvergence` is raised.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "azrvs3ga",
                    "encoding": "",
                    "name": "f_tol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Absolute tolerance (in max-norm) for the residual.\nIf omitted, default is 6e-6.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2pxp5wq7",
                    "encoding": "",
                    "name": "f_rtol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Relative tolerance for the residual. If omitted, not used.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u8x0zf2q",
                    "encoding": "",
                    "name": "x_tol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Absolute minimum step size, as determined from the Jacobian\napproximation. If the step size is smaller than this, optimization\nis terminated as successful. If omitted, not used.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t5f_gmip",
                    "encoding": "",
                    "name": "x_rtol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Relative minimum step size. If omitted, not used.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "olekq52q",
                    "encoding": "",
                    "name": "tol_norm",
                    "value": "",
                    "defaultValue": "",
                    "description": "Norm to use in convergence check. Default is the maximum norm.",
                    "type": "function(vector) -> scalar",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z2fr59fs",
                    "encoding": "",
                    "name": "line_search",
                    "value": "armijo",
                    "defaultValue": "armijo",
                    "description": "Which type of a line search to use to determine the step size in the\ndirection given by the Jacobian approximation. Defaults to 'armijo'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yrwigl5j",
                    "encoding": "",
                    "name": "callback",
                    "value": "",
                    "defaultValue": "",
                    "description": "Optional callback function. It is called on every iteration as\n``callback(x, f)`` where `x` is the current solution and `f`\nthe corresponding residual.",
                    "type": "function",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qqgtd9cy",
                    "encoding": "",
                    "name": "kw",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "akx8bv1r",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.nonlin.diagbroyden",
                    "defaultValue": "scipy.optimize.nonlin.diagbroyden",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dmvt9bvb",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nc3twq4w",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "b_8v1x8y",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vqvxao63",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize.nonlin",
                    "defaultValue": "scipy.optimize.nonlin",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a0xb_nzd",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sw4a85by",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ymdqgta8",
            "name": "nonlin.excitingmixing",
            "description": "Find a root of a function, using a tuned diagonal Jacobian approximation.\n    \n    The Jacobian matrix is diagonal and is tuned on each iteration.\n    \n    .. warning::\n    \n       This algorithm may be useful for specific problems, but whether\n       it will work may depend strongly on the problem.\n    \n    See Also\n    --------\n    root : Interface to root finding algorithms for multivariate\n           functions. See ``method='excitingmixing'`` in particular.\n    \n    Parameters\n    ----------\n    F : function(x) -> f\n        Function whose root to find; should take and return an array-like\n        object.\n    xin : array_like\n        Initial guess for the solution\n    alpha : float, optional\n        Initial Jacobian approximation is (-1/alpha).\n    alphamax : float, optional\n        The entries of the diagonal Jacobian are kept in the range\n        ``[alpha, alphamax]``.\n    iter : int, optional\n        Number of iterations to make. If omitted (default), make as many\n        as required to meet tolerances.\n    verbose : bool, optional\n        Print status to stdout on every iteration.\n    maxiter : int, optional\n        Maximum number of iterations to make. If more are needed to\n        meet convergence, `NoConvergence` is raised.\n    f_tol : float, optional\n        Absolute tolerance (in max-norm) for the residual.\n        If omitted, default is 6e-6.\n    f_rtol : float, optional\n        Relative tolerance for the residual. If omitted, not used.\n    x_tol : float, optional\n        Absolute minimum step size, as determined from the Jacobian\n        approximation. If the step size is smaller than this, optimization\n        is terminated as successful. If omitted, not used.\n    x_rtol : float, optional\n        Relative minimum step size. If omitted, not used.\n    tol_norm : function(vector) -> scalar, optional\n        Norm to use in convergence check. Default is the maximum norm.\n    line_search : {None, 'armijo' (default), 'wolfe'}, optional\n        Which type of a line search to use to determine the step size in the\n        direction given by the Jacobian approximation. Defaults to 'armijo'.\n    callback : function, optional\n        Optional callback function. It is called on every iteration as\n        ``callback(x, f)`` where `x` is the current solution and `f`\n        the corresponding residual.\n    \n    Returns\n    -------\n    sol : ndarray\n        An array (of similar array type as `x0`) containing the final solution.\n    \n    Raises\n    ------\n    NoConvergence\n        When a solution was not found.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a8146bb6f8f233a727d0caae213370b5e5d1a15a2b4f52387aeced81e70e0e15",
            "fields": [
                {
                    "id": "2s_cdmjv",
                    "encoding": "",
                    "name": "F",
                    "value": "",
                    "defaultValue": "",
                    "description": "Function whose root to find; should take and return an array-like\nobject.",
                    "type": "function(x) -> f",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3254w_6d",
                    "encoding": "",
                    "name": "xin",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial guess for the solution",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8vrrk6dr",
                    "encoding": "",
                    "name": "iter",
                    "value": "",
                    "defaultValue": "",
                    "description": "Number of iterations to make. If omitted (default), make as many\nas required to meet tolerances.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s499qgw7",
                    "encoding": "",
                    "name": "alpha",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial Jacobian approximation is (-1/alpha).",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pkgrje8t",
                    "encoding": "",
                    "name": "alphamax",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "The entries of the diagonal Jacobian are kept in the range\n``[alpha, alphamax]``.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ynv2rzpq",
                    "encoding": "",
                    "name": "verbose",
                    "value": false,
                    "defaultValue": false,
                    "description": "Print status to stdout on every iteration.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0c_skd1r",
                    "encoding": "",
                    "name": "maxiter",
                    "value": "",
                    "defaultValue": "",
                    "description": "Maximum number of iterations to make. If more are needed to\nmeet convergence, `NoConvergence` is raised.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m8lr9cbg",
                    "encoding": "",
                    "name": "f_tol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Absolute tolerance (in max-norm) for the residual.\nIf omitted, default is 6e-6.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h0esclv9",
                    "encoding": "",
                    "name": "f_rtol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Relative tolerance for the residual. If omitted, not used.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4y4inr47",
                    "encoding": "",
                    "name": "x_tol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Absolute minimum step size, as determined from the Jacobian\napproximation. If the step size is smaller than this, optimization\nis terminated as successful. If omitted, not used.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jrlw0gv9",
                    "encoding": "",
                    "name": "x_rtol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Relative minimum step size. If omitted, not used.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xl8wdxl4",
                    "encoding": "",
                    "name": "tol_norm",
                    "value": "",
                    "defaultValue": "",
                    "description": "Norm to use in convergence check. Default is the maximum norm.",
                    "type": "function(vector) -> scalar",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "61o41772",
                    "encoding": "",
                    "name": "line_search",
                    "value": "armijo",
                    "defaultValue": "armijo",
                    "description": "Which type of a line search to use to determine the step size in the\ndirection given by the Jacobian approximation. Defaults to 'armijo'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qf0tqd0j",
                    "encoding": "",
                    "name": "callback",
                    "value": "",
                    "defaultValue": "",
                    "description": "Optional callback function. It is called on every iteration as\n``callback(x, f)`` where `x` is the current solution and `f`\nthe corresponding residual.",
                    "type": "function",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "owizkq0i",
                    "encoding": "",
                    "name": "kw",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ofmalwzp",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.nonlin.excitingmixing",
                    "defaultValue": "scipy.optimize.nonlin.excitingmixing",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "co9dlkzo",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9vg96uyb",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "3s5ymw4b",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jd4hdi43",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize.nonlin",
                    "defaultValue": "scipy.optimize.nonlin",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0stsll9g",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ft76870q",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "2kltpmyk",
            "name": "nonlin.linearmixing",
            "description": "Find a root of a function, using a scalar Jacobian approximation.\n    \n    .. warning::\n    \n       This algorithm may be useful for specific problems, but whether\n       it will work may depend strongly on the problem.\n    \n    Parameters\n    ----------\n    F : function(x) -> f\n        Function whose root to find; should take and return an array-like\n        object.\n    xin : array_like\n        Initial guess for the solution\n    alpha : float, optional\n        The Jacobian approximation is (-1/alpha).\n    iter : int, optional\n        Number of iterations to make. If omitted (default), make as many\n        as required to meet tolerances.\n    verbose : bool, optional\n        Print status to stdout on every iteration.\n    maxiter : int, optional\n        Maximum number of iterations to make. If more are needed to\n        meet convergence, `NoConvergence` is raised.\n    f_tol : float, optional\n        Absolute tolerance (in max-norm) for the residual.\n        If omitted, default is 6e-6.\n    f_rtol : float, optional\n        Relative tolerance for the residual. If omitted, not used.\n    x_tol : float, optional\n        Absolute minimum step size, as determined from the Jacobian\n        approximation. If the step size is smaller than this, optimization\n        is terminated as successful. If omitted, not used.\n    x_rtol : float, optional\n        Relative minimum step size. If omitted, not used.\n    tol_norm : function(vector) -> scalar, optional\n        Norm to use in convergence check. Default is the maximum norm.\n    line_search : {None, 'armijo' (default), 'wolfe'}, optional\n        Which type of a line search to use to determine the step size in the\n        direction given by the Jacobian approximation. Defaults to 'armijo'.\n    callback : function, optional\n        Optional callback function. It is called on every iteration as\n        ``callback(x, f)`` where `x` is the current solution and `f`\n        the corresponding residual.\n    \n    Returns\n    -------\n    sol : ndarray\n        An array (of similar array type as `x0`) containing the final solution.\n    \n    Raises\n    ------\n    NoConvergence\n        When a solution was not found.\n    \n    See Also\n    --------\n    root : Interface to root finding algorithms for multivariate\n           functions. See ``method='linearmixing'`` in particular.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5daa55ebfe3a62562ae5f752af8f2b2dee1fbf4381dedef135f00e2f04203be4",
            "fields": [
                {
                    "id": "xt3tbn52",
                    "encoding": "",
                    "name": "F",
                    "value": "",
                    "defaultValue": "",
                    "description": "Function whose root to find; should take and return an array-like\nobject.",
                    "type": "function(x) -> f",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ny6uzex_",
                    "encoding": "",
                    "name": "xin",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial guess for the solution",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "36tndaew",
                    "encoding": "",
                    "name": "iter",
                    "value": "",
                    "defaultValue": "",
                    "description": "Number of iterations to make. If omitted (default), make as many\nas required to meet tolerances.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rq6ivrsr",
                    "encoding": "",
                    "name": "alpha",
                    "value": "",
                    "defaultValue": "",
                    "description": "The Jacobian approximation is (-1/alpha).",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0gzajub_",
                    "encoding": "",
                    "name": "verbose",
                    "value": false,
                    "defaultValue": false,
                    "description": "Print status to stdout on every iteration.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nld4ndz_",
                    "encoding": "",
                    "name": "maxiter",
                    "value": "",
                    "defaultValue": "",
                    "description": "Maximum number of iterations to make. If more are needed to\nmeet convergence, `NoConvergence` is raised.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "stfj6kfq",
                    "encoding": "",
                    "name": "f_tol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Absolute tolerance (in max-norm) for the residual.\nIf omitted, default is 6e-6.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ptlt6qfr",
                    "encoding": "",
                    "name": "f_rtol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Relative tolerance for the residual. If omitted, not used.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ga1b0dp_",
                    "encoding": "",
                    "name": "x_tol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Absolute minimum step size, as determined from the Jacobian\napproximation. If the step size is smaller than this, optimization\nis terminated as successful. If omitted, not used.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "873hv3y3",
                    "encoding": "",
                    "name": "x_rtol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Relative minimum step size. If omitted, not used.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vuof1wbx",
                    "encoding": "",
                    "name": "tol_norm",
                    "value": "",
                    "defaultValue": "",
                    "description": "Norm to use in convergence check. Default is the maximum norm.",
                    "type": "function(vector) -> scalar",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bh1dgjct",
                    "encoding": "",
                    "name": "line_search",
                    "value": "armijo",
                    "defaultValue": "armijo",
                    "description": "Which type of a line search to use to determine the step size in the\ndirection given by the Jacobian approximation. Defaults to 'armijo'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fendv63c",
                    "encoding": "",
                    "name": "callback",
                    "value": "",
                    "defaultValue": "",
                    "description": "Optional callback function. It is called on every iteration as\n``callback(x, f)`` where `x` is the current solution and `f`\nthe corresponding residual.",
                    "type": "function",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pokd1peb",
                    "encoding": "",
                    "name": "kw",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k5hc43i3",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.nonlin.linearmixing",
                    "defaultValue": "scipy.optimize.nonlin.linearmixing",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lasz_gbf",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p8w5jx6c",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "sqmhchyt",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yr85y6z9",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize.nonlin",
                    "defaultValue": "scipy.optimize.nonlin",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k6lr_9e_",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "40rd8i1n",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "pek85_9f",
            "name": "nonlin.newton_krylov",
            "description": "Find a root of a function, using Krylov approximation for inverse Jacobian.\n    \n    This method is suitable for solving large-scale problems.\n    \n    Parameters\n    ----------\n    F : function(x) -> f\n        Function whose root to find; should take and return an array-like\n        object.\n    xin : array_like\n        Initial guess for the solution\n    rdiff : float, optional\n        Relative step size to use in numerical differentiation.\n    method : str or callable, optional\n        Krylov method to use to approximate the Jacobian.  Can be a string,\n        or a function implementing the same interface as the iterative\n        solvers in `scipy.sparse.linalg`. If a string, needs to be one of:\n        ``'lgmres'``, ``'gmres'``, ``'bicgstab'``, ``'cgs'``, ``'minres'``,\n        ``'tfqmr'``.\n    \n        The default is `scipy.sparse.linalg.lgmres`.\n    inner_maxiter : int, optional\n        Parameter to pass to the \"inner\" Krylov solver: maximum number of\n        iterations. Iteration will stop after maxiter steps even if the\n        specified tolerance has not been achieved.\n    inner_M : LinearOperator or InverseJacobian\n        Preconditioner for the inner Krylov iteration.\n        Note that you can use also inverse Jacobians as (adaptive)\n        preconditioners. For example,\n    \n        >>> from scipy.optimize import BroydenFirst, KrylovJacobian\n        >>> from scipy.optimize import InverseJacobian\n        >>> jac = BroydenFirst()\n        >>> kjac = KrylovJacobian(inner_M=InverseJacobian(jac))\n    \n        If the preconditioner has a method named 'update', it will be called\n        as ``update(x, f)`` after each nonlinear step, with ``x`` giving\n        the current point, and ``f`` the current function value.\n    outer_k : int, optional\n        Size of the subspace kept across LGMRES nonlinear iterations.\n        See `scipy.sparse.linalg.lgmres` for details.\n    inner_kwargs : kwargs\n        Keyword parameters for the \"inner\" Krylov solver\n        (defined with `method`). Parameter names must start with\n        the `inner_` prefix which will be stripped before passing on\n        the inner method. See, e.g., `scipy.sparse.linalg.gmres` for details.\n    iter : int, optional\n        Number of iterations to make. If omitted (default), make as many\n        as required to meet tolerances.\n    verbose : bool, optional\n        Print status to stdout on every iteration.\n    maxiter : int, optional\n        Maximum number of iterations to make. If more are needed to\n        meet convergence, `NoConvergence` is raised.\n    f_tol : float, optional\n        Absolute tolerance (in max-norm) for the residual.\n        If omitted, default is 6e-6.\n    f_rtol : float, optional\n        Relative tolerance for the residual. If omitted, not used.\n    x_tol : float, optional\n        Absolute minimum step size, as determined from the Jacobian\n        approximation. If the step size is smaller than this, optimization\n        is terminated as successful. If omitted, not used.\n    x_rtol : float, optional\n        Relative minimum step size. If omitted, not used.\n    tol_norm : function(vector) -> scalar, optional\n        Norm to use in convergence check. Default is the maximum norm.\n    line_search : {None, 'armijo' (default), 'wolfe'}, optional\n        Which type of a line search to use to determine the step size in the\n        direction given by the Jacobian approximation. Defaults to 'armijo'.\n    callback : function, optional\n        Optional callback function. It is called on every iteration as\n        ``callback(x, f)`` where `x` is the current solution and `f`\n        the corresponding residual.\n    \n    Returns\n    -------\n    sol : ndarray\n        An array (of similar array type as `x0`) containing the final solution.\n    \n    Raises\n    ------\n    NoConvergence\n        When a solution was not found.\n    \n    See Also\n    --------\n    root : Interface to root finding algorithms for multivariate\n           functions. See ``method='krylov'`` in particular.\n    scipy.sparse.linalg.gmres\n    scipy.sparse.linalg.lgmres\n    \n    Notes\n    -----\n    This function implements a Newton-Krylov solver. The basic idea is\n    to compute the inverse of the Jacobian with an iterative Krylov\n    method. These methods require only evaluating the Jacobian-vector\n    products, which are conveniently approximated by a finite difference:\n    \n    .. math:: J v \\approx (f(x + \\omega*v/|v|) - f(x)) / \\omega\n    \n    Due to the use of iterative matrix inverses, these methods can\n    deal with large nonlinear problems.\n    \n    SciPy's `scipy.sparse.linalg` module offers a selection of Krylov\n    solvers to choose from. The default here is `lgmres`, which is a\n    variant of restarted GMRES iteration that reuses some of the\n    information obtained in the previous Newton steps to invert\n    Jacobians in subsequent steps.\n    \n    For a review on Newton-Krylov methods, see for example [1]_,\n    and for the LGMRES sparse inverse method, see [2]_.\n    \n    References\n    ----------\n    .. [1] C. T. Kelley, Solving Nonlinear Equations with Newton's Method,\n           SIAM, pp.57-83, 2003.\n           :doi:`10.1137/1.9780898718898.ch3`\n    .. [2] D.A. Knoll and D.E. Keyes, J. Comp. Phys. 193, 357 (2004).\n           :doi:`10.1016/j.jcp.2003.08.010`\n    .. [3] A.H. Baker and E.R. Jessup and T. Manteuffel,\n           SIAM J. Matrix Anal. Appl. 26, 962 (2005).\n           :doi:`10.1137/S0895479803422014`\n    \n    Examples\n    --------\n    The following functions define a system of nonlinear equations\n    \n    >>> def fun(x):\n    ...     return [x[0] + 0.5 * x[1] - 1.0,\n    ...             0.5 * (x[1] - x[0]) ** 2]\n    \n    A solution can be obtained as follows.\n    \n    >>> from scipy import optimize\n    >>> sol = optimize.newton_krylov(fun, [0, 0])\n    >>> sol\n    array([0.66731771, 0.66536458])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "63942a5e6e595a6d8fa65f35e92153601dbe953e9ca628ae0fd24d64e778ab39",
            "fields": [
                {
                    "id": "nl3pw4i6",
                    "encoding": "",
                    "name": "F",
                    "value": "",
                    "defaultValue": "",
                    "description": "Function whose root to find; should take and return an array-like\nobject.",
                    "type": "function(x) -> f",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xq4ngxfr",
                    "encoding": "",
                    "name": "xin",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial guess for the solution",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e18pnwhy",
                    "encoding": "",
                    "name": "iter",
                    "value": "",
                    "defaultValue": "",
                    "description": "Number of iterations to make. If omitted (default), make as many\nas required to meet tolerances.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yhh5na6p",
                    "encoding": "",
                    "name": "rdiff",
                    "value": "",
                    "defaultValue": "",
                    "description": "Relative step size to use in numerical differentiation.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vgbe2x9l",
                    "encoding": "",
                    "name": "method",
                    "value": "lgmres",
                    "defaultValue": "lgmres",
                    "description": "Krylov method to use to approximate the Jacobian.  Can be a string,\nor a function implementing the same interface as the iterative\nsolvers in `scipy.sparse.linalg`. If a string, needs to be one of:\n``'lgmres'``, ``'gmres'``, ``'bicgstab'``, ``'cgs'``, ``'minres'``,\n``'tfqmr'``.\n\nThe default is `scipy.sparse.linalg.lgmres`.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7zxeg0th",
                    "encoding": "",
                    "name": "inner_maxiter",
                    "value": 20,
                    "defaultValue": 20,
                    "description": "Parameter to pass to the \"inner\" Krylov solver: maximum number of\niterations. Iteration will stop after maxiter steps even if the\nspecified tolerance has not been achieved.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "35y15l8p",
                    "encoding": "",
                    "name": "inner_M",
                    "value": "",
                    "defaultValue": "",
                    "description": "Preconditioner for the inner Krylov iteration.\nNote that you can use also inverse Jacobians as (adaptive)\npreconditioners. For example,\n\n>>> from scipy.optimize import BroydenFirst, KrylovJacobian\n>>> from scipy.optimize import InverseJacobian\n>>> jac = BroydenFirst()\n>>> kjac = KrylovJacobian(inner_M=InverseJacobian(jac))\n\nIf the preconditioner has a method named 'update', it will be called\nas ``update(x, f)`` after each nonlinear step, with ``x`` giving\nthe current point, and ``f`` the current function value.",
                    "type": "LinearOperator or InverseJacobian",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i73pkj1h",
                    "encoding": "",
                    "name": "outer_k",
                    "value": 10,
                    "defaultValue": 10,
                    "description": "Size of the subspace kept across LGMRES nonlinear iterations.\nSee `scipy.sparse.linalg.lgmres` for details.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cnsqbglt",
                    "encoding": "",
                    "name": "verbose",
                    "value": false,
                    "defaultValue": false,
                    "description": "Print status to stdout on every iteration.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2c3grmmy",
                    "encoding": "",
                    "name": "maxiter",
                    "value": "",
                    "defaultValue": "",
                    "description": "Maximum number of iterations to make. If more are needed to\nmeet convergence, `NoConvergence` is raised.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3bt2tnyb",
                    "encoding": "",
                    "name": "f_tol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Absolute tolerance (in max-norm) for the residual.\nIf omitted, default is 6e-6.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4q0arzis",
                    "encoding": "",
                    "name": "f_rtol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Relative tolerance for the residual. If omitted, not used.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qg31w_rc",
                    "encoding": "",
                    "name": "x_tol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Absolute minimum step size, as determined from the Jacobian\napproximation. If the step size is smaller than this, optimization\nis terminated as successful. If omitted, not used.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d31blcen",
                    "encoding": "",
                    "name": "x_rtol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Relative minimum step size. If omitted, not used.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "baxgvm_b",
                    "encoding": "",
                    "name": "tol_norm",
                    "value": "",
                    "defaultValue": "",
                    "description": "Norm to use in convergence check. Default is the maximum norm.",
                    "type": "function(vector) -> scalar",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "azbiqfhy",
                    "encoding": "",
                    "name": "line_search",
                    "value": "armijo",
                    "defaultValue": "armijo",
                    "description": "Which type of a line search to use to determine the step size in the\ndirection given by the Jacobian approximation. Defaults to 'armijo'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vcvm9681",
                    "encoding": "",
                    "name": "callback",
                    "value": "",
                    "defaultValue": "",
                    "description": "Optional callback function. It is called on every iteration as\n``callback(x, f)`` where `x` is the current solution and `f`\nthe corresponding residual.",
                    "type": "function",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kv1dnrut",
                    "encoding": "",
                    "name": "kw",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vxzmkvtv",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.nonlin.newton_krylov",
                    "defaultValue": "scipy.optimize.nonlin.newton_krylov",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "erif5wp2",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iwhvstc2",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "szwz9pl4",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5vpnfog6",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize.nonlin",
                    "defaultValue": "scipy.optimize.nonlin",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3bzo74x0",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r7b3yk92",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "v1bjk3uf",
            "name": "optimize.zeros",
            "description": "Return a new array of given shape and type, filled with zeros.\n\nParameters\n----------\nshape : int or tuple of ints\n    Shape of the new array, e.g., ``(2, 3)`` or ``2``.\ndtype : data-type, optional\n    The desired data-type for the array, e.g., `numpy.int8`.  Default is\n    `numpy.float64`.\norder : {'C', 'F'}, optional, default: 'C'\n    Whether to store multi-dimensional data in row-major\n    (C-style) or column-major (Fortran-style) order in\n    memory.\nlike : array_like, optional\n    Reference object to allow the creation of arrays which are not\n    NumPy arrays. If an array-like passed in as ``like`` supports\n    the ``__array_function__`` protocol, the result will be defined\n    by it. In this case, it ensures the creation of an array object\n    compatible with that passed in via this argument.\n\n    .. versionadded:: 1.20.0\n\nReturns\n-------\nout : ndarray\n    Array of zeros with the given shape, dtype, and order.\n\nSee Also\n--------\nzeros_like : Return an array of zeros with shape and type of input.\nempty : Return a new uninitialized array.\nones : Return a new array setting values to one.\nfull : Return a new array of given shape filled with value.\n\nExamples\n--------\n>>> import numpy as np\n>>> np.zeros(5)\narray([ 0.,  0.,  0.,  0.,  0.])\n\n>>> np.zeros((5,), dtype=int)\narray([0, 0, 0, 0, 0])\n\n>>> np.zeros((2, 1))\narray([[ 0.],\n       [ 0.]])\n\n>>> s = (2,2)\n>>> np.zeros(s)\narray([[ 0.,  0.],\n       [ 0.,  0.]])\n\n>>> np.zeros((2,), dtype=[('x', 'i4'), ('y', 'i4')]) # custom dtype\narray([(0, 0), (0, 0)],\n      dtype=[('x', '<i4'), ('y', '<i4')])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "91467931f31dcc87dc368d7953612711911ee4b756360637b4be98f297ee074e",
            "fields": [
                {
                    "id": "bb3zarfm",
                    "encoding": "",
                    "name": "shape",
                    "value": "",
                    "defaultValue": "",
                    "description": "Shape of the new array, e.g., ``(2, 3)`` or ``2``.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2ugkj4g2",
                    "encoding": "",
                    "name": "dtype",
                    "value": "float",
                    "defaultValue": "float",
                    "description": "The desired data-type for the array, e.g., `numpy.int8`.  Default is\n`numpy.float64`.",
                    "type": "typing.Any",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u4f7z3ob",
                    "encoding": "",
                    "name": "order",
                    "value": "'C'",
                    "defaultValue": "'C'",
                    "description": "Whether to store multi-dimensional data in row-major\n(C-style) or column-major (Fortran-style) order in\nmemory.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c3gfeis0",
                    "encoding": "",
                    "name": "like",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. versionadded:: 1.20.0",
                    "type": "typing.Any",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h_4drazf",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.optimize.zeros",
                    "defaultValue": "scipy.optimize.optimize.zeros",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zlrj9dd8",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k1u_gre0",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ybenj5_c",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g38un9qm",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize.optimize",
                    "defaultValue": "scipy.optimize.optimize",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b4ntlx5_",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7xoz8xfd",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "76j16jdm",
            "name": "slsqp.fmin_slsqp",
            "description": "Minimize a function using Sequential Least Squares Programming\n    \n    Python interface function for the SLSQP Optimization subroutine\n    originally implemented by Dieter Kraft.\n    \n    Parameters\n    ----------\n    func : callable f(x,*args)\n        Objective function.  Must return a scalar.\n    x0 : 1-D ndarray of float\n        Initial guess for the independent variable(s).\n    eqcons : list, optional\n        A list of functions of length n such that\n        eqcons[j](x,*args) == 0.0 in a successfully optimized\n        problem.\n    f_eqcons : callable f(x,*args), optional\n        Returns a 1-D array in which each element must equal 0.0 in a\n        successfully optimized problem. If f_eqcons is specified,\n        eqcons is ignored.\n    ieqcons : list, optional\n        A list of functions of length n such that\n        ieqcons[j](x,*args) >= 0.0 in a successfully optimized\n        problem.\n    f_ieqcons : callable f(x,*args), optional\n        Returns a 1-D ndarray in which each element must be greater or\n        equal to 0.0 in a successfully optimized problem. If\n        f_ieqcons is specified, ieqcons is ignored.\n    bounds : list, optional\n        A list of tuples specifying the lower and upper bound\n        for each independent variable [(xl0, xu0),(xl1, xu1),...]\n        Infinite values will be interpreted as large floating values.\n    fprime : callable ``f(x,*args)``, optional\n        A function that evaluates the partial derivatives of func.\n    fprime_eqcons : callable ``f(x,*args)``, optional\n        A function of the form ``f(x, *args)`` that returns the m by n\n        array of equality constraint normals. If not provided,\n        the normals will be approximated. The array returned by\n        fprime_eqcons should be sized as ( len(eqcons), len(x0) ).\n    fprime_ieqcons : callable ``f(x,*args)``, optional\n        A function of the form ``f(x, *args)`` that returns the m by n\n        array of inequality constraint normals. If not provided,\n        the normals will be approximated. The array returned by\n        fprime_ieqcons should be sized as ( len(ieqcons), len(x0) ).\n    args : sequence, optional\n        Additional arguments passed to func and fprime.\n    iter : int, optional\n        The maximum number of iterations.\n    acc : float, optional\n        Requested accuracy.\n    iprint : int, optional\n        The verbosity of fmin_slsqp :\n    \n        * iprint <= 0 : Silent operation\n        * iprint == 1 : Print summary upon completion (default)\n        * iprint >= 2 : Print status of each iterate and summary\n    disp : int, optional\n        Overrides the iprint interface (preferred).\n    full_output : bool, optional\n        If False, return only the minimizer of func (default).\n        Otherwise, output final objective function and summary\n        information.\n    epsilon : float, optional\n        The step size for finite-difference derivative estimates.\n    callback : callable, optional\n        Called after each iteration, as ``callback(x)``, where ``x`` is the\n        current parameter vector.\n    \n    Returns\n    -------\n    out : ndarray of float\n        The final minimizer of func.\n    fx : ndarray of float, if full_output is true\n        The final value of the objective function.\n    its : int, if full_output is true\n        The number of iterations.\n    imode : int, if full_output is true\n        The exit mode from the optimizer (see below).\n    smode : string, if full_output is true\n        Message describing the exit mode from the optimizer.\n    \n    See also\n    --------\n    minimize: Interface to minimization algorithms for multivariate\n        functions. See the 'SLSQP' `method` in particular.\n    \n    Notes\n    -----\n    Exit modes are defined as follows:\n    \n    - ``-1`` : Gradient evaluation required (g & a)\n    - ``0`` : Optimization terminated successfully\n    - ``1`` : Function evaluation required (f & c)\n    - ``2`` : More equality constraints than independent variables\n    - ``3`` : More than 3*n iterations in LSQ subproblem\n    - ``4`` : Inequality constraints incompatible\n    - ``5`` : Singular matrix E in LSQ subproblem\n    - ``6`` : Singular matrix C in LSQ subproblem\n    - ``7`` : Rank-deficient equality constraint subproblem HFTI\n    - ``8`` : Positive directional derivative for linesearch\n    - ``9`` : Iteration limit reached\n    \n    Examples\n    --------\n    Examples are given :ref:`in the tutorial <tutorial-sqlsp>`.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d12a9cf40147410cf149fba284f1dc2903f0757ef940bd33a94033dbcae01352",
            "fields": [
                {
                    "id": "tb1kbo8e",
                    "encoding": "",
                    "name": "func",
                    "value": "",
                    "defaultValue": "",
                    "description": "Objective function.  Must return a scalar.",
                    "type": "callable f(x,*args)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fi1wtc9t",
                    "encoding": "",
                    "name": "x0",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial guess for the independent variable(s).",
                    "type": "1-D ndarray of float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "51o2qxo1",
                    "encoding": "",
                    "name": "eqcons",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "A list of functions of length n such that\neqcons[j](x,*args) == 0.0 in a successfully optimized\nproblem.",
                    "type": "builtins.tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hokhzp0p",
                    "encoding": "",
                    "name": "f_eqcons",
                    "value": "",
                    "defaultValue": "",
                    "description": "Returns a 1-D array in which each element must equal 0.0 in a\nsuccessfully optimized problem. If f_eqcons is specified,\neqcons is ignored.",
                    "type": "callable f(x,*args)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wtv5yb4v",
                    "encoding": "",
                    "name": "ieqcons",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "A list of functions of length n such that\nieqcons[j](x,*args) >= 0.0 in a successfully optimized\nproblem.",
                    "type": "builtins.tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0euzx0kf",
                    "encoding": "",
                    "name": "f_ieqcons",
                    "value": "",
                    "defaultValue": "",
                    "description": "Returns a 1-D ndarray in which each element must be greater or\nequal to 0.0 in a successfully optimized problem. If\nf_ieqcons is specified, ieqcons is ignored.",
                    "type": "callable f(x,*args)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s9bix9b3",
                    "encoding": "",
                    "name": "bounds",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "A list of tuples specifying the lower and upper bound\nfor each independent variable [(xl0, xu0),(xl1, xu1),...]\nInfinite values will be interpreted as large floating values.",
                    "type": "builtins.tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "41b5o2en",
                    "encoding": "",
                    "name": "fprime",
                    "value": "",
                    "defaultValue": "",
                    "description": "A function that evaluates the partial derivatives of func.",
                    "type": "callable f(x,*args)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iox8v_xy",
                    "encoding": "",
                    "name": "fprime_eqcons",
                    "value": "",
                    "defaultValue": "",
                    "description": "A function of the form ``f(x, *args)`` that returns the m by n\narray of equality constraint normals. If not provided,\nthe normals will be approximated. The array returned by\nfprime_eqcons should be sized as ( len(eqcons), len(x0) ).",
                    "type": "callable f(x,*args)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u5ogof80",
                    "encoding": "",
                    "name": "fprime_ieqcons",
                    "value": "",
                    "defaultValue": "",
                    "description": "A function of the form ``f(x, *args)`` that returns the m by n\narray of inequality constraint normals. If not provided,\nthe normals will be approximated. The array returned by\nfprime_ieqcons should be sized as ( len(ieqcons), len(x0) ).",
                    "type": "callable f(x,*args)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xc6y0oir",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Additional arguments passed to func and fprime.",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lxh8t559",
                    "encoding": "",
                    "name": "iter",
                    "value": 100,
                    "defaultValue": 100,
                    "description": "The maximum number of iterations.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dtl7ckbu",
                    "encoding": "",
                    "name": "acc",
                    "value": 1e-06,
                    "defaultValue": 1e-06,
                    "description": "Requested accuracy.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "toywimxw",
                    "encoding": "",
                    "name": "iprint",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "The verbosity of fmin_slsqp :\n\n* iprint <= 0 : Silent operation\n* iprint == 1 : Print summary upon completion (default)\n* iprint >= 2 : Print status of each iterate and summary",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3mvjni66",
                    "encoding": "",
                    "name": "disp",
                    "value": "",
                    "defaultValue": "",
                    "description": "Overrides the iprint interface (preferred).",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "28pjc7z9",
                    "encoding": "",
                    "name": "full_output",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "If False, return only the minimizer of func (default).\nOtherwise, output final objective function and summary\ninformation.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2zgs211v",
                    "encoding": "",
                    "name": "epsilon",
                    "value": "np.float64(1.4901161193847656e-08)",
                    "defaultValue": "np.float64(1.4901161193847656e-08)",
                    "description": "The step size for finite-difference derivative estimates.",
                    "type": "numpy.float64",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "79mo349l",
                    "encoding": "",
                    "name": "callback",
                    "value": "",
                    "defaultValue": "",
                    "description": "Called after each iteration, as ``callback(x)``, where ``x`` is the\ncurrent parameter vector.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "90j61zpu",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.slsqp.fmin_slsqp",
                    "defaultValue": "scipy.optimize.slsqp.fmin_slsqp",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "itg7e0f_",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "imp70oij",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "arb4s9xs",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5z0cipo2",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize.slsqp",
                    "defaultValue": "scipy.optimize.slsqp",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zi09c2ya",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yrzizdtw",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "l5ts13fw",
            "name": "slsqp.slsqp",
            "description": "x, info = slsqp(S: dict, funx: np.float64, gradx: NDArray, C: NDarray, d: NDArray, sol: NDArray, xl: NDArray, xu: NDArray, buffer: NDArray, indices: NDArray)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6e07b26ff3baefd913974cb9d69be66414185afd182bbbf667c5f919647d127a",
            "fields": [
                {
                    "id": "t3volf2w",
                    "encoding": "",
                    "name": "SLSQP",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7b58qspq",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.slsqp.slsqp",
                    "defaultValue": "scipy.optimize.slsqp.slsqp",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cw939oht",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "47i8uwr9",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "4p7a0rr_",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "90w0tmk2",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize.slsqp",
                    "defaultValue": "scipy.optimize.slsqp",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aelfvr8y",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0w_lh62a",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "70k65fd2",
            "name": "tnc.fmin_tnc",
            "description": "Minimize a function with variables subject to bounds, using\n    gradient information in a truncated Newton algorithm. This\n    method wraps a C implementation of the algorithm.\n    \n    Parameters\n    ----------\n    func : callable ``func(x, *args)``\n        Function to minimize.  Must do one of:\n    \n        1. Return f and g, where f is the value of the function and g its\n           gradient (a list of floats).\n    \n        2. Return the function value but supply gradient function\n           separately as `fprime`.\n    \n        3. Return the function value and set ``approx_grad=True``.\n    \n        If the function returns None, the minimization\n        is aborted.\n    x0 : array_like\n        Initial estimate of minimum.\n    fprime : callable ``fprime(x, *args)``, optional\n        Gradient of `func`. If None, then either `func` must return the\n        function value and the gradient (``f,g = func(x, *args)``)\n        or `approx_grad` must be True.\n    args : tuple, optional\n        Arguments to pass to function.\n    approx_grad : bool, optional\n        If true, approximate the gradient numerically.\n    bounds : list, optional\n        (min, max) pairs for each element in x0, defining the\n        bounds on that parameter. Use None or +/-inf for one of\n        min or max when there is no bound in that direction.\n    epsilon : float, optional\n        Used if approx_grad is True. The stepsize in a finite\n        difference approximation for fprime.\n    scale : array_like, optional\n        Scaling factors to apply to each variable. If None, the\n        factors are up-low for interval bounded variables and\n        1+|x| for the others. Defaults to None.\n    offset : array_like, optional\n        Value to subtract from each variable. If None, the\n        offsets are (up+low)/2 for interval bounded variables\n        and x for the others.\n    messages : int, optional\n        Bit mask used to select messages display during\n        minimization values defined in the MSGS dict. Defaults to\n        MGS_ALL.\n    disp : int, optional\n        Integer interface to messages. 0 = no message, 5 = all messages\n    maxCGit : int, optional\n        Maximum number of hessian*vector evaluations per main\n        iteration. If maxCGit == 0, the direction chosen is\n        -gradient if maxCGit < 0, maxCGit is set to\n        max(1,min(50,n/2)). Defaults to -1.\n    maxfun : int, optional\n        Maximum number of function evaluation. If None, maxfun is\n        set to max(100, 10*len(x0)). Defaults to None. Note that this function\n        may violate the limit because of evaluating gradients by numerical\n        differentiation.\n    eta : float, optional\n        Severity of the line search. If < 0 or > 1, set to 0.25.\n        Defaults to -1.\n    stepmx : float, optional\n        Maximum step for the line search. May be increased during\n        call. If too small, it will be set to 10.0. Defaults to 0.\n    accuracy : float, optional\n        Relative precision for finite difference calculations. If\n        <= machine_precision, set to sqrt(machine_precision).\n        Defaults to 0.\n    fmin : float, optional\n        Minimum function value estimate. Defaults to 0.\n    ftol : float, optional\n        Precision goal for the value of f in the stopping criterion.\n        If ftol < 0.0, ftol is set to 0.0 defaults to -1.\n    xtol : float, optional\n        Precision goal for the value of x in the stopping\n        criterion (after applying x scaling factors). If xtol <\n        0.0, xtol is set to sqrt(machine_precision). Defaults to\n        -1.\n    pgtol : float, optional\n        Precision goal for the value of the projected gradient in\n        the stopping criterion (after applying x scaling factors).\n        If pgtol < 0.0, pgtol is set to 1e-2 * sqrt(accuracy).\n        Setting it to 0.0 is not recommended. Defaults to -1.\n    rescale : float, optional\n        Scaling factor (in log10) used to trigger f value\n        rescaling. If 0, rescale at each iteration. If a large\n        value, never rescale. If < 0, rescale is set to 1.3.\n    callback : callable, optional\n        Called after each iteration, as callback(xk), where xk is the\n        current parameter vector.\n    \n    Returns\n    -------\n    x : ndarray\n        The solution.\n    nfeval : int\n        The number of function evaluations.\n    rc : int\n        Return code, see below\n    \n    See also\n    --------\n    minimize: Interface to minimization algorithms for multivariate\n        functions. See the 'TNC' `method` in particular.\n    \n    Notes\n    -----\n    The underlying algorithm is truncated Newton, also called\n    Newton Conjugate-Gradient. This method differs from\n    scipy.optimize.fmin_ncg in that\n    \n    1. it wraps a C implementation of the algorithm\n    2. it allows each variable to be given an upper and lower bound.\n    \n    The algorithm incorporates the bound constraints by determining\n    the descent direction as in an unconstrained truncated Newton,\n    but never taking a step-size large enough to leave the space\n    of feasible x's. The algorithm keeps track of a set of\n    currently active constraints, and ignores them when computing\n    the minimum allowable step size. (The x's associated with the\n    active constraint are kept fixed.) If the maximum allowable\n    step size is zero then a new constraint is added. At the end\n    of each iteration one of the constraints may be deemed no\n    longer active and removed. A constraint is considered\n    no longer active is if it is currently active\n    but the gradient for that variable points inward from the\n    constraint. The specific constraint removed is the one\n    associated with the variable of largest index whose\n    constraint is no longer active.\n    \n    Return codes are defined as follows:\n    \n    - ``-1`` : Infeasible (lower bound > upper bound)\n    - ``0`` : Local minimum reached (:math:`|pg| \\approx 0`)\n    - ``1`` : Converged (:math:`|f_n-f_(n-1)| \\approx 0`)\n    - ``2`` : Converged (:math:`|x_n-x_(n-1)| \\approx 0`)\n    - ``3`` : Max. number of function evaluations reached\n    - ``4`` : Linear search failed\n    - ``5`` : All lower bounds are equal to the upper bounds\n    - ``6`` : Unable to progress\n    - ``7`` : User requested end of minimization\n    \n    References\n    ----------\n    Wright S., Nocedal J. (2006), 'Numerical Optimization'\n    \n    Nash S.G. (1984), \"Newton-Type Minimization Via the Lanczos Method\",\n    SIAM Journal of Numerical Analysis 21, pp. 770-778",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4caff7a46561cb1dda647f62464944bf1139e3f8e765694ad9ce85d80ef52adb",
            "fields": [
                {
                    "id": "tuw073bj",
                    "encoding": "",
                    "name": "func",
                    "value": "",
                    "defaultValue": "",
                    "description": "Function to minimize.  Must do one of:\n\n1. Return f and g, where f is the value of the function and g its\n   gradient (a list of floats).\n\n2. Return the function value but supply gradient function\n   separately as `fprime`.\n\n3. Return the function value and set ``approx_grad=True``.\n\nIf the function returns None, the minimization\nis aborted.",
                    "type": "callable func(x, *args)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q6vlyzd4",
                    "encoding": "",
                    "name": "x0",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial estimate of minimum.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "emkv62yq",
                    "encoding": "",
                    "name": "fprime",
                    "value": "",
                    "defaultValue": "",
                    "description": "Gradient of `func`. If None, then either `func` must return the\nfunction value and the gradient (``f,g = func(x, *args)``)\nor `approx_grad` must be True.",
                    "type": "callable fprime(x, *args)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aqn88o4e",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Arguments to pass to function.",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ct0eoyke",
                    "encoding": "",
                    "name": "approx_grad",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "If true, approximate the gradient numerically.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6c5b70u0",
                    "encoding": "",
                    "name": "bounds",
                    "value": "",
                    "defaultValue": "",
                    "description": "(min, max) pairs for each element in x0, defining the\nbounds on that parameter. Use None or +/-inf for one of\nmin or max when there is no bound in that direction.",
                    "type": "list",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8wd6x9ze",
                    "encoding": "",
                    "name": "epsilon",
                    "value": 1e-08,
                    "defaultValue": 1e-08,
                    "description": "Used if approx_grad is True. The stepsize in a finite\ndifference approximation for fprime.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "30eg8y_1",
                    "encoding": "",
                    "name": "scale",
                    "value": "",
                    "defaultValue": "",
                    "description": "Scaling factors to apply to each variable. If None, the\nfactors are up-low for interval bounded variables and\n1+|x| for the others. Defaults to None.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t9rxtg7r",
                    "encoding": "",
                    "name": "offset",
                    "value": "",
                    "defaultValue": "",
                    "description": "Value to subtract from each variable. If None, the\noffsets are (up+low)/2 for interval bounded variables\nand x for the others.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_f2hf81k",
                    "encoding": "",
                    "name": "messages",
                    "value": 15,
                    "defaultValue": 15,
                    "description": "Bit mask used to select messages display during\nminimization values defined in the MSGS dict. Defaults to\nMGS_ALL.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yr_8kgh6",
                    "encoding": "",
                    "name": "maxCGit",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "Maximum number of hessian*vector evaluations per main\niteration. If maxCGit == 0, the direction chosen is\n-gradient if maxCGit < 0, maxCGit is set to\nmax(1,min(50,n/2)). Defaults to -1.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7kne0sxx",
                    "encoding": "",
                    "name": "maxfun",
                    "value": "",
                    "defaultValue": "",
                    "description": "Maximum number of function evaluation. If None, maxfun is\nset to max(100, 10*len(x0)). Defaults to None. Note that this function\nmay violate the limit because of evaluating gradients by numerical\ndifferentiation.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "61hm4315",
                    "encoding": "",
                    "name": "eta",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "Severity of the line search. If < 0 or > 1, set to 0.25.\nDefaults to -1.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "da_w8zwe",
                    "encoding": "",
                    "name": "stepmx",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Maximum step for the line search. May be increased during\ncall. If too small, it will be set to 10.0. Defaults to 0.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "utxpyus6",
                    "encoding": "",
                    "name": "accuracy",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Relative precision for finite difference calculations. If\n<= machine_precision, set to sqrt(machine_precision).\nDefaults to 0.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qmroaxco",
                    "encoding": "",
                    "name": "fmin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Minimum function value estimate. Defaults to 0.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p304gkk7",
                    "encoding": "",
                    "name": "ftol",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "Precision goal for the value of f in the stopping criterion.\nIf ftol < 0.0, ftol is set to 0.0 defaults to -1.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z2dcjgwk",
                    "encoding": "",
                    "name": "xtol",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "Precision goal for the value of x in the stopping\ncriterion (after applying x scaling factors). If xtol <\n0.0, xtol is set to sqrt(machine_precision). Defaults to\n-1.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gi_frv0g",
                    "encoding": "",
                    "name": "pgtol",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "Precision goal for the value of the projected gradient in\nthe stopping criterion (after applying x scaling factors).\nIf pgtol < 0.0, pgtol is set to 1e-2 * sqrt(accuracy).\nSetting it to 0.0 is not recommended. Defaults to -1.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6pcmcm24",
                    "encoding": "",
                    "name": "rescale",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "Scaling factor (in log10) used to trigger f value\nrescaling. If 0, rescale at each iteration. If a large\nvalue, never rescale. If < 0, rescale is set to 1.3.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2nq4m0ea",
                    "encoding": "",
                    "name": "disp",
                    "value": "",
                    "defaultValue": "",
                    "description": "Integer interface to messages. 0 = no message, 5 = all messages",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1g0jczld",
                    "encoding": "",
                    "name": "callback",
                    "value": "",
                    "defaultValue": "",
                    "description": "Called after each iteration, as callback(xk), where xk is the\ncurrent parameter vector.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d46fa558",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.tnc.fmin_tnc",
                    "defaultValue": "scipy.optimize.tnc.fmin_tnc",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q6fkm4yx",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fdpv4c_g",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "rv0n4b3l",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cevbdf0e",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize.tnc",
                    "defaultValue": "scipy.optimize.tnc",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2jflyxjt",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cefxpvvv",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "xoy6_c7c",
            "name": "tnc.zeros",
            "description": "Return a new array of given shape and type, filled with zeros.\n\nParameters\n----------\nshape : int or tuple of ints\n    Shape of the new array, e.g., ``(2, 3)`` or ``2``.\ndtype : data-type, optional\n    The desired data-type for the array, e.g., `numpy.int8`.  Default is\n    `numpy.float64`.\norder : {'C', 'F'}, optional, default: 'C'\n    Whether to store multi-dimensional data in row-major\n    (C-style) or column-major (Fortran-style) order in\n    memory.\nlike : array_like, optional\n    Reference object to allow the creation of arrays which are not\n    NumPy arrays. If an array-like passed in as ``like`` supports\n    the ``__array_function__`` protocol, the result will be defined\n    by it. In this case, it ensures the creation of an array object\n    compatible with that passed in via this argument.\n\n    .. versionadded:: 1.20.0\n\nReturns\n-------\nout : ndarray\n    Array of zeros with the given shape, dtype, and order.\n\nSee Also\n--------\nzeros_like : Return an array of zeros with shape and type of input.\nempty : Return a new uninitialized array.\nones : Return a new array setting values to one.\nfull : Return a new array of given shape filled with value.\n\nExamples\n--------\n>>> import numpy as np\n>>> np.zeros(5)\narray([ 0.,  0.,  0.,  0.,  0.])\n\n>>> np.zeros((5,), dtype=int)\narray([0, 0, 0, 0, 0])\n\n>>> np.zeros((2, 1))\narray([[ 0.],\n       [ 0.]])\n\n>>> s = (2,2)\n>>> np.zeros(s)\narray([[ 0.,  0.],\n       [ 0.,  0.]])\n\n>>> np.zeros((2,), dtype=[('x', 'i4'), ('y', 'i4')]) # custom dtype\narray([(0, 0), (0, 0)],\n      dtype=[('x', '<i4'), ('y', '<i4')])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c40ea62aa3b746e1b7ad504ae540c81991df800d63753bbc3297d9acd492be35",
            "fields": [
                {
                    "id": "iswuxd48",
                    "encoding": "",
                    "name": "shape",
                    "value": "",
                    "defaultValue": "",
                    "description": "Shape of the new array, e.g., ``(2, 3)`` or ``2``.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s0x4xbw9",
                    "encoding": "",
                    "name": "dtype",
                    "value": "float",
                    "defaultValue": "float",
                    "description": "The desired data-type for the array, e.g., `numpy.int8`.  Default is\n`numpy.float64`.",
                    "type": "typing.Any",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bz57k4tw",
                    "encoding": "",
                    "name": "order",
                    "value": "'C'",
                    "defaultValue": "'C'",
                    "description": "Whether to store multi-dimensional data in row-major\n(C-style) or column-major (Fortran-style) order in\nmemory.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e26vush1",
                    "encoding": "",
                    "name": "like",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "Reference object to allow the creation of arrays which are not\nNumPy arrays. If an array-like passed in as ``like`` supports\nthe ``__array_function__`` protocol, the result will be defined\nby it. In this case, it ensures the creation of an array object\ncompatible with that passed in via this argument.\n\n.. versionadded:: 1.20.0",
                    "type": "typing.Any",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g0yi97wt",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.tnc.zeros",
                    "defaultValue": "scipy.optimize.tnc.zeros",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p8_ndwc5",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jxdp_qme",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "nillx7kj",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5dew_0uw",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize.tnc",
                    "defaultValue": "scipy.optimize.tnc",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "idawf5dj",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c4tkuxor",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "0knu1g66",
            "name": "zeros.bisect",
            "description": "Find root of a function within an interval using bisection.\n    \n    Basic bisection routine to find a root of the function `f` between the\n    arguments `a` and `b`. `f(a)` and `f(b)` cannot have the same signs.\n    Slow but sure.\n    \n    Parameters\n    ----------\n    f : function\n        Python function returning a number.  `f` must be continuous, and\n        f(a) and f(b) must have opposite signs.\n    a : scalar\n        One end of the bracketing interval [a,b].\n    b : scalar\n        The other end of the bracketing interval [a,b].\n    xtol : number, optional\n        The computed root ``x0`` will satisfy ``np.isclose(x, x0,\n        atol=xtol, rtol=rtol)``, where ``x`` is the exact root. The\n        parameter must be positive.\n    rtol : number, optional\n        The computed root ``x0`` will satisfy ``np.isclose(x, x0,\n        atol=xtol, rtol=rtol)``, where ``x`` is the exact root. The\n        parameter cannot be smaller than its default value of\n        ``4*np.finfo(float).eps``.\n    maxiter : int, optional\n        If convergence is not achieved in `maxiter` iterations, an error is\n        raised. Must be >= 0.\n    args : tuple, optional\n        Containing extra arguments for the function `f`.\n        `f` is called by ``apply(f, (x)+args)``.\n    full_output : bool, optional\n        If `full_output` is False, the root is returned. If `full_output` is\n        True, the return value is ``(x, r)``, where x is the root, and r is\n        a `RootResults` object.\n    disp : bool, optional\n        If True, raise RuntimeError if the algorithm didn't converge.\n        Otherwise, the convergence status is recorded in a `RootResults`\n        return object.\n    \n    Returns\n    -------\n    root : float\n        Root of `f` between `a` and `b`.\n    r : `RootResults` (present if ``full_output = True``)\n        Object containing information about the convergence. In particular,\n        ``r.converged`` is True if the routine converged.\n    \n    Notes\n    -----\n    As mentioned in the parameter documentation, the computed root ``x0`` will\n    satisfy ``np.isclose(x, x0, atol=xtol, rtol=rtol)``, where ``x`` is the\n    exact root. In equation form, this terminating condition is ``abs(x - x0)\n    <= xtol + rtol * abs(x0)``.\n    \n    The default value ``xtol=2e-12`` may lead to surprising behavior if one\n    expects `bisect` to always compute roots with relative error near machine\n    precision. Care should be taken to select `xtol` for the use case at hand.\n    Setting ``xtol=5e-324``, the smallest subnormal number, will ensure the\n    highest level of accuracy. Larger values of `xtol` may be useful for saving\n    function evaluations when a root is at or near zero in applications where\n    the tiny absolute differences available between floating point numbers near\n    zero are not meaningful.\n    \n    Examples\n    --------\n    \n    >>> def f(x):\n    ...     return (x**2 - 1)\n    \n    >>> from scipy import optimize\n    \n    >>> root = optimize.bisect(f, 0, 2)\n    >>> root\n    1.0\n    \n    >>> root = optimize.bisect(f, -2, 0)\n    >>> root\n    -1.0\n    \n    See Also\n    --------\n    brentq, brenth, bisect, newton\n    fixed_point : scalar fixed-point finder\n    fsolve : n-dimensional root-finding\n    elementwise.find_root : efficient elementwise 1-D root-finder",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d4444daa28c7019ad234c995ec69cc9bd6de81d0cc9e380bcc4759959f293247",
            "fields": [
                {
                    "id": "0419hsb4",
                    "encoding": "",
                    "name": "f",
                    "value": "",
                    "defaultValue": "",
                    "description": "Python function returning a number.  `f` must be continuous, and\nf(a) and f(b) must have opposite signs.",
                    "type": "function",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "00z214p4",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "One end of the bracketing interval [a,b].",
                    "type": "scalar",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_tjeltls",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "The other end of the bracketing interval [a,b].",
                    "type": "scalar",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b62xhaii",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Containing extra arguments for the function `f`.\n`f` is called by ``apply(f, (x)+args)``.",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pv2zbvu1",
                    "encoding": "",
                    "name": "xtol",
                    "value": 2e-12,
                    "defaultValue": 2e-12,
                    "description": "The computed root ``x0`` will satisfy ``np.isclose(x, x0,\natol=xtol, rtol=rtol)``, where ``x`` is the exact root. The\nparameter must be positive.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2fwojftr",
                    "encoding": "",
                    "name": "rtol",
                    "value": "np.float64(8.881784197001252e-16)",
                    "defaultValue": "np.float64(8.881784197001252e-16)",
                    "description": "The computed root ``x0`` will satisfy ``np.isclose(x, x0,\natol=xtol, rtol=rtol)``, where ``x`` is the exact root. The\nparameter cannot be smaller than its default value of\n``4*np.finfo(float).eps``.",
                    "type": "numpy.float64",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w3lyo3c9",
                    "encoding": "",
                    "name": "maxiter",
                    "value": 100,
                    "defaultValue": 100,
                    "description": "If convergence is not achieved in `maxiter` iterations, an error is\nraised. Must be >= 0.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lbkkbrfo",
                    "encoding": "",
                    "name": "full_output",
                    "value": false,
                    "defaultValue": false,
                    "description": "If `full_output` is False, the root is returned. If `full_output` is\nTrue, the return value is ``(x, r)``, where x is the root, and r is\na `RootResults` object.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x2plj4w6",
                    "encoding": "",
                    "name": "disp",
                    "value": true,
                    "defaultValue": true,
                    "description": "If True, raise RuntimeError if the algorithm didn't converge.\nOtherwise, the convergence status is recorded in a `RootResults`\nreturn object.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6_1v9vlo",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.zeros.bisect",
                    "defaultValue": "scipy.optimize.zeros.bisect",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d0k_wu72",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kr0gtex5",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "be1qiuqt",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7zegzw7o",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize.zeros",
                    "defaultValue": "scipy.optimize.zeros",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iopjcggx",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ofuvsswm",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "6u3q37_5",
            "name": "zeros.brenth",
            "description": "Find a root of a function in a bracketing interval using Brent's\n    method with hyperbolic extrapolation.\n    \n    A variation on the classic Brent routine to find a root of the function f\n    between the arguments a and b that uses hyperbolic extrapolation instead of\n    inverse quadratic extrapolation. Bus & Dekker (1975) guarantee convergence\n    for this method, claiming that the upper bound of function evaluations here\n    is 4 or 5 times that of bisection.\n    f(a) and f(b) cannot have the same signs. Generally, on a par with the\n    brent routine, but not as heavily tested. It is a safe version of the\n    secant method that uses hyperbolic extrapolation.\n    The version here is by Chuck Harris, and implements Algorithm M of\n    [BusAndDekker1975]_, where further details (convergence properties,\n    additional remarks and such) can be found\n    \n    Parameters\n    ----------\n    f : function\n        Python function returning a number. f must be continuous, and f(a) and\n        f(b) must have opposite signs.\n    a : scalar\n        One end of the bracketing interval [a,b].\n    b : scalar\n        The other end of the bracketing interval [a,b].\n    xtol : number, optional\n        The computed root ``x0`` will satisfy ``np.isclose(x, x0,\n        atol=xtol, rtol=rtol)``, where ``x`` is the exact root. The\n        parameter must be positive. As with `brentq`, for nice\n        functions the method will often satisfy the above condition\n        with ``xtol/2`` and ``rtol/2``.\n    rtol : number, optional\n        The computed root ``x0`` will satisfy ``np.isclose(x, x0,\n        atol=xtol, rtol=rtol)``, where ``x`` is the exact root. The\n        parameter cannot be smaller than its default value of\n        ``4*np.finfo(float).eps``. As with `brentq`, for nice functions\n        the method will often satisfy the above condition with\n        ``xtol/2`` and ``rtol/2``.\n    maxiter : int, optional\n        If convergence is not achieved in `maxiter` iterations, an error is\n        raised. Must be >= 0.\n    args : tuple, optional\n        Containing extra arguments for the function `f`.\n        `f` is called by ``apply(f, (x)+args)``.\n    full_output : bool, optional\n        If `full_output` is False, the root is returned. If `full_output` is\n        True, the return value is ``(x, r)``, where `x` is the root, and `r` is\n        a `RootResults` object.\n    disp : bool, optional\n        If True, raise RuntimeError if the algorithm didn't converge.\n        Otherwise, the convergence status is recorded in any `RootResults`\n        return object.\n    \n    Returns\n    -------\n    root : float\n        Root of `f` between `a` and `b`.\n    r : `RootResults` (present if ``full_output = True``)\n        Object containing information about the convergence. In particular,\n        ``r.converged`` is True if the routine converged.\n    \n    See Also\n    --------\n    fmin, fmin_powell, fmin_cg, fmin_bfgs, fmin_ncg : multivariate local optimizers\n    leastsq : nonlinear least squares minimizer\n    fmin_l_bfgs_b, fmin_tnc, fmin_cobyla : constrained multivariate optimizers\n    basinhopping, differential_evolution, brute : global optimizers\n    fminbound, brent, golden, bracket : local scalar minimizers\n    fsolve : N-D root-finding\n    brentq, ridder, bisect, newton : 1-D root-finding\n    fixed_point : scalar fixed-point finder\n    elementwise.find_root : efficient elementwise 1-D root-finder\n    \n    Notes\n    -----\n    As mentioned in the parameter documentation, the computed root ``x0`` will\n    satisfy ``np.isclose(x, x0, atol=xtol, rtol=rtol)``, where ``x`` is the\n    exact root. In equation form, this terminating condition is ``abs(x - x0)\n    <= xtol + rtol * abs(x0)``.\n    \n    The default value ``xtol=2e-12`` may lead to surprising behavior if one\n    expects `brenth` to always compute roots with relative error near machine\n    precision. Care should be taken to select `xtol` for the use case at hand.\n    Setting ``xtol=5e-324``, the smallest subnormal number, will ensure the\n    highest level of accuracy. Larger values of `xtol` may be useful for saving\n    function evaluations when a root is at or near zero in applications where\n    the tiny absolute differences available between floating point numbers near\n    zero are not meaningful.\n    \n    References\n    ----------\n    .. [BusAndDekker1975]\n       Bus, J. C. P., Dekker, T. J.,\n       \"Two Efficient Algorithms with Guaranteed Convergence for Finding a Zero\n       of a Function\", ACM Transactions on Mathematical Software, Vol. 1, Issue\n       4, Dec. 1975, pp. 330-345. Section 3: \"Algorithm M\".\n       :doi:`10.1145/355656.355659`\n    \n    Examples\n    --------\n    >>> def f(x):\n    ...     return (x**2 - 1)\n    \n    >>> from scipy import optimize\n    \n    >>> root = optimize.brenth(f, -2, 0)\n    >>> root\n    -1.0\n    \n    >>> root = optimize.brenth(f, 0, 2)\n    >>> root\n    1.0",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "82a06fdef6d3999d09d47dd15ab85b0fded8796c2188cf44b60033185121d93c",
            "fields": [
                {
                    "id": "knzdk2w2",
                    "encoding": "",
                    "name": "f",
                    "value": "",
                    "defaultValue": "",
                    "description": "Python function returning a number. f must be continuous, and f(a) and\nf(b) must have opposite signs.",
                    "type": "function",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "adi1o9g1",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "One end of the bracketing interval [a,b].",
                    "type": "scalar",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "47ws0nyx",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "The other end of the bracketing interval [a,b].",
                    "type": "scalar",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ekvq0i0j",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Containing extra arguments for the function `f`.\n`f` is called by ``apply(f, (x)+args)``.",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gsdz7_3u",
                    "encoding": "",
                    "name": "xtol",
                    "value": 2e-12,
                    "defaultValue": 2e-12,
                    "description": "The computed root ``x0`` will satisfy ``np.isclose(x, x0,\natol=xtol, rtol=rtol)``, where ``x`` is the exact root. The\nparameter must be positive. As with `brentq`, for nice\nfunctions the method will often satisfy the above condition\nwith ``xtol/2`` and ``rtol/2``.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pd2onr9u",
                    "encoding": "",
                    "name": "rtol",
                    "value": "np.float64(8.881784197001252e-16)",
                    "defaultValue": "np.float64(8.881784197001252e-16)",
                    "description": "The computed root ``x0`` will satisfy ``np.isclose(x, x0,\natol=xtol, rtol=rtol)``, where ``x`` is the exact root. The\nparameter cannot be smaller than its default value of\n``4*np.finfo(float).eps``. As with `brentq`, for nice functions\nthe method will often satisfy the above condition with\n``xtol/2`` and ``rtol/2``.",
                    "type": "numpy.float64",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1hjbtofl",
                    "encoding": "",
                    "name": "maxiter",
                    "value": 100,
                    "defaultValue": 100,
                    "description": "If convergence is not achieved in `maxiter` iterations, an error is\nraised. Must be >= 0.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "10om_p67",
                    "encoding": "",
                    "name": "full_output",
                    "value": false,
                    "defaultValue": false,
                    "description": "If `full_output` is False, the root is returned. If `full_output` is\nTrue, the return value is ``(x, r)``, where `x` is the root, and `r` is\na `RootResults` object.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dvwe2r03",
                    "encoding": "",
                    "name": "disp",
                    "value": true,
                    "defaultValue": true,
                    "description": "If True, raise RuntimeError if the algorithm didn't converge.\nOtherwise, the convergence status is recorded in any `RootResults`\nreturn object.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lomkt1ff",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.zeros.brenth",
                    "defaultValue": "scipy.optimize.zeros.brenth",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "33phpv61",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d05eztm4",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "5qhg288b",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nd1yed_u",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize.zeros",
                    "defaultValue": "scipy.optimize.zeros",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jlh2r5w1",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d2ymgfcs",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "9dqqyb43",
            "name": "zeros.brentq",
            "description": "Find a root of a function in a bracketing interval using Brent's method.\n    \n    Uses the classic Brent's method to find a root of the function `f` on\n    the sign changing interval [a , b]. Generally considered the best of the\n    rootfinding routines here. It is a safe version of the secant method that\n    uses inverse quadratic extrapolation. Brent's method combines root\n    bracketing, interval bisection, and inverse quadratic interpolation. It is\n    sometimes known as the van Wijngaarden-Dekker-Brent method. Brent (1973)\n    claims convergence is guaranteed for functions computable within [a,b].\n    \n    [Brent1973]_ provides the classic description of the algorithm. Another\n    description can be found in a recent edition of Numerical Recipes, including\n    [PressEtal1992]_. A third description is at\n    http://mathworld.wolfram.com/BrentsMethod.html. It should be easy to\n    understand the algorithm just by reading our code. Our code diverges a bit\n    from standard presentations: we choose a different formula for the\n    extrapolation step.\n    \n    Parameters\n    ----------\n    f : function\n        Python function returning a number. The function :math:`f`\n        must be continuous, and :math:`f(a)` and :math:`f(b)` must\n        have opposite signs.\n    a : scalar\n        One end of the bracketing interval :math:`[a, b]`.\n    b : scalar\n        The other end of the bracketing interval :math:`[a, b]`.\n    xtol : number, optional\n        The computed root ``x0`` will satisfy ``np.isclose(x, x0,\n        atol=xtol, rtol=rtol)``, where ``x`` is the exact root. The\n        parameter must be positive. For nice functions, Brent's\n        method will often satisfy the above condition with ``xtol/2``\n        and ``rtol/2``. [Brent1973]_\n    rtol : number, optional\n        The computed root ``x0`` will satisfy ``np.isclose(x, x0,\n        atol=xtol, rtol=rtol)``, where ``x`` is the exact root. The\n        parameter cannot be smaller than its default value of\n        ``4*np.finfo(float).eps``. For nice functions, Brent's\n        method will often satisfy the above condition with ``xtol/2``\n        and ``rtol/2``. [Brent1973]_\n    maxiter : int, optional\n        If convergence is not achieved in `maxiter` iterations, an error is\n        raised. Must be >= 0.\n    args : tuple, optional\n        Containing extra arguments for the function `f`.\n        `f` is called by ``apply(f, (x)+args)``.\n    full_output : bool, optional\n        If `full_output` is False, the root is returned. If `full_output` is\n        True, the return value is ``(x, r)``, where `x` is the root, and `r` is\n        a `RootResults` object.\n    disp : bool, optional\n        If True, raise RuntimeError if the algorithm didn't converge.\n        Otherwise, the convergence status is recorded in any `RootResults`\n        return object.\n    \n    Returns\n    -------\n    root : float\n        Root of `f` between `a` and `b`.\n    r : `RootResults` (present if ``full_output = True``)\n        Object containing information about the convergence. In particular,\n        ``r.converged`` is True if the routine converged.\n    \n    See Also\n    --------\n    fmin, fmin_powell, fmin_cg, fmin_bfgs, fmin_ncg : multivariate local optimizers\n    leastsq : nonlinear least squares minimizer\n    fmin_l_bfgs_b, fmin_tnc, fmin_cobyla : constrained multivariate optimizers\n    basinhopping, differential_evolution, brute : global optimizers\n    fminbound, brent, golden, bracket : local scalar minimizers\n    fsolve : N-D root-finding\n    brenth, ridder, bisect, newton : 1-D root-finding\n    fixed_point : scalar fixed-point finder\n    elementwise.find_root : efficient elementwise 1-D root-finder\n    \n    Notes\n    -----\n    `f` must be continuous.  f(a) and f(b) must have opposite signs.\n    \n    As mentioned in the parameter documentation, the computed root ``x0`` will\n    satisfy ``np.isclose(x, x0, atol=xtol, rtol=rtol)``, where ``x`` is the\n    exact root. In equation form, this terminating condition is ``abs(x - x0)\n    <= xtol + rtol * abs(x0)``.\n    \n    The default value ``xtol=2e-12`` may lead to surprising behavior if one\n    expects `brentq` to always compute roots with relative error near machine\n    precision. Care should be taken to select `xtol` for the use case at hand.\n    Setting ``xtol=5e-324``, the smallest subnormal number, will ensure the\n    highest level of accuracy. Larger values of `xtol` may be useful for saving\n    function evaluations when a root is at or near zero in applications where\n    the tiny absolute differences available between floating point numbers near\n    zero are not meaningful.\n    \n    References\n    ----------\n    .. [Brent1973]\n       Brent, R. P.,\n       *Algorithms for Minimization Without Derivatives*.\n       Englewood Cliffs, NJ: Prentice-Hall, 1973. Ch. 3-4.\n    \n    .. [PressEtal1992]\n       Press, W. H.; Flannery, B. P.; Teukolsky, S. A.; and Vetterling, W. T.\n       *Numerical Recipes in FORTRAN: The Art of Scientific Computing*, 2nd ed.\n       Cambridge, England: Cambridge University Press, pp. 352-355, 1992.\n       Section 9.3:  \"Van Wijngaarden-Dekker-Brent Method.\"\n    \n    Examples\n    --------\n    >>> def f(x):\n    ...     return (x**2 - 1)\n    \n    >>> from scipy import optimize\n    \n    >>> root = optimize.brentq(f, -2, 0)\n    >>> root\n    -1.0\n    \n    >>> root = optimize.brentq(f, 0, 2)\n    >>> root\n    1.0",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c1a7a8ab3e38226b1bf69fd3775ceb64ae1603efa0fccfdcfdd722c2b8693c9c",
            "fields": [
                {
                    "id": "s6qm2pxe",
                    "encoding": "",
                    "name": "f",
                    "value": "",
                    "defaultValue": "",
                    "description": "Python function returning a number. The function :math:`f`\nmust be continuous, and :math:`f(a)` and :math:`f(b)` must\nhave opposite signs.",
                    "type": "function",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m2ncaehj",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "One end of the bracketing interval :math:`[a, b]`.",
                    "type": "scalar",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zicquos5",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "The other end of the bracketing interval :math:`[a, b]`.",
                    "type": "scalar",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vqaxg_m4",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Containing extra arguments for the function `f`.\n`f` is called by ``apply(f, (x)+args)``.",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yje_kuic",
                    "encoding": "",
                    "name": "xtol",
                    "value": 2e-12,
                    "defaultValue": 2e-12,
                    "description": "The computed root ``x0`` will satisfy ``np.isclose(x, x0,\natol=xtol, rtol=rtol)``, where ``x`` is the exact root. The\nparameter must be positive. For nice functions, Brent's\nmethod will often satisfy the above condition with ``xtol/2``\nand ``rtol/2``. [Brent1973]_",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3k70fb22",
                    "encoding": "",
                    "name": "rtol",
                    "value": "np.float64(8.881784197001252e-16)",
                    "defaultValue": "np.float64(8.881784197001252e-16)",
                    "description": "The computed root ``x0`` will satisfy ``np.isclose(x, x0,\natol=xtol, rtol=rtol)``, where ``x`` is the exact root. The\nparameter cannot be smaller than its default value of\n``4*np.finfo(float).eps``. For nice functions, Brent's\nmethod will often satisfy the above condition with ``xtol/2``\nand ``rtol/2``. [Brent1973]_",
                    "type": "numpy.float64",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mzmqriwh",
                    "encoding": "",
                    "name": "maxiter",
                    "value": 100,
                    "defaultValue": 100,
                    "description": "If convergence is not achieved in `maxiter` iterations, an error is\nraised. Must be >= 0.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "chhj_iy7",
                    "encoding": "",
                    "name": "full_output",
                    "value": false,
                    "defaultValue": false,
                    "description": "If `full_output` is False, the root is returned. If `full_output` is\nTrue, the return value is ``(x, r)``, where `x` is the root, and `r` is\na `RootResults` object.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c3hnntar",
                    "encoding": "",
                    "name": "disp",
                    "value": true,
                    "defaultValue": true,
                    "description": "If True, raise RuntimeError if the algorithm didn't converge.\nOtherwise, the convergence status is recorded in any `RootResults`\nreturn object.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h_uto3i1",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.zeros.brentq",
                    "defaultValue": "scipy.optimize.zeros.brentq",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3uc4e1r1",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9zdrpj44",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "imitve27",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hlxndzas",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize.zeros",
                    "defaultValue": "scipy.optimize.zeros",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_8jdq3ny",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i79efwq3",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "j33wal1o",
            "name": "zeros.newton",
            "description": "Find a root of a real or complex function using the Newton-Raphson\n    (or secant or Halley's) method.\n    \n    Find a root of the scalar-valued function `func` given a nearby scalar\n    starting point `x0`.\n    The Newton-Raphson method is used if the derivative `fprime` of `func`\n    is provided, otherwise the secant method is used. If the second order\n    derivative `fprime2` of `func` is also provided, then Halley's method is\n    used.\n    \n    If `x0` is a sequence with more than one item, `newton` returns an array:\n    the roots of the function from each (scalar) starting point in `x0`.\n    In this case, `func` must be vectorized to return a sequence or array of\n    the same shape as its first argument. If `fprime` (`fprime2`) is given,\n    then its return must also have the same shape: each element is the first\n    (second) derivative of `func` with respect to its only variable evaluated\n    at each element of its first argument.\n    \n    `newton` is for finding roots of a scalar-valued functions of a single\n    variable. For problems involving several variables, see `root`.\n    \n    Parameters\n    ----------\n    func : callable\n        The function whose root is wanted. It must be a function of a\n        single variable of the form ``f(x,a,b,c...)``, where ``a,b,c...``\n        are extra arguments that can be passed in the `args` parameter.\n    x0 : float, sequence, or ndarray\n        An initial estimate of the root that should be somewhere near the\n        actual root. If not scalar, then `func` must be vectorized and return\n        a sequence or array of the same shape as its first argument.\n    fprime : callable, optional\n        The derivative of the function when available and convenient. If it\n        is None (default), then the secant method is used.\n    args : tuple, optional\n        Extra arguments to be used in the function call.\n    tol : float, optional\n        The allowable error of the root's value. If `func` is complex-valued,\n        a larger `tol` is recommended as both the real and imaginary parts\n        of `x` contribute to ``|x - x0|``.\n    maxiter : int, optional\n        Maximum number of iterations.\n    fprime2 : callable, optional\n        The second order derivative of the function when available and\n        convenient. If it is None (default), then the normal Newton-Raphson\n        or the secant method is used. If it is not None, then Halley's method\n        is used.\n    x1 : float, optional\n        Another estimate of the root that should be somewhere near the\n        actual root. Used if `fprime` is not provided.\n    rtol : float, optional\n        Tolerance (relative) for termination.\n    full_output : bool, optional\n        If `full_output` is False (default), the root is returned.\n        If True and `x0` is scalar, the return value is ``(x, r)``, where ``x``\n        is the root and ``r`` is a `RootResults` object.\n        If True and `x0` is non-scalar, the return value is ``(x, converged,\n        zero_der)`` (see Returns section for details).\n    disp : bool, optional\n        If True, raise a RuntimeError if the algorithm didn't converge, with\n        the error message containing the number of iterations and current\n        function value. Otherwise, the convergence status is recorded in a\n        `RootResults` return object.\n        Ignored if `x0` is not scalar.\n        *Note: this has little to do with displaying, however,\n        the `disp` keyword cannot be renamed for backwards compatibility.*\n    \n    Returns\n    -------\n    root : float, sequence, or ndarray\n        Estimated location where function is zero.\n    r : `RootResults`, optional\n        Present if ``full_output=True`` and `x0` is scalar.\n        Object containing information about the convergence. In particular,\n        ``r.converged`` is True if the routine converged.\n    converged : ndarray of bool, optional\n        Present if ``full_output=True`` and `x0` is non-scalar.\n        For vector functions, indicates which elements converged successfully.\n    zero_der : ndarray of bool, optional\n        Present if ``full_output=True`` and `x0` is non-scalar.\n        For vector functions, indicates which elements had a zero derivative.\n    \n    See Also\n    --------\n    root_scalar : interface to root solvers for scalar functions\n    root : interface to root solvers for multi-input, multi-output functions\n    \n    Notes\n    -----\n    The convergence rate of the Newton-Raphson method is quadratic,\n    the Halley method is cubic, and the secant method is\n    sub-quadratic. This means that if the function is well-behaved\n    the actual error in the estimated root after the nth iteration\n    is approximately the square (cube for Halley) of the error\n    after the (n-1)th step. However, the stopping criterion used\n    here is the step size and there is no guarantee that a root\n    has been found. Consequently, the result should be verified.\n    Safer algorithms are brentq, brenth, ridder, and bisect,\n    but they all require that the root first be bracketed in an\n    interval where the function changes sign. The brentq algorithm\n    is recommended for general use in one dimensional problems\n    when such an interval has been found.\n    \n    When `newton` is used with arrays, it is best suited for the following\n    types of problems:\n    \n    * The initial guesses, `x0`, are all relatively the same distance from\n      the roots.\n    * Some or all of the extra arguments, `args`, are also arrays so that a\n      class of similar problems can be solved together.\n    * The size of the initial guesses, `x0`, is larger than O(100) elements.\n      Otherwise, a naive loop may perform as well or better than a vector.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> import matplotlib.pyplot as plt\n    >>> from scipy import optimize\n    \n    >>> def f(x):\n    ...     return (x**3 - 1)  # only one real root at x = 1\n    \n    ``fprime`` is not provided, use the secant method:\n    \n    >>> root = optimize.newton(f, 1.5)\n    >>> root\n    1.0000000000000016\n    >>> root = optimize.newton(f, 1.5, fprime2=lambda x: 6 * x)\n    >>> root\n    1.0000000000000016\n    \n    Only ``fprime`` is provided, use the Newton-Raphson method:\n    \n    >>> root = optimize.newton(f, 1.5, fprime=lambda x: 3 * x**2)\n    >>> root\n    1.0\n    \n    Both ``fprime2`` and ``fprime`` are provided, use Halley's method:\n    \n    >>> root = optimize.newton(f, 1.5, fprime=lambda x: 3 * x**2,\n    ...                        fprime2=lambda x: 6 * x)\n    >>> root\n    1.0\n    \n    When we want to find roots for a set of related starting values and/or\n    function parameters, we can provide both of those as an array of inputs:\n    \n    >>> f = lambda x, a: x**3 - a\n    >>> fder = lambda x, a: 3 * x**2\n    >>> rng = np.random.default_rng()\n    >>> x = rng.standard_normal(100)\n    >>> a = np.arange(-50, 50)\n    >>> vec_res = optimize.newton(f, x, fprime=fder, args=(a, ), maxiter=200)\n    \n    The above is the equivalent of solving for each value in ``(x, a)``\n    separately in a for-loop, just faster:\n    \n    >>> loop_res = [optimize.newton(f, x0, fprime=fder, args=(a0,),\n    ...                             maxiter=200)\n    ...             for x0, a0 in zip(x, a)]\n    >>> np.allclose(vec_res, loop_res)\n    True\n    \n    Plot the results found for all values of ``a``:\n    \n    >>> analytical_result = np.sign(a) * np.abs(a)**(1/3)\n    >>> fig, ax = plt.subplots()\n    >>> ax.plot(a, analytical_result, 'o')\n    >>> ax.plot(a, vec_res, '.')\n    >>> ax.set_xlabel('$a$')\n    >>> ax.set_ylabel('$x$ where $f(x, a)=0$')\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5f2ac94e679b64fae1f13cecda99a3327b050beb0a699e8e78827cd59e6b9038",
            "fields": [
                {
                    "id": "iccburmp",
                    "encoding": "",
                    "name": "func",
                    "value": "",
                    "defaultValue": "",
                    "description": "The function whose root is wanted. It must be a function of a\nsingle variable of the form ``f(x,a,b,c...)``, where ``a,b,c...``\nare extra arguments that can be passed in the `args` parameter.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gbpodmsy",
                    "encoding": "",
                    "name": "x0",
                    "value": "",
                    "defaultValue": "",
                    "description": "An initial estimate of the root that should be somewhere near the\nactual root. If not scalar, then `func` must be vectorized and return\na sequence or array of the same shape as its first argument.",
                    "type": "float, sequence, or ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "syejhe90",
                    "encoding": "",
                    "name": "fprime",
                    "value": "",
                    "defaultValue": "",
                    "description": "The derivative of the function when available and convenient. If it\nis None (default), then the secant method is used.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9bkikukr",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Extra arguments to be used in the function call.",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w1jo8um8",
                    "encoding": "",
                    "name": "tol",
                    "value": 1.48e-08,
                    "defaultValue": 1.48e-08,
                    "description": "The allowable error of the root's value. If `func` is complex-valued,\na larger `tol` is recommended as both the real and imaginary parts\nof `x` contribute to ``|x - x0|``.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ixviac09",
                    "encoding": "",
                    "name": "maxiter",
                    "value": 50,
                    "defaultValue": 50,
                    "description": "Maximum number of iterations.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zdhigz1_",
                    "encoding": "",
                    "name": "fprime2",
                    "value": "",
                    "defaultValue": "",
                    "description": "The second order derivative of the function when available and\nconvenient. If it is None (default), then the normal Newton-Raphson\nor the secant method is used. If it is not None, then Halley's method\nis used.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cw25do9i",
                    "encoding": "",
                    "name": "x1",
                    "value": "",
                    "defaultValue": "",
                    "description": "Another estimate of the root that should be somewhere near the\nactual root. Used if `fprime` is not provided.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x6i63o4c",
                    "encoding": "",
                    "name": "rtol",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Tolerance (relative) for termination.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xmoaty9o",
                    "encoding": "",
                    "name": "full_output",
                    "value": false,
                    "defaultValue": false,
                    "description": "If `full_output` is False (default), the root is returned.\nIf True and `x0` is scalar, the return value is ``(x, r)``, where ``x``\nis the root and ``r`` is a `RootResults` object.\nIf True and `x0` is non-scalar, the return value is ``(x, converged,\nzero_der)`` (see Returns section for details).",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wwj906ji",
                    "encoding": "",
                    "name": "disp",
                    "value": true,
                    "defaultValue": true,
                    "description": "If True, raise a RuntimeError if the algorithm didn't converge, with\nthe error message containing the number of iterations and current\nfunction value. Otherwise, the convergence status is recorded in a\n`RootResults` return object.\nIgnored if `x0` is not scalar.\n*Note: this has little to do with displaying, however,\nthe `disp` keyword cannot be renamed for backwards compatibility.*",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9vyi2kjj",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.zeros.newton",
                    "defaultValue": "scipy.optimize.zeros.newton",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wiu5qlel",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mt9zt00h",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "3dwam7jq",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "40jcuamn",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize.zeros",
                    "defaultValue": "scipy.optimize.zeros",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yuupcb3x",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "idlym_1x",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "lwstqyvx",
            "name": "zeros.ridder",
            "description": "Find a root of a function in an interval using Ridder's method.\n    \n    Parameters\n    ----------\n    f : function\n        Python function returning a number. f must be continuous, and f(a) and\n        f(b) must have opposite signs.\n    a : scalar\n        One end of the bracketing interval [a,b].\n    b : scalar\n        The other end of the bracketing interval [a,b].\n    xtol : number, optional\n        The computed root ``x0`` will satisfy ``np.isclose(x, x0,\n        atol=xtol, rtol=rtol)``, where ``x`` is the exact root. The\n        parameter must be positive.\n    rtol : number, optional\n        The computed root ``x0`` will satisfy ``np.isclose(x, x0,\n        atol=xtol, rtol=rtol)``, where ``x`` is the exact root. The\n        parameter cannot be smaller than its default value of\n        ``4*np.finfo(float).eps``.\n    maxiter : int, optional\n        If convergence is not achieved in `maxiter` iterations, an error is\n        raised. Must be >= 0.\n    args : tuple, optional\n        Containing extra arguments for the function `f`.\n        `f` is called by ``apply(f, (x)+args)``.\n    full_output : bool, optional\n        If `full_output` is False, the root is returned. If `full_output` is\n        True, the return value is ``(x, r)``, where `x` is the root, and `r` is\n        a `RootResults` object.\n    disp : bool, optional\n        If True, raise RuntimeError if the algorithm didn't converge.\n        Otherwise, the convergence status is recorded in any `RootResults`\n        return object.\n    \n    Returns\n    -------\n    root : float\n        Root of `f` between `a` and `b`.\n    r : `RootResults` (present if ``full_output = True``)\n        Object containing information about the convergence.\n        In particular, ``r.converged`` is True if the routine converged.\n    \n    See Also\n    --------\n    brentq, brenth, bisect, newton : 1-D root-finding\n    fixed_point : scalar fixed-point finder\n    elementwise.find_root : efficient elementwise 1-D root-finder\n    \n    Notes\n    -----\n    Uses [Ridders1979]_ method to find a root of the function `f` between the\n    arguments `a` and `b`. Ridders' method is faster than bisection, but not\n    generally as fast as the Brent routines. [Ridders1979]_ provides the\n    classic description and source of the algorithm. A description can also be\n    found in any recent edition of Numerical Recipes.\n    \n    The routine used here diverges slightly from standard presentations in\n    order to be a bit more careful of tolerance.\n    \n    As mentioned in the parameter documentation, the computed root ``x0`` will\n    satisfy ``np.isclose(x, x0, atol=xtol, rtol=rtol)``, where ``x`` is the\n    exact root. In equation form, this terminating condition is ``abs(x - x0)\n    <= xtol + rtol * abs(x0)``.\n    \n    The default value ``xtol=2e-12`` may lead to surprising behavior if one\n    expects `ridder` to always compute roots with relative error near machine\n    precision. Care should be taken to select `xtol` for the use case at hand.\n    Setting ``xtol=5e-324``, the smallest subnormal number, will ensure the\n    highest level of accuracy. Larger values of `xtol` may be useful for saving\n    function evaluations when a root is at or near zero in applications where\n    the tiny absolute differences available between floating point numbers near\n    zero are not meaningful.\n    \n    References\n    ----------\n    .. [Ridders1979]\n       Ridders, C. F. J. \"A New Algorithm for Computing a\n       Single Root of a Real Continuous Function.\"\n       IEEE Trans. Circuits Systems 26, 979-980, 1979.\n    \n    Examples\n    --------\n    \n    >>> def f(x):\n    ...     return (x**2 - 1)\n    \n    >>> from scipy import optimize\n    \n    >>> root = optimize.ridder(f, 0, 2)\n    >>> root\n    1.0\n    \n    >>> root = optimize.ridder(f, -2, 0)\n    >>> root\n    -1.0",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "096050ac8113ff5ac09d76e3dc5e53272052096977b65b0ec7daecf265965101",
            "fields": [
                {
                    "id": "vxnr2mep",
                    "encoding": "",
                    "name": "f",
                    "value": "",
                    "defaultValue": "",
                    "description": "Python function returning a number. f must be continuous, and f(a) and\nf(b) must have opposite signs.",
                    "type": "function",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "um0jq8uh",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "One end of the bracketing interval [a,b].",
                    "type": "scalar",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ekgguohh",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "The other end of the bracketing interval [a,b].",
                    "type": "scalar",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vhh7it75",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Containing extra arguments for the function `f`.\n`f` is called by ``apply(f, (x)+args)``.",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "762swq_7",
                    "encoding": "",
                    "name": "xtol",
                    "value": 2e-12,
                    "defaultValue": 2e-12,
                    "description": "The computed root ``x0`` will satisfy ``np.isclose(x, x0,\natol=xtol, rtol=rtol)``, where ``x`` is the exact root. The\nparameter must be positive.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4k69ohmg",
                    "encoding": "",
                    "name": "rtol",
                    "value": "np.float64(8.881784197001252e-16)",
                    "defaultValue": "np.float64(8.881784197001252e-16)",
                    "description": "The computed root ``x0`` will satisfy ``np.isclose(x, x0,\natol=xtol, rtol=rtol)``, where ``x`` is the exact root. The\nparameter cannot be smaller than its default value of\n``4*np.finfo(float).eps``.",
                    "type": "numpy.float64",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6s__1yv7",
                    "encoding": "",
                    "name": "maxiter",
                    "value": 100,
                    "defaultValue": 100,
                    "description": "If convergence is not achieved in `maxiter` iterations, an error is\nraised. Must be >= 0.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sul99l_v",
                    "encoding": "",
                    "name": "full_output",
                    "value": false,
                    "defaultValue": false,
                    "description": "If `full_output` is False, the root is returned. If `full_output` is\nTrue, the return value is ``(x, r)``, where `x` is the root, and `r` is\na `RootResults` object.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m9mmpr9k",
                    "encoding": "",
                    "name": "disp",
                    "value": true,
                    "defaultValue": true,
                    "description": "If True, raise RuntimeError if the algorithm didn't converge.\nOtherwise, the convergence status is recorded in any `RootResults`\nreturn object.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oeidzb3w",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.zeros.ridder",
                    "defaultValue": "scipy.optimize.zeros.ridder",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q4sn_1ex",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bn2nkawe",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "flbda8o0",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "33o2yla3",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize.zeros",
                    "defaultValue": "scipy.optimize.zeros",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "12611nwq",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iprjndvt",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "gkxds7nw",
            "name": "zeros.toms748",
            "description": "Find a root using TOMS Algorithm 748 method.\n    \n    Implements the Algorithm 748 method of Alefeld, Potro and Shi to find a\n    root of the function `f` on the interval ``[a , b]``, where ``f(a)`` and\n    `f(b)` must have opposite signs.\n    \n    It uses a mixture of inverse cubic interpolation and\n    \"Newton-quadratic\" steps. [APS1995].\n    \n    Parameters\n    ----------\n    f : function\n        Python function returning a scalar. The function :math:`f`\n        must be continuous, and :math:`f(a)` and :math:`f(b)`\n        have opposite signs.\n    a : scalar,\n        lower boundary of the search interval\n    b : scalar,\n        upper boundary of the search interval\n    args : tuple, optional\n        containing extra arguments for the function `f`.\n        `f` is called by ``f(x, *args)``.\n    k : int, optional\n        The number of Newton quadratic steps to perform each\n        iteration. ``k>=1``.\n    xtol : scalar, optional\n        The computed root ``x0`` will satisfy ``np.isclose(x, x0,\n        atol=xtol, rtol=rtol)``, where ``x`` is the exact root. The\n        parameter must be positive.\n    rtol : scalar, optional\n        The computed root ``x0`` will satisfy ``np.isclose(x, x0,\n        atol=xtol, rtol=rtol)``, where ``x`` is the exact root.\n    maxiter : int, optional\n        If convergence is not achieved in `maxiter` iterations, an error is\n        raised. Must be >= 0.\n    full_output : bool, optional\n        If `full_output` is False, the root is returned. If `full_output` is\n        True, the return value is ``(x, r)``, where `x` is the root, and `r` is\n        a `RootResults` object.\n    disp : bool, optional\n        If True, raise RuntimeError if the algorithm didn't converge.\n        Otherwise, the convergence status is recorded in the `RootResults`\n        return object.\n    \n    Returns\n    -------\n    root : float\n        Approximate root of `f`\n    r : `RootResults` (present if ``full_output = True``)\n        Object containing information about the convergence. In particular,\n        ``r.converged`` is True if the routine converged.\n    \n    See Also\n    --------\n    brentq, brenth, ridder, bisect, newton\n    fsolve : find roots in N dimensions.\n    elementwise.find_root : efficient elementwise 1-D root-finder\n    \n    Notes\n    -----\n    `f` must be continuous.\n    Algorithm 748 with ``k=2`` is asymptotically the most efficient\n    algorithm known for finding roots of a four times continuously\n    differentiable function.\n    In contrast with Brent's algorithm, which may only decrease the length of\n    the enclosing bracket on the last step, Algorithm 748 decreases it each\n    iteration with the same asymptotic efficiency as it finds the root.\n    \n    For easy statement of efficiency indices, assume that `f` has 4\n    continuous deriviatives.\n    For ``k=1``, the convergence order is at least 2.7, and with about\n    asymptotically 2 function evaluations per iteration, the efficiency\n    index is approximately 1.65.\n    For ``k=2``, the order is about 4.6 with asymptotically 3 function\n    evaluations per iteration, and the efficiency index 1.66.\n    For higher values of `k`, the efficiency index approaches\n    the kth root of ``(3k-2)``, hence ``k=1`` or ``k=2`` are\n    usually appropriate.\n    \n    As mentioned in the parameter documentation, the computed root ``x0`` will\n    satisfy ``np.isclose(x, x0, atol=xtol, rtol=rtol)``, where ``x`` is the\n    exact root. In equation form, this terminating condition is ``abs(x - x0)\n    <= xtol + rtol * abs(x0)``.\n    \n    The default value ``xtol=2e-12`` may lead to surprising behavior if one\n    expects `toms748` to always compute roots with relative error near machine\n    precision. Care should be taken to select `xtol` for the use case at hand.\n    Setting ``xtol=5e-324``, the smallest subnormal number, will ensure the\n    highest level of accuracy. Larger values of `xtol` may be useful for saving\n    function evaluations when a root is at or near zero in applications where\n    the tiny absolute differences available between floating point numbers near\n    zero are not meaningful.\n    \n    References\n    ----------\n    .. [APS1995]\n       Alefeld, G. E. and Potra, F. A. and Shi, Yixun,\n       *Algorithm 748: Enclosing Zeros of Continuous Functions*,\n       ACM Trans. Math. Softw. Volume 221(1995)\n       doi = {10.1145/210089.210111}\n    \n    Examples\n    --------\n    >>> def f(x):\n    ...     return (x**3 - 1)  # only one real root at x = 1\n    \n    >>> from scipy import optimize\n    >>> root, results = optimize.toms748(f, 0, 2, full_output=True)\n    >>> root\n    1.0\n    >>> results\n          converged: True\n               flag: converged\n     function_calls: 11\n         iterations: 5\n               root: 1.0\n             method: toms748",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "17799214a11be82456a5f8dfbd30d7ef3a39bc818c573f71485cbdd222dbbfca",
            "fields": [
                {
                    "id": "7szz1f1i",
                    "encoding": "",
                    "name": "f",
                    "value": "",
                    "defaultValue": "",
                    "description": "Python function returning a scalar. The function :math:`f`\nmust be continuous, and :math:`f(a)` and :math:`f(b)`\nhave opposite signs.",
                    "type": "function",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fj5o7t7u",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "lower boundary of the search interval",
                    "type": "scalar,",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l8c4uu2q",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "upper boundary of the search interval",
                    "type": "scalar,",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ba50e8w2",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "containing extra arguments for the function `f`.\n`f` is called by ``f(x, *args)``.",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9rfsx2_t",
                    "encoding": "",
                    "name": "k",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "The number of Newton quadratic steps to perform each\niteration. ``k>=1``.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jluil3fq",
                    "encoding": "",
                    "name": "xtol",
                    "value": 2e-12,
                    "defaultValue": 2e-12,
                    "description": "The computed root ``x0`` will satisfy ``np.isclose(x, x0,\natol=xtol, rtol=rtol)``, where ``x`` is the exact root. The\nparameter must be positive.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "omgxhuj_",
                    "encoding": "",
                    "name": "rtol",
                    "value": "np.float64(8.881784197001252e-16)",
                    "defaultValue": "np.float64(8.881784197001252e-16)",
                    "description": "The computed root ``x0`` will satisfy ``np.isclose(x, x0,\natol=xtol, rtol=rtol)``, where ``x`` is the exact root.",
                    "type": "numpy.float64",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ek3o7qq5",
                    "encoding": "",
                    "name": "maxiter",
                    "value": 100,
                    "defaultValue": 100,
                    "description": "If convergence is not achieved in `maxiter` iterations, an error is\nraised. Must be >= 0.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nkfnklh9",
                    "encoding": "",
                    "name": "full_output",
                    "value": false,
                    "defaultValue": false,
                    "description": "If `full_output` is False, the root is returned. If `full_output` is\nTrue, the return value is ``(x, r)``, where `x` is the root, and `r` is\na `RootResults` object.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lygb9o1g",
                    "encoding": "",
                    "name": "disp",
                    "value": true,
                    "defaultValue": true,
                    "description": "If True, raise RuntimeError if the algorithm didn't converge.\nOtherwise, the convergence status is recorded in the `RootResults`\nreturn object.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vextyxvg",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.zeros.toms748",
                    "defaultValue": "scipy.optimize.zeros.toms748",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u7tizbqa",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p0px57my",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "wed2ycs4",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5wj7v69i",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize.zeros",
                    "defaultValue": "scipy.optimize.zeros",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wn0auqp3",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y7uzcxt1",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "52hpwld1",
            "name": "elementwise.bracket_minimum",
            "description": "Bracket the minimum of a unimodal, real-valued function of a real variable.\n    \n    For each element of the output of `f`, `bracket_minimum` seeks the scalar\n    bracket points ``xl < xm < xr`` such that ``fl >= fm <= fr`` where one of the\n    inequalities is strict.\n    \n    The function is guaranteed to find a valid bracket if the function is\n    strongly unimodal, but it may find a bracket under other conditions.\n    \n    This function works elementwise when `xm0`, `xl0`, `xr0`, `xmin`, `xmax`, `factor`,\n    and the elements of `args` are (mutually broadcastable) arrays.\n    \n    Parameters\n    ----------\n    f : callable\n        The function for which the root is to be bracketed. The signature must be::\n    \n            f(x: array, *args) -> array\n    \n        where each element of ``x`` is a finite real and ``args`` is a tuple,\n        which may contain an arbitrary number of arrays that are broadcastable\n        with ``x``.\n    \n        `f` must be an elementwise function: each element ``f(x)[i]``\n        must equal ``f(x[i])`` for all indices ``i``. It must not mutate the\n        array ``x`` or the arrays in ``args``.\n    xm0: float array_like\n        Starting guess for middle point of bracket.\n    xl0, xr0: float array_like, optional\n        Starting guesses for left and right endpoints of the bracket. Must\n        be broadcastable with all other array inputs.\n    xmin, xmax : float array_like, optional\n        Minimum and maximum allowable endpoints of the bracket, inclusive. Must\n        be broadcastable with all other array inputs.\n    factor : float array_like, default: 2\n        The factor used to grow the bracket. See Notes.\n    args : tuple of array_like, optional\n        Additional positional array arguments to be passed to `f`.\n        If the callable for which the root is desired requires arguments that are\n        not broadcastable with `x`, wrap that callable with `f` such that `f`\n        accepts only `x` and broadcastable ``*args``.\n    maxiter : int, default: 1000\n        The maximum number of iterations of the algorithm to perform.\n    \n    Returns\n    -------\n    res : _RichResult\n        An object similar to an instance of `scipy.optimize.OptimizeResult` with the\n        following attributes. The descriptions are written as though the values will\n        be scalars; however, if `f` returns an array, the outputs will be\n        arrays of the same shape.\n    \n        success : bool array\n            ``True`` where the algorithm terminated successfully (status ``0``);\n            ``False`` otherwise.\n        status : int array\n            An integer representing the exit status of the algorithm.\n    \n            - ``0`` : The algorithm produced a valid bracket.\n            - ``-1`` : The bracket expanded to the allowable limits. Assuming\n              unimodality, this implies the endpoint at the limit is a minimizer.\n            - ``-2`` : The maximum number of iterations was reached.\n            - ``-3`` : A non-finite value was encountered.\n            - ``-4`` : ``None`` shall pass.\n            - ``-5`` : The initial bracket does not satisfy\n              `xmin <= xl0 < xm0 < xr0 <= xmax`.\n    \n        bracket : 3-tuple of float arrays\n            The left, middle, and right points of the bracket, if the algorithm\n            terminated successfully.\n        f_bracket : 3-tuple of float arrays\n            The function value at the left, middle, and right points of the bracket.\n        nfev : int array\n            The number of abscissae at which `f` was evaluated to find the root.\n            This is distinct from the number of times `f` is *called* because the\n            the function may evaluated at multiple points in a single call.\n        nit : int array\n            The number of iterations of the algorithm that were performed.\n    \n    Notes\n    -----\n    Similar to `scipy.optimize.bracket`, this function seeks to find real\n    points ``xl < xm < xr`` such that ``f(xl) >= f(xm)`` and ``f(xr) >= f(xm)``,\n    where at least one of the inequalities is strict. Unlike `scipy.optimize.bracket`,\n    this function can operate in a vectorized manner on array input, so long as\n    the input arrays are broadcastable with each other. Also unlike\n    `scipy.optimize.bracket`, users may specify minimum and maximum endpoints\n    for the desired bracket.\n    \n    Given an initial trio of points ``xl = xl0``, ``xm = xm0``, ``xr = xr0``,\n    the algorithm checks if these points already give a valid bracket. If not,\n    a new endpoint, ``w`` is chosen in the \"downhill\" direction, ``xm`` becomes the new\n    opposite endpoint, and either `xl` or `xr` becomes the new middle point,\n    depending on which direction is downhill. The algorithm repeats from here.\n    \n    The new endpoint `w` is chosen differently depending on whether or not a\n    boundary `xmin` or `xmax` has been set in the downhill direction. Without\n    loss of generality, suppose the downhill direction is to the right, so that\n    ``f(xl) > f(xm) > f(xr)``. If there is no boundary to the right, then `w`\n    is chosen to be ``xr + factor * (xr - xm)`` where `factor` is controlled by\n    the user (defaults to 2.0) so that step sizes increase in geometric proportion.\n    If there is a boundary, `xmax` in this case, then `w` is chosen to be\n    ``xmax - (xmax - xr)/factor``, with steps slowing to a stop at\n    `xmax`. This cautious approach ensures that a minimum near but distinct from\n    the boundary isn't missed while also detecting whether or not the `xmax` is\n    a minimizer when `xmax` is reached after a finite number of steps.\n    \n    See Also\n    --------\n    scipy.optimize.bracket\n    scipy.optimize.elementwise.find_minimum\n    \n    Examples\n    --------\n    Suppose we wish to minimize the following function.\n    \n    >>> def f(x, c=1):\n    ...     return (x - c)**2 + 2\n    \n    First, we must find a valid bracket. The function is unimodal,\n    so `bracket_minium` will easily find a bracket.\n    \n    >>> from scipy.optimize import elementwise\n    >>> res_bracket = elementwise.bracket_minimum(f, 0)\n    >>> res_bracket.success\n    True\n    >>> res_bracket.bracket\n    (0.0, 0.5, 1.5)\n    \n    Indeed, the bracket points are ordered and the function value\n    at the middle bracket point is less than at the surrounding\n    points.\n    \n    >>> xl, xm, xr = res_bracket.bracket\n    >>> fl, fm, fr = res_bracket.f_bracket\n    >>> (xl < xm < xr) and (fl > fm <= fr)\n    True\n    \n    Once we have a valid bracket, `find_minimum` can be used to provide\n    an estimate of the minimizer.\n    \n    >>> res_minimum = elementwise.find_minimum(f, res_bracket.bracket)\n    >>> res_minimum.x\n    1.0000000149011612\n    \n    `bracket_minimum` and `find_minimum` accept arrays for most arguments.\n    For instance, to find the minimizers and minima for a few values of the\n    parameter ``c`` at once:\n    \n    >>> import numpy as np\n    >>> c = np.asarray([1, 1.5, 2])\n    >>> res_bracket = elementwise.bracket_minimum(f, 0, args=(c,))\n    >>> res_bracket.bracket\n    (array([0. , 0.5, 0.5]), array([0.5, 1.5, 1.5]), array([1.5, 2.5, 2.5]))\n    >>> res_minimum = elementwise.find_minimum(f, res_bracket.bracket, args=(c,))\n    >>> res_minimum.x\n    array([1.00000001, 1.5       , 2.        ])\n    >>> res_minimum.f_x\n    array([2., 2., 2.])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9c045b46a2257c1b910791acd205485ff57262ae023cbc4491793e14ba815e4b",
            "fields": [
                {
                    "id": "844tr7dn",
                    "encoding": "",
                    "name": "f",
                    "value": "",
                    "defaultValue": "",
                    "description": "The function for which the root is to be bracketed. The signature must be::\n\n    f(x: array, *args) -> array\n\nwhere each element of ``x`` is a finite real and ``args`` is a tuple,\nwhich may contain an arbitrary number of arrays that are broadcastable\nwith ``x``.\n\n`f` must be an elementwise function: each element ``f(x)[i]``\nmust equal ``f(x[i])`` for all indices ``i``. It must not mutate the\narray ``x`` or the arrays in ``args``.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g98w8k5v",
                    "encoding": "",
                    "name": "xm0",
                    "value": "",
                    "defaultValue": "",
                    "description": "Starting guess for middle point of bracket.",
                    "type": "float arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0qzfa73c",
                    "encoding": "",
                    "name": "xl0",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d5ab4hqi",
                    "encoding": "",
                    "name": "xr0",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3sx_caq8",
                    "encoding": "",
                    "name": "xmin",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hb3l9tgl",
                    "encoding": "",
                    "name": "xmax",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9zdd1_so",
                    "encoding": "",
                    "name": "factor",
                    "value": "",
                    "defaultValue": "",
                    "description": "The factor used to grow the bracket. See Notes.",
                    "type": "float arraylike, default: 2",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sl0i6cdj",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Additional positional array arguments to be passed to `f`.\nIf the callable for which the root is desired requires arguments that are\nnot broadcastable with `x`, wrap that callable with `f` such that `f`\naccepts only `x` and broadcastable ``*args``.",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aal0hmng",
                    "encoding": "",
                    "name": "maxiter",
                    "value": 1000,
                    "defaultValue": 1000,
                    "description": "The maximum number of iterations of the algorithm to perform.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o_zevtx5",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.elementwise.bracket_minimum",
                    "defaultValue": "scipy.optimize.elementwise.bracket_minimum",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "83xax7d3",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4h52l7z7",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "b909d3pf",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yh82sz48",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize.elementwise",
                    "defaultValue": "scipy.optimize.elementwise",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4s4hm_j9",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j2k6arbe",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "hx7kdse3",
            "name": "elementwise.bracket_root",
            "description": "Bracket the root of a monotonic, real-valued function of a real variable.\n    \n    For each element of the output of `f`, `bracket_root` seeks the scalar\n    bracket endpoints ``xl`` and ``xr`` such that ``sign(f(xl)) == -sign(f(xr))``\n    elementwise.\n    \n    The function is guaranteed to find a valid bracket if the function is monotonic,\n    but it may find a bracket under other conditions.\n    \n    This function works elementwise when `xl0`, `xr0`, `xmin`, `xmax`, `factor`, and\n    the elements of `args` are (mutually broadcastable) arrays.\n    \n    Parameters\n    ----------\n    f : callable\n        The function for which the root is to be bracketed. The signature must be::\n    \n            f(x: array, *args) -> array\n    \n        where each element of ``x`` is a finite real and ``args`` is a tuple,\n        which may contain an arbitrary number of arrays that are broadcastable\n        with ``x``.\n    \n        `f` must be an elementwise function: each element ``f(x)[i]``\n        must equal ``f(x[i])`` for all indices ``i``. It must not mutate the\n        array ``x`` or the arrays in ``args``.\n    xl0, xr0: float array_like\n        Starting guess of bracket, which need not contain a root. If `xr0` is\n        not provided, ``xr0 = xl0 + 1``. Must be broadcastable with all other\n        array inputs.\n    xmin, xmax : float array_like, optional\n        Minimum and maximum allowable endpoints of the bracket, inclusive. Must\n        be broadcastable with all other array inputs.\n    factor : float array_like, default: 2\n        The factor used to grow the bracket. See Notes.\n    args : tuple of array_like, optional\n        Additional positional array arguments to be passed to `f`.\n        If the callable for which the root is desired requires arguments that are\n        not broadcastable with `x`, wrap that callable with `f` such that `f`\n        accepts only `x` and broadcastable ``*args``.\n    maxiter : int, default: 1000\n        The maximum number of iterations of the algorithm to perform.\n    \n    Returns\n    -------\n    res : _RichResult\n        An object similar to an instance of `scipy.optimize.OptimizeResult` with the\n        following attributes. The descriptions are written as though the values will\n        be scalars; however, if `f` returns an array, the outputs will be\n        arrays of the same shape.\n    \n        success : bool array\n            ``True`` where the algorithm terminated successfully (status ``0``);\n            ``False`` otherwise.\n        status : int array\n            An integer representing the exit status of the algorithm.\n    \n            - ``0`` : The algorithm produced a valid bracket.\n            - ``-1`` : The bracket expanded to the allowable limits without success.\n            - ``-2`` : The maximum number of iterations was reached.\n            - ``-3`` : A non-finite value was encountered.\n            - ``-4`` : Iteration was terminated by `callback`.\n            - ``-5``: The initial bracket does not satisfy`xmin <= xl0 < xr0 < xmax`.\n            \n        bracket : 2-tuple of float arrays\n            The lower and upper endpoints of the bracket, if the algorithm\n            terminated successfully.\n        f_bracket : 2-tuple of float arrays\n            The values of `f` evaluated at the endpoints of ``res.bracket``,\n            respectively.\n        nfev : int array\n            The number of abscissae at which `f` was evaluated to find the root.\n            This is distinct from the number of times `f` is *called* because the\n            the function may evaluated at multiple points in a single call.\n        nit : int array\n            The number of iterations of the algorithm that were performed.\n    \n    Notes\n    -----\n    This function generalizes an algorithm found in pieces throughout the\n    `scipy.stats` codebase. The strategy is to iteratively grow the bracket `(l, r)`\n    until ``f(l) < 0 < f(r)`` or ``f(r) < 0 < f(l)``. The bracket grows to the left\n    as follows.\n    \n    - If `xmin` is not provided, the distance between `xl0` and `l` is iteratively\n      increased by `factor`.\n    - If `xmin` is provided, the distance between `xmin` and `l` is iteratively\n      decreased by `factor`. Note that this also *increases* the bracket size.\n    \n    Growth of the bracket to the right is analogous.\n    \n    Growth of the bracket in one direction stops when the endpoint is no longer\n    finite, the function value at the endpoint is no longer finite, or the\n    endpoint reaches its limiting value (`xmin` or `xmax`). Iteration terminates\n    when the bracket stops growing in both directions, the bracket surrounds\n    the root, or a root is found (by chance).\n    \n    If two brackets are found - that is, a bracket is found on both sides in\n    the same iteration, the smaller of the two is returned.\n    \n    If roots of the function are found, both `xl` and `xr` are set to the\n    leftmost root.\n    \n    See Also\n    --------\n    find_root\n    \n    Examples\n    --------\n    Suppose we wish to find the root of the following function.\n    \n    >>> def f(x, c=5):\n    ...     return x**3 - 2*x - c\n    \n    First, we must find a valid bracket. The function is not monotonic,\n    but `bracket_root` may be able to provide a bracket.\n    \n    >>> from scipy.optimize import elementwise\n    >>> res_bracket = elementwise.bracket_root(f, 0)\n    >>> res_bracket.success\n    True\n    >>> res_bracket.bracket\n    (2.0, 4.0)\n    \n    Indeed, the values of the function at the bracket endpoints have\n    opposite signs.\n    \n    >>> res_bracket.f_bracket\n    (-1.0, 51.0)\n    \n    Once we have a valid bracket, `find_root` can be used to provide\n    a precise root.\n    \n    >>> res_root = elementwise.find_root(f, res_bracket.bracket)\n    >>> res_root.x\n    2.0945514815423265\n    \n    `bracket_root` and `find_root` accept arrays for most arguments.\n    For instance, to find the root for a few values of the parameter ``c``\n    at once:\n    \n    >>> import numpy as np\n    >>> c = np.asarray([3, 4, 5])\n    >>> res_bracket = elementwise.bracket_root(f, 0, args=(c,))\n    >>> res_bracket.bracket\n    (array([1., 1., 2.]), array([2., 2., 4.]))\n    >>> res_root = elementwise.find_root(f, res_bracket.bracket, args=(c,))\n    >>> res_root.x\n    array([1.8932892 , 2.        , 2.09455148])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "fbcf26ae2bf966d61eeed72e58ebb7fefb61ae423a892c7015f5219f8286eb40",
            "fields": [
                {
                    "id": "cr8b9j2j",
                    "encoding": "",
                    "name": "f",
                    "value": "",
                    "defaultValue": "",
                    "description": "The function for which the root is to be bracketed. The signature must be::\n\n    f(x: array, *args) -> array\n\nwhere each element of ``x`` is a finite real and ``args`` is a tuple,\nwhich may contain an arbitrary number of arrays that are broadcastable\nwith ``x``.\n\n`f` must be an elementwise function: each element ``f(x)[i]``\nmust equal ``f(x[i])`` for all indices ``i``. It must not mutate the\narray ``x`` or the arrays in ``args``.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sqqzi3an",
                    "encoding": "",
                    "name": "xl0",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vv8769ox",
                    "encoding": "",
                    "name": "xr0",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "__ywqexb",
                    "encoding": "",
                    "name": "xmin",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4hjo4bst",
                    "encoding": "",
                    "name": "xmax",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_k76vgzk",
                    "encoding": "",
                    "name": "factor",
                    "value": "",
                    "defaultValue": "",
                    "description": "The factor used to grow the bracket. See Notes.",
                    "type": "float arraylike, default: 2",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vj8ez4g7",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Additional positional array arguments to be passed to `f`.\nIf the callable for which the root is desired requires arguments that are\nnot broadcastable with `x`, wrap that callable with `f` such that `f`\naccepts only `x` and broadcastable ``*args``.",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1_1fq2n6",
                    "encoding": "",
                    "name": "maxiter",
                    "value": 1000,
                    "defaultValue": 1000,
                    "description": "The maximum number of iterations of the algorithm to perform.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5tfznq5k",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.elementwise.bracket_root",
                    "defaultValue": "scipy.optimize.elementwise.bracket_root",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g41_d0xw",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gih939ql",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ce0o727l",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zzvrmhyx",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize.elementwise",
                    "defaultValue": "scipy.optimize.elementwise",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7o3wgqoo",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9j4bp9va",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ofihuakr",
            "name": "elementwise.find_minimum",
            "description": "Find the minimum of an unimodal, real-valued function of a real variable.\n    \n    For each element of the output of `f`, `find_minimum` seeks the scalar minimizer\n    that minimizes the element. This function currently uses Chandrupatla's\n    bracketing minimization algorithm [1]_ and therefore requires argument `init`\n    to provide a three-point minimization bracket: ``x1 < x2 < x3`` such that\n    ``func(x1) >= func(x2) <= func(x3)``, where one of the inequalities is strict.\n    \n    Provided a valid bracket, `find_minimum` is guaranteed to converge to a local\n    minimum that satisfies the provided `tolerances` if the function is continuous\n    within the bracket.\n    \n    This function works elementwise when `init` and `args` contain (broadcastable)\n    arrays.\n    \n    Parameters\n    ----------\n    f : callable\n        The function whose minimizer is desired. The signature must be::\n    \n            f(x: array, *args) -> array\n    \n        where each element of ``x`` is a finite real and ``args`` is a tuple,\n        which may contain an arbitrary number of arrays that are broadcastable\n        with ``x``.\n    \n        `f` must be an elementwise function: each element ``f(x)[i]``\n        must equal ``f(x[i])`` for all indices ``i``. It must not mutate the\n        array ``x`` or the arrays in ``args``.\n    \n        `find_minimum` seeks an array ``x`` such that ``f(x)`` is an array of\n        local minima.\n    init : 3-tuple of float array_like\n        The abscissae of a standard scalar minimization bracket. A bracket is\n        valid if arrays ``x1, x2, x3 = init`` satisfy ``x1 < x2 < x3`` and\n        ``func(x1) >= func(x2) <= func(x3)``, where one of the inequalities\n        is strict. Arrays must be broadcastable with one another and the arrays\n        of `args`.\n    args : tuple of array_like, optional\n        Additional positional array arguments to be passed to `f`. Arrays\n        must be broadcastable with one another and the arrays of `init`.\n        If the callable for which the root is desired requires arguments that are\n        not broadcastable with `x`, wrap that callable with `f` such that `f`\n        accepts only `x` and broadcastable ``*args``.\n    tolerances : dictionary of floats, optional\n        Absolute and relative tolerances on the root and function value.\n        Valid keys of the dictionary are:\n    \n        - ``xatol`` - absolute tolerance on the root\n        - ``xrtol`` - relative tolerance on the root\n        - ``fatol`` - absolute tolerance on the function value\n        - ``frtol`` - relative tolerance on the function value\n    \n        See Notes for default values and explicit termination conditions.\n    maxiter : int, default: 100\n        The maximum number of iterations of the algorithm to perform.\n    callback : callable, optional\n        An optional user-supplied function to be called before the first\n        iteration and after each iteration.\n        Called as ``callback(res)``, where ``res`` is a ``_RichResult``\n        similar to that returned by `find_minimum` (but containing the current\n        iterate's values of all variables). If `callback` raises a\n        ``StopIteration``, the algorithm will terminate immediately and\n        `find_root` will return a result. `callback` must not mutate\n        `res` or its attributes.\n    \n    Returns\n    -------\n    res : _RichResult\n        An object similar to an instance of `scipy.optimize.OptimizeResult` with the\n        following attributes. The descriptions are written as though the values will\n        be scalars; however, if `f` returns an array, the outputs will be\n        arrays of the same shape.\n    \n        success : bool array\n            ``True`` where the algorithm terminated successfully (status ``0``);\n            ``False`` otherwise.\n        status : int array\n            An integer representing the exit status of the algorithm.\n    \n            - ``0`` : The algorithm converged to the specified tolerances.\n            - ``-1`` : The algorithm encountered an invalid bracket.\n            - ``-2`` : The maximum number of iterations was reached.\n            - ``-3`` : A non-finite value was encountered.\n            - ``-4`` : Iteration was terminated by `callback`.\n            - ``1`` : The algorithm is proceeding normally (in `callback` only).\n    \n        x : float array\n            The minimizer of the function, if the algorithm terminated successfully.\n        f_x : float array\n            The value of `f` evaluated at `x`.\n        nfev : int array\n            The number of abscissae at which `f` was evaluated to find the root.\n            This is distinct from the number of times `f` is *called* because the\n            the function may evaluated at multiple points in a single call.\n        nit : int array\n            The number of iterations of the algorithm that were performed.\n        bracket : tuple of float arrays\n            The final three-point bracket.\n        f_bracket : tuple of float arrays\n            The value of `f` evaluated at the bracket points.\n    \n    Notes\n    -----\n    Implemented based on Chandrupatla's original paper [1]_.\n    \n    If ``xl < xm < xr`` are the points of the bracket and ``fl >= fm <= fr``\n    (where one of the inequalities is strict) are the values of `f` evaluated\n    at those points, then the algorithm is considered to have converged when:\n    \n    - ``abs(xr - xm)/2 <= abs(xm)*xrtol + xatol`` or\n    - ``(fl - 2*fm + fr)/2 <= abs(fm)*frtol + fatol``.\n    \n    The default value of `xrtol` is the square root of the precision of the\n    appropriate dtype, and ``xatol = fatol = frtol`` is the smallest normal\n    number of the appropriate dtype.\n    \n    References\n    ----------\n    \n    .. [1] Chandrupatla, Tirupathi R. (1998).\n        \"An efficient quadratic fit-sectioning algorithm for minimization\n        without derivatives\".\n        Computer Methods in Applied Mechanics and Engineering, 152 (1-2),\n        211-217. https://doi.org/10.1016/S0045-7825(97)00190-4\n    \n    See Also\n    --------\n    bracket_minimum\n    \n    Examples\n    --------\n    Suppose we wish to minimize the following function.\n    \n    >>> def f(x, c=1):\n    ...     return (x - c)**2 + 2\n    \n    First, we must find a valid bracket. The function is unimodal,\n    so `bracket_minium` will easily find a bracket.\n    \n    >>> from scipy.optimize import elementwise\n    >>> res_bracket = elementwise.bracket_minimum(f, 0)\n    >>> res_bracket.success\n    True\n    >>> res_bracket.bracket\n    (0.0, 0.5, 1.5)\n    \n    Indeed, the bracket points are ordered and the function value\n    at the middle bracket point is less than at the surrounding\n    points.\n    \n    >>> xl, xm, xr = res_bracket.bracket\n    >>> fl, fm, fr = res_bracket.f_bracket\n    >>> (xl < xm < xr) and (fl > fm <= fr)\n    True\n    \n    Once we have a valid bracket, `find_minimum` can be used to provide\n    an estimate of the minimizer.\n    \n    >>> res_minimum = elementwise.find_minimum(f, res_bracket.bracket)\n    >>> res_minimum.x\n    1.0000000149011612\n    \n    The function value changes by only a few ULPs within the bracket, so\n    the minimizer cannot be determined much more precisely by evaluating\n    the function alone (i.e. we would need its derivative to do better).\n    \n    >>> import numpy as np\n    >>> fl, fm, fr = res_minimum.f_bracket\n    >>> (fl - fm) / np.spacing(fm), (fr - fm) / np.spacing(fm)\n    (0.0, 2.0)\n    \n    Therefore, a precise minimum of the function is given by:\n    \n    >>> res_minimum.f_x\n    2.0\n    \n    `bracket_minimum` and `find_minimum` accept arrays for most arguments.\n    For instance, to find the minimizers and minima for a few values of the\n    parameter ``c`` at once:\n    \n    >>> c = np.asarray([1, 1.5, 2])\n    >>> res_bracket = elementwise.bracket_minimum(f, 0, args=(c,))\n    >>> res_bracket.bracket\n    (array([0. , 0.5, 0.5]), array([0.5, 1.5, 1.5]), array([1.5, 2.5, 2.5]))\n    >>> res_minimum = elementwise.find_minimum(f, res_bracket.bracket, args=(c,))\n    >>> res_minimum.x\n    array([1.00000001, 1.5       , 2.        ])\n    >>> res_minimum.f_x\n    array([2., 2., 2.])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e4123dca31e80478f6d12de46f30e2763c4851373a981c06512e025f3f42f9b2",
            "fields": [
                {
                    "id": "qhgvxfwg",
                    "encoding": "",
                    "name": "f",
                    "value": "",
                    "defaultValue": "",
                    "description": "The function whose minimizer is desired. The signature must be::\n\n    f(x: array, *args) -> array\n\nwhere each element of ``x`` is a finite real and ``args`` is a tuple,\nwhich may contain an arbitrary number of arrays that are broadcastable\nwith ``x``.\n\n`f` must be an elementwise function: each element ``f(x)[i]``\nmust equal ``f(x[i])`` for all indices ``i``. It must not mutate the\narray ``x`` or the arrays in ``args``.\n\n`find_minimum` seeks an array ``x`` such that ``f(x)`` is an array of\nlocal minima.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "id": "cxkjpb49",
                    "encoding": "",
                    "name": "init",
                    "value": "",
                    "defaultValue": "",
                    "description": "The abscissae of a standard scalar minimization bracket. A bracket is\nvalid if arrays ``x1, x2, x3 = init`` satisfy ``x1 < x2 < x3`` and\n``func(x1) >= func(x2) <= func(x3)``, where one of the inequalities\nis strict. Arrays must be broadcastable with one another and the arrays\nof `args`.",
                    "type": "3-tuple of float arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "id": "_441onee",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Additional positional array arguments to be passed to `f`. Arrays\nmust be broadcastable with one another and the arrays of `init`.\nIf the callable for which the root is desired requires arguments that are\nnot broadcastable with `x`, wrap that callable with `f` such that `f`\naccepts only `x` and broadcastable ``*args``.",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "heuzdds2",
                    "encoding": "",
                    "name": "tolerances",
                    "value": "",
                    "defaultValue": "",
                    "description": "Absolute and relative tolerances on the root and function value.\nValid keys of the dictionary are:\n\n- ``xatol`` - absolute tolerance on the root\n- ``xrtol`` - relative tolerance on the root\n- ``fatol`` - absolute tolerance on the function value\n- ``frtol`` - relative tolerance on the function value\n\nSee Notes for default values and explicit termination conditions.",
                    "type": "dictionary of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t7ps6y6h",
                    "encoding": "",
                    "name": "maxiter",
                    "value": 100,
                    "defaultValue": 100,
                    "description": "The maximum number of iterations of the algorithm to perform.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hvpruz3u",
                    "encoding": "",
                    "name": "callback",
                    "value": "",
                    "defaultValue": "",
                    "description": "An optional user-supplied function to be called before the first\niteration and after each iteration.\nCalled as ``callback(res)``, where ``res`` is a ``_RichResult``\nsimilar to that returned by `find_minimum` (but containing the current\niterate's values of all variables). If `callback` raises a\n``StopIteration``, the algorithm will terminate immediately and\n`find_root` will return a result. `callback` must not mutate\n`res` or its attributes.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qclcjz7y",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.elementwise.find_minimum",
                    "defaultValue": "scipy.optimize.elementwise.find_minimum",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s8qsyjh5",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mhz0sei8",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "rt9ay30l",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ejdmd919",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize.elementwise",
                    "defaultValue": "scipy.optimize.elementwise",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3h3i5zql",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7h8rusti",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "55ukdw_x",
            "name": "elementwise.find_root",
            "description": "Find the root of a monotonic, real-valued function of a real variable.\n    \n    For each element of the output of `f`, `find_root` seeks the scalar\n    root that makes the element 0. This function currently uses Chandrupatla's\n    bracketing algorithm [1]_ and therefore requires argument `init` to\n    provide a bracket around the root: the function values at the two endpoints\n    must have opposite signs.\n    \n    Provided a valid bracket, `find_root` is guaranteed to converge to a solution\n    that satisfies the provided `tolerances` if the function is continuous within\n    the bracket.\n    \n    This function works elementwise when `init` and `args` contain (broadcastable)\n    arrays.\n    \n    Parameters\n    ----------\n    f : callable\n        The function whose root is desired. The signature must be::\n    \n            f(x: array, *args) -> array\n    \n        where each element of ``x`` is a finite real and ``args`` is a tuple,\n        which may contain an arbitrary number of arrays that are broadcastable\n        with ``x``.\n    \n        `f` must be an elementwise function: each element ``f(x)[i]``\n        must equal ``f(x[i])`` for all indices ``i``. It must not mutate the\n        array ``x`` or the arrays in ``args``.\n    \n        `find_root` seeks an array ``x`` such that ``f(x)`` is an array of zeros.\n    init : 2-tuple of float array_like\n        The lower and upper endpoints of a bracket surrounding the desired root.\n        A bracket is valid if arrays ``xl, xr = init`` satisfy ``xl < xr`` and\n        ``sign(f(xl)) == -sign(f(xr))`` elementwise. Arrays be broadcastable with\n        one another and `args`.\n    args : tuple of array_like, optional\n        Additional positional array arguments to be passed to `f`. Arrays\n        must be broadcastable with one another and the arrays of `init`.\n        If the callable for which the root is desired requires arguments that are\n        not broadcastable with `x`, wrap that callable with `f` such that `f`\n        accepts only `x` and broadcastable ``*args``.\n    tolerances : dictionary of floats, optional\n        Absolute and relative tolerances on the root and function value.\n        Valid keys of the dictionary are:\n    \n        - ``xatol`` - absolute tolerance on the root\n        - ``xrtol`` - relative tolerance on the root\n        - ``fatol`` - absolute tolerance on the function value\n        - ``frtol`` - relative tolerance on the function value\n    \n        See Notes for default values and explicit termination conditions.\n    maxiter : int, optional\n        The maximum number of iterations of the algorithm to perform.\n        The default is the maximum possible number of bisections within\n        the (normal) floating point numbers of the relevant dtype.\n    callback : callable, optional\n        An optional user-supplied function to be called before the first\n        iteration and after each iteration.\n        Called as ``callback(res)``, where ``res`` is a ``_RichResult``\n        similar to that returned by `find_root` (but containing the current\n        iterate's values of all variables). If `callback` raises a\n        ``StopIteration``, the algorithm will terminate immediately and\n        `find_root` will return a result. `callback` must not mutate\n        `res` or its attributes.\n    \n    Returns\n    -------\n    res : _RichResult\n        An object similar to an instance of `scipy.optimize.OptimizeResult` with the\n        following attributes. The descriptions are written as though the values will\n        be scalars; however, if `f` returns an array, the outputs will be\n        arrays of the same shape.\n    \n        success : bool array\n            ``True`` where the algorithm terminated successfully (status ``0``);\n            ``False`` otherwise.\n        status : int array\n            An integer representing the exit status of the algorithm.\n    \n            - ``0`` : The algorithm converged to the specified tolerances.\n            - ``-1`` : The initial bracket was invalid.\n            - ``-2`` : The maximum number of iterations was reached.\n            - ``-3`` : A non-finite value was encountered.\n            - ``-4`` : Iteration was terminated by `callback`.\n            - ``1`` : The algorithm is proceeding normally (in `callback` only).\n    \n        x : float array\n            The root of the function, if the algorithm terminated successfully.\n        f_x : float array\n            The value of `f` evaluated at `x`.\n        nfev : int array\n            The number of abscissae at which `f` was evaluated to find the root.\n            This is distinct from the number of times `f` is *called* because the\n            the function may evaluated at multiple points in a single call.\n        nit : int array\n            The number of iterations of the algorithm that were performed.\n        bracket : tuple of float arrays\n            The lower and upper endpoints of the final bracket.\n        f_bracket : tuple of float arrays\n            The value of `f` evaluated at the lower and upper endpoints of the\n            bracket.\n    \n    Notes\n    -----\n    Implemented based on Chandrupatla's original paper [1]_.\n    \n    Let:\n    \n    -  ``a, b = init`` be the left and right endpoints of the initial bracket,\n    - ``xl`` and ``xr`` be the left and right endpoints of the final bracket,\n    - ``xmin = xl if abs(f(xl)) <= abs(f(xr)) else xr`` be the final bracket\n      endpoint with the smaller function value, and\n    - ``fmin0 = min(f(a), f(b))`` be the minimum of the two values of the\n      function evaluated at the initial bracket endpoints.\n    \n    Then the algorithm is considered to have converged when\n    \n    - ``abs(xr - xl) < xatol + abs(xmin) * xrtol`` or\n    - ``fun(xmin) <= fatol + abs(fmin0) * frtol``.\n    \n    This is equivalent to the termination condition described in [1]_ with\n    ``xrtol = 4e-10``, ``xatol = 1e-5``, and ``fatol = frtol = 0``.\n    However, the default values of the `tolerances` dictionary are\n    ``xatol = 4*tiny``, ``xrtol = 4*eps``, ``frtol = 0``, and ``fatol = tiny``,\n    where ``eps`` and ``tiny`` are the precision and smallest normal number\n    of the result ``dtype`` of function inputs and outputs.\n    \n    References\n    ----------\n    \n    .. [1] Chandrupatla, Tirupathi R.\n        \"A new hybrid quadratic/bisection algorithm for finding the zero of a\n        nonlinear function without using derivatives\".\n        Advances in Engineering Software, 28(3), 145-149.\n        https://doi.org/10.1016/s0965-9978(96)00051-8\n    \n    See Also\n    --------\n    bracket_root\n    \n    Examples\n    --------\n    Suppose we wish to find the root of the following function.\n    \n    >>> def f(x, c=5):\n    ...     return x**3 - 2*x - c\n    \n    First, we must find a valid bracket. The function is not monotonic,\n    but `bracket_root` may be able to provide a bracket.\n    \n    >>> from scipy.optimize import elementwise\n    >>> res_bracket = elementwise.bracket_root(f, 0)\n    >>> res_bracket.success\n    True\n    >>> res_bracket.bracket\n    (2.0, 4.0)\n    \n    Indeed, the values of the function at the bracket endpoints have\n    opposite signs.\n    \n    >>> res_bracket.f_bracket\n    (-1.0, 51.0)\n    \n    Once we have a valid bracket, `find_root` can be used to provide\n    a precise root.\n    \n    >>> res_root = elementwise.find_root(f, res_bracket.bracket)\n    >>> res_root.x\n    2.0945514815423265\n    \n    The final bracket is only a few ULPs wide, so the error between\n    this value and the true root cannot be much smaller within values\n    that are representable in double precision arithmetic.\n    \n    >>> import numpy as np\n    >>> xl, xr = res_root.bracket\n    >>> (xr - xl) / np.spacing(xl)\n    2.0\n    >>> res_root.f_bracket\n    (-8.881784197001252e-16, 9.769962616701378e-15)\n    \n    `bracket_root` and `find_root` accept arrays for most arguments.\n    For instance, to find the root for a few values of the parameter ``c``\n    at once:\n    \n    >>> c = np.asarray([3, 4, 5])\n    >>> res_bracket = elementwise.bracket_root(f, 0, args=(c,))\n    >>> res_bracket.bracket\n    (array([1., 1., 2.]), array([2., 2., 4.]))\n    >>> res_root = elementwise.find_root(f, res_bracket.bracket, args=(c,))\n    >>> res_root.x\n    array([1.8932892 , 2.        , 2.09455148])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f4371439986e8a1e5f8d33d154f7dde3ab1dd458ef380d0331fa0c52c650a329",
            "fields": [
                {
                    "id": "s0mbsmk9",
                    "encoding": "",
                    "name": "f",
                    "value": "",
                    "defaultValue": "",
                    "description": "The function whose root is desired. The signature must be::\n\n    f(x: array, *args) -> array\n\nwhere each element of ``x`` is a finite real and ``args`` is a tuple,\nwhich may contain an arbitrary number of arrays that are broadcastable\nwith ``x``.\n\n`f` must be an elementwise function: each element ``f(x)[i]``\nmust equal ``f(x[i])`` for all indices ``i``. It must not mutate the\narray ``x`` or the arrays in ``args``.\n\n`find_root` seeks an array ``x`` such that ``f(x)`` is an array of zeros.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "id": "yw8n78sj",
                    "encoding": "",
                    "name": "init",
                    "value": "",
                    "defaultValue": "",
                    "description": "The lower and upper endpoints of a bracket surrounding the desired root.\nA bracket is valid if arrays ``xl, xr = init`` satisfy ``xl < xr`` and\n``sign(f(xl)) == -sign(f(xr))`` elementwise. Arrays be broadcastable with\none another and `args`.",
                    "type": "2-tuple of float arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "id": "fkuvqkjw",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Additional positional array arguments to be passed to `f`. Arrays\nmust be broadcastable with one another and the arrays of `init`.\nIf the callable for which the root is desired requires arguments that are\nnot broadcastable with `x`, wrap that callable with `f` such that `f`\naccepts only `x` and broadcastable ``*args``.",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nz_akg19",
                    "encoding": "",
                    "name": "tolerances",
                    "value": "",
                    "defaultValue": "",
                    "description": "Absolute and relative tolerances on the root and function value.\nValid keys of the dictionary are:\n\n- ``xatol`` - absolute tolerance on the root\n- ``xrtol`` - relative tolerance on the root\n- ``fatol`` - absolute tolerance on the function value\n- ``frtol`` - relative tolerance on the function value\n\nSee Notes for default values and explicit termination conditions.",
                    "type": "dictionary of floats",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t_gd8u1y",
                    "encoding": "",
                    "name": "maxiter",
                    "value": "",
                    "defaultValue": "",
                    "description": "The maximum number of iterations of the algorithm to perform.\nThe default is the maximum possible number of bisections within\nthe (normal) floating point numbers of the relevant dtype.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7a64tjbp",
                    "encoding": "",
                    "name": "callback",
                    "value": "",
                    "defaultValue": "",
                    "description": "An optional user-supplied function to be called before the first\niteration and after each iteration.\nCalled as ``callback(res)``, where ``res`` is a ``_RichResult``\nsimilar to that returned by `find_root` (but containing the current\niterate's values of all variables). If `callback` raises a\n``StopIteration``, the algorithm will terminate immediately and\n`find_root` will return a result. `callback` must not mutate\n`res` or its attributes.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ghp5ncmo",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.optimize.elementwise.find_root",
                    "defaultValue": "scipy.optimize.elementwise.find_root",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y9zdfwnt",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nvlprpxu",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "9fnyxis3",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n8js6c4i",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.optimize.elementwise",
                    "defaultValue": "scipy.optimize.elementwise",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2w4buuho",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cpov3fjm",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        }
    ],
    "linkDataArray": []
}