{
    "modelData": {
        "filePath": "scipy_optimize.palette",
        "fileType": "palette",
        "shortDescription": "",
        "detailedDescription": "=====================================================\nOptimization and root finding (:mod:`scipy.optimize`)\n=====================================================\n\n.. currentmodule:: scipy.optimize\n\nSciPy ``optimize`` provides functions for minimizing (or maximizing)\nobjective functions, possibly subject to constraints. It includes\nsolvers for nonlinear problems (with support for both local and global\noptimization algorithms), linear programing, constrained\nand nonlinear least-squares, root finding, and curve fitting.\n\nCommon functions and objects, shared across different solvers, are:\n\n.. autosummary::\n   :toctree: generated/\n\n   show_options - Show specific options optimization solvers.\n   OptimizeResult - The optimization result returned by some optimizers.\n   OptimizeWarning - The optimization encountered problems.\n\n\nOptimization\n============\n\nScalar functions optimization\n-----------------------------\n\n.. autosummary::\n   :toctree: generated/\n\n   minimize_scalar - Interface for minimizers of univariate functions\n\nThe `minimize_scalar` function supports the following methods:\n\n.. toctree::\n\n   optimize.minimize_scalar-brent\n   optimize.minimize_scalar-bounded\n   optimize.minimize_scalar-golden\n\nLocal (multivariate) optimization\n---------------------------------\n\n.. autosummary::\n   :toctree: generated/\n\n   minimize - Interface for minimizers of multivariate functions.\n\nThe `minimize` function supports the following methods:\n\n.. toctree::\n\n   optimize.minimize-neldermead\n   optimize.minimize-powell\n   optimize.minimize-cg\n   optimize.minimize-bfgs\n   optimize.minimize-newtoncg\n   optimize.minimize-lbfgsb\n   optimize.minimize-tnc\n   optimize.minimize-cobyla\n   optimize.minimize-slsqp\n   optimize.minimize-trustconstr\n   optimize.minimize-dogleg\n   optimize.minimize-trustncg\n   optimize.minimize-trustkrylov\n   optimize.minimize-trustexact\n\nConstraints are passed to `minimize` function as a single object or\nas a list of objects from the following classes:\n\n.. autosummary::\n   :toctree: generated/\n\n   NonlinearConstraint - Class defining general nonlinear constraints.\n   LinearConstraint - Class defining general linear constraints.\n\nSimple bound constraints are handled separately and there is a special class\nfor them:\n\n.. autosummary::\n   :toctree: generated/\n\n   Bounds - Bound constraints.\n\nQuasi-Newton strategies implementing `HessianUpdateStrategy`\ninterface can be used to approximate the Hessian in `minimize`\nfunction (available only for the 'trust-constr' method). Available\nquasi-Newton methods implementing this interface are:\n\n.. autosummary::\n   :toctree: generated/\n\n   BFGS - Broyden-Fletcher-Goldfarb-Shanno (BFGS) Hessian update strategy.\n   SR1 - Symmetric-rank-1 Hessian update strategy.\n\nGlobal optimization\n-------------------\n\n.. autosummary::\n   :toctree: generated/\n\n   basinhopping - Basinhopping stochastic optimizer.\n   brute - Brute force searching optimizer.\n   differential_evolution - Stochastic optimizer using differential evolution.\n\n   shgo - Simplicial homology global optimizer.\n   dual_annealing - Dual annealing stochastic optimizer.\n   direct - DIRECT (Dividing Rectangles) optimizer.\n\nLeast-squares and curve fitting\n===============================\n\nNonlinear least-squares\n-----------------------\n\n.. autosummary::\n   :toctree: generated/\n\n   least_squares - Solve a nonlinear least-squares problem with bounds on the variables.\n\nLinear least-squares\n--------------------\n\n.. autosummary::\n   :toctree: generated/\n\n   nnls - Linear least-squares problem with non-negativity constraint.\n   lsq_linear - Linear least-squares problem with bound constraints.\n\nCurve fitting\n-------------\n\n.. autosummary::\n   :toctree: generated/\n\n   curve_fit -- Fit curve to a set of points.\n\nRoot finding\n============\n\nScalar functions\n----------------\n.. autosummary::\n   :toctree: generated/\n\n   root_scalar - Unified interface for nonlinear solvers of scalar functions.\n   brentq - quadratic interpolation Brent method.\n   brenth - Brent method, modified by Harris with hyperbolic extrapolation.\n   ridder - Ridder's method.\n   bisect - Bisection method.\n   newton - Newton's method (also Secant and Halley's methods).\n   toms748 - Alefeld, Potra & Shi Algorithm 748.\n   RootResults - The root finding result returned by some root finders.\n\nThe `root_scalar` function supports the following methods:\n\n.. toctree::\n\n   optimize.root_scalar-brentq\n   optimize.root_scalar-brenth\n   optimize.root_scalar-bisect\n   optimize.root_scalar-ridder\n   optimize.root_scalar-newton\n   optimize.root_scalar-toms748\n   optimize.root_scalar-secant\n   optimize.root_scalar-halley\n\n\n\nThe table below lists situations and appropriate methods, along with\n*asymptotic* convergence rates per iteration (and per function evaluation)\nfor successful convergence to a simple root(*).\nBisection is the slowest of them all, adding one bit of accuracy for each\nfunction evaluation, but is guaranteed to converge.\nThe other bracketing methods all (eventually) increase the number of accurate\nbits by about 50% for every function evaluation.\nThe derivative-based methods, all built on `newton`, can converge quite quickly\nif the initial value is close to the root.  They can also be applied to\nfunctions defined on (a subset of) the complex plane.\n\n+-------------+----------+----------+-----------+-------------+-------------+----------------+\n| Domain of f | Bracket? |    Derivatives?      | Solvers     |        Convergence           |\n+             +          +----------+-----------+             +-------------+----------------+\n|             |          | `fprime` | `fprime2` |             | Guaranteed? |  Rate(s)(*)    |\n+=============+==========+==========+===========+=============+=============+================+\n| `R`         | Yes      | N/A      | N/A       | - bisection | - Yes       | - 1 \"Linear\"   |\n|             |          |          |           | - brentq    | - Yes       | - >=1, <= 1.62 |\n|             |          |          |           | - brenth    | - Yes       | - >=1, <= 1.62 |\n|             |          |          |           | - ridder    | - Yes       | - 2.0 (1.41)   |\n|             |          |          |           | - toms748   | - Yes       | - 2.7 (1.65)   |\n+-------------+----------+----------+-----------+-------------+-------------+----------------+\n| `R` or `C`  | No       | No       | No        | secant      | No          | 1.62 (1.62)    |\n+-------------+----------+----------+-----------+-------------+-------------+----------------+\n| `R` or `C`  | No       | Yes      | No        | newton      | No          | 2.00 (1.41)    |\n+-------------+----------+----------+-----------+-------------+-------------+----------------+\n| `R` or `C`  | No       | Yes      | Yes       | halley      | No          | 3.00 (1.44)    |\n+-------------+----------+----------+-----------+-------------+-------------+----------------+\n\n.. seealso::\n\n   `scipy.optimize.cython_optimize` -- Typed Cython versions of zeros functions\n\nFixed point finding:\n\n.. autosummary::\n   :toctree: generated/\n\n   fixed_point - Single-variable fixed-point solver.\n\nMultidimensional\n----------------\n\n.. autosummary::\n   :toctree: generated/\n\n   root - Unified interface for nonlinear solvers of multivariate functions.\n\nThe `root` function supports the following methods:\n\n.. toctree::\n\n   optimize.root-hybr\n   optimize.root-lm\n   optimize.root-broyden1\n   optimize.root-broyden2\n   optimize.root-anderson\n   optimize.root-linearmixing\n   optimize.root-diagbroyden\n   optimize.root-excitingmixing\n   optimize.root-krylov\n   optimize.root-dfsane\n\nLinear programming / MILP\n=========================\n\n.. autosummary::\n   :toctree: generated/\n\n   milp -- Mixed integer linear programming.\n   linprog -- Unified interface for minimizers of linear programming problems.\n\nThe `linprog` function supports the following methods:\n\n.. toctree::\n\n   optimize.linprog-simplex\n   optimize.linprog-interior-point\n   optimize.linprog-revised_simplex\n   optimize.linprog-highs-ipm\n   optimize.linprog-highs-ds\n   optimize.linprog-highs\n\nThe simplex, interior-point, and revised simplex methods support callback\nfunctions, such as:\n\n.. autosummary::\n   :toctree: generated/\n\n   linprog_verbose_callback -- Sample callback function for linprog (simplex).\n\nAssignment problems\n===================\n\n.. autosummary::\n   :toctree: generated/\n\n   linear_sum_assignment -- Solves the linear-sum assignment problem.\n   quadratic_assignment -- Solves the quadratic assignment problem.\n\nThe `quadratic_assignment` function supports the following methods:\n\n.. toctree::\n\n   optimize.qap-faq\n   optimize.qap-2opt\n\nUtilities\n=========\n\nFinite-difference approximation\n-------------------------------\n\n.. autosummary::\n   :toctree: generated/\n\n   approx_fprime - Approximate the gradient of a scalar function.\n   check_grad - Check the supplied derivative using finite differences.\n\n\nLine search\n-----------\n\n.. autosummary::\n   :toctree: generated/\n\n   bracket - Bracket a minimum, given two starting points.\n   line_search - Return a step that satisfies the strong Wolfe conditions.\n\nHessian approximation\n---------------------\n\n.. autosummary::\n   :toctree: generated/\n\n   LbfgsInvHessProduct - Linear operator for L-BFGS approximate inverse Hessian.\n   HessianUpdateStrategy - Interface for implementing Hessian update strategies\n\nBenchmark problems\n------------------\n\n.. autosummary::\n   :toctree: generated/\n\n   rosen - The Rosenbrock function.\n   rosen_der - The derivative of the Rosenbrock function.\n   rosen_hess - The Hessian matrix of the Rosenbrock function.\n   rosen_hess_prod - Product of the Rosenbrock Hessian with a vector.\n\nLegacy functions\n================\n\nThe functions below are not recommended for use in new scripts;\nall of these methods are accessible via a newer, more consistent\ninterfaces, provided by the interfaces above.\n\nOptimization\n------------\n\nGeneral-purpose multivariate methods:\n\n.. autosummary::\n   :toctree: generated/\n\n   fmin - Nelder-Mead Simplex algorithm.\n   fmin_powell - Powell's (modified) level set method.\n   fmin_cg - Non-linear (Polak-Ribiere) conjugate gradient algorithm.\n   fmin_bfgs - Quasi-Newton method (Broydon-Fletcher-Goldfarb-Shanno).\n   fmin_ncg - Line-search Newton Conjugate Gradient.\n\nConstrained multivariate methods:\n\n.. autosummary::\n   :toctree: generated/\n\n   fmin_l_bfgs_b - Zhu, Byrd, and Nocedal's constrained optimizer.\n   fmin_tnc - Truncated Newton code.\n   fmin_cobyla - Constrained optimization by linear approximation.\n   fmin_slsqp - Minimization using sequential least-squares programming.\n\nUnivariate (scalar) minimization methods:\n\n.. autosummary::\n   :toctree: generated/\n\n   fminbound - Bounded minimization of a scalar function.\n   brent - 1-D function minimization using Brent method.\n   golden - 1-D function minimization using Golden Section method.\n\nLeast-squares\n-------------\n\n.. autosummary::\n   :toctree: generated/\n\n   leastsq - Minimize the sum of squares of M equations in N unknowns.\n\nRoot finding\n------------\n\nGeneral nonlinear solvers:\n\n.. autosummary::\n   :toctree: generated/\n\n   fsolve - Non-linear multivariable equation solver.\n   broyden1 - Broyden's first method.\n   broyden2 - Broyden's second method.\n\nLarge-scale nonlinear solvers:\n\n.. autosummary::\n   :toctree: generated/\n\n   newton_krylov\n   anderson\n\nSimple iteration solvers:\n\n.. autosummary::\n   :toctree: generated/\n\n   excitingmixing\n   linearmixing\n   diagbroyden",
        "repoService": "GitHub",
        "repoBranch": "master",
        "repo": "ICRAR/EAGLE_test_repo",
        "eagleVersion": "",
        "eagleCommitHash": "",
        "schemaVersion": "AppRef",
        "readonly": true,
        "repositoryUrl": "scipy",
        "commitHash": "0.1",
        "downloadUrl": "",
        "signature": "a0e38e5e4861b0bdcf264a0f2311febcc40413a3dfac009f0faf7c6030ad6a6f",
        "lastModifiedName": "wici",
        "lastModifiedEmail": "",
        "lastModifiedDatetime": 1695173660.394029,
        "numLGNodes": 103
    },
    "nodeDataArray": [
        {
            "category": "PythonApp",
            "key": -1,
            "name": "BFGS.__init__",
            "description": "No description found\nBroyden-Fletcher-Goldfarb-Shanno (BFGS) Hessian update strategy.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "591ecfa6a3e7aea7870efcf9a1251884d6595206bab5b166252b0c2a08f121d0",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to object",
                    "type": "scipy.optimize._hessian_update_strategy.BFGS",
                    "parameterType": "ApplicationArgument",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "exception_strategy",
                    "value": "skip_update",
                    "defaultValue": "skip_update",
                    "description": "{'skip_update', 'damp_update'}, optional     Define how to proceed when the curvature condition is violated.     Set it to 'skip_update' to just skip the update. Or, alternatively,     set it to 'damp_update' to interpolate between the actual BFGS     result and the unmodified matrix. Both exceptions strategies     are explained  in [1]_, p.536-537. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "min_curvature",
                    "value": null,
                    "defaultValue": null,
                    "description": "float     This number, scaled by a normalization factor, defines the     minimum curvature ``dot(delta_grad, delta_x)`` allowed to go     unaffected by the exception strategy. By default is equal to     1e-8 when ``exception_strategy = 'skip_update'`` and equal     to 0.2 when ``exception_strategy = 'damp_update'``. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "init_scale",
                    "value": "auto",
                    "defaultValue": "auto",
                    "description": "{float, 'auto'}     Matrix scale at first iteration. At the first     iteration the Hessian matrix or its inverse will be initialized     with ``init_scale*np.eye(n)``, where ``n`` is the problem dimension.     Set it to 'auto' in order to use an automatic heuristic for choosing     the initial scale. The heuristic is described in [1]_, p.143.     By default uses 'auto'.  Notes ----- The update is based on the description in [1]_, p.140.  References ---------- .. [1] Nocedal, Jorge, and Stephen J. Wright. \"Numerical optimization\"        Second Edition (2006).",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._hessian_update_strategy.BFGS.__init__",
                    "defaultValue": "scipy.optimize._hessian_update_strategy.BFGS.__init__",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Bounds.__init__",
            "description": "No description found\nBounds constraint on the variables.\n    \n    The constraint has the general inequality form::\n    \n        lb <= x <= ub\n    \n    It is possible to use equal bounds to represent an equality constraint or\n    infinite bounds to represent a one-sided constraint.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6481960dd11566e1e7f6a042fbe70988155ddb20563cf00f34ed64479607df1b",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to object",
                    "type": "scipy.optimize._constraints.Bounds",
                    "parameterType": "ApplicationArgument",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "lb",
                    "value": "-inf",
                    "defaultValue": "-inf",
                    "description": "",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "ub",
                    "value": "inf",
                    "defaultValue": "inf",
                    "description": "array_like, optional     Lower and upper bounds on independent variables. `lb`, `ub`, and     `keep_feasible` must be the same shape or broadcastable.     Set components of `lb` and `ub` equal     to fix a variable. Use ``np.inf`` with an appropriate sign to disable     bounds on all or some variables. Note that you can mix constraints of     different ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "keep_feasible",
                    "value": false,
                    "defaultValue": false,
                    "description": "array_like of bool, optional     Whether to keep the constraint components feasible throughout     iterations. Must be broadcastable with `lb` and `ub`.     Default is False. Has no effect for equality constraints.",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._constraints.Bounds.__init__",
                    "defaultValue": "scipy.optimize._constraints.Bounds.__init__",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Bounds.residual",
            "description": "Calculate the residual (slack) between the input and the bounds\n    \n    For a bound constraint of the form::\n    \n        lb <= x <= ub\n    \n    the lower and upper residuals between `x` and the bounds are values\n    ``sl`` and ``sb`` such that::\n    \n        lb + sl == x == ub - sb\n    \n    When all elements of ``sl`` and ``sb`` are positive, all elements of\n    ``x`` lie within the bounds; a negative element in ``sl`` or ``sb``\n    indicates that the corresponding element of ``x`` is out of bounds.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5c0b5ee2349c99164e50c6972561fb7f13edc2182553fed292cf125e85fcbd1b",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to object",
                    "type": "scipy.optimize._constraints.Bounds",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     Vector of independent variables ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._constraints.Bounds.residual",
                    "defaultValue": "scipy.optimize._constraints.Bounds.residual",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "HessianUpdateStrategy.dot",
            "description": "Compute the product of the internal matrix with the given vector.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "97d702469af1d2b723e9a4537b473a0665732849b1612b970f24a8e56bd33703",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to object",
                    "type": "scipy.optimize._hessian_update_strategy.HessianUpdateStrategy",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "p",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     1-D array representing a vector. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._hessian_update_strategy.HessianUpdateStrategy.dot",
                    "defaultValue": "scipy.optimize._hessian_update_strategy.HessianUpdateStrategy.dot",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "HessianUpdateStrategy.get_matrix",
            "description": "Return current internal matrix.\n    \n    Returns\n    -------\n    H : ndarray, shape (n, n)\n        Dense matrix containing either the Hessian\n        or its inverse (depending on how 'approx_type'\n        is defined).",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7194de8dfbe252e7b10c4285f1203993ab8785b3b7d4bd6bc5f18c472b9137bf",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to object",
                    "type": "scipy.optimize._hessian_update_strategy.HessianUpdateStrategy",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._hessian_update_strategy.HessianUpdateStrategy.get_matrix",
                    "defaultValue": "scipy.optimize._hessian_update_strategy.HessianUpdateStrategy.get_matrix",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "HessianUpdateStrategy.initialize",
            "description": "Initialize internal matrix.\n    \n    Allocate internal memory for storing and updating\n    the Hessian or its inverse.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7680a0c64094d3e2ba99a3fe4804c86961e657e6bfd775f9860996df244b0a87",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to object",
                    "type": "scipy.optimize._hessian_update_strategy.HessianUpdateStrategy",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "n",
                    "value": null,
                    "defaultValue": null,
                    "description": "int     Problem dimension. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "approx_type",
                    "value": null,
                    "defaultValue": null,
                    "description": "{'hess', 'inv_hess'}     Selects either the Hessian or the inverse Hessian.     When set to 'hess' the Hessian will be stored and updated.     When set to 'inv_hess' its inverse will be used instead.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._hessian_update_strategy.HessianUpdateStrategy.initialize",
                    "defaultValue": "scipy.optimize._hessian_update_strategy.HessianUpdateStrategy.initialize",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "HessianUpdateStrategy.update",
            "description": "Update internal matrix.\n    \n    Update Hessian matrix or its inverse (depending on how 'approx_type'\n    is defined) using information about the last evaluated points.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "33a9b5a474b1b042d76ec809503c63a5a8df214bba2dfcde850a322a6a374381",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to object",
                    "type": "scipy.optimize._hessian_update_strategy.HessianUpdateStrategy",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "delta_x",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray     The difference between two points the gradient     function have been evaluated ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "delta_grad",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray     The difference between the gradients:     ``delta_grad = grad(x2) - grad(x1)``.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._hessian_update_strategy.HessianUpdateStrategy.update",
                    "defaultValue": "scipy.optimize._hessian_update_strategy.HessianUpdateStrategy.update",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "LbfgsInvHessProduct.__init__",
            "description": "Construct the operator.\nLinear operator for the L-BFGS approximate inverse Hessian.\n    \n    This operator computes the product of a vector with the approximate inverse\n    of the Hessian of the objective function, using the L-BFGS limited\n    memory approximation to the inverse Hessian, accumulated during the\n    optimization.\n    \n    Objects of this class implement the ``scipy.sparse.linalg.LinearOperator``\n    interface.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "42818c7bda2169e553c9d302090659d67dda8c50e8da1118eb3c530c57c2889f",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to object",
                    "type": "scipy.optimize._lbfgsb_py.LbfgsInvHessProduct",
                    "parameterType": "ApplicationArgument",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "sk",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like, shape=(n_corr, n)     Array of `n_corr` most recent updates to the solution vector.     (See [1]). ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "yk",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like, shape=(n_corr, n)     Array of `n_corr` most recent updates to the gradient. (See [1]).  References ---------- .. [1] Nocedal, Jorge. \"Updating quasi-Newton matrices with limited    storage.\" Mathematics of computation 35.151 (1980): 773-782.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._lbfgsb_py.LbfgsInvHessProduct.__init__",
                    "defaultValue": "scipy.optimize._lbfgsb_py.LbfgsInvHessProduct.__init__",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "LbfgsInvHessProduct.todense",
            "description": "Return a dense array representation of this operator.\n    \n    Returns\n    -------\n    arr : ndarray, shape=(n, n)\n        An array with the same shape and containing\n        the same data represented by this `LinearOperator`.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "dac0fdbfde4310086c2ab1854c5f3de8a7feea69c280de263b9c9aa4264fd519",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to object",
                    "type": "scipy.optimize._lbfgsb_py.LbfgsInvHessProduct",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._lbfgsb_py.LbfgsInvHessProduct.todense",
                    "defaultValue": "scipy.optimize._lbfgsb_py.LbfgsInvHessProduct.todense",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "LinearConstraint.__init__",
            "description": "No description found\nLinear constraint on the variables.\n    \n    The constraint has the general inequality form::\n    \n        lb <= A.dot(x) <= ub\n    \n    Here the vector of independent variables x is passed as ndarray of shape\n    (n,) and the matrix A has shape (m, n).\n    \n    It is possible to use equal bounds to represent an equality constraint or\n    infinite bounds to represent a one-sided constraint.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7cfc156ab6642d649f9c6408a5ea89b455c169d70882fe0a6fb761737c68cfdf",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to object",
                    "type": "scipy.optimize._constraints.LinearConstraint",
                    "parameterType": "ApplicationArgument",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "A",
                    "value": null,
                    "defaultValue": null,
                    "description": "{array_like, sparse matrix}, shape (m, n)     Matrix defining the constraint. lb, ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "lb",
                    "value": "-inf",
                    "defaultValue": "-inf",
                    "description": "",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "ub",
                    "value": "inf",
                    "defaultValue": "inf",
                    "description": "array_like, optional     Lower and upper limits on the constraint. Each array must have the     shape (m,) or be a scalar, in the latter case a bound will be the same     for all components of the constraint. Use ``np.inf`` with an     appropriate sign to specify a one-sided constraint.     Set components of `lb` and `ub` equal to represent an equality     constraint. Note that you can mix constraints of different types:     interval, one-sided or equality, by setting different components of     `lb` and `ub` as  necessary. Defaults to ``lb = -np.inf``     and ``ub = np.inf`` (no limits). ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "keep_feasible",
                    "value": false,
                    "defaultValue": false,
                    "description": "array_like of bool, optional     Whether to keep the constraint components feasible throughout     iterations. A single value set this property for all components.     Default is False. Has no effect for equality constraints.",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._constraints.LinearConstraint.__init__",
                    "defaultValue": "scipy.optimize._constraints.LinearConstraint.__init__",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "LinearConstraint.residual",
            "description": "Calculate the residual between the constraint function and the limits\n    \n    For a linear constraint of the form::\n    \n        lb <= A@x <= ub\n    \n    the lower and upper residuals between ``A@x`` and the limits are values\n    ``sl`` and ``sb`` such that::\n    \n        lb + sl == A@x == ub - sb\n    \n    When all elements of ``sl`` and ``sb`` are positive, all elements of\n    the constraint are satisfied; a negative element in ``sl`` or ``sb``\n    indicates that the corresponding element of the constraint is not\n    satisfied.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "11085ad7ad3aafe6867dab0de128da16356cb97458458fd277e39827ef447dab",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to object",
                    "type": "scipy.optimize._constraints.LinearConstraint",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     Vector of independent variables ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._constraints.LinearConstraint.residual",
                    "defaultValue": "scipy.optimize._constraints.LinearConstraint.residual",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "NonlinearConstraint.__init__",
            "description": "No description found\nNonlinear constraint on the variables.\n    \n    The constraint has the general inequality form::\n    \n        lb <= fun(x) <= ub\n    \n    Here the vector of independent variables x is passed as ndarray of shape\n    (n,) and ``fun`` returns a vector with m components.\n    \n    It is possible to use equal bounds to represent an equality constraint or\n    infinite bounds to represent a one-sided constraint.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b5663f61d876a3be595cc0d8f9cb46157797ddccbb5406746aca5457f4ef71cc",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to object",
                    "type": "scipy.optimize._constraints.NonlinearConstraint",
                    "parameterType": "ApplicationArgument",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "fun",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable     The function defining the constraint.     The signature is ``fun(x) -> array_like, shape (m,)``. lb, ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "lb",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "ub",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     Lower and upper bounds on the constraint. Each array must have the     shape (m,) or be a scalar, in the latter case a bound will be the same     for all components of the constraint. Use ``np.inf`` with an     appropriate sign to specify a one-sided constraint.     Set components of `lb` and `ub` equal to represent an equality     constraint. Note that you can mix constraints of different types:     interval, one-sided or equality, by setting different components of     `lb` and `ub` as  necessary. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "jac",
                    "value": "2-point",
                    "defaultValue": "2-point",
                    "description": "{callable,  '2-point', '3-point', 'cs'}, optional     Method of computing the Jacobian matrix (an m-by-n matrix,     where element (i, j) is the partial derivative of f[i] with     respect to x[j]).  The keywords {'2-point', '3-point',     'cs'} select a finite difference scheme for the numerical estimation.     A callable must have the following signature:     ``jac(x) -> {ndarray, sparse matrix}, shape (m, n)``.     Default is '2-point'. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "hess",
                    "value": "BFGS",
                    "defaultValue": "BFGS",
                    "description": "{callable, '2-point', '3-point', 'cs', HessianUpdateStrategy, None}, optional     Method for computing the Hessian matrix. The keywords     {'2-point', '3-point', 'cs'} select a finite difference scheme for     numerical  estimation.  Alternatively, objects implementing     `HessianUpdateStrategy` interface can be used to approximate the     Hessian. Currently available implementations are:          - `BFGS` (default option)         - `SR1`      A callable must return the Hessian matrix of ``dot(fun, v)`` and     must have the following signature:     ``hess(x, v) -> {LinearOperator, sparse matrix, array_like}, shape (n, n)``.     Here ``v`` is ndarray with shape (m,) containing Lagrange multipliers. ",
                    "type": "{callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "keep_feasible",
                    "value": false,
                    "defaultValue": false,
                    "description": "array_like of bool, optional     Whether to keep the constraint components feasible throughout     iterations. A single value set this property for all components.     Default is False. Has no effect for equality constraints. ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "finite_diff_rel_step",
                    "value": null,
                    "defaultValue": null,
                    "description": "None or array_like, optional     Relative step size for the finite difference approximation. Default is     None, which will select a reasonable value automatically depending     on a finite difference scheme. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "finite_diff_jac_sparsity",
                    "value": null,
                    "defaultValue": null,
                    "description": "{None, array_like, sparse matrix}, optional     Defines the sparsity structure of the Jacobian matrix for finite     difference estimation, its shape must be (m, n). If the Jacobian has     only few non-zero elements in *each* row, providing the sparsity     structure will greatly speed up the computations. A zero entry means     that a corresponding element in the Jacobian is identically zero.     If provided, forces the use of 'lsmr' trust-region solver.     If None (default) then dense differencing will be used.  Notes ----- Finite difference schemes {'2-point', '3-point', 'cs'} may be used for approximating either the Jacobian or the Hessian. We, however, do not allow its use for approximating both simultaneously. Hence whenever the Jacobian is estimated via finite-differences, we require the Hessian to be estimated using one of the quasi-Newton strategies.  The scheme 'cs' is potentially the most accurate, but requires the function to correctly handles complex inputs and be analytically continuable to the complex plane. The scheme '3-point' is more accurate than '2-point' but requires twice as many operations.  Examples -------- Constrain ``x[0] < sin(x[1]) + 1.9``  >>> from scipy.optimize import NonlinearConstraint >>> con = lambda ",
                    "type": "{None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._constraints.NonlinearConstraint.__init__",
                    "defaultValue": "scipy.optimize._constraints.NonlinearConstraint.__init__",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "OptimizeResult.fromkeys",
            "description": "Create a new dictionary with keys from iterable and values set to value.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e17a673caab449ade5bb9bf3888bd94cf6517319bbd869ec36d3823a1be2fd52",
            "fields": [
                {
                    "name": "iterable",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": true
                },
                {
                    "name": "value",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": true
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize.OptimizeResult.fromkeys",
                    "defaultValue": "scipy.optimize.OptimizeResult.fromkeys",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "RootResults.__init__",
            "description": "No description found\nRepresents the root finding result.\n    \n    Attributes\n    ----------\n    root : float\n        Estimated root location.\n    iterations : int\n        Number of iterations needed to find the root.\n    function_calls : int\n        Number of times the function was called.\n    converged : bool\n        True if the routine converged.\n    flag : str\n        Description of the cause of termination.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6bcdebf4dfaf5e0e6da90ca52ed8a6ec1b3a2277a2ee84c6dc01b52fa8301855",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to object",
                    "type": "scipy.optimize._zeros_py.RootResults",
                    "parameterType": "ApplicationArgument",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "root",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "iterations",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "function_calls",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "flag",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._zeros_py.RootResults.__init__",
                    "defaultValue": "scipy.optimize._zeros_py.RootResults.__init__",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "SR1.__init__",
            "description": "No description found\nSymmetric-rank-1 Hessian update strategy.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7495675f451328e65e8deaa77db6d09f5846b8957b7029a9de6a9401733abcb8",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to object",
                    "type": "scipy.optimize._hessian_update_strategy.SR1",
                    "parameterType": "ApplicationArgument",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "min_denominator",
                    "value": 1e-08,
                    "defaultValue": 1e-08,
                    "description": "float     This number, scaled by a normalization factor,     defines the minimum denominator magnitude allowed     in the update. When the condition is violated we skip     the update. By default uses ``1e-8``. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "init_scale",
                    "value": "auto",
                    "defaultValue": "auto",
                    "description": "{float, 'auto'}, optional     Matrix scale at first iteration. At the first     iteration the Hessian matrix or its inverse will be initialized     with ``init_scale*np.eye(n)``, where ``n`` is the problem dimension.     Set it to 'auto' in order to use an automatic heuristic for choosing     the initial scale. The heuristic is described in [1]_, p.143.     By default uses 'auto'.  Notes ----- The update is based on the description in [1]_, p.144-146.  References ---------- .. [1] Nocedal, Jorge, and Stephen J. Wright. \"Numerical optimization\"        Second Edition (2006).",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._hessian_update_strategy.SR1.__init__",
                    "defaultValue": "scipy.optimize._hessian_update_strategy.SR1.__init__",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.anderson",
            "description": "Find a root of a function, using (extended) Anderson mixing.\n    \n    The Jacobian is formed by for a 'best' solution in the space\n    spanned by last `M` vectors. As a result, only a MxM matrix\n    inversions and MxN multiplications are required. [Ey]_",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "34641166bc0082e356b81f9dce4cbf74c2f3a80fb34ea31b25f934dcb269350c",
            "fields": [
                {
                    "name": "F",
                    "value": null,
                    "defaultValue": null,
                    "description": "function(x) -> f     Function whose root to find; should take and return an array-like     object. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "xin",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     Initial guess for the solution ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "iter",
                    "value": null,
                    "defaultValue": null,
                    "description": "int, optional     Number of iterations to make. If omitted (default), make as many     as required to meet tolerances. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "alpha",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Initial guess for the Jacobian is (-1/alpha). ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "w0",
                    "value": 0.01,
                    "defaultValue": 0.01,
                    "description": "float, optional     Regularization parameter for numerical stability.     Compared to unity, good values of the order of 0.01. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "M",
                    "value": 5,
                    "defaultValue": 5,
                    "description": "float, optional     Number of previous vectors to retain. Defaults to 5. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "verbose",
                    "value": false,
                    "defaultValue": false,
                    "description": "bool, optional     Print status to stdout on every iteration. ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "maxiter",
                    "value": null,
                    "defaultValue": null,
                    "description": "int, optional     Maximum number of iterations to make. If more are needed to     meet convergence, `NoConvergence` is raised. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "f_tol",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Absolute tolerance (in max-norm) for the residual.     If omitted, default is 6e-6. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "f_rtol",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Relative tolerance for the residual. If omitted, not used. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x_tol",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Absolute minimum step size, as determined from the Jacobian     approximation. If the step size is smaller than this, optimization     is terminated as successful. If omitted, not used. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x_rtol",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Relative minimum step size. If omitted, not used. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "tol_norm",
                    "value": null,
                    "defaultValue": null,
                    "description": "function(vector) -> scalar, optional     Norm to use in convergence check. Default is the maximum norm. ",
                    "type": "vector",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "line_search",
                    "value": "armijo",
                    "defaultValue": "armijo",
                    "description": "{None, 'armijo' (default), 'wolfe'}, optional     Which type of a line search to use to determine the step size in the     direction given by the Jacobian approximation. Defaults to 'armijo'. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "callback",
                    "value": null,
                    "defaultValue": null,
                    "description": "function, optional     Optional callback function. It is called on every iteration as     ``callback(x, f)`` where `x` is the current solution and `f`     the corresponding residual. ",
                    "type": "function",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "kw",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._nonlin.anderson",
                    "defaultValue": "scipy.optimize._nonlin.anderson",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.approx_fprime",
            "description": "Finite difference approximation of the derivatives of a\n    scalar or vector-valued function.\n    \n    If a function maps from :math:`R^n` to :math:`R^m`, its derivatives form\n    an m-by-n matrix\n    called the Jacobian, where an element :math:`(i, j)` is a partial\n    derivative of f[i] with respect to ``xk[j]``.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "85191bcf22ee07922045242a10c547bf01e76bf2aa694e3e5d166ab07ea8731a",
            "fields": [
                {
                    "name": "xk",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     The coordinate vector at which to determine the gradient of `f`. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "f",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable     Function of which to estimate the derivatives of. Has the signature     ``f(xk, *args)`` where `xk` is the argument in the form of a 1-D array     and `args` is a tuple of any additional fixed parameters needed to     completely specify the function. The argument `xk` passed to this     function is an ndarray of shape (n,) (never a scalar even if n=1).     It must return a 1-D array_like of shape (m,) or a scalar.      .. versionchanged:: 1.9.0         `f` is now able to return a 1-D array-like, with the :math:`(m, n)`         Jacobian being estimated.  ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "epsilon",
                    "value": 1.4901161193847656e-08,
                    "defaultValue": 1.4901161193847656e-08,
                    "description": "{float, array_like}, optional     Increment to `xk` to use for determining the function gradient.     If a scalar, uses the same finite difference delta for all partial     derivatives. If an array, should contain one value per element of     `xk`. Defaults to ``sqrt(np.finfo(float).eps)``, which is approximately     1.49e-08. \\*",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "args",
                    "value": null,
                    "defaultValue": null,
                    "description": "args, optional     Any other arguments that are to be passed to `f`. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._optimize.approx_fprime",
                    "defaultValue": "scipy.optimize._optimize.approx_fprime",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.basinhopping",
            "description": "Find the global minimum of a function using the basin-hopping algorithm.\n    \n    Basin-hopping is a two-phase method that combines a global stepping\n    algorithm with local minimization at each step. Designed to mimic\n    the natural process of energy minimization of clusters of atoms, it works\n    well for similar problems with \"funnel-like, but rugged\" energy landscapes\n    [5]_.\n    \n    As the step-taking, step acceptance, and minimization methods are all\n    customizable, this function can also be used to implement other two-phase\n    methods.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "3aee6ce6ce00d021abd89932f2be66b19c351528afad5ee32a00fa915840db49",
            "fields": [
                {
                    "name": "func",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable ``f(x, *args)``     Function to be optimized.  ``args`` can be passed as an optional item     in the dict ``minimizer_kwargs`` ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x0",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     Initial guess. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "niter",
                    "value": 100,
                    "defaultValue": 100,
                    "description": "integer, optional     The number of basin-hopping iterations. There will be a total of     ``niter + 1`` runs of the local minimizer. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "T",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "float, optional     The \"temperature\" parameter for the accept or reject criterion. Higher     \"temperatures\" mean that larger jumps in function value will be     accepted.  For best results ``T`` should be comparable to the     separation (in function value) between local minima. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "stepsize",
                    "value": 0.5,
                    "defaultValue": 0.5,
                    "description": "float, optional     Maximum step size for use in the random displacement. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "minimizer_kwargs",
                    "value": null,
                    "defaultValue": null,
                    "description": "dict, optional     Extra keyword arguments to be passed to the local minimizer     ``scipy.optimize.minimize()`` Some important options could be:          ",
                    "type": "dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "take_step",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable ``take_step(x)``, optional     Replace the default step-taking routine with this routine. The default     step-taking routine is a random displacement of the coordinates, but     other step-taking algorithms may be better for some systems.     ``take_step`` can optionally have the attribute ``take_step.stepsize``.     If this attribute exists, then ``basinhopping`` will adjust     ``take_step.stepsize`` in order to try to optimize the global minimum     search. ",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "accept_test",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable, ``accept_test(f_new=f_new, x_new=x_new, f_old=fold, x_old=x_old)``, optional     Define a test which will be used to judge whether or not to accept the     step.  This will be used in addition to the Metropolis test based on     \"temperature\" ``T``.  The acceptable return values are True,     False, or ``\"force accept\"``. If any of the tests return False     then the step is rejected. If the latter, then this will override any     other tests in order to accept the step. This can be used, for example,     to forcefully escape from a local minimum that ``basinhopping`` is     trapped in. ",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "callback",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable, ``callback(x, f, accept)``, optional     A callback function which will be called for all minima found. ``x``     and ``f`` are the coordinates and function value of the trial minimum,     and ``accept`` is whether or not that minimum was accepted. This can     be used, for example, to save the lowest N minima found. Also,     ``callback`` can be used to specify a user defined stop criterion by     optionally returning True to stop the ``basinhopping`` routine. ",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "interval",
                    "value": 50,
                    "defaultValue": 50,
                    "description": "integer, optional     interval for how often to update the ``stepsize`` ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "disp",
                    "value": false,
                    "defaultValue": false,
                    "description": "bool, optional     Set to True to print status messages ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "niter_success",
                    "value": null,
                    "defaultValue": null,
                    "description": "integer, optional     Stop the run if the global minimum candidate remains the same for this     number of iterations. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "seed",
                    "value": null,
                    "defaultValue": null,
                    "description": "{None, int, `numpy.random.Generator`,         `numpy.random.RandomState`}, optional      If `seed` is None (or `np.random`), the `numpy.random.RandomState`     singleton is used.     If `seed` is an int, a new ``RandomState`` instance is used,     seeded with `seed`.     If `seed` is already a ``Generator`` or ``RandomState`` instance then     that instance is used.     Specify `seed` for repeatable minimizations. The random numbers     generated with this seed only affect the default Metropolis     `accept_test` and the default `take_step`. If you supply your own     `take_step` and `accept_test`, and these functions use random     number generation, then those functions are responsible for the state     of their random number generator. ",
                    "type": "{None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "target_accept_rate",
                    "value": 0.5,
                    "defaultValue": 0.5,
                    "description": "float, optional     The target acceptance rate that is used to adjust the `stepsize`.     If the current acceptance rate is greater than the target,     then the `stepsize` is increased. Otherwise, it is decreased.     Range is (0, 1). Default is 0.5.      .. versionadded:: 1.8.0  ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "stepwise_factor",
                    "value": 0.9,
                    "defaultValue": 0.9,
                    "description": "float, optional     The `stepsize` is multiplied or divided by this stepwise factor upon     each update. Range is (0, 1). Default is 0.9.      .. versionadded:: 1.8.0 ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._basinhopping.basinhopping",
                    "defaultValue": "scipy.optimize._basinhopping.basinhopping",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.bisect",
            "description": "Find root of a function within an interval using bisection.\n    \n    Basic bisection routine to find a zero of the function `f` between the\n    arguments `a` and `b`. `f(a)` and `f(b)` cannot have the same signs.\n    Slow but sure.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2e9039a064ac7298861a95ae7a0e7419ca768c82901c6c9a78763513dd48fa10",
            "fields": [
                {
                    "name": "f",
                    "value": null,
                    "defaultValue": null,
                    "description": "function     Python function returning a number.  `f` must be continuous, and     f(a) and f(b) must have opposite signs. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "a",
                    "value": null,
                    "defaultValue": null,
                    "description": "scalar     One end of the bracketing interval [a,b]. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "b",
                    "value": null,
                    "defaultValue": null,
                    "description": "scalar     The other end of the bracketing interval [a,b]. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "args",
                    "value": "()",
                    "defaultValue": "()",
                    "description": "tuple, optional     Containing extra arguments for the function `f`.     `f` is called by ``apply(f, (x)+args)``. ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "xtol",
                    "value": 2e-12,
                    "defaultValue": 2e-12,
                    "description": "number, optional     The computed root ``x0`` will satisfy ``np.allclose(x, x0,     atol=xtol, rtol=rtol)``, where ``x`` is the exact root. The     parameter must be nonnegative. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "rtol",
                    "value": 8.881784197001252e-16,
                    "defaultValue": 8.881784197001252e-16,
                    "description": "number, optional     The computed root ``x0`` will satisfy ``np.allclose(x, x0,     atol=xtol, rtol=rtol)``, where ``x`` is the exact root. The     parameter cannot be smaller than its default value of     ``4*np.finfo(float).eps``. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "maxiter",
                    "value": 100,
                    "defaultValue": 100,
                    "description": "int, optional     If convergence is not achieved in `maxiter` iterations, an error is     raised. Must be >= 0. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "full_output",
                    "value": false,
                    "defaultValue": false,
                    "description": "bool, optional     If `full_output` is False, the root is returned. If `full_output` is     True, the return value is ``(x, r)``, where x is the root, and r is     a `RootResults` object. ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "disp",
                    "value": true,
                    "defaultValue": true,
                    "description": "bool, optional     If True, raise RuntimeError if the algorithm didn't converge.     Otherwise, the convergence status is recorded in a `RootResults`     return object. ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._zeros_py.bisect",
                    "defaultValue": "scipy.optimize._zeros_py.bisect",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.bracket",
            "description": "Bracket the minimum of the function.\n    \n    Given a function and distinct initial points, search in the\n    downhill direction (as defined by the initial points) and return\n    new points xa, xb, xc that bracket the minimum of the function\n    f(xa) > f(xb) < f(xc). It doesn't always mean that obtained\n    solution will satisfy xa<=x<=xb.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ed52fd48c2f526e31bd9afa59801d1e346dd1ab80fc7e54fecdb7e5bb9cc6956",
            "fields": [
                {
                    "name": "func",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable f(x,*args)     Objective function to minimize. xa, ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "xa",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "xb",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "float, optional     Bracketing interval. Defaults `xa` to 0.0, and `xb` to 1.0. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "args",
                    "value": "()",
                    "defaultValue": "()",
                    "description": "tuple, optional     Additional arguments (if present), passed to `func`. ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "grow_limit",
                    "value": 110.0,
                    "defaultValue": 110.0,
                    "description": "float, optional     Maximum grow limit.  Defaults to 110.0 ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "maxiter",
                    "value": 1000,
                    "defaultValue": 1000,
                    "description": "int, optional     Maximum number of iterations to perform. Defaults to 1000. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._optimize.bracket",
                    "defaultValue": "scipy.optimize._optimize.bracket",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.brent",
            "description": "Given a function of one variable and a possible bracket, return\n    the local minimum of the function isolated to a fractional precision\n    of tol.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "06e880151f4fc56330a21b1c3be0ffaf4e837e2307bab434589e86d44f6fa5bc",
            "fields": [
                {
                    "name": "func",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable f(x,*args)     Objective function. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "args",
                    "value": "()",
                    "defaultValue": "()",
                    "description": "tuple, optional     Additional arguments (if present). ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "brack",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "tuple, optional     Either a triple (xa,xb,xc) where xa<xb<xc and func(xb) <     func(xa), func(xc) or a pair (xa,xb) which are used as a     starting interval for a downhill bracket search (see     `bracket`). Providing the pair (xa,xb) does not always mean     the obtained solution will satisfy xa<=x<=xb. ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "tol",
                    "value": 1.48e-08,
                    "defaultValue": 1.48e-08,
                    "description": "float, optional     Relative error in solution `xopt` acceptable for convergence. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "full_output",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "bool, optional     If True, return all output args (xmin, fval, iter,     funcalls). ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "maxiter",
                    "value": 500,
                    "defaultValue": 500,
                    "description": "int, optional     Maximum number of iterations in solution. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._optimize.brent",
                    "defaultValue": "scipy.optimize._optimize.brent",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.brenth",
            "description": "Find a root of a function in a bracketing interval using Brent's\n    method with hyperbolic extrapolation.\n    \n    A variation on the classic Brent routine to find a zero of the function f\n    between the arguments a and b that uses hyperbolic extrapolation instead of\n    inverse quadratic extrapolation. Bus & Dekker (1975) guarantee convergence\n    for this method, claiming that the upper bound of function evaluations here\n    is 4 or 5 times lesser than that for bisection.\n    f(a) and f(b) cannot have the same signs. Generally, on a par with the\n    brent routine, but not as heavily tested. It is a safe version of the\n    secant method that uses hyperbolic extrapolation.\n    The version here is by Chuck Harris, and implements Algorithm M of\n    [BusAndDekker1975]_, where further details (convergence properties,\n    additional remarks and such) can be found",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "fdcc52000c2ef93982b58617ed3137a37654d65a9eb0e218544e54ba1a3db2fb",
            "fields": [
                {
                    "name": "f",
                    "value": null,
                    "defaultValue": null,
                    "description": "function     Python function returning a number. f must be continuous, and f(a) and     f(b) must have opposite signs. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "a",
                    "value": null,
                    "defaultValue": null,
                    "description": "scalar     One end of the bracketing interval [a,b]. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "b",
                    "value": null,
                    "defaultValue": null,
                    "description": "scalar     The other end of the bracketing interval [a,b]. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "args",
                    "value": "()",
                    "defaultValue": "()",
                    "description": "tuple, optional     Containing extra arguments for the function `f`.     `f` is called by ``apply(f, (x)+args)``. ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "xtol",
                    "value": 2e-12,
                    "defaultValue": 2e-12,
                    "description": "number, optional     The computed root ``x0`` will satisfy ``np.allclose(x, x0,     atol=xtol, rtol=rtol)``, where ``x`` is the exact root. The     parameter must be nonnegative. As with `brentq`, for nice     functions the method will often satisfy the above condition     with ``xtol/2`` and ``rtol/2``. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "rtol",
                    "value": 8.881784197001252e-16,
                    "defaultValue": 8.881784197001252e-16,
                    "description": "number, optional     The computed root ``x0`` will satisfy ``np.allclose(x, x0,     atol=xtol, rtol=rtol)``, where ``x`` is the exact root. The     parameter cannot be smaller than its default value of     ``4*np.finfo(float).eps``. As with `brentq`, for nice functions     the method will often satisfy the above condition with     ``xtol/2`` and ``rtol/2``. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "maxiter",
                    "value": 100,
                    "defaultValue": 100,
                    "description": "int, optional     If convergence is not achieved in `maxiter` iterations, an error is     raised. Must be >= 0. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "full_output",
                    "value": false,
                    "defaultValue": false,
                    "description": "bool, optional     If `full_output` is False, the root is returned. If `full_output` is     True, the return value is ``(x, r)``, where `x` is the root, and `r` is     a `RootResults` object. ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "disp",
                    "value": true,
                    "defaultValue": true,
                    "description": "bool, optional     If True, raise RuntimeError if the algorithm didn't converge.     Otherwise, the convergence status is recorded in any `RootResults`     return object. ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._zeros_py.brenth",
                    "defaultValue": "scipy.optimize._zeros_py.brenth",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.brentq",
            "description": "Find a root of a function in a bracketing interval using Brent's method.\n    \n    Uses the classic Brent's method to find a zero of the function `f` on\n    the sign changing interval [a , b]. Generally considered the best of the\n    rootfinding routines here. It is a safe version of the secant method that\n    uses inverse quadratic extrapolation. Brent's method combines root\n    bracketing, interval bisection, and inverse quadratic interpolation. It is\n    sometimes known as the van Wijngaarden-Dekker-Brent method. Brent (1973)\n    claims convergence is guaranteed for functions computable within [a,b].\n    \n    [Brent1973]_ provides the classic description of the algorithm. Another\n    description can be found in a recent edition of Numerical Recipes, including\n    [PressEtal1992]_. A third description is at\n    http://mathworld.wolfram.com/BrentsMethod.html. It should be easy to\n    understand the algorithm just by reading our code. Our code diverges a bit\n    from standard presentations: we choose a different formula for the\n    extrapolation step.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b97c2f32919e7d505a578800ea020f051c12a73d4327948e329faca0d005c09b",
            "fields": [
                {
                    "name": "f",
                    "value": null,
                    "defaultValue": null,
                    "description": "function     Python function returning a number. The function :math:`f`     must be continuous, and :math:`f(a)` and :math:`f(b)` must     have opposite signs. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "a",
                    "value": null,
                    "defaultValue": null,
                    "description": "scalar     One end of the bracketing interval :math:`[a, b]`. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "b",
                    "value": null,
                    "defaultValue": null,
                    "description": "scalar     The other end of the bracketing interval :math:`[a, b]`. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "args",
                    "value": "()",
                    "defaultValue": "()",
                    "description": "tuple, optional     Containing extra arguments for the function `f`.     `f` is called by ``apply(f, (x)+args)``. ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "xtol",
                    "value": 2e-12,
                    "defaultValue": 2e-12,
                    "description": "number, optional     The computed root ``x0`` will satisfy ``np.allclose(x, x0,     atol=xtol, rtol=rtol)``, where ``x`` is the exact root. The     parameter must be nonnegative. For nice functions, Brent's     method will often satisfy the above condition with ``xtol/2``     and ``rtol/2``. [Brent1973]_ ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "rtol",
                    "value": 8.881784197001252e-16,
                    "defaultValue": 8.881784197001252e-16,
                    "description": "number, optional     The computed root ``x0`` will satisfy ``np.allclose(x, x0,     atol=xtol, rtol=rtol)``, where ``x`` is the exact root. The     parameter cannot be smaller than its default value of     ``4*np.finfo(float).eps``. For nice functions, Brent's     method will often satisfy the above condition with ``xtol/2``     and ``rtol/2``. [Brent1973]_ ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "maxiter",
                    "value": 100,
                    "defaultValue": 100,
                    "description": "int, optional     If convergence is not achieved in `maxiter` iterations, an error is     raised. Must be >= 0. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "full_output",
                    "value": false,
                    "defaultValue": false,
                    "description": "bool, optional     If `full_output` is False, the root is returned. If `full_output` is     True, the return value is ``(x, r)``, where `x` is the root, and `r` is     a `RootResults` object. ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "disp",
                    "value": true,
                    "defaultValue": true,
                    "description": "bool, optional     If True, raise RuntimeError if the algorithm didn't converge.     Otherwise, the convergence status is recorded in any `RootResults`     return object. ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._zeros_py.brentq",
                    "defaultValue": "scipy.optimize._zeros_py.brentq",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.broyden1",
            "description": "Find a root of a function, using Broyden's first Jacobian approximation.\n    \n    This method is also known as \\\"Broyden's good method\\\".",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8d72b49314823f2fbbd5b1e2bfabefb458fc2fe864b9b9e5675c29ca40c1112c",
            "fields": [
                {
                    "name": "F",
                    "value": null,
                    "defaultValue": null,
                    "description": "function(x) -> f     Function whose root to find; should take and return an array-like     object. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "xin",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     Initial guess for the solution ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "iter",
                    "value": null,
                    "defaultValue": null,
                    "description": "int, optional     Number of iterations to make. If omitted (default), make as many     as required to meet tolerances. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "alpha",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Initial guess for the Jacobian is ``(-1/alpha)``. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "reduction_method",
                    "value": "restart",
                    "defaultValue": "restart",
                    "description": "str or tuple, optional     Method used in ensuring that the rank of the Broyden matrix     stays low. Can either be a string giving the name of the method,     or a tuple of the form ``(method, param1, param2, ...)``     that gives the name of the method and values for additional parameters.      Methods available:          - ``restart``: drop all matrix columns. Has no extra parameters.         - ``simple``: drop oldest matrix column. Has no extra parameters.         - ``svd``: keep only the most significant SVD components.           Takes an extra parameter, ``to_retain``, which determines the           number of SVD components to retain when rank reduction is done.           Default is ``max_rank - 2``.  ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "max_rank",
                    "value": null,
                    "defaultValue": null,
                    "description": "int, optional     Maximum rank for the Broyden matrix.     Default is infinity (i.e., no rank reduction). ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "verbose",
                    "value": false,
                    "defaultValue": false,
                    "description": "bool, optional     Print status to stdout on every iteration. ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "maxiter",
                    "value": null,
                    "defaultValue": null,
                    "description": "int, optional     Maximum number of iterations to make. If more are needed to     meet convergence, `NoConvergence` is raised. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "f_tol",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Absolute tolerance (in max-norm) for the residual.     If omitted, default is 6e-6. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "f_rtol",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Relative tolerance for the residual. If omitted, not used. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x_tol",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Absolute minimum step size, as determined from the Jacobian     approximation. If the step size is smaller than this, optimization     is terminated as successful. If omitted, not used. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x_rtol",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Relative minimum step size. If omitted, not used. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "tol_norm",
                    "value": null,
                    "defaultValue": null,
                    "description": "function(vector) -> scalar, optional     Norm to use in convergence check. Default is the maximum norm. ",
                    "type": "vector",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "line_search",
                    "value": "armijo",
                    "defaultValue": "armijo",
                    "description": "{None, 'armijo' (default), 'wolfe'}, optional     Which type of a line search to use to determine the step size in the     direction given by the Jacobian approximation. Defaults to 'armijo'. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "callback",
                    "value": null,
                    "defaultValue": null,
                    "description": "function, optional     Optional callback function. It is called on every iteration as     ``callback(x, f)`` where `x` is the current solution and `f`     the corresponding residual. ",
                    "type": "function",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "kw",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._nonlin.broyden1",
                    "defaultValue": "scipy.optimize._nonlin.broyden1",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.broyden2",
            "description": "Find a root of a function, using Broyden's second Jacobian approximation.\n    \n    This method is also known as \"Broyden's bad method\".",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "16b36d427b07035466868ce9ca231e8f0cb4f988edbf59bd4490ebfc15547c61",
            "fields": [
                {
                    "name": "F",
                    "value": null,
                    "defaultValue": null,
                    "description": "function(x) -> f     Function whose root to find; should take and return an array-like     object. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "xin",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     Initial guess for the solution ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "iter",
                    "value": null,
                    "defaultValue": null,
                    "description": "int, optional     Number of iterations to make. If omitted (default), make as many     as required to meet tolerances. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "alpha",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Initial guess for the Jacobian is ``(-1/alpha)``. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "reduction_method",
                    "value": "restart",
                    "defaultValue": "restart",
                    "description": "str or tuple, optional     Method used in ensuring that the rank of the Broyden matrix     stays low. Can either be a string giving the name of the method,     or a tuple of the form ``(method, param1, param2, ...)``     that gives the name of the method and values for additional parameters.      Methods available:          - ``restart``: drop all matrix columns. Has no extra parameters.         - ``simple``: drop oldest matrix column. Has no extra parameters.         - ``svd``: keep only the most significant SVD components.           Takes an extra parameter, ``to_retain``, which determines the           number of SVD components to retain when rank reduction is done.           Default is ``max_rank - 2``.  ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "max_rank",
                    "value": null,
                    "defaultValue": null,
                    "description": "int, optional     Maximum rank for the Broyden matrix.     Default is infinity (i.e., no rank reduction). ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "verbose",
                    "value": false,
                    "defaultValue": false,
                    "description": "bool, optional     Print status to stdout on every iteration. ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "maxiter",
                    "value": null,
                    "defaultValue": null,
                    "description": "int, optional     Maximum number of iterations to make. If more are needed to     meet convergence, `NoConvergence` is raised. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "f_tol",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Absolute tolerance (in max-norm) for the residual.     If omitted, default is 6e-6. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "f_rtol",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Relative tolerance for the residual. If omitted, not used. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x_tol",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Absolute minimum step size, as determined from the Jacobian     approximation. If the step size is smaller than this, optimization     is terminated as successful. If omitted, not used. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x_rtol",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Relative minimum step size. If omitted, not used. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "tol_norm",
                    "value": null,
                    "defaultValue": null,
                    "description": "function(vector) -> scalar, optional     Norm to use in convergence check. Default is the maximum norm. ",
                    "type": "vector",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "line_search",
                    "value": "armijo",
                    "defaultValue": "armijo",
                    "description": "{None, 'armijo' (default), 'wolfe'}, optional     Which type of a line search to use to determine the step size in the     direction given by the Jacobian approximation. Defaults to 'armijo'. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "callback",
                    "value": null,
                    "defaultValue": null,
                    "description": "function, optional     Optional callback function. It is called on every iteration as     ``callback(x, f)`` where `x` is the current solution and `f`     the corresponding residual. ",
                    "type": "function",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "kw",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._nonlin.broyden2",
                    "defaultValue": "scipy.optimize._nonlin.broyden2",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.brute",
            "description": "Minimize a function over a given range by brute force.\n    \n    Uses the \"brute force\" method, i.e., computes the function's value\n    at each point of a multidimensional grid of points, to find the global\n    minimum of the function.\n    \n    The function is evaluated everywhere in the range with the datatype of the\n    first call to the function, as enforced by the ``vectorize`` NumPy\n    function. The value and type of the function evaluation returned when\n    ``full_output=True`` are affected in addition by the ``finish`` argument\n    (see Notes).\n    \n    The brute force approach is inefficient because the number of grid points\n    increases exponentially - the number of grid points to evaluate is\n    ``Ns ** len(x)``. Consequently, even with coarse grid spacing, even\n    moderately sized problems can take a long time to run, and/or run into\n    memory limitations.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "35c10eb3dfdfc4007279fee0c909db5e47623b476825319a33e20b97b39ce94a",
            "fields": [
                {
                    "name": "func",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable     The objective function to be minimized. Must be in the     form ``f(x, *args)``, where ``x`` is the argument in     the form of a 1-D array and ``args`` is a tuple of any     additional fixed parameters needed to completely specify     the function. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "ranges",
                    "value": null,
                    "defaultValue": null,
                    "description": "tuple     Each component of the `ranges` tuple must be either a     \"slice object\" or a range tuple of the form ``(low, high)``.     The program uses these to create the grid of points on which     the objective function will be computed. See `Note 2` for     more detail. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "args",
                    "value": "()",
                    "defaultValue": "()",
                    "description": "tuple, optional     Any additional fixed parameters needed to completely specify     the function. ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "Ns",
                    "value": 20,
                    "defaultValue": 20,
                    "description": "int, optional     Number of grid points along the axes, if not otherwise     specified. See `Note2`. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "full_output",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "bool, optional     If True, return the evaluation grid and the objective function's     values on it. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "finish",
                    "value": "function",
                    "defaultValue": "function",
                    "description": "callable, optional     An optimization function that is called with the result of brute force     minimization as initial guess. `finish` should take `func` and     the initial guess as positional arguments, and take `args` as     keyword arguments. It may additionally take `full_output`     and/or `disp` as keyword arguments. Use None if no \"polishing\"     function is to be used. See Notes for more details. ",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "disp",
                    "value": false,
                    "defaultValue": false,
                    "description": "bool, optional     Set to True to print convergence messages from the `finish` callable. ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "workers",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "int or map-like callable, optional     If `workers` is an int the grid is subdivided into `workers`     sections and evaluated in parallel (uses     `multiprocessing.Pool <multiprocessing>`).     Supply `-1` to use all cores available to the Process.     Alternatively supply a map-like callable, such as     `multiprocessing.Pool.map` for evaluating the grid in parallel.     This evaluation is carried out as ``workers(func, iterable)``.     Requires that `func` be pickleable.      .. versionadded:: 1.3.0 ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._optimize.brute",
                    "defaultValue": "scipy.optimize._optimize.brute",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.check_grad",
            "description": "Check the correctness of a gradient function by comparing it against a\n    (forward) finite-difference approximation of the gradient.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "92d15825cad8a5506c7171b2c0030ed21b37fc5b17139480a29fe9c8b0486428",
            "fields": [
                {
                    "name": "func",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable ``func(x0, *args)``     Function whose derivative is to be checked. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "grad",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable ``grad(x0, *args)``     Jacobian of `func`. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x0",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray     Points to check `grad` against forward difference approximation of grad     using `func`. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "args",
                    "value": null,
                    "defaultValue": null,
                    "description": "\\*args, optional     Extra arguments passed to `func` and `grad`. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "epsilon",
                    "value": 1.4901161193847656e-08,
                    "defaultValue": 1.4901161193847656e-08,
                    "description": "float, optional     Step size used for the finite difference approximation. It defaults to     ``sqrt(np.finfo(float).eps)``, which is approximately 1.49e-08. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "direction",
                    "value": "all",
                    "defaultValue": "all",
                    "description": "str, optional     If set to ``'random'``, then gradients along a random vector     are used to check `grad` against forward difference approximation     using `func`. By default it is ``'all'``, in which case, all     the one hot direction vectors are considered to check `grad`.     If `func` is a vector valued function then only ``'all'`` can be used. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "seed",
                    "value": null,
                    "defaultValue": null,
                    "description": "{None, int, `numpy.random.Generator`,         `numpy.random.RandomState`}, optional      If `seed` is None (or `np.random`), the `numpy.random.RandomState`     singleton is used.     If `seed` is an int, a new ``RandomState`` instance is used,     seeded with `seed`.     If `seed` is already a ``Generator`` or ``RandomState`` instance then     that instance is used.     Specify `seed` for reproducing the return value from this function.     The random numbers generated with this seed affect the random vector     along which gradients are computed to check ``grad``. Note that `seed`     is only used when `direction` argument is set to `'random'`. ",
                    "type": "{None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._optimize.check_grad",
                    "defaultValue": "scipy.optimize._optimize.check_grad",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.curve_fit",
            "description": "Use non-linear least squares to fit a function, f, to data.\n    \n    Assumes ``ydata = f(xdata, *params) + eps``.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "928ecebcfc1bf2effe2dc96b6273a5de2464fed9ed9adbf6e3adecb4bb2d65ed",
            "fields": [
                {
                    "name": "f",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable     The model function, f(x, ...). It must take the independent     variable as the first argument and the parameters to fit as     separate remaining arguments. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "xdata",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like or object     The independent variable where the data is measured.     Should usually be an M-length sequence or an (k,M)-shaped array for     functions with k predictors, but can actually be any object. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "ydata",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     The dependent data, a length M array - nominally ``f(xdata, ...)``. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "p0",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like, optional     Initial guess for the parameters (length N). If None, then the     initial values will all be 1 (if the number of parameters for the     function can be determined using introspection, otherwise a     ValueError is raised). ",
                    "type": "array_like",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "sigma",
                    "value": null,
                    "defaultValue": null,
                    "description": "None or M-length sequence or MxM array, optional     Determines the uncertainty in `ydata`. If we define residuals as     ``r = ydata - f(xdata, *popt)``, then the interpretation of `sigma`     depends on its number of dimensions:          - A 1-D `sigma` should contain values of standard deviations of           errors in `ydata`. In this case, the optimized function is           ``chisq = sum((r / sigma) ** 2)``.          - A 2-D `sigma` should contain the covariance matrix of           errors in `ydata`. In this case, the optimized function is           ``chisq = r.T @ inv(sigma) @ r``.            .. versionadded:: 0.19      None (default) is equivalent of 1-D `sigma` filled with ones. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "absolute_sigma",
                    "value": false,
                    "defaultValue": false,
                    "description": "bool, optional     If True, `sigma` is used in an absolute sense and the estimated parameter     covariance `pcov` reflects these absolute values.      If False (default), only the relative magnitudes of the `sigma` values matter.     The returned parameter covariance matrix `pcov` is based on scaling     `sigma` by a constant factor. This constant is set by demanding that the     reduced `chisq` for the optimal parameters `popt` when using the     *scaled* `sigma` equals unity. In other words, `sigma` is scaled to     match the sample variance of the residuals after the fit. Default is False.     Mathematically,     ``pcov(absolute_sigma=False) = pcov(absolute_sigma=True) * chisq(popt)/(M-N)`` ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "bool, optional     If True, check that the input arrays do not contain nans of infs,     and raise a ValueError if they do. Setting this parameter to     False may silently produce nonsensical results if the input arrays     do contain nans. Default is True. ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "bounds",
                    "value": "(-inf, inf)",
                    "defaultValue": "(-inf, inf)",
                    "description": "2-tuple of array_like, optional     Lower and upper bounds on parameters. Defaults to no bounds.     Each element of the tuple must be either an array with the length equal     to the number of parameters, or a scalar (in which case the bound is     taken to be the same for all parameters). Use ``np.inf`` with an     appropriate sign to disable bounds on all or some parameters.      .. versionadded:: 0.17 ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "method",
                    "value": null,
                    "defaultValue": null,
                    "description": "{'lm', 'trf', 'dogbox'}, optional     Method to use for optimization. See `least_squares` for more details.     Default is 'lm' for unconstrained problems and 'trf' if `bounds` are     provided. The method 'lm' won't work when the number of observations     is less than the number of variables, use 'trf' or 'dogbox' in this     case.      .. versionadded:: 0.17 ",
                    "type": "{'lm'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "jac",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable, string or None, optional     Function with signature ``jac(x, ...)`` which computes the Jacobian     matrix of the model function with respect to parameters as a dense     array_like structure. It will be scaled according to provided `sigma`.     If None (default), the Jacobian will be estimated numerically.     String keywords for 'trf' and 'dogbox' methods can be used to select     a finite difference scheme, see `least_squares`.      .. versionadded:: 0.18 ",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "full_output",
                    "value": false,
                    "defaultValue": false,
                    "description": "boolean, optional     If True, this function returns additioal ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "kwargs",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._minpack_py.curve_fit",
                    "defaultValue": "scipy.optimize._minpack_py.curve_fit",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.diagbroyden",
            "description": "Find a root of a function, using diagonal Broyden Jacobian approximation.\n    \n    The Jacobian approximation is derived from previous iterations, by\n    retaining only the diagonal of Broyden matrices.\n    \n    .. warning::\n    \n       This algorithm may be useful for specific problems, but whether\n       it will work may depend strongly on the problem.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d064f5e78af76afd804897bab9b6afe1ca7ae08282120cf31940f9289f119c9e",
            "fields": [
                {
                    "name": "F",
                    "value": null,
                    "defaultValue": null,
                    "description": "function(x) -> f     Function whose root to find; should take and return an array-like     object. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "xin",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     Initial guess for the solution ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "iter",
                    "value": null,
                    "defaultValue": null,
                    "description": "int, optional     Number of iterations to make. If omitted (default), make as many     as required to meet tolerances. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "alpha",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Initial guess for the Jacobian is (-1/alpha). ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "verbose",
                    "value": false,
                    "defaultValue": false,
                    "description": "bool, optional     Print status to stdout on every iteration. ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "maxiter",
                    "value": null,
                    "defaultValue": null,
                    "description": "int, optional     Maximum number of iterations to make. If more are needed to     meet convergence, `NoConvergence` is raised. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "f_tol",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Absolute tolerance (in max-norm) for the residual.     If omitted, default is 6e-6. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "f_rtol",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Relative tolerance for the residual. If omitted, not used. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x_tol",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Absolute minimum step size, as determined from the Jacobian     approximation. If the step size is smaller than this, optimization     is terminated as successful. If omitted, not used. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x_rtol",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Relative minimum step size. If omitted, not used. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "tol_norm",
                    "value": null,
                    "defaultValue": null,
                    "description": "function(vector) -> scalar, optional     Norm to use in convergence check. Default is the maximum norm. ",
                    "type": "vector",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "line_search",
                    "value": "armijo",
                    "defaultValue": "armijo",
                    "description": "{None, 'armijo' (default), 'wolfe'}, optional     Which type of a line search to use to determine the step size in the     direction given by the Jacobian approximation. Defaults to 'armijo'. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "callback",
                    "value": null,
                    "defaultValue": null,
                    "description": "function, optional     Optional callback function. It is called on every iteration as     ``callback(x, f)`` where `x` is the current solution and `f`     the corresponding residual. ",
                    "type": "function",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "kw",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._nonlin.diagbroyden",
                    "defaultValue": "scipy.optimize._nonlin.diagbroyden",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.differential_evolution",
            "description": "Finds the global minimum of a multivariate function.\n    \n    Differential Evolution is stochastic in nature (does not use gradient\n    methods) to find the minimum, and can search large areas of candidate\n    space, but often requires larger numbers of function evaluations than\n    conventional gradient-based techniques.\n    \n    The algorithm is due to Storn and Price [1]_.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "201bbfce45c66024a4b418a23b81df0a5a1256c7a67818460a536b3b8eeb1777",
            "fields": [
                {
                    "name": "func",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable     The objective function to be minimized. Must be in the form     ``f(x, *args)``, where ``x`` is the argument in the form of a 1-D array     and ``args`` is a tuple of any additional fixed parameters needed to     completely specify the function. The number of parameters, N, is equal     to ``len(x)``. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "bounds",
                    "value": null,
                    "defaultValue": null,
                    "description": "sequence or `Bounds`     Bounds for variables. There are two ways to specify the bounds:     1. Instance of `Bounds` class.     2. ``(min, max)`` pairs for each element in ``x``, defining the finite     lower and upper bounds for the optimizing argument of `func`.     The total number of bounds is used to determine the number of     parameters, N. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "args",
                    "value": "()",
                    "defaultValue": "()",
                    "description": "tuple, optional     Any additional fixed parameters needed to     completely specify the objective function. ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "strategy",
                    "value": "best1bin",
                    "defaultValue": "best1bin",
                    "description": "str, optional     The differential evolution strategy to use. Should be one of:          - 'best1bin'         - 'best1exp'         - 'rand1exp'         - 'randtobest1exp'         - 'currenttobest1exp'         - 'best2exp'         - 'rand2exp'         - 'randtobest1bin'         - 'currenttobest1bin'         - 'best2bin'         - 'rand2bin'         - 'rand1bin'      The default is 'best1bin'. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "maxiter",
                    "value": 1000,
                    "defaultValue": 1000,
                    "description": "int, optional     The maximum number of generations over which the entire population is     evolved. The maximum number of function evaluations (with no polishing)     ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "popsize",
                    "value": 15,
                    "defaultValue": 15,
                    "description": "int, optional     A multiplier for setting the total population size. The population has     ``popsize * N`` individuals. This keyword is overridden if an     initial population is supplied via the `init` keyword. When using     ``init='sobol'`` the population size is calculated as the next power     of 2 after ``popsize * N``. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "tol",
                    "value": 0.01,
                    "defaultValue": 0.01,
                    "description": "float, optional     Relative tolerance for convergence, the solving stops when     ``np.std(pop) <= atol + tol * np.abs(np.mean(population_energies))``,     where and `atol` and `tol` are the absolute and relative tolerance     respectively. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mutation",
                    "value": "(0.5, 1)",
                    "defaultValue": "(0.5, 1)",
                    "description": "float or tuple(float, float), optional     The mutation constant. In the literature this is also known as     differential weight, being denoted by F.     If specified as a float it should be in the range [0, 2].     If specified as a tuple ``(min, max)`` dithering is employed. Dithering     randomly changes the mutation constant on a generation by generation     basis. The mutation constant for that generation is taken from     ``U[min, max)``. Dithering can help speed convergence significantly.     Increasing the mutation constant increases the search radius, but will     slow down convergence. ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "recombination",
                    "value": 0.7,
                    "defaultValue": 0.7,
                    "description": "float, optional     The recombination constant, should be in the range [0, 1]. In the     literature this is also known as the crossover probability, being     denoted by CR. Increasing this value allows a larger number of mutants     to progress into the next generation, but at the risk of population     stability. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "seed",
                    "value": null,
                    "defaultValue": null,
                    "description": "{None, int, `numpy.random.Generator`,         `numpy.random.RandomState`}, optional      If `seed` is None (or `np.random`), the `numpy.random.RandomState`     singleton is used.     If `seed` is an int, a new ``RandomState`` instance is used,     seeded with `seed`.     If `seed` is already a ``Generator`` or ``RandomState`` instance then     that instance is used.     Specify `seed` for repeatable minimizations. ",
                    "type": "{None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "callback",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable, `callback(xk, convergence=val)`, optional     A function to follow the progress of the minimization. ``xk`` is     the best solution found so far. ``val`` represents the fractional     value of the population convergence.  When ``val`` is greater than one     the function halts. If callback returns `True`, then the minimization     is halted (any polishing is still carried out). ",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "disp",
                    "value": false,
                    "defaultValue": false,
                    "description": "bool, optional     Prints the evaluated `func` at every iteration. ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "polish",
                    "value": true,
                    "defaultValue": true,
                    "description": "bool, optional     If True (default), then `scipy.optimize.minimize` with the `L-BFGS-B`     method is used to polish the best population member at the end, which     can improve the minimization slightly. If a constrained problem is     being studied then the `trust-constr` method is used instead. ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "init",
                    "value": "latinhypercube",
                    "defaultValue": "latinhypercube",
                    "description": "str or array-like, optional     Specify which type of population initialization is performed. Should be     one of:          - 'latinhypercube'         - 'sobol'         - 'halton'         - 'random'         - array specifying the initial population. The array should have           shape ``(S, N)``, where S is the total population size and N is           the number of parameters.           `init` is clipped to `bounds` before use.      The default is 'latinhypercube'. Latin Hypercube sampling tries to     maximize coverage of the available parameter space.      'sobol' and 'halton' are superior alternatives and maximize even more     the parameter space. 'sobol' will enforce an initial population     size which is calculated as the next power of 2 after     ``popsize * N``. 'halton' has no requirements but is a bit less     efficient. See `scipy.stats.qmc` for more details.      'random' initializes the population randomly - this has the drawback     that clustering can occur, preventing the whole of parameter space     being covered. Use of an array to specify a population could be used,     for example, to create a tight bunch of initial guesses in an location     where the solution is known to exist, thereby reducing time for     convergence. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "atol",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "float, optional     Absolute tolerance for convergence, the solving stops when     ``np.std(pop) <= atol + tol * np.abs(np.mean(population_energies))``,     where and `atol` and `tol` are the absolute and relative tolerance     respectively. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "updating",
                    "value": "immediate",
                    "defaultValue": "immediate",
                    "description": "{'immediate', 'deferred'}, optional     If ``'immediate'``, the best solution vector is continuously updated     within a single generation [4]_. This can lead to faster convergence as     trial vectors can take advantage of continuous improvements in the best     solution.     With ``'deferred'``, the best solution vector is updated once per     generation. Only ``'deferred'`` is compatible with parallelization or     vectorization, and the `workers` and `vectorized` keywords can     over-ride this option.      .. versionadded:: 1.2.0  ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "workers",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "int or map-like callable, optional     If `workers` is an int the population is subdivided into `workers`     sections and evaluated in parallel     (uses `multiprocessing.Pool <multiprocessing>`).     Supply -1 to use all available CPU cores.     Alternatively supply a map-like callable, such as     `multiprocessing.Pool.map` for evaluating the population in parallel.     This evaluation is carried out as ``workers(func, iterable)``.     This option will override the `updating` keyword to     ``updating='deferred'`` if ``workers != 1``.     This option overrides the `vectorized` keyword if ``workers != 1``.     Requires that `func` be pickleable.      .. versionadded:: 1.2.0  ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "constraints",
                    "value": "()",
                    "defaultValue": "()",
                    "description": "{NonLinearConstraint, LinearConstraint, Bounds}     Constraints on the solver, over and above those applied by the `bounds`     kwd. Uses the approach by Lampinen [5]_.      .. versionadded:: 1.4.0  ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x0",
                    "value": null,
                    "defaultValue": null,
                    "description": "None or array-like, optional     Provides an initial guess to the minimization. Once the population has     been initialized this vector replaces the first (best) member. This     replacement is done even if `init` is given an initial population.     ``x0.shape == (N,)``.      .. versionadded:: 1.7.0  ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "integrality",
                    "value": null,
                    "defaultValue": null,
                    "description": "1-D array, optional     For each decision variable, a boolean value indicating whether the     decision variable is constrained to integer values. The array is     broadcast to ``(N,)``.     If any decision variables are constrained to be integral, they will not     be changed during polishing.     Only integer values lying between the lower and upper bounds are used.     If there are no integer values lying between the bounds then a     `ValueError` is raised.      .. versionadded:: 1.9.0  ",
                    "type": "1-D",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "vectorized",
                    "value": false,
                    "defaultValue": false,
                    "description": "bool, optional     If ``vectorized is True``, `func` is sent an `x` array with     ``x.shape == (N, S)``, and is expected to return an array of shape     ``(S,)``, where `S` is the number of solution vectors to be calculated.     If constraints are applied, each of the functions used to construct     a `Constraint` object should accept an `x` array with     ``x.shape == (N, S)``, and return an array of shape ``(M, S)``, where     `M` is the number of constraint components.     This option is an alternative to the parallelization offered by     `workers`, and may help in optimization speed by reducing interpreter     overhead from multiple function calls. This keyword is ignored if     ``workers != 1``.     This option will override the `updating` keyword to     ``updating='deferred'``.     See the notes section for further discussion on when to use     ``'vectorized'``, and when to use ``'workers'``.      .. versionadded:: 1.9.0 ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._differentialevolution.differential_evolution",
                    "defaultValue": "scipy.optimize._differentialevolution.differential_evolution",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.direct",
            "description": "Finds the global minimum of a function using the\n    DIRECT algorithm.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a5daa25578b7e7c7b2c21e1633d226740a81e53e8ac40aeab66dafa139a66b1e",
            "fields": [
                {
                    "name": "func",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable     The objective function to be minimized.     ``func(x, *args) -> float``     where ``x`` is an 1-D array with shape (n,) and ``args`` is a tuple of     the fixed parameters needed to completely specify the function. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "bounds",
                    "value": null,
                    "defaultValue": null,
                    "description": "sequence or `Bounds`     Bounds for variables. There are two ways to specify the bounds:      1. Instance of `Bounds` class.     2. ``(min, max)`` pairs for each element in ``x``.  ",
                    "type": "Iterable, Bounds",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "args",
                    "value": "()",
                    "defaultValue": "()",
                    "description": "tuple, optional     Any additional fixed parameters needed to     completely specify the objective function. ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "eps",
                    "value": 0.0001,
                    "defaultValue": 0.0001,
                    "description": "float, optional     Minimal required difference of the objective function values     between the current best hyperrectangle and the next potentially     optimal hyperrectangle to be divided. In consequence, `eps` serves as a     tradeoff between local and global ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "maxfun",
                    "value": null,
                    "defaultValue": null,
                    "description": "int or None, optional     Approximate upper bound on objective function evaluations.     If `None`, will be automatically set to ``1000 * N`` where ``N``     represents the number of dimensions. Will be capped if necessary to     limit DIRECT's RAM usage to app. 1GiB. This will only occur for very     high dimensional problems and excessive `max_fun`. Default is `None`. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "maxiter",
                    "value": 1000,
                    "defaultValue": 1000,
                    "description": "int, optional     Maximum number of iterations. Default is 1000. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "locally_biased",
                    "value": true,
                    "defaultValue": true,
                    "description": "bool, optional     If `True` (default), use the locally biased variant of the     algorithm known as DIRECT_L. If `False`, use the original unbiased     DIRECT algorithm. For hard problems with many local minima,     `False` is recommended. ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "f_min",
                    "value": -Infinity,
                    "defaultValue": -Infinity,
                    "description": "float, optional     Function value of the global optimum. Set this value only if the     global optimum is known. Default is ``-np.inf``, so that this     termination criterion is deactivated. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "f_min_rtol",
                    "value": 0.0001,
                    "defaultValue": 0.0001,
                    "description": "float, optional     Terminate the optimization once the relative error between the     current best minimum `f` and the supplied global minimum `f_min`     is smaller than `f_min_rtol`. This parameter is only used if     `f_min` is also set. Default is 1e-4. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "vol_tol",
                    "value": 1e-16,
                    "defaultValue": 1e-16,
                    "description": "float, optional     Terminate the optimization once the volume of the hyperrectangle     containing the lowest function value is smaller than `vol_tol`     of the complete search space. Must lie between 0 and 1.     Default is 1e-16. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "len_tol",
                    "value": 1e-06,
                    "defaultValue": 1e-06,
                    "description": "float, optional     If `locally_biased=True`, terminate the optimization once half of     the normalized maximal side length of the hyperrectangle containing     the lowest function value is smaller than `len_tol`.     If `locally_biased=False`, terminate the optimization once half of     the normalized diagonal of the hyperrectangle containing the lowest     function value is smaller than `len_tol`. Must lie between 0 and 1.     Default is 1e-6. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "callback",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable, optional     A callback function with signature ``callback(xk)`` where ``xk``     represents the best function value found so far. ",
                    "type": "Callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._direct_py.direct",
                    "defaultValue": "scipy.optimize._direct_py.direct",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.dual_annealing",
            "description": "Find the global minimum of a function using Dual Annealing.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "3d80a1d3c067e236de52b7edb789c2345cd6a93d4414d830ffb2c1ce5c803aa7",
            "fields": [
                {
                    "name": "func",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable     The objective function to be minimized. Must be in the form     ``f(x, *args)``, where ``x`` is the argument in the form of a 1-D array     and ``args`` is a  tuple of any additional fixed parameters needed to     completely specify the function. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "bounds",
                    "value": null,
                    "defaultValue": null,
                    "description": "sequence or `Bounds`     Bounds for variables. There are two ways to specify the bounds:      1. Instance of `Bounds` class.     2. Sequence of ``(min, max)`` pairs for each element in `x`.  ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "args",
                    "value": "()",
                    "defaultValue": "()",
                    "description": "tuple, optional     Any additional fixed parameters needed to completely specify the     objective function. ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "maxiter",
                    "value": 1000,
                    "defaultValue": 1000,
                    "description": "int, optional     The maximum number of global search iterations. Default value is 1000. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "minimizer_kwargs",
                    "value": null,
                    "defaultValue": null,
                    "description": "dict, optional     Extra keyword arguments to be passed to the local minimizer     (`minimize`). Some important options could be:     ``method`` for the minimizer method to use and ``args`` for     objective function additional arguments. ",
                    "type": "dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "initial_temp",
                    "value": 5230.0,
                    "defaultValue": 5230.0,
                    "description": "float, optional     The initial temperature, use higher values to facilitates a wider     search of the energy landscape, allowing dual_annealing to escape     local minima that it is trapped in. Default value is 5230. Range is     (0.01, 5.e4]. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "restart_temp_ratio",
                    "value": 2e-05,
                    "defaultValue": 2e-05,
                    "description": "float, optional     During the annealing process, temperature is decreasing, when it     reaches ``initial_temp * restart_temp_ratio``, the reannealing process     is triggered. Default value of the ratio is 2e-5. Range is (0, 1). ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "visit",
                    "value": 2.62,
                    "defaultValue": 2.62,
                    "description": "float, optional     Parameter for visiting distribution. Default value is 2.62. Higher     values give the visiting distribution a heavier tail, this makes     the algorithm jump to a more distant region. The value range is (1, 3]. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "accept",
                    "value": -5.0,
                    "defaultValue": -5.0,
                    "description": "float, optional     Parameter for acceptance distribution. It is used to control the     probability of acceptance. The lower the acceptance parameter, the     smaller the probability of acceptance. Default value is -5.0 with     a range (-1e4, -5]. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "maxfun",
                    "value": 10000000.0,
                    "defaultValue": 10000000.0,
                    "description": "int, optional     Soft limit for the number of objective function calls. If the     algorithm is in the middle of a local search, this number will be     exceeded, the algorithm will stop just after the local search is     done. Default value is 1e7. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "seed",
                    "value": null,
                    "defaultValue": null,
                    "description": "{None, int, `numpy.random.Generator`,         `numpy.random.RandomState`}, optional      If `seed` is None (or `np.random`), the `numpy.random.RandomState`     singleton is used.     If `seed` is an int, a new ``RandomState`` instance is used,     seeded with `seed`.     If `seed` is already a ``Generator`` or ``RandomState`` instance then     that instance is used.     Specify `seed` for repeatable minimizations. The random numbers     generated with this seed only affect the visiting distribution function     and new coordinates generation. ",
                    "type": "{None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "no_local_search",
                    "value": false,
                    "defaultValue": false,
                    "description": "bool, optional     If `no_local_search` is set to True, a traditional Generalized     Simulated Annealing will be performed with no local search     strategy applied. ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "callback",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable, optional     A callback function with signature ``callback(x, f, context)``,     which will be called for all minima found.     ``x`` and ``f`` are the coordinates and function value of the     latest minimum found, and ``context`` has value in [0, 1, 2], with the     following meaning:          - ",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x0",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray, shape(n,), optional     Coordinates of a single N-D starting point. ",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "local_search_options",
                    "value": null,
                    "defaultValue": null,
                    "description": "dict, optional     Backwards compatible flag for `minimizer_kwargs`, only one of these     should be supplied.      .. deprecated:: 1.8.0         dual_annealing argument `local_search_options` is deprecated in         favor of `minimizer_kwargs` and will be removed in SciPy 1.10.0. ",
                    "type": "dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._dual_annealing.dual_annealing",
                    "defaultValue": "scipy.optimize._dual_annealing.dual_annealing",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.excitingmixing",
            "description": "Find a root of a function, using a tuned diagonal Jacobian approximation.\n    \n    The Jacobian matrix is diagonal and is tuned on each iteration.\n    \n    .. warning::\n    \n       This algorithm may be useful for specific problems, but whether\n       it will work may depend strongly on the problem.\n    \n    See Also\n    --------\n    root : Interface to root finding algorithms for multivariate\n           functions. See ``method=='excitingmixing'`` in particular.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "76a92f1c30da6ce45ad48689e57521b38c91b23d708ce322205a358d66269d20",
            "fields": [
                {
                    "name": "F",
                    "value": null,
                    "defaultValue": null,
                    "description": "function(x) -> f     Function whose root to find; should take and return an array-like     object. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "xin",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     Initial guess for the solution ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "iter",
                    "value": null,
                    "defaultValue": null,
                    "description": "int, optional     Number of iterations to make. If omitted (default), make as many     as required to meet tolerances. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "alpha",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Initial Jacobian approximation is (-1/alpha). ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "alphamax",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "float, optional     The entries of the diagonal Jacobian are kept in the range     ``[alpha, alphamax]``. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "verbose",
                    "value": false,
                    "defaultValue": false,
                    "description": "bool, optional     Print status to stdout on every iteration. ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "maxiter",
                    "value": null,
                    "defaultValue": null,
                    "description": "int, optional     Maximum number of iterations to make. If more are needed to     meet convergence, `NoConvergence` is raised. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "f_tol",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Absolute tolerance (in max-norm) for the residual.     If omitted, default is 6e-6. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "f_rtol",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Relative tolerance for the residual. If omitted, not used. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x_tol",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Absolute minimum step size, as determined from the Jacobian     approximation. If the step size is smaller than this, optimization     is terminated as successful. If omitted, not used. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x_rtol",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Relative minimum step size. If omitted, not used. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "tol_norm",
                    "value": null,
                    "defaultValue": null,
                    "description": "function(vector) -> scalar, optional     Norm to use in convergence check. Default is the maximum norm. ",
                    "type": "vector",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "line_search",
                    "value": "armijo",
                    "defaultValue": "armijo",
                    "description": "{None, 'armijo' (default), 'wolfe'}, optional     Which type of a line search to use to determine the step size in the     direction given by the Jacobian approximation. Defaults to 'armijo'. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "callback",
                    "value": null,
                    "defaultValue": null,
                    "description": "function, optional     Optional callback function. It is called on every iteration as     ``callback(x, f)`` where `x` is the current solution and `f`     the corresponding residual. ",
                    "type": "function",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "kw",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._nonlin.excitingmixing",
                    "defaultValue": "scipy.optimize._nonlin.excitingmixing",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.fixed_point",
            "description": "Find a fixed point of the function.\n    \n    Given a function of one or more variables and a starting point, find a\n    fixed point of the function: i.e., where ``func(x0) == x0``.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5fe9a128203b07318d6f3a5cde5edf1d36341eab3c734d26668160bfb31d9164",
            "fields": [
                {
                    "name": "func",
                    "value": null,
                    "defaultValue": null,
                    "description": "function     Function to evaluate. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x0",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     Fixed point of function. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "args",
                    "value": "()",
                    "defaultValue": "()",
                    "description": "tuple, optional     Extra arguments to `func`. ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "xtol",
                    "value": 1e-08,
                    "defaultValue": 1e-08,
                    "description": "float, optional     Convergence tolerance, defaults to 1e-08. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "maxiter",
                    "value": 500,
                    "defaultValue": 500,
                    "description": "int, optional     Maximum number of iterations, defaults to 500. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "method",
                    "value": "del2",
                    "defaultValue": "del2",
                    "description": "{\"del2\", \"iteration\"}, optional     Method of finding the fixed-point, defaults to \"del2\",     which uses Steffensen's Method with Aitken's ``Del^2``     convergence acceleration [1]_. The \"iteration\" method simply iterates     the function until convergence is detected, without attempting to     accelerate the convergence.  References ---------- .. [1] Burden, Faires, \"Numerical Analysis\", 5th edition, pg. 80  Examples -------- >>> from scipy import optimize >>> def func(x, c1, c2): ...    return np.sqrt(c1/(x+c2)) >>> c1 = np.array([10,12.]) >>> c2 = np.array([3, 5.]) >>> optimize.fixed_point(func, [1.2, 1.3], args=(c1,c2)) array([ 1.4920333 ,  1.37228132])",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._minpack_py.fixed_point",
                    "defaultValue": "scipy.optimize._minpack_py.fixed_point",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.fmin",
            "description": "Minimize a function using the downhill simplex algorithm.\n    \n    This algorithm only uses function values, not derivatives or second\n    derivatives.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e5d64e013e3c6fe45ed8a4b53e3140f7a6198088f1da7e7ab80b03a3f3a16402",
            "fields": [
                {
                    "name": "func",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable func(x,*args)     The objective function to be minimized. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x0",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray     Initial guess. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "args",
                    "value": "()",
                    "defaultValue": "()",
                    "description": "tuple, optional     Extra arguments passed to func, i.e., ``f(x,*args)``. ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "xtol",
                    "value": 0.0001,
                    "defaultValue": 0.0001,
                    "description": "float, optional     Absolute error in xopt between iterations that is acceptable for     convergence. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "ftol",
                    "value": 0.0001,
                    "defaultValue": 0.0001,
                    "description": "number, optional     Absolute error in func(xopt) between iterations that is acceptable for     convergence. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "maxiter",
                    "value": null,
                    "defaultValue": null,
                    "description": "int, optional     Maximum number of iterations to perform. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "maxfun",
                    "value": null,
                    "defaultValue": null,
                    "description": "number, optional     Maximum number of function evaluations to make. ",
                    "type": "number",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "full_output",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "bool, optional     Set to True if fopt and warnflag outputs are desired. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "disp",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "bool, optional     Set to True to print convergence messages. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "retall",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "bool, optional     Set to True to return list of solutions at each iteration. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "callback",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable, optional     Called after each iteration, as callback(xk), where xk is the     current parameter vector. ",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "initial_simplex",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like of shape (N + 1, N), optional     Initial simplex. If given, overrides `x0`.     ``initial_simplex[j,:]`` should contain the coordinates of     the jth vertex of the ``N+1`` vertices in the simplex, where     ``N`` is the dimension. ",
                    "type": "array_like",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._optimize.fmin",
                    "defaultValue": "scipy.optimize._optimize.fmin",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.fmin_bfgs",
            "description": "Minimize a function using the BFGS algorithm.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "bee7fe9d8e0b1251ba3cf44fa3e914787fcd9d2bb314cf332b642694e1d20f86",
            "fields": [
                {
                    "name": "f",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable ``f(x,*args)``     Objective function to be minimized. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x0",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray     Initial guess. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "fprime",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable ``f'(x,*args)``, optional     Gradient of f. ",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "args",
                    "value": "()",
                    "defaultValue": "()",
                    "description": "tuple, optional     Extra arguments passed to f and fprime. ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "gtol",
                    "value": 1e-05,
                    "defaultValue": 1e-05,
                    "description": "float, optional     Gradient norm must be less than `gtol` before successful termination. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "norm",
                    "value": "inf",
                    "defaultValue": "inf",
                    "description": "float, optional     Order of norm (Inf is max, -Inf is min) ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "epsilon",
                    "value": 1.4901161193847656e-08,
                    "defaultValue": 1.4901161193847656e-08,
                    "description": "int or ndarray, optional     If `fprime` is approximated, use this value for the step size. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "maxiter",
                    "value": null,
                    "defaultValue": null,
                    "description": "int, optional     Maximum number of iterations to perform. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "full_output",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "bool, optional     If True, return ``fopt``, ``func_calls``, ``grad_calls``, and     ``warnflag`` in addition to ``xopt``. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "disp",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "bool, optional     Print convergence message if True. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "retall",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "bool, optional     Return a list of results at each iteration if True. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "callback",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable, optional     An optional user-supplied function to call after each     iteration. Called as ``callback(xk)``, where ``xk`` is the     current parameter vector. ",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._optimize.fmin_bfgs",
                    "defaultValue": "scipy.optimize._optimize.fmin_bfgs",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.fmin_cg",
            "description": "Minimize a function using a nonlinear conjugate gradient algorithm.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5e6a0b83a500385d99f8c24822fddf4480ee27350ffacea6238958bd12c52a5e",
            "fields": [
                {
                    "name": "f",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable, ``f(x, *args)``     Objective function to be minimized. Here `x` must be a 1-D array of     the variables that are to be changed in the search for a minimum, and     `args` are the other (fixed) parameters of `f`. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x0",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray     A user-supplied initial estimate of `xopt`, the optimal value of `x`.     It must be a 1-D array of values. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "fprime",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable, ``fprime(x, *args)``, optional     A function that returns the gradient of `f` at `x`. Here `x` and `args`     are as described above for `f`. The returned value must be a 1-D array.     Defaults to None, in which case the gradient is approximated     numerically (see `epsilon`, below). ",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "args",
                    "value": "()",
                    "defaultValue": "()",
                    "description": "tuple, optional     Parameter values passed to `f` and `fprime`. Must be supplied whenever     additional fixed parameters are needed to completely specify the     functions `f` and `fprime`. ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "gtol",
                    "value": 1e-05,
                    "defaultValue": 1e-05,
                    "description": "float, optional     Stop when the norm of the gradient is less than `gtol`. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "norm",
                    "value": "inf",
                    "defaultValue": "inf",
                    "description": "float, optional     Order to use for the norm of the gradient     (``-np.Inf`` is min, ``np.Inf`` is max). ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "epsilon",
                    "value": 1.4901161193847656e-08,
                    "defaultValue": 1.4901161193847656e-08,
                    "description": "float or ndarray, optional     Step size(s) to use when `fprime` is approximated numerically. Can be a     scalar or a 1-D array. Defaults to ``sqrt(eps)``, with eps the     floating point machine precision.  Usually ``sqrt(eps)`` is about     1.5e-8. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "maxiter",
                    "value": null,
                    "defaultValue": null,
                    "description": "int, optional     Maximum number of iterations to perform. Default is ``200 * len(x0)``. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "full_output",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "bool, optional     If True, return `fopt`, `func_calls`, `grad_calls`, and `warnflag` in     addition to `xopt`.  See the Returns section below for additional     information on optional return values. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "disp",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "bool, optional     If True, return a convergence message, followed by `xopt`. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "retall",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "bool, optional     If True, add to the returned values the results of each iteration. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "callback",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable, optional     An optional user-supplied function, called after each iteration.     Called as ``callback(xk)``, where ``xk`` is the current value of `x0`. ",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._optimize.fmin_cg",
                    "defaultValue": "scipy.optimize._optimize.fmin_cg",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.fmin_cobyla",
            "description": "Minimize a function using the Constrained Optimization By Linear\n    Approximation (COBYLA) method. This method wraps a FORTRAN\n    implementation of the algorithm.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "40663815e54c05a8e285cdba605ff2fde7bf9008c38608ae545fcedfcb0bb349",
            "fields": [
                {
                    "name": "func",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable     Function to minimize. In the form func(x, \\*args). ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x0",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray     Initial guess. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "cons",
                    "value": null,
                    "defaultValue": null,
                    "description": "sequence     Constraint functions; must all be ``>=0`` (a single function     if only 1 constraint). Each function takes the parameters `x`     as its first argument, and it can return either a single number or     an array or list of numbers. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "args",
                    "value": "()",
                    "defaultValue": "()",
                    "description": "tuple, optional     Extra arguments to pass to function. ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "consargs",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "tuple, optional     Extra arguments to pass to constraint functions (default of None means     use same extra arguments as those passed to func).     Use ``()`` for no extra arguments. ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "rhobeg",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "float, optional     Reasonable initial changes to the variables. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "rhoend",
                    "value": 0.0001,
                    "defaultValue": 0.0001,
                    "description": "float, optional     Final accuracy in the optimization (not precisely guaranteed). This     is a lower bound on the size of the trust region. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "maxfun",
                    "value": 1000,
                    "defaultValue": 1000,
                    "description": "int, optional     Maximum number of function evaluations. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "disp",
                    "value": null,
                    "defaultValue": null,
                    "description": "{0, 1, 2, 3}, optional     Controls the frequency of output; 0 implies no output. ",
                    "type": "{0",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "catol",
                    "value": 0.0002,
                    "defaultValue": 0.0002,
                    "description": "float, optional     Absolute tolerance for constraint violations. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "callback",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable, optional     Called after each iteration, as ``callback(x)``, where ``x`` is the     current parameter vector. ",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._cobyla_py.fmin_cobyla",
                    "defaultValue": "scipy.optimize._cobyla_py.fmin_cobyla",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.fmin_l_bfgs_b",
            "description": "Minimize a function func using the L-BFGS-B algorithm.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1f020c498c61b9540c187155c0024a0119e7580b10d8b39ba2272e3df94a20eb",
            "fields": [
                {
                    "name": "func",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable f(x,*args)     Function to minimize. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x0",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray     Initial guess. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "fprime",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable fprime(x,*args), optional     The gradient of `func`. If None, then `func` returns the function     value and the gradient (``f, g = func(x, *args)``), unless     `approx_grad` is True in which case `func` returns only ``f``. ",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "args",
                    "value": "()",
                    "defaultValue": "()",
                    "description": "sequence, optional     Arguments to pass to `func` and `fprime`. ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "approx_grad",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "bool, optional     Whether to approximate the gradient numerically (in which case     `func` returns only the function value). ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "bounds",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "list, optional     ``(min, max)`` pairs for each element in ``x``, defining     the bounds on that parameter. Use None or +-inf for one of ``min`` or     ``max`` when there is no bound in that direction. ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "m",
                    "value": 10,
                    "defaultValue": 10,
                    "description": "int, optional     The maximum number of variable metric corrections     used to define the limited memory matrix. (The limited memory BFGS     method does not store the full hessian but uses this many terms in an     approximation to it.) ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "factr",
                    "value": 10000000.0,
                    "defaultValue": 10000000.0,
                    "description": "float, optional     The iteration stops when     ``(f^k - f^{k+1})/max{|f^k|,|f^{k+1}|,1} <= factr * eps``,     where ``eps`` is the machine precision, which is automatically     generated by the code. Typical values for `factr` ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "pgtol",
                    "value": 1e-05,
                    "defaultValue": 1e-05,
                    "description": "float, optional     The iteration will stop when     ``max{|proj g_i | i = 1, ..., n} <= pgtol``     where ``pg_i`` is the i-th component of the projected gradient. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "epsilon",
                    "value": 1e-08,
                    "defaultValue": 1e-08,
                    "description": "float, optional     Step size used when `approx_grad` is True, for numerically     calculating the gradient ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "iprint",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "int, optional     Controls the frequency of output. ``iprint < 0`` means no output;     ``iprint = 0``    print only one line at the last iteration;     ``0 < iprint < 99`` print also f and ``|proj g|`` every iprint iterations;     ``iprint = 99``   print details of every iteration except n-vectors;     ``iprint = 100``  print also the changes of active set and final x;     ``iprint > 100``  print details of every iteration including x and g. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "maxfun",
                    "value": 15000,
                    "defaultValue": 15000,
                    "description": "int, optional     Maximum number of function evaluations. Note that this function     may violate the limit because of evaluating gradients by numerical     differentiation. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "maxiter",
                    "value": 15000,
                    "defaultValue": 15000,
                    "description": "int, optional     Maximum number of iterations. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "disp",
                    "value": null,
                    "defaultValue": null,
                    "description": "int, optional     If zero, then no output. If a positive number, then this over-rides     `iprint` (i.e., `iprint` gets the value of `disp`). ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "callback",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable, optional     Called after each iteration, as ``callback(xk)``, where ``xk`` is the     current parameter vector. ",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "maxls",
                    "value": 20,
                    "defaultValue": 20,
                    "description": "int, optional     Maximum number of line search steps (per iteration). Default is 20. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._lbfgsb_py.fmin_l_bfgs_b",
                    "defaultValue": "scipy.optimize._lbfgsb_py.fmin_l_bfgs_b",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.fmin_ncg",
            "description": "Unconstrained minimization of a function using the Newton-CG method.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "10851008b8d52b05f855ebf29de18f130cc2a372b814e8d0735d07083dad75f4",
            "fields": [
                {
                    "name": "f",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable ``f(x, *args)``     Objective function to be minimized. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x0",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray     Initial guess. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "fprime",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable ``f'(x, *args)``     Gradient of f. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "fhess_p",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable ``fhess_p(x, p, *args)``, optional     Function which computes the Hessian of f times an     arbitrary vector, p. ",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "fhess",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable ``fhess(x, *args)``, optional     Function to compute the Hessian matrix of f. ",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "args",
                    "value": "()",
                    "defaultValue": "()",
                    "description": "tuple, optional     Extra arguments passed to f, fprime, fhess_p, and fhess     (the same set of extra arguments is supplied to all of     these functions). ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "avextol",
                    "value": 1e-05,
                    "defaultValue": 1e-05,
                    "description": "float, optional     Convergence is assumed when the average relative error in     the minimizer falls below this amount. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "epsilon",
                    "value": 1.4901161193847656e-08,
                    "defaultValue": 1.4901161193847656e-08,
                    "description": "float or ndarray, optional     If fhess is approximated, use this value for the step size. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "maxiter",
                    "value": null,
                    "defaultValue": null,
                    "description": "int, optional     Maximum number of iterations to perform. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "full_output",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "bool, optional     If True, return the optional outputs. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "disp",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "bool, optional     If True, print convergence message. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "retall",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "bool, optional     If True, return a list of results at each iteration. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "callback",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable, optional     An optional user-supplied function which is called after     each iteration. Called as callback(xk), where xk is the     current parameter vector. ",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._optimize.fmin_ncg",
                    "defaultValue": "scipy.optimize._optimize.fmin_ncg",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.fmin_powell",
            "description": "Minimize a function using modified Powell's method.\n    \n    This method only uses function values, not derivatives.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "36129df8ec854e79839ac6dbae9e5b13a026c22766360dbc3cb2611aa9f1910c",
            "fields": [
                {
                    "name": "func",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable f(x,*args)     Objective function to be minimized. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x0",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray     Initial guess. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "args",
                    "value": "()",
                    "defaultValue": "()",
                    "description": "tuple, optional     Extra arguments passed to func. ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "xtol",
                    "value": 0.0001,
                    "defaultValue": 0.0001,
                    "description": "float, optional     Line-search error tolerance. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "ftol",
                    "value": 0.0001,
                    "defaultValue": 0.0001,
                    "description": "float, optional     Relative error in ``func(xopt)`` acceptable for convergence. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "maxiter",
                    "value": null,
                    "defaultValue": null,
                    "description": "int, optional     Maximum number of iterations to perform. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "maxfun",
                    "value": null,
                    "defaultValue": null,
                    "description": "int, optional     Maximum number of function evaluations to make. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "full_output",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "bool, optional     If True, ``fopt``, ``xi``, ``direc``, ``iter``, ``funcalls``, and     ``warnflag`` are returned. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "disp",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "bool, optional     If True, print convergence messages. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "retall",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "bool, optional     If True, return a list of the solution at each iteration. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "callback",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable, optional     An optional user-supplied function, called after each     iteration.  Called as ``callback(xk)``, where ``xk`` is the     current parameter vector. ",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "direc",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray, optional     Initial fitting step and parameter order set as an (N, N) array, where N     is the number of fitting parameters in `x0`. Defaults to step size 1.0     fitting all parameters simultaneously (``np.eye((N, N))``). To     prevent initial consideration of values in a step or to change initial     step size, set to 0 or desired step size in the Jth position in the Mth     block, where J is the position in `x0` and M is the desired evaluation     step, with steps being evaluated in index order. Step size and ordering     will change freely as minimization proceeds. ",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._optimize.fmin_powell",
                    "defaultValue": "scipy.optimize._optimize.fmin_powell",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.fmin_slsqp",
            "description": "Minimize a function using Sequential Least Squares Programming\n    \n    Python interface function for the SLSQP Optimization subroutine\n    originally implemented by Dieter Kraft.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "13d08173d90df5f820a68af3b967f8e4e134ce8179431b5570c7fecf338e7967",
            "fields": [
                {
                    "name": "func",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable f(x,*args)     Objective function.  Must return a scalar. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x0",
                    "value": null,
                    "defaultValue": null,
                    "description": "1-D ndarray of float     Initial guess for the independent variable(s). ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "eqcons",
                    "value": "()",
                    "defaultValue": "()",
                    "description": "list, optional     A list of functions of length n such that     eqcons[j](x,*args) == 0.0 in a successfully optimized     problem. ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "f_eqcons",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable f(x,*args), optional     Returns a 1-D array in which each element must equal 0.0 in a     successfully optimized problem. If f_eqcons is specified,     eqcons is ignored. ",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "ieqcons",
                    "value": "()",
                    "defaultValue": "()",
                    "description": "list, optional     A list of functions of length n such that     ieqcons[j](x,*args) >= 0.0 in a successfully optimized     problem. ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "f_ieqcons",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable f(x,*args), optional     Returns a 1-D ndarray in which each element must be greater or     equal to 0.0 in a successfully optimized problem. If     f_ieqcons is specified, ieqcons is ignored. ",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "bounds",
                    "value": "()",
                    "defaultValue": "()",
                    "description": "list, optional     A list of tuples specifying the lower and upper bound     for each independent variable [(xl0, xu0),(xl1, xu1),...]     Infinite values will be interpreted as large floating values. ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "fprime",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable `f(x,*args)`, optional     A function that evaluates the partial derivatives of func. ",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "fprime_eqcons",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable `f(x,*args)`, optional     A function of the form `f(x, *args)` that returns the m by n     array of equality constraint normals. If not provided,     the normals will be approximated. The array returned by     fprime_eqcons should be sized as ( len(eqcons), len(x0) ). ",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "fprime_ieqcons",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable `f(x,*args)`, optional     A function of the form `f(x, *args)` that returns the m by n     array of inequality constraint normals. If not provided,     the normals will be approximated. The array returned by     fprime_ieqcons should be sized as ( len(ieqcons), len(x0) ). ",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "args",
                    "value": "()",
                    "defaultValue": "()",
                    "description": "sequence, optional     Additional arguments passed to func and fprime. ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "iter",
                    "value": 100,
                    "defaultValue": 100,
                    "description": "int, optional     The maximum number of iterations. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "acc",
                    "value": 1e-06,
                    "defaultValue": 1e-06,
                    "description": "float, optional     Requested accuracy. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "iprint",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "int, optional     The verbosity of fmin_slsqp :      * iprint <= ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "disp",
                    "value": null,
                    "defaultValue": null,
                    "description": "int, optional     Overrides the iprint interface (preferred). ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "full_output",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "bool, optional     If False, return only the minimizer of func (default).     Otherwise, output final objective function and summary     information. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "epsilon",
                    "value": 1.4901161193847656e-08,
                    "defaultValue": 1.4901161193847656e-08,
                    "description": "float, optional     The step size for finite-difference derivative estimates. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "callback",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable, optional     Called after each iteration, as ``callback(x)``, where ``x`` is the     current parameter vector. ",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._slsqp_py.fmin_slsqp",
                    "defaultValue": "scipy.optimize._slsqp_py.fmin_slsqp",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.fmin_tnc",
            "description": "Minimize a function with variables subject to bounds, using\n    gradient information in a truncated Newton algorithm. This\n    method wraps a C implementation of the algorithm.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "56f30074309830b04797a5d366c8f09198e791905093568db2724508add79c26",
            "fields": [
                {
                    "name": "func",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable ``func(x, *args)``     Function to minimize.  Must do one of:      1. Return f and g, where f is the value of the function and g its        gradient (a list of floats).      2. Return the function value but supply gradient function        separately as `fprime`.      3. Return the function value and set ``approx_grad=True``.      If the function returns None, the minimization     is aborted. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x0",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     Initial estimate of minimum. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "fprime",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable ``fprime(x, *args)``, optional     Gradient of `func`. If None, then either `func` must return the     function value and the gradient (``f,g = func(x, *args)``)     or `approx_grad` must be True. ",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "args",
                    "value": "()",
                    "defaultValue": "()",
                    "description": "tuple, optional     Arguments to pass to function. ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "approx_grad",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "bool, optional     If true, approximate the gradient numerically. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "bounds",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "list, optional     (min, max) pairs for each element in x0, defining the     bounds on that parameter. Use None or +/-inf for one of     min or max when there is no bound in that direction. ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "epsilon",
                    "value": 1e-08,
                    "defaultValue": 1e-08,
                    "description": "float, optional     Used if approx_grad is True. The stepsize in a finite     difference approximation for fprime. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "scale",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like, optional     Scaling factors to apply to each variable. If None, the     factors are up-low for interval bounded variables and     1+|x| for the others. Defaults to None. ",
                    "type": "array_like",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "offset",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like, optional     Value to subtract from each variable. If None, the     offsets are (up+low)/2 for interval bounded variables     and x for the others. ",
                    "type": "array_like",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "messages",
                    "value": 15,
                    "defaultValue": 15,
                    "description": "int, optional     Bit mask used to select messages display during     minimization values defined in the MSGS dict. Defaults to     MGS_ALL. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "maxCGit",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "int, optional     Maximum number of hessian*vector evaluations per main     iteration. If maxCGit == 0, the direction chosen is     -gradient if maxCGit < 0, maxCGit is set to     max(1,min(50,n/2)). Defaults to -1. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "maxfun",
                    "value": null,
                    "defaultValue": null,
                    "description": "int, optional     Maximum number of function evaluation. If None, maxfun is     set to max(100, 10*len(x0)). Defaults to None. Note that this function     may violate the limit because of evaluating gradients by numerical     differentiation. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "eta",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "float, optional     Severity of the line search. If < 0 or > 1, set to 0.25.     Defaults to -1. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "stepmx",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "float, optional     Maximum step for the line search. May be increased during     call. If too small, it will be set to 10.0. Defaults to 0. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "accuracy",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "float, optional     Relative precision for finite difference calculations. If     <= machine_precision, set to sqrt(machine_precision).     Defaults to 0. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "fmin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "float, optional     Minimum function value estimate. Defaults to 0. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "ftol",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "float, optional     Precision goal for the value of f in the stopping criterion.     If ftol < 0.0, ftol is set to 0.0 defaults to -1. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "xtol",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "float, optional     Precision goal for the value of x in the stopping     criterion (after applying x scaling factors). If xtol <     0.0, xtol is set to sqrt(machine_precision). Defaults to     -1. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "pgtol",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "float, optional     Precision goal for the value of the projected gradient in     the stopping criterion (after applying x scaling factors).     If pgtol < 0.0, pgtol is set to 1e-2 * sqrt(accuracy).     Setting it to 0.0 is not recommended. Defaults to -1. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "rescale",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "float, optional     Scaling factor (in log10) used to trigger f value     rescaling. If 0, rescale at each iteration. If a large     value, never rescale. If < 0, rescale is set to 1.3. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "disp",
                    "value": null,
                    "defaultValue": null,
                    "description": "int, optional     Integer interface to messages. 0 = no message, 5 = all messages ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "callback",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable, optional     Called after each iteration, as callback(xk), where xk is the     current parameter vector. ",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._tnc.fmin_tnc",
                    "defaultValue": "scipy.optimize._tnc.fmin_tnc",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.fminbound",
            "description": "Bounded minimization for scalar functions.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "89be52b0fbb70b1ae0316963f10a8f324fd1d7ba94afca4209950d14d3743dd4",
            "fields": [
                {
                    "name": "func",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable f(x,*args)     Objective function to be minimized (must accept and return scalars). x1, ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x1",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x2",
                    "value": null,
                    "defaultValue": null,
                    "description": "float or array scalar     The optimization bounds. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "args",
                    "value": "()",
                    "defaultValue": "()",
                    "description": "tuple, optional     Extra arguments passed to function. ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "xtol",
                    "value": 1e-05,
                    "defaultValue": 1e-05,
                    "description": "float, optional     The convergence tolerance. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "maxfun",
                    "value": 500,
                    "defaultValue": 500,
                    "description": "int, optional     Maximum number of function evaluations allowed. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "full_output",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "bool, optional     If True, return optional outputs. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "disp",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "int, optional     If non-zero, print messages.         ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._optimize.fminbound",
                    "defaultValue": "scipy.optimize._optimize.fminbound",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.fsolve",
            "description": "Find the roots of a function.\n    \n    Return the roots of the (non-linear) equations defined by\n    ``func(x) = 0`` given a starting estimate.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9b0a2c3bba71337c779977529e1125146b42148427c8b3126684b7e909f9986b",
            "fields": [
                {
                    "name": "func",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable ``f(x, *args)``     A function that takes at least one (possibly vector) argument,     and returns a value of the same length. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x0",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray     The starting estimate for the roots of ``func(x) = 0``. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "args",
                    "value": "()",
                    "defaultValue": "()",
                    "description": "tuple, optional     Any extra arguments to `func`. ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "fprime",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable ``f(x, *args)``, optional     A function to compute the Jacobian of `func` with derivatives     across the rows. By default, the Jacobian will be estimated. ",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "full_output",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "bool, optional     If True, return optional outputs. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "col_deriv",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "bool, optional     Specify whether the Jacobian function computes derivatives down     the columns (faster, because there is no transpose operation). ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "xtol",
                    "value": 1.49012e-08,
                    "defaultValue": 1.49012e-08,
                    "description": "float, optional     The calculation will terminate if the relative error between two     consecutive iterates is at most `xtol`. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "maxfev",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "int, optional     The maximum number of calls to the function. If zero, then     ``100*(N+1)`` is the maximum where N is the number of elements     in `x0`. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "band",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "tuple, optional     If set to a two-sequence containing the number of sub- and     super-diagonals within the band of the Jacobi matrix, the     Jacobi matrix is considered banded (only for ``fprime=None``). ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "epsfcn",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     A suitable step length for the forward-difference     approximation of the Jacobian (for ``fprime=None``). If     `epsfcn` is less than the machine precision, it is assumed     that the relative errors in the functions are of the order of     the machine precision. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "factor",
                    "value": 100,
                    "defaultValue": 100,
                    "description": "float, optional     A parameter determining the initial step bound     (``factor * || diag * x||``). Should be in the interval     ``(0.1, 100)``. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "diag",
                    "value": null,
                    "defaultValue": null,
                    "description": "sequence, optional     N positive entries that serve as a scale factors for the     variables. ",
                    "type": "sequence",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._minpack_py.fsolve",
                    "defaultValue": "scipy.optimize._minpack_py.fsolve",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.golden",
            "description": "Return the minimum of a function of one variable using golden section\n    method.\n    \n    Given a function of one variable and a possible bracketing interval,\n    return the minimum of the function isolated to a fractional precision of\n    tol.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7eea20dcb499698d606cca598c2dce7019d3d7189aa999a62d2c63459eb4cb9b",
            "fields": [
                {
                    "name": "func",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable func(x,*args)     Objective function to minimize. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "args",
                    "value": "()",
                    "defaultValue": "()",
                    "description": "tuple, optional     Additional arguments (if present), passed to func. ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "brack",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "tuple, optional     Triple (a,b,c), where (a<b<c) and func(b) <     func(a),func(c). If bracket consists of two numbers (a,     c), then they are assumed to be a starting interval for a     downhill bracket search (see `bracket`); it doesn't always     mean that obtained solution will satisfy a<=x<=c. ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "tol",
                    "value": 1.4901161193847656e-08,
                    "defaultValue": 1.4901161193847656e-08,
                    "description": "float, optional     x tolerance stop criterion ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "full_output",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "bool, optional     If True, return optional outputs. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "maxiter",
                    "value": 5000,
                    "defaultValue": 5000,
                    "description": "int     Maximum number of iterations to perform.  See also -------- ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._optimize.golden",
                    "defaultValue": "scipy.optimize._optimize.golden",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.least_squares",
            "description": "Solve a nonlinear least-squares problem with bounds on the variables.\n    \n    Given the residuals f(x) (an m-D real function of n real\n    variables) and the loss function rho(s) (a scalar function), `least_squares`\n    finds a local minimum of the cost function F(x)::\n    \n        minimize F(x) = 0.5 * sum(rho(f_i(x)**2), i = 0, ..., m - 1)\n        subject to lb <= x <= ub\n    \n    The purpose of the loss function rho(s) is to reduce the influence of\n    outliers on the solution.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d02f10d27d9a7f8925e586fa07083a656bb4ba4f64d283f0029249a7bd1fccaa",
            "fields": [
                {
                    "name": "fun",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable     Function which computes the vector of residuals, with the signature     ``fun(x, *args, **kwargs)``, i.e., the minimization proceeds with     respect to its first argument. The argument ``x`` passed to this     function is an ndarray of shape (n,) (never a scalar, even for n=1).     It must allocate and return a 1-D array_like of shape (m,) or a scalar.     If the argument ``x`` is complex or the function ``fun`` returns     complex residuals, it must be wrapped in a real function of real     arguments, as shown at the end of the Examples section. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x0",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like with shape (n,) or float     Initial guess on independent variables. If float, it will be treated     as a 1-D array with one element. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "jac",
                    "value": "2-point",
                    "defaultValue": "2-point",
                    "description": "{'2-point', '3-point', 'cs', callable}, optional     Method of computing the Jacobian matrix (an m-by-n matrix, where     element (i, j) is the partial derivative of f[i] with respect to     x[j]). The keywords select a finite difference scheme for numerical     estimation. The scheme '3-point' is more accurate, but requires     twice as many operations as '2-point' (default). The scheme 'cs'     uses complex steps, and while potentially the most accurate, it is     applicable only when `fun` correctly handles complex inputs and     can be analytically continued to the complex plane. Method 'lm'     always uses the '2-point' scheme. If callable, it is used as     ``jac(x, *args, **kwargs)`` and should return a good approximation     (or the exact value) for the Jacobian as an array_like (np.atleast_2d     is applied), a sparse matrix (csr_matrix preferred for performance) or     a `scipy.sparse.linalg.LinearOperator`. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "bounds",
                    "value": "(-inf, inf)",
                    "defaultValue": "(-inf, inf)",
                    "description": "2-tuple of array_like, optional     Lower and upper bounds on independent variables. Defaults to no bounds.     Each array must match the size of `x0` or be a scalar, in the latter     case a bound will be the same for all variables. Use ``np.inf`` with     an appropriate sign to disable bounds on all or some variables. ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "method",
                    "value": "trf",
                    "defaultValue": "trf",
                    "description": "{'trf', 'dogbox', 'lm'}, optional     Algorithm to perform minimization.          * 'trf' : Trust Region Reflective algorithm, particularly suitable           for large sparse problems with bounds. Generally robust method.         * 'dogbox' : dogleg algorithm with rectangular trust regions,           typical use case is small problems with bounds. Not recommended           for problems with rank-deficient Jacobian.         * 'lm' : Levenberg-Marquardt algorithm as implemented in MINPACK.           Doesn't handle bounds and sparse Jacobians. Usually the most           efficient method for small unconstrained problems.      Default is 'trf'. See Notes for more information. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "ftol",
                    "value": 1e-08,
                    "defaultValue": 1e-08,
                    "description": "float or None, optional     Tolerance for termination by the change of the cost function. Default     is 1e-8. The optimization process is stopped when ``dF < ftol * F``,     and there was an adequate agreement between a local quadratic model and     the true model in the last step.      If None and 'method' is not 'lm', the termination by this condition is     disabled. If 'method' is 'lm', this tolerance must be higher than     machine epsilon. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "xtol",
                    "value": 1e-08,
                    "defaultValue": 1e-08,
                    "description": "float or None, optional     Tolerance for termination by the change of the independent variables.     Default is 1e-8. The exact condition depends on the `method` used:          * For 'trf' and 'dogbox' : ``norm(dx) < xtol * (xtol + norm(x))``.         * For 'lm' : ``Delta < xtol * norm(xs)``, where ``Delta`` is           a trust-region radius and ``xs`` is the value of ``x``           scaled according to `x_scale` parameter (see below).      If None and 'method' is not 'lm', the termination by this condition is     disabled. If 'method' is 'lm', this tolerance must be higher than     machine epsilon. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "gtol",
                    "value": 1e-08,
                    "defaultValue": 1e-08,
                    "description": "float or None, optional     Tolerance for termination by the norm of the gradient. Default is 1e-8.     The exact condition depends on a `method` used:          * For 'trf' : ``norm(g_scaled, ord=np.inf) < gtol``, where           ``g_scaled`` is the value of the gradient scaled to account for           the presence of the bounds [STIR]_.         * For 'dogbox' : ``norm(g_free, ord=np.inf) < gtol``, where           ``g_free`` is the gradient with respect to the variables which           are not in the optimal state on the boundary.         * For 'lm' : the maximum absolute value of the cosine of angles           between columns of the Jacobian and the residual vector is less           than `gtol`, or the residual vector is zero.      If None and 'method' is not 'lm', the termination by this condition is     disabled. If 'method' is 'lm', this tolerance must be higher than     machine epsilon. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x_scale",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "array_like or 'jac', optional     Characteristic scale of each variable. Setting `x_scale` is equivalent     to reformulating the problem in scaled variables ``xs = x / x_scale``.     An alternative view is that the size of a trust region along jth     dimension is proportional to ``x_scale[j]``. Improved convergence may     be achieved by setting `x_scale` such that a step of a given size     along any of the scaled variables has a similar effect on the cost     function. If set to 'jac', the scale is iteratively updated using the     inverse norms of the columns of the Jacobian matrix (as described in     [JJMore]_). ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "loss",
                    "value": "linear",
                    "defaultValue": "linear",
                    "description": "str or callable, optional     Determines the loss function. The following keyword values are allowed:          * 'linear' (default) : ``rho(z) = z``. Gives a standard           least-squares problem.         * 'soft_l1' : ``rho(z) = 2 * ((1 + z)**0.5 - 1)``. The smooth           approximation of l1 (absolute value) loss. Usually a good           choice for robust least squares.         * 'huber' : ``rho(z) = z if z <= 1 else 2*z**0.5 - 1``. Works           similarly to 'soft_l1'.         * 'cauchy' : ``rho(z) = ln(1 + z)``. Severely weakens outliers           influence, but may cause difficulties in optimization process.         * 'arctan' : ``rho(z) = arctan(z)``. Limits a maximum loss on           a single residual, has properties similar to 'cauchy'.      If callable, it must take a 1-D ndarray ``z=f**2`` and return an     array_like with shape (3, m) where row 0 contains function values,     row 1 contains first derivatives and row 2 contains second     derivatives. Method 'lm' supports only 'linear' loss. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "f_scale",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "float, optional     Value of soft margin between inlier and outlier residuals, default     is 1.0. The loss function is evaluated as follows     ``rho_(f**2) = C**2 * rho(f**2 / C**2)``, where ``C`` is `f_scale`,     and ``rho`` is determined by `loss` parameter. This parameter has     no effect with ``loss='linear'``, but for other `loss` values it is     of crucial importance. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "diff_step",
                    "value": null,
                    "defaultValue": null,
                    "description": "None or array_like, optional     Determines the relative step size for the finite difference     approximation of the Jacobian. The actual step is computed as     ``x * diff_step``. If None (default), then `diff_step` is taken to be     a conventional \"optimal\" power of machine epsilon for the finite     difference scheme used [NR]_. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "tr_solver",
                    "value": null,
                    "defaultValue": null,
                    "description": "{None, 'exact', 'lsmr'}, optional     Method for solving trust-region subproblems, relevant only for 'trf'     and 'dogbox' methods.          * 'exact' is suitable for not very large problems with dense           Jacobian matrices. The computational complexity per iteration is           comparable to a singular value decomposition of the Jacobian           matrix.         * 'lsmr' is suitable for problems with sparse and large Jacobian           matrices. It uses the iterative procedure           `scipy.sparse.linalg.lsmr` for finding a solution of a linear           least-squares problem and only requires matrix-vector product           evaluations.      If None (default), the solver is chosen based on the type of Jacobian     returned on the first iteration. ",
                    "type": "{None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "tr_options",
                    "value": {},
                    "defaultValue": {},
                    "description": "dict, optional     Keyword options passed to trust-region solver.          * ``tr_solver='exact'``: `tr_options` are ignored.         * ``tr_solver='lsmr'``: options for `scipy.sparse.linalg.lsmr`.           Additionally,  ``method='trf'`` supports  'regularize' option           (bool, default is True), which adds a regularization term to the           normal equation, which improves convergence if the Jacobian is           rank-deficient [Byrd]_ (eq. 3.4).  ",
                    "type": "dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "jac_sparsity",
                    "value": null,
                    "defaultValue": null,
                    "description": "{None, array_like, sparse matrix}, optional     Defines the sparsity structure of the Jacobian matrix for finite     difference estimation, its shape must be (m, n). If the Jacobian has     only few non-zero elements in *each* row, providing the sparsity     structure will greatly speed up the computations [Curtis]_. A zero     entry means that a corresponding element in the Jacobian is identically     zero. If provided, forces the use of 'lsmr' trust-region solver.     If None (default), then dense differencing will be used. Has no effect     for 'lm' method. ",
                    "type": "{None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "max_nfev",
                    "value": null,
                    "defaultValue": null,
                    "description": "None or int, optional     Maximum number of function evaluations before the termination.     If None (default), the value is chosen automatically:          * For 'trf' and 'dogbox' : 100 * n.         * For 'lm' :  100 * n if `jac` is callable and 100 * n * (n + 1)           otherwise (because 'lm' counts function calls in Jacobian           estimation).  ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "verbose",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "{0, 1, 2}, optional     Level of algorithm's verbosity:          * 0 (default) : work silently.         * ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "args",
                    "value": "()",
                    "defaultValue": "()",
                    "description": "",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "kwargs",
                    "value": {},
                    "defaultValue": {},
                    "description": "tuple and dict, optional     Additional arguments passed to `fun` and `jac`. Both empty by default.     The calling signature is ``fun(x, *args, **kwargs)`` and the same for     `jac`. ",
                    "type": "dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._lsq.least_squares.least_squares",
                    "defaultValue": "scipy.optimize._lsq.least_squares.least_squares",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.leastsq",
            "description": "Minimize the sum of squares of a set of equations.\n    \n    ::\n    \n        x = arg min(sum(func(y)**2,axis=0))\n                 y",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "74a7da288707d716c6ce8e8ca704830b5cfa1422ba945eeb6de38457adabc495",
            "fields": [
                {
                    "name": "func",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable     Should take at least one (possibly length ``N`` vector) argument and     returns ``M`` floating point numbers. It must not return NaNs or     fitting might fail. ``M`` must be greater than or equal to ``N``. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x0",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray     The starting estimate for the minimization. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "args",
                    "value": "()",
                    "defaultValue": "()",
                    "description": "tuple, optional     Any extra arguments to func are placed in this tuple. ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "Dfun",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable, optional     A function or method to compute the Jacobian of func with derivatives     across the rows. If this is None, the Jacobian will be estimated. ",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "full_output",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "bool, optional     non-zero to return all optional outputs. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "col_deriv",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "bool, optional     non-zero to specify that the Jacobian function computes derivatives     down the columns (faster, because there is no transpose operation). ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "ftol",
                    "value": 1.49012e-08,
                    "defaultValue": 1.49012e-08,
                    "description": "float, optional     Relative error desired in the sum of squares. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "xtol",
                    "value": 1.49012e-08,
                    "defaultValue": 1.49012e-08,
                    "description": "float, optional     Relative error desired in the approximate solution. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "gtol",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "float, optional     Orthogonality desired between the function vector and the columns of     the Jacobian. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "maxfev",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "int, optional     The maximum number of calls to the function. If `Dfun` is provided,     then the default `maxfev` is 100*(N+1) where N is the number of elements     in x0, otherwise the default `maxfev` is 200*(N+1). ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "epsfcn",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     A variable used in determining a suitable step length for the forward-     difference approximation of the Jacobian (for Dfun=None).     Normally the actual step length will be sqrt(epsfcn)*x     If epsfcn is less than the machine precision, it is assumed that the     relative errors are of the order of the machine precision. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "factor",
                    "value": 100,
                    "defaultValue": 100,
                    "description": "float, optional     A parameter determining the initial step bound     (``factor * || diag * x||``). Should be in interval ``(0.1, 100)``. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "diag",
                    "value": null,
                    "defaultValue": null,
                    "description": "sequence, optional     N positive entries that serve as a scale factors for the variables. ",
                    "type": "sequence",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._minpack_py.leastsq",
                    "defaultValue": "scipy.optimize._minpack_py.leastsq",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.line_search_wolfe2",
            "description": "Find alpha that satisfies strong Wolfe conditions.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "16755f604fc136511678e90ee98e9a473bf47414366796e00cb932946d1bccdf",
            "fields": [
                {
                    "name": "f",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable f(x,*args)     Objective function. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "myfprime",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable f'(x,*args)     Objective function gradient. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "xk",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray     Starting point. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "pk",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray     Search direction. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "gfk",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray, optional     Gradient value for x=xk (xk being the current parameter     estimate). Will be recomputed if omitted. ",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "old_fval",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Function value for x=xk. Will be recomputed if omitted. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "old_old_fval",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Function value for the point preceding x=xk. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "args",
                    "value": "()",
                    "defaultValue": "()",
                    "description": "tuple, optional     Additional arguments passed to objective function. ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "c1",
                    "value": 0.0001,
                    "defaultValue": 0.0001,
                    "description": "float, optional     Parameter for Armijo condition rule. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "c2",
                    "value": 0.9,
                    "defaultValue": 0.9,
                    "description": "float, optional     Parameter for curvature condition rule. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "amax",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Maximum step size ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "extra_condition",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable, optional     A callable of the form ``extra_condition(alpha, x, f, g)``     returning a boolean. Arguments are the proposed step ``alpha``     and the corresponding ``x``, ``f`` and ``g`` values. The line search     accepts the value of ``alpha`` only if this     callable returns ``True``. If the callable returns ``False``     for the step length, the algorithm will continue with     new iterates. The callable is only called for iterates     satisfying the strong Wolfe conditions. ",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "maxiter",
                    "value": 10,
                    "defaultValue": 10,
                    "description": "int, optional     Maximum number of iterations to perform. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._linesearch.line_search_wolfe2",
                    "defaultValue": "scipy.optimize._linesearch.line_search_wolfe2",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.linear_sum_assignment",
            "description": "    Calculates a maximum weight matching if true.\n\nReturns\n-------\nrow_ind, col_ind : array\n    An array of row indices and one of corresponding column indices giving\n    the optimal assignment. The cost of the assignment can be computed\n    as ``cost_matrix[row_ind, col_ind].sum()``. The row indices will be\n    sorted; in the case of a square cost matrix they will be equal to\n    ``numpy.arange(cost_matrix.shape[0])``.\n\nSee Also\n--------\nscipy.sparse.csgraph.min_weight_full_bipartite_matching : for sparse inputs\n\nNotes\n-----\n\nThe linear sum assignment problem [1]_ is also known as minimum weight\nmatching in bipartite graphs. A problem instance is described by a matrix\nC, where each C[i,j] is the cost of matching vertex i of the first partite\nset (a 'worker') and vertex j of the second set (a 'job'). The goal is to\nfind a complete assignment of workers to jobs of minimal cost.\n\nFormally, let X be a boolean matrix where :math:`X[i,j] = 1` iff row i is\nassigned to column j. Then the optimal assignment has cost\n\n.. math::\n    \\min \\sum_i \\sum_j C_{i,j} X_{i,j}\n\nwhere, in the case where the matrix X is square, each row is assigned to\nexactly one column, and each column to exactly one row.\n\nThis function can also solve a generalization of the classic assignment\nproblem where the cost matrix is rectangular. If it has more rows than\ncolumns, then not every row needs to be assigned to a column, and vice\nversa.\n\nThis implementation is a modified Jonker-Volgenant algorithm with no\ninitialization, described in ref. [2]_.\n\n.. versionadded:: 0.17.0\n\nReferences\n----------\n\n.. [1] https://en.wikipedia.org/wiki/Assignment_problem\n\n.. [2] DF Crouse. On implementing 2D rectangular assignment algorithms.\n       *IEEE Transactions on Aerospace and Electronic Systems*,\n       52(4):1679-1696, August 2016, :doi:`10.1109/TAES.2016.140952`\n\nExamples\n--------\n>>> cost = np.array([[4, 1, 3], [2, 0, 5], [3, 2, 2]])\n>>> from scipy.optimize import linear_sum_assignment\n>>> row_ind, col_ind = linear_sum_assignment(cost)\n>>> col_ind\narray([1, 0, 2])\n>>> cost[row_ind, col_ind].sum()\n5",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "20a63b75f5e4dcdd7f28ae5d77ad6a0c8ab99d9736fd26e0a5614a54891fa3cc",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._lsap.linear_sum_assignment",
                    "defaultValue": "scipy.optimize._lsap.linear_sum_assignment",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.linearmixing",
            "description": "Find a root of a function, using a scalar Jacobian approximation.\n    \n    .. warning::\n    \n       This algorithm may be useful for specific problems, but whether\n       it will work may depend strongly on the problem.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e1a5b6cc67a3af46e833a7381f851abd5f457168068ad3721a1a23b793a31ca1",
            "fields": [
                {
                    "name": "F",
                    "value": null,
                    "defaultValue": null,
                    "description": "function(x) -> f     Function whose root to find; should take and return an array-like     object. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "xin",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     Initial guess for the solution ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "iter",
                    "value": null,
                    "defaultValue": null,
                    "description": "int, optional     Number of iterations to make. If omitted (default), make as many     as required to meet tolerances. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "alpha",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     The Jacobian approximation is (-1/alpha). ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "verbose",
                    "value": false,
                    "defaultValue": false,
                    "description": "bool, optional     Print status to stdout on every iteration. ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "maxiter",
                    "value": null,
                    "defaultValue": null,
                    "description": "int, optional     Maximum number of iterations to make. If more are needed to     meet convergence, `NoConvergence` is raised. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "f_tol",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Absolute tolerance (in max-norm) for the residual.     If omitted, default is 6e-6. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "f_rtol",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Relative tolerance for the residual. If omitted, not used. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x_tol",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Absolute minimum step size, as determined from the Jacobian     approximation. If the step size is smaller than this, optimization     is terminated as successful. If omitted, not used. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x_rtol",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Relative minimum step size. If omitted, not used. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "tol_norm",
                    "value": null,
                    "defaultValue": null,
                    "description": "function(vector) -> scalar, optional     Norm to use in convergence check. Default is the maximum norm. ",
                    "type": "vector",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "line_search",
                    "value": "armijo",
                    "defaultValue": "armijo",
                    "description": "{None, 'armijo' (default), 'wolfe'}, optional     Which type of a line search to use to determine the step size in the     direction given by the Jacobian approximation. Defaults to 'armijo'. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "callback",
                    "value": null,
                    "defaultValue": null,
                    "description": "function, optional     Optional callback function. It is called on every iteration as     ``callback(x, f)`` where `x` is the current solution and `f`     the corresponding residual. ",
                    "type": "function",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "kw",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._nonlin.linearmixing",
                    "defaultValue": "scipy.optimize._nonlin.linearmixing",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.linprog",
            "description": "Linear programming: minimize a linear objective function subject to linear\n    equality and inequality constraints.\n    \n    Linear programming solves problems of the following form:\n    \n    .. math::\n    \n        \\min_x \\ & c^T x \\\\\n        \\mbox{such that} \\ & A_{ub} x \\leq b_{ub},\\\\\n        & A_{eq} x = b_{eq},\\\\\n        & l \\leq x \\leq u ,\n    \n    where :math:`x` is a vector of decision variables; :math:`c`,\n    :math:`b_{ub}`, :math:`b_{eq}`, :math:`l`, and :math:`u` are vectors; and\n    :math:`A_{ub}` and :math:`A_{eq}` are matrices.\n    \n    Alternatively, that's:\n    \n    minimize::\n    \n        c @ x\n    \n    such that::\n    \n        A_ub @ x <= b_ub\n        A_eq @ x == b_eq\n        lb <= x <= ub\n    \n    Note that by default ``lb = 0`` and ``ub = None`` unless specified with\n    ``bounds``.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1d6efbfc0073c62fda2161551be641bccb43a8fd88a519bb07e6257090737fa7",
            "fields": [
                {
                    "name": "c",
                    "value": null,
                    "defaultValue": null,
                    "description": "1-D array     The coefficients of the linear objective function to be minimized. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "A_ub",
                    "value": null,
                    "defaultValue": null,
                    "description": "2-D array, optional     The inequality constraint matrix. Each row of ``A_ub`` specifies the     coefficients of a linear inequality constraint on ``x``. ",
                    "type": "2-D",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "b_ub",
                    "value": null,
                    "defaultValue": null,
                    "description": "1-D array, optional     The inequality constraint vector. Each element represents an     upper bound on the corresponding value of ``A_ub @ x``. ",
                    "type": "1-D",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "A_eq",
                    "value": null,
                    "defaultValue": null,
                    "description": "2-D array, optional     The equality constraint matrix. Each row of ``A_eq`` specifies the     coefficients of a linear equality constraint on ``x``. ",
                    "type": "2-D",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "b_eq",
                    "value": null,
                    "defaultValue": null,
                    "description": "1-D array, optional     The equality constraint vector. Each element of ``A_eq @ x`` must equal     the corresponding element of ``b_eq``. ",
                    "type": "1-D",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "bounds",
                    "value": null,
                    "defaultValue": null,
                    "description": "sequence, optional     A sequence of ``(min, max)`` pairs for each element in ``x``, defining     the minimum and maximum values of that decision variable. Use ``None``     to indicate that there is no bound. By default, bounds are     ``(0, None)`` (all decision variables are non-negative).     If a single tuple ``(min, max)`` is provided, then ``min`` and     ``max`` will serve as bounds for all decision variables. ",
                    "type": "sequence",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "method",
                    "value": "highs",
                    "defaultValue": "highs",
                    "description": "str, optional     The algorithm used to solve the standard form problem.     :ref:`'highs' <optimize.linprog-highs>` (default),     :ref:`'highs-ds' <optimize.linprog-highs-ds>`,     :ref:`'highs-ipm' <optimize.linprog-highs-ipm>`,     :ref:`'interior-point' <optimize.linprog-interior-point>` (legacy),     :ref:`'revised simplex' <optimize.linprog-revised_simplex>` (legacy),     and     :ref:`'simplex' <optimize.linprog-simplex>` (legacy) are supported.     The legacy methods are deprecated and will be removed in SciPy 1.11.0. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "callback",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable, optional     If a callback function is provided, it will be called at least once per     iteration of the algorithm. The callback function must accept a single     `scipy.optimize.OptimizeResult` consisting of the following fields:      ",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "options",
                    "value": null,
                    "defaultValue": null,
                    "description": "dict, optional     A dictionary of solver options. All methods accept the following     options:      ",
                    "type": "dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x0",
                    "value": null,
                    "defaultValue": null,
                    "description": "1-D array, optional     Guess values of the decision variables, which will be refined by     the optimization algorithm. This argument is currently used only by the     'revised simplex' method, and can only be used if `x0` represents a     basic feasible solution.  ",
                    "type": "1-D",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "integrality",
                    "value": null,
                    "defaultValue": null,
                    "description": "1-D array, optional     Indicates the type of integrality constraint on each decision variable.      ``0`` : Continuous variable; no integrality constraint.      ``1`` : Integer variable; decision variable must be an integer     within `bounds`.      ``2`` : Semi-continuous variable; decision variable must be within     `bounds` or take value ``0``.      ``3`` : Semi-integer variable; decision variable must be an integer     within `bounds` or take value ``0``.      By default, all variables are continuous. This argument is currently     used only by the ``'highs'`` method and ignored otherwise. ",
                    "type": "1-D",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._linprog.linprog",
                    "defaultValue": "scipy.optimize._linprog.linprog",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.linprog_verbose_callback",
            "description": "A sample callback function demonstrating the linprog callback interface.\n    This callback produces detailed output to sys.stdout before each iteration\n    and after the final iteration of the simplex algorithm.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "12a49f1e5735e0b7d0551f673d49cdc0aeda4388275fff933db120663de71e99",
            "fields": [
                {
                    "name": "res",
                    "value": null,
                    "defaultValue": null,
                    "description": "A `scipy.optimize.OptimizeResult` consisting of the following fields:      ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._linprog.linprog_verbose_callback",
                    "defaultValue": "scipy.optimize._linprog.linprog_verbose_callback",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.lsq_linear",
            "description": "Solve a linear least-squares problem with bounds on the variables.\n    \n    Given a m-by-n design matrix A and a target vector b with m elements,\n    `lsq_linear` solves the following optimization problem::\n    \n        minimize 0.5 * ||A x - b||**2\n        subject to lb <= x <= ub\n    \n    This optimization problem is convex, hence a found minimum (if iterations\n    have converged) is guaranteed to be global.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7231c3333440426030084742698f0bef192deb6f89887cd1b1d68650b4d131e8",
            "fields": [
                {
                    "name": "A",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like, sparse matrix of LinearOperator, shape (m, n)     Design matrix. Can be `scipy.sparse.linalg.LinearOperator`. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "b",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like, shape (m,)     Target vector. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "bounds",
                    "value": "(-inf, inf)",
                    "defaultValue": "(-inf, inf)",
                    "description": "2-tuple of array_like, optional     Lower and upper bounds on independent variables. Defaults to no bounds.     Each array must have shape (n,) or be a scalar, in the latter     case a bound will be the same for all variables. Use ``np.inf`` with     an appropriate sign to disable bounds on all or some variables. ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "method",
                    "value": "trf",
                    "defaultValue": "trf",
                    "description": "'trf' or 'bvls', optional     Method to perform minimization.          * 'trf' : Trust Region Reflective algorithm adapted for a linear           least-squares problem. This is an interior-point-like method           and the required number of iterations is weakly correlated with           the number of variables.         * 'bvls' : Bounded-variable least-squares algorithm. This is           an active set method, which requires the number of iterations           comparable to the number of variables. Can't be used when `A` is           sparse or LinearOperator.      Default is 'trf'. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "tol",
                    "value": 1e-10,
                    "defaultValue": 1e-10,
                    "description": "float, optional     Tolerance parameter. The algorithm terminates if a relative change     of the cost function is less than `tol` on the last iteration.     Additionally, the first-order optimality measure is considered:          * ``method='trf'`` terminates if the uniform norm of the gradient,           scaled to account for the presence of the bounds, is less than           `tol`.         * ``method='bvls'`` terminates if Karush-Kuhn-Tucker conditions           are satisfied within `tol` tolerance.  ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "lsq_solver",
                    "value": null,
                    "defaultValue": null,
                    "description": "{None, 'exact', 'lsmr'}, optional     Method of solving unbounded least-squares problems throughout     iterations:          * 'exact' : Use dense QR or SVD decomposition approach. Can't be           used when `A` is sparse or LinearOperator.         * 'lsmr' : Use `scipy.sparse.linalg.lsmr` iterative procedure           which requires only matrix-vector product evaluations. Can't           be used with ``method='bvls'``.      If None (default), the solver is chosen based on type of `A`. ",
                    "type": "{None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "lsmr_tol",
                    "value": null,
                    "defaultValue": null,
                    "description": "None, float or 'auto', optional     Tolerance parameters 'atol' and 'btol' for `scipy.sparse.linalg.lsmr`     If None (default), it is set to ``1e-2 * tol``. If 'auto', the     tolerance will be adjusted based on the optimality of the current     iterate, which can speed up the optimization process, but is not always     reliable. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "max_iter",
                    "value": null,
                    "defaultValue": null,
                    "description": "None or int, optional     Maximum number of iterations before termination. If None (default), it     is set to 100 for ``method='trf'`` or to the number of variables for     ``method='bvls'`` (not counting iterations for 'bvls' initialization). ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "verbose",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "{0, 1, 2}, optional     Level of algorithm's verbosity:          * ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "lsmr_maxiter",
                    "value": null,
                    "defaultValue": null,
                    "description": "None or int, optional     Maximum number of iterations for the lsmr least squares solver,     if it is used (by setting ``lsq_solver='lsmr'``). If None (default), it     uses lsmr's default of ``min(m, n)`` where ``m`` and ``n`` are the     number of rows and columns of `A`, respectively. Has no effect if     ``lsq_solver='exact'``. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._lsq.lsq_linear.lsq_linear",
                    "defaultValue": "scipy.optimize._lsq.lsq_linear.lsq_linear",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.milp",
            "description": "Mixed-integer linear programming\n    \n    Solves problems of the following form:\n    \n    .. math::\n    \n        \\min_x \\ & c^T x \\\\\n        \\mbox{such that} \\ & b_l \\leq A x \\leq b_u,\\\\\n        & l \\leq x \\leq u, \\\\\n        & x_i \\in \\mathbb{Z}, i \\in X_i\n    \n    where :math:`x` is a vector of decision variables;\n    :math:`c`, :math:`b_l`, :math:`b_u`, :math:`l`, and :math:`u` are vectors;\n    :math:`A` is a matrix, and :math:`X_i` is the set of indices of\n    decision variables that must be integral. (In this context, a\n    variable that can assume only integer values is said to be \"integral\";\n    it has an \"integrality\" constraint.)\n    \n    Alternatively, that's:\n    \n    minimize::\n    \n        c @ x\n    \n    such that::\n    \n        b_l <= A @ x <= b_u\n        l <= x <= u\n        Specified elements of x must be integers\n    \n    By default, ``l = 0`` and ``u = np.inf`` unless specified with\n    ``bounds``.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7ad97fd3c7755107f995d2f998558ba2565198f0c34ccb8783a13ad6300ace59",
            "fields": [
                {
                    "name": "c",
                    "value": null,
                    "defaultValue": null,
                    "description": "1D array_like     The coefficients of the linear objective function to be minimized.     `c` is converted to a double precision array before the problem is     solved. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "integrality",
                    "value": null,
                    "defaultValue": null,
                    "description": "1D array_like, optional     Indicates the type of integrality constraint on each decision variable.      ``0`` : Continuous variable; no integrality constraint.      ``1`` : Integer variable; decision variable must be an integer     within `bounds`.      ``2`` : Semi-continuous variable; decision variable must be within     `bounds` or take value ``0``.      ``3`` : Semi-integer variable; decision variable must be an integer     within `bounds` or take value ``0``.      By default, all variables are continuous. `integrality` is converted     to an array of integers before the problem is solved.  ",
                    "type": "1D",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "bounds",
                    "value": null,
                    "defaultValue": null,
                    "description": "scipy.optimize.Bounds, optional     Bounds on the decision variables. Lower and upper bounds are converted     to double precision arrays before the problem is solved. The     ``keep_feasible`` parameter of the `Bounds` object is ignored. If     not specified, all decision variables are constrained to be     non-negative. ",
                    "type": "scipy.optimize.Bounds",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "constraints",
                    "value": null,
                    "defaultValue": null,
                    "description": "sequence of scipy.optimize.LinearConstraint, optional     Linear constraints of the optimization problem. Arguments may be     one of the following:      1. A single `LinearConstraint` object     2. A single tuple that can be converted to a `LinearConstraint` object        as ``LinearConstraint(*constraints)``     3. A sequence composed entirely of objects of type 1. and 2.      Before the problem is solved, all values are converted to double     precision, and the matrices of constraint coefficients are converted to     instances of `scipy.sparse.csc_array`. The ``keep_feasible`` parameter     of `LinearConstraint` objects is ignored. ",
                    "type": "sequence",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "options",
                    "value": null,
                    "defaultValue": null,
                    "description": "dict, optional     A dictionary of solver options. The following keys are recognized.      ",
                    "type": "dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._milp.milp",
                    "defaultValue": "scipy.optimize._milp.milp",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.minimize",
            "description": "Minimization of scalar function of one or more variables.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "bd49fea8b8fc678311442cd341d4af5e720fafafa6a9f8f6771c42cd873ca217",
            "fields": [
                {
                    "name": "fun",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable             The function defining the constraint.         ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x0",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray, shape (n,)     Initial guess. Array of real elements of size (n,),     where ``n`` is the number of independent variables. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "args",
                    "value": "()",
                    "defaultValue": "()",
                    "description": "sequence, optional             Extra arguments to be passed to the function and Jacobian.      Equality constraint means that the constraint function result is to     be zero whereas inequality means that it is to be non-negative.     Note that COBYLA only supports inequality constraints. ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "method",
                    "value": null,
                    "defaultValue": null,
                    "description": "str or callable, optional     Type of solver.  Should be one of          - 'Nelder-Mead' :ref:`(see here) <optimize.minimize-neldermead>`         - 'Powell'      :ref:`(see here) <optimize.minimize-powell>`         - 'CG'          :ref:`(see here) <optimize.minimize-cg>`         - 'BFGS'        :ref:`(see here) <optimize.minimize-bfgs>`         - 'Newton-CG'   :ref:`(see here) <optimize.minimize-newtoncg>`         - 'L-BFGS-B'    :ref:`(see here) <optimize.minimize-lbfgsb>`         - 'TNC'         :ref:`(see here) <optimize.minimize-tnc>`         - 'COBYLA'      :ref:`(see here) <optimize.minimize-cobyla>`         - 'SLSQP'       :ref:`(see here) <optimize.minimize-slsqp>`         - 'trust-constr':ref:`(see here) <optimize.minimize-trustconstr>`         - 'dogleg'      :ref:`(see here) <optimize.minimize-dogleg>`         - 'trust-ncg'   :ref:`(see here) <optimize.minimize-trustncg>`         - 'trust-exact' :ref:`(see here) <optimize.minimize-trustexact>`         - 'trust-krylov' :ref:`(see here) <optimize.minimize-trustkrylov>`         - custom - a callable object (added in version 0.14.0),           see below for description.      If not given, chosen to be one of ``BFGS``, ``L-BFGS-B``, ``SLSQP``,     depending on whether or not the problem has constraints or bounds. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "jac",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable, optional             The Jacobian of `fun` (only for SLSQP).         ",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "hess",
                    "value": null,
                    "defaultValue": null,
                    "description": "{callable, '2-point', '3-point', 'cs', HessianUpdateStrategy}, optional     Method for computing the Hessian matrix. Only for Newton-CG, dogleg,     trust-ncg, trust-krylov, trust-exact and trust-constr.     If it is callable, it should return the Hessian matrix:          ``hess(x, *args) -> {LinearOperator, spmatrix, array}, (n, n)``      where ``x`` is a (n,) ndarray and ``args`` is a tuple with the fixed     parameters.     The keywords {'2-point', '3-point', 'cs'} can also be used to select     a finite difference scheme for numerical estimation of the hessian.     Alternatively, objects implementing the `HessianUpdateStrategy`     interface can be used to approximate the Hessian. Available     quasi-Newton methods implementing this interface are:          - `BFGS`;         - `SR1`.      Not all of the options are available for each of the methods; for     availability refer to the notes. ",
                    "type": "{callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "hessp",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable, optional     Hessian of objective function times an arbitrary vector p. Only for     Newton-CG, trust-ncg, trust-krylov, trust-constr.     Only one of `hessp` or `hess` needs to be given. If `hess` is     provided, then `hessp` will be ignored. `hessp` must compute the     Hessian times an arbitrary vector:          ``hessp(x, p, *args) ->  ndarray shape (n,)``      where ``x`` is a (n,) ndarray, ``p`` is an arbitrary vector with     dimension (n,) and ``args`` is a tuple with the fixed     parameters. ",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "bounds",
                    "value": null,
                    "defaultValue": null,
                    "description": "sequence or `Bounds`, optional     Bounds on variables for Nelder-Mead, L-BFGS-B, TNC, SLSQP, Powell, and     trust-constr methods. There are two ways to specify the bounds:          1. Instance of `Bounds` class.         2. Sequence of ``(min, max)`` pairs for each element in `x`. None            is used to specify no bound.  ",
                    "type": "sequence",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "constraints",
                    "value": "()",
                    "defaultValue": "()",
                    "description": "{Constraint, dict} or List of {Constraint, dict}, optional     Constraints definition. Only for COBYLA, SLSQP and trust-constr.      Constraints for 'trust-constr' are defined as a single object or a     list of objects specifying constraints to the optimization problem.     Available constraints are:          - `LinearConstraint`         - `NonlinearConstraint`      Constraints for COBYLA, SLSQP are defined as a list of dictionaries.     Each dictionary with fields:          ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "tol",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Tolerance for termination. When `tol` is specified, the selected     minimization algorithm sets some relevant solver-specific tolerance(s)     equal to `tol`. For detailed control, use solver-specific     options. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "callback",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable, optional     Called after each iteration. For 'trust-constr' it is a callable with     the signature:          ``callback(xk, OptimizeResult state) -> bool``      where ``xk`` is the current parameter vector. and ``state``     is an `OptimizeResult` object, with the same fields     as the ones from the return. If callback returns True     the algorithm execution is terminated.     For all the other methods, the signature is:          ``callback(xk)``      where ``xk`` is the current parameter vector. ",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "options",
                    "value": null,
                    "defaultValue": null,
                    "description": "dict, optional     A dictionary of solver options. All methods accept the following     generic options:          ",
                    "type": "dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._minimize.minimize",
                    "defaultValue": "scipy.optimize._minimize.minimize",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.minimize_scalar",
            "description": "Minimization of scalar function of one variable.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e4d06b9538409f0698282450d3380c2c40e2e33283a917a50b711f59fe3773f6",
            "fields": [
                {
                    "name": "fun",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable     Objective function.     Scalar function, must return a scalar. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "bracket",
                    "value": null,
                    "defaultValue": null,
                    "description": "sequence, optional     For methods 'brent' and 'golden', `bracket` defines the bracketing     interval and can either have three items ``(a, b, c)`` so that     ``a < b < c`` and ``fun(b) < fun(a), fun(c)`` or two items ``a`` and     ``c`` which are assumed to be a starting interval for a downhill     bracket search (see `bracket`); it doesn't always mean that the     obtained solution will satisfy ``a <= x <= c``. ",
                    "type": "sequence",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "bounds",
                    "value": null,
                    "defaultValue": null,
                    "description": "sequence, optional     For method 'bounded', `bounds` is mandatory and must have two items     corresponding to the optimization bounds. ",
                    "type": "sequence",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "args",
                    "value": "()",
                    "defaultValue": "()",
                    "description": "tuple, optional     Extra arguments passed to the objective function. ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "method",
                    "value": "brent",
                    "defaultValue": "brent",
                    "description": "str or callable, optional     Type of solver.  Should be one of:          - :ref:`Brent <optimize.minimize_scalar-brent>`         - :ref:`Bounded <optimize.minimize_scalar-bounded>`         - :ref:`Golden <optimize.minimize_scalar-golden>`         - custom - a callable object (added in version 0.14.0), see below      See the 'Notes' section for details of each solver.  ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "tol",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Tolerance for termination. For detailed control, use solver-specific     options. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "options",
                    "value": null,
                    "defaultValue": null,
                    "description": "dict, optional     A dictionary of solver options.          ",
                    "type": "dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._minimize.minimize_scalar",
                    "defaultValue": "scipy.optimize._minimize.minimize_scalar",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.newton",
            "description": "Find a zero of a real or complex function using the Newton-Raphson\n    (or secant or Halley's) method.\n    \n    Find a zero of the scalar-valued function `func` given a nearby scalar\n    starting point `x0`.\n    The Newton-Raphson method is used if the derivative `fprime` of `func`\n    is provided, otherwise the secant method is used. If the second order\n    derivative `fprime2` of `func` is also provided, then Halley's method is\n    used.\n    \n    If `x0` is a sequence with more than one item, `newton` returns an array:\n    the zeros of the function from each (scalar) starting point in `x0`.\n    In this case, `func` must be vectorized to return a sequence or array of\n    the same shape as its first argument. If `fprime` (`fprime2`) is given,\n    then its return must also have the same shape: each element is the first\n    (second) derivative of `func` with respect to its only variable evaluated\n    at each element of its first argument.\n    \n    `newton` is for finding roots of a scalar-valued functions of a single\n    variable. For problems involving several variables, see `root`.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "db001fd7f5b5631cd8bdb0e924113a7d4571b617b1063da3f03866b6389361f8",
            "fields": [
                {
                    "name": "func",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable     The function whose zero is wanted. It must be a function of a     single variable of the form ``f(x,a,b,c...)``, where ``a,b,c...``     are extra arguments that can be passed in the `args` parameter. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x0",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, sequence, or ndarray     An initial estimate of the zero that should be somewhere near the     actual zero. If not scalar, then `func` must be vectorized and return     a sequence or array of the same shape as its first argument. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "fprime",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable, optional     The derivative of the function when available and convenient. If it     is None (default), then the secant method is used. ",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "args",
                    "value": "()",
                    "defaultValue": "()",
                    "description": "tuple, optional     Extra arguments to be used in the function call. ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "tol",
                    "value": 1.48e-08,
                    "defaultValue": 1.48e-08,
                    "description": "float, optional     The allowable error of the zero value. If `func` is complex-valued,     a larger `tol` is recommended as both the real and imaginary parts     of `x` contribute to ``|x - x0|``. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "maxiter",
                    "value": 50,
                    "defaultValue": 50,
                    "description": "int, optional     Maximum number of iterations. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "fprime2",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable, optional     The second order derivative of the function when available and     convenient. If it is None (default), then the normal Newton-Raphson     or the secant method is used. If it is not None, then Halley's method     is used. ",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x1",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Another estimate of the zero that should be somewhere near the     actual zero. Used if `fprime` is not provided. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "rtol",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "float, optional     Tolerance (relative) for termination. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "full_output",
                    "value": false,
                    "defaultValue": false,
                    "description": "bool, optional     If `full_output` is False (default), the root is returned.     If True and `x0` is scalar, the return value is ``(x, r)``, where ``x``     is the root and ``r`` is a `RootResults` object.     If True and `x0` is non-scalar, the return value is ``(x, converged,     zero_der)`` (see Returns section for details). ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "disp",
                    "value": true,
                    "defaultValue": true,
                    "description": "bool, optional     If True, raise a RuntimeError if the algorithm didn't converge, with     the error message containing the number of iterations and current     function value. Otherwise, the convergence status is recorded in a     `RootResults` return object.     Ignored if `x0` is not scalar.     *",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._zeros_py.newton",
                    "defaultValue": "scipy.optimize._zeros_py.newton",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.newton_krylov",
            "description": "Find a root of a function, using Krylov approximation for inverse Jacobian.\n    \n    This method is suitable for solving large-scale problems.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "81dadf679434798930508651307a8e4860c9cc7078e881e59d3797a5f8ff1289",
            "fields": [
                {
                    "name": "F",
                    "value": null,
                    "defaultValue": null,
                    "description": "function(x) -> f     Function whose root to find; should take and return an array-like     object. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "xin",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     Initial guess for the solution ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "iter",
                    "value": null,
                    "defaultValue": null,
                    "description": "int, optional     Number of iterations to make. If omitted (default), make as many     as required to meet tolerances. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "rdiff",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Relative step size to use in numerical differentiation. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "method",
                    "value": "lgmres",
                    "defaultValue": "lgmres",
                    "description": "str or callable, optional     Krylov method to use to approximate the Jacobian.  Can be a string,     or a function implementing the same interface as the iterative     solvers in `scipy.sparse.linalg`. If a string, needs to be one of:     ``'lgmres'``, ``'gmres'``, ``'bicgstab'``, ``'cgs'``, ``'minres'``,     ``'tfqmr'``.      The default is `scipy.sparse.linalg.lgmres`. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "inner_maxiter",
                    "value": 20,
                    "defaultValue": 20,
                    "description": "int, optional     Parameter to pass to the \"inner\" Krylov ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "inner_M",
                    "value": null,
                    "defaultValue": null,
                    "description": "LinearOperator or InverseJacobian     Preconditioner for the inner Krylov iteration.     Note that you can use also inverse Jacobians as (adaptive)     preconditioners. For example,      >>> from scipy.optimize.nonlin import BroydenFirst, KrylovJacobian     >>> from scipy.optimize.nonlin import InverseJacobian     >>> jac = BroydenFirst()     >>> kjac = KrylovJacobian(inner_M=InverseJacobian(jac))      If the preconditioner has a method named 'update', it will be called     as ``update(x, f)`` after each nonlinear step, with ``x`` giving     the current point, and ``f`` the current function value. ",
                    "type": "LinearOperator",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "outer_k",
                    "value": 10,
                    "defaultValue": 10,
                    "description": "int, optional     Size of the subspace kept across LGMRES nonlinear iterations.     See `scipy.sparse.linalg.lgmres` for details. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "verbose",
                    "value": false,
                    "defaultValue": false,
                    "description": "bool, optional     Print status to stdout on every iteration. ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "maxiter",
                    "value": null,
                    "defaultValue": null,
                    "description": "int, optional     Maximum number of iterations to make. If more are needed to     meet convergence, `NoConvergence` is raised. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "f_tol",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Absolute tolerance (in max-norm) for the residual.     If omitted, default is 6e-6. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "f_rtol",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Relative tolerance for the residual. If omitted, not used. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x_tol",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Absolute minimum step size, as determined from the Jacobian     approximation. If the step size is smaller than this, optimization     is terminated as successful. If omitted, not used. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x_rtol",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Relative minimum step size. If omitted, not used. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "tol_norm",
                    "value": null,
                    "defaultValue": null,
                    "description": "function(vector) -> scalar, optional     Norm to use in convergence check. Default is the maximum norm. ",
                    "type": "vector",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "line_search",
                    "value": "armijo",
                    "defaultValue": "armijo",
                    "description": "{None, 'armijo' (default), 'wolfe'}, optional     Which type of a line search to use to determine the step size in the     direction given by the Jacobian approximation. Defaults to 'armijo'. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "callback",
                    "value": null,
                    "defaultValue": null,
                    "description": "function, optional     Optional callback function. It is called on every iteration as     ``callback(x, f)`` where `x` is the current solution and `f`     the corresponding residual. ",
                    "type": "function",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "kw",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._nonlin.newton_krylov",
                    "defaultValue": "scipy.optimize._nonlin.newton_krylov",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.nnls",
            "description": "Solve ``argmin_x || Ax - b ||_2`` for ``x>=0``. This is a wrapper\n    for a FORTRAN non-negative least squares solver.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2799c75e1e2b317c46084a6082f074dbf2aba97899eac606476dc13c4dd39a5d",
            "fields": [
                {
                    "name": "A",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray     Matrix ``A`` as shown above. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "b",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray     Right-hand side vector. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "maxiter",
                    "value": null,
                    "defaultValue": null,
                    "description": "int, optional     Maximum number of iterations, optional.     Default is ``3 * A.shape[1]``. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._nnls.nnls",
                    "defaultValue": "scipy.optimize._nnls.nnls",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.quadratic_assignment",
            "description": "Approximates solution to the quadratic assignment problem and\n    the graph matching problem.\n    \n    Quadratic assignment solves problems of the following form:\n    \n    .. math::\n    \n        \\min_P & \\ {\\ \\text{trace}(A^T P B P^T)}\\\\\n        \\mbox{s.t. } & {P \\ \\epsilon \\ \\mathcal{P}}\\\\\n    \n    where :math:`\\mathcal{P}` is the set of all permutation matrices,\n    and :math:`A` and :math:`B` are square matrices.\n    \n    Graph matching tries to *maximize* the same objective function.\n    This algorithm can be thought of as finding the alignment of the\n    nodes of two graphs that minimizes the number of induced edge\n    disagreements, or, in the case of weighted graphs, the sum of squared\n    edge weight differences.\n    \n    Note that the quadratic assignment problem is NP-hard. The results given\n    here are approximations and are not guaranteed to be optimal.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1fb94fde3df621bc6135702bcb09702fab546b3f816c74fd797ed9b247dd4b31",
            "fields": [
                {
                    "name": "A",
                    "value": null,
                    "defaultValue": null,
                    "description": "2-D array, square     The square matrix :math:`A` in the objective function above.  ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "B",
                    "value": null,
                    "defaultValue": null,
                    "description": "2-D array, square     The square matrix :math:`B` in the objective function above.  ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "method",
                    "value": "faq",
                    "defaultValue": "faq",
                    "description": " str in {'faq', '2opt'} (",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "options",
                    "value": null,
                    "defaultValue": null,
                    "description": "dict, optional     A dictionary of solver options. All solvers support the following:      ",
                    "type": "dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._qap.quadratic_assignment",
                    "defaultValue": "scipy.optimize._qap.quadratic_assignment",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.ridder",
            "description": "Find a root of a function in an interval using Ridder's method.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b62878a9462fe5e3b7947b94d1c0c1021197e7d75ee72ee1e8a1aabef2ea0100",
            "fields": [
                {
                    "name": "f",
                    "value": null,
                    "defaultValue": null,
                    "description": "function     Python function returning a number. f must be continuous, and f(a) and     f(b) must have opposite signs. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "a",
                    "value": null,
                    "defaultValue": null,
                    "description": "scalar     One end of the bracketing interval [a,b]. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "b",
                    "value": null,
                    "defaultValue": null,
                    "description": "scalar     The other end of the bracketing interval [a,b]. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "args",
                    "value": "()",
                    "defaultValue": "()",
                    "description": "tuple, optional     Containing extra arguments for the function `f`.     `f` is called by ``apply(f, (x)+args)``. ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "xtol",
                    "value": 2e-12,
                    "defaultValue": 2e-12,
                    "description": "number, optional     The computed root ``x0`` will satisfy ``np.allclose(x, x0,     atol=xtol, rtol=rtol)``, where ``x`` is the exact root. The     parameter must be nonnegative. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "rtol",
                    "value": 8.881784197001252e-16,
                    "defaultValue": 8.881784197001252e-16,
                    "description": "number, optional     The computed root ``x0`` will satisfy ``np.allclose(x, x0,     atol=xtol, rtol=rtol)``, where ``x`` is the exact root. The     parameter cannot be smaller than its default value of     ``4*np.finfo(float).eps``. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "maxiter",
                    "value": 100,
                    "defaultValue": 100,
                    "description": "int, optional     If convergence is not achieved in `maxiter` iterations, an error is     raised. Must be >= 0. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "full_output",
                    "value": false,
                    "defaultValue": false,
                    "description": "bool, optional     If `full_output` is False, the root is returned. If `full_output` is     True, the return value is ``(x, r)``, where `x` is the root, and `r` is     a `RootResults` object. ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "disp",
                    "value": true,
                    "defaultValue": true,
                    "description": "bool, optional     If True, raise RuntimeError if the algorithm didn't converge.     Otherwise, the convergence status is recorded in any `RootResults`     return object. ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._zeros_py.ridder",
                    "defaultValue": "scipy.optimize._zeros_py.ridder",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.root",
            "description": "Find a root of a vector function.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c8419d01526a3f8b4891b6f0825576337aca3764924c79629b45c33a92d27a4f",
            "fields": [
                {
                    "name": "fun",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable     A vector function to find a root of. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x0",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray     Initial guess. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "args",
                    "value": "()",
                    "defaultValue": "()",
                    "description": "tuple, optional     Extra arguments passed to the objective function and its Jacobian. ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "method",
                    "value": "hybr",
                    "defaultValue": "hybr",
                    "description": "str, optional     Type of solver. Should be one of          - 'hybr'             :ref:`(see here) <optimize.root-hybr>`         - 'lm'               :ref:`(see here) <optimize.root-lm>`         - 'broyden1'         :ref:`(see here) <optimize.root-broyden1>`         - 'broyden2'         :ref:`(see here) <optimize.root-broyden2>`         - 'anderson'         :ref:`(see here) <optimize.root-anderson>`         - 'linearmixing'     :ref:`(see here) <optimize.root-linearmixing>`         - 'diagbroyden'      :ref:`(see here) <optimize.root-diagbroyden>`         - 'excitingmixing'   :ref:`(see here) <optimize.root-excitingmixing>`         - 'krylov'           :ref:`(see here) <optimize.root-krylov>`         - 'df-sane'          :ref:`(see here) <optimize.root-dfsane>`  ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "jac",
                    "value": null,
                    "defaultValue": null,
                    "description": "bool or callable, optional     If `jac` is a Boolean and is True, `fun` is assumed to return the     value of Jacobian along with the objective function. If False, the     Jacobian will be estimated numerically.     `jac` can also be a callable returning the Jacobian of `fun`. In     this case, it must accept the same arguments as `fun`. ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "tol",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Tolerance for termination. For detailed control, use solver-specific     options. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "callback",
                    "value": null,
                    "defaultValue": null,
                    "description": "function, optional     Optional callback function. It is called on every iteration as     ``callback(x, f)`` where `x` is the current solution and `f`     the corresponding residual. For all methods but 'hybr' and 'lm'. ",
                    "type": "function",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "options",
                    "value": null,
                    "defaultValue": null,
                    "description": "dict, optional     A dictionary of solver options. E.g., `xtol` or `maxiter`, see     :obj:`show_options()` for details. ",
                    "type": "dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._root.root",
                    "defaultValue": "scipy.optimize._root.root",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.root_scalar",
            "description": "Find a root of a scalar function.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7258b53ad1bc05962a0ed96fd96e581904cc7e7fd6207d71252e15dbfe6b2863",
            "fields": [
                {
                    "name": "f",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable     A function to find a root of. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "args",
                    "value": "()",
                    "defaultValue": "()",
                    "description": "tuple, optional     Extra arguments passed to the objective function and its derivative(s). ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "method",
                    "value": null,
                    "defaultValue": null,
                    "description": "str, optional     Type of solver.  Should be one of          - 'bisect'    :ref:`(see here) <optimize.root_scalar-bisect>`         - 'brentq'    :ref:`(see here) <optimize.root_scalar-brentq>`         - 'brenth'    :ref:`(see here) <optimize.root_scalar-brenth>`         - 'ridder'    :ref:`(see here) <optimize.root_scalar-ridder>`         - 'toms748'    :ref:`(see here) <optimize.root_scalar-toms748>`         - 'newton'    :ref:`(see here) <optimize.root_scalar-newton>`         - 'secant'    :ref:`(see here) <optimize.root_scalar-secant>`         - 'halley'    :ref:`(see here) <optimize.root_scalar-halley>`  ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "bracket",
                    "value": null,
                    "defaultValue": null,
                    "description": "A sequence of 2 floats, optional     An interval bracketing a root.  `f(x, *args)` must have different     signs at the two endpoints. ",
                    "type": "A",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "fprime",
                    "value": null,
                    "defaultValue": null,
                    "description": "bool or callable, optional     If `fprime` is a boolean and is True, `f` is assumed to return the     value of the objective function and of the derivative.     `fprime` can also be a callable returning the derivative of `f`. In     this case, it must accept the same arguments as `f`. ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "fprime2",
                    "value": null,
                    "defaultValue": null,
                    "description": "bool or callable, optional     If `fprime2` is a boolean and is True, `f` is assumed to return the     value of the objective function and of the     first and second derivatives.     `fprime2` can also be a callable returning the second derivative of `f`.     In this case, it must accept the same arguments as `f`. ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x0",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Initial guess. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x1",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     A second guess. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "xtol",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Tolerance (absolute) for termination. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "rtol",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Tolerance (relative) for termination. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "maxiter",
                    "value": null,
                    "defaultValue": null,
                    "description": "int, optional     Maximum number of iterations. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "options",
                    "value": null,
                    "defaultValue": null,
                    "description": "dict, optional     A dictionary of solver options. E.g., ``k``, see     :obj:`show_options()` for details. ",
                    "type": "dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._root_scalar.root_scalar",
                    "defaultValue": "scipy.optimize._root_scalar.root_scalar",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.rosen",
            "description": "The Rosenbrock function.\n    \n    The function computed is::\n    \n        sum(100.0*(x[1:] - x[:-1]**2.0)**2.0 + (1 - x[:-1])**2.0)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "0c0324e2c9bdbba24f2a8ebab3c9d2455b3ee7e1c18a375d22b4f29348177acf",
            "fields": [
                {
                    "name": "x",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     1-D array of points at which the Rosenbrock function is to be computed. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._optimize.rosen",
                    "defaultValue": "scipy.optimize._optimize.rosen",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.rosen_der",
            "description": "The derivative (i.e. gradient) of the Rosenbrock function.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2fc037e81363ddeabefa88d77acacbbb4f0d02b41434b16768803915dc3264e1",
            "fields": [
                {
                    "name": "x",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     1-D array of points at which the derivative is to be computed. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._optimize.rosen_der",
                    "defaultValue": "scipy.optimize._optimize.rosen_der",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.rosen_hess",
            "description": "The Hessian matrix of the Rosenbrock function.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c259609ef300ff5cd0181ea3c60ab1c365e43587e687631ee4748dc98585541d",
            "fields": [
                {
                    "name": "x",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     1-D array of points at which the Hessian matrix is to be computed. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._optimize.rosen_hess",
                    "defaultValue": "scipy.optimize._optimize.rosen_hess",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.rosen_hess_prod",
            "description": "Product of the Hessian matrix of the Rosenbrock function with a vector.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c910fdf585b72fabaa46fb5e708b39ed68194edff6ee18d81eda9f7470cfa9ac",
            "fields": [
                {
                    "name": "x",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     1-D array of points at which the Hessian matrix is to be computed. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "p",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     1-D array, the vector to be multiplied by the Hessian matrix. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._optimize.rosen_hess_prod",
                    "defaultValue": "scipy.optimize._optimize.rosen_hess_prod",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.shgo",
            "description": "Finds the global minimum of a function using SHG optimization.\n    \n    SHGO stands for \"simplicial homology global optimization\".",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7154d61f8f17142d5c9e76aae841fafac4eeeb63789083d937f44005f5b9ff3e",
            "fields": [
                {
                    "name": "func",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable     The objective function to be minimized.  Must be in the form     ``f(x, *args)``, where ``x`` is the argument in the form of a 1-D array     and ``args`` is a tuple of any additional fixed parameters needed to     completely specify the function. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "bounds",
                    "value": null,
                    "defaultValue": null,
                    "description": "sequence or `Bounds`     Bounds for variables. There are two ways to specify the bounds:      1. Instance of `Bounds` class.     2. Sequence of ``(min, max)`` pairs for each element in `x`.  ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "args",
                    "value": "()",
                    "defaultValue": "()",
                    "description": "tuple             Extra arguments passed to the objective function (``func``) and             its derivatives (Jacobian, Hessian).         * ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "constraints",
                    "value": null,
                    "defaultValue": null,
                    "description": "dict or sequence of dict, optional     Constraints definition.     Function(s) ``R**n`` in the form::          g(x) >= 0 applied as ",
                    "type": "dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "n",
                    "value": null,
                    "defaultValue": null,
                    "description": "int, optional     Number of sampling points used in the construction of the simplicial     complex. Note that this argument is only used for ``sobol`` and other     arbitrary `sampling_methods`. In case of ``sobol``, it must be a     power of ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "iters",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "int, optional     Number of iterations used in the construction of the simplicial     complex. Default is 1. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "callback",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable, optional     Called after each iteration, as ``callback(xk)``, where ``xk`` is the     current parameter vector. ",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "minimizer_kwargs",
                    "value": null,
                    "defaultValue": null,
                    "description": "dict, optional     Extra keyword arguments to be passed to the minimizer     ``scipy.optimize.minimize`` Some important options could be:          * ",
                    "type": "dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "options",
                    "value": null,
                    "defaultValue": null,
                    "description": "dict, optional     A dictionary of solver options. Many of the options specified for the     global routine are also passed to the scipy.optimize.minimize routine.     The options that are also passed to the local routine are marked with     \"(L)\".      Stopping criteria, the algorithm will terminate if any of the specified     criteria are met. However, the default algorithm does not require any to     be specified:      * ",
                    "type": "dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "sampling_method",
                    "value": "simplicial",
                    "defaultValue": "simplicial",
                    "description": "str or function, optional     Current built in sampling method options are ``halton``, ``sobol`` and     ``simplicial``. The default ``simplicial`` provides     the theoretical guarantee of convergence to the global minimum in finite     time. ``halton`` and ``sobol`` method are faster in terms of sampling     point generation at the cost of the loss of     guaranteed convergence. It is more appropriate for most \"easier\"     problems where the convergence is relatively fast.     User defined sampling functions must accept two arguments of ``n``     sampling points of dimension ``dim`` per call and output an array of     sampling points with shape `n x dim`. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._shgo.shgo",
                    "defaultValue": "scipy.optimize._shgo.shgo",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.show_options",
            "description": "Show documentation for additional options of optimization solvers.\n    \n    These are method-specific options that can be supplied through the\n    ``options`` dict.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "dafe05e08fab03713652e61368b0ae65d20aeed36d8741888001ac2187e8d947",
            "fields": [
                {
                    "name": "solver",
                    "value": null,
                    "defaultValue": null,
                    "description": "str     Type of optimization solver. One of 'minimize', 'minimize_scalar',     'root', 'root_scalar', 'linprog', or 'quadratic_assignment'. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "method",
                    "value": null,
                    "defaultValue": null,
                    "description": "str, optional     If not given, shows all methods of the specified solver. Otherwise,     show only the options for the specified method. Valid values     corresponds to methods' names of respective solver (e.g., 'BFGS' for     'minimize'). ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "disp",
                    "value": true,
                    "defaultValue": true,
                    "description": "bool, optional     Whether to print the result rather than returning it. ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._optimize.show_options",
                    "defaultValue": "scipy.optimize._optimize.show_options",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.toms748",
            "description": "Find a zero using TOMS Algorithm 748 method.\n    \n    Implements the Algorithm 748 method of Alefeld, Potro and Shi to find a\n    zero of the function `f` on the interval `[a , b]`, where `f(a)` and\n    `f(b)` must have opposite signs.\n    \n    It uses a mixture of inverse cubic interpolation and\n    \"Newton-quadratic\" steps. [APS1995].",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "800691581362314442e037c8bd395725fbf9c00f1e6427277d38618005776585",
            "fields": [
                {
                    "name": "f",
                    "value": null,
                    "defaultValue": null,
                    "description": "function     Python function returning a scalar. The function :math:`f`     must be continuous, and :math:`f(a)` and :math:`f(b)`     have opposite signs. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "a",
                    "value": null,
                    "defaultValue": null,
                    "description": "scalar,     lower boundary of the search interval ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "b",
                    "value": null,
                    "defaultValue": null,
                    "description": "scalar,     upper boundary of the search interval ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "args",
                    "value": "()",
                    "defaultValue": "()",
                    "description": "tuple, optional     containing extra arguments for the function `f`.     `f` is called by ``f(x, *args)``. ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "k",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "int, optional     The number of Newton quadratic steps to perform each     iteration. ``k>=1``. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "xtol",
                    "value": 2e-12,
                    "defaultValue": 2e-12,
                    "description": "scalar, optional     The computed root ``x0`` will satisfy ``np.allclose(x, x0,     atol=xtol, rtol=rtol)``, where ``x`` is the exact root. The     parameter must be nonnegative. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "rtol",
                    "value": 8.881784197001252e-16,
                    "defaultValue": 8.881784197001252e-16,
                    "description": "scalar, optional     The computed root ``x0`` will satisfy ``np.allclose(x, x0,     atol=xtol, rtol=rtol)``, where ``x`` is the exact root. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "maxiter",
                    "value": 100,
                    "defaultValue": 100,
                    "description": "int, optional     If convergence is not achieved in `maxiter` iterations, an error is     raised. Must be >= 0. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "full_output",
                    "value": false,
                    "defaultValue": false,
                    "description": "bool, optional     If `full_output` is False, the root is returned. If `full_output` is     True, the return value is ``(x, r)``, where `x` is the root, and `r` is     a `RootResults` object. ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "disp",
                    "value": true,
                    "defaultValue": true,
                    "description": "bool, optional     If True, raise RuntimeError if the algorithm didn't converge.     Otherwise, the convergence status is recorded in the `RootResults`     return object. ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._zeros_py.toms748",
                    "defaultValue": "scipy.optimize._zeros_py.toms748",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.cobyla.RLock",
            "description": "Factory function that returns a new reentrant lock.\n    \n    A reentrant lock must be released by the thread that acquired it. Once a\n    thread has acquired a reentrant lock, the same thread may acquire it again\n    without blocking; the thread must release it once for each time it has\n    acquired it.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7622c8b33aaf9f744383d05398e7585a693f8914cfcf574f747ba1af4ea1c98e",
            "fields": [
                {
                    "name": "args",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "kwargs",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "threading.RLock",
                    "defaultValue": "threading.RLock",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.cobyla.synchronized",
            "description": "No description found",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7e50d990a6d4940b8775bdd5f3bca5646897e09fc5921838ba4046daf94df292",
            "fields": [
                {
                    "name": "func",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._cobyla_py.synchronized",
                    "defaultValue": "scipy.optimize._cobyla_py.synchronized",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.lbfgsb.old_bound_to_new",
            "description": "Convert the old bounds representation to the new one.\n    \n    The new representation is a tuple (lb, ub) and the old one is a list\n    containing n tuples, ith containing lower and upper bound on a ith\n    variable.\n    If any of the entries in lb/ub are None they are replaced by\n    -np.inf/np.inf.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "0e44a69a395ca34ef316f75624e382c3c060aecd6f1672c6d7095eab2de045a4",
            "fields": [
                {
                    "name": "bounds",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._constraints.old_bound_to_new",
                    "defaultValue": "scipy.optimize._constraints.old_bound_to_new",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.linesearch.line_search_wolfe1",
            "description": "As `scalar_search_wolfe1` but do a line search to direction `pk`",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1cc9dd7128f11fe3ad3ee70367716aeb2548d6b51c08d9a089cc2ad739a5ca13",
            "fields": [
                {
                    "name": "f",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable     Function `f(x)` ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "fprime",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable     Gradient of `f` ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "xk",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     Current point ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "pk",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     Search direction  ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "gfk",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like, optional     Gradient of `f` at point `xk` ",
                    "type": "array_like",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "old_fval",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Value of `f` at point `xk` ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "old_old_fval",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Value of `f` at point preceding `xk`  The rest of the parameters are the same as for `scalar_search_wolfe1`. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "args",
                    "value": "()",
                    "defaultValue": "()",
                    "description": "",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "c1",
                    "value": 0.0001,
                    "defaultValue": 0.0001,
                    "description": "",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "c2",
                    "value": 0.9,
                    "defaultValue": 0.9,
                    "description": "",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "amax",
                    "value": 50,
                    "defaultValue": 50,
                    "description": "",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "amin",
                    "value": 1e-08,
                    "defaultValue": 1e-08,
                    "description": "",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "xtol",
                    "value": 1e-14,
                    "defaultValue": 1e-14,
                    "description": "",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._linesearch.line_search_wolfe1",
                    "defaultValue": "scipy.optimize._linesearch.line_search_wolfe1",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.linesearch.line_search_BFGS",
            "description": "Compatibility wrapper for `line_search_armijo`",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "695a6489e5707a6641ad90ef3bf7899dee951cc07845b44c3d6908e8ea31adc6",
            "fields": [
                {
                    "name": "f",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "xk",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "pk",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "gfk",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "old_fval",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "args",
                    "value": "()",
                    "defaultValue": "()",
                    "description": "",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "c1",
                    "value": 0.0001,
                    "defaultValue": 0.0001,
                    "description": "",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "alpha0",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._linesearch.line_search_BFGS",
                    "defaultValue": "scipy.optimize._linesearch.line_search_BFGS",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.linesearch.line_search_armijo",
            "description": "Minimize over alpha, the function ``f(xk+alpha pk)``.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "fadcc70b4866f3f073398fa16cea836ab934982eec9959f015aa8e62fef49095",
            "fields": [
                {
                    "name": "f",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable     Function to be minimized. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "xk",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     Current point. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "pk",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     Search direction. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "gfk",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     Gradient of `f` at point `xk`. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "old_fval",
                    "value": null,
                    "defaultValue": null,
                    "description": "float     Value of `f` at point `xk`. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "args",
                    "value": "()",
                    "defaultValue": "()",
                    "description": "tuple, optional     Optional arguments. ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "c1",
                    "value": 0.0001,
                    "defaultValue": 0.0001,
                    "description": "float, optional     Value to control stopping criterion. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "alpha0",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "scalar, optional     Value of `alpha` at start of the optimization. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._linesearch.line_search_armijo",
                    "defaultValue": "scipy.optimize._linesearch.line_search_armijo",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.linesearch.scalar_search_armijo",
            "description": "Minimize over alpha, the function ``phi(alpha)``.\n    \n    Uses the interpolation algorithm (Armijo backtracking) as suggested by\n    Wright and Nocedal in 'Numerical Optimization', 1999, pp. 56-57\n    \n    alpha > 0 is assumed to be a descent direction.\n    \n    Returns\n    -------\n    alpha\n    phi1",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6c9484479fba5cc54e84fb5464476a1bb0aa0469d683a30dcc4e4386a13fc38d",
            "fields": [
                {
                    "name": "phi",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "phi0",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "derphi0",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "c1",
                    "value": 0.0001,
                    "defaultValue": 0.0001,
                    "description": "",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "alpha0",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "amin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._linesearch.scalar_search_armijo",
                    "defaultValue": "scipy.optimize._linesearch.scalar_search_armijo",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.linesearch.scalar_search_wolfe1",
            "description": "Scalar function search for alpha that satisfies strong Wolfe conditions\n    \n    alpha > 0 is assumed to be a descent direction.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6d8bd2845999863a2e46c74dec25647507d6fbbbfad7a4e5cb71f2365557481f",
            "fields": [
                {
                    "name": "phi",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable phi(alpha)     Function at point `alpha` ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "derphi",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable phi'(alpha)     Objective function derivative. Returns a scalar. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "phi0",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Value of phi at 0 ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "old_phi0",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Value of phi at previous point ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "derphi0",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Value derphi at 0 ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "c1",
                    "value": 0.0001,
                    "defaultValue": 0.0001,
                    "description": "float, optional     Parameter for Armijo condition rule. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "c2",
                    "value": 0.9,
                    "defaultValue": 0.9,
                    "description": "float, optional     Parameter for curvature condition rule. amax, ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "amax",
                    "value": 50,
                    "defaultValue": 50,
                    "description": "",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "amin",
                    "value": 1e-08,
                    "defaultValue": 1e-08,
                    "description": "float, optional     Maximum and minimum step size ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "xtol",
                    "value": 1e-14,
                    "defaultValue": 1e-14,
                    "description": "float, optional     Relative tolerance for an acceptable step. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._linesearch.scalar_search_wolfe1",
                    "defaultValue": "scipy.optimize._linesearch.scalar_search_wolfe1",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.linesearch.scalar_search_wolfe2",
            "description": "Find alpha that satisfies strong Wolfe conditions.\n    \n    alpha > 0 is assumed to be a descent direction.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "dab134615f2d28c8383e339fa18d0669dedc03e35454645e18f451772a3eb1e3",
            "fields": [
                {
                    "name": "phi",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable phi(alpha)     Objective scalar function. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "derphi",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable phi'(alpha)     Objective function derivative. Returns a scalar. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "phi0",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Value of phi at 0. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "old_phi0",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Value of phi at previous point. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "derphi0",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Value of derphi at 0 ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "c1",
                    "value": 0.0001,
                    "defaultValue": 0.0001,
                    "description": "float, optional     Parameter for Armijo condition rule. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "c2",
                    "value": 0.9,
                    "defaultValue": 0.9,
                    "description": "float, optional     Parameter for curvature condition rule. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "amax",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Maximum step size. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "extra_condition",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable, optional     A callable of the form ``extra_condition(alpha, phi_value)``     returning a boolean. The line search accepts the value     of ``alpha`` only if this callable returns ``True``.     If the callable returns ``False`` for the step length,     the algorithm will continue with new iterates.     The callable is only called for iterates satisfying     the strong Wolfe conditions. ",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "maxiter",
                    "value": 10,
                    "defaultValue": 10,
                    "description": "int, optional     Maximum number of iterations to perform. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._linesearch.scalar_search_wolfe2",
                    "defaultValue": "scipy.optimize._linesearch.scalar_search_wolfe2",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.linesearch.warn",
            "description": "Issue a warning, or maybe ignore it or raise an exception.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c765e2ea4c756c21de6777eedbc02c09a48b933d4fe0797ca4d3da0eed2f475c",
            "fields": [
                {
                    "name": "message",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "category",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "stacklevel",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "source",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "_warnings.warn",
                    "defaultValue": "_warnings.warn",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.minpack.check_gradient",
            "description": "Perform a simple check on the gradient for correctness.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8e70997510078586ff21c0e24f53fac43cd26d93cb9d61a3c802da8047059703",
            "fields": [
                {
                    "name": "fcn",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "Dfcn",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x0",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "args",
                    "value": "()",
                    "defaultValue": "()",
                    "description": "",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "col_deriv",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._minpack_py.check_gradient",
                    "defaultValue": "scipy.optimize._minpack_py.check_gradient",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.minpack.issubdtype",
            "description": "Returns True if first argument is a typecode lower/equal in type hierarchy.\n    \n    This is like the builtin :func:`issubclass`, but for `dtype`\\ s.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "db3c06b8ca41e5744929dfbf417fa1567f89cefac82ab9e69336be1763b1f83e",
            "fields": [
                {
                    "name": "arg1",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "arg2",
                    "value": null,
                    "defaultValue": null,
                    "description": "dtype_like     `dtype` or object coercible to one ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.issubdtype",
                    "defaultValue": "numpy.issubdtype",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.minpack.prepare_bounds",
            "description": "No description found",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "18aca58549230340c4d340974936156340f9ec1e8a3427e0bb03750b090a7942",
            "fields": [
                {
                    "name": "bounds",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "n",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._lsq.least_squares.prepare_bounds",
                    "defaultValue": "scipy.optimize._lsq.least_squares.prepare_bounds",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.minpack.shape",
            "description": "Return the shape of an array.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "478a5f1b69e57bf3e7fcdd8d122b33eaf8cea0bd2b714d4b5f28f70d4a20b43d",
            "fields": [
                {
                    "name": "a",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     Input array. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.shape",
                    "defaultValue": "numpy.shape",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.minpack.take",
            "description": "Take elements from an array along an axis.\n    \n    When axis is not None, this function does the same thing as \"fancy\"\n    indexing (indexing arrays using arrays); however, it can be easier to use\n    if you need elements along a given axis. A call such as\n    ``np.take(arr, indices, axis=3)`` is equivalent to\n    ``arr[:,:,:,indices,...]``.\n    \n    Explained without fancy indexing, this is equivalent to the following use\n    of `ndindex`, which sets each of ``ii``, ``jj``, and ``kk`` to a tuple of\n    indices::\n    \n        Ni, Nk = a.shape[:axis], a.shape[axis+1:]\n        Nj = indices.shape\n        for ii in ndindex(Ni):\n            for jj in ndindex(Nj):\n                for kk in ndindex(Nk):\n                    out[ii + jj + kk] = a[ii + (indices[jj],) + kk]",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "610bf0859d771c7f0d6d247a6c508e84fa5ec320d7341121536585ff3d2166ce",
            "fields": [
                {
                    "name": "a",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like (Ni..., M, Nk...)     The source array. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "indices",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like (Nj...)     The indices of the values to extract.      .. versionadded:: 1.8.0      Also allow scalars for indices. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "axis",
                    "value": null,
                    "defaultValue": null,
                    "description": "int, optional     The axis over which to select values. By default, the flattened     input array is used. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "out",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray, optional (Ni..., Nj..., Nk...)     If provided, the result will be placed in this array. It should     be of the appropriate shape and dtype. Note that `out` is always     buffered if `mode='raise'`; use other modes for better performance. ",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mode",
                    "value": "raise",
                    "defaultValue": "raise",
                    "description": "{'raise', 'wrap', 'clip'}, optional     Specifies how out-of-bounds indices will behave.      * 'raise' -- raise an error (default)     * 'wrap' -- wrap around     * 'clip' -- clip to the range      'clip' mode means that all indices that are too large are replaced     by the index that addresses the last element along that axis. Note     that this disables indexing with negative numbers. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.take",
                    "defaultValue": "numpy.take",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.nonlin.asjacobian",
            "description": "Convert given object to one suitable for use as a Jacobian.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "26886749742618c06533ecfd4aa2c715f77496251996d56f8960205023bd7ceb",
            "fields": [
                {
                    "name": "J",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._nonlin.asjacobian",
                    "defaultValue": "scipy.optimize._nonlin.asjacobian",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.nonlin.maxnorm",
            "description": "No description found",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e5adb76546beac312361b96f96b71ffab8722aa3cfcccb17796e7aa03a9caf92",
            "fields": [
                {
                    "name": "x",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._nonlin.maxnorm",
                    "defaultValue": "scipy.optimize._nonlin.maxnorm",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.nonlin.nonlin_solve",
            "description": "Find a root of a function, in a way suitable for large-scale problems.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8ade2d0466e1a5dab0c1d05b640aa6f37c78cdbe75c68c35b72630cbd4634830",
            "fields": [
                {
                    "name": "F",
                    "value": null,
                    "defaultValue": null,
                    "description": "function(x) -> f     Function whose root to find; should take and return an array-like     object. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x0",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "jacobian",
                    "value": "krylov",
                    "defaultValue": "krylov",
                    "description": "Jacobian     A Jacobian ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "iter",
                    "value": null,
                    "defaultValue": null,
                    "description": "int, optional     Number of iterations to make. If omitted (default), make as many     as required to meet tolerances. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "verbose",
                    "value": false,
                    "defaultValue": false,
                    "description": "bool, optional     Print status to stdout on every iteration. ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "maxiter",
                    "value": null,
                    "defaultValue": null,
                    "description": "int, optional     Maximum number of iterations to make. If more are needed to     meet convergence, `NoConvergence` is raised. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "f_tol",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Absolute tolerance (in max-norm) for the residual.     If omitted, default is 6e-6. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "f_rtol",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Relative tolerance for the residual. If omitted, not used. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x_tol",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Absolute minimum step size, as determined from the Jacobian     approximation. If the step size is smaller than this, optimization     is terminated as successful. If omitted, not used. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x_rtol",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional     Relative minimum step size. If omitted, not used. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "tol_norm",
                    "value": null,
                    "defaultValue": null,
                    "description": "function(vector) -> scalar, optional     Norm to use in convergence check. Default is the maximum norm. ",
                    "type": "vector",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "line_search",
                    "value": "armijo",
                    "defaultValue": "armijo",
                    "description": "{None, 'armijo' (default), 'wolfe'}, optional     Which type of a line search to use to determine the step size in the     direction given by the Jacobian approximation. Defaults to 'armijo'. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "callback",
                    "value": null,
                    "defaultValue": null,
                    "description": "function, optional     Optional callback function. It is called on every iteration as     ``callback(x, f)`` where `x` is the current solution and `f`     the corresponding residual. ",
                    "type": "function",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "full_output",
                    "value": false,
                    "defaultValue": false,
                    "description": "",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "raise_exception",
                    "value": true,
                    "defaultValue": true,
                    "description": "",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._nonlin.nonlin_solve",
                    "defaultValue": "scipy.optimize._nonlin.nonlin_solve",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.nonlin.vdot",
            "description": "\nReturn the dot product of two vectors.\n\nThe vdot(`a`, `b`) function handles complex numbers differently than\ndot(`a`, `b`).  If the first argument is complex the complex conjugate\nof the first argument is used for the calculation of the dot product.\n\nNote that `vdot` handles multidimensional arrays differently than `dot`:\nit does *not* perform a matrix product, but flattens input arguments\nto 1-D vectors first. Consequently, it should only be used for vectors.\n\nParameters\n----------\na : array_like\n    If `a` is complex the complex conjugate is taken before calculation\n    of the dot product.\nb : array_like\n    Second argument to the dot product.\n\nReturns\n-------\noutput : ndarray\n    Dot product of `a` and `b`.  Can be an int, float, or\n    complex depending on the types of `a` and `b`.\n\nSee Also\n--------\ndot : Return the dot product without using the complex conjugate of the\n      first argument.\n\nExamples\n--------\n>>> a = np.array([1+2j,3+4j])\n>>> b = np.array([5+6j,7+8j])\n>>> np.vdot(a, b)\n(70-8j)\n>>> np.vdot(b, a)\n(70+8j)\n\nNote that higher-dimensional arrays are flattened!\n\n>>> a = np.array([[1, 4], [5, 6]])\n>>> b = np.array([[4, 1], [2, 2]])\n>>> np.vdot(a, b)\n30\n>>> np.vdot(b, a)\n30\n>>> 1*4 + 4*1 + 5*2 + 6*2\n30",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "73f3cc7f1cd5d2575e5be1c9891cba0e9d1b9b1f34097e6940f33ca22335d814",
            "fields": [
                {
                    "name": "a",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "array_like     If `a` is complex the complex conjugate is taken before calculation     of the dot product. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "b",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "array_like     Second argument to the dot product. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.vdot",
                    "defaultValue": "numpy.vdot",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.optimize.approx_derivative",
            "description": "Compute finite difference approximation of the derivatives of a\n    vector-valued function.\n    \n    If a function maps from R^n to R^m, its derivatives form m-by-n matrix\n    called the Jacobian, where an element (i, j) is a partial derivative of\n    f[i] with respect to x[j].",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "60290747ca762b15c4418f67e6a3ca7b5e95b4b6df52f536297e67e083818e7a",
            "fields": [
                {
                    "name": "fun",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable     Function of which to estimate the derivatives. The argument x     passed to this function is ndarray of shape (n,) (never a scalar     even if n=1). It must return 1-D array_like of shape (m,) or a scalar. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x0",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like of shape (n,) or float     Point at which to estimate the derivatives. Float will be converted     to a 1-D array. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "method",
                    "value": "3-point",
                    "defaultValue": "3-point",
                    "description": "{'3-point', '2-point', 'cs'}, optional     Finite difference method to use:         - '2-point' - use the first order accuracy forward or backward                       difference.         - '3-point' - use central difference in interior points and the                       second order accuracy forward or backward difference                       near the boundary.         - 'cs' - use a complex-step finite difference scheme. This assumes                  that the user function is real-valued and can be                  analytically continued to the complex plane. Otherwise,                  produces bogus results. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "rel_step",
                    "value": null,
                    "defaultValue": null,
                    "description": "None or array_like, optional     Relative step size to use. If None (default) the absolute step size is     computed as ``h = rel_step * sign(x0) * max(1, abs(x0))``, with     `rel_step` being selected automatically, see Notes. Otherwise     ``h = rel_step * sign(x0) * abs(x0)``. For ``method='3-point'`` the     sign of `h` is ignored. The calculated step size is possibly adjusted     to fit into the bounds. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "abs_step",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like, optional     Absolute step size to use, possibly adjusted to fit into the bounds.     For ``method='3-point'`` the sign of `abs_step` is ignored. By default     relative steps are used, only if ``abs_step is not None`` are absolute     steps used. ",
                    "type": "array_like",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "f0",
                    "value": null,
                    "defaultValue": null,
                    "description": "None or array_like, optional     If not None it is assumed to be equal to ``fun(x0)``, in this case     the ``fun(x0)`` is not called. Default is None. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "bounds",
                    "value": "(-inf, inf)",
                    "defaultValue": "(-inf, inf)",
                    "description": "tuple of array_like, optional     Lower and upper bounds on independent variables. Defaults to no bounds.     Each bound must match the size of `x0` or be a scalar, in the latter     case the bound will be the same for all variables. Use it to limit the     range of function evaluation. Bounds checking is not implemented     when `as_linear_operator` is True. ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "sparsity",
                    "value": null,
                    "defaultValue": null,
                    "description": "{None, array_like, sparse matrix, 2-tuple}, optional     Defines a sparsity structure of the Jacobian matrix. If the Jacobian     matrix is known to have only few non-zero elements in each row, then     it's possible to estimate its several columns by a single function     evaluation [3]_. To perform such economic computations two ingredients     are required:      * ",
                    "type": "{None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "as_linear_operator",
                    "value": false,
                    "defaultValue": false,
                    "description": "bool, optional     When True the function returns an `scipy.sparse.linalg.LinearOperator`.     Otherwise it returns a dense array or a sparse matrix depending on     `sparsity`. The linear operator provides an efficient way of computing     ``J.dot(p)`` for any vector ``p`` of shape (n,), but does not allow     direct access to individual elements of the matrix. By default     `as_linear_operator` is False. args, ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "args",
                    "value": "()",
                    "defaultValue": "()",
                    "description": "",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "kwargs",
                    "value": {},
                    "defaultValue": {},
                    "description": "tuple and dict, optional     Additional arguments passed to `fun`. Both empty by default.     The calling signature is ``fun(x, *args, **kwargs)``. ",
                    "type": "dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._numdiff.approx_derivative",
                    "defaultValue": "scipy.optimize._numdiff.approx_derivative",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.optimize.approx_fhess_p",
            "description": "No description found",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "90bc9e7cc7c747dd544255c7f9fa40ca423c808c6018d0202923a50c91b0f3d4",
            "fields": [
                {
                    "name": "x0",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "p",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "fprime",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "epsilon",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "args",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._optimize.approx_fhess_p",
                    "defaultValue": "scipy.optimize._optimize.approx_fhess_p",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.optimize.argmin",
            "description": "Returns the indices of the minimum values along an axis.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4dcad56496524a6e320321453be15756dfe0f360a3d1d78405b1e07b935bdf26",
            "fields": [
                {
                    "name": "a",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     Input array. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "axis",
                    "value": null,
                    "defaultValue": null,
                    "description": "int, optional     By default, the index is into the flattened array, otherwise     along the specified axis. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "out",
                    "value": null,
                    "defaultValue": null,
                    "description": "array, optional     If provided, the result will be inserted into this array. It should     be of the appropriate shape and dtype. ",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "keepdims",
                    "value": "_NoValueType",
                    "defaultValue": "_NoValueType",
                    "description": "bool, optional     If this is set to True, the axes which are reduced are left     in the result as dimensions with size one. With this option,     the result will broadcast correctly against the array.      .. versionadded:: 1.22.0 ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.argmin",
                    "defaultValue": "numpy.argmin",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.optimize.asfarray",
            "description": "Return an array converted to a float type.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d90212fda0acfe27ca0edf3ee475f9ca63603758a7b6496a0346f1aef6d591d4",
            "fields": [
                {
                    "name": "a",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     The input array. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dtype",
                    "value": null,
                    "defaultValue": null,
                    "description": "str or dtype object, optional     Float type code to coerce input array `a`.  If `dtype` is one of the     'int' dtypes, it is replaced with float64. ",
                    "type": "type",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.asfarray",
                    "defaultValue": "numpy.asfarray",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.optimize.is_array_scalar",
            "description": "Test whether `x` is either a scalar or an array scalar.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "343b9c57365ddb6b7441137d113322c068157126b3b5b123d256db907a3feb1a",
            "fields": [
                {
                    "name": "x",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._optimize.is_array_scalar",
                    "defaultValue": "scipy.optimize._optimize.is_array_scalar",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.optimize.main",
            "description": "No description found",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "0c95915ef35d7120098fc0d48cfd7f6f088bb010f42b8e0610406ee1258a8e0e",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._optimize.main",
                    "defaultValue": "scipy.optimize._optimize.main",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.optimize.squeeze",
            "description": "Remove axes of length one from `a`.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7429dff65eb9775ea4c1fb7dbc36ed543aaa5534d2e60a8e73f5af10ae381eb1",
            "fields": [
                {
                    "name": "a",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     Input data. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "axis",
                    "value": null,
                    "defaultValue": null,
                    "description": "None or int or tuple of ints, optional     .. versionadded:: 1.7.0      Selects a subset of the entries of length one in the     shape. If an axis is selected with shape entry greater than     one, an error is raised. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.squeeze",
                    "defaultValue": "numpy.squeeze",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.optimize.vecnorm",
            "description": "No description found",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f348f26da99cead14a582d5ec0ad4e5b00ef7d3638a8399b61166a4c12684a75",
            "fields": [
                {
                    "name": "x",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "ord",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._optimize.vecnorm",
                    "defaultValue": "scipy.optimize._optimize.vecnorm",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.slsqp.append",
            "description": "Append values to the end of an array.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "dff44e48efcc86b096b234e31a0f81e39020694f5182f13eff93a569f4578bb8",
            "fields": [
                {
                    "name": "arr",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     Values are appended to a copy of this array. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "values",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     These values are appended to a copy of `arr`.  It must be of the     correct shape (the same shape as `arr`, excluding `axis`).  If     `axis` is not specified, `values` can be any shape and will be     flattened before use. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "axis",
                    "value": null,
                    "defaultValue": null,
                    "description": "int, optional     The axis along which `values` are appended.  If `axis` is not     given, both `arr` and `values` are flattened before use. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.append",
                    "defaultValue": "numpy.append",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.slsqp.approx_jacobian",
            "description": "Approximate the Jacobian matrix of a callable function.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "eb1480107c7a4bfebbc5b406dda57d7975aed453b0ff52fe8da2e415fd65297c",
            "fields": [
                {
                    "name": "x",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     The state vector at which to compute the Jacobian matrix. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "func",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable f(x,*args)     The vector-valued function. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "epsilon",
                    "value": null,
                    "defaultValue": null,
                    "description": "float     The perturbation used to determine the partial derivatives. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "args",
                    "value": null,
                    "defaultValue": null,
                    "description": "sequence     Additional arguments passed to func. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._slsqp_py.approx_jacobian",
                    "defaultValue": "scipy.optimize._slsqp_py.approx_jacobian",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.slsqp.vstack",
            "description": "Stack arrays in sequence vertically (row wise).\n    \n    This is equivalent to concatenation along the first axis after 1-D arrays\n    of shape `(N,)` have been reshaped to `(1,N)`. Rebuilds arrays divided by\n    `vsplit`.\n    \n    This function makes most sense for arrays with up to 3 dimensions. For\n    instance, for pixel-data with a height (first axis), width (second axis),\n    and r/g/b channels (third axis). The functions `concatenate`, `stack` and\n    `block` provide more general stacking and concatenation operations.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "18287da3f98cd02ebc6ae0432691cd85cf3050778a17b68d18f31c35136ff33c",
            "fields": [
                {
                    "name": "tup",
                    "value": null,
                    "defaultValue": null,
                    "description": "sequence of ndarrays     The arrays must have the same shape along all but the first axis.     1-D arrays must have the same length. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.vstack",
                    "defaultValue": "numpy.vstack",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.zeros.namedtuple",
            "description": "Returns a new subclass of tuple with named fields.\n    \n    >>> Point = namedtuple('Point', ['x', 'y'])\n    >>> Point.__doc__                   # docstring for the new class\n    'Point(x, y)'\n    >>> p = Point(11, y=22)             # instantiate with positional args or keywords\n    >>> p[0] + p[1]                     # indexable like a plain tuple\n    33\n    >>> x, y = p                        # unpack like a regular tuple\n    >>> x, y\n    (11, 22)\n    >>> p.x + p.y                       # fields also accessible by name\n    33\n    >>> d = p._asdict()                 # convert to a dictionary\n    >>> d['x']\n    11\n    >>> Point(**d)                      # convert from a dictionary\n    Point(x=11, y=22)\n    >>> p._replace(x=100)               # _replace() is like str.replace() but targets named fields\n    Point(x=100, y=22)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1b4b7270296209d44ecf052ab86333086e4fab1c9fd00b9969d30bd3e94fec72",
            "fields": [
                {
                    "name": "typename",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "field_names",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "rename",
                    "value": false,
                    "defaultValue": false,
                    "description": "",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "defaults",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "module",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "collections.namedtuple",
                    "defaultValue": "collections.namedtuple",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.optimize.zeros.results_c",
            "description": "No description found",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "055457de40b1711be8b4d1025c1bcef78ba154712519552859b3e405303c5636",
            "fields": [
                {
                    "name": "full_output",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "r",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.optimize._zeros_py.results_c",
                    "defaultValue": "scipy.optimize._zeros_py.results_c",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        }
    ],
    "linkDataArray": []
}