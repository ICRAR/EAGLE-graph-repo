{
    "modelData": {
        "filePath": "scipy_linalg.palette",
        "fileType": "Palette",
        "shortDescription": "",
        "detailedDescription": "====================================\nLinear algebra (:mod:`scipy.linalg`)\n====================================\n\n.. currentmodule:: scipy.linalg\n\n.. toctree::\n   :hidden:\n\n   linalg.blas\n   linalg.cython_blas\n   linalg.cython_lapack\n   linalg.interpolative\n   linalg.lapack\n\nLinear algebra functions.\n\n.. eventually, we should replace the numpy.linalg HTML link with just `numpy.linalg`\n\n.. seealso::\n\n   `numpy.linalg <https://www.numpy.org/devdocs/reference/routines.linalg.html>`__\n   for more linear algebra functions. Note that\n   although `scipy.linalg` imports most of them, identically named\n   functions from `scipy.linalg` may offer more or slightly differing\n   functionality.\n\n\nBasics\n======\n\n.. autosummary::\n   :toctree: generated/\n\n   inv - Find the inverse of a square matrix\n   solve - Solve a linear system of equations\n   solve_banded - Solve a banded linear system\n   solveh_banded - Solve a Hermitian or symmetric banded system\n   solve_circulant - Solve a circulant system\n   solve_triangular - Solve a triangular matrix\n   solve_toeplitz - Solve a toeplitz matrix\n   matmul_toeplitz - Multiply a Toeplitz matrix with an array.\n   det - Find the determinant of a square matrix\n   norm - Matrix and vector norm\n   lstsq - Solve a linear least-squares problem\n   pinv - Pseudo-inverse (Moore-Penrose) using lstsq\n   pinvh - Pseudo-inverse of hermitian matrix\n   kron - Kronecker product of two arrays\n   khatri_rao - Khatri-Rao product of two arrays\n   orthogonal_procrustes - Solve an orthogonal Procrustes problem\n   matrix_balance - Balance matrix entries with a similarity transformation\n   subspace_angles - Compute the subspace angles between two matrices\n   bandwidth - Return the lower and upper bandwidth of an array\n   issymmetric - Check if a square 2D array is symmetric\n   ishermitian - Check if a square 2D array is Hermitian\n   LinAlgError\n   LinAlgWarning\n\nEigenvalue Problems\n===================\n\n.. autosummary::\n   :toctree: generated/\n\n   eig - Find the eigenvalues and eigenvectors of a square matrix\n   eigvals - Find just the eigenvalues of a square matrix\n   eigh - Find the e-vals and e-vectors of a Hermitian or symmetric matrix\n   eigvalsh - Find just the eigenvalues of a Hermitian or symmetric matrix\n   eig_banded - Find the eigenvalues and eigenvectors of a banded matrix\n   eigvals_banded - Find just the eigenvalues of a banded matrix\n   eigh_tridiagonal - Find the eigenvalues and eigenvectors of a tridiagonal matrix\n   eigvalsh_tridiagonal - Find just the eigenvalues of a tridiagonal matrix\n\nDecompositions\n==============\n\n.. autosummary::\n   :toctree: generated/\n\n   lu - LU decomposition of a matrix\n   lu_factor - LU decomposition returning unordered matrix and pivots\n   lu_solve - Solve Ax=b using back substitution with output of lu_factor\n   svd - Singular value decomposition of a matrix\n   svdvals - Singular values of a matrix\n   diagsvd - Construct matrix of singular values from output of svd\n   orth - Construct orthonormal basis for the range of A using svd\n   null_space - Construct orthonormal basis for the null space of A using svd\n   ldl - LDL.T decomposition of a Hermitian or a symmetric matrix.\n   cholesky - Cholesky decomposition of a matrix\n   cholesky_banded - Cholesky decomp. of a sym. or Hermitian banded matrix\n   cho_factor - Cholesky decomposition for use in solving a linear system\n   cho_solve - Solve previously factored linear system\n   cho_solve_banded - Solve previously factored banded linear system\n   polar - Compute the polar decomposition.\n   qr - QR decomposition of a matrix\n   qr_multiply - QR decomposition and multiplication by Q\n   qr_update - Rank k QR update\n   qr_delete - QR downdate on row or column deletion\n   qr_insert - QR update on row or column insertion\n   rq - RQ decomposition of a matrix\n   qz - QZ decomposition of a pair of matrices\n   ordqz - QZ decomposition of a pair of matrices with reordering\n   schur - Schur decomposition of a matrix\n   rsf2csf - Real to complex Schur form\n   hessenberg - Hessenberg form of a matrix\n   cdf2rdf - Complex diagonal form to real diagonal block form\n   cossin - Cosine sine decomposition of a unitary or orthogonal matrix\n\n.. seealso::\n\n   `scipy.linalg.interpolative` -- Interpolative matrix decompositions\n\n\nMatrix Functions\n================\n\n.. autosummary::\n   :toctree: generated/\n\n   expm - Matrix exponential\n   logm - Matrix logarithm\n   cosm - Matrix cosine\n   sinm - Matrix sine\n   tanm - Matrix tangent\n   coshm - Matrix hyperbolic cosine\n   sinhm - Matrix hyperbolic sine\n   tanhm - Matrix hyperbolic tangent\n   signm - Matrix sign\n   sqrtm - Matrix square root\n   funm - Evaluating an arbitrary matrix function\n   expm_frechet - Frechet derivative of the matrix exponential\n   expm_cond - Relative condition number of expm in the Frobenius norm\n   fractional_matrix_power - Fractional matrix power\n\n\nMatrix Equation Solvers\n=======================\n\n.. autosummary::\n   :toctree: generated/\n\n   solve_sylvester - Solve the Sylvester matrix equation\n   solve_continuous_are - Solve the continuous-time algebraic Riccati equation\n   solve_discrete_are - Solve the discrete-time algebraic Riccati equation\n   solve_continuous_lyapunov - Solve the continuous-time Lyapunov equation\n   solve_discrete_lyapunov - Solve the discrete-time Lyapunov equation\n\n\nSketches and Random Projections\n===============================\n\n.. autosummary::\n   :toctree: generated/\n\n   clarkson_woodruff_transform - Applies the Clarkson Woodruff Sketch (a.k.a CountMin Sketch)\n\nSpecial Matrices\n================\n\n.. autosummary::\n   :toctree: generated/\n\n   block_diag - Construct a block diagonal matrix from submatrices\n   circulant - Circulant matrix\n   companion - Companion matrix\n   convolution_matrix - Convolution matrix\n   dft - Discrete Fourier transform matrix\n   fiedler - Fiedler matrix\n   fiedler_companion - Fiedler companion matrix\n   hadamard - Hadamard matrix of order 2**n\n   hankel - Hankel matrix\n   helmert - Helmert matrix\n   hilbert - Hilbert matrix\n   invhilbert - Inverse Hilbert matrix\n   leslie - Leslie matrix\n   pascal - Pascal matrix\n   invpascal - Inverse Pascal matrix\n   toeplitz - Toeplitz matrix\n\nLow-level routines\n==================\n\n.. autosummary::\n   :toctree: generated/\n\n   get_blas_funcs\n   get_lapack_funcs\n   find_best_blas_type\n\n.. seealso::\n\n   `scipy.linalg.blas` -- Low-level BLAS functions\n\n   `scipy.linalg.lapack` -- Low-level LAPACK functions\n\n   `scipy.linalg.cython_blas` -- Low-level BLAS functions for Cython\n\n   `scipy.linalg.cython_lapack` -- Low-level LAPACK functions for Cython",
        "repoService": "",
        "repoBranch": "",
        "repo": "",
        "generatorName": "dlg_paletteGen",
        "generatorVersion": "0.6.3",
        "generatorCommitHash": "",
        "schemaVersion": "AppRef",
        "readonly": true,
        "repositoryUrl": "scipy",
        "commitHash": "0.1",
        "downloadUrl": "",
        "signature": "c30bcecec28e31ebc46f44eb0ee4452792aa803b71c69722428a3cea26254051",
        "lastModifiedName": "wici",
        "lastModifiedEmail": "",
        "lastModifiedDatetime": 1755100437.17093,
        "numLGNodes": 206
    },
    "nodeDataArray": [
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "4kk0xy6g",
            "name": "LinAlgWarning.add_note",
            "description": "Exception.add_note(note) --\nadd a note to the exception",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b0edd8b03829c45ced99bde6c92540cf80a43035193b635eefb3f34fd5bc69e7",
            "fields": [
                {
                    "id": "w9zujcxx",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.linalg._misc.LinAlgWarning.add_note object",
                    "type": "Object:scipy.linalg._misc.LinAlgWarning",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u_lg_cc5",
                    "encoding": "",
                    "name": "note",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "324_0r1g",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg._misc.LinAlgWarning.add_note",
                    "defaultValue": "scipy.linalg._misc.LinAlgWarning.add_note",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "etsamlnk",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "talga8us",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "3mup0fkx",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ksu4e4vn",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg._misc.LinAlgWarning",
                    "defaultValue": "scipy.linalg._misc.LinAlgWarning",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9q04hro4",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xuzvyqt9",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "qr6rm46p",
            "name": "LinAlgWarning.with_traceback",
            "description": "Exception.with_traceback(tb) --\nset self.__traceback__ to tb and return self.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ea3bdd3eac7cc58198820235978370beede642e83a245ee8d740fbba5a3d4912",
            "fields": [
                {
                    "id": "j3pc3b8l",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.linalg._misc.LinAlgWarning.with_traceback object",
                    "type": "Object:scipy.linalg._misc.LinAlgWarning",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a4ussige",
                    "encoding": "",
                    "name": "tb",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nk8h6jvv",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg._misc.LinAlgWarning.with_traceback",
                    "defaultValue": "scipy.linalg._misc.LinAlgWarning.with_traceback",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_klox11w",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1wq93s0d",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "h8jt92ke",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sdzl2vvn",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg._misc.LinAlgWarning",
                    "defaultValue": "scipy.linalg._misc.LinAlgWarning",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hakt56lu",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jurgz343",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "bkxjzls1",
            "name": "linalg.bandwidth",
            "description": "bandwidth(a)\n    \n    Return the lower and upper bandwidth of a 2D numeric array.\n    \n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a : ndarray\n        Input array of size (N, M)\n    \n    Returns\n    -------\n    lu : tuple\n        2-tuple of ints indicating the lower and upper bandwidth. A zero\n        denotes no sub- or super-diagonal on that side (triangular), and,\n        say for N rows (N-1) means that side is full. Same example applies\n        to the upper triangular part with (M-1).\n    \n    Raises\n    ------\n    TypeError\n        If the dtype of the array is not supported, in particular, NumPy\n        float16, float128 and complex256 dtypes.\n    \n    Notes\n    -----\n    This helper function simply runs over the array looking for the nonzero\n    entries whether there exists a banded structure in the array or not. Hence,\n    the performance depends on the density of nonzero entries and also\n    memory-layout. Fortran- or C- contiguous arrays are handled best and\n    otherwise suffers from extra random memory access cost.\n    \n    The strategy is to look for only untested band elements in the upper\n    and lower triangular parts separately; depending on the memory layout\n    we scan row-wise or column-wise. Moreover, say we are scanning rows\n    and in the 6th row, 4th entry is nonzero then, on the succeeding rows\n    the horizontal search is done only up to that band entries since we know\n    that band is occupied. Therefore, a completely dense matrix scan cost is\n    in the order of n.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import bandwidth\n    >>> A = np.array([[3., 0., 0., 0., 0.],\n    ...               [0., 4., 0., 0., 0.],\n    ...               [0., 0., 5., 1., 0.],\n    ...               [8., 0., 0., 6., 2.],\n    ...               [0., 9., 0., 0., 7.]])\n    >>> bandwidth(A)\n    (3, 1)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f2b4c04f86a947c61732b5ba7b9f5b36d1cc77cf5de00e8af5a13c97df555115",
            "fields": [
                {
                    "id": "1xwtzrmh",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array of size (N, M)",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n_flogwc",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.bandwidth",
                    "defaultValue": "scipy.linalg.bandwidth",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0w05ymrs",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6reka4w9",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "r_x5fdo9",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "srdrl5qf",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "scks9uey",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2cytiych",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "nlepl19s",
            "name": "linalg.block_diag",
            "description": "Create a block diagonal array from provided arrays.\n    \n    For example, given 2-D inputs `A`, `B` and `C`, the output will have these\n    arrays arranged on the diagonal::\n    \n        [[A, 0, 0],\n         [0, B, 0],\n         [0, 0, C]]\n    \n    Parameters\n    ----------\n    A, B, C, ... : array_like\n        Input arrays.  A 1-D array or array_like sequence of length ``n`` is\n        treated as a 2-D array with shape ``(1, n)``. Any dimensions before\n        the last two are treated as batch dimensions; see :ref:`linalg_batch`.\n    \n    Returns\n    -------\n    D : ndarray\n        Array with `A`, `B`, `C`, ... on the diagonal of the last two\n        dimensions. `D` has the same dtype as the result type of the\n        inputs.\n    \n    Notes\n    -----\n    If all the input arrays are square, the output is known as a\n    block diagonal matrix.\n    \n    Empty sequences (i.e., array-likes of zero size) will not be ignored.\n    Noteworthy, both ``[]`` and ``[[]]`` are treated as matrices with shape\n    ``(1,0)``.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import block_diag\n    >>> A = [[1, 0],\n    ...      [0, 1]]\n    >>> B = [[3, 4, 5],\n    ...      [6, 7, 8]]\n    >>> C = [[7]]\n    >>> P = np.zeros((2, 0), dtype='int32')\n    >>> block_diag(A, B, C)\n    array([[1, 0, 0, 0, 0, 0],\n           [0, 1, 0, 0, 0, 0],\n           [0, 0, 3, 4, 5, 0],\n           [0, 0, 6, 7, 8, 0],\n           [0, 0, 0, 0, 0, 7]])\n    >>> block_diag(A, P, B, C)\n    array([[1, 0, 0, 0, 0, 0],\n           [0, 1, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0],\n           [0, 0, 3, 4, 5, 0],\n           [0, 0, 6, 7, 8, 0],\n           [0, 0, 0, 0, 0, 7]])\n    >>> block_diag(1.0, [2, 3], [[4, 5], [6, 7]])\n    array([[ 1.,  0.,  0.,  0.,  0.],\n           [ 0.,  2.,  3.,  0.,  0.],\n           [ 0.,  0.,  0.,  4.,  5.],\n           [ 0.,  0.,  0.,  6.,  7.]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1e6fd91e1c5ba4f11e368d3718903618d281ba34feee9a9c3707f6ba35a5d85f",
            "fields": [
                {
                    "id": "4_zy2m9o",
                    "encoding": "",
                    "name": "arrs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m2pl4n06",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.block_diag",
                    "defaultValue": "scipy.linalg.block_diag",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2j52c2kh",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d6yfsn2t",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "v3dxhrgc",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rqim985h",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aci_i4r5",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_keuk0n8",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "rcf_itjn",
            "name": "linalg.cdf2rdf",
            "description": "Converts complex eigenvalues ``w`` and eigenvectors ``v`` to real\n    eigenvalues in a block diagonal form ``wr`` and the associated real\n    eigenvectors ``vr``, such that::\n    \n        vr @ wr = X @ vr\n    \n    continues to hold, where ``X`` is the original array for which ``w`` and\n    ``v`` are the eigenvalues and eigenvectors.\n    \n    .. versionadded:: 1.1.0\n    \n    Parameters\n    ----------\n    w : (..., M) array_like\n        Complex or real eigenvalues, an array or stack of arrays\n    \n        Conjugate pairs must not be interleaved, else the wrong result\n        will be produced. So ``[1+1j, 1, 1-1j]`` will give a correct result,\n        but ``[1+1j, 2+1j, 1-1j, 2-1j]`` will not.\n    \n    v : (..., M, M) array_like\n        Complex or real eigenvectors, a square array or stack of square arrays.\n    \n    Returns\n    -------\n    wr : (..., M, M) ndarray\n        Real diagonal block form of eigenvalues\n    vr : (..., M, M) ndarray\n        Real eigenvectors associated with ``wr``\n    \n    See Also\n    --------\n    eig : Eigenvalues and right eigenvectors for non-symmetric arrays\n    rsf2csf : Convert real Schur form to complex Schur form\n    \n    Notes\n    -----\n    ``w``, ``v`` must be the eigenstructure for some *real* matrix ``X``.\n    For example, obtained by ``w, v = scipy.linalg.eig(X)`` or\n    ``w, v = numpy.linalg.eig(X)`` in which case ``X`` can also represent\n    stacked arrays.\n    \n    .. versionadded:: 1.1.0\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> X = np.array([[1, 2, 3], [0, 4, 5], [0, -5, 4]])\n    >>> X\n    array([[ 1,  2,  3],\n           [ 0,  4,  5],\n           [ 0, -5,  4]])\n    \n    >>> from scipy import linalg\n    >>> w, v = linalg.eig(X)\n    >>> w\n    array([ 1.+0.j,  4.+5.j,  4.-5.j])\n    >>> v\n    array([[ 1.00000+0.j     , -0.01906-0.40016j, -0.01906+0.40016j],\n           [ 0.00000+0.j     ,  0.00000-0.64788j,  0.00000+0.64788j],\n           [ 0.00000+0.j     ,  0.64788+0.j     ,  0.64788-0.j     ]])\n    \n    >>> wr, vr = linalg.cdf2rdf(w, v)\n    >>> wr\n    array([[ 1.,  0.,  0.],\n           [ 0.,  4.,  5.],\n           [ 0., -5.,  4.]])\n    >>> vr\n    array([[ 1.     ,  0.40016, -0.01906],\n           [ 0.     ,  0.64788,  0.     ],\n           [ 0.     ,  0.     ,  0.64788]])\n    \n    >>> vr @ wr\n    array([[ 1.     ,  1.69593,  1.9246 ],\n           [ 0.     ,  2.59153,  3.23942],\n           [ 0.     , -3.23942,  2.59153]])\n    >>> X @ vr\n    array([[ 1.     ,  1.69593,  1.9246 ],\n           [ 0.     ,  2.59153,  3.23942],\n           [ 0.     , -3.23942,  2.59153]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4968aa04fb1bc3c2584a75f10ffe24232ce501e465c67d88f9d601e101fa7078",
            "fields": [
                {
                    "id": "5soi50mu",
                    "encoding": "",
                    "name": "w",
                    "value": "",
                    "defaultValue": "",
                    "description": "Complex or real eigenvalues, an array or stack of arrays\n\nConjugate pairs must not be interleaved, else the wrong result\nwill be produced. So ``[1+1j, 1, 1-1j]`` will give a correct result,\nbut ``[1+1j, 2+1j, 1-1j, 2-1j]`` will not.",
                    "type": "(..., M) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hm63qg3z",
                    "encoding": "",
                    "name": "v",
                    "value": "",
                    "defaultValue": "",
                    "description": "Complex or real eigenvectors, a square array or stack of square arrays.",
                    "type": "(..., M, M) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o__jecwr",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.cdf2rdf",
                    "defaultValue": "scipy.linalg.cdf2rdf",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pd81lsth",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r6bb6yn4",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "j71dxogi",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zr_sj25a",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hdlpoy_j",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9ozg77dx",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "yy6hf_e2",
            "name": "linalg.cho_factor",
            "description": "Compute the Cholesky decomposition of a matrix, to use in cho_solve\n    \n    Returns a matrix containing the Cholesky decomposition,\n    ``A = L L*`` or ``A = U* U`` of a Hermitian positive-definite matrix `a`.\n    The return value can be directly used as the first parameter to cho_solve.\n    \n    .. warning::\n        The returned matrix also contains random data in the entries not\n        used by the Cholesky decomposition. If you need to zero these\n        entries, use the function `cholesky` instead.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a : (M, M) array_like\n        Matrix to be decomposed\n    lower : bool, optional\n        Whether to compute the upper or lower triangular Cholesky factorization.\n        During decomposition, only the selected half of the matrix is referenced.\n        (Default: upper-triangular)\n    overwrite_a : bool, optional\n        Whether to overwrite data in a (may improve performance)\n    check_finite : bool, optional\n        Whether to check that the entire input matrix contains only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    c : (M, M) ndarray\n        Matrix whose upper or lower triangle contains the Cholesky factor\n        of `a`. Other parts of the matrix contain random data.\n    lower : bool\n        Flag indicating whether the factor is in the lower or upper triangle\n    \n    Raises\n    ------\n    LinAlgError\n        Raised if decomposition fails.\n    \n    See Also\n    --------\n    \n    :func:`cho_solve`\n        Solve a linear set equations using the Cholesky factorization of a matrix.\n    \n    \n    Notes\n    -----\n    During the finiteness check (if selected), the entire matrix `a` is\n    checked. During decomposition, `a` is assumed to be symmetric or Hermitian\n    (as applicable), and only the half selected by option `lower` is referenced.\n    Consequently, if `a` is asymmetric/non-Hermitian, `cholesky` may still\n    succeed if the symmetric/Hermitian matrix represented by the selected half\n    is positive definite, yet it may fail if an element in the other half is\n    non-finite.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import cho_factor\n    >>> A = np.array([[9, 3, 1, 5], [3, 7, 5, 1], [1, 5, 9, 2], [5, 1, 2, 6]])\n    >>> c, low = cho_factor(A)\n    >>> c\n    array([[3.        , 1.        , 0.33333333, 1.66666667],\n           [3.        , 2.44948974, 1.90515869, -0.27216553],\n           [1.        , 5.        , 2.29330749, 0.8559528 ],\n           [5.        , 1.        , 2.        , 1.55418563]])\n    >>> np.allclose(np.triu(c).T @ np. triu(c) - A, np.zeros((4, 4)))\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ba85f4dae33414e9bd721f3ae44380f0d5b583f7ce69729fab6bfc7e535c10cd",
            "fields": [
                {
                    "id": "mg_ddlw5",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Matrix to be decomposed",
                    "type": "(M, M) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "46_po0l4",
                    "encoding": "",
                    "name": "lower",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to compute the upper or lower triangular Cholesky factorization.\nDuring decomposition, only the selected half of the matrix is referenced.\n(Default: upper-triangular)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5oegvmku",
                    "encoding": "",
                    "name": "overwrite_a",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to overwrite data in a (may improve performance)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4jy3ym34",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the entire input matrix contains only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wzqbx1rm",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.cho_factor",
                    "defaultValue": "scipy.linalg.cho_factor",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lluofgdk",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ig3g0k4f",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "uf47n8tk",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "by1ejvm_",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "npcl2ifc",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "72fkirvt",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ty8g7xe7",
            "name": "linalg.cho_solve",
            "description": "Solve the linear equations A x = b, given the Cholesky factorization of A.\n    \n    Parameters\n    ----------\n    (c, lower) : tuple, (array, bool)\n        Cholesky factorization of a, as given by cho_factor\n    b : array\n        Right-hand side\n    overwrite_b : bool, optional\n        Whether to overwrite data in b (may improve performance)\n    check_finite : bool, optional\n        Whether to check that the input matrices contain only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    x : array\n        The solution to the system A x = b\n    \n    See Also\n    --------\n    cho_factor : Cholesky factorization of a matrix\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import cho_factor, cho_solve\n    >>> A = np.array([[9, 3, 1, 5], [3, 7, 5, 1], [1, 5, 9, 2], [5, 1, 2, 6]])\n    >>> c, low = cho_factor(A)\n    >>> x = cho_solve((c, low), [1, 1, 1, 1])\n    >>> np.allclose(A @ x - [1, 1, 1, 1], np.zeros(4))\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "29084637f1c9076542aa0422fcfaffcddecf0b36ff5f2a58534cadf086b5d1cf",
            "fields": [
                {
                    "id": "yi2aeui5",
                    "encoding": "",
                    "name": "c_and_lower",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qomxkqem",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "Right-hand side",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cwjzcfk6",
                    "encoding": "",
                    "name": "overwrite_b",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to overwrite data in b (may improve performance)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g5d4kdp7",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrices contain only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "idgirhak",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.cho_solve",
                    "defaultValue": "scipy.linalg.cho_solve",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vmnfkfsj",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4qhr9imh",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "wttfxobi",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gdvboips",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xfsxcs1e",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pf85w7z3",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "dmjheso6",
            "name": "linalg.cho_solve_banded",
            "description": "Solve the linear equations ``A x = b``, given the Cholesky factorization of\n    the banded Hermitian ``A``.\n    \n    Parameters\n    ----------\n    (cb, lower) : tuple, (ndarray, bool)\n        `cb` is the Cholesky factorization of A, as given by cholesky_banded.\n        `lower` must be the same value that was given to cholesky_banded.\n    b : array_like\n        Right-hand side\n    overwrite_b : bool, optional\n        If True, the function will overwrite the values in `b`.\n    check_finite : bool, optional\n        Whether to check that the input matrices contain only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    x : array\n        The solution to the system A x = b\n    \n    See Also\n    --------\n    cholesky_banded : Cholesky factorization of a banded matrix\n    \n    Notes\n    -----\n    \n    .. versionadded:: 0.8.0\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import cholesky_banded, cho_solve_banded\n    >>> Ab = np.array([[0, 0, 1j, 2, 3j], [0, -1, -2, 3, 4], [9, 8, 7, 6, 9]])\n    >>> A = np.diag(Ab[0,2:], k=2) + np.diag(Ab[1,1:], k=1)\n    >>> A = A + A.conj().T + np.diag(Ab[2, :])\n    >>> c = cholesky_banded(Ab)\n    >>> x = cho_solve_banded((c, False), np.ones(5))\n    >>> np.allclose(A @ x - np.ones(5), np.zeros(5))\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "af7a347995f8a5a5caacbca760c3d50ca4fce9efaaed39d8c3ecafdb38e5eb4f",
            "fields": [
                {
                    "id": "jdfc1eya",
                    "encoding": "",
                    "name": "cb_and_lower",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7ssk5j21",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "Right-hand side",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j6jquuie",
                    "encoding": "",
                    "name": "overwrite_b",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, the function will overwrite the values in `b`.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4pwmtbm4",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrices contain only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "owinfoju",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.cho_solve_banded",
                    "defaultValue": "scipy.linalg.cho_solve_banded",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "meig1vzn",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k_af1_z1",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "f1hv3fex",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pcatror5",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ndneutma",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2a1q9i3x",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "60b3_k1m",
            "name": "linalg.cholesky",
            "description": "Compute the Cholesky decomposition of a matrix.\n    \n    Returns the Cholesky decomposition, :math:`A = L L^*` or\n    :math:`A = U^* U` of a Hermitian positive-definite matrix A.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a : (M, M) array_like\n        Matrix to be decomposed\n    lower : bool, optional\n        Whether to compute the upper- or lower-triangular Cholesky\n        factorization. During decomposition, only the selected half of the\n        matrix is referenced. Default is upper-triangular.\n    overwrite_a : bool, optional\n        Whether to overwrite data in `a` (may improve performance).\n    check_finite : bool, optional\n        Whether to check that the entire input matrix contains only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    c : (M, M) ndarray\n        Upper- or lower-triangular Cholesky factor of `a`.\n    \n    Raises\n    ------\n    LinAlgError : if decomposition fails.\n    \n    Notes\n    -----\n    During the finiteness check (if selected), the entire matrix `a` is\n    checked. During decomposition, `a` is assumed to be symmetric or Hermitian\n    (as applicable), and only the half selected by option `lower` is referenced.\n    Consequently, if `a` is asymmetric/non-Hermitian, `cholesky` may still\n    succeed if the symmetric/Hermitian matrix represented by the selected half\n    is positive definite, yet it may fail if an element in the other half is\n    non-finite.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import cholesky\n    >>> a = np.array([[1,-2j],[2j,5]])\n    >>> L = cholesky(a, lower=True)\n    >>> L\n    array([[ 1.+0.j,  0.+0.j],\n           [ 0.+2.j,  1.+0.j]])\n    >>> L @ L.T.conj()\n    array([[ 1.+0.j,  0.-2.j],\n           [ 0.+2.j,  5.+0.j]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9221fb9e653d45f4b41583237a619d64e0bed959cd61c9a60d1fa6df7fdb9514",
            "fields": [
                {
                    "id": "mdz60ra0",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Matrix to be decomposed",
                    "type": "(M, M) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aeq6dv33",
                    "encoding": "",
                    "name": "lower",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to compute the upper- or lower-triangular Cholesky\nfactorization. During decomposition, only the selected half of the\nmatrix is referenced. Default is upper-triangular.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_ng6fmv8",
                    "encoding": "",
                    "name": "overwrite_a",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to overwrite data in `a` (may improve performance).",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ydz5p59b",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the entire input matrix contains only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cxiq886p",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.cholesky",
                    "defaultValue": "scipy.linalg.cholesky",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7gi6sb7w",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_nu1ppe2",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "efutzsat",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9is9cwzy",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "axezaaut",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iu4xjigl",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "e_xen5pz",
            "name": "linalg.cholesky_banded",
            "description": "Cholesky decompose a banded Hermitian positive-definite matrix\n    \n    The matrix a is stored in ab either in lower-diagonal or upper-\n    diagonal ordered form::\n    \n        ab[u + i - j, j] == a[i,j]        (if upper form; i <= j)\n        ab[    i - j, j] == a[i,j]        (if lower form; i >= j)\n    \n    Example of ab (shape of a is (6,6), u=2)::\n    \n        upper form:\n        *   *   a02 a13 a24 a35\n        *   a01 a12 a23 a34 a45\n        a00 a11 a22 a33 a44 a55\n    \n        lower form:\n        a00 a11 a22 a33 a44 a55\n        a10 a21 a32 a43 a54 *\n        a20 a31 a42 a53 *   *\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    ab : (u + 1, M) array_like\n        Banded matrix\n    overwrite_ab : bool, optional\n        Discard data in ab (may enhance performance)\n    lower : bool, optional\n        Is the matrix in the lower form. (Default is upper form)\n    check_finite : bool, optional\n        Whether to check that the input matrix contains only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    c : (u + 1, M) ndarray\n        Cholesky factorization of a, in the same banded format as ab\n    \n    See Also\n    --------\n    \n    :func:`cho_solve_banded`\n        Solve a linear set equations, given the Cholesky factorization of a banded Hermitian.\n    \n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import cholesky_banded\n    >>> from numpy import allclose, zeros, diag\n    >>> Ab = np.array([[0, 0, 1j, 2, 3j], [0, -1, -2, 3, 4], [9, 8, 7, 6, 9]])\n    >>> A = np.diag(Ab[0,2:], k=2) + np.diag(Ab[1,1:], k=1)\n    >>> A = A + A.conj().T + np.diag(Ab[2, :])\n    >>> c = cholesky_banded(Ab)\n    >>> C = np.diag(c[0, 2:], k=2) + np.diag(c[1, 1:], k=1) + np.diag(c[2, :])\n    >>> np.allclose(C.conj().T @ C - A, np.zeros((5, 5)))\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4f40ebb6ebb2fda33111fdf85cb1b5cf6c5438a7ed0c7445a1d053b45ca8849d",
            "fields": [
                {
                    "id": "jv94dh86",
                    "encoding": "",
                    "name": "ab",
                    "value": "",
                    "defaultValue": "",
                    "description": "Banded matrix",
                    "type": "(u + 1, M) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3wxb782o",
                    "encoding": "",
                    "name": "overwrite_ab",
                    "value": false,
                    "defaultValue": false,
                    "description": "Discard data in ab (may enhance performance)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i4td42jz",
                    "encoding": "",
                    "name": "lower",
                    "value": false,
                    "defaultValue": false,
                    "description": "Is the matrix in the lower form. (Default is upper form)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pwgisumx",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrix contains only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a3y_mm31",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.cholesky_banded",
                    "defaultValue": "scipy.linalg.cholesky_banded",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j6dpi17e",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "icxn6y8t",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "dnbflnhk",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "culf67s8",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l296v9gw",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qwcx9bnt",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "4clksinv",
            "name": "linalg.circulant",
            "description": "Construct a circulant matrix.\n    \n    Parameters\n    ----------\n    c : (..., N,)  array_like\n        The first column(s) of the matrix. Multidimensional arrays are treated as a\n        batch: each slice along the last axis is the first column of an output matrix.\n    \n    Returns\n    -------\n    A : (..., N, N) ndarray\n        A circulant matrix whose first column is given by `c`.  For batch input, each\n        slice of shape ``(N, N)`` along the last two dimensions of the output\n        corresponds with a slice of shape ``(N,)`` along the last dimension of the\n        input.\n    \n    \n    See Also\n    --------\n    toeplitz : Toeplitz matrix\n    hankel : Hankel matrix\n    solve_circulant : Solve a circulant system.\n    \n    Notes\n    -----\n    .. versionadded:: 0.8.0\n    \n    Examples\n    --------\n    >>> from scipy.linalg import circulant\n    >>> circulant([1, 2, 3])\n    array([[1, 3, 2],\n           [2, 1, 3],\n           [3, 2, 1]])\n    \n    >>> circulant([[1, 2, 3], [4, 5, 6]])\n    array([[[1, 3, 2],\n            [2, 1, 3],\n            [3, 2, 1]],\n           [[4, 6, 5],\n            [5, 4, 6],\n            [6, 5, 4]]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "fa41c920d90a4de773f083c6d848970de86bd244e8f46813e3566ab936c6530b",
            "fields": [
                {
                    "id": "9hs0hzcb",
                    "encoding": "",
                    "name": "c",
                    "value": "",
                    "defaultValue": "",
                    "description": "The first column(s) of the matrix. Multidimensional arrays are treated as a\nbatch: each slice along the last axis is the first column of an output matrix.",
                    "type": "(..., N,)  arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "houe82du",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.circulant",
                    "defaultValue": "scipy.linalg.circulant",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rlq5heri",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fwummba_",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "y1c0ooko",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8q99c_o_",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q3g_dz2j",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1j3w4hty",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "5p1m4aw1",
            "name": "linalg.clarkson_woodruff_transform",
            "description": "Applies a Clarkson-Woodruff Transform/sketch to the input matrix.\n    \n    Given an input_matrix ``A`` of size ``(n, d)``, compute a matrix ``A'`` of\n    size (sketch_size, d) so that\n    \n    .. math:: \\|Ax\\| \\approx \\|A'x\\|\n    \n    with high probability via the Clarkson-Woodruff Transform, otherwise\n    known as the CountSketch matrix.\n    \n    Parameters\n    ----------\n    input_matrix : array_like, shape (..., n, d)\n        Input matrix.\n    sketch_size : int\n        Number of rows for the sketch.\n    rng : {None, int, `numpy.random.Generator`}, optional\n        If `rng` is passed by keyword, types other than `numpy.random.Generator` are\n        passed to `numpy.random.default_rng` to instantiate a ``Generator``.\n        If `rng` is already a ``Generator`` instance, then the provided instance is\n        used. Specify `rng` for repeatable function behavior.\n    \n        If this argument is passed by position or `seed` is passed by keyword,\n        legacy behavior for the argument `seed` applies:\n    \n        - If `seed` is None (or `numpy.random`), the `numpy.random.RandomState`\n          singleton is used.\n        - If `seed` is an int, a new ``RandomState`` instance is used,\n          seeded with `seed`.\n        - If `seed` is already a ``Generator`` or ``RandomState`` instance then\n          that instance is used.\n    \n        .. versionchanged:: 1.15.0\n            As part of the `SPEC-007 <https://scientific-python.org/specs/spec-0007/>`_\n            transition from use of `numpy.random.RandomState` to\n            `numpy.random.Generator`, this keyword was changed from `seed` to `rng`.\n            For an interim period, both keywords will continue to work, although only one\n            may be specified at a time. After the interim period, function calls using the\n            `seed` keyword will emit warnings. The behavior of both `seed` and\n            `rng` are outlined above, but only the `rng` keyword should be used in new code.\n            \n    \n    Returns\n    -------\n    A' : array_like\n        Sketch of the input matrix ``A``, of size ``(sketch_size, d)``.\n    \n    Notes\n    -----\n    To make the statement\n    \n    .. math:: \\|Ax\\| \\approx \\|A'x\\|\n    \n    precise, observe the following result which is adapted from the\n    proof of Theorem 14 of [2]_ via Markov's Inequality. If we have\n    a sketch size ``sketch_size=k`` which is at least\n    \n    .. math:: k \\geq \\frac{2}{\\epsilon^2\\delta}\n    \n    Then for any fixed vector ``x``,\n    \n    .. math:: \\|Ax\\| = (1\\pm\\epsilon)\\|A'x\\|\n    \n    with probability at least one minus delta.\n    \n    This implementation takes advantage of sparsity: computing\n    a sketch takes time proportional to ``A.nnz``. Data ``A`` which\n    is in ``scipy.sparse.csc_matrix`` format gives the quickest\n    computation time for sparse input.\n    \n    >>> import numpy as np\n    >>> from scipy import linalg\n    >>> from scipy import sparse\n    >>> rng = np.random.default_rng()\n    >>> n_rows, n_columns, density, sketch_n_rows = 15000, 100, 0.01, 200\n    >>> A = sparse.rand(n_rows, n_columns, density=density, format='csc')\n    >>> B = sparse.rand(n_rows, n_columns, density=density, format='csr')\n    >>> C = sparse.rand(n_rows, n_columns, density=density, format='coo')\n    >>> D = rng.standard_normal((n_rows, n_columns))\n    >>> SA = linalg.clarkson_woodruff_transform(A, sketch_n_rows) # fastest\n    >>> SB = linalg.clarkson_woodruff_transform(B, sketch_n_rows) # fast\n    >>> SC = linalg.clarkson_woodruff_transform(C, sketch_n_rows) # slower\n    >>> SD = linalg.clarkson_woodruff_transform(D, sketch_n_rows) # slowest\n    \n    That said, this method does perform well on dense inputs, just slower\n    on a relative scale.\n    \n    References\n    ----------\n    .. [1] Kenneth L. Clarkson and David P. Woodruff. Low rank approximation\n           and regression in input sparsity time. In STOC, 2013.\n    .. [2] David P. Woodruff. Sketching as a tool for numerical linear algebra.\n           In Foundations and Trends in Theoretical Computer Science, 2014.\n    \n    Examples\n    --------\n    Create a big dense matrix ``A`` for the example:\n    \n    >>> import numpy as np\n    >>> from scipy import linalg\n    >>> n_rows, n_columns  = 15000, 100\n    >>> rng = np.random.default_rng()\n    >>> A = rng.standard_normal((n_rows, n_columns))\n    \n    Apply the transform to create a new matrix with 200 rows:\n    \n    >>> sketch_n_rows = 200\n    >>> sketch = linalg.clarkson_woodruff_transform(A, sketch_n_rows, seed=rng)\n    >>> sketch.shape\n    (200, 100)\n    \n    Now with high probability, the true norm is close to the sketched norm\n    in absolute value.\n    \n    >>> linalg.norm(A)\n    1224.2812927123198\n    >>> linalg.norm(sketch)\n    1226.518328407333\n    \n    Similarly, applying our sketch preserves the solution to a linear\n    regression of :math:`\\min \\|Ax - b\\|`.\n    \n    >>> b = rng.standard_normal(n_rows)\n    >>> x = linalg.lstsq(A, b)[0]\n    >>> Ab = np.hstack((A, b.reshape(-1, 1)))\n    >>> SAb = linalg.clarkson_woodruff_transform(Ab, sketch_n_rows, seed=rng)\n    >>> SA, Sb = SAb[:, :-1], SAb[:, -1]\n    >>> x_sketched = linalg.lstsq(SA, Sb)[0]\n    \n    As with the matrix norm example, ``linalg.norm(A @ x - b)`` is close\n    to ``linalg.norm(A @ x_sketched - b)`` with high probability.\n    \n    >>> linalg.norm(A @ x - b)\n    122.83242365433877\n    >>> linalg.norm(A @ x_sketched - b)\n    166.58473879945151",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6de60e64e7b3973c69ea297bb47a4d5aa03bce063294763309a892eb341ce257",
            "fields": [
                {
                    "id": "x92hliw4",
                    "encoding": "",
                    "name": "input_matrix",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input matrix.",
                    "type": "arraylike, shape (..., n, d)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i4i7_l_h",
                    "encoding": "",
                    "name": "sketch_size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Number of rows for the sketch.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "io50ho0r",
                    "encoding": "",
                    "name": "rng",
                    "value": "",
                    "defaultValue": "",
                    "description": "If `rng` is passed by keyword, types other than `numpy.random.Generator` are\npassed to `numpy.random.default_rng` to instantiate a ``Generator``.\nIf `rng` is already a ``Generator`` instance, then the provided instance is\nused. Specify `rng` for repeatable function behavior.\n\nIf this argument is passed by position or `seed` is passed by keyword,\nlegacy behavior for the argument `seed` applies:\n\n- If `seed` is None (or `numpy.random`), the `numpy.random.RandomState`\n  singleton is used.\n- If `seed` is an int, a new ``RandomState`` instance is used,\n  seeded with `seed`.\n- If `seed` is already a ``Generator`` or ``RandomState`` instance then\n  that instance is used.\n\n.. versionchanged:: 1.15.0\n    As part of the `SPEC-007 <https://scientific-python.org/specs/spec-0007/>`_\n    transition from use of `numpy.random.RandomState` to\n    `numpy.random.Generator`, this keyword was changed from `seed` to `rng`.\n    For an interim period, both keywords will continue to work, although only one\n    may be specified at a time. After the interim period, function calls using the\n    `seed` keyword will emit warnings. The behavior of both `seed` and\n    `rng` are outlined above, but only the `rng` keyword should be used in new code.",
                    "type": "{None, int, numpy.random.Generator}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "31xtbuw6",
                    "encoding": "",
                    "name": "seed",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "80m15rem",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.clarkson_woodruff_transform",
                    "defaultValue": "scipy.linalg.clarkson_woodruff_transform",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "__sx4m63",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0uxa_ogr",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "t3y0x_3y",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tswh8h_m",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1wenuw9i",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6wokt1l8",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "8q78blo3",
            "name": "linalg.companion",
            "description": "Create a companion matrix.\n    \n    Create the companion matrix [1]_ associated with the polynomial whose\n    coefficients are given in `a`.\n    \n    Parameters\n    ----------\n    a : (..., N) array_like\n        1-D array of polynomial coefficients. The length of `a` must be\n        at least two, and ``a[0]`` must not be zero.\n        M-dimensional arrays are treated as a batch: each slice along the last\n        axis is a 1-D array of polynomial coefficients.\n    \n    Returns\n    -------\n    c : (..., N-1, N-1) ndarray\n        For 1-D input, the first row of `c` is ``-a[1:]/a[0]``, and the first\n        sub-diagonal is all ones.  The data-type of the array is the same\n        as the data-type of ``1.0*a[0]``.\n        For batch input, each slice of shape ``(N-1, N-1)`` along the last two\n        dimensions of the output corresponds with a slice of shape ``(N,)``\n        along the last dimension of the input.\n    \n    Raises\n    ------\n    ValueError\n        If any of the following are true: a) ``a.shape[-1] < 2``; b) ``a[..., 0] == 0``.\n    \n    Notes\n    -----\n    .. versionadded:: 0.8.0\n    \n    References\n    ----------\n    .. [1] R. A. Horn & C. R. Johnson, *Matrix Analysis*.  Cambridge, UK:\n        Cambridge University Press, 1999, pp. 146-7.\n    \n    Examples\n    --------\n    >>> from scipy.linalg import companion\n    >>> companion([1, -10, 31, -30])\n    array([[ 10., -31.,  30.],\n           [  1.,   0.,   0.],\n           [  0.,   1.,   0.]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f7542afa4fe955990ab888113c7c303a13577ae0a58c4e0bc722d719f2265b49",
            "fields": [
                {
                    "id": "fs1t6kxg",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "1-D array of polynomial coefficients. The length of `a` must be\nat least two, and ``a[0]`` must not be zero.\nM-dimensional arrays are treated as a batch: each slice along the last\naxis is a 1-D array of polynomial coefficients.",
                    "type": "(..., N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j9ebjrsu",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.companion",
                    "defaultValue": "scipy.linalg.companion",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1tidkedf",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4w34g3sn",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "weie8jpu",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wzkg8p3n",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kecfl5k4",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5flmp79d",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "due6erqr",
            "name": "linalg.convolution_matrix",
            "description": "Construct a convolution matrix.\n    \n    Constructs the Toeplitz matrix representing one-dimensional\n    convolution [1]_.  See the notes below for details.\n    \n    Parameters\n    ----------\n    a : (..., m) array_like\n        The 1-D array to convolve. N-dimensional arrays are treated as a\n        batch: each slice along the last axis is a 1-D array to convolve.\n    n : int\n        The number of columns in the resulting matrix.  It gives the length\n        of the input to be convolved with `a`.  This is analogous to the\n        length of `v` in ``numpy.convolve(a, v)``.\n    mode : str\n        This is analogous to `mode` in ``numpy.convolve(v, a, mode)``.\n        It must be one of ('full', 'valid', 'same').\n        See below for how `mode` determines the shape of the result.\n    \n    Returns\n    -------\n    A : (..., k, n) ndarray\n        The convolution matrix whose row count `k` depends on `mode`::\n    \n            =======  =========================\n             mode    k\n            =======  =========================\n            'full'   m + n -1\n            'same'   max(m, n)\n            'valid'  max(m, n) - min(m, n) + 1\n            =======  =========================\n    \n        For batch input, each slice of shape ``(k, n)`` along the last two\n        dimensions of the output corresponds with a slice of shape ``(m,)``\n        along the last dimension of the input.\n    \n    See Also\n    --------\n    toeplitz : Toeplitz matrix\n    \n    Notes\n    -----\n    The code::\n    \n        A = convolution_matrix(a, n, mode)\n    \n    creates a Toeplitz matrix `A` such that ``A @ v`` is equivalent to\n    using ``convolve(a, v, mode)``.  The returned array always has `n`\n    columns.  The number of rows depends on the specified `mode`, as\n    explained above.\n    \n    In the default 'full' mode, the entries of `A` are given by::\n    \n        A[i, j] == (a[i-j] if (0 <= (i-j) < m) else 0)\n    \n    where ``m = len(a)``.  Suppose, for example, the input array is\n    ``[x, y, z]``.  The convolution matrix has the form::\n    \n        [x, 0, 0, ..., 0, 0]\n        [y, x, 0, ..., 0, 0]\n        [z, y, x, ..., 0, 0]\n        ...\n        [0, 0, 0, ..., x, 0]\n        [0, 0, 0, ..., y, x]\n        [0, 0, 0, ..., z, y]\n        [0, 0, 0, ..., 0, z]\n    \n    In 'valid' mode, the entries of `A` are given by::\n    \n        A[i, j] == (a[i-j+m-1] if (0 <= (i-j+m-1) < m) else 0)\n    \n    This corresponds to a matrix whose rows are the subset of those from\n    the 'full' case where all the coefficients in `a` are contained in the\n    row.  For input ``[x, y, z]``, this array looks like::\n    \n        [z, y, x, 0, 0, ..., 0, 0, 0]\n        [0, z, y, x, 0, ..., 0, 0, 0]\n        [0, 0, z, y, x, ..., 0, 0, 0]\n        ...\n        [0, 0, 0, 0, 0, ..., x, 0, 0]\n        [0, 0, 0, 0, 0, ..., y, x, 0]\n        [0, 0, 0, 0, 0, ..., z, y, x]\n    \n    In the 'same' mode, the entries of `A` are given by::\n    \n        d = (m - 1) // 2\n        A[i, j] == (a[i-j+d] if (0 <= (i-j+d) < m) else 0)\n    \n    The typical application of the 'same' mode is when one has a signal of\n    length `n` (with `n` greater than ``len(a)``), and the desired output\n    is a filtered signal that is still of length `n`.\n    \n    For input ``[x, y, z]``, this array looks like::\n    \n        [y, x, 0, 0, ..., 0, 0, 0]\n        [z, y, x, 0, ..., 0, 0, 0]\n        [0, z, y, x, ..., 0, 0, 0]\n        [0, 0, z, y, ..., 0, 0, 0]\n        ...\n        [0, 0, 0, 0, ..., y, x, 0]\n        [0, 0, 0, 0, ..., z, y, x]\n        [0, 0, 0, 0, ..., 0, z, y]\n    \n    .. versionadded:: 1.5.0\n    \n    References\n    ----------\n    .. [1] \"Convolution\", https://en.wikipedia.org/wiki/Convolution\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import convolution_matrix\n    >>> A = convolution_matrix([-1, 4, -2], 5, mode='same')\n    >>> A\n    array([[ 4, -1,  0,  0,  0],\n           [-2,  4, -1,  0,  0],\n           [ 0, -2,  4, -1,  0],\n           [ 0,  0, -2,  4, -1],\n           [ 0,  0,  0, -2,  4]])\n    \n    Compare multiplication by `A` with the use of `numpy.convolve`.\n    \n    >>> x = np.array([1, 2, 0, -3, 0.5])\n    >>> A @ x\n    array([  2. ,   6. ,  -1. , -12.5,   8. ])\n    \n    Verify that ``A @ x`` produced the same result as applying the\n    convolution function.\n    \n    >>> np.convolve([-1, 4, -2], x, mode='same')\n    array([  2. ,   6. ,  -1. , -12.5,   8. ])\n    \n    For comparison to the case ``mode='same'`` shown above, here are the\n    matrices produced by ``mode='full'`` and ``mode='valid'`` for the\n    same coefficients and size.\n    \n    >>> convolution_matrix([-1, 4, -2], 5, mode='full')\n    array([[-1,  0,  0,  0,  0],\n           [ 4, -1,  0,  0,  0],\n           [-2,  4, -1,  0,  0],\n           [ 0, -2,  4, -1,  0],\n           [ 0,  0, -2,  4, -1],\n           [ 0,  0,  0, -2,  4],\n           [ 0,  0,  0,  0, -2]])\n    \n    >>> convolution_matrix([-1, 4, -2], 5, mode='valid')\n    array([[-2,  4, -1,  0,  0],\n           [ 0, -2,  4, -1,  0],\n           [ 0,  0, -2,  4, -1]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5c8cd5255bbf64ee44aad9eceecaaa351422837e3266ebfbf661c430e1d335e8",
            "fields": [
                {
                    "id": "q4fydu7x",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "The 1-D array to convolve. N-dimensional arrays are treated as a\nbatch: each slice along the last axis is a 1-D array to convolve.",
                    "type": "(..., m) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "979ge4ac",
                    "encoding": "",
                    "name": "n",
                    "value": "",
                    "defaultValue": "",
                    "description": "The number of columns in the resulting matrix.  It gives the length\nof the input to be convolved with `a`.  This is analogous to the\nlength of `v` in ``numpy.convolve(a, v)``.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j0iho9lw",
                    "encoding": "",
                    "name": "mode",
                    "value": "full",
                    "defaultValue": "full",
                    "description": "This is analogous to `mode` in ``numpy.convolve(v, a, mode)``.\nIt must be one of ('full', 'valid', 'same').\nSee below for how `mode` determines the shape of the result.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sm1xnmc6",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.convolution_matrix",
                    "defaultValue": "scipy.linalg.convolution_matrix",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b22v2kbd",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x0dphjpd",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ykmq4184",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ggkun0g9",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2cmwe7zg",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wpbj3gq8",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "y9ftjgjh",
            "name": "linalg.coshm",
            "description": "Compute the hyperbolic matrix cosine.\n    \n    This routine uses expm to compute the matrix exponentials.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    A : (N, N) array_like\n        Input array.\n    \n    Returns\n    -------\n    coshm : (N, N) ndarray\n        Hyperbolic matrix cosine of `A`\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import tanhm, sinhm, coshm\n    >>> a = np.array([[1.0, 3.0], [1.0, 4.0]])\n    >>> c = coshm(a)\n    >>> c\n    array([[ 11.24592233,  38.76236492],\n           [ 12.92078831,  50.00828725]])\n    \n    Verify tanhm(a) = sinhm(a).dot(inv(coshm(a)))\n    \n    >>> t = tanhm(a)\n    >>> s = sinhm(a)\n    >>> t - s.dot(np.linalg.inv(c))\n    array([[  2.72004641e-15,   4.55191440e-15],\n           [  0.00000000e+00,  -5.55111512e-16]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "60970970123a20c40ef4f6bd646a0d11252617c1949c93173740b5f2e0088075",
            "fields": [
                {
                    "id": "6yg73qih",
                    "encoding": "",
                    "name": "A",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array.",
                    "type": "(N, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aguphi9d",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.coshm",
                    "defaultValue": "scipy.linalg.coshm",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oxatr1bk",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8iu3zm9v",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "7wuptyju",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1afg3efd",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ydcdpf_z",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lnfv5536",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "vo59yuc0",
            "name": "linalg.cosm",
            "description": "Compute the matrix cosine.\n    \n    This routine uses expm to compute the matrix exponentials.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    A : (N, N) array_like\n        Input array\n    \n    Returns\n    -------\n    cosm : (N, N) ndarray\n        Matrix cosine of A\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import expm, sinm, cosm\n    \n    Euler's identity (exp(i*theta) = cos(theta) + i*sin(theta))\n    applied to a matrix:\n    \n    >>> a = np.array([[1.0, 2.0], [-1.0, 3.0]])\n    >>> expm(1j*a)\n    array([[ 0.42645930+1.89217551j, -2.13721484-0.97811252j],\n           [ 1.06860742+0.48905626j, -1.71075555+0.91406299j]])\n    >>> cosm(a) + 1j*sinm(a)\n    array([[ 0.42645930+1.89217551j, -2.13721484-0.97811252j],\n           [ 1.06860742+0.48905626j, -1.71075555+0.91406299j]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e387dce49171f1ed328a1766bf178550e152eed58d9fc7f3fca7f4be30bb5322",
            "fields": [
                {
                    "id": "tp6kq8tb",
                    "encoding": "",
                    "name": "A",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array",
                    "type": "(N, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u66ackxq",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.cosm",
                    "defaultValue": "scipy.linalg.cosm",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dp5zqprw",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5m2gjk5x",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "mgua_x2o",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f2tvxxnl",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3v7ws52v",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z_35lh_f",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "mwchr18k",
            "name": "linalg.cossin",
            "description": "Compute the cosine-sine (CS) decomposition of an orthogonal/unitary matrix.\n    \n    X is an ``(m, m)`` orthogonal/unitary matrix, partitioned as the following\n    where upper left block has the shape of ``(p, q)``::\n    \n                                   \u250c                   \u2510\n                                   \u2502 I  0  0 \u2502 0  0  0 \u2502\n        \u250c           \u2510   \u250c         \u2510\u2502 0  C  0 \u2502 0 -S  0 \u2502\u250c         \u2510*\n        \u2502 X11 \u2502 X12 \u2502   \u2502 U1 \u2502    \u2502\u2502 0  0  0 \u2502 0  0 -I \u2502\u2502 V1 \u2502    \u2502\n        \u2502 \u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500 \u2502 = \u2502\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2502\u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502\u2502\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2502\n        \u2502 X21 \u2502 X22 \u2502   \u2502    \u2502 U2 \u2502\u2502 0  0  0 \u2502 I  0  0 \u2502\u2502    \u2502 V2 \u2502\n        \u2514           \u2518   \u2514         \u2518\u2502 0  S  0 \u2502 0  C  0 \u2502\u2514         \u2518\n                                   \u2502 0  0  I \u2502 0  0  0 \u2502\n                                   \u2514                   \u2518\n    \n    ``U1``, ``U2``, ``V1``, ``V2`` are square orthogonal/unitary matrices of\n    dimensions ``(p,p)``, ``(m-p,m-p)``, ``(q,q)``, and ``(m-q,m-q)``\n    respectively, and ``C`` and ``S`` are ``(r, r)`` nonnegative diagonal\n    matrices satisfying ``C^2 + S^2 = I`` where ``r = min(p, m-p, q, m-q)``.\n    \n    Moreover, the rank of the identity matrices are ``min(p, q) - r``,\n    ``min(p, m - q) - r``, ``min(m - p, q) - r``, and ``min(m - p, m - q) - r``\n    respectively.\n    \n    X can be supplied either by itself and block specifications p, q or its\n    subblocks in an iterable from which the shapes would be derived. See the\n    examples below.\n    \n    Parameters\n    ----------\n    X : array_like, iterable\n        complex unitary or real orthogonal matrix to be decomposed, or iterable\n        of subblocks ``X11``, ``X12``, ``X21``, ``X22``, when ``p``, ``q`` are\n        omitted.\n    p : int, optional\n        Number of rows of the upper left block ``X11``, used only when X is\n        given as an array.\n    q : int, optional\n        Number of columns of the upper left block ``X11``, used only when X is\n        given as an array.\n    separate : bool, optional\n        if ``True``, the low level components are returned instead of the\n        matrix factors, i.e. ``(u1,u2)``, ``theta``, ``(v1h,v2h)`` instead of\n        ``u``, ``cs``, ``vh``.\n    swap_sign : bool, optional\n        if ``True``, the ``-S``, ``-I`` block will be the bottom left,\n        otherwise (by default) they will be in the upper right block.\n    compute_u : bool, optional\n        if ``False``, ``u`` won't be computed and an empty array is returned.\n    compute_vh : bool, optional\n        if ``False``, ``vh`` won't be computed and an empty array is returned.\n    \n    Returns\n    -------\n    u : ndarray\n        When ``compute_u=True``, contains the block diagonal orthogonal/unitary\n        matrix consisting of the blocks ``U1`` (``p`` x ``p``) and ``U2``\n        (``m-p`` x ``m-p``) orthogonal/unitary matrices. If ``separate=True``,\n        this contains the tuple of ``(U1, U2)``.\n    cs : ndarray\n        The cosine-sine factor with the structure described above.\n         If ``separate=True``, this contains the ``theta`` array containing the\n         angles in radians.\n    vh : ndarray\n        When ``compute_vh=True`, contains the block diagonal orthogonal/unitary\n        matrix consisting of the blocks ``V1H`` (``q`` x ``q``) and ``V2H``\n        (``m-q`` x ``m-q``) orthogonal/unitary matrices. If ``separate=True``,\n        this contains the tuple of ``(V1H, V2H)``.\n    \n    Notes\n    -----\n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    References\n    ----------\n    .. [1] Brian D. Sutton. Computing the complete CS decomposition. Numer.\n           Algorithms, 50(1):33-65, 2009.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import cossin\n    >>> from scipy.stats import unitary_group\n    >>> x = unitary_group.rvs(4)\n    >>> u, cs, vdh = cossin(x, p=2, q=2)\n    >>> np.allclose(x, u @ cs @ vdh)\n    True\n    \n    Same can be entered via subblocks without the need of ``p`` and ``q``. Also\n    let's skip the computation of ``u``\n    \n    >>> ue, cs, vdh = cossin((x[:2, :2], x[:2, 2:], x[2:, :2], x[2:, 2:]),\n    ...                      compute_u=False)\n    >>> print(ue)\n    []\n    >>> np.allclose(x, u @ cs @ vdh)\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ba6b5c63f0cf79c44771e10eb8d522ba6a3e1f336a015dc3d16c2e5b9c97f69b",
            "fields": [
                {
                    "id": "jv11xzmj",
                    "encoding": "",
                    "name": "X",
                    "value": "",
                    "defaultValue": "",
                    "description": "complex unitary or real orthogonal matrix to be decomposed, or iterable\nof subblocks ``X11``, ``X12``, ``X21``, ``X22``, when ``p``, ``q`` are\nomitted.",
                    "type": "arraylike, iterable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m1934duf",
                    "encoding": "",
                    "name": "p",
                    "value": "",
                    "defaultValue": "",
                    "description": "Number of rows of the upper left block ``X11``, used only when X is\ngiven as an array.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hfh35b4e",
                    "encoding": "",
                    "name": "q",
                    "value": "",
                    "defaultValue": "",
                    "description": "Number of columns of the upper left block ``X11``, used only when X is\ngiven as an array.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "il64wp3p",
                    "encoding": "",
                    "name": "separate",
                    "value": false,
                    "defaultValue": false,
                    "description": "if ``True``, the low level components are returned instead of the\nmatrix factors, i.e. ``(u1,u2)``, ``theta``, ``(v1h,v2h)`` instead of\n``u``, ``cs``, ``vh``.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mbk1wlb_",
                    "encoding": "",
                    "name": "swap_sign",
                    "value": false,
                    "defaultValue": false,
                    "description": "if ``True``, the ``-S``, ``-I`` block will be the bottom left,\notherwise (by default) they will be in the upper right block.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zwk0ifec",
                    "encoding": "",
                    "name": "compute_u",
                    "value": true,
                    "defaultValue": true,
                    "description": "if ``False``, ``u`` won't be computed and an empty array is returned.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l9yhwlng",
                    "encoding": "",
                    "name": "compute_vh",
                    "value": true,
                    "defaultValue": true,
                    "description": "if ``False``, ``vh`` won't be computed and an empty array is returned.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a5ahswfm",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.cossin",
                    "defaultValue": "scipy.linalg.cossin",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qsjl0vi7",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xhg54_37",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "h5k4o61u",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jzroekxr",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9wtcdft6",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "32hnsy3d",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "hhjiqc2o",
            "name": "linalg.det",
            "description": "Compute the determinant of a matrix\n    \n    The determinant is a scalar that is a function of the associated square\n    matrix coefficients. The determinant value is zero for singular matrices.\n    \n    Parameters\n    ----------\n    a : (..., M, M) array_like\n        Input array to compute determinants for.\n    overwrite_a : bool, optional\n        Allow overwriting data in a (may enhance performance).\n    check_finite : bool, optional\n        Whether to check that the input matrix contains only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    det : (...) float or complex\n        Determinant of `a`. For stacked arrays, a scalar is returned for each\n        (m, m) slice in the last two dimensions of the input. For example, an\n        input of shape (p, q, m, m) will produce a result of shape (p, q). If\n        all dimensions are 1 a scalar is returned regardless of ndim.\n    \n    Notes\n    -----\n    The determinant is computed by performing an LU factorization of the\n    input with LAPACK routine 'getrf', and then calculating the product of\n    diagonal entries of the U factor.\n    \n    Even if the input array is single precision (float32 or complex64), the\n    result will be returned in double precision (float64 or complex128) to\n    prevent overflows.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy import linalg\n    >>> a = np.array([[1,2,3], [4,5,6], [7,8,9]])  # A singular matrix\n    >>> linalg.det(a)\n    0.0\n    >>> b = np.array([[0,2,3], [4,5,6], [7,8,9]])\n    >>> linalg.det(b)\n    3.0\n    >>> # An array with the shape (3, 2, 2, 2)\n    >>> c = np.array([[[[1., 2.], [3., 4.]],\n    ...                [[5., 6.], [7., 8.]]],\n    ...               [[[9., 10.], [11., 12.]],\n    ...                [[13., 14.], [15., 16.]]],\n    ...               [[[17., 18.], [19., 20.]],\n    ...                [[21., 22.], [23., 24.]]]])\n    >>> linalg.det(c)  # The resulting shape is (3, 2)\n    array([[-2., -2.],\n           [-2., -2.],\n           [-2., -2.]])\n    >>> linalg.det(c[0, 0])  # Confirm the (0, 0) slice, [[1, 2], [3, 4]]\n    -2.0",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ff193c6c3997a9b67d5e9d1fea45b3305cad95631a1e549fd2e8da8309012780",
            "fields": [
                {
                    "id": "sdq7nw3b",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array to compute determinants for.",
                    "type": "(..., M, M) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cpt_1gt9",
                    "encoding": "",
                    "name": "overwrite_a",
                    "value": false,
                    "defaultValue": false,
                    "description": "Allow overwriting data in a (may enhance performance).",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y316lqd6",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrix contains only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ndwvpt3u",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.det",
                    "defaultValue": "scipy.linalg.det",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k8swmb9i",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cygxr9ks",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "pdp_y3sz",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hmgsvgc7",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9nji60oi",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d3zhl29a",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "4qyydc7l",
            "name": "linalg.dft",
            "description": "Discrete Fourier transform matrix.\n    \n    Create the matrix that computes the discrete Fourier transform of a\n    sequence [1]_. The nth primitive root of unity used to generate the\n    matrix is exp(-2*pi*i/n), where i = sqrt(-1).\n    \n    Parameters\n    ----------\n    n : int\n        Size the matrix to create.\n    scale : str, optional\n        Must be None, 'sqrtn', or 'n'.\n        If `scale` is 'sqrtn', the matrix is divided by `sqrt(n)`.\n        If `scale` is 'n', the matrix is divided by `n`.\n        If `scale` is None (the default), the matrix is not normalized, and the\n        return value is simply the Vandermonde matrix of the roots of unity.\n    \n    Returns\n    -------\n    m : (n, n) ndarray\n        The DFT matrix.\n    \n    Notes\n    -----\n    When `scale` is None, multiplying a vector by the matrix returned by\n    `dft` is mathematically equivalent to (but much less efficient than)\n    the calculation performed by `scipy.fft.fft`.\n    \n    .. versionadded:: 0.14.0\n    \n    References\n    ----------\n    .. [1] \"DFT matrix\", https://en.wikipedia.org/wiki/DFT_matrix\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import dft\n    >>> np.set_printoptions(precision=2, suppress=True)  # for compact output\n    >>> m = dft(5)\n    >>> m\n    array([[ 1.  +0.j  ,  1.  +0.j  ,  1.  +0.j  ,  1.  +0.j  ,  1.  +0.j  ],\n           [ 1.  +0.j  ,  0.31-0.95j, -0.81-0.59j, -0.81+0.59j,  0.31+0.95j],\n           [ 1.  +0.j  , -0.81-0.59j,  0.31+0.95j,  0.31-0.95j, -0.81+0.59j],\n           [ 1.  +0.j  , -0.81+0.59j,  0.31-0.95j,  0.31+0.95j, -0.81-0.59j],\n           [ 1.  +0.j  ,  0.31+0.95j, -0.81+0.59j, -0.81-0.59j,  0.31-0.95j]])\n    >>> x = np.array([1, 2, 3, 0, 3])\n    >>> m @ x  # Compute the DFT of x\n    array([ 9.  +0.j  ,  0.12-0.81j, -2.12+3.44j, -2.12-3.44j,  0.12+0.81j])\n    \n    Verify that ``m @ x`` is the same as ``fft(x)``.\n    \n    >>> from scipy.fft import fft\n    >>> fft(x)     # Same result as m @ x\n    array([ 9.  +0.j  ,  0.12-0.81j, -2.12+3.44j, -2.12-3.44j,  0.12+0.81j])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "cb0890e360b5ca4538b50dbfa913bc9e0794ffe07e28b85fc34d400d3d55a6d4",
            "fields": [
                {
                    "id": "nsqsn7xb",
                    "encoding": "",
                    "name": "n",
                    "value": "",
                    "defaultValue": "",
                    "description": "Size the matrix to create.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pdulmifx",
                    "encoding": "",
                    "name": "scale",
                    "value": "",
                    "defaultValue": "",
                    "description": "Must be None, 'sqrtn', or 'n'.\nIf `scale` is 'sqrtn', the matrix is divided by `sqrt(n)`.\nIf `scale` is 'n', the matrix is divided by `n`.\nIf `scale` is None (the default), the matrix is not normalized, and the\nreturn value is simply the Vandermonde matrix of the roots of unity.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u81gvjgf",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.dft",
                    "defaultValue": "scipy.linalg.dft",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "51alv31g",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fieiv45p",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "h5m_b0yb",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5_cuwz3m",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g0bmjcs_",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i0trf38p",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "qsg2ks3d",
            "name": "linalg.diagsvd",
            "description": "Construct the sigma matrix in SVD from singular values and size M, N.\n    \n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    s : (M,) or (N,) array_like\n        Singular values\n    M : int\n        Size of the matrix whose singular values are `s`.\n    N : int\n        Size of the matrix whose singular values are `s`.\n    \n    Returns\n    -------\n    S : (M, N) ndarray\n        The S-matrix in the singular value decomposition\n    \n    See Also\n    --------\n    \n    :func:`svd`\n        Singular value decomposition of a matrix\n    :func:`svdvals`\n        Compute singular values of a matrix.\n    \n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import diagsvd\n    >>> vals = np.array([1, 2, 3])  # The array representing the computed svd\n    >>> diagsvd(vals, 3, 4)\n    array([[1, 0, 0, 0],\n           [0, 2, 0, 0],\n           [0, 0, 3, 0]])\n    >>> diagsvd(vals, 4, 3)\n    array([[1, 0, 0],\n           [0, 2, 0],\n           [0, 0, 3],\n           [0, 0, 0]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5cd91606bc32fd398050dfb3f2dfedc7d674e98f16778d60ee99df4ebe0d8ce3",
            "fields": [
                {
                    "id": "ajxvhqmo",
                    "encoding": "",
                    "name": "s",
                    "value": "",
                    "defaultValue": "",
                    "description": "Singular values",
                    "type": "(M,) or (N,) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e7rjp21s",
                    "encoding": "",
                    "name": "M",
                    "value": "",
                    "defaultValue": "",
                    "description": "Size of the matrix whose singular values are `s`.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bjctqvro",
                    "encoding": "",
                    "name": "N",
                    "value": "",
                    "defaultValue": "",
                    "description": "Size of the matrix whose singular values are `s`.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z78occ21",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.diagsvd",
                    "defaultValue": "scipy.linalg.diagsvd",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jxzehhcj",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ua487b7f",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "9vfu34w6",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "emkl5yei",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c28o0gbo",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7a3vxhxr",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "8f0xjw66",
            "name": "linalg.eig",
            "description": "Solve an ordinary or generalized eigenvalue problem of a square matrix.\n    \n    Find eigenvalues w and right or left eigenvectors of a general matrix::\n    \n        a   vr[:,i] = w[i]        b   vr[:,i]\n        a.H vl[:,i] = w[i].conj() b.H vl[:,i]\n    \n    where ``.H`` is the Hermitian conjugation.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a : (M, M) array_like\n        A complex or real matrix whose eigenvalues and eigenvectors\n        will be computed.\n    b : (M, M) array_like, optional\n        Right-hand side matrix in a generalized eigenvalue problem.\n        Default is None, identity matrix is assumed.\n    left : bool, optional\n        Whether to calculate and return left eigenvectors.  Default is False.\n    right : bool, optional\n        Whether to calculate and return right eigenvectors.  Default is True.\n    overwrite_a : bool, optional\n        Whether to overwrite `a`; may improve performance.  Default is False.\n    overwrite_b : bool, optional\n        Whether to overwrite `b`; may improve performance.  Default is False.\n    check_finite : bool, optional\n        Whether to check that the input matrices contain only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    homogeneous_eigvals : bool, optional\n        If True, return the eigenvalues in homogeneous coordinates.\n        In this case ``w`` is a (2, M) array so that::\n        \n            w[1,i] a vr[:,i] = w[0,i] b vr[:,i]\n        \n        Default is False.\n    \n    Returns\n    -------\n    w : (M,) or (2, M) double or complex ndarray\n        The eigenvalues, each repeated according to its\n        multiplicity. The shape is (M,) unless\n        ``homogeneous_eigvals=True``.\n    vl : (M, M) double or complex ndarray\n        The left eigenvector corresponding to the eigenvalue\n        ``w[i]`` is the column ``vl[:,i]``. Only returned if ``left=True``.\n        The left eigenvector is not normalized.\n    vr : (M, M) double or complex ndarray\n        The normalized right eigenvector corresponding to the eigenvalue\n        ``w[i]`` is the column ``vr[:,i]``.  Only returned if ``right=True``.\n    \n    Raises\n    ------\n    LinAlgError\n        If eigenvalue computation does not converge.\n    \n    See Also\n    --------\n    \n    :func:`eigvals`\n        eigenvalues of general arrays\n    :func:`eigh`\n        Eigenvalues and right eigenvectors for symmetric/Hermitian arrays.\n    :func:`eig_banded`\n        eigenvalues and right eigenvectors for symmetric/Hermitian band matrices\n    :func:`eigh_tridiagonal`\n        eigenvalues and right eiegenvectors for symmetric/Hermitian tridiagonal matrices\n    \n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy import linalg\n    >>> a = np.array([[0., -1.], [1., 0.]])\n    >>> linalg.eigvals(a)\n    array([0.+1.j, 0.-1.j])\n    \n    >>> b = np.array([[0., 1.], [1., 1.]])\n    >>> linalg.eigvals(a, b)\n    array([ 1.+0.j, -1.+0.j])\n    \n    >>> a = np.array([[3., 0., 0.], [0., 8., 0.], [0., 0., 7.]])\n    >>> linalg.eigvals(a, homogeneous_eigvals=True)\n    array([[3.+0.j, 8.+0.j, 7.+0.j],\n           [1.+0.j, 1.+0.j, 1.+0.j]])\n    \n    >>> a = np.array([[0., -1.], [1., 0.]])\n    >>> linalg.eigvals(a) == linalg.eig(a)[0]\n    array([ True,  True])\n    >>> linalg.eig(a, left=True, right=False)[1] # normalized left eigenvector\n    array([[-0.70710678+0.j        , -0.70710678-0.j        ],\n           [-0.        +0.70710678j, -0.        -0.70710678j]])\n    >>> linalg.eig(a, left=False, right=True)[1] # normalized right eigenvector\n    array([[0.70710678+0.j        , 0.70710678-0.j        ],\n           [0.        -0.70710678j, 0.        +0.70710678j]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "0f871e06f11f1a815f3acad8eff746b340a58e222a8ab6ae88fa41357e12cc6a",
            "fields": [
                {
                    "id": "tqm61axr",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "A complex or real matrix whose eigenvalues and eigenvectors\nwill be computed.",
                    "type": "(M, M) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zprq8rqz",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "Right-hand side matrix in a generalized eigenvalue problem.\nDefault is None, identity matrix is assumed.",
                    "type": "(M, M) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7f6mk8rw",
                    "encoding": "",
                    "name": "left",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to calculate and return left eigenvectors.  Default is False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fyghcq35",
                    "encoding": "",
                    "name": "right",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to calculate and return right eigenvectors.  Default is True.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v3mk52n7",
                    "encoding": "",
                    "name": "overwrite_a",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to overwrite `a`; may improve performance.  Default is False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hhexjzlt",
                    "encoding": "",
                    "name": "overwrite_b",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to overwrite `b`; may improve performance.  Default is False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0n44oli1",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrices contain only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gxn30o2a",
                    "encoding": "",
                    "name": "homogeneous_eigvals",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, return the eigenvalues in homogeneous coordinates.\nIn this case ``w`` is a (2, M) array so that::\n\n    w[1,i] a vr[:,i] = w[0,i] b vr[:,i]\n\nDefault is False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l22g2rhp",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.eig",
                    "defaultValue": "scipy.linalg.eig",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y2uiwm89",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pcfj416i",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "29ac_dm9",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jdnafwk6",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ofaecyuo",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1s0zpbtk",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "9dsvvjjv",
            "name": "linalg.eig_banded",
            "description": "Solve real symmetric or complex Hermitian band matrix eigenvalue problem.\n    \n    Find eigenvalues w and optionally right eigenvectors v of a::\n    \n        a v[:,i] = w[i] v[:,i]\n        v.H v    = identity\n    \n    The matrix a is stored in a_band either in lower diagonal or upper\n    diagonal ordered form:\n    \n        a_band[u + i - j, j] == a[i,j]        (if upper form; i <= j)\n        a_band[    i - j, j] == a[i,j]        (if lower form; i >= j)\n    \n    where u is the number of bands above the diagonal.\n    \n    Example of a_band (shape of a is (6,6), u=2)::\n    \n        upper form:\n        *   *   a02 a13 a24 a35\n        *   a01 a12 a23 a34 a45\n        a00 a11 a22 a33 a44 a55\n    \n        lower form:\n        a00 a11 a22 a33 a44 a55\n        a10 a21 a32 a43 a54 *\n        a20 a31 a42 a53 *   *\n    \n    Cells marked with * are not used.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a_band : (u+1, M) array_like\n        The bands of the M by M matrix a.\n    lower : bool, optional\n        Is the matrix in the lower form. (Default is upper form)\n    eigvals_only : bool, optional\n        Compute only the eigenvalues and no eigenvectors.\n        (Default: calculate also eigenvectors)\n    overwrite_a_band : bool, optional\n        Discard data in a_band (may enhance performance)\n    select : {'a', 'v', 'i'}, optional\n        Which eigenvalues to calculate\n        \n        ======  ========================================\n        select  calculated\n        ======  ========================================\n        'a'     All eigenvalues\n        'v'     Eigenvalues in the interval (min, max]\n        'i'     Eigenvalues with indices min <= i <= max\n        ======  ========================================\n    select_range : (min, max), optional\n        Range of selected eigenvalues\n    max_ev : int, optional\n        For select=='v', maximum number of eigenvalues expected.\n        For other values of select, has no meaning.\n        \n        In doubt, leave this parameter untouched.\n    check_finite : bool, optional\n        Whether to check that the input matrix contains only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    w : (M,) ndarray\n        The eigenvalues, in ascending order, each repeated according to its\n        multiplicity.\n    v : (M, M) float or complex ndarray\n        The normalized eigenvector corresponding to the eigenvalue w[i] is\n        the column v[:,i]. Only returned if ``eigvals_only=False``.\n    \n    Raises\n    ------\n    LinAlgError\n        If eigenvalue computation does not converge.\n    \n    See Also\n    --------\n    \n    :func:`eigvals_banded`\n        eigenvalues for symmetric/Hermitian band matrices\n    :func:`eig`\n        eigenvalues and right eigenvectors of general arrays.\n    :func:`eigh`\n        eigenvalues and right eigenvectors for symmetric/Hermitian arrays\n    :func:`eigh_tridiagonal`\n        eigenvalues and right eigenvectors for symmetric/Hermitian tridiagonal matrices\n    \n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import eig_banded\n    >>> A = np.array([[1, 5, 2, 0], [5, 2, 5, 2], [2, 5, 3, 5], [0, 2, 5, 4]])\n    >>> Ab = np.array([[1, 2, 3, 4], [5, 5, 5, 0], [2, 2, 0, 0]])\n    >>> w, v = eig_banded(Ab, lower=True)\n    >>> np.allclose(A @ v - v @ np.diag(w), np.zeros((4, 4)))\n    True\n    >>> w = eig_banded(Ab, lower=True, eigvals_only=True)\n    >>> w\n    array([-4.26200532, -2.22987175,  3.95222349, 12.53965359])\n    \n    Request only the eigenvalues between ``[-3, 4]``\n    \n    >>> w, v = eig_banded(Ab, lower=True, select='v', select_range=[-3, 4])\n    >>> w\n    array([-2.22987175,  3.95222349])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a8f7b86fb333a835c30afe4fe9a8ba99cfc248094c53962d399f33deed144b89",
            "fields": [
                {
                    "id": "9tu42q4r",
                    "encoding": "",
                    "name": "a_band",
                    "value": "",
                    "defaultValue": "",
                    "description": "The bands of the M by M matrix a.",
                    "type": "(u+1, M) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fz2qxuf2",
                    "encoding": "",
                    "name": "lower",
                    "value": false,
                    "defaultValue": false,
                    "description": "Is the matrix in the lower form. (Default is upper form)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hfhjjjnx",
                    "encoding": "",
                    "name": "eigvals_only",
                    "value": false,
                    "defaultValue": false,
                    "description": "Compute only the eigenvalues and no eigenvectors.\n(Default: calculate also eigenvectors)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fp60etxf",
                    "encoding": "",
                    "name": "overwrite_a_band",
                    "value": false,
                    "defaultValue": false,
                    "description": "Discard data in a_band (may enhance performance)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rhcqs6en",
                    "encoding": "",
                    "name": "select",
                    "value": "a",
                    "defaultValue": "a",
                    "description": "Which eigenvalues to calculate\n\n======  ========================================\nselect  calculated\n======  ========================================\n'a'     All eigenvalues\n'v'     Eigenvalues in the interval (min, max]\n'i'     Eigenvalues with indices min <= i <= max\n======  ========================================",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m1mzqn9r",
                    "encoding": "",
                    "name": "select_range",
                    "value": "",
                    "defaultValue": "",
                    "description": "Range of selected eigenvalues",
                    "type": "(min, max)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fc56w0t8",
                    "encoding": "",
                    "name": "max_ev",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "For select=='v', maximum number of eigenvalues expected.\nFor other values of select, has no meaning.\n\nIn doubt, leave this parameter untouched.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k_7q2e0p",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrix contains only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d1ixp10s",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.eig_banded",
                    "defaultValue": "scipy.linalg.eig_banded",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h5o7xtad",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "53vna2n4",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "3x3gajj7",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9u3dgpad",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "15xbt1_4",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gotxg_pn",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "c3qdgp8t",
            "name": "linalg.eigh",
            "description": "Solve a standard or generalized eigenvalue problem for a complex\n    Hermitian or real symmetric matrix.\n    \n    Find eigenvalues array ``w`` and optionally eigenvectors array ``v`` of\n    array ``a``, where ``b`` is positive definite such that for every\n    eigenvalue \u03bb (i-th entry of w) and its eigenvector ``vi`` (i-th column of\n    ``v``) satisfies::\n    \n                      a @ vi = \u03bb * b @ vi\n        vi.conj().T @ a @ vi = \u03bb\n        vi.conj().T @ b @ vi = 1\n    \n    In the standard problem, ``b`` is assumed to be the identity matrix.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a : (M, M) array_like\n        A complex Hermitian or real symmetric matrix whose eigenvalues and\n        eigenvectors will be computed.\n    b : (M, M) array_like, optional\n        A complex Hermitian or real symmetric definite positive matrix in.\n        If omitted, identity matrix is assumed.\n    lower : bool, optional\n        Whether the pertinent array data is taken from the lower or upper\n        triangle of ``a`` and, if applicable, ``b``. (Default: lower)\n    eigvals_only : bool, optional\n        Whether to calculate only eigenvalues and no eigenvectors.\n        (Default: both are calculated)\n    subset_by_index : iterable, optional\n        If provided, this two-element iterable defines the start and the end\n        indices of the desired eigenvalues (ascending order and 0-indexed).\n        To return only the second smallest to fifth smallest eigenvalues,\n        ``[1, 4]`` is used. ``[n-3, n-1]`` returns the largest three. Only\n        available with \"evr\", \"evx\", and \"gvx\" drivers. The entries are\n        directly converted to integers via ``int()``.\n    subset_by_value : iterable, optional\n        If provided, this two-element iterable defines the half-open interval\n        ``(a, b]`` that, if any, only the eigenvalues between these values\n        are returned. Only available with \"evr\", \"evx\", and \"gvx\" drivers. Use\n        ``np.inf`` for the unconstrained ends.\n    driver : str, optional\n        Defines which LAPACK driver should be used. Valid options are \"ev\",\n        \"evd\", \"evr\", \"evx\" for standard problems and \"gv\", \"gvd\", \"gvx\" for\n        generalized (where b is not None) problems. See the Notes section.\n        The default for standard problems is \"evr\". For generalized problems,\n        \"gvd\" is used for full set, and \"gvx\" for subset requested cases.\n    type : int, optional\n        For the generalized problems, this keyword specifies the problem type\n        to be solved for ``w`` and ``v`` (only takes 1, 2, 3 as possible\n        inputs)::\n        \n            1 =>     a @ v = w @ b @ v\n            2 => a @ b @ v = w @ v\n            3 => b @ a @ v = w @ v\n        \n        This keyword is ignored for standard problems.\n    overwrite_a : bool, optional\n        Whether to overwrite data in ``a`` (may improve performance). Default\n        is False.\n    overwrite_b : bool, optional\n        Whether to overwrite data in ``b`` (may improve performance). Default\n        is False.\n    check_finite : bool, optional\n        Whether to check that the input matrices contain only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    w : (N,) ndarray\n        The N (N<=M) selected eigenvalues, in ascending order, each\n        repeated according to its multiplicity.\n    v : (M, N) ndarray\n        The normalized eigenvector corresponding to the eigenvalue ``w[i]`` is\n        the column ``v[:,i]``. Only returned if ``eigvals_only=False``.\n    \n    Raises\n    ------\n    LinAlgError\n        If eigenvalue computation does not converge, an error occurred, or\n        b matrix is not definite positive. Note that if input matrices are\n        not symmetric or Hermitian, no error will be reported but results will\n        be wrong.\n    \n    See Also\n    --------\n    \n    :func:`eigvalsh`\n        eigenvalues of symmetric or Hermitian arrays\n    :func:`eig`\n        eigenvalues and right eigenvectors for non-symmetric arrays\n    :func:`eigh_tridiagonal`\n        eigenvalues and right eiegenvectors for symmetric/Hermitian tridiagonal matrices\n    \n    \n    Notes\n    -----\n    This function does not check the input array for being Hermitian/symmetric\n    in order to allow for representing arrays with only their upper/lower\n    triangular parts. Also, note that even though not taken into account,\n    finiteness check applies to the whole array and unaffected by \"lower\"\n    keyword.\n    \n    This function uses LAPACK drivers for computations in all possible keyword\n    combinations, prefixed with ``sy`` if arrays are real and ``he`` if\n    complex, e.g., a float array with \"evr\" driver is solved via\n    \"syevr\", complex arrays with \"gvx\" driver problem is solved via \"hegvx\"\n    etc.\n    \n    As a brief summary, the slowest and the most robust driver is the\n    classical ``<sy/he>ev`` which uses symmetric QR. ``<sy/he>evr`` is seen as\n    the optimal choice for the most general cases. However, there are certain\n    occasions that ``<sy/he>evd`` computes faster at the expense of more\n    memory usage. ``<sy/he>evx``, while still being faster than ``<sy/he>ev``,\n    often performs worse than the rest except when very few eigenvalues are\n    requested for large arrays though there is still no performance guarantee.\n    \n    Note that the underlying LAPACK algorithms are different depending on whether\n    `eigvals_only` is True or False --- thus the eigenvalues may differ\n    depending on whether eigenvectors are requested or not. The difference is\n    generally of the order of machine epsilon times the largest eigenvalue,\n    so is likely only visible for zero or nearly zero eigenvalues.\n    \n    For the generalized problem, normalization with respect to the given\n    type argument::\n    \n            type 1 and 3 :      v.conj().T @ a @ v = w\n            type 2       : inv(v).conj().T @ a @ inv(v) = w\n    \n            type 1 or 2  :      v.conj().T @ b @ v  = I\n            type 3       : v.conj().T @ inv(b) @ v  = I\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import eigh\n    >>> A = np.array([[6, 3, 1, 5], [3, 0, 5, 1], [1, 5, 6, 2], [5, 1, 2, 2]])\n    >>> w, v = eigh(A)\n    >>> np.allclose(A @ v - v @ np.diag(w), np.zeros((4, 4)))\n    True\n    \n    Request only the eigenvalues\n    \n    >>> w = eigh(A, eigvals_only=True)\n    \n    Request eigenvalues that are less than 10.\n    \n    >>> A = np.array([[34, -4, -10, -7, 2],\n    ...               [-4, 7, 2, 12, 0],\n    ...               [-10, 2, 44, 2, -19],\n    ...               [-7, 12, 2, 79, -34],\n    ...               [2, 0, -19, -34, 29]])\n    >>> eigh(A, eigvals_only=True, subset_by_value=[-np.inf, 10])\n    array([6.69199443e-07, 9.11938152e+00])\n    \n    Request the second smallest eigenvalue and its eigenvector\n    \n    >>> w, v = eigh(A, subset_by_index=[1, 1])\n    >>> w\n    array([9.11938152])\n    >>> v.shape  # only a single column is returned\n    (5, 1)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "92de23cb2b6930501716cf9c5d96794b46e1532362daf5a01d16cdca77f3be15",
            "fields": [
                {
                    "id": "gw61rs3k",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "A complex Hermitian or real symmetric matrix whose eigenvalues and\neigenvectors will be computed.",
                    "type": "(M, M) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8n6yhvf6",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "A complex Hermitian or real symmetric definite positive matrix in.\nIf omitted, identity matrix is assumed.",
                    "type": "(M, M) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d2ylforn",
                    "encoding": "",
                    "name": "lower",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether the pertinent array data is taken from the lower or upper\ntriangle of ``a`` and, if applicable, ``b``. (Default: lower)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "91ws85sq",
                    "encoding": "",
                    "name": "eigvals_only",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to calculate only eigenvalues and no eigenvectors.\n(Default: both are calculated)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y04d6a41",
                    "encoding": "",
                    "name": "overwrite_a",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to overwrite data in ``a`` (may improve performance). Default\nis False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "op6_mh1b",
                    "encoding": "",
                    "name": "overwrite_b",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to overwrite data in ``b`` (may improve performance). Default\nis False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2iowbq01",
                    "encoding": "",
                    "name": "type",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "For the generalized problems, this keyword specifies the problem type\nto be solved for ``w`` and ``v`` (only takes 1, 2, 3 as possible\ninputs)::\n\n    1 =>     a @ v = w @ b @ v\n    2 => a @ b @ v = w @ v\n    3 => b @ a @ v = w @ v\n\nThis keyword is ignored for standard problems.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hq8u16u6",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrices contain only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3ucz9x5g",
                    "encoding": "",
                    "name": "subset_by_index",
                    "value": "",
                    "defaultValue": "",
                    "description": "If provided, this two-element iterable defines the start and the end\nindices of the desired eigenvalues (ascending order and 0-indexed).\nTo return only the second smallest to fifth smallest eigenvalues,\n``[1, 4]`` is used. ``[n-3, n-1]`` returns the largest three. Only\navailable with \"evr\", \"evx\", and \"gvx\" drivers. The entries are\ndirectly converted to integers via ``int()``.",
                    "type": "iterable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ws7_ai5r",
                    "encoding": "",
                    "name": "subset_by_value",
                    "value": "",
                    "defaultValue": "",
                    "description": "If provided, this two-element iterable defines the half-open interval\n``(a, b]`` that, if any, only the eigenvalues between these values\nare returned. Only available with \"evr\", \"evx\", and \"gvx\" drivers. Use\n``np.inf`` for the unconstrained ends.",
                    "type": "iterable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0wsprf3c",
                    "encoding": "",
                    "name": "driver",
                    "value": "",
                    "defaultValue": "",
                    "description": "Defines which LAPACK driver should be used. Valid options are \"ev\",\n\"evd\", \"evr\", \"evx\" for standard problems and \"gv\", \"gvd\", \"gvx\" for\ngeneralized (where b is not None) problems. See the Notes section.\nThe default for standard problems is \"evr\". For generalized problems,\n\"gvd\" is used for full set, and \"gvx\" for subset requested cases.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ate6g5pm",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.eigh",
                    "defaultValue": "scipy.linalg.eigh",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "73xzo4af",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3i_b667z",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "qd55g9in",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gk401szw",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u_yldbkf",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a7b5ggo1",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ronh254b",
            "name": "linalg.eigh_tridiagonal",
            "description": "Solve eigenvalue problem for a real symmetric tridiagonal matrix.\n    \n    Find eigenvalues `w` and optionally right eigenvectors `v` of ``a``::\n    \n        a v[:,i] = w[i] v[:,i]\n        v.H v    = identity\n    \n    For a real symmetric matrix ``a`` with diagonal elements `d` and\n    off-diagonal elements `e`.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    d : ndarray, shape (ndim,)\n        The diagonal elements of the array.\n    e : ndarray, shape (ndim-1,)\n        The off-diagonal elements of the array.\n    eigvals_only : bool, optional\n        Compute only the eigenvalues and no eigenvectors.\n        (Default: calculate also eigenvectors)\n    select : {'a', 'v', 'i'}, optional\n        Which eigenvalues to calculate\n        \n        ======  ========================================\n        select  calculated\n        ======  ========================================\n        'a'     All eigenvalues\n        'v'     Eigenvalues in the interval (min, max]\n        'i'     Eigenvalues with indices min <= i <= max\n        ======  ========================================\n    select_range : (min, max), optional\n        Range of selected eigenvalues\n    check_finite : bool, optional\n        Whether to check that the input matrix contains only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    tol : float\n        The absolute tolerance to which each eigenvalue is required\n        (only used when 'stebz' is the `lapack_driver`).\n        An eigenvalue (or cluster) is considered to have converged if it\n        lies in an interval of this width. If <= 0. (default),\n        the value ``eps*|a|`` is used where eps is the machine precision,\n        and ``|a|`` is the 1-norm of the matrix ``a``.\n    lapack_driver : str\n        LAPACK function to use, can be 'auto', 'stemr', 'stebz', 'sterf',\n        'stev', or 'stevd'. When 'auto' (default), it will use 'stevd' if ``select='a'``\n        and 'stebz' otherwise. When 'stebz' is used to find the eigenvalues and\n        ``eigvals_only=False``, then a second LAPACK call (to ``?STEIN``) is\n        used to find the corresponding eigenvectors. 'sterf' can only be\n        used when ``eigvals_only=True`` and ``select='a'``. 'stev' can only\n        be used when ``select='a'``.\n    \n    Returns\n    -------\n    w : (M,) ndarray\n        The eigenvalues, in ascending order, each repeated according to its\n        multiplicity.\n    v : (M, M) ndarray\n        The normalized eigenvector corresponding to the eigenvalue ``w[i]`` is\n        the column ``v[:,i]``. Only returned if ``eigvals_only=False``.\n    \n    Raises\n    ------\n    LinAlgError\n        If eigenvalue computation does not converge.\n    \n    See Also\n    --------\n    \n    :func:`eigvalsh_tridiagonal`\n        eigenvalues of symmetric/Hermitian tridiagonal matrices\n    :func:`eig`\n        eigenvalues and right eigenvectors for non-symmetric arrays\n    :func:`eigh`\n        eigenvalues and right eigenvectors for symmetric/Hermitian arrays\n    :func:`eig_banded`\n        eigenvalues and right eigenvectors for symmetric/Hermitian band matrices\n    \n    \n    Notes\n    -----\n    This function makes use of LAPACK ``S/DSTEMR`` routines.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import eigh_tridiagonal\n    >>> d = 3*np.ones(4)\n    >>> e = -1*np.ones(3)\n    >>> w, v = eigh_tridiagonal(d, e)\n    >>> A = np.diag(d) + np.diag(e, k=1) + np.diag(e, k=-1)\n    >>> np.allclose(A @ v - v @ np.diag(w), np.zeros((4, 4)))\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "0fa3234774391c7591cdadc31c17d47b7f51bac11b51d7eb9d45bd58c229bbf4",
            "fields": [
                {
                    "id": "au4rvree",
                    "encoding": "",
                    "name": "d",
                    "value": "",
                    "defaultValue": "",
                    "description": "The diagonal elements of the array.",
                    "type": "ndarray, shape (ndim,)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qlinjc4e",
                    "encoding": "",
                    "name": "e",
                    "value": "",
                    "defaultValue": "",
                    "description": "The off-diagonal elements of the array.",
                    "type": "ndarray, shape (ndim-1,)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "swr880zz",
                    "encoding": "",
                    "name": "eigvals_only",
                    "value": false,
                    "defaultValue": false,
                    "description": "Compute only the eigenvalues and no eigenvectors.\n(Default: calculate also eigenvectors)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mvwkhwml",
                    "encoding": "",
                    "name": "select",
                    "value": "a",
                    "defaultValue": "a",
                    "description": "Which eigenvalues to calculate\n\n======  ========================================\nselect  calculated\n======  ========================================\n'a'     All eigenvalues\n'v'     Eigenvalues in the interval (min, max]\n'i'     Eigenvalues with indices min <= i <= max\n======  ========================================",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t0q_b2zf",
                    "encoding": "",
                    "name": "select_range",
                    "value": "",
                    "defaultValue": "",
                    "description": "Range of selected eigenvalues",
                    "type": "(min, max)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y_fp6vf7",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrix contains only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tbohgvfu",
                    "encoding": "",
                    "name": "tol",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "The absolute tolerance to which each eigenvalue is required\n(only used when 'stebz' is the `lapack_driver`).\nAn eigenvalue (or cluster) is considered to have converged if it\nlies in an interval of this width. If <= 0. (default),\nthe value ``eps*|a|`` is used where eps is the machine precision,\nand ``|a|`` is the 1-norm of the matrix ``a``.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "utq3ia35",
                    "encoding": "",
                    "name": "lapack_driver",
                    "value": "auto",
                    "defaultValue": "auto",
                    "description": "LAPACK function to use, can be 'auto', 'stemr', 'stebz', 'sterf',\n'stev', or 'stevd'. When 'auto' (default), it will use 'stevd' if ``select='a'``\nand 'stebz' otherwise. When 'stebz' is used to find the eigenvalues and\n``eigvals_only=False``, then a second LAPACK call (to ``?STEIN``) is\nused to find the corresponding eigenvectors. 'sterf' can only be\nused when ``eigvals_only=True`` and ``select='a'``. 'stev' can only\nbe used when ``select='a'``.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fhlvrq05",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.eigh_tridiagonal",
                    "defaultValue": "scipy.linalg.eigh_tridiagonal",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qlb2dc6m",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dtxw5im9",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "kyman71i",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uft_lcut",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4on0hk88",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_4j2aj5d",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ce1bzmiv",
            "name": "linalg.eigvals",
            "description": "Compute eigenvalues from an ordinary or generalized eigenvalue problem.\n    \n    Find eigenvalues of a general matrix::\n    \n        a   vr[:,i] = w[i]        b   vr[:,i]\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a : (M, M) array_like\n        A complex or real matrix whose eigenvalues and eigenvectors\n        will be computed.\n    b : (M, M) array_like, optional\n        Right-hand side matrix in a generalized eigenvalue problem.\n        If omitted, identity matrix is assumed.\n    overwrite_a : bool, optional\n        Whether to overwrite data in a (may improve performance)\n    check_finite : bool, optional\n        Whether to check that the input matrices contain only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities\n        or NaNs.\n    homogeneous_eigvals : bool, optional\n        If True, return the eigenvalues in homogeneous coordinates.\n        In this case ``w`` is a (2, M) array so that::\n        \n            w[1,i] a vr[:,i] = w[0,i] b vr[:,i]\n        \n        Default is False.\n    \n    Returns\n    -------\n    w : (M,) or (2, M) double or complex ndarray\n        The eigenvalues, each repeated according to its multiplicity\n        but not in any specific order. The shape is (M,) unless\n        ``homogeneous_eigvals=True``.\n    \n    Raises\n    ------\n    LinAlgError\n        If eigenvalue computation does not converge\n    \n    See Also\n    --------\n    \n    :func:`eig`\n        eigenvalues and right eigenvectors of general arrays.\n    :func:`eigvalsh`\n        eigenvalues of symmetric or Hermitian arrays\n    :func:`eigvals_banded`\n        eigenvalues for symmetric/Hermitian band matrices\n    :func:`eigvalsh_tridiagonal`\n        eigenvalues of symmetric/Hermitian tridiagonal matrices\n    \n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy import linalg\n    >>> a = np.array([[0., -1.], [1., 0.]])\n    >>> linalg.eigvals(a)\n    array([0.+1.j, 0.-1.j])\n    \n    >>> b = np.array([[0., 1.], [1., 1.]])\n    >>> linalg.eigvals(a, b)\n    array([ 1.+0.j, -1.+0.j])\n    \n    >>> a = np.array([[3., 0., 0.], [0., 8., 0.], [0., 0., 7.]])\n    >>> linalg.eigvals(a, homogeneous_eigvals=True)\n    array([[3.+0.j, 8.+0.j, 7.+0.j],\n           [1.+0.j, 1.+0.j, 1.+0.j]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8972abbd636badadaa0db31753f18d15540631003be2cc27ed550693bfc7f621",
            "fields": [
                {
                    "id": "fqtf7fqh",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "A complex or real matrix whose eigenvalues and eigenvectors\nwill be computed.",
                    "type": "(M, M) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h01fyhw0",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "Right-hand side matrix in a generalized eigenvalue problem.\nIf omitted, identity matrix is assumed.",
                    "type": "(M, M) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gseah2bf",
                    "encoding": "",
                    "name": "overwrite_a",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to overwrite data in a (may improve performance)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ea4yd2sr",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrices contain only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities\nor NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ih712nd4",
                    "encoding": "",
                    "name": "homogeneous_eigvals",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, return the eigenvalues in homogeneous coordinates.\nIn this case ``w`` is a (2, M) array so that::\n\n    w[1,i] a vr[:,i] = w[0,i] b vr[:,i]\n\nDefault is False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ij6n7isd",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.eigvals",
                    "defaultValue": "scipy.linalg.eigvals",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uu3knznp",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3m3gti7g",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "u6fiehrm",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r5zmmub3",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ouzb2bt5",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x5lhzzul",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "rztg63ph",
            "name": "linalg.eigvals_banded",
            "description": "Solve real symmetric or complex Hermitian band matrix eigenvalue problem.\n    \n    Find eigenvalues w of a::\n    \n        a v[:,i] = w[i] v[:,i]\n        v.H v    = identity\n    \n    The matrix a is stored in a_band either in lower diagonal or upper\n    diagonal ordered form:\n    \n        a_band[u + i - j, j] == a[i,j]        (if upper form; i <= j)\n        a_band[    i - j, j] == a[i,j]        (if lower form; i >= j)\n    \n    where u is the number of bands above the diagonal.\n    \n    Example of a_band (shape of a is (6,6), u=2)::\n    \n        upper form:\n        *   *   a02 a13 a24 a35\n        *   a01 a12 a23 a34 a45\n        a00 a11 a22 a33 a44 a55\n    \n        lower form:\n        a00 a11 a22 a33 a44 a55\n        a10 a21 a32 a43 a54 *\n        a20 a31 a42 a53 *   *\n    \n    Cells marked with * are not used.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a_band : (u+1, M) array_like\n        The bands of the M by M matrix a.\n    lower : bool, optional\n        Is the matrix in the lower form. (Default is upper form)\n    overwrite_a_band : bool, optional\n        Discard data in a_band (may enhance performance)\n    select : {'a', 'v', 'i'}, optional\n        Which eigenvalues to calculate\n        \n        ======  ========================================\n        select  calculated\n        ======  ========================================\n        'a'     All eigenvalues\n        'v'     Eigenvalues in the interval (min, max]\n        'i'     Eigenvalues with indices min <= i <= max\n        ======  ========================================\n    select_range : (min, max), optional\n        Range of selected eigenvalues\n    check_finite : bool, optional\n        Whether to check that the input matrix contains only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    w : (M,) ndarray\n        The eigenvalues, in ascending order, each repeated according to its\n        multiplicity.\n    \n    Raises\n    ------\n    LinAlgError\n        If eigenvalue computation does not converge.\n    \n    See Also\n    --------\n    \n    :func:`eig_banded`\n        eigenvalues and right eigenvectors for symmetric/Hermitian band matrices\n    :func:`eigvalsh_tridiagonal`\n        eigenvalues of symmetric/Hermitian tridiagonal matrices\n    :func:`eigvals`\n        eigenvalues of general arrays\n    :func:`eigh`\n        eigenvalues and right eigenvectors for symmetric/Hermitian arrays\n    :func:`eig`\n        eigenvalues and right eigenvectors for non-symmetric arrays\n    \n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import eigvals_banded\n    >>> A = np.array([[1, 5, 2, 0], [5, 2, 5, 2], [2, 5, 3, 5], [0, 2, 5, 4]])\n    >>> Ab = np.array([[1, 2, 3, 4], [5, 5, 5, 0], [2, 2, 0, 0]])\n    >>> w = eigvals_banded(Ab, lower=True)\n    >>> w\n    array([-4.26200532, -2.22987175,  3.95222349, 12.53965359])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "de5182d711fb24be149157b494354e39625c6246ab316955aaeb0410a4d0d21f",
            "fields": [
                {
                    "id": "vpl5_k4i",
                    "encoding": "",
                    "name": "a_band",
                    "value": "",
                    "defaultValue": "",
                    "description": "The bands of the M by M matrix a.",
                    "type": "(u+1, M) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iw3_r8ke",
                    "encoding": "",
                    "name": "lower",
                    "value": false,
                    "defaultValue": false,
                    "description": "Is the matrix in the lower form. (Default is upper form)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mdrtl9vb",
                    "encoding": "",
                    "name": "overwrite_a_band",
                    "value": false,
                    "defaultValue": false,
                    "description": "Discard data in a_band (may enhance performance)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "31f6zu_1",
                    "encoding": "",
                    "name": "select",
                    "value": "a",
                    "defaultValue": "a",
                    "description": "Which eigenvalues to calculate\n\n======  ========================================\nselect  calculated\n======  ========================================\n'a'     All eigenvalues\n'v'     Eigenvalues in the interval (min, max]\n'i'     Eigenvalues with indices min <= i <= max\n======  ========================================",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bydusp63",
                    "encoding": "",
                    "name": "select_range",
                    "value": "",
                    "defaultValue": "",
                    "description": "Range of selected eigenvalues",
                    "type": "(min, max)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6a3scjkn",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrix contains only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eot8ni1y",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.eigvals_banded",
                    "defaultValue": "scipy.linalg.eigvals_banded",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h6_zuzeq",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "def8au6y",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "z076kdtv",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ic5shatg",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f6u6ojs1",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7e6r2t1z",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "zwoek39p",
            "name": "linalg.eigvalsh",
            "description": "Solves a standard or generalized eigenvalue problem for a complex\n    Hermitian or real symmetric matrix.\n    \n    Find eigenvalues array ``w`` of array ``a``, where ``b`` is positive\n    definite such that for every eigenvalue \u03bb (i-th entry of w) and its\n    eigenvector vi (i-th column of v) satisfies::\n    \n                      a @ vi = \u03bb * b @ vi\n        vi.conj().T @ a @ vi = \u03bb\n        vi.conj().T @ b @ vi = 1\n    \n    In the standard problem, b is assumed to be the identity matrix.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a : (M, M) array_like\n        A complex Hermitian or real symmetric matrix whose eigenvalues will\n        be computed.\n    b : (M, M) array_like, optional\n        A complex Hermitian or real symmetric definite positive matrix in.\n        If omitted, identity matrix is assumed.\n    lower : bool, optional\n        Whether the pertinent array data is taken from the lower or upper\n        triangle of ``a`` and, if applicable, ``b``. (Default: lower)\n    overwrite_a : bool, optional\n        Whether to overwrite data in ``a`` (may improve performance). Default\n        is False.\n    overwrite_b : bool, optional\n        Whether to overwrite data in ``b`` (may improve performance). Default\n        is False.\n    type : int, optional\n        For the generalized problems, this keyword specifies the problem type\n        to be solved for ``w`` and ``v`` (only takes 1, 2, 3 as possible\n        inputs)::\n        \n            1 =>     a @ v = w @ b @ v\n            2 => a @ b @ v = w @ v\n            3 => b @ a @ v = w @ v\n        \n        This keyword is ignored for standard problems.\n    check_finite : bool, optional\n        Whether to check that the input matrices contain only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    subset_by_index : iterable, optional\n        If provided, this two-element iterable defines the start and the end\n        indices of the desired eigenvalues (ascending order and 0-indexed).\n        To return only the second smallest to fifth smallest eigenvalues,\n        ``[1, 4]`` is used. ``[n-3, n-1]`` returns the largest three. Only\n        available with \"evr\", \"evx\", and \"gvx\" drivers. The entries are\n        directly converted to integers via ``int()``.\n    subset_by_value : iterable, optional\n        If provided, this two-element iterable defines the half-open interval\n        ``(a, b]`` that, if any, only the eigenvalues between these values\n        are returned. Only available with \"evr\", \"evx\", and \"gvx\" drivers. Use\n        ``np.inf`` for the unconstrained ends.\n    driver : str, optional\n        Defines which LAPACK driver should be used. Valid options are \"ev\",\n        \"evd\", \"evr\", \"evx\" for standard problems and \"gv\", \"gvd\", \"gvx\" for\n        generalized (where b is not None) problems. See the Notes section of\n        `scipy.linalg.eigh`.\n    \n    Returns\n    -------\n    w : (N,) ndarray\n        The N (N<=M) selected eigenvalues, in ascending order, each\n        repeated according to its multiplicity.\n    \n    Raises\n    ------\n    LinAlgError\n        If eigenvalue computation does not converge, an error occurred, or\n        b matrix is not definite positive. Note that if input matrices are\n        not symmetric or Hermitian, no error will be reported but results will\n        be wrong.\n    \n    See Also\n    --------\n    \n    :func:`eigh`\n        eigenvalues and right eigenvectors for symmetric/Hermitian arrays\n    :func:`eigvals`\n        eigenvalues of general arrays\n    :func:`eigvals_banded`\n        eigenvalues for symmetric/Hermitian band matrices\n    :func:`eigvalsh_tridiagonal`\n        eigenvalues of symmetric/Hermitian tridiagonal matrices\n    \n    \n    Notes\n    -----\n    This function does not check the input array for being Hermitian/symmetric\n    in order to allow for representing arrays with only their upper/lower\n    triangular parts.\n    \n    This function serves as a one-liner shorthand for `scipy.linalg.eigh` with\n    the option ``eigvals_only=True`` to get the eigenvalues and not the\n    eigenvectors. Here it is kept as a legacy convenience. It might be\n    beneficial to use the main function to have full control and to be a bit\n    more pythonic.\n    \n    Examples\n    --------\n    For more examples see `scipy.linalg.eigh`.\n    \n    >>> import numpy as np\n    >>> from scipy.linalg import eigvalsh\n    >>> A = np.array([[6, 3, 1, 5], [3, 0, 5, 1], [1, 5, 6, 2], [5, 1, 2, 2]])\n    >>> w = eigvalsh(A)\n    >>> w\n    array([-3.74637491, -0.76263923,  6.08502336, 12.42399079])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "356a2bfb0f1e85ffa560156527424630e0d7c6c1397c2ef582542f7ae7a31653",
            "fields": [
                {
                    "id": "zu8r22jb",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "A complex Hermitian or real symmetric matrix whose eigenvalues will\nbe computed.",
                    "type": "(M, M) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vwilq5um",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "A complex Hermitian or real symmetric definite positive matrix in.\nIf omitted, identity matrix is assumed.",
                    "type": "(M, M) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i6npa3nn",
                    "encoding": "",
                    "name": "lower",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether the pertinent array data is taken from the lower or upper\ntriangle of ``a`` and, if applicable, ``b``. (Default: lower)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1pk624p7",
                    "encoding": "",
                    "name": "overwrite_a",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to overwrite data in ``a`` (may improve performance). Default\nis False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7c8wz0l9",
                    "encoding": "",
                    "name": "overwrite_b",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to overwrite data in ``b`` (may improve performance). Default\nis False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xaq2zebb",
                    "encoding": "",
                    "name": "type",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "For the generalized problems, this keyword specifies the problem type\nto be solved for ``w`` and ``v`` (only takes 1, 2, 3 as possible\ninputs)::\n\n    1 =>     a @ v = w @ b @ v\n    2 => a @ b @ v = w @ v\n    3 => b @ a @ v = w @ v\n\nThis keyword is ignored for standard problems.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fll9rzez",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrices contain only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z_0p377g",
                    "encoding": "",
                    "name": "subset_by_index",
                    "value": "",
                    "defaultValue": "",
                    "description": "If provided, this two-element iterable defines the start and the end\nindices of the desired eigenvalues (ascending order and 0-indexed).\nTo return only the second smallest to fifth smallest eigenvalues,\n``[1, 4]`` is used. ``[n-3, n-1]`` returns the largest three. Only\navailable with \"evr\", \"evx\", and \"gvx\" drivers. The entries are\ndirectly converted to integers via ``int()``.",
                    "type": "iterable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8dn7txpc",
                    "encoding": "",
                    "name": "subset_by_value",
                    "value": "",
                    "defaultValue": "",
                    "description": "If provided, this two-element iterable defines the half-open interval\n``(a, b]`` that, if any, only the eigenvalues between these values\nare returned. Only available with \"evr\", \"evx\", and \"gvx\" drivers. Use\n``np.inf`` for the unconstrained ends.",
                    "type": "iterable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x79_56mf",
                    "encoding": "",
                    "name": "driver",
                    "value": "",
                    "defaultValue": "",
                    "description": "Defines which LAPACK driver should be used. Valid options are \"ev\",\n\"evd\", \"evr\", \"evx\" for standard problems and \"gv\", \"gvd\", \"gvx\" for\ngeneralized (where b is not None) problems. See the Notes section of\n`scipy.linalg.eigh`.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2v_t6j7x",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.eigvalsh",
                    "defaultValue": "scipy.linalg.eigvalsh",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2l6p6bcn",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wrls7rxi",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "2n4egttn",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5d6f4tio",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8o21jl5k",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ylu3csup",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "0m8n4hly",
            "name": "linalg.eigvalsh_tridiagonal",
            "description": "Solve eigenvalue problem for a real symmetric tridiagonal matrix.\n    \n    Find eigenvalues `w` of ``a``::\n    \n        a v[:,i] = w[i] v[:,i]\n        v.H v    = identity\n    \n    For a real symmetric matrix ``a`` with diagonal elements `d` and\n    off-diagonal elements `e`.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    d : ndarray, shape (ndim,)\n        The diagonal elements of the array.\n    e : ndarray, shape (ndim-1,)\n        The off-diagonal elements of the array.\n    select : {'a', 'v', 'i'}, optional\n        Which eigenvalues to calculate\n        \n        ======  ========================================\n        select  calculated\n        ======  ========================================\n        'a'     All eigenvalues\n        'v'     Eigenvalues in the interval (min, max]\n        'i'     Eigenvalues with indices min <= i <= max\n        ======  ========================================\n    select_range : (min, max), optional\n        Range of selected eigenvalues\n    check_finite : bool, optional\n        Whether to check that the input matrix contains only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    tol : float\n        The absolute tolerance to which each eigenvalue is required\n        (only used when ``lapack_driver='stebz'``).\n        An eigenvalue (or cluster) is considered to have converged if it\n        lies in an interval of this width. If <= 0. (default),\n        the value ``eps*|a|`` is used where eps is the machine precision,\n        and ``|a|`` is the 1-norm of the matrix ``a``.\n    lapack_driver : str\n        LAPACK function to use, can be 'auto', 'stemr', 'stebz',  'sterf',\n        'stev', or 'stevd'. When 'auto' (default), it will use 'stevd' if\n        ``select='a'`` and 'stebz' otherwise. 'sterf' and 'stev' can only\n        be used when ``select='a'``.\n    \n    Returns\n    -------\n    w : (M,) ndarray\n        The eigenvalues, in ascending order, each repeated according to its\n        multiplicity.\n    \n    Raises\n    ------\n    LinAlgError\n        If eigenvalue computation does not converge.\n    \n    See Also\n    --------\n    \n    :func:`eigh_tridiagonal`\n        eigenvalues and right eiegenvectors for symmetric/Hermitian tridiagonal matrices\n    \n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import eigvalsh_tridiagonal, eigvalsh\n    >>> d = 3*np.ones(4)\n    >>> e = -1*np.ones(3)\n    >>> w = eigvalsh_tridiagonal(d, e)\n    >>> A = np.diag(d) + np.diag(e, k=1) + np.diag(e, k=-1)\n    >>> w2 = eigvalsh(A)  # Verify with other eigenvalue routines\n    >>> np.allclose(w - w2, np.zeros(4))\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d9b51e1c1201f8ed22107defc3b85c142892ed3344c0574860ce4ccb262c0d67",
            "fields": [
                {
                    "id": "43npezgs",
                    "encoding": "",
                    "name": "d",
                    "value": "",
                    "defaultValue": "",
                    "description": "The diagonal elements of the array.",
                    "type": "ndarray, shape (ndim,)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i2tp2sag",
                    "encoding": "",
                    "name": "e",
                    "value": "",
                    "defaultValue": "",
                    "description": "The off-diagonal elements of the array.",
                    "type": "ndarray, shape (ndim-1,)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sflyyu5q",
                    "encoding": "",
                    "name": "select",
                    "value": "a",
                    "defaultValue": "a",
                    "description": "Which eigenvalues to calculate\n\n======  ========================================\nselect  calculated\n======  ========================================\n'a'     All eigenvalues\n'v'     Eigenvalues in the interval (min, max]\n'i'     Eigenvalues with indices min <= i <= max\n======  ========================================",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5ske8wba",
                    "encoding": "",
                    "name": "select_range",
                    "value": "",
                    "defaultValue": "",
                    "description": "Range of selected eigenvalues",
                    "type": "(min, max)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qf1vdj5g",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrix contains only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nr_8jny6",
                    "encoding": "",
                    "name": "tol",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "The absolute tolerance to which each eigenvalue is required\n(only used when ``lapack_driver='stebz'``).\nAn eigenvalue (or cluster) is considered to have converged if it\nlies in an interval of this width. If <= 0. (default),\nthe value ``eps*|a|`` is used where eps is the machine precision,\nand ``|a|`` is the 1-norm of the matrix ``a``.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dpfcj6xh",
                    "encoding": "",
                    "name": "lapack_driver",
                    "value": "auto",
                    "defaultValue": "auto",
                    "description": "LAPACK function to use, can be 'auto', 'stemr', 'stebz',  'sterf',\n'stev', or 'stevd'. When 'auto' (default), it will use 'stevd' if\n``select='a'`` and 'stebz' otherwise. 'sterf' and 'stev' can only\nbe used when ``select='a'``.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "78_6_b6k",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.eigvalsh_tridiagonal",
                    "defaultValue": "scipy.linalg.eigvalsh_tridiagonal",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tsb6_bqo",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lpbbdqza",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "70u2klqq",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "krm7rcjh",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f_3bn2_x",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ugtp4sga",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "w4bq_3u0",
            "name": "linalg.expm",
            "description": "Compute the matrix exponential of an array.\n    \n    Parameters\n    ----------\n    A : ndarray\n        Input with last two dimensions are square ``(..., n, n)``.\n    \n    Returns\n    -------\n    eA : ndarray\n        The resulting matrix exponential with the same shape of ``A``\n    \n    Notes\n    -----\n    Implements the algorithm given in [1], which is essentially a Pade\n    approximation with a variable order that is decided based on the array\n    data.\n    \n    For input with size ``n``, the memory usage is in the worst case in the\n    order of ``8*(n**2)``. If the input data is not of single and double\n    precision of real and complex dtypes, it is copied to a new array.\n    \n    For cases ``n >= 400``, the exact 1-norm computation cost, breaks even with\n    1-norm estimation and from that point on the estimation scheme given in\n    [2] is used to decide on the approximation order.\n    \n    References\n    ----------\n    .. [1] Awad H. Al-Mohy and Nicholas J. Higham, (2009), \"A New Scaling\n           and Squaring Algorithm for the Matrix Exponential\", SIAM J. Matrix\n           Anal. Appl. 31(3):970-989, :doi:`10.1137/09074721X`\n    \n    .. [2] Nicholas J. Higham and Francoise Tisseur (2000), \"A Block Algorithm\n           for Matrix 1-Norm Estimation, with an Application to 1-Norm\n           Pseudospectra.\" SIAM J. Matrix Anal. Appl. 21(4):1185-1201,\n           :doi:`10.1137/S0895479899356080`\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import expm, sinm, cosm\n    \n    Matrix version of the formula exp(0) = 1:\n    \n    >>> expm(np.zeros((3, 2, 2)))\n    array([[[1., 0.],\n            [0., 1.]],\n    <BLANKLINE>\n           [[1., 0.],\n            [0., 1.]],\n    <BLANKLINE>\n           [[1., 0.],\n            [0., 1.]]])\n    \n    Euler's identity (exp(i*theta) = cos(theta) + i*sin(theta))\n    applied to a matrix:\n    \n    >>> a = np.array([[1.0, 2.0], [-1.0, 3.0]])\n    >>> expm(1j*a)\n    array([[ 0.42645930+1.89217551j, -2.13721484-0.97811252j],\n           [ 1.06860742+0.48905626j, -1.71075555+0.91406299j]])\n    >>> cosm(a) + 1j*sinm(a)\n    array([[ 0.42645930+1.89217551j, -2.13721484-0.97811252j],\n           [ 1.06860742+0.48905626j, -1.71075555+0.91406299j]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1974efdb4c59e69c1427e5fbca6e3cb7d39618d33f725c950ab49991573429e8",
            "fields": [
                {
                    "id": "3qnonal_",
                    "encoding": "",
                    "name": "A",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input with last two dimensions are square ``(..., n, n)``.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y9t86d7c",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.expm",
                    "defaultValue": "scipy.linalg.expm",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s0v3pg3g",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ctyrx44k",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "skof5x8n",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fz13hpqx",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8vzxaq7z",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c6y8k98w",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "es75hid9",
            "name": "linalg.expm_cond",
            "description": "Relative condition number of the matrix exponential in the Frobenius norm.\n    \n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    A : 2-D array_like\n        Square input matrix with shape (N, N).\n    check_finite : bool, optional\n        Whether to check that the input matrix contains only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    kappa : float\n        The relative condition number of the matrix exponential\n        in the Frobenius norm\n    \n    See Also\n    --------\n    \n    :func:`expm`\n        Compute the exponential of a matrix.\n    :func:`expm_frechet`\n        Compute the Frechet derivative of the matrix exponential.\n    \n    \n    Notes\n    -----\n    A faster estimate for the condition number in the 1-norm\n    has been published but is not yet implemented in SciPy.\n    \n    .. versionadded:: 0.14.0\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import expm_cond\n    >>> A = np.array([[-0.3, 0.2, 0.6], [0.6, 0.3, -0.1], [-0.7, 1.2, 0.9]])\n    >>> k = expm_cond(A)\n    >>> k\n    1.7787805864469866",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "3c01bf43153a4f6e1654723a9057201f4127db5a1d9511832e513a0dd73a234c",
            "fields": [
                {
                    "id": "2u6q9hsa",
                    "encoding": "",
                    "name": "A",
                    "value": "",
                    "defaultValue": "",
                    "description": "Square input matrix with shape (N, N).",
                    "type": "2-D arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xvjyrfqq",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrix contains only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ttdlidog",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.expm_cond",
                    "defaultValue": "scipy.linalg.expm_cond",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "akl5ixjn",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v8s0gh9_",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "8hcbd_hs",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m17gpnf8",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ptkm7_gl",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "unv6dmdf",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "8upe1kcb",
            "name": "linalg.expm_frechet",
            "description": "Frechet derivative of the matrix exponential of A in the direction E.\n    \n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    A : (N, N) array_like\n        Matrix of which to take the matrix exponential.\n    E : (N, N) array_like\n        Matrix direction in which to take the Frechet derivative.\n    method : str, optional\n        Choice of algorithm. Should be one of\n        \n        - `SPS` (default)\n        - `blockEnlarge`\n    compute_expm : bool, optional\n        Whether to compute also `expm_A` in addition to `expm_frechet_AE`.\n        Default is True.\n    check_finite : bool, optional\n        Whether to check that the input matrix contains only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    expm_A : ndarray\n        Matrix exponential of A.\n    expm_frechet_AE : ndarray\n        Frechet derivative of the matrix exponential of A in the direction E.\n    For ``compute_expm = False``, only `expm_frechet_AE` is returned.\n    \n    See Also\n    --------\n    \n    :func:`expm`\n        Compute the exponential of a matrix.\n    \n    \n    Notes\n    -----\n    This section describes the available implementations that can be selected\n    by the `method` parameter. The default method is *SPS*.\n    \n    Method *blockEnlarge* is a naive algorithm.\n    \n    Method *SPS* is Scaling-Pade-Squaring [1]_.\n    It is a sophisticated implementation which should take\n    only about 3/8 as much time as the naive implementation.\n    The asymptotics are the same.\n    \n    .. versionadded:: 0.13.0\n    \n    References\n    ----------\n    .. [1] Awad H. Al-Mohy and Nicholas J. Higham (2009)\n           Computing the Frechet Derivative of the Matrix Exponential,\n           with an application to Condition Number Estimation.\n           SIAM Journal On Matrix Analysis and Applications.,\n           30 (4). pp. 1639-1657. ISSN 1095-7162\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy import linalg\n    >>> rng = np.random.default_rng()\n    \n    >>> A = rng.standard_normal((3, 3))\n    >>> E = rng.standard_normal((3, 3))\n    >>> expm_A, expm_frechet_AE = linalg.expm_frechet(A, E)\n    >>> expm_A.shape, expm_frechet_AE.shape\n    ((3, 3), (3, 3))\n    \n    Create a 6x6 matrix containing [[A, E], [0, A]]:\n    \n    >>> M = np.zeros((6, 6))\n    >>> M[:3, :3] = A\n    >>> M[:3, 3:] = E\n    >>> M[3:, 3:] = A\n    \n    >>> expm_M = linalg.expm(M)\n    >>> np.allclose(expm_A, expm_M[:3, :3])\n    True\n    >>> np.allclose(expm_frechet_AE, expm_M[:3, 3:])\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "31b2fb1d3e29299b6a73df49577b05376cdb4bb82ae90db1bb5f4f4592b1ef5a",
            "fields": [
                {
                    "id": "_1edtz3i",
                    "encoding": "",
                    "name": "A",
                    "value": "",
                    "defaultValue": "",
                    "description": "Matrix of which to take the matrix exponential.",
                    "type": "(N, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ztqy4cg8",
                    "encoding": "",
                    "name": "E",
                    "value": "",
                    "defaultValue": "",
                    "description": "Matrix direction in which to take the Frechet derivative.",
                    "type": "(N, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h97rvneb",
                    "encoding": "",
                    "name": "method",
                    "value": "",
                    "defaultValue": "",
                    "description": "Choice of algorithm. Should be one of\n\n- `SPS` (default)\n- `blockEnlarge`",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rmc0luk9",
                    "encoding": "",
                    "name": "compute_expm",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to compute also `expm_A` in addition to `expm_frechet_AE`.\nDefault is True.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ohhntxun",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrix contains only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xgo7uksc",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.expm_frechet",
                    "defaultValue": "scipy.linalg.expm_frechet",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dcaa22e2",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xbuun_cm",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "q7mojq7b",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yy4zc8lx",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vs5xx2iz",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p8uwl9eo",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "wgegn3t0",
            "name": "linalg.fiedler",
            "description": "Returns a symmetric Fiedler matrix\n    \n    Given an sequence of numbers `a`, Fiedler matrices have the structure\n    ``F[i, j] = np.abs(a[i] - a[j])``, and hence zero diagonals and nonnegative\n    entries. A Fiedler matrix has a dominant positive eigenvalue and other\n    eigenvalues are negative. Although not valid generally, for certain inputs,\n    the inverse and the determinant can be derived explicitly as given in [1]_.\n    \n    Parameters\n    ----------\n    a : (..., n,) array_like\n        Coefficient array. N-dimensional arrays are treated as a batch:\n        each slice along the last axis is a 1-D coefficient array.\n    \n    Returns\n    -------\n    F : (..., n, n) ndarray\n        Fiedler matrix. For batch input, each slice of shape ``(n, n)``\n        along the last two dimensions of the output corresponds with a\n        slice of shape ``(n,)`` along the last dimension of the input.\n    \n    See Also\n    --------\n    circulant, toeplitz\n    \n    Notes\n    -----\n    \n    .. versionadded:: 1.3.0\n    \n    References\n    ----------\n    .. [1] J. Todd, \"Basic Numerical Mathematics: Vol.2 : Numerical Algebra\",\n        1977, Birkhauser, :doi:`10.1007/978-3-0348-7286-7`\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import det, inv, fiedler\n    >>> a = [1, 4, 12, 45, 77]\n    >>> n = len(a)\n    >>> A = fiedler(a)\n    >>> A\n    array([[ 0,  3, 11, 44, 76],\n           [ 3,  0,  8, 41, 73],\n           [11,  8,  0, 33, 65],\n           [44, 41, 33,  0, 32],\n           [76, 73, 65, 32,  0]])\n    \n    The explicit formulas for determinant and inverse seem to hold only for\n    monotonically increasing/decreasing arrays. Note the tridiagonal structure\n    and the corners.\n    \n    >>> Ai = inv(A)\n    >>> Ai[np.abs(Ai) < 1e-12] = 0.  # cleanup the numerical noise for display\n    >>> Ai\n    array([[-0.16008772,  0.16666667,  0.        ,  0.        ,  0.00657895],\n           [ 0.16666667, -0.22916667,  0.0625    ,  0.        ,  0.        ],\n           [ 0.        ,  0.0625    , -0.07765152,  0.01515152,  0.        ],\n           [ 0.        ,  0.        ,  0.01515152, -0.03077652,  0.015625  ],\n           [ 0.00657895,  0.        ,  0.        ,  0.015625  , -0.00904605]])\n    >>> det(A)\n    15409151.999999998\n    >>> (-1)**(n-1) * 2**(n-2) * np.diff(a).prod() * (a[-1] - a[0])\n    15409152",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "91a738c451aa673be3926c438741bd31268b3bbd25048a5afe948a3bdf234cb6",
            "fields": [
                {
                    "id": "fpl3tzyi",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Coefficient array. N-dimensional arrays are treated as a batch:\neach slice along the last axis is a 1-D coefficient array.",
                    "type": "(..., n,) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1nno79cj",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.fiedler",
                    "defaultValue": "scipy.linalg.fiedler",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wt75t33q",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1bv_tow1",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "rurgdk0c",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "99yzgkwy",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fbt5mxvd",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0lnhwzzd",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "215u46g6",
            "name": "linalg.fiedler_companion",
            "description": "Returns a Fiedler companion matrix\n    \n    Given a polynomial coefficient array ``a``, this function forms a\n    pentadiagonal matrix with a special structure whose eigenvalues coincides\n    with the roots of ``a``.\n    \n    Parameters\n    ----------\n    a : (..., N) array_like\n        1-D array of polynomial coefficients in descending order with a nonzero\n        leading coefficient. For ``N < 2``, an empty array is returned.\n        N-dimensional arrays are treated as a batch: each slice along the last\n        axis is a 1-D array of polynomial coefficients.\n    \n    Returns\n    -------\n    c : (..., N-1, N-1) ndarray\n        Resulting companion matrix. For batch input, each slice of shape\n        ``(N-1, N-1)`` along the last two dimensions of the output corresponds\n        with a slice of shape ``(N,)`` along the last dimension of the input.\n    \n    See Also\n    --------\n    companion\n    \n    Notes\n    -----\n    Similar to `companion`, each leading coefficient along the last axis of the\n    input should be nonzero.\n    If the leading coefficient is not 1, other coefficients are rescaled before\n    the array generation. To avoid numerical issues, it is best to provide a\n    monic polynomial.\n    \n    .. versionadded:: 1.3.0\n    \n    References\n    ----------\n    .. [1] M. Fiedler, \" A note on companion matrices\", Linear Algebra and its\n        Applications, 2003, :doi:`10.1016/S0024-3795(03)00548-2`\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import fiedler_companion, eigvals\n    >>> p = np.poly(np.arange(1, 9, 2))  # [1., -16., 86., -176., 105.]\n    >>> fc = fiedler_companion(p)\n    >>> fc\n    array([[  16.,  -86.,    1.,    0.],\n           [   1.,    0.,    0.,    0.],\n           [   0.,  176.,    0., -105.],\n           [   0.,    1.,    0.,    0.]])\n    >>> eigvals(fc)\n    array([7.+0.j, 5.+0.j, 3.+0.j, 1.+0.j])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "0e8064538ead2335118145cf37fb3d00366e8c0167c8f782211ee2dd3eda9777",
            "fields": [
                {
                    "id": "0r_pojel",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "1-D array of polynomial coefficients in descending order with a nonzero\nleading coefficient. For ``N < 2``, an empty array is returned.\nN-dimensional arrays are treated as a batch: each slice along the last\naxis is a 1-D array of polynomial coefficients.",
                    "type": "(..., N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gop4lomb",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.fiedler_companion",
                    "defaultValue": "scipy.linalg.fiedler_companion",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qlsv05td",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hcdg800k",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "7mc056li",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "phe7z17h",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "md2o8o51",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q809ayyn",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "3_jnnov9",
            "name": "linalg.find_best_blas_type",
            "description": "Find best-matching BLAS/LAPACK type.\n    \n    Arrays are used to determine the optimal prefix of BLAS routines.\n    \n    Parameters\n    ----------\n    arrays : sequence of ndarrays, optional\n        Arrays can be given to determine optimal prefix of BLAS\n        routines. If not given, double-precision routines will be\n        used, otherwise the most generic type in arrays will be used.\n    dtype : str or dtype, optional\n        Data-type specifier. Not used if `arrays` is non-empty.\n    \n    Returns\n    -------\n    prefix : str\n        BLAS/LAPACK prefix character.\n    dtype : dtype\n        Inferred Numpy data type.\n    prefer_fortran : bool\n        Whether to prefer Fortran order routines over C order.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> import scipy.linalg.blas as bla\n    >>> rng = np.random.default_rng()\n    >>> a = rng.random((10,15))\n    >>> b = np.asfortranarray(a)  # Change the memory layout order\n    >>> bla.find_best_blas_type((a,))\n    ('d', dtype('float64'), False)\n    >>> bla.find_best_blas_type((a*1j,))\n    ('z', dtype('complex128'), False)\n    >>> bla.find_best_blas_type((b,))\n    ('d', dtype('float64'), True)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4480d0a9839d13152ac7bd1c7cab1746d686576166f44ec4ec54327f9abdbd0e",
            "fields": [
                {
                    "id": "w59yh7rz",
                    "encoding": "",
                    "name": "arrays",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Arrays can be given to determine optimal prefix of BLAS\nroutines. If not given, double-precision routines will be\nused, otherwise the most generic type in arrays will be used.",
                    "type": "builtins.tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z2fl_fp6",
                    "encoding": "",
                    "name": "dtype",
                    "value": "",
                    "defaultValue": "",
                    "description": "Data-type specifier. Not used if `arrays` is non-empty.",
                    "type": "str or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ley3d3dp",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.find_best_blas_type",
                    "defaultValue": "scipy.linalg.find_best_blas_type",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3ptyt6de",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4_y_qesb",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "i_bz3e9e",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tn580ko1",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "klzzyg8f",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0o_apj4q",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "pgw41w0f",
            "name": "linalg.fractional_matrix_power",
            "description": "Compute the fractional power of a matrix.\n    \n    Proceeds according to the discussion in section (6) of [1]_.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    A : (N, N) array_like\n        Matrix whose fractional power to evaluate.\n    t : float\n        Fractional power.\n    \n    Returns\n    -------\n    X : (N, N) array_like\n        The fractional power of the matrix.\n    \n    References\n    ----------\n    .. [1] Nicholas J. Higham and Lijing lin (2011)\n           \"A Schur-Pade Algorithm for Fractional Powers of a Matrix.\"\n           SIAM Journal on Matrix Analysis and Applications,\n           32 (3). pp. 1056-1078. ISSN 0895-4798\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import fractional_matrix_power\n    >>> a = np.array([[1.0, 3.0], [1.0, 4.0]])\n    >>> b = fractional_matrix_power(a, 0.5)\n    >>> b\n    array([[ 0.75592895,  1.13389342],\n           [ 0.37796447,  1.88982237]])\n    >>> np.dot(b, b)      # Verify square root\n    array([[ 1.,  3.],\n           [ 1.,  4.]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c071fffc22455aacf822c21b9564d5d642500dfa89d9f7ad6e8e8908c15cddab",
            "fields": [
                {
                    "id": "m3ttwcbg",
                    "encoding": "",
                    "name": "A",
                    "value": "",
                    "defaultValue": "",
                    "description": "Matrix whose fractional power to evaluate.",
                    "type": "(N, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t4rs6_ya",
                    "encoding": "",
                    "name": "t",
                    "value": "",
                    "defaultValue": "",
                    "description": "Fractional power.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "clx65kat",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.fractional_matrix_power",
                    "defaultValue": "scipy.linalg.fractional_matrix_power",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y175p_xg",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q082fuzh",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "0pcuhee6",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "df66fk42",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a2vgw9ql",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0jbdhxw8",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "euia7jde",
            "name": "linalg.funm",
            "description": "Evaluate a matrix function specified by a callable.\n    \n    Returns the value of matrix-valued function ``f`` at `A`. The\n    function ``f`` is an extension of the scalar-valued function `func`\n    to matrices.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    A : (N, N) array_like\n        Matrix at which to evaluate the function\n    func : callable\n        Callable object that evaluates a scalar function f.\n        Must be vectorized (eg. using vectorize).\n    disp : bool, optional\n        Print warning if error in the result is estimated large\n        instead of returning estimated error. (Default: True)\n    \n    Returns\n    -------\n    funm : (N, N) ndarray\n        Value of the matrix function specified by func evaluated at `A`\n    errest : float\n        (if disp == False)\n        \n        1-norm of the estimated error, ||err||_1 / ||A||_1\n    \n    Notes\n    -----\n    This function implements the general algorithm based on Schur decomposition\n    (Algorithm 9.1.1. in [1]_).\n    \n    If the input matrix is known to be diagonalizable, then relying on the\n    eigendecomposition is likely to be faster. For example, if your matrix is\n    Hermitian, you can do\n    \n    >>> from scipy.linalg import eigh\n    >>> def funm_herm(a, func, check_finite=False):\n    ...     w, v = eigh(a, check_finite=check_finite)\n    ...     ## if you further know that your matrix is positive semidefinite,\n    ...     ## you can optionally guard against precision errors by doing\n    ...     # w = np.maximum(w, 0)\n    ...     w = func(w)\n    ...     return (v * w).dot(v.conj().T)\n    \n    References\n    ----------\n    .. [1] Gene H. Golub, Charles F. van Loan, Matrix Computations 4th ed.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import funm\n    >>> a = np.array([[1.0, 3.0], [1.0, 4.0]])\n    >>> funm(a, lambda x: x*x)\n    array([[  4.,  15.],\n           [  5.,  19.]])\n    >>> a.dot(a)\n    array([[  4.,  15.],\n           [  5.,  19.]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "cb61ccba87edd81247a87b7f4a2c4ab1bad3a33947b1610ac757b86e85a47b54",
            "fields": [
                {
                    "id": "i4r97z9c",
                    "encoding": "",
                    "name": "A",
                    "value": "",
                    "defaultValue": "",
                    "description": "Matrix at which to evaluate the function",
                    "type": "(N, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0wkjke3l",
                    "encoding": "",
                    "name": "func",
                    "value": "",
                    "defaultValue": "",
                    "description": "Callable object that evaluates a scalar function f.\nMust be vectorized (eg. using vectorize).",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hk6ku4pk",
                    "encoding": "",
                    "name": "disp",
                    "value": true,
                    "defaultValue": true,
                    "description": "Print warning if error in the result is estimated large\ninstead of returning estimated error. (Default: True)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "81himfn_",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.funm",
                    "defaultValue": "scipy.linalg.funm",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e6zm43o4",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "235vjbbg",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "a32krpm6",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3zc6t15v",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_aa_bysv",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "btlm54l7",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "y7gjnwab",
            "name": "linalg.get_blas_funcs",
            "description": "Return available BLAS function objects from names.\n    \n    Arrays are used to determine the optimal prefix of BLAS routines.\n    \n    Parameters\n    ----------\n    names : str or sequence of str\n        Name(s) of BLAS functions without type prefix.\n    \n    arrays : sequence of ndarrays, optional\n        Arrays can be given to determine optimal prefix of BLAS\n        routines. If not given, double-precision routines will be\n        used, otherwise the most generic type in arrays will be used.\n    \n    dtype : str or dtype, optional\n        Data-type specifier. Not used if `arrays` is non-empty.\n    \n    ilp64 : {True, False, 'preferred'}, optional\n        Whether to return ILP64 routine variant.\n        Choosing 'preferred' returns ILP64 routine if available,\n        and otherwise the 32-bit routine. Default: False\n    \n    Returns\n    -------\n    funcs : list\n        List containing the found function(s).\n    \n    \n    Notes\n    -----\n    This routine automatically chooses between Fortran/C\n    interfaces. Fortran code is used whenever possible for arrays with\n    column major order. In all other cases, C code is preferred.\n    \n    In BLAS, the naming convention is that all functions start with a\n    type prefix, which depends on the type of the principal\n    matrix. These can be one of {'s', 'd', 'c', 'z'} for the NumPy\n    types {float32, float64, complex64, complex128} respectively.\n    The code and the dtype are stored in attributes `typecode` and `dtype`\n    of the returned functions.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> import scipy.linalg as LA\n    >>> rng = np.random.default_rng()\n    >>> a = rng.random((3,2))\n    >>> x_gemv = LA.get_blas_funcs('gemv', (a,))\n    >>> x_gemv.typecode\n    'd'\n    >>> x_gemv = LA.get_blas_funcs('gemv',(a*1j,))\n    >>> x_gemv.typecode\n    'z'",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f4a48ff85332522164d84b03b28b764239a50a96cb21328bd8ffdcd2cc7316c2",
            "fields": [
                {
                    "id": "xdhihwre",
                    "encoding": "",
                    "name": "names",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name(s) of BLAS functions without type prefix.",
                    "type": "str or sequence of str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uz3l4o29",
                    "encoding": "",
                    "name": "arrays",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Arrays can be given to determine optimal prefix of BLAS\nroutines. If not given, double-precision routines will be\nused, otherwise the most generic type in arrays will be used.",
                    "type": "builtins.tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0uw8bxc0",
                    "encoding": "",
                    "name": "dtype",
                    "value": "",
                    "defaultValue": "",
                    "description": "Data-type specifier. Not used if `arrays` is non-empty.",
                    "type": "str or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0r673grh",
                    "encoding": "",
                    "name": "ilp64",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to return ILP64 routine variant.\nChoosing 'preferred' returns ILP64 routine if available,\nand otherwise the 32-bit routine. Default: False",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mshx852e",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.get_blas_funcs",
                    "defaultValue": "scipy.linalg.get_blas_funcs",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_80w56ri",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "he5tgn0p",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "66x35he6",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rsx91jcb",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4mhszr4x",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w158mp3t",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "15321aia",
            "name": "linalg.get_lapack_funcs",
            "description": "Return available LAPACK function objects from names.\n    \n    Arrays are used to determine the optimal prefix of LAPACK routines.\n    \n    Parameters\n    ----------\n    names : str or sequence of str\n        Name(s) of LAPACK functions without type prefix.\n    \n    arrays : sequence of ndarrays, optional\n        Arrays can be given to determine optimal prefix of LAPACK\n        routines. If not given, double-precision routines will be\n        used, otherwise the most generic type in arrays will be used.\n    \n    dtype : str or dtype, optional\n        Data-type specifier. Not used if `arrays` is non-empty.\n    \n    ilp64 : {True, False, 'preferred'}, optional\n        Whether to return ILP64 routine variant.\n        Choosing 'preferred' returns ILP64 routine if available, and\n        otherwise the 32-bit routine. Default: False\n    \n    Returns\n    -------\n    funcs : list\n        List containing the found function(s).\n    \n    Notes\n    -----\n    This routine automatically chooses between Fortran/C\n    interfaces. Fortran code is used whenever possible for arrays with\n    column major order. In all other cases, C code is preferred.\n    \n    In LAPACK, the naming convention is that all functions start with a\n    type prefix, which depends on the type of the principal\n    matrix. These can be one of {'s', 'd', 'c', 'z'} for the NumPy\n    types {float32, float64, complex64, complex128} respectively, and\n    are stored in attribute ``typecode`` of the returned functions.\n    \n    Examples\n    --------\n    Suppose we would like to use '?lange' routine which computes the selected\n    norm of an array. We pass our array in order to get the correct 'lange'\n    flavor.\n    \n    >>> import numpy as np\n    >>> import scipy.linalg as LA\n    >>> rng = np.random.default_rng()\n    \n    >>> a = rng.random((3,2))\n    >>> x_lange = LA.get_lapack_funcs('lange', (a,))\n    >>> x_lange.typecode\n    'd'\n    >>> x_lange = LA.get_lapack_funcs('lange',(a*1j,))\n    >>> x_lange.typecode\n    'z'\n    \n    Several LAPACK routines work best when its internal WORK array has\n    the optimal size (big enough for fast computation and small enough to\n    avoid waste of memory). This size is determined also by a dedicated query\n    to the function which is often wrapped as a standalone function and\n    commonly denoted as ``###_lwork``. Below is an example for ``?sysv``\n    \n    >>> a = rng.random((1000, 1000))\n    >>> b = rng.random((1000, 1)) * 1j\n    >>> # We pick up zsysv and zsysv_lwork due to b array\n    ... xsysv, xlwork = LA.get_lapack_funcs(('sysv', 'sysv_lwork'), (a, b))\n    >>> opt_lwork, _ = xlwork(a.shape[0])  # returns a complex for 'z' prefix\n    >>> udut, ipiv, x, info = xsysv(a, b, lwork=int(opt_lwork.real))",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "bdf3efd79afbf598be2c06ad1e16e1fe406696e6e789d17a52302db6afec6960",
            "fields": [
                {
                    "id": "pgd2ua66",
                    "encoding": "",
                    "name": "names",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name(s) of LAPACK functions without type prefix.",
                    "type": "str or sequence of str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8x791j9a",
                    "encoding": "",
                    "name": "arrays",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Arrays can be given to determine optimal prefix of LAPACK\nroutines. If not given, double-precision routines will be\nused, otherwise the most generic type in arrays will be used.",
                    "type": "builtins.tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "of7q8riq",
                    "encoding": "",
                    "name": "dtype",
                    "value": "",
                    "defaultValue": "",
                    "description": "Data-type specifier. Not used if `arrays` is non-empty.",
                    "type": "str or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ucg22403",
                    "encoding": "",
                    "name": "ilp64",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to return ILP64 routine variant.\nChoosing 'preferred' returns ILP64 routine if available, and\notherwise the 32-bit routine. Default: False",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hufu2uq_",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.get_lapack_funcs",
                    "defaultValue": "scipy.linalg.get_lapack_funcs",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9ry_od36",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zd050mnb",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "mjxzmyux",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6r4lj2q0",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3153cq12",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2anzjm6y",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ago0upo3",
            "name": "linalg.hadamard",
            "description": "Construct an Hadamard matrix.\n    \n    Constructs an n-by-n Hadamard matrix, using Sylvester's\n    construction. `n` must be a power of 2.\n    \n    Parameters\n    ----------\n    n : int\n        The order of the matrix. `n` must be a power of 2.\n    dtype : dtype, optional\n        The data type of the array to be constructed.\n    \n    Returns\n    -------\n    H : (n, n) ndarray\n        The Hadamard matrix.\n    \n    Notes\n    -----\n    .. versionadded:: 0.8.0\n    \n    Examples\n    --------\n    >>> from scipy.linalg import hadamard\n    >>> hadamard(2, dtype=complex)\n    array([[ 1.+0.j,  1.+0.j],\n           [ 1.+0.j, -1.-0.j]])\n    >>> hadamard(4)\n    array([[ 1,  1,  1,  1],\n           [ 1, -1,  1, -1],\n           [ 1,  1, -1, -1],\n           [ 1, -1, -1,  1]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ab3f58e1f2bfabf92195dfb73d1e57b572818dbcadbb050bcef8017c36660e07",
            "fields": [
                {
                    "id": "w4ihdxb9",
                    "encoding": "",
                    "name": "n",
                    "value": "",
                    "defaultValue": "",
                    "description": "The order of the matrix. `n` must be a power of 2.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "br_t7def",
                    "encoding": "",
                    "name": "dtype",
                    "value": "builtins.type",
                    "defaultValue": "builtins.type",
                    "description": "The data type of the array to be constructed.",
                    "type": "builtins.type",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8mcn3g0e",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.hadamard",
                    "defaultValue": "scipy.linalg.hadamard",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zp62lrgu",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aixfpe73",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "41u43pry",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_rheb6ed",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fpsuyrl3",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o_cj31ii",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "uh7_lfk7",
            "name": "linalg.hankel",
            "description": "Construct a Hankel matrix.\n    \n    The Hankel matrix has constant anti-diagonals, with `c` as its\n    first column and `r` as its last row. If the first element of `r`\n    differs from the last element of `c`, the first element of `r` is\n    replaced by the last element of `c` to ensure that anti-diagonals\n    remain constant. If `r` is not given, then `r = zeros_like(c)` is\n    assumed.\n    \n    Parameters\n    ----------\n    c : array_like\n        First column of the matrix. Whatever the actual shape of `c`, it\n        will be converted to a 1-D array.\n    r : array_like, optional\n        Last row of the matrix. If None, ``r = zeros_like(c)`` is assumed.\n        r[0] is ignored; the last row of the returned matrix is\n        ``[c[-1], r[1:]]``. Whatever the actual shape of `r`, it will be\n        converted to a 1-D array.\n    \n    Returns\n    -------\n    A : (len(c), len(r)) ndarray\n        The Hankel matrix. Dtype is the same as ``(c[0] + r[0]).dtype``.\n    \n    See Also\n    --------\n    toeplitz : Toeplitz matrix\n    circulant : circulant matrix\n    \n    Examples\n    --------\n    >>> from scipy.linalg import hankel\n    >>> hankel([1, 17, 99])\n    array([[ 1, 17, 99],\n           [17, 99,  0],\n           [99,  0,  0]])\n    >>> hankel([1,2,3,4], [4,7,7,8,9])\n    array([[1, 2, 3, 4, 7],\n           [2, 3, 4, 7, 7],\n           [3, 4, 7, 7, 8],\n           [4, 7, 7, 8, 9]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b1d8cb421ce6808f009dbf5289ed14eeb39e578f5b922d9142edb80c073a7901",
            "fields": [
                {
                    "id": "rz57nut_",
                    "encoding": "",
                    "name": "c",
                    "value": "",
                    "defaultValue": "",
                    "description": "First column of the matrix. Whatever the actual shape of `c`, it\nwill be converted to a 1-D array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i0j49_b9",
                    "encoding": "",
                    "name": "r",
                    "value": "",
                    "defaultValue": "",
                    "description": "Last row of the matrix. If None, ``r = zeros_like(c)`` is assumed.\nr[0] is ignored; the last row of the returned matrix is\n``[c[-1], r[1:]]``. Whatever the actual shape of `r`, it will be\nconverted to a 1-D array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fyyle2dm",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.hankel",
                    "defaultValue": "scipy.linalg.hankel",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7grthjp_",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r0cirlr_",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "a3zf5p04",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bi9bx1ty",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8ep8gapp",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_nf5ezr5",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "s00zmb1m",
            "name": "linalg.helmert",
            "description": "Create an Helmert matrix of order `n`.\n    \n    This has applications in statistics, compositional or simplicial analysis,\n    and in Aitchison geometry.\n    \n    Parameters\n    ----------\n    n : int\n        The size of the array to create.\n    full : bool, optional\n        If True the (n, n) ndarray will be returned.\n        Otherwise the submatrix that does not include the first\n        row will be returned.\n        Default: False.\n    \n    Returns\n    -------\n    M : ndarray\n        The Helmert matrix.\n        The shape is (n, n) or (n-1, n) depending on the `full` argument.\n    \n    Examples\n    --------\n    >>> from scipy.linalg import helmert\n    >>> helmert(5, full=True)\n    array([[ 0.4472136 ,  0.4472136 ,  0.4472136 ,  0.4472136 ,  0.4472136 ],\n           [ 0.70710678, -0.70710678,  0.        ,  0.        ,  0.        ],\n           [ 0.40824829,  0.40824829, -0.81649658,  0.        ,  0.        ],\n           [ 0.28867513,  0.28867513,  0.28867513, -0.8660254 ,  0.        ],\n           [ 0.2236068 ,  0.2236068 ,  0.2236068 ,  0.2236068 , -0.89442719]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "06a3ae98f5bb4d1c4299badd490ad6f2449e5398dd252ae131bc0177d3d130f2",
            "fields": [
                {
                    "id": "7habsv7p",
                    "encoding": "",
                    "name": "n",
                    "value": "",
                    "defaultValue": "",
                    "description": "The size of the array to create.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "co0ete_2",
                    "encoding": "",
                    "name": "full",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True the (n, n) ndarray will be returned.\nOtherwise the submatrix that does not include the first\nrow will be returned.\nDefault: False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6adfi8it",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.helmert",
                    "defaultValue": "scipy.linalg.helmert",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7c354mig",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qmr9t0_u",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "i030mvwa",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eb1601ec",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_0knun_u",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dfitv0xo",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "8oxop9yc",
            "name": "linalg.hessenberg",
            "description": "Compute Hessenberg form of a matrix.\n    \n    The Hessenberg decomposition is::\n    \n        A = Q H Q^H\n    \n    where `Q` is unitary/orthogonal and `H` has only zero elements below\n    the first sub-diagonal.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a : (M, M) array_like\n        Matrix to bring into Hessenberg form.\n    calc_q : bool, optional\n        Whether to compute the transformation matrix.  Default is False.\n    overwrite_a : bool, optional\n        Whether to overwrite `a`; may improve performance.\n        Default is False.\n    check_finite : bool, optional\n        Whether to check that the input matrix contains only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    H : (M, M) ndarray\n        Hessenberg form of `a`.\n    Q : (M, M) ndarray\n        Unitary/orthogonal similarity transformation matrix ``A = Q H Q^H``.\n        Only returned if ``calc_q=True``.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import hessenberg\n    >>> A = np.array([[2, 5, 8, 7], [5, 2, 2, 8], [7, 5, 6, 6], [5, 4, 4, 8]])\n    >>> H, Q = hessenberg(A, calc_q=True)\n    >>> H\n    array([[  2.        , -11.65843866,   1.42005301,   0.25349066],\n           [ -9.94987437,  14.53535354,  -5.31022304,   2.43081618],\n           [  0.        ,  -1.83299243,   0.38969961,  -0.51527034],\n           [  0.        ,   0.        ,  -3.83189513,   1.07494686]])\n    >>> np.allclose(Q @ H @ Q.conj().T - A, np.zeros((4, 4)))\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6dcb75044a23e864bcdce2c3d0b6d880bc4bcd63baa6a9ad5bc8f7b04fa074fc",
            "fields": [
                {
                    "id": "hp01ozus",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Matrix to bring into Hessenberg form.",
                    "type": "(M, M) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nr_4i_e9",
                    "encoding": "",
                    "name": "calc_q",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to compute the transformation matrix.  Default is False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i0y3ir9b",
                    "encoding": "",
                    "name": "overwrite_a",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to overwrite `a`; may improve performance.\nDefault is False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d43u_lkp",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrix contains only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_ecg391r",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.hessenberg",
                    "defaultValue": "scipy.linalg.hessenberg",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xwwgz3pe",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fz47x6iv",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "brxxfe3y",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p44yofb8",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uirp90ql",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uei8x4wg",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "61eoypl2",
            "name": "linalg.hilbert",
            "description": "Create a Hilbert matrix of order `n`.\n    \n    Returns the `n` by `n` array with entries `h[i,j] = 1 / (i + j + 1)`.\n    \n    Parameters\n    ----------\n    n : int\n        The size of the array to create.\n    \n    Returns\n    -------\n    h : (n, n) ndarray\n        The Hilbert matrix.\n    \n    See Also\n    --------\n    invhilbert : Compute the inverse of a Hilbert matrix.\n    \n    Notes\n    -----\n    .. versionadded:: 0.10.0\n    \n    Examples\n    --------\n    >>> from scipy.linalg import hilbert\n    >>> hilbert(3)\n    array([[ 1.        ,  0.5       ,  0.33333333],\n           [ 0.5       ,  0.33333333,  0.25      ],\n           [ 0.33333333,  0.25      ,  0.2       ]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5279f57d566f1d56ccb32c228bafae06180173a792d06f71ccc327e04f6599b1",
            "fields": [
                {
                    "id": "muo21v9a",
                    "encoding": "",
                    "name": "n",
                    "value": "",
                    "defaultValue": "",
                    "description": "The size of the array to create.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fnfr4314",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.hilbert",
                    "defaultValue": "scipy.linalg.hilbert",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hjv0gptt",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gh_mz1cg",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "5669n5_q",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k7kqh4sg",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v3dsgvgs",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eex3nrw3",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ts1sdrrz",
            "name": "linalg.inv",
            "description": "Compute the inverse of a matrix.\n    \n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a : array_like\n        Square matrix to be inverted.\n    overwrite_a : bool, optional\n        Discard data in `a` (may improve performance). Default is False.\n    check_finite : bool, optional\n        Whether to check that the input matrix contains only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    ainv : ndarray\n        Inverse of the matrix `a`.\n    \n    Raises\n    ------\n    LinAlgError\n        If `a` is singular.\n    ValueError\n        If `a` is not square, or not 2D.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy import linalg\n    >>> a = np.array([[1., 2.], [3., 4.]])\n    >>> linalg.inv(a)\n    array([[-2. ,  1. ],\n           [ 1.5, -0.5]])\n    >>> np.dot(a, linalg.inv(a))\n    array([[ 1.,  0.],\n           [ 0.,  1.]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "bf575d2aab19a44647816900fb68ea16e1c45a9fd4496b08caa1949e73fe0f55",
            "fields": [
                {
                    "id": "iivauq4z",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Square matrix to be inverted.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fv6f5yae",
                    "encoding": "",
                    "name": "overwrite_a",
                    "value": false,
                    "defaultValue": false,
                    "description": "Discard data in `a` (may improve performance). Default is False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_tz67a_c",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrix contains only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fj_ih1jc",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.inv",
                    "defaultValue": "scipy.linalg.inv",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g1cckgqg",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0qkwpgt5",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "pnwli7l6",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hkrghp7d",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f1tm9r2v",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cyrfek0s",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "xfwn__83",
            "name": "linalg.invhilbert",
            "description": "Compute the inverse of the Hilbert matrix of order `n`.\n    \n    The entries in the inverse of a Hilbert matrix are integers. When `n`\n    is greater than 14, some entries in the inverse exceed the upper limit\n    of 64 bit integers. The `exact` argument provides two options for\n    dealing with these large integers.\n    \n    Parameters\n    ----------\n    n : int\n        The order of the Hilbert matrix.\n    exact : bool, optional\n        If False, the data type of the array that is returned is np.float64,\n        and the array is an approximation of the inverse.\n        If True, the array is the exact integer inverse array. To represent\n        the exact inverse when n > 14, the returned array is an object array\n        of long integers. For n <= 14, the exact inverse is returned as an\n        array with data type np.int64.\n    \n    Returns\n    -------\n    invh : (n, n) ndarray\n        The data type of the array is np.float64 if `exact` is False.\n        If `exact` is True, the data type is either np.int64 (for n <= 14)\n        or object (for n > 14). In the latter case, the objects in the\n        array will be long integers.\n    \n    See Also\n    --------\n    hilbert : Create a Hilbert matrix.\n    \n    Notes\n    -----\n    .. versionadded:: 0.10.0\n    \n    Examples\n    --------\n    >>> from scipy.linalg import invhilbert\n    >>> invhilbert(4)\n    array([[   16.,  -120.,   240.,  -140.],\n           [ -120.,  1200., -2700.,  1680.],\n           [  240., -2700.,  6480., -4200.],\n           [ -140.,  1680., -4200.,  2800.]])\n    >>> invhilbert(4, exact=True)\n    array([[   16,  -120,   240,  -140],\n           [ -120,  1200, -2700,  1680],\n           [  240, -2700,  6480, -4200],\n           [ -140,  1680, -4200,  2800]], dtype=int64)\n    >>> invhilbert(16)[7,7]\n    4.2475099528537506e+19\n    >>> invhilbert(16, exact=True)[7,7]\n    42475099528537378560",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "31840df6833631047183d113d4199ce9e7ef25fab74fecd6aba9506a53bb8733",
            "fields": [
                {
                    "id": "ffdxvzru",
                    "encoding": "",
                    "name": "n",
                    "value": "",
                    "defaultValue": "",
                    "description": "The order of the Hilbert matrix.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ph0ihx4l",
                    "encoding": "",
                    "name": "exact",
                    "value": false,
                    "defaultValue": false,
                    "description": "If False, the data type of the array that is returned is np.float64,\nand the array is an approximation of the inverse.\nIf True, the array is the exact integer inverse array. To represent\nthe exact inverse when n > 14, the returned array is an object array\nof long integers. For n <= 14, the exact inverse is returned as an\narray with data type np.int64.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0ghxsc4k",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.invhilbert",
                    "defaultValue": "scipy.linalg.invhilbert",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2wz_n19c",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wcyf39mn",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "iptktejo",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u2pnqof0",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4d1v0_wh",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h2l61922",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "nw0g5_eu",
            "name": "linalg.invpascal",
            "description": "Returns the inverse of the n x n Pascal matrix.\n    \n    The Pascal matrix is a matrix containing the binomial coefficients as\n    its elements.\n    \n    Parameters\n    ----------\n    n : int\n        The size of the matrix to create; that is, the result is an n x n\n        matrix.\n    kind : str, optional\n        Must be one of 'symmetric', 'lower', or 'upper'.\n        Default is 'symmetric'.\n    exact : bool, optional\n        If `exact` is True, the result is either an array of type\n        ``numpy.int64`` (if `n` <= 35) or an object array of Python integers.\n        If `exact` is False, the coefficients in the matrix are computed using\n        `scipy.special.comb` with `exact=False`. The result will be a floating\n        point array, and for large `n`, the values in the array will not be the\n        exact coefficients.\n    \n    Returns\n    -------\n    invp : (n, n) ndarray\n        The inverse of the Pascal matrix.\n    \n    See Also\n    --------\n    pascal\n    \n    Notes\n    -----\n    \n    .. versionadded:: 0.16.0\n    \n    References\n    ----------\n    .. [1] \"Pascal matrix\", https://en.wikipedia.org/wiki/Pascal_matrix\n    .. [2] Cohen, A. M., \"The inverse of a Pascal matrix\", Mathematical\n           Gazette, 59(408), pp. 111-112, 1975.\n    \n    Examples\n    --------\n    >>> from scipy.linalg import invpascal, pascal\n    >>> invp = invpascal(5)\n    >>> invp\n    array([[  5, -10,  10,  -5,   1],\n           [-10,  30, -35,  19,  -4],\n           [ 10, -35,  46, -27,   6],\n           [ -5,  19, -27,  17,  -4],\n           [  1,  -4,   6,  -4,   1]])\n    \n    >>> p = pascal(5)\n    >>> p.dot(invp)\n    array([[ 1.,  0.,  0.,  0.,  0.],\n           [ 0.,  1.,  0.,  0.,  0.],\n           [ 0.,  0.,  1.,  0.,  0.],\n           [ 0.,  0.,  0.,  1.,  0.],\n           [ 0.,  0.,  0.,  0.,  1.]])\n    \n    An example of the use of `kind` and `exact`:\n    \n    >>> invpascal(5, kind='lower', exact=False)\n    array([[ 1., -0.,  0., -0.,  0.],\n           [-1.,  1., -0.,  0., -0.],\n           [ 1., -2.,  1., -0.,  0.],\n           [-1.,  3., -3.,  1., -0.],\n           [ 1., -4.,  6., -4.,  1.]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "242d7d5ce8163bb98d63bb78dd4c1ef7968cabb8622f5ef6eabdd8d3b160d3b0",
            "fields": [
                {
                    "id": "5ufntwyn",
                    "encoding": "",
                    "name": "n",
                    "value": "",
                    "defaultValue": "",
                    "description": "The size of the matrix to create; that is, the result is an n x n\nmatrix.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ii9b4_mn",
                    "encoding": "",
                    "name": "kind",
                    "value": "symmetric",
                    "defaultValue": "symmetric",
                    "description": "Must be one of 'symmetric', 'lower', or 'upper'.\nDefault is 'symmetric'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ceel41zq",
                    "encoding": "",
                    "name": "exact",
                    "value": true,
                    "defaultValue": true,
                    "description": "If `exact` is True, the result is either an array of type\n``numpy.int64`` (if `n` <= 35) or an object array of Python integers.\nIf `exact` is False, the coefficients in the matrix are computed using\n`scipy.special.comb` with `exact=False`. The result will be a floating\npoint array, and for large `n`, the values in the array will not be the\nexact coefficients.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nr0pprpc",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.invpascal",
                    "defaultValue": "scipy.linalg.invpascal",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fp7jpttl",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "byqwjxbj",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "h4zgqpfp",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fsbmb1pl",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "slw8nr70",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8x1ei1a5",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ok86h08e",
            "name": "linalg.ishermitian",
            "description": "ishermitian(a, atol=None, rtol=None)\n    \n    Check if a square 2D array is Hermitian.\n    \n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a : ndarray\n        Input array of size (N, N)\n    atol : float, optional\n        Absolute error bound\n    rtol : float, optional\n        Relative error bound\n    \n    Returns\n    -------\n    her : bool\n        Returns True if the array Hermitian.\n    \n    Raises\n    ------\n    TypeError\n        If the dtype of the array is not supported, in particular, NumPy\n        float16, float128 and complex256 dtypes.\n    \n    See Also\n    --------\n    \n    :func:`issymmetric`\n        Check if a square 2D array is symmetric\n    \n    \n    Notes\n    -----\n    For square empty arrays the result is returned True by convention.\n    \n    `numpy.inf` will be treated as a number, that is to say ``[[1, inf],\n    [inf, 2]]`` will return ``True``. On the other hand `numpy.nan` is never\n    symmetric, say, ``[[1, nan], [nan, 2]]`` will return ``False``.\n    \n    When ``atol`` and/or ``rtol`` are set to , then the comparison is performed\n    by `numpy.allclose` and the tolerance values are passed to it. Otherwise an\n    exact comparison against zero is performed by internal functions. Hence\n    performance can improve or degrade depending on the size and dtype of the\n    array. If one of ``atol`` or ``rtol`` given the other one is automatically\n    set to zero.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import ishermitian\n    >>> A = np.arange(9).reshape(3, 3)\n    >>> A = A + A.T\n    >>> ishermitian(A)\n    True\n    >>> A = np.array([[1., 2. + 3.j], [2. - 3.j, 4.]])\n    >>> ishermitian(A)\n    True\n    >>> Ac = np.array([[1. + 1.j, 3.j], [3.j, 2.]])\n    >>> ishermitian(Ac)  # not Hermitian but symmetric\n    False\n    >>> Af = np.array([[0, 1 + 1j], [1 - (1+1e-12)*1j, 0]])\n    >>> ishermitian(Af)\n    False\n    >>> ishermitian(Af, atol=5e-11) # almost hermitian with atol\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f5163f0f4938291c54601e0b00c5e5bdfdbb02a0d11b6d4785b01ed251592b36",
            "fields": [
                {
                    "id": "ol3zduzo",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array of size (N, N)",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x0azkdzm",
                    "encoding": "",
                    "name": "atol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Absolute error bound",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ho__1g_x",
                    "encoding": "",
                    "name": "rtol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Relative error bound",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lp1gewiy",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.ishermitian",
                    "defaultValue": "scipy.linalg.ishermitian",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y3xiyscr",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "izl0yp0_",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "_p1fim7b",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5v_lj6ht",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_tozwao6",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k7dtotwk",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "wjcc3u1y",
            "name": "linalg.issymmetric",
            "description": "issymmetric(a, atol=None, rtol=None)\n    \n    Check if a square 2D array is symmetric.\n    \n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a : ndarray\n        Input array of size (N, N).\n    atol : float, optional\n        Absolute error bound\n    rtol : float, optional\n        Relative error bound\n    \n    Returns\n    -------\n    sym : bool\n        Returns True if the array symmetric.\n    \n    Raises\n    ------\n    TypeError\n        If the dtype of the array is not supported, in particular, NumPy\n        float16, float128 and complex256 dtypes for exact comparisons.\n    \n    See Also\n    --------\n    \n    :func:`ishermitian`\n        Check if a square 2D array is Hermitian\n    \n    \n    Notes\n    -----\n    For square empty arrays the result is returned True by convention. Complex\n    valued arrays are tested for symmetricity and not for being Hermitian (see\n    examples)\n    \n    The diagonal of the array is not scanned. Thus if there are infs, NaNs or\n    similar problematic entries on the diagonal, they will be ignored. However,\n    `numpy.inf` will be treated as a number, that is to say ``[[1, inf],\n    [inf, 2]]`` will return ``True``. On the other hand `numpy.nan` is never\n    symmetric, say, ``[[1, nan], [nan, 2]]`` will return ``False``.\n    \n    When ``atol`` and/or ``rtol`` are set to , then the comparison is performed\n    by `numpy.allclose` and the tolerance values are passed to it. Otherwise an\n    exact comparison against zero is performed by internal functions. Hence\n    performance can improve or degrade depending on the size and dtype of the\n    array. If one of ``atol`` or ``rtol`` given the other one is automatically\n    set to zero.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import issymmetric\n    >>> A = np.arange(9).reshape(3, 3)\n    >>> A = A + A.T\n    >>> issymmetric(A)\n    True\n    >>> Ac = np.array([[1. + 1.j, 3.j], [3.j, 2.]])\n    >>> issymmetric(Ac)  # not Hermitian but symmetric\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8bbeca70224d694eb6a93122f835faf1deee85ecb5a7920678f1f892819b1473",
            "fields": [
                {
                    "id": "_lzxrtvs",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array of size (N, N).",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tb4ve7b7",
                    "encoding": "",
                    "name": "atol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Absolute error bound",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lhtcfrjr",
                    "encoding": "",
                    "name": "rtol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Relative error bound",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lb4shvh5",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.issymmetric",
                    "defaultValue": "scipy.linalg.issymmetric",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vk2m7bu5",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1lbaqkt5",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "pjrx16ck",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "999hjvuk",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4h9k1hnn",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jdx75jv7",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "wq8rqpn8",
            "name": "linalg.khatri_rao",
            "description": "Khatri-rao product\n    \n    A column-wise Kronecker product of two matrices\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a : (n, k) array_like\n        Input array\n    b : (m, k) array_like\n        Input array\n    \n    Returns\n    -------\n    c:  (n*m, k) ndarray\n        Khatri-rao product of `a` and `b`.\n    \n    Notes\n    -----\n    The mathematical definition of the Khatri-Rao product is:\n    \n    .. math::\n    \n        (A_{ij}  \\bigotimes B_{ij})_{ij}\n    \n    which is the Kronecker product of every column of A and B, e.g.::\n    \n        c = np.vstack([np.kron(a[:, k], b[:, k]) for k in range(b.shape[1])]).T\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy import linalg\n    >>> a = np.array([[1, 2, 3], [4, 5, 6]])\n    >>> b = np.array([[3, 4, 5], [6, 7, 8], [2, 3, 9]])\n    >>> linalg.khatri_rao(a, b)\n    array([[ 3,  8, 15],\n           [ 6, 14, 24],\n           [ 2,  6, 27],\n           [12, 20, 30],\n           [24, 35, 48],\n           [ 8, 15, 54]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "63a8de797639a0009e019e5c641eb0a8b5b88e6fc0e60bbb4086f94b228f560a",
            "fields": [
                {
                    "id": "qrn02r4z",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array",
                    "type": "(n, k) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pgrvwtyz",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array",
                    "type": "(m, k) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d0sysa76",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.khatri_rao",
                    "defaultValue": "scipy.linalg.khatri_rao",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mws009o5",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zxaewhdp",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "nbh85zk5",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q7ik4yks",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zm_nx7be",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0wpjlcno",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "o2v6w6zs",
            "name": "linalg.kron",
            "description": "Kronecker product.\n    \n    .. deprecated:: 1.15.0\n        `kron` has been deprecated in favour of `numpy.kron` and will be\n        removed in SciPy 1.17.0.\n    \n    The result is the block matrix::\n    \n        a[0,0]*b    a[0,1]*b  ... a[0,-1]*b\n        a[1,0]*b    a[1,1]*b  ... a[1,-1]*b\n        ...\n        a[-1,0]*b   a[-1,1]*b ... a[-1,-1]*b\n    \n    Parameters\n    ----------\n    a : (M, N) ndarray\n        Input array\n    b : (P, Q) ndarray\n        Input array\n    \n    Returns\n    -------\n    A : (M*P, N*Q) ndarray\n        Kronecker product of `a` and `b`.\n    \n    Examples\n    --------\n    >>> from numpy import array\n    >>> from scipy.linalg import kron\n    >>> kron(array([[1,2],[3,4]]), array([[1,1,1]]))\n    array([[1, 1, 1, 2, 2, 2],\n           [3, 3, 3, 4, 4, 4]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "09c9074799d77a594cd23b48ed37ae2ad51ea06b8a5a1a54ecaf428929391b43",
            "fields": [
                {
                    "id": "944qpegd",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array",
                    "type": "(M, N) ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qnx8u7by",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array",
                    "type": "(P, Q) ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2m5paxfb",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.kron",
                    "defaultValue": "scipy.linalg.kron",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k3507kxj",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uofw11d8",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "45u5s_03",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8c5ct1sr",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n508pvd8",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5axwap24",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "aqx1j7jh",
            "name": "linalg.ldl",
            "description": "Computes the LDLt or Bunch-Kaufman factorization of a symmetric/\n    hermitian matrix.\n    \n    This function returns a block diagonal matrix D consisting blocks of size\n    at most 2x2 and also a possibly permuted unit lower triangular matrix\n    ``L`` such that the factorization ``A = L D L^H`` or ``A = L D L^T``\n    holds. If `lower` is False then (again possibly permuted) upper\n    triangular matrices are returned as outer factors.\n    \n    The permutation array can be used to triangularize the outer factors\n    simply by a row shuffle, i.e., ``lu[perm, :]`` is an upper/lower\n    triangular matrix. This is also equivalent to multiplication with a\n    permutation matrix ``P.dot(lu)``, where ``P`` is a column-permuted\n    identity matrix ``I[:, perm]``.\n    \n    Depending on the value of the boolean `lower`, only upper or lower\n    triangular part of the input array is referenced. Hence, a triangular\n    matrix on entry would give the same result as if the full matrix is\n    supplied.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    A : array_like\n        Square input array\n    lower : bool, optional\n        This switches between the lower and upper triangular outer factors of\n        the factorization. Lower triangular (``lower=True``) is the default.\n    hermitian : bool, optional\n        For complex-valued arrays, this defines whether ``A = A.conj().T`` or\n        ``A = A.T`` is assumed. For real-valued arrays, this switch has no\n        effect.\n    overwrite_a : bool, optional\n        Allow overwriting data in `A` (may enhance performance). The default\n        is False.\n    check_finite : bool, optional\n        Whether to check that the input matrices contain only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    lu : ndarray\n        The (possibly) permuted upper/lower triangular outer factor of the\n        factorization.\n    d : ndarray\n        The block diagonal multiplier of the factorization.\n    perm : ndarray\n        The row-permutation index array that brings lu into triangular form.\n    \n    Raises\n    ------\n    ValueError\n        If input array is not square.\n    ComplexWarning\n        If a complex-valued array with nonzero imaginary parts on the\n        diagonal is given and hermitian is set to True.\n    \n    See Also\n    --------\n    \n    :func:`cholesky`, :func:`lu`\n        ..\n    \n    Notes\n    -----\n    This function uses ``?SYTRF`` routines for symmetric matrices and\n    ``?HETRF`` routines for Hermitian matrices from LAPACK. See [1]_ for\n    the algorithm details.\n    \n    Depending on the `lower` keyword value, only lower or upper triangular\n    part of the input array is referenced. Moreover, this keyword also defines\n    the structure of the outer factors of the factorization.\n    \n    .. versionadded:: 1.1.0\n    \n    References\n    ----------\n    .. [1] J.R. Bunch, L. Kaufman, Some stable methods for calculating\n       inertia and solving symmetric linear systems, Math. Comput. Vol.31,\n       1977. :doi:`10.2307/2005787`\n    \n    Examples\n    --------\n    Given an upper triangular array ``a`` that represents the full symmetric\n    array with its entries, obtain ``l``, 'd' and the permutation vector `perm`:\n    \n    >>> import numpy as np\n    >>> from scipy.linalg import ldl\n    >>> a = np.array([[2, -1, 3], [0, 2, 0], [0, 0, 1]])\n    >>> lu, d, perm = ldl(a, lower=0) # Use the upper part\n    >>> lu\n    array([[ 0. ,  0. ,  1. ],\n           [ 0. ,  1. , -0.5],\n           [ 1. ,  1. ,  1.5]])\n    >>> d\n    array([[-5. ,  0. ,  0. ],\n           [ 0. ,  1.5,  0. ],\n           [ 0. ,  0. ,  2. ]])\n    >>> perm\n    array([2, 1, 0])\n    >>> lu[perm, :]\n    array([[ 1. ,  1. ,  1.5],\n           [ 0. ,  1. , -0.5],\n           [ 0. ,  0. ,  1. ]])\n    >>> lu.dot(d).dot(lu.T)\n    array([[ 2., -1.,  3.],\n           [-1.,  2.,  0.],\n           [ 3.,  0.,  1.]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f3326301ea81722c59e62eec8cf5e3f066f2397f84325834113098535a10d3a1",
            "fields": [
                {
                    "id": "yw5y3cl2",
                    "encoding": "",
                    "name": "A",
                    "value": "",
                    "defaultValue": "",
                    "description": "Square input array",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "97kc3gf8",
                    "encoding": "",
                    "name": "lower",
                    "value": true,
                    "defaultValue": true,
                    "description": "This switches between the lower and upper triangular outer factors of\nthe factorization. Lower triangular (``lower=True``) is the default.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "__n32txu",
                    "encoding": "",
                    "name": "hermitian",
                    "value": true,
                    "defaultValue": true,
                    "description": "For complex-valued arrays, this defines whether ``A = A.conj().T`` or\n``A = A.T`` is assumed. For real-valued arrays, this switch has no\neffect.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lr1t53bj",
                    "encoding": "",
                    "name": "overwrite_a",
                    "value": false,
                    "defaultValue": false,
                    "description": "Allow overwriting data in `A` (may enhance performance). The default\nis False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d6638tnl",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrices contain only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6cowrm25",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.ldl",
                    "defaultValue": "scipy.linalg.ldl",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sx9ecjry",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pyh1i1l8",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "p95wjj0z",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t24jvkxb",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l278side",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rwfnjx9y",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "y6am8oev",
            "name": "linalg.leslie",
            "description": "Create a Leslie matrix.\n    \n    Given the length n array of fecundity coefficients `f` and the length\n    n-1 array of survival coefficients `s`, return the associated Leslie\n    matrix.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    f : (N,) array_like\n        The \"fecundity\" coefficients.\n    s : (N-1,) array_like\n        The \"survival\" coefficients. The length of `s` must be one less\n        than the length of `f`, and it must be at least 1.\n    \n    Returns\n    -------\n    L : (N, N) ndarray\n        The array is zero except for the first row,\n        which is `f`, and the first sub-diagonal, which is `s`.\n        The data-type of the array will be the data-type of\n        ``f[0]+s[0]``.\n    \n    Notes\n    -----\n    The Leslie matrix is used to model discrete-time, age-structured\n    population growth [1]_ [2]_. In a population with `n` age classes, two sets\n    of parameters define a Leslie matrix: the `n` \"fecundity coefficients\",\n    which give the number of offspring per-capita produced by each age\n    class, and the `n` - 1 \"survival coefficients\", which give the\n    per-capita survival rate of each age class.\n    \n    References\n    ----------\n    .. [1] P. H. Leslie, On the use of matrices in certain population\n           mathematics, Biometrika, Vol. 33, No. 3, 183--212 (Nov. 1945)\n    .. [2] P. H. Leslie, Some further notes on the use of matrices in\n           population mathematics, Biometrika, Vol. 35, No. 3/4, 213--245\n           (Dec. 1948)\n    \n    Examples\n    --------\n    >>> from scipy.linalg import leslie\n    >>> leslie([0.1, 2.0, 1.0, 0.1], [0.2, 0.8, 0.7])\n    array([[ 0.1,  2. ,  1. ,  0.1],\n           [ 0.2,  0. ,  0. ,  0. ],\n           [ 0. ,  0.8,  0. ,  0. ],\n           [ 0. ,  0. ,  0.7,  0. ]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4644d3bcbbfd95ca5f81ba53a4c39d47b8b8936ee3aa138fd84d15a78ba5fa0b",
            "fields": [
                {
                    "id": "q_iu7hs7",
                    "encoding": "",
                    "name": "f",
                    "value": "",
                    "defaultValue": "",
                    "description": "The \"fecundity\" coefficients.",
                    "type": "(N,) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7x_szls7",
                    "encoding": "",
                    "name": "s",
                    "value": "",
                    "defaultValue": "",
                    "description": "The \"survival\" coefficients. The length of `s` must be one less\nthan the length of `f`, and it must be at least 1.",
                    "type": "(N-1,) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u1pg50y0",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.leslie",
                    "defaultValue": "scipy.linalg.leslie",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "24fl9eov",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8j4k68b_",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "24wseqzy",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "988bpnvb",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yk7t_lpe",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7no2gmy8",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "5cr7fa9g",
            "name": "linalg.logm",
            "description": "Compute matrix logarithm.\n    \n    The matrix logarithm is the inverse of\n    expm: expm(logm(`A`)) == `A`\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    A : (N, N) array_like\n        Matrix whose logarithm to evaluate\n    disp : bool, optional\n        Emit warning if error in the result is estimated large\n        instead of returning estimated error. (Default: True)\n        \n        .. deprecated:: 1.16.0\n            The `disp` argument is deprecated and will be\n            removed in SciPy 1.18.0. The previously returned error estimate\n            can be computed as ``norm(expm(logm(A)) - A, 1) / norm(A, 1)``.\n    \n    Returns\n    -------\n    logm : (N, N) ndarray\n        Matrix logarithm of `A`\n    errest : float\n        (if disp == False)\n        \n        1-norm of the estimated error, ||err||_1 / ||A||_1\n    \n    References\n    ----------\n    .. [1] Awad H. Al-Mohy and Nicholas J. Higham (2012)\n           \"Improved Inverse Scaling and Squaring Algorithms\n           for the Matrix Logarithm.\"\n           SIAM Journal on Scientific Computing, 34 (4). C152-C169.\n           ISSN 1095-7197\n    \n    .. [2] Nicholas J. Higham (2008)\n           \"Functions of Matrices: Theory and Computation\"\n           ISBN 978-0-898716-46-7\n    \n    .. [3] Nicholas J. Higham and Lijing lin (2011)\n           \"A Schur-Pade Algorithm for Fractional Powers of a Matrix.\"\n           SIAM Journal on Matrix Analysis and Applications,\n           32 (3). pp. 1056-1078. ISSN 0895-4798\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import logm, expm\n    >>> a = np.array([[1.0, 3.0], [1.0, 4.0]])\n    >>> b = logm(a)\n    >>> b\n    array([[-1.02571087,  2.05142174],\n           [ 0.68380725,  1.02571087]])\n    >>> expm(b)         # Verify expm(logm(a)) returns a\n    array([[ 1.,  3.],\n           [ 1.,  4.]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "0af8190e9ffb479db8372cac829fdd9f652ddaa4f022136a5dfcc5d089921777",
            "fields": [
                {
                    "id": "8t0zocrg",
                    "encoding": "",
                    "name": "A",
                    "value": "",
                    "defaultValue": "",
                    "description": "Matrix whose logarithm to evaluate",
                    "type": "(N, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p4dwn_ln",
                    "encoding": "",
                    "name": "disp",
                    "value": "builtins.object",
                    "defaultValue": "builtins.object",
                    "description": "Emit warning if error in the result is estimated large\ninstead of returning estimated error. (Default: True)\n\n.. deprecated:: 1.16.0\n    The `disp` argument is deprecated and will be\n    removed in SciPy 1.18.0. The previously returned error estimate\n    can be computed as ``norm(expm(logm(A)) - A, 1) / norm(A, 1)``.",
                    "type": "builtins.object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iiwtmtrl",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.logm",
                    "defaultValue": "scipy.linalg.logm",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k3m9d41z",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "65_fbt04",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "zg5xbvki",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bx3bh_ua",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "97_vgkoy",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a4cudssp",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "_uxwtqgc",
            "name": "linalg.lstsq",
            "description": "Compute least-squares solution to the equation ``a @ x = b``.\n    \n    Compute a vector x such that the 2-norm ``|b - A x|`` is minimized.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a : (M, N) array_like\n        Left-hand side array\n    b : (M,) or (M, K) array_like\n        Right hand side array\n    cond : float, optional\n        Cutoff for 'small' singular values; used to determine effective\n        rank of a. Singular values smaller than\n        ``cond * largest_singular_value`` are considered zero.\n    overwrite_a : bool, optional\n        Discard data in `a` (may enhance performance). Default is False.\n    overwrite_b : bool, optional\n        Discard data in `b` (may enhance performance). Default is False.\n    check_finite : bool, optional\n        Whether to check that the input matrices contain only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    lapack_driver : str, optional\n        Which LAPACK driver is used to solve the least-squares problem.\n        Options are ``'gelsd'``, ``'gelsy'``, ``'gelss'``. Default\n        (``'gelsd'``) is a good choice.  However, ``'gelsy'`` can be slightly\n        faster on many problems.  ``'gelss'`` was used historically.  It is\n        generally slow but uses less memory.\n        \n        .. versionadded:: 0.17.0\n    \n    Returns\n    -------\n    x : (N,) or (N, K) ndarray\n        Least-squares solution.\n    residues : (K,) ndarray or float\n        Square of the 2-norm for each column in ``b - a x``, if ``M > N`` and\n        ``rank(A) == n`` (returns a scalar if ``b`` is 1-D). Otherwise a\n        (0,)-shaped array is returned.\n    rank : int\n        Effective rank of `a`.\n    s : (min(M, N),) ndarray or None\n        Singular values of `a`. The condition number of ``a`` is\n        ``s[0] / s[-1]``.\n    \n    Raises\n    ------\n    LinAlgError\n        If computation does not converge.\n    ValueError\n        When parameters are not compatible.\n    \n    See Also\n    --------\n    \n    :func:`scipy.optimize.nnls`\n        linear least squares with non-negativity constraint\n    \n    \n    Notes\n    -----\n    When ``'gelsy'`` is used as a driver, `residues` is set to a (0,)-shaped\n    array and `s` is always ``None``.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import lstsq\n    >>> import matplotlib.pyplot as plt\n    \n    Suppose we have the following data:\n    \n    >>> x = np.array([1, 2.5, 3.5, 4, 5, 7, 8.5])\n    >>> y = np.array([0.3, 1.1, 1.5, 2.0, 3.2, 6.6, 8.6])\n    \n    We want to fit a quadratic polynomial of the form ``y = a + b*x**2``\n    to this data.  We first form the \"design matrix\" M, with a constant\n    column of 1s and a column containing ``x**2``:\n    \n    >>> M = x[:, np.newaxis]**[0, 2]\n    >>> M\n    array([[  1.  ,   1.  ],\n           [  1.  ,   6.25],\n           [  1.  ,  12.25],\n           [  1.  ,  16.  ],\n           [  1.  ,  25.  ],\n           [  1.  ,  49.  ],\n           [  1.  ,  72.25]])\n    \n    We want to find the least-squares solution to ``M.dot(p) = y``,\n    where ``p`` is a vector with length 2 that holds the parameters\n    ``a`` and ``b``.\n    \n    >>> p, res, rnk, s = lstsq(M, y)\n    >>> p\n    array([ 0.20925829,  0.12013861])\n    \n    Plot the data and the fitted curve.\n    \n    >>> plt.plot(x, y, 'o', label='data')\n    >>> xx = np.linspace(0, 9, 101)\n    >>> yy = p[0] + p[1]*xx**2\n    >>> plt.plot(xx, yy, label='least squares fit, $y = a + bx^2$')\n    >>> plt.xlabel('x')\n    >>> plt.ylabel('y')\n    >>> plt.legend(framealpha=1, shadow=True)\n    >>> plt.grid(alpha=0.25)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "3e687baa64e11b641c80fef97c0b7ebffbc1275d0ab15ee07bcdc4421979a89e",
            "fields": [
                {
                    "id": "suowitoy",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Left-hand side array",
                    "type": "(M, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rtm4q2x3",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "Right hand side array",
                    "type": "(M,) or (M, K) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k_zh1am2",
                    "encoding": "",
                    "name": "cond",
                    "value": "",
                    "defaultValue": "",
                    "description": "Cutoff for 'small' singular values; used to determine effective\nrank of a. Singular values smaller than\n``cond * largest_singular_value`` are considered zero.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ts7a1l56",
                    "encoding": "",
                    "name": "overwrite_a",
                    "value": false,
                    "defaultValue": false,
                    "description": "Discard data in `a` (may enhance performance). Default is False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kx0dlwlp",
                    "encoding": "",
                    "name": "overwrite_b",
                    "value": false,
                    "defaultValue": false,
                    "description": "Discard data in `b` (may enhance performance). Default is False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0cbkqbqk",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrices contain only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bc_eou2_",
                    "encoding": "",
                    "name": "lapack_driver",
                    "value": "",
                    "defaultValue": "",
                    "description": "Which LAPACK driver is used to solve the least-squares problem.\nOptions are ``'gelsd'``, ``'gelsy'``, ``'gelss'``. Default\n(``'gelsd'``) is a good choice.  However, ``'gelsy'`` can be slightly\nfaster on many problems.  ``'gelss'`` was used historically.  It is\ngenerally slow but uses less memory.\n\n.. versionadded:: 0.17.0",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4u47b3fw",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.lstsq",
                    "defaultValue": "scipy.linalg.lstsq",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0isdbsic",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5e4qm90h",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "qie5nzce",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jau_r8q9",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_d4_138a",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "33ou4g_u",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "zfyiae02",
            "name": "linalg.lu",
            "description": "Compute LU decomposition of a matrix with partial pivoting.\n    \n    The decomposition satisfies::\n    \n        A = P @ L @ U\n    \n    where ``P`` is a permutation matrix, ``L`` lower triangular with unit\n    diagonal elements, and ``U`` upper triangular. If `permute_l` is set to\n    ``True`` then ``L`` is returned already permuted and hence satisfying\n    ``A = L @ U``.\n    \n    Parameters\n    ----------\n    a : (M, N) array_like\n        Array to decompose\n    permute_l : bool, optional\n        Perform the multiplication P*L (Default: do not permute)\n    overwrite_a : bool, optional\n        Whether to overwrite data in a (may improve performance)\n    check_finite : bool, optional\n        Whether to check that the input matrix contains only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    p_indices : bool, optional\n        If ``True`` the permutation information is returned as row indices.\n        The default is ``False`` for backwards-compatibility reasons.\n    \n    Returns\n    -------\n    **(If `permute_l` is ``False``)**\n    \n    p : (..., M, M) ndarray\n        Permutation arrays or vectors depending on `p_indices`\n    l : (..., M, K) ndarray\n        Lower triangular or trapezoidal array with unit diagonal.\n        ``K = min(M, N)``\n    u : (..., K, N) ndarray\n        Upper triangular or trapezoidal array\n    \n    **(If `permute_l` is ``True``)**\n    \n    pl : (..., M, K) ndarray\n        Permuted L matrix.\n        ``K = min(M, N)``\n    u : (..., K, N) ndarray\n        Upper triangular or trapezoidal array\n    \n    Notes\n    -----\n    Permutation matrices are costly since they are nothing but row reorder of\n    ``L`` and hence indices are strongly recommended to be used instead if the\n    permutation is required. The relation in the 2D case then becomes simply\n    ``A = L[P, :] @ U``. In higher dimensions, it is better to use `permute_l`\n    to avoid complicated indexing tricks.\n    \n    In 2D case, if one has the indices however, for some reason, the\n    permutation matrix is still needed then it can be constructed by\n    ``np.eye(M)[P, :]``.\n    \n    Examples\n    --------\n    \n    >>> import numpy as np\n    >>> from scipy.linalg import lu\n    >>> A = np.array([[2, 5, 8, 7], [5, 2, 2, 8], [7, 5, 6, 6], [5, 4, 4, 8]])\n    >>> p, l, u = lu(A)\n    >>> np.allclose(A, p @ l @ u)\n    True\n    >>> p  # Permutation matrix\n    array([[0., 1., 0., 0.],  # Row index 1\n           [0., 0., 0., 1.],  # Row index 3\n           [1., 0., 0., 0.],  # Row index 0\n           [0., 0., 1., 0.]]) # Row index 2\n    >>> p, _, _ = lu(A, p_indices=True)\n    >>> p\n    array([1, 3, 0, 2], dtype=int32)  # as given by row indices above\n    >>> np.allclose(A, l[p, :] @ u)\n    True\n    \n    We can also use nd-arrays, for example, a demonstration with 4D array:\n    \n    >>> rng = np.random.default_rng()\n    >>> A = rng.uniform(low=-4, high=4, size=[3, 2, 4, 8])\n    >>> p, l, u = lu(A)\n    >>> p.shape, l.shape, u.shape\n    ((3, 2, 4, 4), (3, 2, 4, 4), (3, 2, 4, 8))\n    >>> np.allclose(A, p @ l @ u)\n    True\n    >>> PL, U = lu(A, permute_l=True)\n    >>> np.allclose(A, PL @ U)\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4a9680ac3c048d21a66f4fb495ae7c8b0e6e767c3a5b2082867e4dc79f843003",
            "fields": [
                {
                    "id": "rqwt1y94",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Array to decompose",
                    "type": "(M, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0t2cci3g",
                    "encoding": "",
                    "name": "permute_l",
                    "value": false,
                    "defaultValue": false,
                    "description": "Perform the multiplication P*L (Default: do not permute)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yvtu2klx",
                    "encoding": "",
                    "name": "overwrite_a",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to overwrite data in a (may improve performance)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bipmdf9p",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrix contains only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fuj8fofk",
                    "encoding": "",
                    "name": "p_indices",
                    "value": false,
                    "defaultValue": false,
                    "description": "If ``True`` the permutation information is returned as row indices.\nThe default is ``False`` for backwards-compatibility reasons.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jl31_cd6",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.lu",
                    "defaultValue": "scipy.linalg.lu",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dyo3tqpw",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ms0mhe23",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "q3s18als",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5k93fxkp",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c44j5wp_",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "migz9830",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "se7pduca",
            "name": "linalg.lu_factor",
            "description": "Compute pivoted LU decomposition of a matrix.\n    \n    The decomposition is::\n    \n        A = P L U\n    \n    where P is a permutation matrix, L lower triangular with unit\n    diagonal elements, and U upper triangular.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a : (M, N) array_like\n        Matrix to decompose\n    overwrite_a : bool, optional\n        Whether to overwrite data in A (may increase performance)\n    check_finite : bool, optional\n        Whether to check that the input matrix contains only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    lu : (M, N) ndarray\n        Matrix containing U in its upper triangle, and L in its lower triangle.\n        The unit diagonal elements of L are not stored.\n    piv : (K,) ndarray\n        Pivot indices representing the permutation matrix P:\n        row i of matrix was interchanged with row piv[i].\n        Of shape ``(K,)``, with ``K = min(M, N)``.\n    \n    See Also\n    --------\n    \n    :func:`lu`\n        gives lu factorization in more user-friendly format\n    :func:`lu_solve`\n        solve an equation system using the LU factorization of a matrix\n    \n    \n    Notes\n    -----\n    This is a wrapper to the ``*GETRF`` routines from LAPACK. Unlike\n    :func:`lu`, it outputs the L and U factors into a single array\n    and returns pivot indices instead of a permutation matrix.\n    \n    While the underlying ``*GETRF`` routines return 1-based pivot indices, the\n    ``piv`` array returned by ``lu_factor`` contains 0-based indices.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import lu_factor\n    >>> A = np.array([[2, 5, 8, 7], [5, 2, 2, 8], [7, 5, 6, 6], [5, 4, 4, 8]])\n    >>> lu, piv = lu_factor(A)\n    >>> piv\n    array([2, 2, 3, 3], dtype=int32)\n    \n    Convert LAPACK's ``piv`` array to NumPy index and test the permutation\n    \n    >>> def pivot_to_permutation(piv):\n    ...     perm = np.arange(len(piv))\n    ...     for i in range(len(piv)):\n    ...         perm[i], perm[piv[i]] = perm[piv[i]], perm[i]\n    ...     return perm\n    ...\n    >>> p_inv = pivot_to_permutation(piv)\n    >>> p_inv\n    array([2, 0, 3, 1])\n    >>> L, U = np.tril(lu, k=-1) + np.eye(4), np.triu(lu)\n    >>> np.allclose(A[p_inv] - L @ U, np.zeros((4, 4)))\n    True\n    \n    The P matrix in P L U is defined by the inverse permutation and\n    can be recovered using argsort:\n    \n    >>> p = np.argsort(p_inv)\n    >>> p\n    array([1, 3, 0, 2])\n    >>> np.allclose(A - L[p] @ U, np.zeros((4, 4)))\n    True\n    \n    or alternatively:\n    \n    >>> P = np.eye(4)[p]\n    >>> np.allclose(A - P @ L @ U, np.zeros((4, 4)))\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a53b3327383344e1c332022ad3846cb3537bbb2cdec64c1aaec98a77ff4dd60f",
            "fields": [
                {
                    "id": "ru9rkfu6",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Matrix to decompose",
                    "type": "(M, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6h8cqaqn",
                    "encoding": "",
                    "name": "overwrite_a",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to overwrite data in A (may increase performance)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pxfr9k2o",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrix contains only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pp8695nt",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.lu_factor",
                    "defaultValue": "scipy.linalg.lu_factor",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9udtsnn2",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2shvj1y5",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "uu0h83mi",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j7eft3lp",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mil3w22h",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ja09etzk",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "et0_x0v1",
            "name": "linalg.lu_solve",
            "description": "Solve an equation system, a x = b, given the LU factorization of a\n    \n    Parameters\n    ----------\n    (lu, piv)\n        Factorization of the coefficient matrix a, as given by lu_factor.\n        In particular piv are 0-indexed pivot indices.\n    b : array\n        Right-hand side\n    trans : {0, 1, 2}, optional\n        Type of system to solve:\n    \n        =====  =========\n        trans  system\n        =====  =========\n        0      a x   = b\n        1      a^T x = b\n        2      a^H x = b\n        =====  =========\n    overwrite_b : bool, optional\n        Whether to overwrite data in b (may increase performance)\n    check_finite : bool, optional\n        Whether to check that the input matrices contain only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    x : array\n        Solution to the system\n    \n    See Also\n    --------\n    lu_factor : LU factorize a matrix\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import lu_factor, lu_solve\n    >>> A = np.array([[2, 5, 8, 7], [5, 2, 2, 8], [7, 5, 6, 6], [5, 4, 4, 8]])\n    >>> b = np.array([1, 1, 1, 1])\n    >>> lu, piv = lu_factor(A)\n    >>> x = lu_solve((lu, piv), b)\n    >>> np.allclose(A @ x - b, np.zeros((4,)))\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "056d472b01ce50d73255add6d6c2599f11223c25686e733670f564406b07b605",
            "fields": [
                {
                    "id": "4m3wecq5",
                    "encoding": "",
                    "name": "lu_and_piv",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2dzjzamt",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "Right-hand side",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_h04jgtb",
                    "encoding": "",
                    "name": "trans",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Type of system to solve:\n\n=====  =========\ntrans  system\n=====  =========\n0      a x   = b\n1      a^T x = b\n2      a^H x = b\n=====  =========",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ufdsm0w2",
                    "encoding": "",
                    "name": "overwrite_b",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to overwrite data in b (may increase performance)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_ut7g4cy",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrices contain only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y_unebzr",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.lu_solve",
                    "defaultValue": "scipy.linalg.lu_solve",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hy53d41a",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u6o386jl",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "efgg58b_",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sqix0e03",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "84acv3yr",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rmivucsu",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "arlq1v8b",
            "name": "linalg.matmul_toeplitz",
            "description": "Efficient Toeplitz Matrix-Matrix Multiplication using FFT\n    \n    This function returns the matrix multiplication between a Toeplitz\n    matrix and a dense matrix.\n    \n    The Toeplitz matrix has constant diagonals, with c as its first column\n    and r as its first row. If r is not given, ``r == conjugate(c)`` is\n    assumed.\n    \n    .. warning::\n    \n        Beginning in SciPy 1.17, multidimensional input will be treated as a batch,\n        not ``ravel``\\ ed. To preserve the existing behavior, ``ravel`` arguments\n        before passing them to `matmul_toeplitz`.\n    \n    Parameters\n    ----------\n    c_or_cr : array_like or tuple of (array_like, array_like)\n        The vector ``c``, or a tuple of arrays (``c``, ``r``). If not\n        supplied, ``r = conjugate(c)`` is assumed; in this case, if c[0] is\n        real, the Toeplitz matrix is Hermitian. r[0] is ignored; the first row\n        of the Toeplitz matrix is ``[c[0], r[1:]]``.\n    x : (M,) or (M, K) array_like\n        Matrix with which to multiply.\n    check_finite : bool, optional\n        Whether to check that the input matrices contain only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (result entirely NaNs) if the inputs do contain infinities or NaNs.\n    workers : int, optional\n        To pass to scipy.fft.fft and ifft. Maximum number of workers to use\n        for parallel computation. If negative, the value wraps around from\n        ``os.cpu_count()``. See scipy.fft.fft for more details.\n    \n    Returns\n    -------\n    T @ x : (M,) or (M, K) ndarray\n        The result of the matrix multiplication ``T @ x``. Shape of return\n        matches shape of `x`.\n    \n    See Also\n    --------\n    toeplitz : Toeplitz matrix\n    solve_toeplitz : Solve a Toeplitz system using Levinson Recursion\n    \n    Notes\n    -----\n    The Toeplitz matrix is embedded in a circulant matrix and the FFT is used\n    to efficiently calculate the matrix-matrix product.\n    \n    Because the computation is based on the FFT, integer inputs will\n    result in floating point outputs.  This is unlike NumPy's `matmul`,\n    which preserves the data type of the input.\n    \n    This is partly based on the implementation that can be found in [1]_,\n    licensed under the MIT license. More information about the method can be\n    found in reference [2]_. References [3]_ and [4]_ have more reference\n    implementations in Python.\n    \n    .. versionadded:: 1.6.0\n    \n    References\n    ----------\n    .. [1] Jacob R Gardner, Geoff Pleiss, David Bindel, Kilian\n       Q Weinberger, Andrew Gordon Wilson, \"GPyTorch: Blackbox Matrix-Matrix\n       Gaussian Process Inference with GPU Acceleration\" with contributions\n       from Max Balandat and Ruihan Wu. Available online:\n       https://github.com/cornellius-gp/gpytorch\n    \n    .. [2] J. Demmel, P. Koev, and X. Li, \"A Brief Survey of Direct Linear\n       Solvers\". In Z. Bai, J. Demmel, J. Dongarra, A. Ruhe, and H. van der\n       Vorst, editors. Templates for the Solution of Algebraic Eigenvalue\n       Problems: A Practical Guide. SIAM, Philadelphia, 2000. Available at:\n       http://www.netlib.org/utk/people/JackDongarra/etemplates/node384.html\n    \n    .. [3] R. Scheibler, E. Bezzam, I. Dokmanic, Pyroomacoustics: A Python\n       package for audio room simulations and array processing algorithms,\n       Proc. IEEE ICASSP, Calgary, CA, 2018.\n       https://github.com/LCAV/pyroomacoustics/blob/pypi-release/\n       pyroomacoustics/adaptive/util.py\n    \n    .. [4] Marano S, Edwards B, Ferrari G and Fah D (2017), \"Fitting\n       Earthquake Spectra: Colored Noise and Incomplete Data\", Bulletin of\n       the Seismological Society of America., January, 2017. Vol. 107(1),\n       pp. 276-291.\n    \n    Examples\n    --------\n    Multiply the Toeplitz matrix T with matrix x::\n    \n            [ 1 -1 -2 -3]       [1 10]\n        T = [ 3  1 -1 -2]   x = [2 11]\n            [ 6  3  1 -1]       [2 11]\n            [10  6  3  1]       [5 19]\n    \n    To specify the Toeplitz matrix, only the first column and the first\n    row are needed.\n    \n    >>> import numpy as np\n    >>> c = np.array([1, 3, 6, 10])    # First column of T\n    >>> r = np.array([1, -1, -2, -3])  # First row of T\n    >>> x = np.array([[1, 10], [2, 11], [2, 11], [5, 19]])\n    \n    >>> from scipy.linalg import toeplitz, matmul_toeplitz\n    >>> matmul_toeplitz((c, r), x)\n    array([[-20., -80.],\n           [ -7.,  -8.],\n           [  9.,  85.],\n           [ 33., 218.]])\n    \n    Check the result by creating the full Toeplitz matrix and\n    multiplying it by ``x``.\n    \n    >>> toeplitz(c, r) @ x\n    array([[-20, -80],\n           [ -7,  -8],\n           [  9,  85],\n           [ 33, 218]])\n    \n    The full matrix is never formed explicitly, so this routine\n    is suitable for very large Toeplitz matrices.\n    \n    >>> n = 1000000\n    >>> matmul_toeplitz([1] + [0]*(n-1), np.ones(n))\n    array([1., 1., 1., ..., 1., 1., 1.], shape=(1000000,))",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "3247a7cecc690cfc75845bc2d28bb74ae8fbb98e385a164b2a31898f6eba6f96",
            "fields": [
                {
                    "id": "w0au24xp",
                    "encoding": "",
                    "name": "c_or_cr",
                    "value": "",
                    "defaultValue": "",
                    "description": "The vector ``c``, or a tuple of arrays (``c``, ``r``). If not\nsupplied, ``r = conjugate(c)`` is assumed; in this case, if c[0] is\nreal, the Toeplitz matrix is Hermitian. r[0] is ignored; the first row\nof the Toeplitz matrix is ``[c[0], r[1:]]``.",
                    "type": "arraylike or tuple of (arraylike, arraylike)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "315aap4x",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "Matrix with which to multiply.",
                    "type": "(M,) or (M, K) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w8qtwpgx",
                    "encoding": "",
                    "name": "check_finite",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to check that the input matrices contain only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(result entirely NaNs) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8uht7nb5",
                    "encoding": "",
                    "name": "workers",
                    "value": "",
                    "defaultValue": "",
                    "description": "To pass to scipy.fft.fft and ifft. Maximum number of workers to use\nfor parallel computation. If negative, the value wraps around from\n``os.cpu_count()``. See scipy.fft.fft for more details.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sulvkwbz",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.matmul_toeplitz",
                    "defaultValue": "scipy.linalg.matmul_toeplitz",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8seoa8_7",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9mqrpqs0",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "4vuianj8",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hh6hc9lw",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4d9j48c6",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pbu4_1bj",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "qmm5_uz_",
            "name": "linalg.matrix_balance",
            "description": "Compute a diagonal similarity transformation for row/column balancing.\n    \n    The balancing tries to equalize the row and column 1-norms by applying\n    a similarity transformation such that the magnitude variation of the\n    matrix entries is reflected to the scaling matrices.\n    \n    Moreover, if enabled, the matrix is first permuted to isolate the upper\n    triangular parts of the matrix and, again if scaling is also enabled,\n    only the remaining subblocks are subjected to scaling.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    A : (n, n) array_like\n        Square data matrix for the balancing.\n    permute : bool, optional\n        The selector to define whether permutation of A is also performed\n        prior to scaling.\n    scale : bool, optional\n        The selector to turn on and off the scaling. If False, the matrix\n        will not be scaled.\n    separate : bool, optional\n        This switches from returning a full matrix of the transformation\n        to a tuple of two separate 1-D permutation and scaling arrays.\n    overwrite_a : bool, optional\n        This is passed to xGEBAL directly. Essentially, overwrites the result\n        to the data. It might increase the space efficiency. See LAPACK manual\n        for details. This is False by default.\n    \n    Returns\n    -------\n    B : (n, n) ndarray\n        Balanced matrix\n    T : (n, n) ndarray\n        A possibly permuted diagonal matrix whose nonzero entries are\n        integer powers of 2 to avoid numerical truncation errors.\n    scale, perm : (n,) ndarray\n        If ``separate`` keyword is set to True then instead of the array\n        ``T`` above, the scaling and the permutation vectors are given\n        separately as a tuple without allocating the full array ``T``.\n    \n    Notes\n    -----\n    The balanced matrix satisfies the following equality\n    \n    .. math::\n        B = T^{-1} A T\n    \n    The scaling coefficients are approximated to the nearest power of 2\n    to avoid round-off errors.\n    \n    This algorithm is particularly useful for eigenvalue and matrix\n    decompositions and in many cases it is already called by various\n    LAPACK routines.\n    \n    The algorithm is based on the well-known technique of [1]_ and has\n    been modified to account for special cases. See [2]_ for details\n    which have been implemented since LAPACK v3.5.0. Before this version\n    there are corner cases where balancing can actually worsen the\n    conditioning. See [3]_ for such examples.\n    \n    The code is a wrapper around LAPACK's xGEBAL routine family for matrix\n    balancing.\n    \n    .. versionadded:: 0.19.0\n    \n    References\n    ----------\n    .. [1] B.N. Parlett and C. Reinsch, \"Balancing a Matrix for\n       Calculation of Eigenvalues and Eigenvectors\", Numerische Mathematik,\n       Vol.13(4), 1969, :doi:`10.1007/BF02165404`\n    .. [2] R. James, J. Langou, B.R. Lowery, \"On matrix balancing and\n       eigenvector computation\", 2014, :arxiv:`1401.5766`\n    .. [3] D.S. Watkins. A case where balancing is harmful.\n       Electron. Trans. Numer. Anal, Vol.23, 2006.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy import linalg\n    >>> x = np.array([[1,2,0], [9,1,0.01], [1,2,10*np.pi]])\n    \n    >>> y, permscale = linalg.matrix_balance(x)\n    >>> np.abs(x).sum(axis=0) / np.abs(x).sum(axis=1)\n    array([ 3.66666667,  0.4995005 ,  0.91312162])\n    \n    >>> np.abs(y).sum(axis=0) / np.abs(y).sum(axis=1)\n    array([ 1.2       ,  1.27041742,  0.92658316])  # may vary\n    \n    >>> permscale  # only powers of 2 (0.5 == 2^(-1))\n    array([[  0.5,   0. ,  0. ],  # may vary\n           [  0. ,   1. ,  0. ],\n           [  0. ,   0. ,  1. ]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9aa62ea4a89aa0f50ae1a495dd5d165f963c78a756d31f28c421b3c9f849c79b",
            "fields": [
                {
                    "id": "bw7f0ln9",
                    "encoding": "",
                    "name": "A",
                    "value": "",
                    "defaultValue": "",
                    "description": "Square data matrix for the balancing.",
                    "type": "(n, n) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "25rdbu_w",
                    "encoding": "",
                    "name": "permute",
                    "value": true,
                    "defaultValue": true,
                    "description": "The selector to define whether permutation of A is also performed\nprior to scaling.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cu93z94z",
                    "encoding": "",
                    "name": "scale",
                    "value": true,
                    "defaultValue": true,
                    "description": "The selector to turn on and off the scaling. If False, the matrix\nwill not be scaled.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "juudvedm",
                    "encoding": "",
                    "name": "separate",
                    "value": false,
                    "defaultValue": false,
                    "description": "This switches from returning a full matrix of the transformation\nto a tuple of two separate 1-D permutation and scaling arrays.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r9_3wgea",
                    "encoding": "",
                    "name": "overwrite_a",
                    "value": false,
                    "defaultValue": false,
                    "description": "This is passed to xGEBAL directly. Essentially, overwrites the result\nto the data. It might increase the space efficiency. See LAPACK manual\nfor details. This is False by default.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kj1302o_",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.matrix_balance",
                    "defaultValue": "scipy.linalg.matrix_balance",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s6alyn78",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oreew4mc",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "l5z7fxrq",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "88sg4l3v",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rquf4yzy",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ldhpv5as",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "0d2k0ioe",
            "name": "linalg.norm",
            "description": "Matrix or vector norm.\n    \n    This function is able to return one of eight different matrix norms,\n    or one of an infinite number of vector norms (described below), depending\n    on the value of the ``ord`` parameter. For tensors with rank different from\n    1 or 2, only `ord=None` is supported.\n    \n    Parameters\n    ----------\n    a : array_like\n        Input array. If `axis` is None, `a` must be 1-D or 2-D, unless `ord`\n        is None. If both `axis` and `ord` are None, the 2-norm of\n        ``a.ravel`` will be returned.\n    ord : {int, inf, -inf, 'fro', 'nuc', None}, optional\n        Order of the norm (see table under ``Notes``). inf means NumPy's\n        `inf` object.\n    axis : {int, 2-tuple of ints, None}, optional\n        If `axis` is an integer, it specifies the axis of `a` along which to\n        compute the vector norms. If `axis` is a 2-tuple, it specifies the\n        axes that hold 2-D matrices, and the matrix norms of these matrices\n        are computed. If `axis` is None then either a vector norm (when `a`\n        is 1-D) or a matrix norm (when `a` is 2-D) is returned.\n    keepdims : bool, optional\n        If this is set to True, the axes which are normed over are left in the\n        result as dimensions with size one. With this option the result will\n        broadcast correctly against the original `a`.\n    check_finite : bool, optional\n        Whether to check that the input matrix contains only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    n : float or ndarray\n        Norm of the matrix or vector(s).\n    \n    Notes\n    -----\n    For values of ``ord <= 0``, the result is, strictly speaking, not a\n    mathematical 'norm', but it may still be useful for various numerical\n    purposes.\n    \n    The following norms can be calculated:\n    \n    =====  ============================  ==========================\n    ord    norm for matrices             norm for vectors\n    =====  ============================  ==========================\n    None   Frobenius norm                2-norm\n    'fro'  Frobenius norm                --\n    'nuc'  nuclear norm                  --\n    inf    max(sum(abs(a), axis=1))      max(abs(a))\n    -inf   min(sum(abs(a), axis=1))      min(abs(a))\n    0      --                            sum(a != 0)\n    1      max(sum(abs(a), axis=0))      as below\n    -1     min(sum(abs(a), axis=0))      as below\n    2      2-norm (largest sing. value)  as below\n    -2     smallest singular value       as below\n    other  --                            sum(abs(a)**ord)**(1./ord)\n    =====  ============================  ==========================\n    \n    The Frobenius norm is given by [1]_:\n    \n        :math:`||A||_F = [\\sum_{i,j} abs(a_{i,j})^2]^{1/2}`\n    \n    The nuclear norm is the sum of the singular values.\n    \n    Both the Frobenius and nuclear norm orders are only defined for\n    matrices.\n    \n    References\n    ----------\n    .. [1] G. H. Golub and C. F. Van Loan, *Matrix Computations*,\n           Baltimore, MD, Johns Hopkins University Press, 1985, pg. 15\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import norm\n    >>> a = np.arange(9) - 4.0\n    >>> a\n    array([-4., -3., -2., -1.,  0.,  1.,  2.,  3.,  4.])\n    >>> b = a.reshape((3, 3))\n    >>> b\n    array([[-4., -3., -2.],\n           [-1.,  0.,  1.],\n           [ 2.,  3.,  4.]])\n    \n    >>> norm(a)\n    7.745966692414834\n    >>> norm(b)\n    7.745966692414834\n    >>> norm(b, 'fro')\n    7.745966692414834\n    >>> norm(a, np.inf)\n    4.0\n    >>> norm(b, np.inf)\n    9.0\n    >>> norm(a, -np.inf)\n    0.0\n    >>> norm(b, -np.inf)\n    2.0\n    \n    >>> norm(a, 1)\n    20.0\n    >>> norm(b, 1)\n    7.0\n    >>> norm(a, -1)\n    -4.6566128774142013e-010\n    >>> norm(b, -1)\n    6.0\n    >>> norm(a, 2)\n    7.745966692414834\n    >>> norm(b, 2)\n    7.3484692283495345\n    \n    >>> norm(a, -2)\n    0.0\n    >>> norm(b, -2)\n    1.8570331885190563e-016\n    >>> norm(a, 3)\n    5.8480354764257312\n    >>> norm(a, -3)\n    0.0",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c856680c66a0571d88afb0641a2f2dde1350d2063ba1453182b55833a83e1ca0",
            "fields": [
                {
                    "id": "l7w0ps7s",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array. If `axis` is None, `a` must be 1-D or 2-D, unless `ord`\nis None. If both `axis` and `ord` are None, the 2-norm of\n``a.ravel`` will be returned.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zoe49jv0",
                    "encoding": "",
                    "name": "ord",
                    "value": "",
                    "defaultValue": "",
                    "description": "Order of the norm (see table under ``Notes``). inf means NumPy's\n`inf` object.",
                    "type": "{int, inf, -inf, 'fro', 'nuc', None}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rhsltx_t",
                    "encoding": "",
                    "name": "axis",
                    "value": "",
                    "defaultValue": "",
                    "description": "If `axis` is an integer, it specifies the axis of `a` along which to\ncompute the vector norms. If `axis` is a 2-tuple, it specifies the\naxes that hold 2-D matrices, and the matrix norms of these matrices\nare computed. If `axis` is None then either a vector norm (when `a`\nis 1-D) or a matrix norm (when `a` is 2-D) is returned.",
                    "type": "{int, 2-tuple of ints, None}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "clx998nf",
                    "encoding": "",
                    "name": "keepdims",
                    "value": false,
                    "defaultValue": false,
                    "description": "If this is set to True, the axes which are normed over are left in the\nresult as dimensions with size one. With this option the result will\nbroadcast correctly against the original `a`.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "co9fa9ah",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrix contains only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8sa6uplz",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.norm",
                    "defaultValue": "scipy.linalg.norm",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sxogga8v",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nchi4iyc",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "priw8wkr",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4b9_zdl_",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bve7u43t",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q59c0kat",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "7jd8cd5k",
            "name": "linalg.null_space",
            "description": "Construct an orthonormal basis for the null space of A using SVD\n    \n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    A : (M, N) array_like\n        Input array\n    rcond : float, optional\n        Relative condition number. Singular values ``s`` smaller than\n        ``rcond * max(s)`` are considered zero.\n        Default: floating point eps * max(M,N).\n    overwrite_a : bool, optional\n        Whether to overwrite `a`; may improve performance.\n        Default is False.\n    check_finite : bool, optional\n        Whether to check that the input matrix contains only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    lapack_driver : {'gesdd', 'gesvd'}, optional\n        Whether to use the more efficient divide-and-conquer approach\n        (``'gesdd'``) or general rectangular approach (``'gesvd'``)\n        to compute the SVD. MATLAB and Octave use the ``'gesvd'`` approach.\n        Default is ``'gesdd'``.\n    \n    Returns\n    -------\n    Z : (N, K) ndarray\n        Orthonormal basis for the null space of A.\n        K = dimension of effective null space, as determined by rcond\n    \n    See Also\n    --------\n    \n    :func:`svd`\n        Singular value decomposition of a matrix\n    :func:`orth`\n        Matrix range\n    \n    \n    Examples\n    --------\n    1-D null space:\n    \n    >>> import numpy as np\n    >>> from scipy.linalg import null_space\n    >>> A = np.array([[1, 1], [1, 1]])\n    >>> ns = null_space(A)\n    >>> ns * np.copysign(1, ns[0,0])  # Remove the sign ambiguity of the vector\n    array([[ 0.70710678],\n           [-0.70710678]])\n    \n    2-D null space:\n    \n    >>> from numpy.random import default_rng\n    >>> rng = default_rng()\n    >>> B = rng.random((3, 5))\n    >>> Z = null_space(B)\n    >>> Z.shape\n    (5, 2)\n    >>> np.allclose(B.dot(Z), 0)\n    True\n    \n    The basis vectors are orthonormal (up to rounding error):\n    \n    >>> Z.T.dot(Z)\n    array([[  1.00000000e+00,   6.92087741e-17],\n           [  6.92087741e-17,   1.00000000e+00]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "64c2b767ab7ff5ddbf642807bdec9f1edd8f6b8679048f28f26295bc608cb26b",
            "fields": [
                {
                    "id": "0vsnuk2u",
                    "encoding": "",
                    "name": "A",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array",
                    "type": "(M, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j5sc94_a",
                    "encoding": "",
                    "name": "rcond",
                    "value": "",
                    "defaultValue": "",
                    "description": "Relative condition number. Singular values ``s`` smaller than\n``rcond * max(s)`` are considered zero.\nDefault: floating point eps * max(M,N).",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zq84z4i5",
                    "encoding": "",
                    "name": "overwrite_a",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to overwrite `a`; may improve performance.\nDefault is False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v788h0pm",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrix contains only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hhyqbtva",
                    "encoding": "",
                    "name": "lapack_driver",
                    "value": "gesdd",
                    "defaultValue": "gesdd",
                    "description": "Whether to use the more efficient divide-and-conquer approach\n(``'gesdd'``) or general rectangular approach (``'gesvd'``)\nto compute the SVD. MATLAB and Octave use the ``'gesvd'`` approach.\nDefault is ``'gesdd'``.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qhc9yo4f",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.null_space",
                    "defaultValue": "scipy.linalg.null_space",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a288df0i",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_yr84k66",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "towmb_qs",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uqkn8t7n",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tpwy_nyl",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sm6ysps8",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "8ztxem7v",
            "name": "linalg.ordqz",
            "description": "QZ decomposition for a pair of matrices with reordering.\n    \n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    A : (N, N) array_like\n        2-D array to decompose\n    B : (N, N) array_like\n        2-D array to decompose\n    sort : {callable, 'lhp', 'rhp', 'iuc', 'ouc'}, optional\n        Specifies whether the upper eigenvalues should be sorted. A\n        callable may be passed that, given an ordered pair ``(alpha,\n        beta)`` representing the eigenvalue ``x = (alpha/beta)``,\n        returns a boolean denoting whether the eigenvalue should be\n        sorted to the top-left (True). For the real matrix pairs\n        ``beta`` is real while ``alpha`` can be complex, and for\n        complex matrix pairs both ``alpha`` and ``beta`` can be\n        complex. The callable must be able to accept a NumPy\n        array. Alternatively, string parameters may be used:\n        \n            - 'lhp'   Left-hand plane (x.real < 0.0)\n            - 'rhp'   Right-hand plane (x.real > 0.0)\n            - 'iuc'   Inside the unit circle (x*x.conjugate() < 1.0)\n            - 'ouc'   Outside the unit circle (x*x.conjugate() > 1.0)\n        \n        With the predefined sorting functions, an infinite eigenvalue\n        (i.e., ``alpha != 0`` and ``beta = 0``) is considered to lie in\n        neither the left-hand nor the right-hand plane, but it is\n        considered to lie outside the unit circle. For the eigenvalue\n        ``(alpha, beta) = (0, 0)``, the predefined sorting functions\n        all return `False`.\n    output : str {'real','complex'}, optional\n        Construct the real or complex QZ decomposition for real matrices.\n        Default is 'real'.\n    overwrite_a : bool, optional\n        If True, the contents of A are overwritten.\n    overwrite_b : bool, optional\n        If True, the contents of B are overwritten.\n    check_finite : bool, optional\n        If true checks the elements of `A` and `B` are finite numbers. If\n        false does no checking and passes matrix through to\n        underlying algorithm.\n    \n    Returns\n    -------\n    AA : (N, N) ndarray\n        Generalized Schur form of A.\n    BB : (N, N) ndarray\n        Generalized Schur form of B.\n    alpha : (N,) ndarray\n        alpha = alphar + alphai * 1j. See notes.\n    beta : (N,) ndarray\n        See notes.\n    Q : (N, N) ndarray\n        The left Schur vectors.\n    Z : (N, N) ndarray\n        The right Schur vectors.\n    \n    See Also\n    --------\n    \n    :func:`qz`\n        ..\n    \n    Notes\n    -----\n    On exit, ``(ALPHAR(j) + ALPHAI(j)*i)/BETA(j), j=1,...,N``, will be the\n    generalized eigenvalues.  ``ALPHAR(j) + ALPHAI(j)*i`` and\n    ``BETA(j),j=1,...,N`` are the diagonals of the complex Schur form (S,T)\n    that would result if the 2-by-2 diagonal blocks of the real generalized\n    Schur form of (A,B) were further reduced to triangular form using complex\n    unitary transformations. If ALPHAI(j) is zero, then the jth eigenvalue is\n    real; if positive, then the ``j``\\ th and ``(j+1)``\\ st eigenvalues are a\n    complex conjugate pair, with ``ALPHAI(j+1)`` negative.\n    \n    .. versionadded:: 0.17.0\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import ordqz\n    >>> A = np.array([[2, 5, 8, 7], [5, 2, 2, 8], [7, 5, 6, 6], [5, 4, 4, 8]])\n    >>> B = np.array([[0, 6, 0, 0], [5, 0, 2, 1], [5, 2, 6, 6], [4, 7, 7, 7]])\n    >>> AA, BB, alpha, beta, Q, Z = ordqz(A, B, sort='lhp')\n    \n    Since we have sorted for left half plane eigenvalues, negatives come first\n    \n    >>> (alpha/beta).real < 0\n    array([ True,  True, False, False], dtype=bool)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a6a472664cfcd70c09d7dba38d037411e54a2f039d7e3a5b9236764824e260bb",
            "fields": [
                {
                    "id": "r21o97c1",
                    "encoding": "",
                    "name": "A",
                    "value": "",
                    "defaultValue": "",
                    "description": "2-D array to decompose",
                    "type": "(N, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uqdvcy78",
                    "encoding": "",
                    "name": "B",
                    "value": "",
                    "defaultValue": "",
                    "description": "2-D array to decompose",
                    "type": "(N, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ccpi1l7j",
                    "encoding": "",
                    "name": "sort",
                    "value": "lhp",
                    "defaultValue": "lhp",
                    "description": "Specifies whether the upper eigenvalues should be sorted. A\ncallable may be passed that, given an ordered pair ``(alpha,\nbeta)`` representing the eigenvalue ``x = (alpha/beta)``,\nreturns a boolean denoting whether the eigenvalue should be\nsorted to the top-left (True). For the real matrix pairs\n``beta`` is real while ``alpha`` can be complex, and for\ncomplex matrix pairs both ``alpha`` and ``beta`` can be\ncomplex. The callable must be able to accept a NumPy\narray. Alternatively, string parameters may be used:\n\n    - 'lhp'   Left-hand plane (x.real < 0.0)\n    - 'rhp'   Right-hand plane (x.real > 0.0)\n    - 'iuc'   Inside the unit circle (x*x.conjugate() < 1.0)\n    - 'ouc'   Outside the unit circle (x*x.conjugate() > 1.0)\n\nWith the predefined sorting functions, an infinite eigenvalue\n(i.e., ``alpha != 0`` and ``beta = 0``) is considered to lie in\nneither the left-hand nor the right-hand plane, but it is\nconsidered to lie outside the unit circle. For the eigenvalue\n``(alpha, beta) = (0, 0)``, the predefined sorting functions\nall return `False`.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3wfdzczl",
                    "encoding": "",
                    "name": "output",
                    "value": "real",
                    "defaultValue": "real",
                    "description": "Construct the real or complex QZ decomposition for real matrices.\nDefault is 'real'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gld0q_1n",
                    "encoding": "",
                    "name": "overwrite_a",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, the contents of A are overwritten.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dpr36h6s",
                    "encoding": "",
                    "name": "overwrite_b",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, the contents of B are overwritten.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "po6idctb",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "If true checks the elements of `A` and `B` are finite numbers. If\nfalse does no checking and passes matrix through to\nunderlying algorithm.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ze47o4by",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.ordqz",
                    "defaultValue": "scipy.linalg.ordqz",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3fmvwgps",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "41zmk0w2",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "z0u7ak0h",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "metkk1oo",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z7mvyms5",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "td7fwyh9",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "w580ww34",
            "name": "linalg.orth",
            "description": "Construct an orthonormal basis for the range of A using SVD\n    \n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    A : (M, N) array_like\n        Input array\n    rcond : float, optional\n        Relative condition number. Singular values ``s`` smaller than\n        ``rcond * max(s)`` are considered zero.\n        Default: floating point eps * max(M,N).\n    \n    Returns\n    -------\n    Q : (M, K) ndarray\n        Orthonormal basis for the range of A.\n        K = effective rank of A, as determined by rcond\n    \n    See Also\n    --------\n    \n    :func:`svd`\n        Singular value decomposition of a matrix\n    :func:`null_space`\n        Matrix null space\n    \n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import orth\n    >>> A = np.array([[2, 0, 0], [0, 5, 0]])  # rank 2 array\n    >>> orth(A)\n    array([[0., 1.],\n           [1., 0.]])\n    >>> orth(A.T)\n    array([[0., 1.],\n           [1., 0.],\n           [0., 0.]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ccd6ae340a5bc7c3231da99abaae1be0b37abe1aacccf6665189acce88e8d33d",
            "fields": [
                {
                    "id": "onn01xc0",
                    "encoding": "",
                    "name": "A",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array",
                    "type": "(M, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x7ix1blu",
                    "encoding": "",
                    "name": "rcond",
                    "value": "",
                    "defaultValue": "",
                    "description": "Relative condition number. Singular values ``s`` smaller than\n``rcond * max(s)`` are considered zero.\nDefault: floating point eps * max(M,N).",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tmmfnwyo",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.orth",
                    "defaultValue": "scipy.linalg.orth",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b4my65yt",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z7c3s5vg",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "0b7dcqap",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pbkd8hqz",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ra_p5lgw",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2hl7v777",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "rcs31f0v",
            "name": "linalg.orthogonal_procrustes",
            "description": "Compute the matrix solution of the orthogonal (or unitary) Procrustes problem.\n    \n    Given matrices `A` and `B` of the same shape, find an orthogonal (or unitary in\n    the case of complex input) matrix `R` that most closely maps `A` to `B` using the\n    algorithm given in [1]_.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    A : (M, N) array_like\n        Matrix to be mapped.\n    B : (M, N) array_like\n        Target matrix.\n    check_finite : bool, optional\n        Whether to check that the input matrices contain only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    R : (N, N) ndarray\n        The matrix solution of the orthogonal Procrustes problem.\n        Minimizes the Frobenius norm of ``(A @ R) - B``, subject to\n        ``R.conj().T @ R = I``.\n    scale : float\n        Sum of the singular values of ``A.conj().T @ B``.\n    \n    Raises\n    ------\n    ValueError\n        If the input array shapes don't match or if check_finite is True and\n        the arrays contain Inf or NaN.\n    \n    Notes\n    -----\n    Note that unlike higher level Procrustes analyses of spatial data, this\n    function only uses orthogonal transformations like rotations and\n    reflections, and it does not use scaling or translation.\n    \n    .. versionadded:: 0.15.0\n    \n    References\n    ----------\n    .. [1] Peter H. Schonemann, \"A generalized solution of the orthogonal\n           Procrustes problem\", Psychometrica -- Vol. 31, No. 1, March, 1966.\n           :doi:`10.1007/BF02289451`\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import orthogonal_procrustes\n    >>> A = np.array([[ 2,  0,  1], [-2,  0,  0]])\n    \n    Flip the order of columns and check for the anti-diagonal mapping\n    \n    >>> R, sca = orthogonal_procrustes(A, np.fliplr(A))\n    >>> R\n    array([[-5.34384992e-17,  0.00000000e+00,  1.00000000e+00],\n           [ 0.00000000e+00,  1.00000000e+00,  0.00000000e+00],\n           [ 1.00000000e+00,  0.00000000e+00, -7.85941422e-17]])\n    >>> sca\n    9.0\n    \n    As an example of the unitary Procrustes problem, generate a\n    random complex matrix ``A``, a random unitary matrix ``Q``,\n    and their product ``B``.\n    \n    >>> shape = (4, 4)\n    >>> rng = np.random.default_rng(589234981235)\n    >>> A = rng.random(shape) + rng.random(shape)*1j\n    >>> Q = rng.random(shape) + rng.random(shape)*1j\n    >>> Q, _ = np.linalg.qr(Q)\n    >>> B = A @ Q\n    \n    `orthogonal_procrustes` recovers the unitary matrix ``Q``\n    from ``A`` and ``B``.\n    \n    >>> R, _ = orthogonal_procrustes(A, B)\n    >>> np.allclose(R, Q)\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e7fbb99b1f7492aeea22bf4e8b8a9a8498cfb1df8166444cab8a9d4b73a63ad9",
            "fields": [
                {
                    "id": "k91z9byq",
                    "encoding": "",
                    "name": "A",
                    "value": "",
                    "defaultValue": "",
                    "description": "Matrix to be mapped.",
                    "type": "(M, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8jkbmqqi",
                    "encoding": "",
                    "name": "B",
                    "value": "",
                    "defaultValue": "",
                    "description": "Target matrix.",
                    "type": "(M, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9sm13avv",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrices contain only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ch0wpdko",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.orthogonal_procrustes",
                    "defaultValue": "scipy.linalg.orthogonal_procrustes",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "69x49lt8",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cj68yftt",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "epkof6l9",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8eai6xn3",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dmceap7x",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kvi1myrq",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "isqeydt3",
            "name": "linalg.pascal",
            "description": "Returns the n x n Pascal matrix.\n    \n    The Pascal matrix is a matrix containing the binomial coefficients as\n    its elements.\n    \n    Parameters\n    ----------\n    n : int\n        The size of the matrix to create; that is, the result is an n x n\n        matrix.\n    kind : str, optional\n        Must be one of 'symmetric', 'lower', or 'upper'.\n        Default is 'symmetric'.\n    exact : bool, optional\n        If `exact` is True, the result is either an array of type\n        numpy.uint64 (if n < 35) or an object array of Python long integers.\n        If `exact` is False, the coefficients in the matrix are computed using\n        `scipy.special.comb` with ``exact=False``. The result will be a floating\n        point array, and the values in the array will not be the exact\n        coefficients, but this version is much faster than ``exact=True``.\n    \n    Returns\n    -------\n    p : (n, n) ndarray\n        The Pascal matrix.\n    \n    See Also\n    --------\n    invpascal\n    \n    Notes\n    -----\n    See https://en.wikipedia.org/wiki/Pascal_matrix for more information\n    about Pascal matrices.\n    \n    .. versionadded:: 0.11.0\n    \n    Examples\n    --------\n    >>> from scipy.linalg import pascal\n    >>> pascal(4)\n    array([[ 1,  1,  1,  1],\n           [ 1,  2,  3,  4],\n           [ 1,  3,  6, 10],\n           [ 1,  4, 10, 20]], dtype=uint64)\n    >>> pascal(4, kind='lower')\n    array([[1, 0, 0, 0],\n           [1, 1, 0, 0],\n           [1, 2, 1, 0],\n           [1, 3, 3, 1]], dtype=uint64)\n    >>> pascal(50)[-1, -1]\n    25477612258980856902730428600\n    >>> from scipy.special import comb\n    >>> comb(98, 49, exact=True)\n    25477612258980856902730428600",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "552ae885e11f8273880018067901ff37a605ce1e1d0a0e43d414a7fc318c9391",
            "fields": [
                {
                    "id": "60bjoyk3",
                    "encoding": "",
                    "name": "n",
                    "value": "",
                    "defaultValue": "",
                    "description": "The size of the matrix to create; that is, the result is an n x n\nmatrix.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sp_gjpsy",
                    "encoding": "",
                    "name": "kind",
                    "value": "symmetric",
                    "defaultValue": "symmetric",
                    "description": "Must be one of 'symmetric', 'lower', or 'upper'.\nDefault is 'symmetric'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yhs0q8a3",
                    "encoding": "",
                    "name": "exact",
                    "value": true,
                    "defaultValue": true,
                    "description": "If `exact` is True, the result is either an array of type\nnumpy.uint64 (if n < 35) or an object array of Python long integers.\nIf `exact` is False, the coefficients in the matrix are computed using\n`scipy.special.comb` with ``exact=False``. The result will be a floating\npoint array, and the values in the array will not be the exact\ncoefficients, but this version is much faster than ``exact=True``.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fbrnw24j",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.pascal",
                    "defaultValue": "scipy.linalg.pascal",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yw8k4owk",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "89hqhgse",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "jhxuikab",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dbo4b_3x",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dzcbzu6v",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fot8j7c1",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "vbbswpai",
            "name": "linalg.pinv",
            "description": "Compute the (Moore-Penrose) pseudo-inverse of a matrix.\n    \n    Calculate a generalized inverse of a matrix using its\n    singular-value decomposition ``U @ S @ V`` in the economy mode and picking\n    up only the columns/rows that are associated with significant singular\n    values.\n    \n    If ``s`` is the maximum singular value of ``a``, then the\n    significance cut-off value is determined by ``atol + rtol * s``. Any\n    singular value below this value is assumed insignificant.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a : (M, N) array_like\n        Matrix to be pseudo-inverted.\n    atol : float, optional\n        Absolute threshold term, default value is 0.\n        \n        .. versionadded:: 1.7.0\n    rtol : float, optional\n        Relative threshold term, default value is ``max(M, N) * eps`` where\n        ``eps`` is the machine precision value of the datatype of ``a``.\n        \n        .. versionadded:: 1.7.0\n    return_rank : bool, optional\n        If True, return the effective rank of the matrix.\n    check_finite : bool, optional\n        Whether to check that the input matrix contains only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    B : (N, M) ndarray\n        The pseudo-inverse of matrix `a`.\n    rank : int\n        The effective rank of the matrix. Returned if `return_rank` is True.\n    \n    Raises\n    ------\n    LinAlgError\n        If SVD computation does not converge.\n    \n    See Also\n    --------\n    \n    :func:`pinvh`\n        Moore-Penrose pseudoinverse of a hermitian matrix.\n    \n    \n    Notes\n    -----\n    If ``A`` is invertible then the Moore-Penrose pseudoinverse is exactly\n    the inverse of ``A`` [1]_. If ``A`` is not invertible then the\n    Moore-Penrose pseudoinverse computes the ``x`` solution to ``Ax = b`` such\n    that ``||Ax - b||`` is minimized [1]_.\n    \n    References\n    ----------\n    .. [1] Penrose, R. (1956). On best approximate solutions of linear matrix\n           equations. Mathematical Proceedings of the Cambridge Philosophical\n           Society, 52(1), 17-19. doi:10.1017/S0305004100030929\n    \n    Examples\n    --------\n    Given an ``m x n`` matrix ``A`` and an ``n x m`` matrix ``B`` the four\n    Moore-Penrose conditions are:\n    \n    1. ``ABA = A`` (``B`` is a generalized inverse of ``A``),\n    2. ``BAB = B`` (``A`` is a generalized inverse of ``B``),\n    3. ``(AB)* = AB`` (``AB`` is hermitian),\n    4. ``(BA)* = BA`` (``BA`` is hermitian) [1]_.\n    \n    Here, ``A*`` denotes the conjugate transpose. The Moore-Penrose\n    pseudoinverse is a unique ``B`` that satisfies all four of these\n    conditions and exists for any ``A``. Note that, unlike the standard\n    matrix inverse, ``A`` does not have to be a square matrix or have\n    linearly independent columns/rows.\n    \n    As an example, we can calculate the Moore-Penrose pseudoinverse of a\n    random non-square matrix and verify it satisfies the four conditions.\n    \n    >>> import numpy as np\n    >>> from scipy import linalg\n    >>> rng = np.random.default_rng()\n    >>> A = rng.standard_normal((9, 6))\n    >>> B = linalg.pinv(A)\n    >>> np.allclose(A @ B @ A, A)  # Condition 1\n    True\n    >>> np.allclose(B @ A @ B, B)  # Condition 2\n    True\n    >>> np.allclose((A @ B).conj().T, A @ B)  # Condition 3\n    True\n    >>> np.allclose((B @ A).conj().T, B @ A)  # Condition 4\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d09a545c6561a1b232683b5c30a7efca62b7cd31742dd05d0a993609832c4301",
            "fields": [
                {
                    "id": "nm79s733",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Matrix to be pseudo-inverted.",
                    "type": "(M, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g67x0qwc",
                    "encoding": "",
                    "name": "atol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Absolute threshold term, default value is 0.\n\n.. versionadded:: 1.7.0",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3dt12q7r",
                    "encoding": "",
                    "name": "rtol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Relative threshold term, default value is ``max(M, N) * eps`` where\n``eps`` is the machine precision value of the datatype of ``a``.\n\n.. versionadded:: 1.7.0",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7a5sq1rx",
                    "encoding": "",
                    "name": "return_rank",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, return the effective rank of the matrix.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "15gxn_43",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrix contains only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lb8r6b38",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.pinv",
                    "defaultValue": "scipy.linalg.pinv",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xoyezvgv",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3o6qkqq1",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "e51yza8b",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pfs1c1tf",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "likofxmb",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "im6soevc",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "f0_jnr9t",
            "name": "linalg.pinvh",
            "description": "Compute the (Moore-Penrose) pseudo-inverse of a Hermitian matrix.\n    \n    Calculate a generalized inverse of a complex Hermitian/real symmetric\n    matrix using its eigenvalue decomposition and including all eigenvalues\n    with 'large' absolute value.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a : (N, N) array_like\n        Real symmetric or complex hermetian matrix to be pseudo-inverted\n    atol : float, optional\n        Absolute threshold term, default value is 0.\n        \n        .. versionadded:: 1.7.0\n    rtol : float, optional\n        Relative threshold term, default value is ``N * eps`` where\n        ``eps`` is the machine precision value of the datatype of ``a``.\n        \n        .. versionadded:: 1.7.0\n    lower : bool, optional\n        Whether the pertinent array data is taken from the lower or upper\n        triangle of `a`. (Default: lower)\n    return_rank : bool, optional\n        If True, return the effective rank of the matrix.\n    check_finite : bool, optional\n        Whether to check that the input matrix contains only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    B : (N, N) ndarray\n        The pseudo-inverse of matrix `a`.\n    rank : int\n        The effective rank of the matrix.  Returned if `return_rank` is True.\n    \n    Raises\n    ------\n    LinAlgError\n        If eigenvalue algorithm does not converge.\n    \n    See Also\n    --------\n    \n    :func:`pinv`\n        Moore-Penrose pseudoinverse of a matrix.\n    \n    \n    Examples\n    --------\n    For a more detailed example see `pinv`.\n    \n    >>> import numpy as np\n    >>> from scipy.linalg import pinvh\n    >>> rng = np.random.default_rng()\n    >>> a = rng.standard_normal((9, 6))\n    >>> a = np.dot(a, a.T)\n    >>> B = pinvh(a)\n    >>> np.allclose(a, a @ B @ a)\n    True\n    >>> np.allclose(B, B @ a @ B)\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a7cb8ab38dceacd2d6c628301941beccc371671a958b656468361c7b86fd12aa",
            "fields": [
                {
                    "id": "skstj8ft",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Real symmetric or complex hermetian matrix to be pseudo-inverted",
                    "type": "(N, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fs8vnhlh",
                    "encoding": "",
                    "name": "atol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Absolute threshold term, default value is 0.\n\n.. versionadded:: 1.7.0",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x21x49w3",
                    "encoding": "",
                    "name": "rtol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Relative threshold term, default value is ``N * eps`` where\n``eps`` is the machine precision value of the datatype of ``a``.\n\n.. versionadded:: 1.7.0",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "quzjyc08",
                    "encoding": "",
                    "name": "lower",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether the pertinent array data is taken from the lower or upper\ntriangle of `a`. (Default: lower)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "td5_bzen",
                    "encoding": "",
                    "name": "return_rank",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, return the effective rank of the matrix.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1dsi215e",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrix contains only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p8e7jbc6",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.pinvh",
                    "defaultValue": "scipy.linalg.pinvh",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9ak846kl",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_a30p6sx",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "rqc2flwx",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gw7po_3t",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "twkbgn5g",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vrl53v90",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "nuiaw_m3",
            "name": "linalg.polar",
            "description": "Compute the polar decomposition.\n    \n    Returns the factors of the polar decomposition [1]_ `u` and `p` such\n    that ``a = up`` (if `side` is \"right\") or ``a = pu`` (if `side` is\n    \"left\"), where `p` is positive semidefinite. Depending on the shape\n    of `a`, either the rows or columns of `u` are orthonormal. When `a`\n    is a square array, `u` is a square unitary array. When `a` is not\n    square, the \"canonical polar decomposition\" [2]_ is computed.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a : (m, n) array_like\n        The array to be factored.\n    side : {'left', 'right'}, optional\n        Determines whether a right or left polar decomposition is computed.\n        If `side` is \"right\", then ``a = up``.  If `side` is \"left\",  then\n        ``a = pu``.  The default is \"right\".\n    \n    Returns\n    -------\n    u : (m, n) ndarray\n        If `a` is square, then `u` is unitary. If m > n, then the columns\n        of `a` are orthonormal, and if m < n, then the rows of `u` are\n        orthonormal.\n    p : ndarray\n        `p` is Hermitian positive semidefinite. If `a` is nonsingular, `p`\n        is positive definite. The shape of `p` is (n, n) or (m, m), depending\n        on whether `side` is \"right\" or \"left\", respectively.\n    \n    References\n    ----------\n    .. [1] R. A. Horn and C. R. Johnson, \"Matrix Analysis\", Cambridge\n           University Press, 1985.\n    .. [2] N. J. Higham, \"Functions of Matrices: Theory and Computation\",\n           SIAM, 2008.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import polar\n    >>> a = np.array([[1, -1], [2, 4]])\n    >>> u, p = polar(a)\n    >>> u\n    array([[ 0.85749293, -0.51449576],\n           [ 0.51449576,  0.85749293]])\n    >>> p\n    array([[ 1.88648444,  1.2004901 ],\n           [ 1.2004901 ,  3.94446746]])\n    \n    A non-square example, with m < n:\n    \n    >>> b = np.array([[0.5, 1, 2], [1.5, 3, 4]])\n    >>> u, p = polar(b)\n    >>> u\n    array([[-0.21196618, -0.42393237,  0.88054056],\n           [ 0.39378971,  0.78757942,  0.4739708 ]])\n    >>> p\n    array([[ 0.48470147,  0.96940295,  1.15122648],\n           [ 0.96940295,  1.9388059 ,  2.30245295],\n           [ 1.15122648,  2.30245295,  3.65696431]])\n    >>> u.dot(p)   # Verify the decomposition.\n    array([[ 0.5,  1. ,  2. ],\n           [ 1.5,  3. ,  4. ]])\n    >>> u.dot(u.T)   # The rows of u are orthonormal.\n    array([[  1.00000000e+00,  -2.07353665e-17],\n           [ -2.07353665e-17,   1.00000000e+00]])\n    \n    Another non-square example, with m > n:\n    \n    >>> c = b.T\n    >>> u, p = polar(c)\n    >>> u\n    array([[-0.21196618,  0.39378971],\n           [-0.42393237,  0.78757942],\n           [ 0.88054056,  0.4739708 ]])\n    >>> p\n    array([[ 1.23116567,  1.93241587],\n           [ 1.93241587,  4.84930602]])\n    >>> u.dot(p)   # Verify the decomposition.\n    array([[ 0.5,  1.5],\n           [ 1. ,  3. ],\n           [ 2. ,  4. ]])\n    >>> u.T.dot(u)  # The columns of u are orthonormal.\n    array([[  1.00000000e+00,  -1.26363763e-16],\n           [ -1.26363763e-16,   1.00000000e+00]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "3d70c7696c5a20d8c585c7330069ce850d6416c30ebfc5e17f0151f4df11383d",
            "fields": [
                {
                    "id": "iupehx2g",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array to be factored.",
                    "type": "(m, n) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tufcz20d",
                    "encoding": "",
                    "name": "side",
                    "value": "right",
                    "defaultValue": "right",
                    "description": "Determines whether a right or left polar decomposition is computed.\nIf `side` is \"right\", then ``a = up``.  If `side` is \"left\",  then\n``a = pu``.  The default is \"right\".",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qlus18c0",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.polar",
                    "defaultValue": "scipy.linalg.polar",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cokxbv3b",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3nfmguce",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "2xpx04km",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "258zit0n",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j6vhrjfc",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "etdstaay",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "_l6w75fl",
            "name": "linalg.qr",
            "description": "Compute QR decomposition of a matrix.\n    \n    Calculate the decomposition ``A = Q R`` where Q is unitary/orthogonal\n    and R upper triangular.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a : (M, N) array_like\n        Matrix to be decomposed\n    overwrite_a : bool, optional\n        Whether data in `a` is overwritten (may improve performance if\n        `overwrite_a` is set to True by reusing the existing input data\n        structure rather than creating a new one.)\n    lwork : int, optional\n        Work array size, lwork >= a.shape[1]. If None or -1, an optimal size\n        is computed.\n    mode : {'full', 'r', 'economic', 'raw'}, optional\n        Determines what information is to be returned: either both Q and R\n        ('full', default), only R ('r') or both Q and R but computed in\n        economy-size ('economic', see Notes). The final option 'raw'\n        (added in SciPy 0.11) makes the function return two matrices\n        (Q, TAU) in the internal format used by LAPACK.\n    pivoting : bool, optional\n        Whether or not factorization should include pivoting for rank-revealing\n        qr decomposition. If pivoting, compute the decomposition\n        ``A[:, P] = Q @ R`` as above, but where P is chosen such that the\n        diagonal of R is non-increasing. Equivalently, albeit less efficiently,\n        an explicit P matrix may be formed explicitly by permuting the rows or columns\n        (depending on the side of the equation on which it is to be used) of\n        an identity matrix. See Examples.\n    check_finite : bool, optional\n        Whether to check that the input matrix contains only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    Q : float or complex ndarray\n        Of shape (M, M), or (M, K) for ``mode='economic'``. Not returned\n        if ``mode='r'``. Replaced by tuple ``(Q, TAU)`` if ``mode='raw'``.\n    R : float or complex ndarray\n        Of shape (M, N), or (K, N) for ``mode in ['economic', 'raw']``.\n        ``K = min(M, N)``.\n    P : int ndarray\n        Of shape (N,) for ``pivoting=True``. Not returned if\n        ``pivoting=False``.\n    \n    Raises\n    ------\n    LinAlgError\n        Raised if decomposition fails\n    \n    Notes\n    -----\n    This is an interface to the LAPACK routines dgeqrf, zgeqrf,\n    dorgqr, zungqr, dgeqp3, and zgeqp3.\n    \n    If ``mode=economic``, the shapes of Q and R are (M, K) and (K, N) instead\n    of (M,M) and (M,N), with ``K=min(M,N)``.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy import linalg\n    >>> rng = np.random.default_rng()\n    >>> a = rng.standard_normal((9, 6))\n    \n    >>> q, r = linalg.qr(a)\n    >>> np.allclose(a, np.dot(q, r))\n    True\n    >>> q.shape, r.shape\n    ((9, 9), (9, 6))\n    \n    >>> r2 = linalg.qr(a, mode='r')\n    >>> np.allclose(r, r2)\n    True\n    \n    >>> q3, r3 = linalg.qr(a, mode='economic')\n    >>> q3.shape, r3.shape\n    ((9, 6), (6, 6))\n    \n    >>> q4, r4, p4 = linalg.qr(a, pivoting=True)\n    >>> d = np.abs(np.diag(r4))\n    >>> np.all(d[1:] <= d[:-1])\n    True\n    >>> np.allclose(a[:, p4], np.dot(q4, r4))\n    True\n    >>> P = np.eye(p4.size)[p4]\n    >>> np.allclose(a, np.dot(q4, r4) @ P)\n    True\n    >>> np.allclose(a @ P.T, np.dot(q4, r4))\n    True\n    >>> q4.shape, r4.shape, p4.shape\n    ((9, 9), (9, 6), (6,))\n    \n    >>> q5, r5, p5 = linalg.qr(a, mode='economic', pivoting=True)\n    >>> q5.shape, r5.shape, p5.shape\n    ((9, 6), (6, 6), (6,))\n    >>> P = np.eye(6)[:, p5]\n    >>> np.allclose(a @ P, np.dot(q5, r5))\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "fd96a57ffaced120e3bbfca1c4e5deb3e9706c0dec56a4d2b08dc3e40d60d181",
            "fields": [
                {
                    "id": "w72ruz34",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Matrix to be decomposed",
                    "type": "(M, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sao_fd1r",
                    "encoding": "",
                    "name": "overwrite_a",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether data in `a` is overwritten (may improve performance if\n`overwrite_a` is set to True by reusing the existing input data\nstructure rather than creating a new one.)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z_rsrrr4",
                    "encoding": "",
                    "name": "lwork",
                    "value": "",
                    "defaultValue": "",
                    "description": "Work array size, lwork >= a.shape[1]. If None or -1, an optimal size\nis computed.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rzruud2h",
                    "encoding": "",
                    "name": "mode",
                    "value": "full",
                    "defaultValue": "full",
                    "description": "Determines what information is to be returned: either both Q and R\n('full', default), only R ('r') or both Q and R but computed in\neconomy-size ('economic', see Notes). The final option 'raw'\n(added in SciPy 0.11) makes the function return two matrices\n(Q, TAU) in the internal format used by LAPACK.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8xjycqvo",
                    "encoding": "",
                    "name": "pivoting",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether or not factorization should include pivoting for rank-revealing\nqr decomposition. If pivoting, compute the decomposition\n``A[:, P] = Q @ R`` as above, but where P is chosen such that the\ndiagonal of R is non-increasing. Equivalently, albeit less efficiently,\nan explicit P matrix may be formed explicitly by permuting the rows or columns\n(depending on the side of the equation on which it is to be used) of\nan identity matrix. See Examples.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b36cpr8q",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrix contains only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n6utimuj",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.qr",
                    "defaultValue": "scipy.linalg.qr",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3sqo5jwr",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j8tls50_",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "c8tc6qdb",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ijvbgxwg",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eg1wczw6",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u94kef2q",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "p3kogvqm",
            "name": "linalg.qr_delete",
            "description": "qr_delete(Q, R, k, int p=1, which='row', overwrite_qr=False, check_finite=True)\n    \n    QR downdate on row or column deletions\n    \n    If ``A = Q R`` is the QR factorization of ``A``, return the QR\n    factorization of ``A`` where ``p`` rows or columns have been removed\n    starting at row or column ``k``.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    Q : (M, M) or (M, N) array_like\n        Unitary/orthogonal matrix from QR decomposition.\n    R : (M, N) or (N, N) array_like\n        Upper triangular matrix from QR decomposition.\n    k : int\n        Index of the first row or column to delete.\n    p : int, optional\n        Number of rows or columns to delete, defaults to 1.\n    which: {'row', 'col'}, optional\n        Determines if rows or columns will be deleted, defaults to 'row'\n    overwrite_qr : bool, optional\n        If True, consume Q and R, overwriting their contents with their\n        downdated versions, and returning appropriately sized views.\n        Defaults to False.\n    check_finite : bool, optional\n        Whether to check that the input matrix contains only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n        Default is True.\n    \n    Returns\n    -------\n    Q1 : ndarray\n        Updated unitary/orthogonal factor\n    R1 : ndarray\n        Updated upper triangular factor\n    \n    See Also\n    --------\n    \n    :func:`qr`, :func:`qr_multiply`, :func:`qr_insert`, :func:`qr_update`\n        ..\n    \n    Notes\n    -----\n    This routine does not guarantee that the diagonal entries of ``R1`` are\n    positive.\n    \n    .. versionadded:: 0.16.0\n    \n    References\n    ----------\n    .. [1] Golub, G. H. & Van Loan, C. F. Matrix Computations, 3rd Ed.\n           (Johns Hopkins University Press, 1996).\n    \n    .. [2] Daniel, J. W., Gragg, W. B., Kaufman, L. & Stewart, G. W.\n           Reorthogonalization and stable algorithms for updating the\n           Gram-Schmidt QR factorization. Math. Comput. 30, 772-795 (1976).\n    \n    .. [3] Reichel, L. & Gragg, W. B. Algorithm 686: FORTRAN Subroutines for\n           Updating the QR Decomposition. ACM Trans. Math. Softw. 16, 369-377\n           (1990).\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy import linalg\n    >>> a = np.array([[  3.,  -2.,  -2.],\n    ...               [  6.,  -9.,  -3.],\n    ...               [ -3.,  10.,   1.],\n    ...               [  6.,  -7.,   4.],\n    ...               [  7.,   8.,  -6.]])\n    >>> q, r = linalg.qr(a)\n    \n    Given this QR decomposition, update q and r when 2 rows are removed.\n    \n    >>> q1, r1 = linalg.qr_delete(q, r, 2, 2, 'row', False)\n    >>> q1\n    array([[ 0.30942637,  0.15347579,  0.93845645],  # may vary (signs)\n           [ 0.61885275,  0.71680171, -0.32127338],\n           [ 0.72199487, -0.68017681, -0.12681844]])\n    >>> r1\n    array([[  9.69535971,  -0.4125685 ,  -6.80738023],  # may vary (signs)\n           [  0.        , -12.19958144,   1.62370412],\n           [  0.        ,   0.        ,  -0.15218213]])\n    \n    The update is equivalent, but faster than the following.\n    \n    >>> a1 = np.delete(a, slice(2,4), 0)\n    >>> a1\n    array([[ 3., -2., -2.],\n           [ 6., -9., -3.],\n           [ 7.,  8., -6.]])\n    >>> q_direct, r_direct = linalg.qr(a1)\n    \n    Check that we have equivalent results:\n    \n    >>> np.dot(q1, r1)\n    array([[ 3., -2., -2.],\n           [ 6., -9., -3.],\n           [ 7.,  8., -6.]])\n    >>> np.allclose(np.dot(q1, r1), a1)\n    True\n    \n    And the updated Q is still unitary:\n    \n    >>> np.allclose(np.dot(q1.T, q1), np.eye(3))\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d813c4638cf2e9862826ebfad30615a4cb41773e0c5a9f6787697a050bf91946",
            "fields": [
                {
                    "id": "h3ybh0c3",
                    "encoding": "",
                    "name": "Q",
                    "value": "",
                    "defaultValue": "",
                    "description": "Unitary/orthogonal matrix from QR decomposition.",
                    "type": "(M, M) or (M, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0qd4kcso",
                    "encoding": "",
                    "name": "R",
                    "value": "",
                    "defaultValue": "",
                    "description": "Upper triangular matrix from QR decomposition.",
                    "type": "(M, N) or (N, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o2hn7xi9",
                    "encoding": "",
                    "name": "k",
                    "value": "",
                    "defaultValue": "",
                    "description": "Index of the first row or column to delete.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "imezjpyd",
                    "encoding": "",
                    "name": "p",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of rows or columns to delete, defaults to 1.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6m8tnvcb",
                    "encoding": "",
                    "name": "which",
                    "value": "row",
                    "defaultValue": "row",
                    "description": "Determines if rows or columns will be deleted, defaults to 'row'",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dewj1ih1",
                    "encoding": "",
                    "name": "overwrite_qr",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, consume Q and R, overwriting their contents with their\ndowndated versions, and returning appropriately sized views.\nDefaults to False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xbwr7hww",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrix contains only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.\nDefault is True.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bhix3cs5",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.qr_delete",
                    "defaultValue": "scipy.linalg.qr_delete",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0jbnc3wq",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7w3fxa18",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "fstvky2s",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vr4po1kv",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l3i5xqv8",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tuo6avyr",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "cyhhjbg3",
            "name": "linalg.qr_insert",
            "description": "qr_insert(Q, R, u, k, which='row', rcond=None, overwrite_qru=False, check_finite=True)\n    \n    QR update on row or column insertions\n    \n    If ``A = Q R`` is the QR factorization of ``A``, return the QR\n    factorization of ``A`` where rows or columns have been inserted starting\n    at row or column ``k``.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    Q : (M, M) array_like\n        Unitary/orthogonal matrix from the QR decomposition of A.\n    R : (M, N) array_like\n        Upper triangular matrix from the QR decomposition of A.\n    u : (N,), (p, N), (M,), or (M, p) array_like\n        Rows or columns to insert\n    k : int\n        Index before which `u` is to be inserted.\n    which: {'row', 'col'}, optional\n        Determines if rows or columns will be inserted, defaults to 'row'\n    rcond : float\n        Lower bound on the reciprocal condition number of ``Q`` augmented with\n        ``u/||u||`` Only used when updating economic mode (thin, (M,N) (N,N))\n        decompositions.  If None, machine precision is used.  Defaults to\n        None.\n    overwrite_qru : bool, optional\n        If True, consume Q, R, and u, if possible, while performing the update,\n        otherwise make copies as necessary. Defaults to False.\n    check_finite : bool, optional\n        Whether to check that the input matrices contain only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n        Default is True.\n    \n    Returns\n    -------\n    Q1 : ndarray\n        Updated unitary/orthogonal factor\n    R1 : ndarray\n        Updated upper triangular factor\n    \n    Raises\n    ------\n    LinAlgError\n        If updating a (M,N) (N,N) factorization and the reciprocal condition\n        number of Q augmented with ``u/||u||`` is smaller than rcond.\n    \n    See Also\n    --------\n    \n    :func:`qr`, :func:`qr_multiply`, :func:`qr_delete`, :func:`qr_update`\n        ..\n    \n    Notes\n    -----\n    This routine does not guarantee that the diagonal entries of ``R1`` are\n    positive.\n    \n    .. versionadded:: 0.16.0\n    \n    References\n    ----------\n    .. [1] Golub, G. H. & Van Loan, C. F. Matrix Computations, 3rd Ed.\n           (Johns Hopkins University Press, 1996).\n    \n    .. [2] Daniel, J. W., Gragg, W. B., Kaufman, L. & Stewart, G. W.\n           Reorthogonalization and stable algorithms for updating the\n           Gram-Schmidt QR factorization. Math. Comput. 30, 772-795 (1976).\n    \n    .. [3] Reichel, L. & Gragg, W. B. Algorithm 686: FORTRAN Subroutines for\n           Updating the QR Decomposition. ACM Trans. Math. Softw. 16, 369-377\n           (1990).\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy import linalg\n    >>> a = np.array([[  3.,  -2.,  -2.],\n    ...               [  6.,  -7.,   4.],\n    ...               [  7.,   8.,  -6.]])\n    >>> q, r = linalg.qr(a)\n    \n    Given this QR decomposition, update q and r when 2 rows are inserted.\n    \n    >>> u = np.array([[  6.,  -9.,  -3.],\n    ...               [ -3.,  10.,   1.]])\n    >>> q1, r1 = linalg.qr_insert(q, r, u, 2, 'row')\n    >>> q1\n    array([[-0.25445668,  0.02246245,  0.18146236, -0.72798806,  0.60979671],  # may vary (signs)\n           [-0.50891336,  0.23226178, -0.82836478, -0.02837033, -0.00828114],\n           [-0.50891336,  0.35715302,  0.38937158,  0.58110733,  0.35235345],\n           [ 0.25445668, -0.52202743, -0.32165498,  0.36263239,  0.65404509],\n           [-0.59373225, -0.73856549,  0.16065817, -0.0063658 , -0.27595554]])\n    >>> r1\n    array([[-11.78982612,   6.44623587,   3.81685018],  # may vary (signs)\n           [  0.        , -16.01393278,   3.72202865],\n           [  0.        ,   0.        ,  -6.13010256],\n           [  0.        ,   0.        ,   0.        ],\n           [  0.        ,   0.        ,   0.        ]])\n    \n    The update is equivalent, but faster than the following.\n    \n    >>> a1 = np.insert(a, 2, u, 0)\n    >>> a1\n    array([[  3.,  -2.,  -2.],\n           [  6.,  -7.,   4.],\n           [  6.,  -9.,  -3.],\n           [ -3.,  10.,   1.],\n           [  7.,   8.,  -6.]])\n    >>> q_direct, r_direct = linalg.qr(a1)\n    \n    Check that we have equivalent results:\n    \n    >>> np.dot(q1, r1)\n    array([[  3.,  -2.,  -2.],\n           [  6.,  -7.,   4.],\n           [  6.,  -9.,  -3.],\n           [ -3.,  10.,   1.],\n           [  7.,   8.,  -6.]])\n    \n    >>> np.allclose(np.dot(q1, r1), a1)\n    True\n    \n    And the updated Q is still unitary:\n    \n    >>> np.allclose(np.dot(q1.T, q1), np.eye(5))\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "299dae82fd4f00f6e9a6eb2912ef1ee2316b5319ce45e6546378151332c08b67",
            "fields": [
                {
                    "id": "6rcogzmm",
                    "encoding": "",
                    "name": "Q",
                    "value": "",
                    "defaultValue": "",
                    "description": "Unitary/orthogonal matrix from the QR decomposition of A.",
                    "type": "(M, M) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a560mxx3",
                    "encoding": "",
                    "name": "R",
                    "value": "",
                    "defaultValue": "",
                    "description": "Upper triangular matrix from the QR decomposition of A.",
                    "type": "(M, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xlb2tjho",
                    "encoding": "",
                    "name": "u",
                    "value": "",
                    "defaultValue": "",
                    "description": "Rows or columns to insert",
                    "type": "(N,), (p, N), (M,), or (M, p) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "165o2t0v",
                    "encoding": "",
                    "name": "k",
                    "value": "",
                    "defaultValue": "",
                    "description": "Index before which `u` is to be inserted.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lzbsedsj",
                    "encoding": "",
                    "name": "which",
                    "value": "row",
                    "defaultValue": "row",
                    "description": "Determines if rows or columns will be inserted, defaults to 'row'",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fowpxzfu",
                    "encoding": "",
                    "name": "rcond",
                    "value": "",
                    "defaultValue": "",
                    "description": "Lower bound on the reciprocal condition number of ``Q`` augmented with\n``u/||u||`` Only used when updating economic mode (thin, (M,N) (N,N))\ndecompositions.  If None, machine precision is used.  Defaults to\nNone.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dfzf840a",
                    "encoding": "",
                    "name": "overwrite_qru",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, consume Q, R, and u, if possible, while performing the update,\notherwise make copies as necessary. Defaults to False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u0egvtq6",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrices contain only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.\nDefault is True.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vpyx1w_6",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.qr_insert",
                    "defaultValue": "scipy.linalg.qr_insert",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l7d8vtur",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zl77u37w",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "r1dy6sv9",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1znprj3m",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yurx8gz_",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l7oe0z97",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ohvb737q",
            "name": "linalg.qr_multiply",
            "description": "Calculate the QR decomposition and multiply Q with a matrix.\n    \n    Calculate the decomposition ``A = Q R`` where Q is unitary/orthogonal\n    and R upper triangular. Multiply Q with a vector or a matrix c.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a : (M, N), array_like\n        Input array\n    c : array_like\n        Input array to be multiplied by ``q``.\n    mode : {'left', 'right'}, optional\n        ``Q @ c`` is returned if mode is 'left', ``c @ Q`` is returned if\n        mode is 'right'.\n        The shape of c must be appropriate for the matrix multiplications,\n        if mode is 'left', ``min(a.shape) == c.shape[0]``,\n        if mode is 'right', ``a.shape[0] == c.shape[1]``.\n    pivoting : bool, optional\n        Whether or not factorization should include pivoting for rank-revealing\n        qr decomposition, see the documentation of qr.\n    conjugate : bool, optional\n        Whether Q should be complex-conjugated. This might be faster\n        than explicit conjugation.\n    overwrite_a : bool, optional\n        Whether data in a is overwritten (may improve performance)\n    overwrite_c : bool, optional\n        Whether data in c is overwritten (may improve performance).\n        If this is used, c must be big enough to keep the result,\n        i.e. ``c.shape[0]`` = ``a.shape[0]`` if mode is 'left'.\n    \n    Returns\n    -------\n    CQ : ndarray\n        The product of ``Q`` and ``c``.\n    R : (K, N), ndarray\n        R array of the resulting QR factorization where ``K = min(M, N)``.\n    P : (N,) ndarray\n        Integer pivot array. Only returned when ``pivoting=True``.\n    \n    Raises\n    ------\n    LinAlgError\n        Raised if QR decomposition fails.\n    \n    Notes\n    -----\n    This is an interface to the LAPACK routines ``?GEQRF``, ``?ORMQR``,\n    ``?UNMQR``, and ``?GEQP3``.\n    \n    .. versionadded:: 0.11.0\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import qr_multiply, qr\n    >>> A = np.array([[1, 3, 3], [2, 3, 2], [2, 3, 3], [1, 3, 2]])\n    >>> qc, r1, piv1 = qr_multiply(A, 2*np.eye(4), pivoting=1)\n    >>> qc\n    array([[-1.,  1., -1.],\n           [-1., -1.,  1.],\n           [-1., -1., -1.],\n           [-1.,  1.,  1.]])\n    >>> r1\n    array([[-6., -3., -5.            ],\n           [ 0., -1., -1.11022302e-16],\n           [ 0.,  0., -1.            ]])\n    >>> piv1\n    array([1, 0, 2], dtype=int32)\n    >>> q2, r2, piv2 = qr(A, mode='economic', pivoting=1)\n    >>> np.allclose(2*q2 - qc, np.zeros((4, 3)))\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7c4a95170ff233390c8b9117bd5f1ec5313000cbf4821e2ceaf91aee0548f50b",
            "fields": [
                {
                    "id": "n_sdd934",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array",
                    "type": "(M, N), arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0i_5c46y",
                    "encoding": "",
                    "name": "c",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array to be multiplied by ``q``.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2atdf6br",
                    "encoding": "",
                    "name": "mode",
                    "value": "right",
                    "defaultValue": "right",
                    "description": "``Q @ c`` is returned if mode is 'left', ``c @ Q`` is returned if\nmode is 'right'.\nThe shape of c must be appropriate for the matrix multiplications,\nif mode is 'left', ``min(a.shape) == c.shape[0]``,\nif mode is 'right', ``a.shape[0] == c.shape[1]``.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7v84h5zd",
                    "encoding": "",
                    "name": "pivoting",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether or not factorization should include pivoting for rank-revealing\nqr decomposition, see the documentation of qr.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eda821gy",
                    "encoding": "",
                    "name": "conjugate",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether Q should be complex-conjugated. This might be faster\nthan explicit conjugation.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uc2ia5_4",
                    "encoding": "",
                    "name": "overwrite_a",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether data in a is overwritten (may improve performance)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9xshdoxu",
                    "encoding": "",
                    "name": "overwrite_c",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether data in c is overwritten (may improve performance).\nIf this is used, c must be big enough to keep the result,\ni.e. ``c.shape[0]`` = ``a.shape[0]`` if mode is 'left'.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iyasf8kz",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.qr_multiply",
                    "defaultValue": "scipy.linalg.qr_multiply",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4r3rby1m",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ub40vogx",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "82h8a5fm",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y_r56q5i",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "is9x29im",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2w3yhfu9",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "p4r5n_5u",
            "name": "linalg.qr_update",
            "description": "qr_update(Q, R, u, v, overwrite_qruv=False, check_finite=True)\n    \n    Rank-k QR update\n    \n    If ``A = Q R`` is the QR factorization of ``A``, return the QR\n    factorization of ``A + u v**T`` for real ``A`` or ``A + u v**H``\n    for complex ``A``.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    Q : (M, M) or (M, N) array_like\n        Unitary/orthogonal matrix from the qr decomposition of A.\n    R : (M, N) or (N, N) array_like\n        Upper triangular matrix from the qr decomposition of A.\n    u : (M,) or (M, k) array_like\n        Left update vector\n    v : (N,) or (N, k) array_like\n        Right update vector\n    overwrite_qruv : bool, optional\n        If True, consume Q, R, u, and v, if possible, while performing the\n        update, otherwise make copies as necessary. Defaults to False.\n    check_finite : bool, optional\n        Whether to check that the input matrix contains only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n        Default is True.\n    \n    Returns\n    -------\n    Q1 : ndarray\n        Updated unitary/orthogonal factor\n    R1 : ndarray\n        Updated upper triangular factor\n    \n    See Also\n    --------\n    \n    :func:`qr`, :func:`qr_multiply`, :func:`qr_delete`, :func:`qr_insert`\n        ..\n    \n    Notes\n    -----\n    This routine does not guarantee that the diagonal entries of `R1` are\n    real or positive.\n    \n    .. versionadded:: 0.16.0\n    \n    References\n    ----------\n    .. [1] Golub, G. H. & Van Loan, C. F. Matrix Computations, 3rd Ed.\n           (Johns Hopkins University Press, 1996).\n    \n    .. [2] Daniel, J. W., Gragg, W. B., Kaufman, L. & Stewart, G. W.\n           Reorthogonalization and stable algorithms for updating the\n           Gram-Schmidt QR factorization. Math. Comput. 30, 772-795 (1976).\n    \n    .. [3] Reichel, L. & Gragg, W. B. Algorithm 686: FORTRAN Subroutines for\n           Updating the QR Decomposition. ACM Trans. Math. Softw. 16, 369-377\n           (1990).\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy import linalg\n    >>> a = np.array([[  3.,  -2.,  -2.],\n    ...               [  6.,  -9.,  -3.],\n    ...               [ -3.,  10.,   1.],\n    ...               [  6.,  -7.,   4.],\n    ...               [  7.,   8.,  -6.]])\n    >>> q, r = linalg.qr(a)\n    \n    Given this q, r decomposition, perform a rank 1 update.\n    \n    >>> u = np.array([7., -2., 4., 3., 5.])\n    >>> v = np.array([1., 3., -5.])\n    >>> q_up, r_up = linalg.qr_update(q, r, u, v, False)\n    >>> q_up\n    array([[ 0.54073807,  0.18645997,  0.81707661, -0.02136616,  0.06902409],  # may vary (signs)\n           [ 0.21629523, -0.63257324,  0.06567893,  0.34125904, -0.65749222],\n           [ 0.05407381,  0.64757787, -0.12781284, -0.20031219, -0.72198188],\n           [ 0.48666426, -0.30466718, -0.27487277, -0.77079214,  0.0256951 ],\n           [ 0.64888568,  0.23001   , -0.4859845 ,  0.49883891,  0.20253783]])\n    >>> r_up\n    array([[ 18.49324201,  24.11691794, -44.98940746],  # may vary (signs)\n           [  0.        ,  31.95894662, -27.40998201],\n           [  0.        ,   0.        ,  -9.25451794],\n           [  0.        ,   0.        ,   0.        ],\n           [  0.        ,   0.        ,   0.        ]])\n    \n    The update is equivalent, but faster than the following.\n    \n    >>> a_up = a + np.outer(u, v)\n    >>> q_direct, r_direct = linalg.qr(a_up)\n    \n    Check that we have equivalent results:\n    \n    >>> np.allclose(np.dot(q_up, r_up), a_up)\n    True\n    \n    And the updated Q is still unitary:\n    \n    >>> np.allclose(np.dot(q_up.T, q_up), np.eye(5))\n    True\n    \n    Updating economic (reduced, thin) decompositions is also possible:\n    \n    >>> qe, re = linalg.qr(a, mode='economic')\n    >>> qe_up, re_up = linalg.qr_update(qe, re, u, v, False)\n    >>> qe_up\n    array([[ 0.54073807,  0.18645997,  0.81707661],  # may vary (signs)\n           [ 0.21629523, -0.63257324,  0.06567893],\n           [ 0.05407381,  0.64757787, -0.12781284],\n           [ 0.48666426, -0.30466718, -0.27487277],\n           [ 0.64888568,  0.23001   , -0.4859845 ]])\n    >>> re_up\n    array([[ 18.49324201,  24.11691794, -44.98940746],  # may vary (signs)\n           [  0.        ,  31.95894662, -27.40998201],\n           [  0.        ,   0.        ,  -9.25451794]])\n    >>> np.allclose(np.dot(qe_up, re_up), a_up)\n    True\n    >>> np.allclose(np.dot(qe_up.T, qe_up), np.eye(3))\n    True\n    \n    Similarly to the above, perform a rank 2 update.\n    \n    >>> u2 = np.array([[ 7., -1,],\n    ...                [-2.,  4.],\n    ...                [ 4.,  2.],\n    ...                [ 3., -6.],\n    ...                [ 5.,  3.]])\n    >>> v2 = np.array([[ 1., 2.],\n    ...                [ 3., 4.],\n    ...                [-5., 2]])\n    >>> q_up2, r_up2 = linalg.qr_update(q, r, u2, v2, False)\n    >>> q_up2\n    array([[-0.33626508, -0.03477253,  0.61956287, -0.64352987, -0.29618884],  # may vary (signs)\n           [-0.50439762,  0.58319694, -0.43010077, -0.33395279,  0.33008064],\n           [-0.21016568, -0.63123106,  0.0582249 , -0.13675572,  0.73163206],\n           [ 0.12609941,  0.49694436,  0.64590024,  0.31191919,  0.47187344],\n           [-0.75659643, -0.11517748,  0.10284903,  0.5986227 , -0.21299983]])\n    >>> r_up2\n    array([[-23.79075451, -41.1084062 ,  24.71548348],  # may vary (signs)\n           [  0.        , -33.83931057,  11.02226551],\n           [  0.        ,   0.        ,  48.91476811],\n           [  0.        ,   0.        ,   0.        ],\n           [  0.        ,   0.        ,   0.        ]])\n    \n    This update is also a valid qr decomposition of ``A + U V**T``.\n    \n    >>> a_up2 = a + np.dot(u2, v2.T)\n    >>> np.allclose(a_up2, np.dot(q_up2, r_up2))\n    True\n    >>> np.allclose(np.dot(q_up2.T, q_up2), np.eye(5))\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "506c7a630eb6d27bd7adc73889c815894b7ff625e6c06c14a4a0b1d82334bb2e",
            "fields": [
                {
                    "id": "_edg93_u",
                    "encoding": "",
                    "name": "Q",
                    "value": "",
                    "defaultValue": "",
                    "description": "Unitary/orthogonal matrix from the qr decomposition of A.",
                    "type": "(M, M) or (M, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "glk3ydn0",
                    "encoding": "",
                    "name": "R",
                    "value": "",
                    "defaultValue": "",
                    "description": "Upper triangular matrix from the qr decomposition of A.",
                    "type": "(M, N) or (N, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ig8b5f3p",
                    "encoding": "",
                    "name": "u",
                    "value": "",
                    "defaultValue": "",
                    "description": "Left update vector",
                    "type": "(M,) or (M, k) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r6xane8j",
                    "encoding": "",
                    "name": "v",
                    "value": "",
                    "defaultValue": "",
                    "description": "Right update vector",
                    "type": "(N,) or (N, k) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oxor77c1",
                    "encoding": "",
                    "name": "overwrite_qruv",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, consume Q, R, u, and v, if possible, while performing the\nupdate, otherwise make copies as necessary. Defaults to False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "90vp6hcw",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrix contains only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.\nDefault is True.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cbjt9phz",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.qr_update",
                    "defaultValue": "scipy.linalg.qr_update",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uxjtmtcj",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0eis1xkd",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "niq3xmaw",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jgxambbr",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x5mebout",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t69h6hxz",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "lsemswt7",
            "name": "linalg.qz",
            "description": "QZ decomposition for generalized eigenvalues of a pair of matrices.\n    \n    The QZ, or generalized Schur, decomposition for a pair of n-by-n\n    matrices (A,B) is::\n    \n        (A,B) = (Q @ AA @ Z*, Q @ BB @ Z*)\n    \n    where AA, BB is in generalized Schur form if BB is upper-triangular\n    with non-negative diagonal and AA is upper-triangular, or for real QZ\n    decomposition (``output='real'``) block upper triangular with 1x1\n    and 2x2 blocks. In this case, the 1x1 blocks correspond to real\n    generalized eigenvalues and 2x2 blocks are 'standardized' by making\n    the corresponding elements of BB have the form::\n    \n        [ a 0 ]\n        [ 0 b ]\n    \n    and the pair of corresponding 2x2 blocks in AA and BB will have a complex\n    conjugate pair of generalized eigenvalues. If (``output='complex'``) or\n    A and B are complex matrices, Z' denotes the conjugate-transpose of Z.\n    Q and Z are unitary matrices.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    A : (N, N) array_like\n        2-D array to decompose\n    B : (N, N) array_like\n        2-D array to decompose\n    output : {'real', 'complex'}, optional\n        Construct the real or complex QZ decomposition for real matrices.\n        Default is 'real'.\n    lwork : int, optional\n        Work array size. If None or -1, it is automatically computed.\n    sort : {None, callable, 'lhp', 'rhp', 'iuc', 'ouc'}, optional\n        NOTE: THIS INPUT IS DISABLED FOR NOW. Use ordqz instead.\n        \n        Specifies whether the upper eigenvalues should be sorted. A callable\n        may be passed that, given a eigenvalue, returns a boolean denoting\n        whether the eigenvalue should be sorted to the top-left (True). For\n        real matrix pairs, the sort function takes three real arguments\n        (alphar, alphai, beta). The eigenvalue\n        ``x = (alphar + alphai*1j)/beta``. For complex matrix pairs or\n        output='complex', the sort function takes two complex arguments\n        (alpha, beta). The eigenvalue ``x = (alpha/beta)``.  Alternatively,\n        string parameters may be used:\n        \n            - 'lhp'   Left-hand plane (x.real < 0.0)\n            - 'rhp'   Right-hand plane (x.real > 0.0)\n            - 'iuc'   Inside the unit circle (x*x.conjugate() < 1.0)\n            - 'ouc'   Outside the unit circle (x*x.conjugate() > 1.0)\n        \n        Defaults to None (no sorting).\n    overwrite_a : bool, optional\n        Whether to overwrite data in a (may improve performance)\n    overwrite_b : bool, optional\n        Whether to overwrite data in b (may improve performance)\n    check_finite : bool, optional\n        If true checks the elements of `A` and `B` are finite numbers. If\n        false does no checking and passes matrix through to\n        underlying algorithm.\n    \n    Returns\n    -------\n    AA : (N, N) ndarray\n        Generalized Schur form of A.\n    BB : (N, N) ndarray\n        Generalized Schur form of B.\n    Q : (N, N) ndarray\n        The left Schur vectors.\n    Z : (N, N) ndarray\n        The right Schur vectors.\n    \n    See Also\n    --------\n    \n    :func:`ordqz`\n        ..\n    \n    Notes\n    -----\n    Q is transposed versus the equivalent function in Matlab.\n    \n    .. versionadded:: 0.11.0\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import qz\n    \n    >>> A = np.array([[1, 2, -1], [5, 5, 5], [2, 4, -8]])\n    >>> B = np.array([[1, 1, -3], [3, 1, -1], [5, 6, -2]])\n    \n    Compute the decomposition.  The QZ decomposition is not unique, so\n    depending on the underlying library that is used, there may be\n    differences in the signs of coefficients in the following output.\n    \n    >>> AA, BB, Q, Z = qz(A, B)\n    >>> AA\n    array([[-1.36949157, -4.05459025,  7.44389431],\n           [ 0.        ,  7.65653432,  5.13476017],\n           [ 0.        , -0.65978437,  2.4186015 ]])  # may vary\n    >>> BB\n    array([[ 1.71890633, -1.64723705, -0.72696385],\n           [ 0.        ,  8.6965692 , -0.        ],\n           [ 0.        ,  0.        ,  2.27446233]])  # may vary\n    >>> Q\n    array([[-0.37048362,  0.1903278 ,  0.90912992],\n           [-0.90073232,  0.16534124, -0.40167593],\n           [ 0.22676676,  0.96769706, -0.11017818]])  # may vary\n    >>> Z\n    array([[-0.67660785,  0.63528924, -0.37230283],\n           [ 0.70243299,  0.70853819, -0.06753907],\n           [ 0.22088393, -0.30721526, -0.92565062]])  # may vary\n    \n    Verify the QZ decomposition.  With real output, we only need the\n    transpose of ``Z`` in the following expressions.\n    \n    >>> Q @ AA @ Z.T  # Should be A\n    array([[ 1.,  2., -1.],\n           [ 5.,  5.,  5.],\n           [ 2.,  4., -8.]])\n    >>> Q @ BB @ Z.T  # Should be B\n    array([[ 1.,  1., -3.],\n           [ 3.,  1., -1.],\n           [ 5.,  6., -2.]])\n    \n    Repeat the decomposition, but with ``output='complex'``.\n    \n    >>> AA, BB, Q, Z = qz(A, B, output='complex')\n    \n    For conciseness in the output, we use ``np.set_printoptions()`` to set\n    the output precision of NumPy arrays to 3 and display tiny values as 0.\n    \n    >>> np.set_printoptions(precision=3, suppress=True)\n    >>> AA\n    array([[-1.369+0.j   ,  2.248+4.237j,  4.861-5.022j],\n           [ 0.   +0.j   ,  7.037+2.922j,  0.794+4.932j],\n           [ 0.   +0.j   ,  0.   +0.j   ,  2.655-1.103j]])  # may vary\n    >>> BB\n    array([[ 1.719+0.j   , -1.115+1.j   , -0.763-0.646j],\n           [ 0.   +0.j   ,  7.24 +0.j   , -3.144+3.322j],\n           [ 0.   +0.j   ,  0.   +0.j   ,  2.732+0.j   ]])  # may vary\n    >>> Q\n    array([[ 0.326+0.175j, -0.273-0.029j, -0.886-0.052j],\n           [ 0.794+0.426j, -0.093+0.134j,  0.402-0.02j ],\n           [-0.2  -0.107j, -0.816+0.482j,  0.151-0.167j]])  # may vary\n    >>> Z\n    array([[ 0.596+0.32j , -0.31 +0.414j,  0.393-0.347j],\n           [-0.619-0.332j, -0.479+0.314j,  0.154-0.393j],\n           [-0.195-0.104j,  0.576+0.27j ,  0.715+0.187j]])  # may vary\n    \n    With complex arrays, we must use ``Z.conj().T`` in the following\n    expressions to verify the decomposition.\n    \n    >>> Q @ AA @ Z.conj().T  # Should be A\n    array([[ 1.-0.j,  2.-0.j, -1.-0.j],\n           [ 5.+0.j,  5.+0.j,  5.-0.j],\n           [ 2.+0.j,  4.+0.j, -8.+0.j]])\n    >>> Q @ BB @ Z.conj().T  # Should be B\n    array([[ 1.+0.j,  1.+0.j, -3.+0.j],\n           [ 3.-0.j,  1.-0.j, -1.+0.j],\n           [ 5.+0.j,  6.+0.j, -2.+0.j]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "dffe5d668b2bf1901cb0561d21dc0f23e11df071a079d8eb4030322fdc3906b6",
            "fields": [
                {
                    "id": "jycao10q",
                    "encoding": "",
                    "name": "A",
                    "value": "",
                    "defaultValue": "",
                    "description": "2-D array to decompose",
                    "type": "(N, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vc4akl7q",
                    "encoding": "",
                    "name": "B",
                    "value": "",
                    "defaultValue": "",
                    "description": "2-D array to decompose",
                    "type": "(N, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ty75bhu8",
                    "encoding": "",
                    "name": "output",
                    "value": "real",
                    "defaultValue": "real",
                    "description": "Construct the real or complex QZ decomposition for real matrices.\nDefault is 'real'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a9xosekd",
                    "encoding": "",
                    "name": "lwork",
                    "value": "",
                    "defaultValue": "",
                    "description": "Work array size. If None or -1, it is automatically computed.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z1e8t4xy",
                    "encoding": "",
                    "name": "sort",
                    "value": "",
                    "defaultValue": "",
                    "description": "NOTE: THIS INPUT IS DISABLED FOR NOW. Use ordqz instead.\n\nSpecifies whether the upper eigenvalues should be sorted. A callable\nmay be passed that, given a eigenvalue, returns a boolean denoting\nwhether the eigenvalue should be sorted to the top-left (True). For\nreal matrix pairs, the sort function takes three real arguments\n(alphar, alphai, beta). The eigenvalue\n``x = (alphar + alphai*1j)/beta``. For complex matrix pairs or\noutput='complex', the sort function takes two complex arguments\n(alpha, beta). The eigenvalue ``x = (alpha/beta)``.  Alternatively,\nstring parameters may be used:\n\n    - 'lhp'   Left-hand plane (x.real < 0.0)\n    - 'rhp'   Right-hand plane (x.real > 0.0)\n    - 'iuc'   Inside the unit circle (x*x.conjugate() < 1.0)\n    - 'ouc'   Outside the unit circle (x*x.conjugate() > 1.0)\n\nDefaults to None (no sorting).",
                    "type": "{None, callable, 'lhp', 'rhp', 'iuc', 'ouc'}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8rcgyhla",
                    "encoding": "",
                    "name": "overwrite_a",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to overwrite data in a (may improve performance)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ldy0pdek",
                    "encoding": "",
                    "name": "overwrite_b",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to overwrite data in b (may improve performance)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ckhjlhgg",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "If true checks the elements of `A` and `B` are finite numbers. If\nfalse does no checking and passes matrix through to\nunderlying algorithm.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jx8lwpcb",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.qz",
                    "defaultValue": "scipy.linalg.qz",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bouzxtu8",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "29apqzql",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "eoauw6qf",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ekdh2bv8",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hy9rtmtc",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ri22gmy6",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "lj8g_na9",
            "name": "linalg.rq",
            "description": "Compute RQ decomposition of a matrix.\n    \n    Calculate the decomposition ``A = R Q`` where Q is unitary/orthogonal\n    and R upper triangular.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a : (M, N) array_like\n        Matrix to be decomposed\n    overwrite_a : bool, optional\n        Whether data in a is overwritten (may improve performance)\n    lwork : int, optional\n        Work array size, lwork >= a.shape[1]. If None or -1, an optimal size\n        is computed.\n    mode : {'full', 'r', 'economic'}, optional\n        Determines what information is to be returned: either both Q and R\n        ('full', default), only R ('r') or both Q and R but computed in\n        economy-size ('economic', see Notes).\n    check_finite : bool, optional\n        Whether to check that the input matrix contains only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    R : float or complex ndarray\n        Of shape (M, N) or (M, K) for ``mode='economic'``. ``K = min(M, N)``.\n    Q : float or complex ndarray\n        Of shape (N, N) or (K, N) for ``mode='economic'``. Not returned\n        if ``mode='r'``.\n    \n    Raises\n    ------\n    LinAlgError\n        If decomposition fails.\n    \n    Notes\n    -----\n    This is an interface to the LAPACK routines sgerqf, dgerqf, cgerqf, zgerqf,\n    sorgrq, dorgrq, cungrq and zungrq.\n    \n    If ``mode=economic``, the shapes of Q and R are (K, N) and (M, K) instead\n    of (N,N) and (M,N), with ``K=min(M,N)``.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy import linalg\n    >>> rng = np.random.default_rng()\n    >>> a = rng.standard_normal((6, 9))\n    >>> r, q = linalg.rq(a)\n    >>> np.allclose(a, r @ q)\n    True\n    >>> r.shape, q.shape\n    ((6, 9), (9, 9))\n    >>> r2 = linalg.rq(a, mode='r')\n    >>> np.allclose(r, r2)\n    True\n    >>> r3, q3 = linalg.rq(a, mode='economic')\n    >>> r3.shape, q3.shape\n    ((6, 6), (6, 9))",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2de416ed11cfffccbef5a0a9494e1fd7ff900399ff511ae34393555578624055",
            "fields": [
                {
                    "id": "3n30lanf",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Matrix to be decomposed",
                    "type": "(M, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c2w3_qde",
                    "encoding": "",
                    "name": "overwrite_a",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether data in a is overwritten (may improve performance)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bblofhhr",
                    "encoding": "",
                    "name": "lwork",
                    "value": "",
                    "defaultValue": "",
                    "description": "Work array size, lwork >= a.shape[1]. If None or -1, an optimal size\nis computed.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bg00lugw",
                    "encoding": "",
                    "name": "mode",
                    "value": "full",
                    "defaultValue": "full",
                    "description": "Determines what information is to be returned: either both Q and R\n('full', default), only R ('r') or both Q and R but computed in\neconomy-size ('economic', see Notes).",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5dghelyu",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrix contains only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t7b3d276",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.rq",
                    "defaultValue": "scipy.linalg.rq",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_rr47z81",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u61ngmwr",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "0y8kffz6",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ny48hmm4",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cmb6wysz",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "888bsxmv",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ljdlfwcu",
            "name": "linalg.rsf2csf",
            "description": "Convert real Schur form to complex Schur form.\n    \n    Convert a quasi-diagonal real-valued Schur form to the upper-triangular\n    complex-valued Schur form.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    T : (M, M) array_like\n        Real Schur form of the original array\n    Z : (M, M) array_like\n        Schur transformation matrix\n    check_finite : bool, optional\n        Whether to check that the input arrays contain only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    T : (M, M) ndarray\n        Complex Schur form of the original array\n    Z : (M, M) ndarray\n        Schur transformation matrix corresponding to the complex form\n    \n    See Also\n    --------\n    \n    :func:`schur`\n        Schur decomposition of an array\n    \n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import schur, rsf2csf\n    >>> A = np.array([[0, 2, 2], [0, 1, 2], [1, 0, 1]])\n    >>> T, Z = schur(A)\n    >>> T\n    array([[ 2.65896708,  1.42440458, -1.92933439],\n           [ 0.        , -0.32948354, -0.49063704],\n           [ 0.        ,  1.31178921, -0.32948354]])\n    >>> Z\n    array([[0.72711591, -0.60156188, 0.33079564],\n           [0.52839428, 0.79801892, 0.28976765],\n           [0.43829436, 0.03590414, -0.89811411]])\n    >>> T2 , Z2 = rsf2csf(T, Z)\n    >>> T2\n    array([[2.65896708+0.j, -1.64592781+0.743164187j, -1.21516887+1.00660462j],\n           [0.+0.j , -0.32948354+8.02254558e-01j, -0.82115218-2.77555756e-17j],\n           [0.+0.j , 0.+0.j, -0.32948354-0.802254558j]])\n    >>> Z2\n    array([[0.72711591+0.j,  0.28220393-0.31385693j,  0.51319638-0.17258824j],\n           [0.52839428+0.j,  0.24720268+0.41635578j, -0.68079517-0.15118243j],\n           [0.43829436+0.j, -0.76618703+0.01873251j, -0.03063006+0.46857912j]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5e78ed99748ab3fd3dbcfdeeefafa14ba09921da8a6dba95e6e21ff72996bd93",
            "fields": [
                {
                    "id": "4doryv1y",
                    "encoding": "",
                    "name": "T",
                    "value": "",
                    "defaultValue": "",
                    "description": "Real Schur form of the original array",
                    "type": "(M, M) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gx1u248b",
                    "encoding": "",
                    "name": "Z",
                    "value": "",
                    "defaultValue": "",
                    "description": "Schur transformation matrix",
                    "type": "(M, M) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c4ceg5_v",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input arrays contain only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3mn6tyd4",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.rsf2csf",
                    "defaultValue": "scipy.linalg.rsf2csf",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "44mo3xio",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8et58yiu",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "vxo582zq",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0bhmof4v",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hz967nt9",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3upk9zgp",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "3tkj4rq_",
            "name": "linalg.schur",
            "description": "Compute Schur decomposition of a matrix.\n    \n    The Schur decomposition is::\n    \n        A = Z T Z^H\n    \n    where Z is unitary and T is either upper-triangular, or for real\n    Schur decomposition (output='real'), quasi-upper triangular. In\n    the quasi-triangular form, 2x2 blocks describing complex-valued\n    eigenvalue pairs may extrude from the diagonal.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a : (M, M) array_like\n        Matrix to decompose\n    output : {'real', 'complex'}, optional\n        When the dtype of `a` is real, this specifies whether to compute\n        the real or complex Schur decomposition.\n        When the dtype of `a` is complex, this argument is ignored, and the\n        complex Schur decomposition is computed.\n    lwork : int, optional\n        Work array size. If None or -1, it is automatically computed.\n    overwrite_a : bool, optional\n        Whether to overwrite data in a (may improve performance).\n    sort : {None, callable, 'lhp', 'rhp', 'iuc', 'ouc'}, optional\n        Specifies whether the upper eigenvalues should be sorted. A callable\n        may be passed that, given an eigenvalue, returns a boolean denoting\n        whether the eigenvalue should be sorted to the top-left (True).\n        \n        - If ``output='complex'`` OR the dtype of `a` is complex, the callable\n          should have one argument: the eigenvalue expressed as a complex number.\n        - If ``output='real'`` AND the dtype of `a` is real, the callable should have\n          two arguments: the real and imaginary parts of the eigenvalue, respectively.\n        \n        Alternatively, string parameters may be used::\n        \n            'lhp'   Left-hand plane (real(eigenvalue) < 0.0)\n            'rhp'   Right-hand plane (real(eigenvalue) >= 0.0)\n            'iuc'   Inside the unit circle (abs(eigenvalue) <= 1.0)\n            'ouc'   Outside the unit circle (abs(eigenvalue) > 1.0)\n        \n        Defaults to None (no sorting).\n    check_finite : bool, optional\n        Whether to check that the input matrix contains only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    T : (M, M) ndarray\n        Schur form of A. It is real-valued for the real Schur decomposition.\n    Z : (M, M) ndarray\n        An unitary Schur transformation matrix for A.\n        It is real-valued for the real Schur decomposition.\n    sdim : int\n        If and only if sorting was requested, a third return value will\n        contain the number of eigenvalues satisfying the sort condition.\n        Note that complex conjugate pairs for which the condition is true\n        for either eigenvalue count as 2.\n    \n    Raises\n    ------\n    LinAlgError\n        Error raised under three conditions:\n        \n        1. The algorithm failed due to a failure of the QR algorithm to\n           compute all eigenvalues.\n        2. If eigenvalue sorting was requested, the eigenvalues could not be\n           reordered due to a failure to separate eigenvalues, usually because\n           of poor conditioning.\n        3. If eigenvalue sorting was requested, roundoff errors caused the\n           leading eigenvalues to no longer satisfy the sorting condition.\n    \n    See Also\n    --------\n    \n    :func:`rsf2csf`\n        Convert real Schur form to complex Schur form\n    \n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import schur, eigvals\n    >>> A = np.array([[0, 2, 2], [0, 1, 2], [1, 0, 1]])\n    >>> T, Z = schur(A)\n    >>> T\n    array([[ 2.65896708,  1.42440458, -1.92933439],\n           [ 0.        , -0.32948354, -0.49063704],\n           [ 0.        ,  1.31178921, -0.32948354]])\n    >>> Z\n    array([[0.72711591, -0.60156188, 0.33079564],\n           [0.52839428, 0.79801892, 0.28976765],\n           [0.43829436, 0.03590414, -0.89811411]])\n    \n    >>> T2, Z2 = schur(A, output='complex')\n    >>> T2\n    array([[ 2.65896708, -1.22839825+1.32378589j,  0.42590089+1.51937378j], # may vary\n           [ 0.        , -0.32948354+0.80225456j, -0.59877807+0.56192146j],\n           [ 0.        ,  0.                    , -0.32948354-0.80225456j]])\n    >>> eigvals(T2)\n    array([2.65896708, -0.32948354+0.80225456j, -0.32948354-0.80225456j])   # may vary\n    \n    A custom eigenvalue-sorting condition that sorts by positive imaginary part\n    is satisfied by only one eigenvalue.\n    \n    >>> _, _, sdim = schur(A, output='complex', sort=lambda x: x.imag > 1e-15)\n    >>> sdim\n    1\n    \n    When ``output='real'`` and the array `a` is real, the `sort` callable must accept\n    the real and imaginary parts as separate arguments. Note that now the complex\n    eigenvalues ``-0.32948354+0.80225456j`` and ``-0.32948354-0.80225456j`` will be\n    treated as a complex conjugate pair, and according to the `sdim` documentation,\n    complex conjugate pairs for which the condition is True for *either* eigenvalue\n    increase `sdim` by *two*.\n    \n    >>> _, _, sdim = schur(A, output='real', sort=lambda x, y: y > 1e-15)\n    >>> sdim\n    2",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "829ad431ff1c3e8005f2fc90e2646e10e6a94a4dbc4e78a279199e2187b85c96",
            "fields": [
                {
                    "id": "e7_kez3o",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Matrix to decompose",
                    "type": "(M, M) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "22dwjami",
                    "encoding": "",
                    "name": "output",
                    "value": "real",
                    "defaultValue": "real",
                    "description": "When the dtype of `a` is real, this specifies whether to compute\nthe real or complex Schur decomposition.\nWhen the dtype of `a` is complex, this argument is ignored, and the\ncomplex Schur decomposition is computed.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "51u90c4_",
                    "encoding": "",
                    "name": "lwork",
                    "value": "",
                    "defaultValue": "",
                    "description": "Work array size. If None or -1, it is automatically computed.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7371rg43",
                    "encoding": "",
                    "name": "overwrite_a",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to overwrite data in a (may improve performance).",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sfe_rns8",
                    "encoding": "",
                    "name": "sort",
                    "value": "",
                    "defaultValue": "",
                    "description": "Specifies whether the upper eigenvalues should be sorted. A callable\nmay be passed that, given an eigenvalue, returns a boolean denoting\nwhether the eigenvalue should be sorted to the top-left (True).\n\n- If ``output='complex'`` OR the dtype of `a` is complex, the callable\n  should have one argument: the eigenvalue expressed as a complex number.\n- If ``output='real'`` AND the dtype of `a` is real, the callable should have\n  two arguments: the real and imaginary parts of the eigenvalue, respectively.\n\nAlternatively, string parameters may be used::\n\n    'lhp'   Left-hand plane (real(eigenvalue) < 0.0)\n    'rhp'   Right-hand plane (real(eigenvalue) >= 0.0)\n    'iuc'   Inside the unit circle (abs(eigenvalue) <= 1.0)\n    'ouc'   Outside the unit circle (abs(eigenvalue) > 1.0)\n\nDefaults to None (no sorting).",
                    "type": "{None, callable, 'lhp', 'rhp', 'iuc', 'ouc'}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "61p50gft",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrix contains only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ogsr2qiw",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.schur",
                    "defaultValue": "scipy.linalg.schur",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_nldfnq3",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zu4vrzm4",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ki3d88mp",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5275yxpk",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u6f6qbi6",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p3yfxr7t",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "kycerc8w",
            "name": "linalg.signm",
            "description": "Matrix sign function.\n    \n    Extension of the scalar sign(x) to matrices.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    A : (N, N) array_like\n        Matrix at which to evaluate the sign function\n    disp : bool, optional\n        Print warning if error in the result is estimated large\n        instead of returning estimated error. (Default: True)\n        \n        .. deprecated:: 1.16.0\n            The `disp` argument is deprecated and will be\n            removed in SciPy 1.18.0. The previously returned error estimate\n            can be computed as ``norm(signm @ signm - signm, 1)``.\n    \n    Returns\n    -------\n    signm : (N, N) ndarray\n        Value of the sign function at `A`\n    errest : float\n        (if disp == False)\n        \n        1-norm of the estimated error, ||err||_1 / ||A||_1\n    \n    Examples\n    --------\n    >>> from scipy.linalg import signm, eigvals\n    >>> a = [[1,2,3], [1,2,1], [1,1,1]]\n    >>> eigvals(a)\n    array([ 4.12488542+0.j, -0.76155718+0.j,  0.63667176+0.j])\n    >>> eigvals(signm(a))\n    array([-1.+0.j,  1.+0.j,  1.+0.j])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "cb7f4f818a3900fab1166477b267ecf2a67a0c61d13752c795bf1726c9a2dd48",
            "fields": [
                {
                    "id": "ex8inkkl",
                    "encoding": "",
                    "name": "A",
                    "value": "",
                    "defaultValue": "",
                    "description": "Matrix at which to evaluate the sign function",
                    "type": "(N, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8fkq61n5",
                    "encoding": "",
                    "name": "disp",
                    "value": "builtins.object",
                    "defaultValue": "builtins.object",
                    "description": "Print warning if error in the result is estimated large\ninstead of returning estimated error. (Default: True)\n\n.. deprecated:: 1.16.0\n    The `disp` argument is deprecated and will be\n    removed in SciPy 1.18.0. The previously returned error estimate\n    can be computed as ``norm(signm @ signm - signm, 1)``.",
                    "type": "builtins.object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0a508jba",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.signm",
                    "defaultValue": "scipy.linalg.signm",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2jzytvvv",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_7xc2bdc",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "roymidat",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vpix3u63",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "071dmxp0",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jyj86ae9",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "agrhr7zv",
            "name": "linalg.sinhm",
            "description": "Compute the hyperbolic matrix sine.\n    \n    This routine uses expm to compute the matrix exponentials.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    A : (N, N) array_like\n        Input array.\n    \n    Returns\n    -------\n    sinhm : (N, N) ndarray\n        Hyperbolic matrix sine of `A`\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import tanhm, sinhm, coshm\n    >>> a = np.array([[1.0, 3.0], [1.0, 4.0]])\n    >>> s = sinhm(a)\n    >>> s\n    array([[ 10.57300653,  39.28826594],\n           [ 13.09608865,  49.86127247]])\n    \n    Verify tanhm(a) = sinhm(a).dot(inv(coshm(a)))\n    \n    >>> t = tanhm(a)\n    >>> c = coshm(a)\n    >>> t - s.dot(np.linalg.inv(c))\n    array([[  2.72004641e-15,   4.55191440e-15],\n           [  0.00000000e+00,  -5.55111512e-16]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4d1b9bb1a29d73bef9e97bf1eede4fc2d2133319ad9d526ee6be33c47106376f",
            "fields": [
                {
                    "id": "5ry80oyf",
                    "encoding": "",
                    "name": "A",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array.",
                    "type": "(N, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1j1z5ozm",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.sinhm",
                    "defaultValue": "scipy.linalg.sinhm",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "szz0331t",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ar0275b8",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "2nj2avj9",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i9mj908_",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r7y07gj_",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0l4el8by",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "sukf5lqi",
            "name": "linalg.sinm",
            "description": "Compute the matrix sine.\n    \n    This routine uses expm to compute the matrix exponentials.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    A : (N, N) array_like\n        Input array.\n    \n    Returns\n    -------\n    sinm : (N, N) ndarray\n        Matrix sine of `A`\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import expm, sinm, cosm\n    \n    Euler's identity (exp(i*theta) = cos(theta) + i*sin(theta))\n    applied to a matrix:\n    \n    >>> a = np.array([[1.0, 2.0], [-1.0, 3.0]])\n    >>> expm(1j*a)\n    array([[ 0.42645930+1.89217551j, -2.13721484-0.97811252j],\n           [ 1.06860742+0.48905626j, -1.71075555+0.91406299j]])\n    >>> cosm(a) + 1j*sinm(a)\n    array([[ 0.42645930+1.89217551j, -2.13721484-0.97811252j],\n           [ 1.06860742+0.48905626j, -1.71075555+0.91406299j]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "32425ae09e5216dc5f0537bfd47157e5a81615059154ccc4bc72bae52d97ca13",
            "fields": [
                {
                    "id": "jc161zqs",
                    "encoding": "",
                    "name": "A",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array.",
                    "type": "(N, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "34a0ud4z",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.sinm",
                    "defaultValue": "scipy.linalg.sinm",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8mmra3ha",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jr4_1ah4",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "0tq3n859",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g45v9sou",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xmrarrqe",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hv56vppr",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "4hqwzhwh",
            "name": "linalg.solve",
            "description": "Solve the equation ``a @ x = b`` for  ``x``,\n    where `a` is a square matrix.\n    \n    If the data matrix is known to be a particular type then supplying the\n    corresponding string to ``assume_a`` key chooses the dedicated solver.\n    The available options are\n    \n    =============================  ================================\n     diagonal                       'diagonal'\n     tridiagonal                    'tridiagonal'\n     banded                         'banded'\n     upper triangular               'upper triangular'\n     lower triangular               'lower triangular'\n     symmetric                      'symmetric' (or 'sym')\n     hermitian                      'hermitian' (or 'her')\n     symmetric positive definite    'positive definite' (or 'pos')\n     general                        'general' (or 'gen')\n    =============================  ================================\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a : (N, N) array_like\n        Square input data\n    b : (N, NRHS) array_like\n        Input data for the right hand side.\n    lower : bool, default: False\n        Ignored unless ``assume_a`` is one of ``'sym'``, ``'her'``, or ``'pos'``.\n        If True, the calculation uses only the data in the lower triangle of `a`;\n        entries above the diagonal are ignored. If False (default), the\n        calculation uses only the data in the upper triangle of `a`; entries\n        below the diagonal are ignored.\n    overwrite_a : bool, default: False\n        Allow overwriting data in `a` (may enhance performance).\n    overwrite_b : bool, default: False\n        Allow overwriting data in `b` (may enhance performance).\n    check_finite : bool, default: True\n        Whether to check that the input matrices contain only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    assume_a : str, optional\n        Valid entries are described above.\n        If omitted or ``None``, checks are performed to identify structure so the\n        appropriate solver can be called.\n    transposed : bool, default: False\n        If True, solve ``a.T @ x == b``. Raises `NotImplementedError`\n        for complex `a`.\n    \n    Returns\n    -------\n    x : (N, NRHS) ndarray\n        The solution array.\n    \n    Raises\n    ------\n    ValueError\n        If size mismatches detected or input a is not square.\n    LinAlgError\n        If the computation fails because of matrix singularity.\n    LinAlgWarning\n        If an ill-conditioned input a is detected.\n    NotImplementedError\n        If transposed is True and input a is a complex matrix.\n    \n    Notes\n    -----\n    If the input b matrix is a 1-D array with N elements, when supplied\n    together with an NxN input a, it is assumed as a valid column vector\n    despite the apparent size mismatch. This is compatible with the\n    numpy.dot() behavior and the returned result is still 1-D array.\n    \n    The general, symmetric, Hermitian and positive definite solutions are\n    obtained via calling ?GESV, ?SYSV, ?HESV, and ?POSV routines of\n    LAPACK respectively.\n    \n    The datatype of the arrays define which solver is called regardless\n    of the values. In other words, even when the complex array entries have\n    precisely zero imaginary parts, the complex solver will be called based\n    on the data type of the array.\n    \n    Examples\n    --------\n    Given `a` and `b`, solve for `x`:\n    \n    >>> import numpy as np\n    >>> a = np.array([[3, 2, 0], [1, -1, 0], [0, 5, 1]])\n    >>> b = np.array([2, 4, -1])\n    >>> from scipy import linalg\n    >>> x = linalg.solve(a, b)\n    >>> x\n    array([ 2., -2.,  9.])\n    >>> np.dot(a, x) == b\n    array([ True,  True,  True], dtype=bool)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b28e208fe920bf5430ab364846071617076147d533247500b597726099a7c664",
            "fields": [
                {
                    "id": "u4w0594f",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Square input data",
                    "type": "(N, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "suwjaqei",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input data for the right hand side.",
                    "type": "(N, NRHS) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_6g03yv2",
                    "encoding": "",
                    "name": "lower",
                    "value": false,
                    "defaultValue": false,
                    "description": "Ignored unless ``assume_a`` is one of ``'sym'``, ``'her'``, or ``'pos'``.\nIf True, the calculation uses only the data in the lower triangle of `a`;\nentries above the diagonal are ignored. If False (default), the\ncalculation uses only the data in the upper triangle of `a`; entries\nbelow the diagonal are ignored.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4y6lp74b",
                    "encoding": "",
                    "name": "overwrite_a",
                    "value": false,
                    "defaultValue": false,
                    "description": "Allow overwriting data in `a` (may enhance performance).",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5vw847u2",
                    "encoding": "",
                    "name": "overwrite_b",
                    "value": false,
                    "defaultValue": false,
                    "description": "Allow overwriting data in `b` (may enhance performance).",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jhsa9aqr",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrices contain only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y151ylgu",
                    "encoding": "",
                    "name": "assume_a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Valid entries are described above.\nIf omitted or ``None``, checks are performed to identify structure so the\nappropriate solver can be called.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_bhnmdd2",
                    "encoding": "",
                    "name": "transposed",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, solve ``a.T @ x == b``. Raises `NotImplementedError`\nfor complex `a`.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m_z8y30k",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.solve",
                    "defaultValue": "scipy.linalg.solve",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m4v6o0c4",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "er5biqfi",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "i05kuqdr",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "87q6hhno",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5ardmsbr",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "40h8u8zg",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "hg4uaw40",
            "name": "linalg.solve_banded",
            "description": "Solve the equation ``a @ x = b`` for ``x``, where ``a`` is the banded matrix\n    defined by `ab`.\n    \n    The matrix a is stored in `ab` using the matrix diagonal ordered form::\n    \n        ab[u + i - j, j] == a[i,j]\n    \n    Example of `ab` (shape of a is (6,6), `u` =1, `l` =2)::\n    \n        *    a01  a12  a23  a34  a45\n        a00  a11  a22  a33  a44  a55\n        a10  a21  a32  a43  a54   *\n        a20  a31  a42  a53   *    *\n    \n    Parameters\n    ----------\n    (l, u) : (integer, integer)\n        Number of non-zero lower and upper diagonals\n    ab : (`l` + `u` + 1, M) array_like\n        Banded matrix\n    b : (M,) or (M, K) array_like\n        Right-hand side\n    overwrite_ab : bool, optional\n        Discard data in `ab` (may enhance performance)\n    overwrite_b : bool, optional\n        Discard data in `b` (may enhance performance)\n    check_finite : bool, optional\n        Whether to check that the input matrices contain only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    x : (M,) or (M, K) ndarray\n        The solution to the system a x = b. Returned shape depends on the\n        shape of `b`.\n    \n    Examples\n    --------\n    Solve the banded system a x = b, where::\n    \n            [5  2 -1  0  0]       [0]\n            [1  4  2 -1  0]       [1]\n        a = [0  1  3  2 -1]   b = [2]\n            [0  0  1  2  2]       [2]\n            [0  0  0  1  1]       [3]\n    \n    There is one nonzero diagonal below the main diagonal (l = 1), and\n    two above (u = 2). The diagonal banded form of the matrix is::\n    \n             [*  * -1 -1 -1]\n        ab = [*  2  2  2  2]\n             [5  4  3  2  1]\n             [1  1  1  1  *]\n    \n    >>> import numpy as np\n    >>> from scipy.linalg import solve_banded\n    >>> ab = np.array([[0,  0, -1, -1, -1],\n    ...                [0,  2,  2,  2,  2],\n    ...                [5,  4,  3,  2,  1],\n    ...                [1,  1,  1,  1,  0]])\n    >>> b = np.array([0, 1, 2, 2, 3])\n    >>> x = solve_banded((1, 2), ab, b)\n    >>> x\n    array([-2.37288136,  3.93220339, -4.        ,  4.3559322 , -1.3559322 ])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e87f7631f2b3217d57479e47d8f225cb62ad9ad58ec72599e484b938e599241a",
            "fields": [
                {
                    "id": "lvmqay__",
                    "encoding": "",
                    "name": "l_and_u",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "df6ftq8z",
                    "encoding": "",
                    "name": "ab",
                    "value": "",
                    "defaultValue": "",
                    "description": "Banded matrix",
                    "type": "(l + u + 1, M) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x2u3sufp",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "Right-hand side",
                    "type": "(M,) or (M, K) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0b2ft8c_",
                    "encoding": "",
                    "name": "overwrite_ab",
                    "value": false,
                    "defaultValue": false,
                    "description": "Discard data in `ab` (may enhance performance)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dkoc2nub",
                    "encoding": "",
                    "name": "overwrite_b",
                    "value": false,
                    "defaultValue": false,
                    "description": "Discard data in `b` (may enhance performance)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i_2_32i5",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrices contain only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vl51z4ar",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.solve_banded",
                    "defaultValue": "scipy.linalg.solve_banded",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sg7i3rab",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x4bix3__",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "2w501h6w",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p5_5w6td",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x0bkv6zr",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x4upe6ef",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "u9wn9tg4",
            "name": "linalg.solve_circulant",
            "description": "Solve the equation ``C @ x = b`` for ``x``, where ``C`` is a\n    circulant matrix defined by `c`.\n    \n    `C` is the circulant matrix associated with the vector `c`.\n    \n    The system is solved by doing division in Fourier space. The\n    calculation is::\n    \n        x = ifft(fft(b) / fft(c))\n    \n    where `fft` and `ifft` are the fast Fourier transform and its inverse,\n    respectively. For a large vector `c`, this is *much* faster than\n    solving the system with the full circulant matrix.\n    \n    Parameters\n    ----------\n    c : array_like\n        The coefficients of the circulant matrix.\n    b : array_like\n        Right-hand side matrix in ``a x = b``.\n    singular : str, optional\n        This argument controls how a near singular circulant matrix is\n        handled.  If `singular` is \"raise\" and the circulant matrix is\n        near singular, a `LinAlgError` is raised. If `singular` is\n        \"lstsq\", the least squares solution is returned. Default is \"raise\".\n    tol : float, optional\n        If any eigenvalue of the circulant matrix has an absolute value\n        that is less than or equal to `tol`, the matrix is considered to be\n        near singular. If not given, `tol` is set to::\n    \n            tol = abs_eigs.max() * abs_eigs.size * np.finfo(np.float64).eps\n    \n        where `abs_eigs` is the array of absolute values of the eigenvalues\n        of the circulant matrix.\n    caxis : int\n        When `c` has dimension greater than 1, it is viewed as a collection\n        of circulant vectors. In this case, `caxis` is the axis of `c` that\n        holds the vectors of circulant coefficients.\n    baxis : int\n        When `b` has dimension greater than 1, it is viewed as a collection\n        of vectors. In this case, `baxis` is the axis of `b` that holds the\n        right-hand side vectors.\n    outaxis : int\n        When `c` or `b` are multidimensional, the value returned by\n        `solve_circulant` is multidimensional. In this case, `outaxis` is\n        the axis of the result that holds the solution vectors.\n    \n    Returns\n    -------\n    x : ndarray\n        Solution to the system ``C x = b``.\n    \n    Raises\n    ------\n    LinAlgError\n        If the circulant matrix associated with `c` is near singular.\n    \n    See Also\n    --------\n    circulant : circulant matrix\n    \n    Notes\n    -----\n    For a 1-D vector `c` with length `m`, and an array `b`\n    with shape ``(m, ...)``,\n    \n        solve_circulant(c, b)\n    \n    returns the same result as\n    \n        solve(circulant(c), b)\n    \n    where `solve` and `circulant` are from `scipy.linalg`.\n    \n    .. versionadded:: 0.16.0\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import solve_circulant, solve, circulant, lstsq\n    \n    >>> c = np.array([2, 2, 4])\n    >>> b = np.array([1, 2, 3])\n    >>> solve_circulant(c, b)\n    array([ 0.75, -0.25,  0.25])\n    \n    Compare that result to solving the system with `scipy.linalg.solve`:\n    \n    >>> solve(circulant(c), b)\n    array([ 0.75, -0.25,  0.25])\n    \n    A singular example:\n    \n    >>> c = np.array([1, 1, 0, 0])\n    >>> b = np.array([1, 2, 3, 4])\n    \n    Calling ``solve_circulant(c, b)`` will raise a `LinAlgError`.  For the\n    least square solution, use the option ``singular='lstsq'``:\n    \n    >>> solve_circulant(c, b, singular='lstsq')\n    array([ 0.25,  1.25,  2.25,  1.25])\n    \n    Compare to `scipy.linalg.lstsq`:\n    \n    >>> x, resid, rnk, s = lstsq(circulant(c), b)\n    >>> x\n    array([ 0.25,  1.25,  2.25,  1.25])\n    \n    A broadcasting example:\n    \n    Suppose we have the vectors of two circulant matrices stored in an array\n    with shape (2, 5), and three `b` vectors stored in an array with shape\n    (3, 5).  For example,\n    \n    >>> c = np.array([[1.5, 2, 3, 0, 0], [1, 1, 4, 3, 2]])\n    >>> b = np.arange(15).reshape(-1, 5)\n    \n    We want to solve all combinations of circulant matrices and `b` vectors,\n    with the result stored in an array with shape (2, 3, 5). When we\n    disregard the axes of `c` and `b` that hold the vectors of coefficients,\n    the shapes of the collections are (2,) and (3,), respectively, which are\n    not compatible for broadcasting. To have a broadcast result with shape\n    (2, 3), we add a trivial dimension to `c`: ``c[:, np.newaxis, :]`` has\n    shape (2, 1, 5). The last dimension holds the coefficients of the\n    circulant matrices, so when we call `solve_circulant`, we can use the\n    default ``caxis=-1``. The coefficients of the `b` vectors are in the last\n    dimension of the array `b`, so we use ``baxis=-1``. If we use the\n    default `outaxis`, the result will have shape (5, 2, 3), so we'll use\n    ``outaxis=-1`` to put the solution vectors in the last dimension.\n    \n    >>> x = solve_circulant(c[:, np.newaxis, :], b, baxis=-1, outaxis=-1)\n    >>> x.shape\n    (2, 3, 5)\n    >>> np.set_printoptions(precision=3)  # For compact output of numbers.\n    >>> x\n    array([[[-0.118,  0.22 ,  1.277, -0.142,  0.302],\n            [ 0.651,  0.989,  2.046,  0.627,  1.072],\n            [ 1.42 ,  1.758,  2.816,  1.396,  1.841]],\n           [[ 0.401,  0.304,  0.694, -0.867,  0.377],\n            [ 0.856,  0.758,  1.149, -0.412,  0.831],\n            [ 1.31 ,  1.213,  1.603,  0.042,  1.286]]])\n    \n    Check by solving one pair of `c` and `b` vectors (cf. ``x[1, 1, :]``):\n    \n    >>> solve_circulant(c[1], b[1, :])\n    array([ 0.856,  0.758,  1.149, -0.412,  0.831])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9a1710df5193cc04a55a8d2543273890bbb3b75613daa63db3b0144f3d49f7e5",
            "fields": [
                {
                    "id": "krp97l00",
                    "encoding": "",
                    "name": "c",
                    "value": "",
                    "defaultValue": "",
                    "description": "The coefficients of the circulant matrix.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t9k9c_yr",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "Right-hand side matrix in ``a x = b``.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cikydc2m",
                    "encoding": "",
                    "name": "singular",
                    "value": "raise",
                    "defaultValue": "raise",
                    "description": "This argument controls how a near singular circulant matrix is\nhandled.  If `singular` is \"raise\" and the circulant matrix is\nnear singular, a `LinAlgError` is raised. If `singular` is\n\"lstsq\", the least squares solution is returned. Default is \"raise\".",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vq38w2b7",
                    "encoding": "",
                    "name": "tol",
                    "value": "",
                    "defaultValue": "",
                    "description": "If any eigenvalue of the circulant matrix has an absolute value\nthat is less than or equal to `tol`, the matrix is considered to be\nnear singular. If not given, `tol` is set to::\n\n    tol = abs_eigs.max() * abs_eigs.size * np.finfo(np.float64).eps\n\nwhere `abs_eigs` is the array of absolute values of the eigenvalues\nof the circulant matrix.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "27e0j5r8",
                    "encoding": "",
                    "name": "caxis",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "When `c` has dimension greater than 1, it is viewed as a collection\nof circulant vectors. In this case, `caxis` is the axis of `c` that\nholds the vectors of circulant coefficients.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lywnck9t",
                    "encoding": "",
                    "name": "baxis",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "When `b` has dimension greater than 1, it is viewed as a collection\nof vectors. In this case, `baxis` is the axis of `b` that holds the\nright-hand side vectors.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1j137udb",
                    "encoding": "",
                    "name": "outaxis",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "When `c` or `b` are multidimensional, the value returned by\n`solve_circulant` is multidimensional. In this case, `outaxis` is\nthe axis of the result that holds the solution vectors.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w04_u4lf",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.solve_circulant",
                    "defaultValue": "scipy.linalg.solve_circulant",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wvh4xmp6",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sh703esl",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ah3hi322",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7sap9zic",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "90k2cqx9",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eu_l38yv",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ji7dc7so",
            "name": "linalg.solve_continuous_are",
            "description": "Solves the continuous-time algebraic Riccati equation (CARE).\n    \n    The CARE is defined as\n    \n    .. math::\n    \n          X A + A^H X - X B R^{-1} B^H X + Q = 0\n    \n    The limitations for a solution to exist are :\n    \n        * All eigenvalues of :math:`A` on the right half plane, should be\n          controllable.\n    \n        * The associated hamiltonian pencil (See Notes), should have\n          eigenvalues sufficiently away from the imaginary axis.\n    \n    Moreover, if ``e`` or ``s`` is not precisely ``None``, then the\n    generalized version of CARE\n    \n    .. math::\n    \n          E^HXA + A^HXE - (E^HXB + S) R^{-1} (B^HXE + S^H) + Q = 0\n    \n    is solved. When omitted, ``e`` is assumed to be the identity and ``s``\n    is assumed to be the zero matrix with sizes compatible with ``a`` and\n    ``b``, respectively.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a : (M, M) array_like\n        Square matrix\n    b : (M, N) array_like\n        Input\n    q : (M, M) array_like\n        Input\n    r : (N, N) array_like\n        Nonsingular square matrix\n    e : (M, M) array_like, optional\n        Nonsingular square matrix\n    s : (M, N) array_like, optional\n        Input\n    balanced : bool, optional\n        The boolean that indicates whether a balancing step is performed\n        on the data. The default is set to True.\n    \n    Returns\n    -------\n    x : (M, M) ndarray\n        Solution to the continuous-time algebraic Riccati equation.\n    \n    Raises\n    ------\n    LinAlgError\n        For cases where the stable subspace of the pencil could not be\n        isolated. See Notes section and the references for details.\n    \n    See Also\n    --------\n    \n    :func:`solve_discrete_are`\n        Solves the discrete-time algebraic Riccati equation\n    \n    \n    Notes\n    -----\n    The equation is solved by forming the extended hamiltonian matrix pencil,\n    as described in [1]_, :math:`H - \\lambda J` given by the block matrices ::\n    \n        [ A    0    B ]             [ E   0    0 ]\n        [-Q  -A^H  -S ] - \\lambda * [ 0  E^H   0 ]\n        [ S^H B^H   R ]             [ 0   0    0 ]\n    \n    and using a QZ decomposition method.\n    \n    In this algorithm, the fail conditions are linked to the symmetry\n    of the product :math:`U_2 U_1^{-1}` and condition number of\n    :math:`U_1`. Here, :math:`U` is the 2m-by-m matrix that holds the\n    eigenvectors spanning the stable subspace with 2-m rows and partitioned\n    into two m-row matrices. See [1]_ and [2]_ for more details.\n    \n    In order to improve the QZ decomposition accuracy, the pencil goes\n    through a balancing step where the sum of absolute values of\n    :math:`H` and :math:`J` entries (after removing the diagonal entries of\n    the sum) is balanced following the recipe given in [3]_.\n    \n    .. versionadded:: 0.11.0\n    \n    References\n    ----------\n    .. [1]  P. van Dooren , \"A Generalized Eigenvalue Approach For Solving\n       Riccati Equations.\", SIAM Journal on Scientific and Statistical\n       Computing, Vol.2(2), :doi:`10.1137/0902010`\n    \n    .. [2] A.J. Laub, \"A Schur Method for Solving Algebraic Riccati\n       Equations.\", Massachusetts Institute of Technology. Laboratory for\n       Information and Decision Systems. LIDS-R ; 859. Available online :\n       http://hdl.handle.net/1721.1/1301\n    \n    .. [3] P. Benner, \"Symplectic Balancing of Hamiltonian Matrices\", 2001,\n       SIAM J. Sci. Comput., 2001, Vol.22(5), :doi:`10.1137/S1064827500367993`\n    \n    Examples\n    --------\n    Given `a`, `b`, `q`, and `r` solve for `x`:\n    \n    >>> import numpy as np\n    >>> from scipy import linalg\n    >>> a = np.array([[4, 3], [-4.5, -3.5]])\n    >>> b = np.array([[1], [-1]])\n    >>> q = np.array([[9, 6], [6, 4.]])\n    >>> r = 1\n    >>> x = linalg.solve_continuous_are(a, b, q, r)\n    >>> x\n    array([[ 21.72792206,  14.48528137],\n           [ 14.48528137,   9.65685425]])\n    >>> np.allclose(a.T.dot(x) + x.dot(a)-x.dot(b).dot(b.T).dot(x), -q)\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "19ae56b04a8acf07cc2cb782ae6ed401e0c68ac7880ca2c80d153b9237abac46",
            "fields": [
                {
                    "id": "mmjoco2c",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Square matrix",
                    "type": "(M, M) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w75l0mds",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input",
                    "type": "(M, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d_lirr6m",
                    "encoding": "",
                    "name": "q",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input",
                    "type": "(M, M) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0lp9_um1",
                    "encoding": "",
                    "name": "r",
                    "value": "",
                    "defaultValue": "",
                    "description": "Nonsingular square matrix",
                    "type": "(N, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9irw4ugd",
                    "encoding": "",
                    "name": "e",
                    "value": "",
                    "defaultValue": "",
                    "description": "Nonsingular square matrix",
                    "type": "(M, M) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k0n6uuh4",
                    "encoding": "",
                    "name": "s",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input",
                    "type": "(M, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0a6x9d54",
                    "encoding": "",
                    "name": "balanced",
                    "value": true,
                    "defaultValue": true,
                    "description": "The boolean that indicates whether a balancing step is performed\non the data. The default is set to True.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z6ycaph2",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.solve_continuous_are",
                    "defaultValue": "scipy.linalg.solve_continuous_are",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i6cxvomi",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "81uqr82x",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "xxxjd4bl",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2ao6xy_4",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1wg3x4wc",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sbdy9m1p",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "9n8o75e3",
            "name": "linalg.solve_continuous_lyapunov",
            "description": "Solves the continuous Lyapunov equation :math:`AX + XA^H = Q`.\n    \n    Uses the Bartels-Stewart algorithm to find :math:`X`.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a : array_like\n        A square matrix\n    q : array_like\n        Right-hand side square matrix\n    \n    Returns\n    -------\n    x : ndarray\n        Solution to the continuous Lyapunov equation\n    \n    See Also\n    --------\n    \n    :func:`solve_discrete_lyapunov`\n        computes the solution to the discrete-time Lyapunov equation\n    :func:`solve_sylvester`\n        computes the solution to the Sylvester equation\n    \n    \n    Notes\n    -----\n    The continuous Lyapunov equation is a special form of the Sylvester\n    equation, hence this solver relies on LAPACK routine ?TRSYL.\n    \n    .. versionadded:: 0.11.0\n    \n    Examples\n    --------\n    Given `a` and `q` solve for `x`:\n    \n    >>> import numpy as np\n    >>> from scipy import linalg\n    >>> a = np.array([[-3, -2, 0], [-1, -1, 0], [0, -5, -1]])\n    >>> b = np.array([2, 4, -1])\n    >>> q = np.eye(3)\n    >>> x = linalg.solve_continuous_lyapunov(a, q)\n    >>> x\n    array([[ -0.75  ,   0.875 ,  -3.75  ],\n           [  0.875 ,  -1.375 ,   5.3125],\n           [ -3.75  ,   5.3125, -27.0625]])\n    >>> np.allclose(a.dot(x) + x.dot(a.T), q)\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "29f3e95563df0851b39b112b19682af53c2e81aa37ae2dcae80c62d7d980e54d",
            "fields": [
                {
                    "id": "qboyrta0",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "A square matrix",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "89jbzqbd",
                    "encoding": "",
                    "name": "q",
                    "value": "",
                    "defaultValue": "",
                    "description": "Right-hand side square matrix",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "044n6z1q",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.solve_continuous_lyapunov",
                    "defaultValue": "scipy.linalg.solve_continuous_lyapunov",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vdaa6rq8",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5d5nx23l",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "2s7xldgz",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3v1ent9t",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kryk1f9a",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wrqddivi",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "qb_mzm23",
            "name": "linalg.solve_discrete_are",
            "description": "Solves the discrete-time algebraic Riccati equation (DARE).\n    \n    The DARE is defined as\n    \n    .. math::\n    \n          A^HXA - X - (A^HXB) (R + B^HXB)^{-1} (B^HXA) + Q = 0\n    \n    The limitations for a solution to exist are :\n    \n        * All eigenvalues of :math:`A` outside the unit disc, should be\n          controllable.\n    \n        * The associated symplectic pencil (See Notes), should have\n          eigenvalues sufficiently away from the unit circle.\n    \n    Moreover, if ``e`` and ``s`` are not both precisely ``None``, then the\n    generalized version of DARE\n    \n    .. math::\n    \n          A^HXA - E^HXE - (A^HXB+S) (R+B^HXB)^{-1} (B^HXA+S^H) + Q = 0\n    \n    is solved. When omitted, ``e`` is assumed to be the identity and ``s``\n    is assumed to be the zero matrix.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a : (M, M) array_like\n        Square matrix\n    b : (M, N) array_like\n        Input\n    q : (M, M) array_like\n        Input\n    r : (N, N) array_like\n        Square matrix\n    e : (M, M) array_like, optional\n        Nonsingular square matrix\n    s : (M, N) array_like, optional\n        Input\n    balanced : bool\n        The boolean that indicates whether a balancing step is performed\n        on the data. The default is set to True.\n    \n    Returns\n    -------\n    x : (M, M) ndarray\n        Solution to the discrete algebraic Riccati equation.\n    \n    Raises\n    ------\n    LinAlgError\n        For cases where the stable subspace of the pencil could not be\n        isolated. See Notes section and the references for details.\n    \n    See Also\n    --------\n    \n    :func:`solve_continuous_are`\n        Solves the continuous algebraic Riccati equation\n    \n    \n    Notes\n    -----\n    The equation is solved by forming the extended symplectic matrix pencil,\n    as described in [1]_, :math:`H - \\lambda J` given by the block matrices ::\n    \n           [  A   0   B ]             [ E   0   B ]\n           [ -Q  E^H -S ] - \\lambda * [ 0  A^H  0 ]\n           [ S^H  0   R ]             [ 0 -B^H  0 ]\n    \n    and using a QZ decomposition method.\n    \n    In this algorithm, the fail conditions are linked to the symmetry\n    of the product :math:`U_2 U_1^{-1}` and condition number of\n    :math:`U_1`. Here, :math:`U` is the 2m-by-m matrix that holds the\n    eigenvectors spanning the stable subspace with 2-m rows and partitioned\n    into two m-row matrices. See [1]_ and [2]_ for more details.\n    \n    In order to improve the QZ decomposition accuracy, the pencil goes\n    through a balancing step where the sum of absolute values of\n    :math:`H` and :math:`J` rows/cols (after removing the diagonal entries)\n    is balanced following the recipe given in [3]_. If the data has small\n    numerical noise, balancing may amplify their effects and some clean up\n    is required.\n    \n    .. versionadded:: 0.11.0\n    \n    References\n    ----------\n    .. [1]  P. van Dooren , \"A Generalized Eigenvalue Approach For Solving\n       Riccati Equations.\", SIAM Journal on Scientific and Statistical\n       Computing, Vol.2(2), :doi:`10.1137/0902010`\n    \n    .. [2] A.J. Laub, \"A Schur Method for Solving Algebraic Riccati\n       Equations.\", Massachusetts Institute of Technology. Laboratory for\n       Information and Decision Systems. LIDS-R ; 859. Available online :\n       http://hdl.handle.net/1721.1/1301\n    \n    .. [3] P. Benner, \"Symplectic Balancing of Hamiltonian Matrices\", 2001,\n       SIAM J. Sci. Comput., 2001, Vol.22(5), :doi:`10.1137/S1064827500367993`\n    \n    Examples\n    --------\n    Given `a`, `b`, `q`, and `r` solve for `x`:\n    \n    >>> import numpy as np\n    >>> from scipy import linalg as la\n    >>> a = np.array([[0, 1], [0, -1]])\n    >>> b = np.array([[1, 0], [2, 1]])\n    >>> q = np.array([[-4, -4], [-4, 7]])\n    >>> r = np.array([[9, 3], [3, 1]])\n    >>> x = la.solve_discrete_are(a, b, q, r)\n    >>> x\n    array([[-4., -4.],\n           [-4.,  7.]])\n    >>> R = la.solve(r + b.T.dot(x).dot(b), b.T.dot(x).dot(a))\n    >>> np.allclose(a.T.dot(x).dot(a) - x - a.T.dot(x).dot(b).dot(R), -q)\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d5a0673bf264ea248ab999597c2dcca12fd430799127423ebccf40a93a723ee8",
            "fields": [
                {
                    "id": "dr9o75ph",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Square matrix",
                    "type": "(M, M) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l1rfg7jj",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input",
                    "type": "(M, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "psj4l53r",
                    "encoding": "",
                    "name": "q",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input",
                    "type": "(M, M) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i4aq8l3f",
                    "encoding": "",
                    "name": "r",
                    "value": "",
                    "defaultValue": "",
                    "description": "Square matrix",
                    "type": "(N, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xoqip3ph",
                    "encoding": "",
                    "name": "e",
                    "value": "",
                    "defaultValue": "",
                    "description": "Nonsingular square matrix",
                    "type": "(M, M) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7wmuufv_",
                    "encoding": "",
                    "name": "s",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input",
                    "type": "(M, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "powjn8ek",
                    "encoding": "",
                    "name": "balanced",
                    "value": true,
                    "defaultValue": true,
                    "description": "The boolean that indicates whether a balancing step is performed\non the data. The default is set to True.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xjbpy297",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.solve_discrete_are",
                    "defaultValue": "scipy.linalg.solve_discrete_are",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e63muxml",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v0t8yon3",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "jdqxb578",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_2r_6fov",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ggn7v6xs",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mq9vutu2",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "96fcsxpf",
            "name": "linalg.solve_discrete_lyapunov",
            "description": "Solves the discrete Lyapunov equation :math:`AXA^H - X + Q = 0`.\n    \n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a, q : (M, M) array_like\n        Square matrices corresponding to A and Q in the equation\n        above respectively. Must have the same shape.\n    method : {'direct', 'bilinear'}, optional\n        Type of solver.\n        \n        If not given, chosen to be ``direct`` if ``M`` is less than 10 and\n        ``bilinear`` otherwise.\n    \n    Returns\n    -------\n    x : ndarray\n        Solution to the discrete Lyapunov equation\n    \n    See Also\n    --------\n    \n    :func:`solve_continuous_lyapunov`\n        computes the solution to the continuous-time Lyapunov equation\n    \n    \n    Notes\n    -----\n    This section describes the available solvers that can be selected by the\n    'method' parameter. The default method is *direct* if ``M`` is less than 10\n    and ``bilinear`` otherwise.\n    \n    Method *direct* uses a direct analytical solution to the discrete Lyapunov\n    equation. The algorithm is given in, for example, [1]_. However, it requires\n    the linear solution of a system with dimension :math:`M^2` so that\n    performance degrades rapidly for even moderately sized matrices.\n    \n    Method *bilinear* uses a bilinear transformation to convert the discrete\n    Lyapunov equation to a continuous Lyapunov equation :math:`(BX+XB'=-C)`\n    where :math:`B=(A-I)(A+I)^{-1}` and\n    :math:`C=2(A' + I)^{-1} Q (A + I)^{-1}`. The continuous equation can be\n    efficiently solved since it is a special case of a Sylvester equation.\n    The transformation algorithm is from Popov (1964) as described in [2]_.\n    \n    .. versionadded:: 0.11.0\n    \n    References\n    ----------\n    .. [1] \"Lyapunov equation\", Wikipedia,\n       https://en.wikipedia.org/wiki/Lyapunov_equation#Discrete_time\n    .. [2] Gajic, Z., and M.T.J. Qureshi. 2008.\n       Lyapunov Matrix Equation in System Stability and Control.\n       Dover Books on Engineering Series. Dover Publications.\n    \n    Examples\n    --------\n    Given `a` and `q` solve for `x`:\n    \n    >>> import numpy as np\n    >>> from scipy import linalg\n    >>> a = np.array([[0.2, 0.5],[0.7, -0.9]])\n    >>> q = np.eye(2)\n    >>> x = linalg.solve_discrete_lyapunov(a, q)\n    >>> x\n    array([[ 0.70872893,  1.43518822],\n           [ 1.43518822, -2.4266315 ]])\n    >>> np.allclose(a.dot(x).dot(a.T)-x, -q)\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e01368c643656f23d3f0bf752c0df8b99dec62fcb34a0cde3a4514ff6b0a1931",
            "fields": [
                {
                    "id": "n81kbtu7",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b03dvs1x",
                    "encoding": "",
                    "name": "q",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ay_oxy1n",
                    "encoding": "",
                    "name": "method",
                    "value": "",
                    "defaultValue": "",
                    "description": "Type of solver.\n\nIf not given, chosen to be ``direct`` if ``M`` is less than 10 and\n``bilinear`` otherwise.",
                    "type": "{'direct', 'bilinear'}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_f166gay",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.solve_discrete_lyapunov",
                    "defaultValue": "scipy.linalg.solve_discrete_lyapunov",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "32zmcqgh",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "km5vfavl",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "22u5vtz1",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "txfcu1cz",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2sf22i5m",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ska85q5z",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "4vyhzjq1",
            "name": "solve_continuous_lyapunov",
            "description": "Solves the continuous Lyapunov equation :math:`AX + XA^H = Q`.\n    \n    Uses the Bartels-Stewart algorithm to find :math:`X`.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a : array_like\n        A square matrix\n    q : array_like\n        Right-hand side square matrix\n    \n    Returns\n    -------\n    x : ndarray\n        Solution to the continuous Lyapunov equation\n    \n    See Also\n    --------\n    \n    :func:`solve_discrete_lyapunov`\n        computes the solution to the discrete-time Lyapunov equation\n    :func:`solve_sylvester`\n        computes the solution to the Sylvester equation\n    \n    \n    Notes\n    -----\n    The continuous Lyapunov equation is a special form of the Sylvester\n    equation, hence this solver relies on LAPACK routine ?TRSYL.\n    \n    .. versionadded:: 0.11.0\n    \n    Examples\n    --------\n    Given `a` and `q` solve for `x`:\n    \n    >>> import numpy as np\n    >>> from scipy import linalg\n    >>> a = np.array([[-3, -2, 0], [-1, -1, 0], [0, -5, -1]])\n    >>> b = np.array([2, 4, -1])\n    >>> q = np.eye(3)\n    >>> x = linalg.solve_continuous_lyapunov(a, q)\n    >>> x\n    array([[ -0.75  ,   0.875 ,  -3.75  ],\n           [  0.875 ,  -1.375 ,   5.3125],\n           [ -3.75  ,   5.3125, -27.0625]])\n    >>> np.allclose(a.dot(x) + x.dot(a.T), q)\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9fecb6f733a805c15569731c55b79a8518b4be298befd15d6bdfb0765b2a9eaf",
            "fields": [
                {
                    "id": "1v7fq_dd",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "A square matrix",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iql59thm",
                    "encoding": "",
                    "name": "q",
                    "value": "",
                    "defaultValue": "",
                    "description": "Right-hand side square matrix",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zi6va7e7",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.solve_continuous_lyapunov",
                    "defaultValue": "scipy.linalg.solve_continuous_lyapunov",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o8nt0mgi",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zn1pyov1",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "cpxexg54",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v5_tvd09",
                    "encoding": "",
                    "name": "base_name",
                    "value": "",
                    "defaultValue": "",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qt6pp7nv",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rivxsn6u",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "pi0k3wlv",
            "name": "linalg.solve_sylvester",
            "description": "Computes a solution (X) to the Sylvester equation :math:`AX + XB = Q`.\n    \n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a : (M, M) array_like\n        Leading matrix of the Sylvester equation\n    b : (N, N) array_like\n        Trailing matrix of the Sylvester equation\n    q : (M, N) array_like\n        Right-hand side\n    \n    Returns\n    -------\n    x : (M, N) ndarray\n        The solution to the Sylvester equation.\n    \n    Raises\n    ------\n    LinAlgError\n        If solution was not found\n    \n    Notes\n    -----\n    Computes a solution to the Sylvester matrix equation via the Bartels-\n    Stewart algorithm. The A and B matrices first undergo Schur\n    decompositions. The resulting matrices are used to construct an\n    alternative Sylvester equation (``RY + YS^T = F``) where the R and S\n    matrices are in quasi-triangular form (or, when R, S or F are complex,\n    triangular form). The simplified equation is then solved using\n    ``*TRSYL`` from LAPACK directly.\n    \n    .. versionadded:: 0.11.0\n    \n    Examples\n    --------\n    Given `a`, `b`, and `q` solve for `x`:\n    \n    >>> import numpy as np\n    >>> from scipy import linalg\n    >>> a = np.array([[-3, -2, 0], [-1, -1, 3], [3, -5, -1]])\n    >>> b = np.array([[1]])\n    >>> q = np.array([[1],[2],[3]])\n    >>> x = linalg.solve_sylvester(a, b, q)\n    >>> x\n    array([[ 0.0625],\n           [-0.5625],\n           [ 0.6875]])\n    >>> np.allclose(a.dot(x) + x.dot(b), q)\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "62439618eb3129194e620a4dad06662737ecf43a200b4840d4ce86cd49db45f9",
            "fields": [
                {
                    "id": "gjylgo5c",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Leading matrix of the Sylvester equation",
                    "type": "(M, M) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8e931exq",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "Trailing matrix of the Sylvester equation",
                    "type": "(N, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lhhvzrfx",
                    "encoding": "",
                    "name": "q",
                    "value": "",
                    "defaultValue": "",
                    "description": "Right-hand side",
                    "type": "(M, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "no9wm77e",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.solve_sylvester",
                    "defaultValue": "scipy.linalg.solve_sylvester",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hi39tdhu",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hmc1nsg1",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "e1mzvy2m",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gxtl5vmr",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7p40hvgq",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "83ekgprj",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "6lor6dyn",
            "name": "linalg.solve_toeplitz",
            "description": "Solve the equation ``T @ x = b`` for ``x``, where ``T`` is a Toeplitz\n    matrix defined by `c_or_cr`.\n    \n    The Toeplitz matrix has constant diagonals, with ``c`` as its first column\n    and ``r`` as its first row. If ``r`` is not given, ``r == conjugate(c)`` is\n    assumed.\n    \n    .. warning::\n    \n        Beginning in SciPy 1.17, multidimensional input will be treated as a batch,\n        not ``ravel``\\ ed. To preserve the existing behavior, ``ravel`` arguments\n        before passing them to `solve_toeplitz`.\n    \n    Parameters\n    ----------\n    c_or_cr : array_like or tuple of (array_like, array_like)\n        The vector ``c``, or a tuple of arrays (``c``, ``r``). If not\n        supplied, ``r = conjugate(c)`` is assumed; in this case, if c[0] is\n        real, the Toeplitz matrix is Hermitian. r[0] is ignored; the first row\n        of the Toeplitz matrix is ``[c[0], r[1:]]``.\n    b : (M,) or (M, K) array_like\n        Right-hand side in ``T x = b``.\n    check_finite : bool, optional\n        Whether to check that the input matrices contain only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (result entirely NaNs) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    x : (M,) or (M, K) ndarray\n        The solution to the system ``T @ x = b``. Shape of return matches shape\n        of `b`.\n    \n    See Also\n    --------\n    toeplitz : Toeplitz matrix\n    \n    Notes\n    -----\n    The solution is computed using Levinson-Durbin recursion, which is faster\n    than generic least-squares methods, but can be less numerically stable.\n    \n    Examples\n    --------\n    Solve the Toeplitz system ``T @ x = b``, where::\n    \n            [ 1 -1 -2 -3]       [1]\n        T = [ 3  1 -1 -2]   b = [2]\n            [ 6  3  1 -1]       [2]\n            [10  6  3  1]       [5]\n    \n    To specify the Toeplitz matrix, only the first column and the first\n    row are needed.\n    \n    >>> import numpy as np\n    >>> c = np.array([1, 3, 6, 10])    # First column of T\n    >>> r = np.array([1, -1, -2, -3])  # First row of T\n    >>> b = np.array([1, 2, 2, 5])\n    \n    >>> from scipy.linalg import solve_toeplitz, toeplitz\n    >>> x = solve_toeplitz((c, r), b)\n    >>> x\n    array([ 1.66666667, -1.        , -2.66666667,  2.33333333])\n    \n    Check the result by creating the full Toeplitz matrix and\n    multiplying it by ``x``.  We should get `b`.\n    \n    >>> T = toeplitz(c, r)\n    >>> T.dot(x)\n    array([ 1.,  2.,  2.,  5.])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1de49d88b8aab1344a2ee76c73deac895542095534333d3d22f11fa538ae8d54",
            "fields": [
                {
                    "id": "wl2x7k30",
                    "encoding": "",
                    "name": "c_or_cr",
                    "value": "",
                    "defaultValue": "",
                    "description": "The vector ``c``, or a tuple of arrays (``c``, ``r``). If not\nsupplied, ``r = conjugate(c)`` is assumed; in this case, if c[0] is\nreal, the Toeplitz matrix is Hermitian. r[0] is ignored; the first row\nof the Toeplitz matrix is ``[c[0], r[1:]]``.",
                    "type": "arraylike or tuple of (arraylike, arraylike)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pb89m411",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "Right-hand side in ``T x = b``.",
                    "type": "(M,) or (M, K) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tda5nmpo",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrices contain only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(result entirely NaNs) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "51og7gcv",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.solve_toeplitz",
                    "defaultValue": "scipy.linalg.solve_toeplitz",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6y6ijzi7",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4gg7xzkb",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "1krrebtx",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e6hg4mn_",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hxcjd79g",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_le7rjwp",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ct18eg7z",
            "name": "linalg.solve_triangular",
            "description": "Solve the equation ``a @ x = b`` for ``x``, where `a` is a triangular matrix.\n    \n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a : (M, M) array_like\n        A triangular matrix\n    b : (M,) or (M, N) array_like\n        Right-hand side matrix in ``a x = b``\n    lower : bool, optional\n        Use only data contained in the lower triangle of `a`.\n        Default is to use upper triangle.\n    trans : {0, 1, 2, 'N', 'T', 'C'}, optional\n        Type of system to solve:\n        \n        ========  =========\n        trans     system\n        ========  =========\n        0 or 'N'  a x  = b\n        1 or 'T'  a^T x = b\n        2 or 'C'  a^H x = b\n        ========  =========\n    unit_diagonal : bool, optional\n        If True, diagonal elements of `a` are assumed to be 1 and\n        will not be referenced.\n    overwrite_b : bool, optional\n        Allow overwriting data in `b` (may enhance performance)\n    check_finite : bool, optional\n        Whether to check that the input matrices contain only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    x : (M,) or (M, N) ndarray\n        Solution to the system ``a x = b``.  Shape of return matches `b`.\n    \n    Raises\n    ------\n    LinAlgError\n        If `a` is singular\n    \n    Notes\n    -----\n    .. versionadded:: 0.9.0\n    \n    Examples\n    --------\n    Solve the lower triangular system a x = b, where::\n    \n             [3  0  0  0]       [4]\n        a =  [2  1  0  0]   b = [2]\n             [1  0  1  0]       [4]\n             [1  1  1  1]       [2]\n    \n    >>> import numpy as np\n    >>> from scipy.linalg import solve_triangular\n    >>> a = np.array([[3, 0, 0, 0], [2, 1, 0, 0], [1, 0, 1, 0], [1, 1, 1, 1]])\n    >>> b = np.array([4, 2, 4, 2])\n    >>> x = solve_triangular(a, b, lower=True)\n    >>> x\n    array([ 1.33333333, -0.66666667,  2.66666667, -1.33333333])\n    >>> a.dot(x)  # Check the result\n    array([ 4.,  2.,  4.,  2.])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c89e3534d72c761fef82ae203de2ac44470d4d017a6acd3cbd9e4c1acc108254",
            "fields": [
                {
                    "id": "rvn257zh",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "A triangular matrix",
                    "type": "(M, M) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fhqwum5h",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "Right-hand side matrix in ``a x = b``",
                    "type": "(M,) or (M, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ilp9gtzg",
                    "encoding": "",
                    "name": "trans",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Type of system to solve:\n\n========  =========\ntrans     system\n========  =========\n0 or 'N'  a x  = b\n1 or 'T'  a^T x = b\n2 or 'C'  a^H x = b\n========  =========",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y16fzg5n",
                    "encoding": "",
                    "name": "lower",
                    "value": false,
                    "defaultValue": false,
                    "description": "Use only data contained in the lower triangle of `a`.\nDefault is to use upper triangle.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "scj8e45t",
                    "encoding": "",
                    "name": "unit_diagonal",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, diagonal elements of `a` are assumed to be 1 and\nwill not be referenced.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v8kge0hx",
                    "encoding": "",
                    "name": "overwrite_b",
                    "value": false,
                    "defaultValue": false,
                    "description": "Allow overwriting data in `b` (may enhance performance)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qp_o7g34",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrices contain only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s59w3x41",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.solve_triangular",
                    "defaultValue": "scipy.linalg.solve_triangular",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n6n2lh06",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rrhbce29",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "o3jl2c3e",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "om0l1rpp",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e8ds1ofj",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3ql_lp5_",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "_7kcsa_0",
            "name": "linalg.solveh_banded",
            "description": "Solve the equation ``a @ x = b`` for ``x``,  where ``a`` is the \n    Hermitian positive-definite banded matrix defined by `ab`.\n    \n    Uses Thomas' Algorithm, which is more efficient than standard LU\n    factorization, but should only be used for Hermitian positive-definite\n    matrices.\n    \n    The matrix ``a`` is stored in `ab` either in lower diagonal or upper\n    diagonal ordered form:\n    \n        ab[u + i - j, j] == a[i,j]        (if upper form; i <= j)\n        ab[    i - j, j] == a[i,j]        (if lower form; i >= j)\n    \n    Example of `ab` (shape of ``a`` is (6, 6), number of upper diagonals,\n    ``u`` =2)::\n    \n        upper form:\n        *   *   a02 a13 a24 a35\n        *   a01 a12 a23 a34 a45\n        a00 a11 a22 a33 a44 a55\n    \n        lower form:\n        a00 a11 a22 a33 a44 a55\n        a10 a21 a32 a43 a54 *\n        a20 a31 a42 a53 *   *\n    \n    Cells marked with * are not used.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    ab : (``u`` + 1, M) array_like\n        Banded matrix\n    b : (M,) or (M, K) array_like\n        Right-hand side\n    overwrite_ab : bool, optional\n        Discard data in `ab` (may enhance performance)\n    overwrite_b : bool, optional\n        Discard data in `b` (may enhance performance)\n    lower : bool, optional\n        Is the matrix in the lower form. (Default is upper form)\n    check_finite : bool, optional\n        Whether to check that the input matrices contain only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    x : (M,) or (M, K) ndarray\n        The solution to the system ``a x = b``. Shape of return matches shape\n        of `b`.\n    \n    Notes\n    -----\n    In the case of a non-positive definite matrix ``a``, the solver\n    `solve_banded` may be used.\n    \n    Examples\n    --------\n    Solve the banded system ``A x = b``, where::\n    \n            [ 4  2 -1  0  0  0]       [1]\n            [ 2  5  2 -1  0  0]       [2]\n        A = [-1  2  6  2 -1  0]   b = [2]\n            [ 0 -1  2  7  2 -1]       [3]\n            [ 0  0 -1  2  8  2]       [3]\n            [ 0  0  0 -1  2  9]       [3]\n    \n    >>> import numpy as np\n    >>> from scipy.linalg import solveh_banded\n    \n    ``ab`` contains the main diagonal and the nonzero diagonals below the\n    main diagonal. That is, we use the lower form:\n    \n    >>> ab = np.array([[ 4,  5,  6,  7, 8, 9],\n    ...                [ 2,  2,  2,  2, 2, 0],\n    ...                [-1, -1, -1, -1, 0, 0]])\n    >>> b = np.array([1, 2, 2, 3, 3, 3])\n    >>> x = solveh_banded(ab, b, lower=True)\n    >>> x\n    array([ 0.03431373,  0.45938375,  0.05602241,  0.47759104,  0.17577031,\n            0.34733894])\n    \n    Solve the Hermitian banded system ``H x = b``, where::\n    \n            [ 8   2-1j   0     0  ]        [ 1  ]\n        H = [2+1j  5     1j    0  ]    b = [1+1j]\n            [ 0   -1j    9   -2-1j]        [1-2j]\n            [ 0    0   -2+1j   6  ]        [ 0  ]\n    \n    In this example, we put the upper diagonals in the array ``hb``:\n    \n    >>> hb = np.array([[0, 2-1j, 1j, -2-1j],\n    ...                [8,  5,    9,   6  ]])\n    >>> b = np.array([1, 1+1j, 1-2j, 0])\n    >>> x = solveh_banded(hb, b)\n    >>> x\n    array([ 0.07318536-0.02939412j,  0.11877624+0.17696461j,\n            0.10077984-0.23035393j, -0.00479904-0.09358128j])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "94ba65dfd5fa5fec625797809541a93408a5577bb5a48c6884e3a28df8315a5f",
            "fields": [
                {
                    "id": "eycmlo3j",
                    "encoding": "",
                    "name": "ab",
                    "value": "",
                    "defaultValue": "",
                    "description": "Banded matrix",
                    "type": "(u + 1, M) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8qr2vjaf",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "Right-hand side",
                    "type": "(M,) or (M, K) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tq3fv1ix",
                    "encoding": "",
                    "name": "overwrite_ab",
                    "value": false,
                    "defaultValue": false,
                    "description": "Discard data in `ab` (may enhance performance)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yegzlfal",
                    "encoding": "",
                    "name": "overwrite_b",
                    "value": false,
                    "defaultValue": false,
                    "description": "Discard data in `b` (may enhance performance)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sixwn3kf",
                    "encoding": "",
                    "name": "lower",
                    "value": false,
                    "defaultValue": false,
                    "description": "Is the matrix in the lower form. (Default is upper form)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3ihkt3sp",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrices contain only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w1sfe5cz",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.solveh_banded",
                    "defaultValue": "scipy.linalg.solveh_banded",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p0ixpojb",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "svmzfear",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "lav5so_m",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p_w9hxps",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a5ccw_y2",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iuw3f3oy",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "m9_w1h11",
            "name": "linalg.sqrtm",
            "description": "Compute, if exists, the matrix square root.\n    \n    The matrix square root of ``A`` is a matrix ``X`` such that ``X @ X = A``.\n    Every square matrix is not guaranteed to have a matrix square root, for\n    example, the array ``[[0, 1], [0, 0]]`` does not have a square root.\n    \n    Moreover, not every real matrix has a real square root. Hence, for\n    real-valued matrices the return type can be complex if, numerically, there\n    is an eigenvalue on the negative real axis.\n    \n    Parameters\n    ----------\n    A : ndarray\n        Input with last two dimensions are square ``(..., n, n)``.\n    disp : bool, optional\n        Print warning if error in the result is estimated large\n        instead of returning estimated error. (Default: True)\n    \n        .. deprecated:: 1.16.0\n            The `disp` argument is deprecated and will be\n            removed in SciPy 1.18.0. The previously returned error estimate\n            can be computed as ``norm(X @ X - A, 'fro')**2 / norm(A, 'fro')``\n    \n    blocksize : integer, optional\n    \n        .. deprecated:: 1.16.0\n            The `blocksize` argument is deprecated as it is unused by the algorithm\n            and will be removed in SciPy 1.18.0.\n    \n    Returns\n    -------\n    sqrtm : ndarray\n        Computed matrix squareroot of `A` with same size ``(..., n, n)``.\n    \n    errest : float\n        Frobenius norm of the estimated error, ||err||_F / ||A||_F. Only\n        returned, if ``disp`` is set to ``False``. This return argument will be\n        removed in version 1.20.0 and only the sqrtm result will be returned.\n    \n        .. deprecated:: 1.16.0\n    \n    Notes\n    -----\n    This function uses the Schur decomposition method to compute the matrix\n    square root following [1]_ and for real matrices [2]_. Moreover, note\n    that, there exist matrices that have square roots that are not polynomials\n    in ``A``. For a classical example from [2]_, the matrix satisfies::\n    \n            [ a, a**2 + 1]**2     [-1,  0]\n            [-1,       -a]     =  [ 0, -1]\n    \n    for any scalar ``a`` but it is not a polynomial in ``-I``. Thus, they will\n    not be found by this function.\n    \n    References\n    ----------\n    .. [1] Edvin Deadman, Nicholas J. Higham, Rui Ralha (2013)\n           \"Blocked Schur Algorithms for Computing the Matrix Square Root,\n           Lecture Notes in Computer Science, 7782. pp. 171-182.\n           :doi:`10.1016/0024-3795(87)90118-2`\n    .. [2] Nicholas J. Higham (1987) \"Computing real square roots of a real\n           matrix\", Linear Algebra and its Applications, 88/89:405-430.\n           :doi:`10.1016/0024-3795(87)90118-2`\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import sqrtm\n    >>> a = np.array([[1.0, 3.0], [1.0, 4.0]])\n    >>> r = sqrtm(a)\n    >>> r\n    array([[ 0.75592895,  1.13389342],\n           [ 0.37796447,  1.88982237]])\n    >>> r.dot(r)\n    array([[ 1.,  3.],\n           [ 1.,  4.]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d5ffa4184baaa05d0046dcbb4133b9215153dce0f81aa2e1c9e5bf239f214c49",
            "fields": [
                {
                    "id": "k71dmwim",
                    "encoding": "",
                    "name": "A",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input with last two dimensions are square ``(..., n, n)``.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dt53c6s5",
                    "encoding": "",
                    "name": "disp",
                    "value": "builtins.object",
                    "defaultValue": "builtins.object",
                    "description": "Print warning if error in the result is estimated large\ninstead of returning estimated error. (Default: True)\n\n.. deprecated:: 1.16.0\n    The `disp` argument is deprecated and will be\n    removed in SciPy 1.18.0. The previously returned error estimate\n    can be computed as ``norm(X @ X - A, 'fro')**2 / norm(A, 'fro')``",
                    "type": "builtins.object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zix0kkcg",
                    "encoding": "",
                    "name": "blocksize",
                    "value": "builtins.object",
                    "defaultValue": "builtins.object",
                    "description": ".. deprecated:: 1.16.0\n    The `blocksize` argument is deprecated as it is unused by the algorithm\n    and will be removed in SciPy 1.18.0.",
                    "type": "builtins.object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qbbthzff",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.sqrtm",
                    "defaultValue": "scipy.linalg.sqrtm",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "49cojl7r",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w_4ruu26",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "6hx6n1mf",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8spkjww0",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zbzzq2w5",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6rr_gswe",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "dzdm7bmz",
            "name": "linalg.subspace_angles",
            "description": "Compute the subspace angles between two matrices.\n    \n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    A : (M, N) array_like\n        The first input array.\n    B : (M, K) array_like\n        The second input array.\n    \n    Returns\n    -------\n    angles : ndarray, shape (min(N, K),)\n        The subspace angles between the column spaces of `A` and `B` in\n        descending order.\n    \n    See Also\n    --------\n    \n    :func:`orth`\n        ..\n    :func:`svd`\n        ..\n    \n    Notes\n    -----\n    This computes the subspace angles according to the formula\n    provided in [1]_. For equivalence with MATLAB and Octave behavior,\n    use ``angles[0]``.\n    \n    .. versionadded:: 1.0\n    \n    References\n    ----------\n    .. [1] Knyazev A, Argentati M (2002) Principal Angles between Subspaces\n           in an A-Based Scalar Product: Algorithms and Perturbation\n           Estimates. SIAM J. Sci. Comput. 23:2008-2040.\n    \n    Examples\n    --------\n    An Hadamard matrix, which has orthogonal columns, so we expect that\n    the suspace angle to be :math:`\\frac{\\pi}{2}`:\n    \n    >>> import numpy as np\n    >>> from scipy.linalg import hadamard, subspace_angles\n    >>> rng = np.random.default_rng()\n    >>> H = hadamard(4)\n    >>> print(H)\n    [[ 1  1  1  1]\n     [ 1 -1  1 -1]\n     [ 1  1 -1 -1]\n     [ 1 -1 -1  1]]\n    >>> np.rad2deg(subspace_angles(H[:, :2], H[:, 2:]))\n    array([ 90.,  90.])\n    \n    And the subspace angle of a matrix to itself should be zero:\n    \n    >>> subspace_angles(H[:, :2], H[:, :2]) <= 2 * np.finfo(float).eps\n    array([ True,  True], dtype=bool)\n    \n    The angles between non-orthogonal subspaces are in between these extremes:\n    \n    >>> x = rng.standard_normal((4, 3))\n    >>> np.rad2deg(subspace_angles(x[:, :2], x[:, [2]]))\n    array([ 55.832])  # random",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f9680a44b392a41a4b7f3f2b69ba071f12bf994c91fcf4e603dd8a14d4718b0b",
            "fields": [
                {
                    "id": "f_qu6dyg",
                    "encoding": "",
                    "name": "A",
                    "value": "",
                    "defaultValue": "",
                    "description": "The first input array.",
                    "type": "(M, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "osvkatn2",
                    "encoding": "",
                    "name": "B",
                    "value": "",
                    "defaultValue": "",
                    "description": "The second input array.",
                    "type": "(M, K) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2se9dnrt",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.subspace_angles",
                    "defaultValue": "scipy.linalg.subspace_angles",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1_60_dil",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tpj8knld",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "t17pbdo8",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5p9bb829",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j90rcfx1",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1l_a68ff",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "lj207jny",
            "name": "linalg.svd",
            "description": "Singular Value Decomposition.\n    \n    Factorizes the matrix `a` into two unitary matrices ``U`` and ``Vh``, and\n    a 1-D array ``s`` of singular values (real, non-negative) such that\n    ``a == U @ S @ Vh``, where ``S`` is a suitably shaped matrix of zeros with\n    main diagonal ``s``.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a : (M, N) array_like\n        Matrix to decompose.\n    full_matrices : bool, optional\n        If True (default), `U` and `Vh` are of shape ``(M, M)``, ``(N, N)``.\n        If False, the shapes are ``(M, K)`` and ``(K, N)``, where\n        ``K = min(M, N)``.\n    compute_uv : bool, optional\n        Whether to compute also ``U`` and ``Vh`` in addition to ``s``.\n        Default is True.\n    overwrite_a : bool, optional\n        Whether to overwrite `a`; may improve performance.\n        Default is False.\n    check_finite : bool, optional\n        Whether to check that the input matrix contains only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    lapack_driver : {'gesdd', 'gesvd'}, optional\n        Whether to use the more efficient divide-and-conquer approach\n        (``'gesdd'``) or general rectangular approach (``'gesvd'``)\n        to compute the SVD. MATLAB and Octave use the ``'gesvd'`` approach.\n        Default is ``'gesdd'``.\n    \n    Returns\n    -------\n    U : ndarray\n        Unitary matrix having left singular vectors as columns.\n        Of shape ``(M, M)`` or ``(M, K)``, depending on `full_matrices`.\n    s : ndarray\n        The singular values, sorted in non-increasing order.\n        Of shape (K,), with ``K = min(M, N)``.\n    Vh : ndarray\n        Unitary matrix having right singular vectors as rows.\n        Of shape ``(N, N)`` or ``(K, N)`` depending on `full_matrices`.\n    For ``compute_uv=False``, only ``s`` is returned.\n    \n    Raises\n    ------\n    LinAlgError\n        If SVD computation does not converge.\n    \n    See Also\n    --------\n    \n    :func:`svdvals`\n        Compute singular values of a matrix.\n    :func:`diagsvd`\n        Construct the Sigma matrix, given the vector s.\n    \n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy import linalg\n    >>> rng = np.random.default_rng()\n    >>> m, n = 9, 6\n    >>> a = rng.standard_normal((m, n)) + 1.j*rng.standard_normal((m, n))\n    >>> U, s, Vh = linalg.svd(a)\n    >>> U.shape,  s.shape, Vh.shape\n    ((9, 9), (6,), (6, 6))\n    \n    Reconstruct the original matrix from the decomposition:\n    \n    >>> sigma = np.zeros((m, n))\n    >>> for i in range(min(m, n)):\n    ...     sigma[i, i] = s[i]\n    >>> a1 = np.dot(U, np.dot(sigma, Vh))\n    >>> np.allclose(a, a1)\n    True\n    \n    Alternatively, use ``full_matrices=False`` (notice that the shape of\n    ``U`` is then ``(m, n)`` instead of ``(m, m)``):\n    \n    >>> U, s, Vh = linalg.svd(a, full_matrices=False)\n    >>> U.shape, s.shape, Vh.shape\n    ((9, 6), (6,), (6, 6))\n    >>> S = np.diag(s)\n    >>> np.allclose(a, np.dot(U, np.dot(S, Vh)))\n    True\n    \n    >>> s2 = linalg.svd(a, compute_uv=False)\n    >>> np.allclose(s, s2)\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "cafaaf843d7e189f39aa2276636cf788113fe2b53ec13f1c355fd1adb42700fd",
            "fields": [
                {
                    "id": "2gyd592g",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Matrix to decompose.",
                    "type": "(M, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r7im8cwj",
                    "encoding": "",
                    "name": "full_matrices",
                    "value": true,
                    "defaultValue": true,
                    "description": "If True (default), `U` and `Vh` are of shape ``(M, M)``, ``(N, N)``.\nIf False, the shapes are ``(M, K)`` and ``(K, N)``, where\n``K = min(M, N)``.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dz4x7dbh",
                    "encoding": "",
                    "name": "compute_uv",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to compute also ``U`` and ``Vh`` in addition to ``s``.\nDefault is True.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "115a80w5",
                    "encoding": "",
                    "name": "overwrite_a",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to overwrite `a`; may improve performance.\nDefault is False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_2xotti7",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrix contains only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dvy3may8",
                    "encoding": "",
                    "name": "lapack_driver",
                    "value": "gesdd",
                    "defaultValue": "gesdd",
                    "description": "Whether to use the more efficient divide-and-conquer approach\n(``'gesdd'``) or general rectangular approach (``'gesvd'``)\nto compute the SVD. MATLAB and Octave use the ``'gesvd'`` approach.\nDefault is ``'gesdd'``.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3loj58wj",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.svd",
                    "defaultValue": "scipy.linalg.svd",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xeo46oem",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "anz_78xi",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "tuuhsrt5",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nvpxz4oi",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nhdxbsoz",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iyi57fj5",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "za2kz9sg",
            "name": "linalg.svdvals",
            "description": "Compute singular values of a matrix.\n    \n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a : (M, N) array_like\n        Matrix to decompose.\n    overwrite_a : bool, optional\n        Whether to overwrite `a`; may improve performance.\n        Default is False.\n    check_finite : bool, optional\n        Whether to check that the input matrix contains only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    s : (min(M, N),) ndarray\n        The singular values, sorted in decreasing order.\n    \n    Raises\n    ------\n    LinAlgError\n        If SVD computation does not converge.\n    \n    See Also\n    --------\n    \n    :func:`svd`\n        Compute the full singular value decomposition of a matrix.\n    :func:`diagsvd`\n        Construct the Sigma matrix, given the vector s.\n    \n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import svdvals\n    >>> m = np.array([[1.0, 0.0],\n    ...               [2.0, 3.0],\n    ...               [1.0, 1.0],\n    ...               [0.0, 2.0],\n    ...               [1.0, 0.0]])\n    >>> svdvals(m)\n    array([ 4.28091555,  1.63516424])\n    \n    We can verify the maximum singular value of `m` by computing the maximum\n    length of `m.dot(u)` over all the unit vectors `u` in the (x,y) plane.\n    We approximate \"all\" the unit vectors with a large sample. Because\n    of linearity, we only need the unit vectors with angles in [0, pi].\n    \n    >>> t = np.linspace(0, np.pi, 2000)\n    >>> u = np.array([np.cos(t), np.sin(t)])\n    >>> np.linalg.norm(m.dot(u), axis=0).max()\n    4.2809152422538475\n    \n    `p` is a projection matrix with rank 1. With exact arithmetic,\n    its singular values would be [1, 0, 0, 0].\n    \n    >>> v = np.array([0.1, 0.3, 0.9, 0.3])\n    >>> p = np.outer(v, v)\n    >>> svdvals(p)\n    array([  1.00000000e+00,   2.02021698e-17,   1.56692500e-17,\n             8.15115104e-34])\n    \n    The singular values of an orthogonal matrix are all 1. Here, we\n    create a random orthogonal matrix by using the `rvs()` method of\n    `scipy.stats.ortho_group`.\n    \n    >>> from scipy.stats import ortho_group\n    >>> orth = ortho_group.rvs(4)\n    >>> svdvals(orth)\n    array([ 1.,  1.,  1.,  1.])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7b9ea988544f8d7fe95f780ddcaa35c50a12be646f2ff654aec5bc7e90062292",
            "fields": [
                {
                    "id": "m7dthn4m",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Matrix to decompose.",
                    "type": "(M, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nn9d23gt",
                    "encoding": "",
                    "name": "overwrite_a",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to overwrite `a`; may improve performance.\nDefault is False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cm7a2myv",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrix contains only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yfn_qwat",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.svdvals",
                    "defaultValue": "scipy.linalg.svdvals",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wp2_srn3",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vpz8o6z7",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "53fvyce1",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "is2bkaqb",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wgei5acy",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3s0udb2m",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "p6qb_6eh",
            "name": "linalg.tanhm",
            "description": "Compute the hyperbolic matrix tangent.\n    \n    This routine uses expm to compute the matrix exponentials.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    A : (N, N) array_like\n        Input array\n    \n    Returns\n    -------\n    tanhm : (N, N) ndarray\n        Hyperbolic matrix tangent of `A`\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import tanhm, sinhm, coshm\n    >>> a = np.array([[1.0, 3.0], [1.0, 4.0]])\n    >>> t = tanhm(a)\n    >>> t\n    array([[ 0.3428582 ,  0.51987926],\n           [ 0.17329309,  0.86273746]])\n    \n    Verify tanhm(a) = sinhm(a).dot(inv(coshm(a)))\n    \n    >>> s = sinhm(a)\n    >>> c = coshm(a)\n    >>> t - s.dot(np.linalg.inv(c))\n    array([[  2.72004641e-15,   4.55191440e-15],\n           [  0.00000000e+00,  -5.55111512e-16]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c3cb0627b80ec1a3f756c9d9a6bdf4d34691e9f3f1cfb93355f67971236087b4",
            "fields": [
                {
                    "id": "690bwe_8",
                    "encoding": "",
                    "name": "A",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array",
                    "type": "(N, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9zr589rf",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.tanhm",
                    "defaultValue": "scipy.linalg.tanhm",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d80x8l0g",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "22uv8d4m",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "33amq8ie",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b535g19m",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "empi09zy",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xmoofrl0",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "n3czm_2p",
            "name": "linalg.tanm",
            "description": "Compute the matrix tangent.\n    \n    This routine uses expm to compute the matrix exponentials.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    A : (N, N) array_like\n        Input array.\n    \n    Returns\n    -------\n    tanm : (N, N) ndarray\n        Matrix tangent of `A`\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import tanm, sinm, cosm\n    >>> a = np.array([[1.0, 3.0], [1.0, 4.0]])\n    >>> t = tanm(a)\n    >>> t\n    array([[ -2.00876993,  -8.41880636],\n           [ -2.80626879, -10.42757629]])\n    \n    Verify tanm(a) = sinm(a).dot(inv(cosm(a)))\n    \n    >>> s = sinm(a)\n    >>> c = cosm(a)\n    >>> s.dot(np.linalg.inv(c))\n    array([[ -2.00876993,  -8.41880636],\n           [ -2.80626879, -10.42757629]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "87f610aa4e50f9b78084d43b7e6509dda5bd0db28b7d707a066d900f8d5b7240",
            "fields": [
                {
                    "id": "bl5xtdc7",
                    "encoding": "",
                    "name": "A",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array.",
                    "type": "(N, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9r6975k_",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.tanm",
                    "defaultValue": "scipy.linalg.tanm",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l1x4revd",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uq8uyksx",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "sf3dgyva",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kkmv4bnb",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d26kn61t",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t2cfqxfy",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "zb4tq6bq",
            "name": "linalg.toeplitz",
            "description": "Construct a Toeplitz matrix.\n    \n    The Toeplitz matrix has constant diagonals, with c as its first column\n    and r as its first row. If r is not given, ``r == conjugate(c)`` is\n    assumed.\n    \n    Parameters\n    ----------\n    c : array_like\n        First column of the matrix.\n    r : array_like, optional\n        First row of the matrix. If None, ``r = conjugate(c)`` is assumed;\n        in this case, if c[0] is real, the result is a Hermitian matrix.\n        r[0] is ignored; the first row of the returned matrix is\n        ``[c[0], r[1:]]``.\n    \n        .. warning::\n    \n            Beginning in SciPy 1.17, multidimensional input will be treated as a batch,\n            not ``ravel``\\ ed. To preserve the existing behavior, ``ravel`` arguments\n            before passing them to `toeplitz`.\n    \n    Returns\n    -------\n    A : (len(c), len(r)) ndarray\n        The Toeplitz matrix. Dtype is the same as ``(c[0] + r[0]).dtype``.\n    \n    See Also\n    --------\n    circulant : circulant matrix\n    hankel : Hankel matrix\n    solve_toeplitz : Solve a Toeplitz system.\n    \n    Notes\n    -----\n    The behavior when `c` or `r` is a scalar, or when `c` is complex and\n    `r` is None, was changed in version 0.8.0. The behavior in previous\n    versions was undocumented and is no longer supported.\n    \n    Examples\n    --------\n    >>> from scipy.linalg import toeplitz\n    >>> toeplitz([1,2,3], [1,4,5,6])\n    array([[1, 4, 5, 6],\n           [2, 1, 4, 5],\n           [3, 2, 1, 4]])\n    >>> toeplitz([1.0, 2+3j, 4-1j])\n    array([[ 1.+0.j,  2.-3.j,  4.+1.j],\n           [ 2.+3.j,  1.+0.j,  2.-3.j],\n           [ 4.-1.j,  2.+3.j,  1.+0.j]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "48b7b69fc3101042727e23bce4142edcef58b35a59dd9547f6d77c1d5406846f",
            "fields": [
                {
                    "id": "_yf6ioot",
                    "encoding": "",
                    "name": "c",
                    "value": "",
                    "defaultValue": "",
                    "description": "First column of the matrix.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g1l2404p",
                    "encoding": "",
                    "name": "r",
                    "value": "",
                    "defaultValue": "",
                    "description": "First row of the matrix. If None, ``r = conjugate(c)`` is assumed;\nin this case, if c[0] is real, the result is a Hermitian matrix.\nr[0] is ignored; the first row of the returned matrix is\n``[c[0], r[1:]]``.\n\n.. warning::\n\n    Beginning in SciPy 1.17, multidimensional input will be treated as a batch,\n    not ``ravel``\\ ed. To preserve the existing behavior, ``ravel`` arguments\n    before passing them to `toeplitz`.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8femdbdu",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.toeplitz",
                    "defaultValue": "scipy.linalg.toeplitz",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "03nvgec1",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n4spsguj",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ilsbvfbo",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v84uq277",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg",
                    "defaultValue": "scipy.linalg",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "brhsex0v",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fuhtrghc",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "loldcvnh",
            "name": "basic.det",
            "description": "Compute the determinant of a matrix\n    \n    The determinant is a scalar that is a function of the associated square\n    matrix coefficients. The determinant value is zero for singular matrices.\n    \n    Parameters\n    ----------\n    a : (..., M, M) array_like\n        Input array to compute determinants for.\n    overwrite_a : bool, optional\n        Allow overwriting data in a (may enhance performance).\n    check_finite : bool, optional\n        Whether to check that the input matrix contains only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    det : (...) float or complex\n        Determinant of `a`. For stacked arrays, a scalar is returned for each\n        (m, m) slice in the last two dimensions of the input. For example, an\n        input of shape (p, q, m, m) will produce a result of shape (p, q). If\n        all dimensions are 1 a scalar is returned regardless of ndim.\n    \n    Notes\n    -----\n    The determinant is computed by performing an LU factorization of the\n    input with LAPACK routine 'getrf', and then calculating the product of\n    diagonal entries of the U factor.\n    \n    Even if the input array is single precision (float32 or complex64), the\n    result will be returned in double precision (float64 or complex128) to\n    prevent overflows.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy import linalg\n    >>> a = np.array([[1,2,3], [4,5,6], [7,8,9]])  # A singular matrix\n    >>> linalg.det(a)\n    0.0\n    >>> b = np.array([[0,2,3], [4,5,6], [7,8,9]])\n    >>> linalg.det(b)\n    3.0\n    >>> # An array with the shape (3, 2, 2, 2)\n    >>> c = np.array([[[[1., 2.], [3., 4.]],\n    ...                [[5., 6.], [7., 8.]]],\n    ...               [[[9., 10.], [11., 12.]],\n    ...                [[13., 14.], [15., 16.]]],\n    ...               [[[17., 18.], [19., 20.]],\n    ...                [[21., 22.], [23., 24.]]]])\n    >>> linalg.det(c)  # The resulting shape is (3, 2)\n    array([[-2., -2.],\n           [-2., -2.],\n           [-2., -2.]])\n    >>> linalg.det(c[0, 0])  # Confirm the (0, 0) slice, [[1, 2], [3, 4]]\n    -2.0",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "512efc4b9a720e11805efdc77a4edab49cef564cd93d03cc7eb5f5c46fa35ef6",
            "fields": [
                {
                    "id": "gbany2zj",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array to compute determinants for.",
                    "type": "(..., M, M) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8g0zt2kl",
                    "encoding": "",
                    "name": "overwrite_a",
                    "value": false,
                    "defaultValue": false,
                    "description": "Allow overwriting data in a (may enhance performance).",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j0p1p07u",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrix contains only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4ybpcp9q",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.basic.det",
                    "defaultValue": "scipy.linalg.basic.det",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6t3qvqqj",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bejhm188",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "l_fs2j1d",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ig17xw9f",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.basic",
                    "defaultValue": "scipy.linalg.basic",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "818nypt1",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vlhv73zl",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "vnmimacs",
            "name": "basic.get_lapack_funcs",
            "description": "Return available LAPACK function objects from names.\n    \n    Arrays are used to determine the optimal prefix of LAPACK routines.\n    \n    Parameters\n    ----------\n    names : str or sequence of str\n        Name(s) of LAPACK functions without type prefix.\n    \n    arrays : sequence of ndarrays, optional\n        Arrays can be given to determine optimal prefix of LAPACK\n        routines. If not given, double-precision routines will be\n        used, otherwise the most generic type in arrays will be used.\n    \n    dtype : str or dtype, optional\n        Data-type specifier. Not used if `arrays` is non-empty.\n    \n    ilp64 : {True, False, 'preferred'}, optional\n        Whether to return ILP64 routine variant.\n        Choosing 'preferred' returns ILP64 routine if available, and\n        otherwise the 32-bit routine. Default: False\n    \n    Returns\n    -------\n    funcs : list\n        List containing the found function(s).\n    \n    Notes\n    -----\n    This routine automatically chooses between Fortran/C\n    interfaces. Fortran code is used whenever possible for arrays with\n    column major order. In all other cases, C code is preferred.\n    \n    In LAPACK, the naming convention is that all functions start with a\n    type prefix, which depends on the type of the principal\n    matrix. These can be one of {'s', 'd', 'c', 'z'} for the NumPy\n    types {float32, float64, complex64, complex128} respectively, and\n    are stored in attribute ``typecode`` of the returned functions.\n    \n    Examples\n    --------\n    Suppose we would like to use '?lange' routine which computes the selected\n    norm of an array. We pass our array in order to get the correct 'lange'\n    flavor.\n    \n    >>> import numpy as np\n    >>> import scipy.linalg as LA\n    >>> rng = np.random.default_rng()\n    \n    >>> a = rng.random((3,2))\n    >>> x_lange = LA.get_lapack_funcs('lange', (a,))\n    >>> x_lange.typecode\n    'd'\n    >>> x_lange = LA.get_lapack_funcs('lange',(a*1j,))\n    >>> x_lange.typecode\n    'z'\n    \n    Several LAPACK routines work best when its internal WORK array has\n    the optimal size (big enough for fast computation and small enough to\n    avoid waste of memory). This size is determined also by a dedicated query\n    to the function which is often wrapped as a standalone function and\n    commonly denoted as ``###_lwork``. Below is an example for ``?sysv``\n    \n    >>> a = rng.random((1000, 1000))\n    >>> b = rng.random((1000, 1)) * 1j\n    >>> # We pick up zsysv and zsysv_lwork due to b array\n    ... xsysv, xlwork = LA.get_lapack_funcs(('sysv', 'sysv_lwork'), (a, b))\n    >>> opt_lwork, _ = xlwork(a.shape[0])  # returns a complex for 'z' prefix\n    >>> udut, ipiv, x, info = xsysv(a, b, lwork=int(opt_lwork.real))",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "fa306dec80fc10c819f88969a84f5f91587e876eb2288bfca77a7d547ce93b2f",
            "fields": [
                {
                    "id": "o90j04cw",
                    "encoding": "",
                    "name": "names",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name(s) of LAPACK functions without type prefix.",
                    "type": "str or sequence of str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mwk0gf93",
                    "encoding": "",
                    "name": "arrays",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Arrays can be given to determine optimal prefix of LAPACK\nroutines. If not given, double-precision routines will be\nused, otherwise the most generic type in arrays will be used.",
                    "type": "builtins.tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ln9xi14w",
                    "encoding": "",
                    "name": "dtype",
                    "value": "",
                    "defaultValue": "",
                    "description": "Data-type specifier. Not used if `arrays` is non-empty.",
                    "type": "str or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dxwvetum",
                    "encoding": "",
                    "name": "ilp64",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to return ILP64 routine variant.\nChoosing 'preferred' returns ILP64 routine if available, and\notherwise the 32-bit routine. Default: False",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k3m0mv9f",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.basic.get_lapack_funcs",
                    "defaultValue": "scipy.linalg.basic.get_lapack_funcs",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2qbsjxkm",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aypzw_lc",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "gxavx5q8",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zmieixkz",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.basic",
                    "defaultValue": "scipy.linalg.basic",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iesja_jk",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j5_mrduq",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "5huhy0kq",
            "name": "basic.inv",
            "description": "Compute the inverse of a matrix.\n    \n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a : array_like\n        Square matrix to be inverted.\n    overwrite_a : bool, optional\n        Discard data in `a` (may improve performance). Default is False.\n    check_finite : bool, optional\n        Whether to check that the input matrix contains only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    ainv : ndarray\n        Inverse of the matrix `a`.\n    \n    Raises\n    ------\n    LinAlgError\n        If `a` is singular.\n    ValueError\n        If `a` is not square, or not 2D.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy import linalg\n    >>> a = np.array([[1., 2.], [3., 4.]])\n    >>> linalg.inv(a)\n    array([[-2. ,  1. ],\n           [ 1.5, -0.5]])\n    >>> np.dot(a, linalg.inv(a))\n    array([[ 1.,  0.],\n           [ 0.,  1.]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "282e05585c85d6a2c1c8bc2d5c0a337d6391e87b4edd4f9d8b7c9b9f4b5717dd",
            "fields": [
                {
                    "id": "4n4le44t",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Square matrix to be inverted.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yccp3_9z",
                    "encoding": "",
                    "name": "overwrite_a",
                    "value": false,
                    "defaultValue": false,
                    "description": "Discard data in `a` (may improve performance). Default is False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_pisbirc",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrix contains only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mhz72g1r",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.basic.inv",
                    "defaultValue": "scipy.linalg.basic.inv",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jza5m2qf",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dds2841z",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "y63oabwk",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "plubhs34",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.basic",
                    "defaultValue": "scipy.linalg.basic",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "osv75ikd",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "78kki4qz",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "pgjgg_6z",
            "name": "basic.lstsq",
            "description": "Compute least-squares solution to the equation ``a @ x = b``.\n    \n    Compute a vector x such that the 2-norm ``|b - A x|`` is minimized.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a : (M, N) array_like\n        Left-hand side array\n    b : (M,) or (M, K) array_like\n        Right hand side array\n    cond : float, optional\n        Cutoff for 'small' singular values; used to determine effective\n        rank of a. Singular values smaller than\n        ``cond * largest_singular_value`` are considered zero.\n    overwrite_a : bool, optional\n        Discard data in `a` (may enhance performance). Default is False.\n    overwrite_b : bool, optional\n        Discard data in `b` (may enhance performance). Default is False.\n    check_finite : bool, optional\n        Whether to check that the input matrices contain only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    lapack_driver : str, optional\n        Which LAPACK driver is used to solve the least-squares problem.\n        Options are ``'gelsd'``, ``'gelsy'``, ``'gelss'``. Default\n        (``'gelsd'``) is a good choice.  However, ``'gelsy'`` can be slightly\n        faster on many problems.  ``'gelss'`` was used historically.  It is\n        generally slow but uses less memory.\n        \n        .. versionadded:: 0.17.0\n    \n    Returns\n    -------\n    x : (N,) or (N, K) ndarray\n        Least-squares solution.\n    residues : (K,) ndarray or float\n        Square of the 2-norm for each column in ``b - a x``, if ``M > N`` and\n        ``rank(A) == n`` (returns a scalar if ``b`` is 1-D). Otherwise a\n        (0,)-shaped array is returned.\n    rank : int\n        Effective rank of `a`.\n    s : (min(M, N),) ndarray or None\n        Singular values of `a`. The condition number of ``a`` is\n        ``s[0] / s[-1]``.\n    \n    Raises\n    ------\n    LinAlgError\n        If computation does not converge.\n    ValueError\n        When parameters are not compatible.\n    \n    See Also\n    --------\n    \n    :func:`scipy.optimize.nnls`\n        linear least squares with non-negativity constraint\n    \n    \n    Notes\n    -----\n    When ``'gelsy'`` is used as a driver, `residues` is set to a (0,)-shaped\n    array and `s` is always ``None``.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import lstsq\n    >>> import matplotlib.pyplot as plt\n    \n    Suppose we have the following data:\n    \n    >>> x = np.array([1, 2.5, 3.5, 4, 5, 7, 8.5])\n    >>> y = np.array([0.3, 1.1, 1.5, 2.0, 3.2, 6.6, 8.6])\n    \n    We want to fit a quadratic polynomial of the form ``y = a + b*x**2``\n    to this data.  We first form the \"design matrix\" M, with a constant\n    column of 1s and a column containing ``x**2``:\n    \n    >>> M = x[:, np.newaxis]**[0, 2]\n    >>> M\n    array([[  1.  ,   1.  ],\n           [  1.  ,   6.25],\n           [  1.  ,  12.25],\n           [  1.  ,  16.  ],\n           [  1.  ,  25.  ],\n           [  1.  ,  49.  ],\n           [  1.  ,  72.25]])\n    \n    We want to find the least-squares solution to ``M.dot(p) = y``,\n    where ``p`` is a vector with length 2 that holds the parameters\n    ``a`` and ``b``.\n    \n    >>> p, res, rnk, s = lstsq(M, y)\n    >>> p\n    array([ 0.20925829,  0.12013861])\n    \n    Plot the data and the fitted curve.\n    \n    >>> plt.plot(x, y, 'o', label='data')\n    >>> xx = np.linspace(0, 9, 101)\n    >>> yy = p[0] + p[1]*xx**2\n    >>> plt.plot(xx, yy, label='least squares fit, $y = a + bx^2$')\n    >>> plt.xlabel('x')\n    >>> plt.ylabel('y')\n    >>> plt.legend(framealpha=1, shadow=True)\n    >>> plt.grid(alpha=0.25)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "db7b7a3c18d1cd671fa9f01f7c2a4d9acad13915a7f5dde0c75b4480f661d02f",
            "fields": [
                {
                    "id": "6tfdoxvs",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Left-hand side array",
                    "type": "(M, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o5cfcceh",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "Right hand side array",
                    "type": "(M,) or (M, K) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3rp63ewj",
                    "encoding": "",
                    "name": "cond",
                    "value": "",
                    "defaultValue": "",
                    "description": "Cutoff for 'small' singular values; used to determine effective\nrank of a. Singular values smaller than\n``cond * largest_singular_value`` are considered zero.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w4v5xz_k",
                    "encoding": "",
                    "name": "overwrite_a",
                    "value": false,
                    "defaultValue": false,
                    "description": "Discard data in `a` (may enhance performance). Default is False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xyegjian",
                    "encoding": "",
                    "name": "overwrite_b",
                    "value": false,
                    "defaultValue": false,
                    "description": "Discard data in `b` (may enhance performance). Default is False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ag88q9_a",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrices contain only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6a0gfitx",
                    "encoding": "",
                    "name": "lapack_driver",
                    "value": "",
                    "defaultValue": "",
                    "description": "Which LAPACK driver is used to solve the least-squares problem.\nOptions are ``'gelsd'``, ``'gelsy'``, ``'gelss'``. Default\n(``'gelsd'``) is a good choice.  However, ``'gelsy'`` can be slightly\nfaster on many problems.  ``'gelss'`` was used historically.  It is\ngenerally slow but uses less memory.\n\n.. versionadded:: 0.17.0",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z7w84o4q",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.basic.lstsq",
                    "defaultValue": "scipy.linalg.basic.lstsq",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ragugso3",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iwvbxqw6",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "lhrks6z2",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_ahxinbg",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.basic",
                    "defaultValue": "scipy.linalg.basic",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3w9y4jx2",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sn4rhfql",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ve24j47b",
            "name": "basic.matmul_toeplitz",
            "description": "Efficient Toeplitz Matrix-Matrix Multiplication using FFT\n    \n    This function returns the matrix multiplication between a Toeplitz\n    matrix and a dense matrix.\n    \n    The Toeplitz matrix has constant diagonals, with c as its first column\n    and r as its first row. If r is not given, ``r == conjugate(c)`` is\n    assumed.\n    \n    .. warning::\n    \n        Beginning in SciPy 1.17, multidimensional input will be treated as a batch,\n        not ``ravel``\\ ed. To preserve the existing behavior, ``ravel`` arguments\n        before passing them to `matmul_toeplitz`.\n    \n    Parameters\n    ----------\n    c_or_cr : array_like or tuple of (array_like, array_like)\n        The vector ``c``, or a tuple of arrays (``c``, ``r``). If not\n        supplied, ``r = conjugate(c)`` is assumed; in this case, if c[0] is\n        real, the Toeplitz matrix is Hermitian. r[0] is ignored; the first row\n        of the Toeplitz matrix is ``[c[0], r[1:]]``.\n    x : (M,) or (M, K) array_like\n        Matrix with which to multiply.\n    check_finite : bool, optional\n        Whether to check that the input matrices contain only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (result entirely NaNs) if the inputs do contain infinities or NaNs.\n    workers : int, optional\n        To pass to scipy.fft.fft and ifft. Maximum number of workers to use\n        for parallel computation. If negative, the value wraps around from\n        ``os.cpu_count()``. See scipy.fft.fft for more details.\n    \n    Returns\n    -------\n    T @ x : (M,) or (M, K) ndarray\n        The result of the matrix multiplication ``T @ x``. Shape of return\n        matches shape of `x`.\n    \n    See Also\n    --------\n    toeplitz : Toeplitz matrix\n    solve_toeplitz : Solve a Toeplitz system using Levinson Recursion\n    \n    Notes\n    -----\n    The Toeplitz matrix is embedded in a circulant matrix and the FFT is used\n    to efficiently calculate the matrix-matrix product.\n    \n    Because the computation is based on the FFT, integer inputs will\n    result in floating point outputs.  This is unlike NumPy's `matmul`,\n    which preserves the data type of the input.\n    \n    This is partly based on the implementation that can be found in [1]_,\n    licensed under the MIT license. More information about the method can be\n    found in reference [2]_. References [3]_ and [4]_ have more reference\n    implementations in Python.\n    \n    .. versionadded:: 1.6.0\n    \n    References\n    ----------\n    .. [1] Jacob R Gardner, Geoff Pleiss, David Bindel, Kilian\n       Q Weinberger, Andrew Gordon Wilson, \"GPyTorch: Blackbox Matrix-Matrix\n       Gaussian Process Inference with GPU Acceleration\" with contributions\n       from Max Balandat and Ruihan Wu. Available online:\n       https://github.com/cornellius-gp/gpytorch\n    \n    .. [2] J. Demmel, P. Koev, and X. Li, \"A Brief Survey of Direct Linear\n       Solvers\". In Z. Bai, J. Demmel, J. Dongarra, A. Ruhe, and H. van der\n       Vorst, editors. Templates for the Solution of Algebraic Eigenvalue\n       Problems: A Practical Guide. SIAM, Philadelphia, 2000. Available at:\n       http://www.netlib.org/utk/people/JackDongarra/etemplates/node384.html\n    \n    .. [3] R. Scheibler, E. Bezzam, I. Dokmanic, Pyroomacoustics: A Python\n       package for audio room simulations and array processing algorithms,\n       Proc. IEEE ICASSP, Calgary, CA, 2018.\n       https://github.com/LCAV/pyroomacoustics/blob/pypi-release/\n       pyroomacoustics/adaptive/util.py\n    \n    .. [4] Marano S, Edwards B, Ferrari G and Fah D (2017), \"Fitting\n       Earthquake Spectra: Colored Noise and Incomplete Data\", Bulletin of\n       the Seismological Society of America., January, 2017. Vol. 107(1),\n       pp. 276-291.\n    \n    Examples\n    --------\n    Multiply the Toeplitz matrix T with matrix x::\n    \n            [ 1 -1 -2 -3]       [1 10]\n        T = [ 3  1 -1 -2]   x = [2 11]\n            [ 6  3  1 -1]       [2 11]\n            [10  6  3  1]       [5 19]\n    \n    To specify the Toeplitz matrix, only the first column and the first\n    row are needed.\n    \n    >>> import numpy as np\n    >>> c = np.array([1, 3, 6, 10])    # First column of T\n    >>> r = np.array([1, -1, -2, -3])  # First row of T\n    >>> x = np.array([[1, 10], [2, 11], [2, 11], [5, 19]])\n    \n    >>> from scipy.linalg import toeplitz, matmul_toeplitz\n    >>> matmul_toeplitz((c, r), x)\n    array([[-20., -80.],\n           [ -7.,  -8.],\n           [  9.,  85.],\n           [ 33., 218.]])\n    \n    Check the result by creating the full Toeplitz matrix and\n    multiplying it by ``x``.\n    \n    >>> toeplitz(c, r) @ x\n    array([[-20, -80],\n           [ -7,  -8],\n           [  9,  85],\n           [ 33, 218]])\n    \n    The full matrix is never formed explicitly, so this routine\n    is suitable for very large Toeplitz matrices.\n    \n    >>> n = 1000000\n    >>> matmul_toeplitz([1] + [0]*(n-1), np.ones(n))\n    array([1., 1., 1., ..., 1., 1., 1.], shape=(1000000,))",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "742f2182da25f055069efec720250a1aad32767a572b870d3d5ea2c1a7ba7bee",
            "fields": [
                {
                    "id": "k4cbzvay",
                    "encoding": "",
                    "name": "c_or_cr",
                    "value": "",
                    "defaultValue": "",
                    "description": "The vector ``c``, or a tuple of arrays (``c``, ``r``). If not\nsupplied, ``r = conjugate(c)`` is assumed; in this case, if c[0] is\nreal, the Toeplitz matrix is Hermitian. r[0] is ignored; the first row\nof the Toeplitz matrix is ``[c[0], r[1:]]``.",
                    "type": "arraylike or tuple of (arraylike, arraylike)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vovk78jf",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "Matrix with which to multiply.",
                    "type": "(M,) or (M, K) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5v6_ot96",
                    "encoding": "",
                    "name": "check_finite",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to check that the input matrices contain only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(result entirely NaNs) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fcfwsnxa",
                    "encoding": "",
                    "name": "workers",
                    "value": "",
                    "defaultValue": "",
                    "description": "To pass to scipy.fft.fft and ifft. Maximum number of workers to use\nfor parallel computation. If negative, the value wraps around from\n``os.cpu_count()``. See scipy.fft.fft for more details.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d5glo9d1",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.basic.matmul_toeplitz",
                    "defaultValue": "scipy.linalg.basic.matmul_toeplitz",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p3evn_lj",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "__xqezdy",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "eyfuu1q7",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "42qnw8ri",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.basic",
                    "defaultValue": "scipy.linalg.basic",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v5crl8xt",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "civb716j",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "xepr502z",
            "name": "basic.matrix_balance",
            "description": "Compute a diagonal similarity transformation for row/column balancing.\n    \n    The balancing tries to equalize the row and column 1-norms by applying\n    a similarity transformation such that the magnitude variation of the\n    matrix entries is reflected to the scaling matrices.\n    \n    Moreover, if enabled, the matrix is first permuted to isolate the upper\n    triangular parts of the matrix and, again if scaling is also enabled,\n    only the remaining subblocks are subjected to scaling.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    A : (n, n) array_like\n        Square data matrix for the balancing.\n    permute : bool, optional\n        The selector to define whether permutation of A is also performed\n        prior to scaling.\n    scale : bool, optional\n        The selector to turn on and off the scaling. If False, the matrix\n        will not be scaled.\n    separate : bool, optional\n        This switches from returning a full matrix of the transformation\n        to a tuple of two separate 1-D permutation and scaling arrays.\n    overwrite_a : bool, optional\n        This is passed to xGEBAL directly. Essentially, overwrites the result\n        to the data. It might increase the space efficiency. See LAPACK manual\n        for details. This is False by default.\n    \n    Returns\n    -------\n    B : (n, n) ndarray\n        Balanced matrix\n    T : (n, n) ndarray\n        A possibly permuted diagonal matrix whose nonzero entries are\n        integer powers of 2 to avoid numerical truncation errors.\n    scale, perm : (n,) ndarray\n        If ``separate`` keyword is set to True then instead of the array\n        ``T`` above, the scaling and the permutation vectors are given\n        separately as a tuple without allocating the full array ``T``.\n    \n    Notes\n    -----\n    The balanced matrix satisfies the following equality\n    \n    .. math::\n        B = T^{-1} A T\n    \n    The scaling coefficients are approximated to the nearest power of 2\n    to avoid round-off errors.\n    \n    This algorithm is particularly useful for eigenvalue and matrix\n    decompositions and in many cases it is already called by various\n    LAPACK routines.\n    \n    The algorithm is based on the well-known technique of [1]_ and has\n    been modified to account for special cases. See [2]_ for details\n    which have been implemented since LAPACK v3.5.0. Before this version\n    there are corner cases where balancing can actually worsen the\n    conditioning. See [3]_ for such examples.\n    \n    The code is a wrapper around LAPACK's xGEBAL routine family for matrix\n    balancing.\n    \n    .. versionadded:: 0.19.0\n    \n    References\n    ----------\n    .. [1] B.N. Parlett and C. Reinsch, \"Balancing a Matrix for\n       Calculation of Eigenvalues and Eigenvectors\", Numerische Mathematik,\n       Vol.13(4), 1969, :doi:`10.1007/BF02165404`\n    .. [2] R. James, J. Langou, B.R. Lowery, \"On matrix balancing and\n       eigenvector computation\", 2014, :arxiv:`1401.5766`\n    .. [3] D.S. Watkins. A case where balancing is harmful.\n       Electron. Trans. Numer. Anal, Vol.23, 2006.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy import linalg\n    >>> x = np.array([[1,2,0], [9,1,0.01], [1,2,10*np.pi]])\n    \n    >>> y, permscale = linalg.matrix_balance(x)\n    >>> np.abs(x).sum(axis=0) / np.abs(x).sum(axis=1)\n    array([ 3.66666667,  0.4995005 ,  0.91312162])\n    \n    >>> np.abs(y).sum(axis=0) / np.abs(y).sum(axis=1)\n    array([ 1.2       ,  1.27041742,  0.92658316])  # may vary\n    \n    >>> permscale  # only powers of 2 (0.5 == 2^(-1))\n    array([[  0.5,   0. ,  0. ],  # may vary\n           [  0. ,   1. ,  0. ],\n           [  0. ,   0. ,  1. ]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a42162fc650fdbdedb6e588a6adef857bbbf7844e13067f64ed7f47ebb31679f",
            "fields": [
                {
                    "id": "_x1_xtno",
                    "encoding": "",
                    "name": "A",
                    "value": "",
                    "defaultValue": "",
                    "description": "Square data matrix for the balancing.",
                    "type": "(n, n) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h1lsdzwd",
                    "encoding": "",
                    "name": "permute",
                    "value": true,
                    "defaultValue": true,
                    "description": "The selector to define whether permutation of A is also performed\nprior to scaling.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8pp1lebk",
                    "encoding": "",
                    "name": "scale",
                    "value": true,
                    "defaultValue": true,
                    "description": "The selector to turn on and off the scaling. If False, the matrix\nwill not be scaled.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qoj_m1gy",
                    "encoding": "",
                    "name": "separate",
                    "value": false,
                    "defaultValue": false,
                    "description": "This switches from returning a full matrix of the transformation\nto a tuple of two separate 1-D permutation and scaling arrays.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a0ghdsab",
                    "encoding": "",
                    "name": "overwrite_a",
                    "value": false,
                    "defaultValue": false,
                    "description": "This is passed to xGEBAL directly. Essentially, overwrites the result\nto the data. It might increase the space efficiency. See LAPACK manual\nfor details. This is False by default.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g4gtm_zx",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.basic.matrix_balance",
                    "defaultValue": "scipy.linalg.basic.matrix_balance",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iscf8mzm",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ajb54azq",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "rd0f5dqx",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mpv_mtkl",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.basic",
                    "defaultValue": "scipy.linalg.basic",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z1mbpi5u",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kl0ph2hz",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "161jtxnv",
            "name": "basic.pinv",
            "description": "Compute the (Moore-Penrose) pseudo-inverse of a matrix.\n    \n    Calculate a generalized inverse of a matrix using its\n    singular-value decomposition ``U @ S @ V`` in the economy mode and picking\n    up only the columns/rows that are associated with significant singular\n    values.\n    \n    If ``s`` is the maximum singular value of ``a``, then the\n    significance cut-off value is determined by ``atol + rtol * s``. Any\n    singular value below this value is assumed insignificant.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a : (M, N) array_like\n        Matrix to be pseudo-inverted.\n    atol : float, optional\n        Absolute threshold term, default value is 0.\n        \n        .. versionadded:: 1.7.0\n    rtol : float, optional\n        Relative threshold term, default value is ``max(M, N) * eps`` where\n        ``eps`` is the machine precision value of the datatype of ``a``.\n        \n        .. versionadded:: 1.7.0\n    return_rank : bool, optional\n        If True, return the effective rank of the matrix.\n    check_finite : bool, optional\n        Whether to check that the input matrix contains only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    B : (N, M) ndarray\n        The pseudo-inverse of matrix `a`.\n    rank : int\n        The effective rank of the matrix. Returned if `return_rank` is True.\n    \n    Raises\n    ------\n    LinAlgError\n        If SVD computation does not converge.\n    \n    See Also\n    --------\n    \n    :func:`pinvh`\n        Moore-Penrose pseudoinverse of a hermitian matrix.\n    \n    \n    Notes\n    -----\n    If ``A`` is invertible then the Moore-Penrose pseudoinverse is exactly\n    the inverse of ``A`` [1]_. If ``A`` is not invertible then the\n    Moore-Penrose pseudoinverse computes the ``x`` solution to ``Ax = b`` such\n    that ``||Ax - b||`` is minimized [1]_.\n    \n    References\n    ----------\n    .. [1] Penrose, R. (1956). On best approximate solutions of linear matrix\n           equations. Mathematical Proceedings of the Cambridge Philosophical\n           Society, 52(1), 17-19. doi:10.1017/S0305004100030929\n    \n    Examples\n    --------\n    Given an ``m x n`` matrix ``A`` and an ``n x m`` matrix ``B`` the four\n    Moore-Penrose conditions are:\n    \n    1. ``ABA = A`` (``B`` is a generalized inverse of ``A``),\n    2. ``BAB = B`` (``A`` is a generalized inverse of ``B``),\n    3. ``(AB)* = AB`` (``AB`` is hermitian),\n    4. ``(BA)* = BA`` (``BA`` is hermitian) [1]_.\n    \n    Here, ``A*`` denotes the conjugate transpose. The Moore-Penrose\n    pseudoinverse is a unique ``B`` that satisfies all four of these\n    conditions and exists for any ``A``. Note that, unlike the standard\n    matrix inverse, ``A`` does not have to be a square matrix or have\n    linearly independent columns/rows.\n    \n    As an example, we can calculate the Moore-Penrose pseudoinverse of a\n    random non-square matrix and verify it satisfies the four conditions.\n    \n    >>> import numpy as np\n    >>> from scipy import linalg\n    >>> rng = np.random.default_rng()\n    >>> A = rng.standard_normal((9, 6))\n    >>> B = linalg.pinv(A)\n    >>> np.allclose(A @ B @ A, A)  # Condition 1\n    True\n    >>> np.allclose(B @ A @ B, B)  # Condition 2\n    True\n    >>> np.allclose((A @ B).conj().T, A @ B)  # Condition 3\n    True\n    >>> np.allclose((B @ A).conj().T, B @ A)  # Condition 4\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "02cc56ba13a4053126e694a73793099c05effe9645c8fafe7dd69b783a7881b9",
            "fields": [
                {
                    "id": "illiu_l3",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Matrix to be pseudo-inverted.",
                    "type": "(M, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ydr137wj",
                    "encoding": "",
                    "name": "atol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Absolute threshold term, default value is 0.\n\n.. versionadded:: 1.7.0",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e9wyn18f",
                    "encoding": "",
                    "name": "rtol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Relative threshold term, default value is ``max(M, N) * eps`` where\n``eps`` is the machine precision value of the datatype of ``a``.\n\n.. versionadded:: 1.7.0",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "thjft1hs",
                    "encoding": "",
                    "name": "return_rank",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, return the effective rank of the matrix.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "by4pz_c6",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrix contains only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zf5a4iip",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.basic.pinv",
                    "defaultValue": "scipy.linalg.basic.pinv",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "174q033j",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x3z76grc",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "gtfg3s6f",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kb90rvys",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.basic",
                    "defaultValue": "scipy.linalg.basic",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pr5y6d8h",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o6zkk6i1",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "y8ybebam",
            "name": "basic.pinvh",
            "description": "Compute the (Moore-Penrose) pseudo-inverse of a Hermitian matrix.\n    \n    Calculate a generalized inverse of a complex Hermitian/real symmetric\n    matrix using its eigenvalue decomposition and including all eigenvalues\n    with 'large' absolute value.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a : (N, N) array_like\n        Real symmetric or complex hermetian matrix to be pseudo-inverted\n    atol : float, optional\n        Absolute threshold term, default value is 0.\n        \n        .. versionadded:: 1.7.0\n    rtol : float, optional\n        Relative threshold term, default value is ``N * eps`` where\n        ``eps`` is the machine precision value of the datatype of ``a``.\n        \n        .. versionadded:: 1.7.0\n    lower : bool, optional\n        Whether the pertinent array data is taken from the lower or upper\n        triangle of `a`. (Default: lower)\n    return_rank : bool, optional\n        If True, return the effective rank of the matrix.\n    check_finite : bool, optional\n        Whether to check that the input matrix contains only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    B : (N, N) ndarray\n        The pseudo-inverse of matrix `a`.\n    rank : int\n        The effective rank of the matrix.  Returned if `return_rank` is True.\n    \n    Raises\n    ------\n    LinAlgError\n        If eigenvalue algorithm does not converge.\n    \n    See Also\n    --------\n    \n    :func:`pinv`\n        Moore-Penrose pseudoinverse of a matrix.\n    \n    \n    Examples\n    --------\n    For a more detailed example see `pinv`.\n    \n    >>> import numpy as np\n    >>> from scipy.linalg import pinvh\n    >>> rng = np.random.default_rng()\n    >>> a = rng.standard_normal((9, 6))\n    >>> a = np.dot(a, a.T)\n    >>> B = pinvh(a)\n    >>> np.allclose(a, a @ B @ a)\n    True\n    >>> np.allclose(B, B @ a @ B)\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1312e0a9a2430fa439480f35f3d2c617706932c38f84cfb807f19196e0ad5582",
            "fields": [
                {
                    "id": "12rrnjot",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Real symmetric or complex hermetian matrix to be pseudo-inverted",
                    "type": "(N, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "25rhrpsj",
                    "encoding": "",
                    "name": "atol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Absolute threshold term, default value is 0.\n\n.. versionadded:: 1.7.0",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3seswp5g",
                    "encoding": "",
                    "name": "rtol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Relative threshold term, default value is ``N * eps`` where\n``eps`` is the machine precision value of the datatype of ``a``.\n\n.. versionadded:: 1.7.0",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hkjiec8i",
                    "encoding": "",
                    "name": "lower",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether the pertinent array data is taken from the lower or upper\ntriangle of `a`. (Default: lower)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xolpeo00",
                    "encoding": "",
                    "name": "return_rank",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, return the effective rank of the matrix.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xo2b1o9q",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrix contains only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kz9iet8z",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.basic.pinvh",
                    "defaultValue": "scipy.linalg.basic.pinvh",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tvf3zovj",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b5p9f103",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "2_owobs1",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u200jf6l",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.basic",
                    "defaultValue": "scipy.linalg.basic",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "asgapuuh",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u_e9gmj_",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "2gzcoqt4",
            "name": "basic.solve",
            "description": "Solve the equation ``a @ x = b`` for  ``x``,\n    where `a` is a square matrix.\n    \n    If the data matrix is known to be a particular type then supplying the\n    corresponding string to ``assume_a`` key chooses the dedicated solver.\n    The available options are\n    \n    =============================  ================================\n     diagonal                       'diagonal'\n     tridiagonal                    'tridiagonal'\n     banded                         'banded'\n     upper triangular               'upper triangular'\n     lower triangular               'lower triangular'\n     symmetric                      'symmetric' (or 'sym')\n     hermitian                      'hermitian' (or 'her')\n     symmetric positive definite    'positive definite' (or 'pos')\n     general                        'general' (or 'gen')\n    =============================  ================================\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a : (N, N) array_like\n        Square input data\n    b : (N, NRHS) array_like\n        Input data for the right hand side.\n    lower : bool, default: False\n        Ignored unless ``assume_a`` is one of ``'sym'``, ``'her'``, or ``'pos'``.\n        If True, the calculation uses only the data in the lower triangle of `a`;\n        entries above the diagonal are ignored. If False (default), the\n        calculation uses only the data in the upper triangle of `a`; entries\n        below the diagonal are ignored.\n    overwrite_a : bool, default: False\n        Allow overwriting data in `a` (may enhance performance).\n    overwrite_b : bool, default: False\n        Allow overwriting data in `b` (may enhance performance).\n    check_finite : bool, default: True\n        Whether to check that the input matrices contain only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    assume_a : str, optional\n        Valid entries are described above.\n        If omitted or ``None``, checks are performed to identify structure so the\n        appropriate solver can be called.\n    transposed : bool, default: False\n        If True, solve ``a.T @ x == b``. Raises `NotImplementedError`\n        for complex `a`.\n    \n    Returns\n    -------\n    x : (N, NRHS) ndarray\n        The solution array.\n    \n    Raises\n    ------\n    ValueError\n        If size mismatches detected or input a is not square.\n    LinAlgError\n        If the computation fails because of matrix singularity.\n    LinAlgWarning\n        If an ill-conditioned input a is detected.\n    NotImplementedError\n        If transposed is True and input a is a complex matrix.\n    \n    Notes\n    -----\n    If the input b matrix is a 1-D array with N elements, when supplied\n    together with an NxN input a, it is assumed as a valid column vector\n    despite the apparent size mismatch. This is compatible with the\n    numpy.dot() behavior and the returned result is still 1-D array.\n    \n    The general, symmetric, Hermitian and positive definite solutions are\n    obtained via calling ?GESV, ?SYSV, ?HESV, and ?POSV routines of\n    LAPACK respectively.\n    \n    The datatype of the arrays define which solver is called regardless\n    of the values. In other words, even when the complex array entries have\n    precisely zero imaginary parts, the complex solver will be called based\n    on the data type of the array.\n    \n    Examples\n    --------\n    Given `a` and `b`, solve for `x`:\n    \n    >>> import numpy as np\n    >>> a = np.array([[3, 2, 0], [1, -1, 0], [0, 5, 1]])\n    >>> b = np.array([2, 4, -1])\n    >>> from scipy import linalg\n    >>> x = linalg.solve(a, b)\n    >>> x\n    array([ 2., -2.,  9.])\n    >>> np.dot(a, x) == b\n    array([ True,  True,  True], dtype=bool)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "850840da034255465656fc4c42ea42da49fdf74c2b4c910f2a2825dd1804c6ea",
            "fields": [
                {
                    "id": "yzusqr36",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Square input data",
                    "type": "(N, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v2cbdna0",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input data for the right hand side.",
                    "type": "(N, NRHS) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "38x_vzqq",
                    "encoding": "",
                    "name": "lower",
                    "value": false,
                    "defaultValue": false,
                    "description": "Ignored unless ``assume_a`` is one of ``'sym'``, ``'her'``, or ``'pos'``.\nIf True, the calculation uses only the data in the lower triangle of `a`;\nentries above the diagonal are ignored. If False (default), the\ncalculation uses only the data in the upper triangle of `a`; entries\nbelow the diagonal are ignored.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yu8diiw9",
                    "encoding": "",
                    "name": "overwrite_a",
                    "value": false,
                    "defaultValue": false,
                    "description": "Allow overwriting data in `a` (may enhance performance).",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hgw2nejk",
                    "encoding": "",
                    "name": "overwrite_b",
                    "value": false,
                    "defaultValue": false,
                    "description": "Allow overwriting data in `b` (may enhance performance).",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "810ecbq5",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrices contain only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1gqh6pmf",
                    "encoding": "",
                    "name": "assume_a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Valid entries are described above.\nIf omitted or ``None``, checks are performed to identify structure so the\nappropriate solver can be called.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zjri_bhv",
                    "encoding": "",
                    "name": "transposed",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, solve ``a.T @ x == b``. Raises `NotImplementedError`\nfor complex `a`.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rsbtq02f",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.basic.solve",
                    "defaultValue": "scipy.linalg.basic.solve",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k1ypalai",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a0wnthkv",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "_c02j44_",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bz_kwp8y",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.basic",
                    "defaultValue": "scipy.linalg.basic",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_nkcvsyd",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x9jmu5s3",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ffbp3_ek",
            "name": "basic.solve_banded",
            "description": "Solve the equation ``a @ x = b`` for ``x``, where ``a`` is the banded matrix\n    defined by `ab`.\n    \n    The matrix a is stored in `ab` using the matrix diagonal ordered form::\n    \n        ab[u + i - j, j] == a[i,j]\n    \n    Example of `ab` (shape of a is (6,6), `u` =1, `l` =2)::\n    \n        *    a01  a12  a23  a34  a45\n        a00  a11  a22  a33  a44  a55\n        a10  a21  a32  a43  a54   *\n        a20  a31  a42  a53   *    *\n    \n    Parameters\n    ----------\n    (l, u) : (integer, integer)\n        Number of non-zero lower and upper diagonals\n    ab : (`l` + `u` + 1, M) array_like\n        Banded matrix\n    b : (M,) or (M, K) array_like\n        Right-hand side\n    overwrite_ab : bool, optional\n        Discard data in `ab` (may enhance performance)\n    overwrite_b : bool, optional\n        Discard data in `b` (may enhance performance)\n    check_finite : bool, optional\n        Whether to check that the input matrices contain only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    x : (M,) or (M, K) ndarray\n        The solution to the system a x = b. Returned shape depends on the\n        shape of `b`.\n    \n    Examples\n    --------\n    Solve the banded system a x = b, where::\n    \n            [5  2 -1  0  0]       [0]\n            [1  4  2 -1  0]       [1]\n        a = [0  1  3  2 -1]   b = [2]\n            [0  0  1  2  2]       [2]\n            [0  0  0  1  1]       [3]\n    \n    There is one nonzero diagonal below the main diagonal (l = 1), and\n    two above (u = 2). The diagonal banded form of the matrix is::\n    \n             [*  * -1 -1 -1]\n        ab = [*  2  2  2  2]\n             [5  4  3  2  1]\n             [1  1  1  1  *]\n    \n    >>> import numpy as np\n    >>> from scipy.linalg import solve_banded\n    >>> ab = np.array([[0,  0, -1, -1, -1],\n    ...                [0,  2,  2,  2,  2],\n    ...                [5,  4,  3,  2,  1],\n    ...                [1,  1,  1,  1,  0]])\n    >>> b = np.array([0, 1, 2, 2, 3])\n    >>> x = solve_banded((1, 2), ab, b)\n    >>> x\n    array([-2.37288136,  3.93220339, -4.        ,  4.3559322 , -1.3559322 ])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "823f789c2bf981248ea1262dbfc2316668b118db85a44c9b29a3dfdeb76c9a48",
            "fields": [
                {
                    "id": "j23v5ao5",
                    "encoding": "",
                    "name": "l_and_u",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_ql3dcms",
                    "encoding": "",
                    "name": "ab",
                    "value": "",
                    "defaultValue": "",
                    "description": "Banded matrix",
                    "type": "(l + u + 1, M) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uiqquhbi",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "Right-hand side",
                    "type": "(M,) or (M, K) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zkqwy_k1",
                    "encoding": "",
                    "name": "overwrite_ab",
                    "value": false,
                    "defaultValue": false,
                    "description": "Discard data in `ab` (may enhance performance)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oj91o817",
                    "encoding": "",
                    "name": "overwrite_b",
                    "value": false,
                    "defaultValue": false,
                    "description": "Discard data in `b` (may enhance performance)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6ejpadzy",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrices contain only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c_wifwps",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.basic.solve_banded",
                    "defaultValue": "scipy.linalg.basic.solve_banded",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6acu0zx1",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mj3pelts",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "hscao1w0",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yohmx_3l",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.basic",
                    "defaultValue": "scipy.linalg.basic",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_5x2fb4e",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pyqh57y6",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "p8jh0n4y",
            "name": "basic.solve_circulant",
            "description": "Solve the equation ``C @ x = b`` for ``x``, where ``C`` is a\n    circulant matrix defined by `c`.\n    \n    `C` is the circulant matrix associated with the vector `c`.\n    \n    The system is solved by doing division in Fourier space. The\n    calculation is::\n    \n        x = ifft(fft(b) / fft(c))\n    \n    where `fft` and `ifft` are the fast Fourier transform and its inverse,\n    respectively. For a large vector `c`, this is *much* faster than\n    solving the system with the full circulant matrix.\n    \n    Parameters\n    ----------\n    c : array_like\n        The coefficients of the circulant matrix.\n    b : array_like\n        Right-hand side matrix in ``a x = b``.\n    singular : str, optional\n        This argument controls how a near singular circulant matrix is\n        handled.  If `singular` is \"raise\" and the circulant matrix is\n        near singular, a `LinAlgError` is raised. If `singular` is\n        \"lstsq\", the least squares solution is returned. Default is \"raise\".\n    tol : float, optional\n        If any eigenvalue of the circulant matrix has an absolute value\n        that is less than or equal to `tol`, the matrix is considered to be\n        near singular. If not given, `tol` is set to::\n    \n            tol = abs_eigs.max() * abs_eigs.size * np.finfo(np.float64).eps\n    \n        where `abs_eigs` is the array of absolute values of the eigenvalues\n        of the circulant matrix.\n    caxis : int\n        When `c` has dimension greater than 1, it is viewed as a collection\n        of circulant vectors. In this case, `caxis` is the axis of `c` that\n        holds the vectors of circulant coefficients.\n    baxis : int\n        When `b` has dimension greater than 1, it is viewed as a collection\n        of vectors. In this case, `baxis` is the axis of `b` that holds the\n        right-hand side vectors.\n    outaxis : int\n        When `c` or `b` are multidimensional, the value returned by\n        `solve_circulant` is multidimensional. In this case, `outaxis` is\n        the axis of the result that holds the solution vectors.\n    \n    Returns\n    -------\n    x : ndarray\n        Solution to the system ``C x = b``.\n    \n    Raises\n    ------\n    LinAlgError\n        If the circulant matrix associated with `c` is near singular.\n    \n    See Also\n    --------\n    circulant : circulant matrix\n    \n    Notes\n    -----\n    For a 1-D vector `c` with length `m`, and an array `b`\n    with shape ``(m, ...)``,\n    \n        solve_circulant(c, b)\n    \n    returns the same result as\n    \n        solve(circulant(c), b)\n    \n    where `solve` and `circulant` are from `scipy.linalg`.\n    \n    .. versionadded:: 0.16.0\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import solve_circulant, solve, circulant, lstsq\n    \n    >>> c = np.array([2, 2, 4])\n    >>> b = np.array([1, 2, 3])\n    >>> solve_circulant(c, b)\n    array([ 0.75, -0.25,  0.25])\n    \n    Compare that result to solving the system with `scipy.linalg.solve`:\n    \n    >>> solve(circulant(c), b)\n    array([ 0.75, -0.25,  0.25])\n    \n    A singular example:\n    \n    >>> c = np.array([1, 1, 0, 0])\n    >>> b = np.array([1, 2, 3, 4])\n    \n    Calling ``solve_circulant(c, b)`` will raise a `LinAlgError`.  For the\n    least square solution, use the option ``singular='lstsq'``:\n    \n    >>> solve_circulant(c, b, singular='lstsq')\n    array([ 0.25,  1.25,  2.25,  1.25])\n    \n    Compare to `scipy.linalg.lstsq`:\n    \n    >>> x, resid, rnk, s = lstsq(circulant(c), b)\n    >>> x\n    array([ 0.25,  1.25,  2.25,  1.25])\n    \n    A broadcasting example:\n    \n    Suppose we have the vectors of two circulant matrices stored in an array\n    with shape (2, 5), and three `b` vectors stored in an array with shape\n    (3, 5).  For example,\n    \n    >>> c = np.array([[1.5, 2, 3, 0, 0], [1, 1, 4, 3, 2]])\n    >>> b = np.arange(15).reshape(-1, 5)\n    \n    We want to solve all combinations of circulant matrices and `b` vectors,\n    with the result stored in an array with shape (2, 3, 5). When we\n    disregard the axes of `c` and `b` that hold the vectors of coefficients,\n    the shapes of the collections are (2,) and (3,), respectively, which are\n    not compatible for broadcasting. To have a broadcast result with shape\n    (2, 3), we add a trivial dimension to `c`: ``c[:, np.newaxis, :]`` has\n    shape (2, 1, 5). The last dimension holds the coefficients of the\n    circulant matrices, so when we call `solve_circulant`, we can use the\n    default ``caxis=-1``. The coefficients of the `b` vectors are in the last\n    dimension of the array `b`, so we use ``baxis=-1``. If we use the\n    default `outaxis`, the result will have shape (5, 2, 3), so we'll use\n    ``outaxis=-1`` to put the solution vectors in the last dimension.\n    \n    >>> x = solve_circulant(c[:, np.newaxis, :], b, baxis=-1, outaxis=-1)\n    >>> x.shape\n    (2, 3, 5)\n    >>> np.set_printoptions(precision=3)  # For compact output of numbers.\n    >>> x\n    array([[[-0.118,  0.22 ,  1.277, -0.142,  0.302],\n            [ 0.651,  0.989,  2.046,  0.627,  1.072],\n            [ 1.42 ,  1.758,  2.816,  1.396,  1.841]],\n           [[ 0.401,  0.304,  0.694, -0.867,  0.377],\n            [ 0.856,  0.758,  1.149, -0.412,  0.831],\n            [ 1.31 ,  1.213,  1.603,  0.042,  1.286]]])\n    \n    Check by solving one pair of `c` and `b` vectors (cf. ``x[1, 1, :]``):\n    \n    >>> solve_circulant(c[1], b[1, :])\n    array([ 0.856,  0.758,  1.149, -0.412,  0.831])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "83640358a889ab7ed96ca264abf5d53263830033a0d039ccef0e59f3b9fbc631",
            "fields": [
                {
                    "id": "fcfpru73",
                    "encoding": "",
                    "name": "c",
                    "value": "",
                    "defaultValue": "",
                    "description": "The coefficients of the circulant matrix.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "37umyo5r",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "Right-hand side matrix in ``a x = b``.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hz58zgjf",
                    "encoding": "",
                    "name": "singular",
                    "value": "raise",
                    "defaultValue": "raise",
                    "description": "This argument controls how a near singular circulant matrix is\nhandled.  If `singular` is \"raise\" and the circulant matrix is\nnear singular, a `LinAlgError` is raised. If `singular` is\n\"lstsq\", the least squares solution is returned. Default is \"raise\".",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yzfonpgo",
                    "encoding": "",
                    "name": "tol",
                    "value": "",
                    "defaultValue": "",
                    "description": "If any eigenvalue of the circulant matrix has an absolute value\nthat is less than or equal to `tol`, the matrix is considered to be\nnear singular. If not given, `tol` is set to::\n\n    tol = abs_eigs.max() * abs_eigs.size * np.finfo(np.float64).eps\n\nwhere `abs_eigs` is the array of absolute values of the eigenvalues\nof the circulant matrix.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nn7nr0vu",
                    "encoding": "",
                    "name": "caxis",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "When `c` has dimension greater than 1, it is viewed as a collection\nof circulant vectors. In this case, `caxis` is the axis of `c` that\nholds the vectors of circulant coefficients.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "isqekcv5",
                    "encoding": "",
                    "name": "baxis",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "When `b` has dimension greater than 1, it is viewed as a collection\nof vectors. In this case, `baxis` is the axis of `b` that holds the\nright-hand side vectors.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ip_a6x20",
                    "encoding": "",
                    "name": "outaxis",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "When `c` or `b` are multidimensional, the value returned by\n`solve_circulant` is multidimensional. In this case, `outaxis` is\nthe axis of the result that holds the solution vectors.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mn6v_g6c",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.basic.solve_circulant",
                    "defaultValue": "scipy.linalg.basic.solve_circulant",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qdnc60ul",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jl9957cc",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "1hrmc_m4",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6m_nkmvk",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.basic",
                    "defaultValue": "scipy.linalg.basic",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "apyqzm84",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t6r79qxy",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "fs090a4q",
            "name": "basic.solve_toeplitz",
            "description": "Solve the equation ``T @ x = b`` for ``x``, where ``T`` is a Toeplitz\n    matrix defined by `c_or_cr`.\n    \n    The Toeplitz matrix has constant diagonals, with ``c`` as its first column\n    and ``r`` as its first row. If ``r`` is not given, ``r == conjugate(c)`` is\n    assumed.\n    \n    .. warning::\n    \n        Beginning in SciPy 1.17, multidimensional input will be treated as a batch,\n        not ``ravel``\\ ed. To preserve the existing behavior, ``ravel`` arguments\n        before passing them to `solve_toeplitz`.\n    \n    Parameters\n    ----------\n    c_or_cr : array_like or tuple of (array_like, array_like)\n        The vector ``c``, or a tuple of arrays (``c``, ``r``). If not\n        supplied, ``r = conjugate(c)`` is assumed; in this case, if c[0] is\n        real, the Toeplitz matrix is Hermitian. r[0] is ignored; the first row\n        of the Toeplitz matrix is ``[c[0], r[1:]]``.\n    b : (M,) or (M, K) array_like\n        Right-hand side in ``T x = b``.\n    check_finite : bool, optional\n        Whether to check that the input matrices contain only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (result entirely NaNs) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    x : (M,) or (M, K) ndarray\n        The solution to the system ``T @ x = b``. Shape of return matches shape\n        of `b`.\n    \n    See Also\n    --------\n    toeplitz : Toeplitz matrix\n    \n    Notes\n    -----\n    The solution is computed using Levinson-Durbin recursion, which is faster\n    than generic least-squares methods, but can be less numerically stable.\n    \n    Examples\n    --------\n    Solve the Toeplitz system ``T @ x = b``, where::\n    \n            [ 1 -1 -2 -3]       [1]\n        T = [ 3  1 -1 -2]   b = [2]\n            [ 6  3  1 -1]       [2]\n            [10  6  3  1]       [5]\n    \n    To specify the Toeplitz matrix, only the first column and the first\n    row are needed.\n    \n    >>> import numpy as np\n    >>> c = np.array([1, 3, 6, 10])    # First column of T\n    >>> r = np.array([1, -1, -2, -3])  # First row of T\n    >>> b = np.array([1, 2, 2, 5])\n    \n    >>> from scipy.linalg import solve_toeplitz, toeplitz\n    >>> x = solve_toeplitz((c, r), b)\n    >>> x\n    array([ 1.66666667, -1.        , -2.66666667,  2.33333333])\n    \n    Check the result by creating the full Toeplitz matrix and\n    multiplying it by ``x``.  We should get `b`.\n    \n    >>> T = toeplitz(c, r)\n    >>> T.dot(x)\n    array([ 1.,  2.,  2.,  5.])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7184eb339e38b513d236a8002cc82fac4226d70111d60a1645c7a02b4079d923",
            "fields": [
                {
                    "id": "ikm4xsz8",
                    "encoding": "",
                    "name": "c_or_cr",
                    "value": "",
                    "defaultValue": "",
                    "description": "The vector ``c``, or a tuple of arrays (``c``, ``r``). If not\nsupplied, ``r = conjugate(c)`` is assumed; in this case, if c[0] is\nreal, the Toeplitz matrix is Hermitian. r[0] is ignored; the first row\nof the Toeplitz matrix is ``[c[0], r[1:]]``.",
                    "type": "arraylike or tuple of (arraylike, arraylike)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fgq9tywx",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "Right-hand side in ``T x = b``.",
                    "type": "(M,) or (M, K) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tihewgby",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrices contain only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(result entirely NaNs) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4ajh1wah",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.basic.solve_toeplitz",
                    "defaultValue": "scipy.linalg.basic.solve_toeplitz",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_oj6evm5",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "isb3l3sr",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "0k1hd_b9",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ru4rmglf",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.basic",
                    "defaultValue": "scipy.linalg.basic",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1s4eyzlo",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uxju_nag",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "02fcos7g",
            "name": "basic.solve_triangular",
            "description": "Solve the equation ``a @ x = b`` for ``x``, where `a` is a triangular matrix.\n    \n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a : (M, M) array_like\n        A triangular matrix\n    b : (M,) or (M, N) array_like\n        Right-hand side matrix in ``a x = b``\n    lower : bool, optional\n        Use only data contained in the lower triangle of `a`.\n        Default is to use upper triangle.\n    trans : {0, 1, 2, 'N', 'T', 'C'}, optional\n        Type of system to solve:\n        \n        ========  =========\n        trans     system\n        ========  =========\n        0 or 'N'  a x  = b\n        1 or 'T'  a^T x = b\n        2 or 'C'  a^H x = b\n        ========  =========\n    unit_diagonal : bool, optional\n        If True, diagonal elements of `a` are assumed to be 1 and\n        will not be referenced.\n    overwrite_b : bool, optional\n        Allow overwriting data in `b` (may enhance performance)\n    check_finite : bool, optional\n        Whether to check that the input matrices contain only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    x : (M,) or (M, N) ndarray\n        Solution to the system ``a x = b``.  Shape of return matches `b`.\n    \n    Raises\n    ------\n    LinAlgError\n        If `a` is singular\n    \n    Notes\n    -----\n    .. versionadded:: 0.9.0\n    \n    Examples\n    --------\n    Solve the lower triangular system a x = b, where::\n    \n             [3  0  0  0]       [4]\n        a =  [2  1  0  0]   b = [2]\n             [1  0  1  0]       [4]\n             [1  1  1  1]       [2]\n    \n    >>> import numpy as np\n    >>> from scipy.linalg import solve_triangular\n    >>> a = np.array([[3, 0, 0, 0], [2, 1, 0, 0], [1, 0, 1, 0], [1, 1, 1, 1]])\n    >>> b = np.array([4, 2, 4, 2])\n    >>> x = solve_triangular(a, b, lower=True)\n    >>> x\n    array([ 1.33333333, -0.66666667,  2.66666667, -1.33333333])\n    >>> a.dot(x)  # Check the result\n    array([ 4.,  2.,  4.,  2.])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "682d76ef05edeaaa73dd53b191288a56dc9304c767eaac7a79b9d0635f850785",
            "fields": [
                {
                    "id": "ghx6lkvn",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "A triangular matrix",
                    "type": "(M, M) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f3st_6yp",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "Right-hand side matrix in ``a x = b``",
                    "type": "(M,) or (M, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7w7te5wx",
                    "encoding": "",
                    "name": "trans",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Type of system to solve:\n\n========  =========\ntrans     system\n========  =========\n0 or 'N'  a x  = b\n1 or 'T'  a^T x = b\n2 or 'C'  a^H x = b\n========  =========",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "igdaixfb",
                    "encoding": "",
                    "name": "lower",
                    "value": false,
                    "defaultValue": false,
                    "description": "Use only data contained in the lower triangle of `a`.\nDefault is to use upper triangle.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lju08t16",
                    "encoding": "",
                    "name": "unit_diagonal",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, diagonal elements of `a` are assumed to be 1 and\nwill not be referenced.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n663g87b",
                    "encoding": "",
                    "name": "overwrite_b",
                    "value": false,
                    "defaultValue": false,
                    "description": "Allow overwriting data in `b` (may enhance performance)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tqxfrzyq",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrices contain only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "joix9tpp",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.basic.solve_triangular",
                    "defaultValue": "scipy.linalg.basic.solve_triangular",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ojlfopgb",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "brg308i7",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "1x3uu6hx",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "10cbycao",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.basic",
                    "defaultValue": "scipy.linalg.basic",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7e8szwyl",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0o82lnr4",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "hxjvzzqc",
            "name": "basic.solveh_banded",
            "description": "Solve the equation ``a @ x = b`` for ``x``,  where ``a`` is the \n    Hermitian positive-definite banded matrix defined by `ab`.\n    \n    Uses Thomas' Algorithm, which is more efficient than standard LU\n    factorization, but should only be used for Hermitian positive-definite\n    matrices.\n    \n    The matrix ``a`` is stored in `ab` either in lower diagonal or upper\n    diagonal ordered form:\n    \n        ab[u + i - j, j] == a[i,j]        (if upper form; i <= j)\n        ab[    i - j, j] == a[i,j]        (if lower form; i >= j)\n    \n    Example of `ab` (shape of ``a`` is (6, 6), number of upper diagonals,\n    ``u`` =2)::\n    \n        upper form:\n        *   *   a02 a13 a24 a35\n        *   a01 a12 a23 a34 a45\n        a00 a11 a22 a33 a44 a55\n    \n        lower form:\n        a00 a11 a22 a33 a44 a55\n        a10 a21 a32 a43 a54 *\n        a20 a31 a42 a53 *   *\n    \n    Cells marked with * are not used.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    ab : (``u`` + 1, M) array_like\n        Banded matrix\n    b : (M,) or (M, K) array_like\n        Right-hand side\n    overwrite_ab : bool, optional\n        Discard data in `ab` (may enhance performance)\n    overwrite_b : bool, optional\n        Discard data in `b` (may enhance performance)\n    lower : bool, optional\n        Is the matrix in the lower form. (Default is upper form)\n    check_finite : bool, optional\n        Whether to check that the input matrices contain only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    x : (M,) or (M, K) ndarray\n        The solution to the system ``a x = b``. Shape of return matches shape\n        of `b`.\n    \n    Notes\n    -----\n    In the case of a non-positive definite matrix ``a``, the solver\n    `solve_banded` may be used.\n    \n    Examples\n    --------\n    Solve the banded system ``A x = b``, where::\n    \n            [ 4  2 -1  0  0  0]       [1]\n            [ 2  5  2 -1  0  0]       [2]\n        A = [-1  2  6  2 -1  0]   b = [2]\n            [ 0 -1  2  7  2 -1]       [3]\n            [ 0  0 -1  2  8  2]       [3]\n            [ 0  0  0 -1  2  9]       [3]\n    \n    >>> import numpy as np\n    >>> from scipy.linalg import solveh_banded\n    \n    ``ab`` contains the main diagonal and the nonzero diagonals below the\n    main diagonal. That is, we use the lower form:\n    \n    >>> ab = np.array([[ 4,  5,  6,  7, 8, 9],\n    ...                [ 2,  2,  2,  2, 2, 0],\n    ...                [-1, -1, -1, -1, 0, 0]])\n    >>> b = np.array([1, 2, 2, 3, 3, 3])\n    >>> x = solveh_banded(ab, b, lower=True)\n    >>> x\n    array([ 0.03431373,  0.45938375,  0.05602241,  0.47759104,  0.17577031,\n            0.34733894])\n    \n    Solve the Hermitian banded system ``H x = b``, where::\n    \n            [ 8   2-1j   0     0  ]        [ 1  ]\n        H = [2+1j  5     1j    0  ]    b = [1+1j]\n            [ 0   -1j    9   -2-1j]        [1-2j]\n            [ 0    0   -2+1j   6  ]        [ 0  ]\n    \n    In this example, we put the upper diagonals in the array ``hb``:\n    \n    >>> hb = np.array([[0, 2-1j, 1j, -2-1j],\n    ...                [8,  5,    9,   6  ]])\n    >>> b = np.array([1, 1+1j, 1-2j, 0])\n    >>> x = solveh_banded(hb, b)\n    >>> x\n    array([ 0.07318536-0.02939412j,  0.11877624+0.17696461j,\n            0.10077984-0.23035393j, -0.00479904-0.09358128j])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "274f772b0f1b81ee0f2e83a7cf1cbf7a6b978867e9f2332c9fc2b17c32e2f0d3",
            "fields": [
                {
                    "id": "mhe2nxbv",
                    "encoding": "",
                    "name": "ab",
                    "value": "",
                    "defaultValue": "",
                    "description": "Banded matrix",
                    "type": "(u + 1, M) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v6a7ytf2",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "Right-hand side",
                    "type": "(M,) or (M, K) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2h34m1ji",
                    "encoding": "",
                    "name": "overwrite_ab",
                    "value": false,
                    "defaultValue": false,
                    "description": "Discard data in `ab` (may enhance performance)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tpx83qp_",
                    "encoding": "",
                    "name": "overwrite_b",
                    "value": false,
                    "defaultValue": false,
                    "description": "Discard data in `b` (may enhance performance)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xssvvax6",
                    "encoding": "",
                    "name": "lower",
                    "value": false,
                    "defaultValue": false,
                    "description": "Is the matrix in the lower form. (Default is upper form)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7j6qspgx",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrices contain only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n86wbe52",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.basic.solveh_banded",
                    "defaultValue": "scipy.linalg.basic.solveh_banded",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c9kunfji",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "polopaz2",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "bwfjgd9r",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_abrui65",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.basic",
                    "defaultValue": "scipy.linalg.basic",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b_pzivfq",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p9fypv4q",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "q_uenxy_",
            "name": "blas.find_best_blas_type",
            "description": "Find best-matching BLAS/LAPACK type.\n    \n    Arrays are used to determine the optimal prefix of BLAS routines.\n    \n    Parameters\n    ----------\n    arrays : sequence of ndarrays, optional\n        Arrays can be given to determine optimal prefix of BLAS\n        routines. If not given, double-precision routines will be\n        used, otherwise the most generic type in arrays will be used.\n    dtype : str or dtype, optional\n        Data-type specifier. Not used if `arrays` is non-empty.\n    \n    Returns\n    -------\n    prefix : str\n        BLAS/LAPACK prefix character.\n    dtype : dtype\n        Inferred Numpy data type.\n    prefer_fortran : bool\n        Whether to prefer Fortran order routines over C order.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> import scipy.linalg.blas as bla\n    >>> rng = np.random.default_rng()\n    >>> a = rng.random((10,15))\n    >>> b = np.asfortranarray(a)  # Change the memory layout order\n    >>> bla.find_best_blas_type((a,))\n    ('d', dtype('float64'), False)\n    >>> bla.find_best_blas_type((a*1j,))\n    ('z', dtype('complex128'), False)\n    >>> bla.find_best_blas_type((b,))\n    ('d', dtype('float64'), True)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f197c9c5aa89b9df3277c45abae901e4bbadc2abd747b1cac41eaa6143e427e9",
            "fields": [
                {
                    "id": "fkgi1oq1",
                    "encoding": "",
                    "name": "arrays",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Arrays can be given to determine optimal prefix of BLAS\nroutines. If not given, double-precision routines will be\nused, otherwise the most generic type in arrays will be used.",
                    "type": "builtins.tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9783r1yn",
                    "encoding": "",
                    "name": "dtype",
                    "value": "",
                    "defaultValue": "",
                    "description": "Data-type specifier. Not used if `arrays` is non-empty.",
                    "type": "str or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qxw0ee6h",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.blas.find_best_blas_type",
                    "defaultValue": "scipy.linalg.blas.find_best_blas_type",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "esvqo8ql",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nhy26b_x",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "7ty4wk08",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pk5uw3yr",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.blas",
                    "defaultValue": "scipy.linalg.blas",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7en7mup6",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zspjt4pm",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "3vkjf2o8",
            "name": "blas.get_blas_funcs",
            "description": "Return available BLAS function objects from names.\n    \n    Arrays are used to determine the optimal prefix of BLAS routines.\n    \n    Parameters\n    ----------\n    names : str or sequence of str\n        Name(s) of BLAS functions without type prefix.\n    \n    arrays : sequence of ndarrays, optional\n        Arrays can be given to determine optimal prefix of BLAS\n        routines. If not given, double-precision routines will be\n        used, otherwise the most generic type in arrays will be used.\n    \n    dtype : str or dtype, optional\n        Data-type specifier. Not used if `arrays` is non-empty.\n    \n    ilp64 : {True, False, 'preferred'}, optional\n        Whether to return ILP64 routine variant.\n        Choosing 'preferred' returns ILP64 routine if available,\n        and otherwise the 32-bit routine. Default: False\n    \n    Returns\n    -------\n    funcs : list\n        List containing the found function(s).\n    \n    \n    Notes\n    -----\n    This routine automatically chooses between Fortran/C\n    interfaces. Fortran code is used whenever possible for arrays with\n    column major order. In all other cases, C code is preferred.\n    \n    In BLAS, the naming convention is that all functions start with a\n    type prefix, which depends on the type of the principal\n    matrix. These can be one of {'s', 'd', 'c', 'z'} for the NumPy\n    types {float32, float64, complex64, complex128} respectively.\n    The code and the dtype are stored in attributes `typecode` and `dtype`\n    of the returned functions.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> import scipy.linalg as LA\n    >>> rng = np.random.default_rng()\n    >>> a = rng.random((3,2))\n    >>> x_gemv = LA.get_blas_funcs('gemv', (a,))\n    >>> x_gemv.typecode\n    'd'\n    >>> x_gemv = LA.get_blas_funcs('gemv',(a*1j,))\n    >>> x_gemv.typecode\n    'z'",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "59f0ba9062c8fca704d91cce41addbaf1066b75dd9b4a11bafb7774ff8907a6b",
            "fields": [
                {
                    "id": "abegtr70",
                    "encoding": "",
                    "name": "names",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name(s) of BLAS functions without type prefix.",
                    "type": "str or sequence of str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ok29shf5",
                    "encoding": "",
                    "name": "arrays",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Arrays can be given to determine optimal prefix of BLAS\nroutines. If not given, double-precision routines will be\nused, otherwise the most generic type in arrays will be used.",
                    "type": "builtins.tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "slx23a2q",
                    "encoding": "",
                    "name": "dtype",
                    "value": "",
                    "defaultValue": "",
                    "description": "Data-type specifier. Not used if `arrays` is non-empty.",
                    "type": "str or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cct9sbdb",
                    "encoding": "",
                    "name": "ilp64",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to return ILP64 routine variant.\nChoosing 'preferred' returns ILP64 routine if available,\nand otherwise the 32-bit routine. Default: False",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ycimxn7u",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.blas.get_blas_funcs",
                    "defaultValue": "scipy.linalg.blas.get_blas_funcs",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tcbb24jd",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "njynn79y",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "y_09018v",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "idykl1c4",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.blas",
                    "defaultValue": "scipy.linalg.blas",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lonn4w8b",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qka1j9by",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "h_pwrfuz",
            "name": "decomp.cdf2rdf",
            "description": "Converts complex eigenvalues ``w`` and eigenvectors ``v`` to real\n    eigenvalues in a block diagonal form ``wr`` and the associated real\n    eigenvectors ``vr``, such that::\n    \n        vr @ wr = X @ vr\n    \n    continues to hold, where ``X`` is the original array for which ``w`` and\n    ``v`` are the eigenvalues and eigenvectors.\n    \n    .. versionadded:: 1.1.0\n    \n    Parameters\n    ----------\n    w : (..., M) array_like\n        Complex or real eigenvalues, an array or stack of arrays\n    \n        Conjugate pairs must not be interleaved, else the wrong result\n        will be produced. So ``[1+1j, 1, 1-1j]`` will give a correct result,\n        but ``[1+1j, 2+1j, 1-1j, 2-1j]`` will not.\n    \n    v : (..., M, M) array_like\n        Complex or real eigenvectors, a square array or stack of square arrays.\n    \n    Returns\n    -------\n    wr : (..., M, M) ndarray\n        Real diagonal block form of eigenvalues\n    vr : (..., M, M) ndarray\n        Real eigenvectors associated with ``wr``\n    \n    See Also\n    --------\n    eig : Eigenvalues and right eigenvectors for non-symmetric arrays\n    rsf2csf : Convert real Schur form to complex Schur form\n    \n    Notes\n    -----\n    ``w``, ``v`` must be the eigenstructure for some *real* matrix ``X``.\n    For example, obtained by ``w, v = scipy.linalg.eig(X)`` or\n    ``w, v = numpy.linalg.eig(X)`` in which case ``X`` can also represent\n    stacked arrays.\n    \n    .. versionadded:: 1.1.0\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> X = np.array([[1, 2, 3], [0, 4, 5], [0, -5, 4]])\n    >>> X\n    array([[ 1,  2,  3],\n           [ 0,  4,  5],\n           [ 0, -5,  4]])\n    \n    >>> from scipy import linalg\n    >>> w, v = linalg.eig(X)\n    >>> w\n    array([ 1.+0.j,  4.+5.j,  4.-5.j])\n    >>> v\n    array([[ 1.00000+0.j     , -0.01906-0.40016j, -0.01906+0.40016j],\n           [ 0.00000+0.j     ,  0.00000-0.64788j,  0.00000+0.64788j],\n           [ 0.00000+0.j     ,  0.64788+0.j     ,  0.64788-0.j     ]])\n    \n    >>> wr, vr = linalg.cdf2rdf(w, v)\n    >>> wr\n    array([[ 1.,  0.,  0.],\n           [ 0.,  4.,  5.],\n           [ 0., -5.,  4.]])\n    >>> vr\n    array([[ 1.     ,  0.40016, -0.01906],\n           [ 0.     ,  0.64788,  0.     ],\n           [ 0.     ,  0.     ,  0.64788]])\n    \n    >>> vr @ wr\n    array([[ 1.     ,  1.69593,  1.9246 ],\n           [ 0.     ,  2.59153,  3.23942],\n           [ 0.     , -3.23942,  2.59153]])\n    >>> X @ vr\n    array([[ 1.     ,  1.69593,  1.9246 ],\n           [ 0.     ,  2.59153,  3.23942],\n           [ 0.     , -3.23942,  2.59153]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "bd7ca3475a9e011ba612742e172ea6fc9a7d0103ad363a046fdc851bbee5c274",
            "fields": [
                {
                    "id": "0e0ahzrx",
                    "encoding": "",
                    "name": "w",
                    "value": "",
                    "defaultValue": "",
                    "description": "Complex or real eigenvalues, an array or stack of arrays\n\nConjugate pairs must not be interleaved, else the wrong result\nwill be produced. So ``[1+1j, 1, 1-1j]`` will give a correct result,\nbut ``[1+1j, 2+1j, 1-1j, 2-1j]`` will not.",
                    "type": "(..., M) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o1t1xi2p",
                    "encoding": "",
                    "name": "v",
                    "value": "",
                    "defaultValue": "",
                    "description": "Complex or real eigenvectors, a square array or stack of square arrays.",
                    "type": "(..., M, M) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tojfhwv6",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.decomp.cdf2rdf",
                    "defaultValue": "scipy.linalg.decomp.cdf2rdf",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0qctactp",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0m90vbaq",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "srxde7qi",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zv70dv_i",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.decomp",
                    "defaultValue": "scipy.linalg.decomp",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vser7pp3",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o0learqg",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "2ryc5xnq",
            "name": "decomp.eig",
            "description": "Solve an ordinary or generalized eigenvalue problem of a square matrix.\n    \n    Find eigenvalues w and right or left eigenvectors of a general matrix::\n    \n        a   vr[:,i] = w[i]        b   vr[:,i]\n        a.H vl[:,i] = w[i].conj() b.H vl[:,i]\n    \n    where ``.H`` is the Hermitian conjugation.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a : (M, M) array_like\n        A complex or real matrix whose eigenvalues and eigenvectors\n        will be computed.\n    b : (M, M) array_like, optional\n        Right-hand side matrix in a generalized eigenvalue problem.\n        Default is None, identity matrix is assumed.\n    left : bool, optional\n        Whether to calculate and return left eigenvectors.  Default is False.\n    right : bool, optional\n        Whether to calculate and return right eigenvectors.  Default is True.\n    overwrite_a : bool, optional\n        Whether to overwrite `a`; may improve performance.  Default is False.\n    overwrite_b : bool, optional\n        Whether to overwrite `b`; may improve performance.  Default is False.\n    check_finite : bool, optional\n        Whether to check that the input matrices contain only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    homogeneous_eigvals : bool, optional\n        If True, return the eigenvalues in homogeneous coordinates.\n        In this case ``w`` is a (2, M) array so that::\n        \n            w[1,i] a vr[:,i] = w[0,i] b vr[:,i]\n        \n        Default is False.\n    \n    Returns\n    -------\n    w : (M,) or (2, M) double or complex ndarray\n        The eigenvalues, each repeated according to its\n        multiplicity. The shape is (M,) unless\n        ``homogeneous_eigvals=True``.\n    vl : (M, M) double or complex ndarray\n        The left eigenvector corresponding to the eigenvalue\n        ``w[i]`` is the column ``vl[:,i]``. Only returned if ``left=True``.\n        The left eigenvector is not normalized.\n    vr : (M, M) double or complex ndarray\n        The normalized right eigenvector corresponding to the eigenvalue\n        ``w[i]`` is the column ``vr[:,i]``.  Only returned if ``right=True``.\n    \n    Raises\n    ------\n    LinAlgError\n        If eigenvalue computation does not converge.\n    \n    See Also\n    --------\n    \n    :func:`eigvals`\n        eigenvalues of general arrays\n    :func:`eigh`\n        Eigenvalues and right eigenvectors for symmetric/Hermitian arrays.\n    :func:`eig_banded`\n        eigenvalues and right eigenvectors for symmetric/Hermitian band matrices\n    :func:`eigh_tridiagonal`\n        eigenvalues and right eiegenvectors for symmetric/Hermitian tridiagonal matrices\n    \n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy import linalg\n    >>> a = np.array([[0., -1.], [1., 0.]])\n    >>> linalg.eigvals(a)\n    array([0.+1.j, 0.-1.j])\n    \n    >>> b = np.array([[0., 1.], [1., 1.]])\n    >>> linalg.eigvals(a, b)\n    array([ 1.+0.j, -1.+0.j])\n    \n    >>> a = np.array([[3., 0., 0.], [0., 8., 0.], [0., 0., 7.]])\n    >>> linalg.eigvals(a, homogeneous_eigvals=True)\n    array([[3.+0.j, 8.+0.j, 7.+0.j],\n           [1.+0.j, 1.+0.j, 1.+0.j]])\n    \n    >>> a = np.array([[0., -1.], [1., 0.]])\n    >>> linalg.eigvals(a) == linalg.eig(a)[0]\n    array([ True,  True])\n    >>> linalg.eig(a, left=True, right=False)[1] # normalized left eigenvector\n    array([[-0.70710678+0.j        , -0.70710678-0.j        ],\n           [-0.        +0.70710678j, -0.        -0.70710678j]])\n    >>> linalg.eig(a, left=False, right=True)[1] # normalized right eigenvector\n    array([[0.70710678+0.j        , 0.70710678-0.j        ],\n           [0.        -0.70710678j, 0.        +0.70710678j]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4099d00a8900f7b3ae87c1284fad5d67bb4ff0f39d6612b3c12e50403b96b047",
            "fields": [
                {
                    "id": "0hsp3igx",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "A complex or real matrix whose eigenvalues and eigenvectors\nwill be computed.",
                    "type": "(M, M) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e282do7r",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "Right-hand side matrix in a generalized eigenvalue problem.\nDefault is None, identity matrix is assumed.",
                    "type": "(M, M) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i7mltjkl",
                    "encoding": "",
                    "name": "left",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to calculate and return left eigenvectors.  Default is False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "08sq8aad",
                    "encoding": "",
                    "name": "right",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to calculate and return right eigenvectors.  Default is True.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2s06657w",
                    "encoding": "",
                    "name": "overwrite_a",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to overwrite `a`; may improve performance.  Default is False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_5fb2180",
                    "encoding": "",
                    "name": "overwrite_b",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to overwrite `b`; may improve performance.  Default is False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i3f1hwxn",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrices contain only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ede2e7qa",
                    "encoding": "",
                    "name": "homogeneous_eigvals",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, return the eigenvalues in homogeneous coordinates.\nIn this case ``w`` is a (2, M) array so that::\n\n    w[1,i] a vr[:,i] = w[0,i] b vr[:,i]\n\nDefault is False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wfqs9ous",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.decomp.eig",
                    "defaultValue": "scipy.linalg.decomp.eig",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2f_h23fz",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_zfmw8u2",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "4q9m_i23",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vma3l6ud",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.decomp",
                    "defaultValue": "scipy.linalg.decomp",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fqxpa69h",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lou4ogdo",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "xer6rri1",
            "name": "decomp.eig_banded",
            "description": "Solve real symmetric or complex Hermitian band matrix eigenvalue problem.\n    \n    Find eigenvalues w and optionally right eigenvectors v of a::\n    \n        a v[:,i] = w[i] v[:,i]\n        v.H v    = identity\n    \n    The matrix a is stored in a_band either in lower diagonal or upper\n    diagonal ordered form:\n    \n        a_band[u + i - j, j] == a[i,j]        (if upper form; i <= j)\n        a_band[    i - j, j] == a[i,j]        (if lower form; i >= j)\n    \n    where u is the number of bands above the diagonal.\n    \n    Example of a_band (shape of a is (6,6), u=2)::\n    \n        upper form:\n        *   *   a02 a13 a24 a35\n        *   a01 a12 a23 a34 a45\n        a00 a11 a22 a33 a44 a55\n    \n        lower form:\n        a00 a11 a22 a33 a44 a55\n        a10 a21 a32 a43 a54 *\n        a20 a31 a42 a53 *   *\n    \n    Cells marked with * are not used.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a_band : (u+1, M) array_like\n        The bands of the M by M matrix a.\n    lower : bool, optional\n        Is the matrix in the lower form. (Default is upper form)\n    eigvals_only : bool, optional\n        Compute only the eigenvalues and no eigenvectors.\n        (Default: calculate also eigenvectors)\n    overwrite_a_band : bool, optional\n        Discard data in a_band (may enhance performance)\n    select : {'a', 'v', 'i'}, optional\n        Which eigenvalues to calculate\n        \n        ======  ========================================\n        select  calculated\n        ======  ========================================\n        'a'     All eigenvalues\n        'v'     Eigenvalues in the interval (min, max]\n        'i'     Eigenvalues with indices min <= i <= max\n        ======  ========================================\n    select_range : (min, max), optional\n        Range of selected eigenvalues\n    max_ev : int, optional\n        For select=='v', maximum number of eigenvalues expected.\n        For other values of select, has no meaning.\n        \n        In doubt, leave this parameter untouched.\n    check_finite : bool, optional\n        Whether to check that the input matrix contains only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    w : (M,) ndarray\n        The eigenvalues, in ascending order, each repeated according to its\n        multiplicity.\n    v : (M, M) float or complex ndarray\n        The normalized eigenvector corresponding to the eigenvalue w[i] is\n        the column v[:,i]. Only returned if ``eigvals_only=False``.\n    \n    Raises\n    ------\n    LinAlgError\n        If eigenvalue computation does not converge.\n    \n    See Also\n    --------\n    \n    :func:`eigvals_banded`\n        eigenvalues for symmetric/Hermitian band matrices\n    :func:`eig`\n        eigenvalues and right eigenvectors of general arrays.\n    :func:`eigh`\n        eigenvalues and right eigenvectors for symmetric/Hermitian arrays\n    :func:`eigh_tridiagonal`\n        eigenvalues and right eigenvectors for symmetric/Hermitian tridiagonal matrices\n    \n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import eig_banded\n    >>> A = np.array([[1, 5, 2, 0], [5, 2, 5, 2], [2, 5, 3, 5], [0, 2, 5, 4]])\n    >>> Ab = np.array([[1, 2, 3, 4], [5, 5, 5, 0], [2, 2, 0, 0]])\n    >>> w, v = eig_banded(Ab, lower=True)\n    >>> np.allclose(A @ v - v @ np.diag(w), np.zeros((4, 4)))\n    True\n    >>> w = eig_banded(Ab, lower=True, eigvals_only=True)\n    >>> w\n    array([-4.26200532, -2.22987175,  3.95222349, 12.53965359])\n    \n    Request only the eigenvalues between ``[-3, 4]``\n    \n    >>> w, v = eig_banded(Ab, lower=True, select='v', select_range=[-3, 4])\n    >>> w\n    array([-2.22987175,  3.95222349])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f67b63211dc3fa0212975795c6b60b12b7e4871ff13cfaf8f96810c48f048410",
            "fields": [
                {
                    "id": "n8c0tz3f",
                    "encoding": "",
                    "name": "a_band",
                    "value": "",
                    "defaultValue": "",
                    "description": "The bands of the M by M matrix a.",
                    "type": "(u+1, M) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gymhx0hn",
                    "encoding": "",
                    "name": "lower",
                    "value": false,
                    "defaultValue": false,
                    "description": "Is the matrix in the lower form. (Default is upper form)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "crm_90bh",
                    "encoding": "",
                    "name": "eigvals_only",
                    "value": false,
                    "defaultValue": false,
                    "description": "Compute only the eigenvalues and no eigenvectors.\n(Default: calculate also eigenvectors)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ehjbx6jl",
                    "encoding": "",
                    "name": "overwrite_a_band",
                    "value": false,
                    "defaultValue": false,
                    "description": "Discard data in a_band (may enhance performance)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jnfv65pg",
                    "encoding": "",
                    "name": "select",
                    "value": "a",
                    "defaultValue": "a",
                    "description": "Which eigenvalues to calculate\n\n======  ========================================\nselect  calculated\n======  ========================================\n'a'     All eigenvalues\n'v'     Eigenvalues in the interval (min, max]\n'i'     Eigenvalues with indices min <= i <= max\n======  ========================================",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gubtgl40",
                    "encoding": "",
                    "name": "select_range",
                    "value": "",
                    "defaultValue": "",
                    "description": "Range of selected eigenvalues",
                    "type": "(min, max)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9f18vjdi",
                    "encoding": "",
                    "name": "max_ev",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "For select=='v', maximum number of eigenvalues expected.\nFor other values of select, has no meaning.\n\nIn doubt, leave this parameter untouched.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "747qcuwr",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrix contains only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e4jsu856",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.decomp.eig_banded",
                    "defaultValue": "scipy.linalg.decomp.eig_banded",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xlfn74ae",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aq7tixpd",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "scury4m5",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "me8n166a",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.decomp",
                    "defaultValue": "scipy.linalg.decomp",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_3urfjiv",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "465ksihp",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "nfqcv41e",
            "name": "decomp.eigh",
            "description": "Solve a standard or generalized eigenvalue problem for a complex\n    Hermitian or real symmetric matrix.\n    \n    Find eigenvalues array ``w`` and optionally eigenvectors array ``v`` of\n    array ``a``, where ``b`` is positive definite such that for every\n    eigenvalue \u03bb (i-th entry of w) and its eigenvector ``vi`` (i-th column of\n    ``v``) satisfies::\n    \n                      a @ vi = \u03bb * b @ vi\n        vi.conj().T @ a @ vi = \u03bb\n        vi.conj().T @ b @ vi = 1\n    \n    In the standard problem, ``b`` is assumed to be the identity matrix.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a : (M, M) array_like\n        A complex Hermitian or real symmetric matrix whose eigenvalues and\n        eigenvectors will be computed.\n    b : (M, M) array_like, optional\n        A complex Hermitian or real symmetric definite positive matrix in.\n        If omitted, identity matrix is assumed.\n    lower : bool, optional\n        Whether the pertinent array data is taken from the lower or upper\n        triangle of ``a`` and, if applicable, ``b``. (Default: lower)\n    eigvals_only : bool, optional\n        Whether to calculate only eigenvalues and no eigenvectors.\n        (Default: both are calculated)\n    subset_by_index : iterable, optional\n        If provided, this two-element iterable defines the start and the end\n        indices of the desired eigenvalues (ascending order and 0-indexed).\n        To return only the second smallest to fifth smallest eigenvalues,\n        ``[1, 4]`` is used. ``[n-3, n-1]`` returns the largest three. Only\n        available with \"evr\", \"evx\", and \"gvx\" drivers. The entries are\n        directly converted to integers via ``int()``.\n    subset_by_value : iterable, optional\n        If provided, this two-element iterable defines the half-open interval\n        ``(a, b]`` that, if any, only the eigenvalues between these values\n        are returned. Only available with \"evr\", \"evx\", and \"gvx\" drivers. Use\n        ``np.inf`` for the unconstrained ends.\n    driver : str, optional\n        Defines which LAPACK driver should be used. Valid options are \"ev\",\n        \"evd\", \"evr\", \"evx\" for standard problems and \"gv\", \"gvd\", \"gvx\" for\n        generalized (where b is not None) problems. See the Notes section.\n        The default for standard problems is \"evr\". For generalized problems,\n        \"gvd\" is used for full set, and \"gvx\" for subset requested cases.\n    type : int, optional\n        For the generalized problems, this keyword specifies the problem type\n        to be solved for ``w`` and ``v`` (only takes 1, 2, 3 as possible\n        inputs)::\n        \n            1 =>     a @ v = w @ b @ v\n            2 => a @ b @ v = w @ v\n            3 => b @ a @ v = w @ v\n        \n        This keyword is ignored for standard problems.\n    overwrite_a : bool, optional\n        Whether to overwrite data in ``a`` (may improve performance). Default\n        is False.\n    overwrite_b : bool, optional\n        Whether to overwrite data in ``b`` (may improve performance). Default\n        is False.\n    check_finite : bool, optional\n        Whether to check that the input matrices contain only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    w : (N,) ndarray\n        The N (N<=M) selected eigenvalues, in ascending order, each\n        repeated according to its multiplicity.\n    v : (M, N) ndarray\n        The normalized eigenvector corresponding to the eigenvalue ``w[i]`` is\n        the column ``v[:,i]``. Only returned if ``eigvals_only=False``.\n    \n    Raises\n    ------\n    LinAlgError\n        If eigenvalue computation does not converge, an error occurred, or\n        b matrix is not definite positive. Note that if input matrices are\n        not symmetric or Hermitian, no error will be reported but results will\n        be wrong.\n    \n    See Also\n    --------\n    \n    :func:`eigvalsh`\n        eigenvalues of symmetric or Hermitian arrays\n    :func:`eig`\n        eigenvalues and right eigenvectors for non-symmetric arrays\n    :func:`eigh_tridiagonal`\n        eigenvalues and right eiegenvectors for symmetric/Hermitian tridiagonal matrices\n    \n    \n    Notes\n    -----\n    This function does not check the input array for being Hermitian/symmetric\n    in order to allow for representing arrays with only their upper/lower\n    triangular parts. Also, note that even though not taken into account,\n    finiteness check applies to the whole array and unaffected by \"lower\"\n    keyword.\n    \n    This function uses LAPACK drivers for computations in all possible keyword\n    combinations, prefixed with ``sy`` if arrays are real and ``he`` if\n    complex, e.g., a float array with \"evr\" driver is solved via\n    \"syevr\", complex arrays with \"gvx\" driver problem is solved via \"hegvx\"\n    etc.\n    \n    As a brief summary, the slowest and the most robust driver is the\n    classical ``<sy/he>ev`` which uses symmetric QR. ``<sy/he>evr`` is seen as\n    the optimal choice for the most general cases. However, there are certain\n    occasions that ``<sy/he>evd`` computes faster at the expense of more\n    memory usage. ``<sy/he>evx``, while still being faster than ``<sy/he>ev``,\n    often performs worse than the rest except when very few eigenvalues are\n    requested for large arrays though there is still no performance guarantee.\n    \n    Note that the underlying LAPACK algorithms are different depending on whether\n    `eigvals_only` is True or False --- thus the eigenvalues may differ\n    depending on whether eigenvectors are requested or not. The difference is\n    generally of the order of machine epsilon times the largest eigenvalue,\n    so is likely only visible for zero or nearly zero eigenvalues.\n    \n    For the generalized problem, normalization with respect to the given\n    type argument::\n    \n            type 1 and 3 :      v.conj().T @ a @ v = w\n            type 2       : inv(v).conj().T @ a @ inv(v) = w\n    \n            type 1 or 2  :      v.conj().T @ b @ v  = I\n            type 3       : v.conj().T @ inv(b) @ v  = I\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import eigh\n    >>> A = np.array([[6, 3, 1, 5], [3, 0, 5, 1], [1, 5, 6, 2], [5, 1, 2, 2]])\n    >>> w, v = eigh(A)\n    >>> np.allclose(A @ v - v @ np.diag(w), np.zeros((4, 4)))\n    True\n    \n    Request only the eigenvalues\n    \n    >>> w = eigh(A, eigvals_only=True)\n    \n    Request eigenvalues that are less than 10.\n    \n    >>> A = np.array([[34, -4, -10, -7, 2],\n    ...               [-4, 7, 2, 12, 0],\n    ...               [-10, 2, 44, 2, -19],\n    ...               [-7, 12, 2, 79, -34],\n    ...               [2, 0, -19, -34, 29]])\n    >>> eigh(A, eigvals_only=True, subset_by_value=[-np.inf, 10])\n    array([6.69199443e-07, 9.11938152e+00])\n    \n    Request the second smallest eigenvalue and its eigenvector\n    \n    >>> w, v = eigh(A, subset_by_index=[1, 1])\n    >>> w\n    array([9.11938152])\n    >>> v.shape  # only a single column is returned\n    (5, 1)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a2424197aa31937b2df2fc1252d589af812efe9832fb4eac8a08fee66e535110",
            "fields": [
                {
                    "id": "ic0v9ckc",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "A complex Hermitian or real symmetric matrix whose eigenvalues and\neigenvectors will be computed.",
                    "type": "(M, M) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u28d48me",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "A complex Hermitian or real symmetric definite positive matrix in.\nIf omitted, identity matrix is assumed.",
                    "type": "(M, M) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iz_iz678",
                    "encoding": "",
                    "name": "lower",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether the pertinent array data is taken from the lower or upper\ntriangle of ``a`` and, if applicable, ``b``. (Default: lower)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m8y4x8a0",
                    "encoding": "",
                    "name": "eigvals_only",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to calculate only eigenvalues and no eigenvectors.\n(Default: both are calculated)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4ut9rg2e",
                    "encoding": "",
                    "name": "overwrite_a",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to overwrite data in ``a`` (may improve performance). Default\nis False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ua7y82nf",
                    "encoding": "",
                    "name": "overwrite_b",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to overwrite data in ``b`` (may improve performance). Default\nis False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3wywvz19",
                    "encoding": "",
                    "name": "type",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "For the generalized problems, this keyword specifies the problem type\nto be solved for ``w`` and ``v`` (only takes 1, 2, 3 as possible\ninputs)::\n\n    1 =>     a @ v = w @ b @ v\n    2 => a @ b @ v = w @ v\n    3 => b @ a @ v = w @ v\n\nThis keyword is ignored for standard problems.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ytwxbbj7",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrices contain only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xknvhpel",
                    "encoding": "",
                    "name": "subset_by_index",
                    "value": "",
                    "defaultValue": "",
                    "description": "If provided, this two-element iterable defines the start and the end\nindices of the desired eigenvalues (ascending order and 0-indexed).\nTo return only the second smallest to fifth smallest eigenvalues,\n``[1, 4]`` is used. ``[n-3, n-1]`` returns the largest three. Only\navailable with \"evr\", \"evx\", and \"gvx\" drivers. The entries are\ndirectly converted to integers via ``int()``.",
                    "type": "iterable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "64h6lz3p",
                    "encoding": "",
                    "name": "subset_by_value",
                    "value": "",
                    "defaultValue": "",
                    "description": "If provided, this two-element iterable defines the half-open interval\n``(a, b]`` that, if any, only the eigenvalues between these values\nare returned. Only available with \"evr\", \"evx\", and \"gvx\" drivers. Use\n``np.inf`` for the unconstrained ends.",
                    "type": "iterable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5d8ni18u",
                    "encoding": "",
                    "name": "driver",
                    "value": "",
                    "defaultValue": "",
                    "description": "Defines which LAPACK driver should be used. Valid options are \"ev\",\n\"evd\", \"evr\", \"evx\" for standard problems and \"gv\", \"gvd\", \"gvx\" for\ngeneralized (where b is not None) problems. See the Notes section.\nThe default for standard problems is \"evr\". For generalized problems,\n\"gvd\" is used for full set, and \"gvx\" for subset requested cases.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0954rvkn",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.decomp.eigh",
                    "defaultValue": "scipy.linalg.decomp.eigh",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "01dcbwbu",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "br84nfl5",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "7td8vfu4",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lcqxyfvm",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.decomp",
                    "defaultValue": "scipy.linalg.decomp",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wpcg40h5",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yu305ujj",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "vczz1zbt",
            "name": "decomp.eigh_tridiagonal",
            "description": "Solve eigenvalue problem for a real symmetric tridiagonal matrix.\n    \n    Find eigenvalues `w` and optionally right eigenvectors `v` of ``a``::\n    \n        a v[:,i] = w[i] v[:,i]\n        v.H v    = identity\n    \n    For a real symmetric matrix ``a`` with diagonal elements `d` and\n    off-diagonal elements `e`.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    d : ndarray, shape (ndim,)\n        The diagonal elements of the array.\n    e : ndarray, shape (ndim-1,)\n        The off-diagonal elements of the array.\n    eigvals_only : bool, optional\n        Compute only the eigenvalues and no eigenvectors.\n        (Default: calculate also eigenvectors)\n    select : {'a', 'v', 'i'}, optional\n        Which eigenvalues to calculate\n        \n        ======  ========================================\n        select  calculated\n        ======  ========================================\n        'a'     All eigenvalues\n        'v'     Eigenvalues in the interval (min, max]\n        'i'     Eigenvalues with indices min <= i <= max\n        ======  ========================================\n    select_range : (min, max), optional\n        Range of selected eigenvalues\n    check_finite : bool, optional\n        Whether to check that the input matrix contains only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    tol : float\n        The absolute tolerance to which each eigenvalue is required\n        (only used when 'stebz' is the `lapack_driver`).\n        An eigenvalue (or cluster) is considered to have converged if it\n        lies in an interval of this width. If <= 0. (default),\n        the value ``eps*|a|`` is used where eps is the machine precision,\n        and ``|a|`` is the 1-norm of the matrix ``a``.\n    lapack_driver : str\n        LAPACK function to use, can be 'auto', 'stemr', 'stebz', 'sterf',\n        'stev', or 'stevd'. When 'auto' (default), it will use 'stevd' if ``select='a'``\n        and 'stebz' otherwise. When 'stebz' is used to find the eigenvalues and\n        ``eigvals_only=False``, then a second LAPACK call (to ``?STEIN``) is\n        used to find the corresponding eigenvectors. 'sterf' can only be\n        used when ``eigvals_only=True`` and ``select='a'``. 'stev' can only\n        be used when ``select='a'``.\n    \n    Returns\n    -------\n    w : (M,) ndarray\n        The eigenvalues, in ascending order, each repeated according to its\n        multiplicity.\n    v : (M, M) ndarray\n        The normalized eigenvector corresponding to the eigenvalue ``w[i]`` is\n        the column ``v[:,i]``. Only returned if ``eigvals_only=False``.\n    \n    Raises\n    ------\n    LinAlgError\n        If eigenvalue computation does not converge.\n    \n    See Also\n    --------\n    \n    :func:`eigvalsh_tridiagonal`\n        eigenvalues of symmetric/Hermitian tridiagonal matrices\n    :func:`eig`\n        eigenvalues and right eigenvectors for non-symmetric arrays\n    :func:`eigh`\n        eigenvalues and right eigenvectors for symmetric/Hermitian arrays\n    :func:`eig_banded`\n        eigenvalues and right eigenvectors for symmetric/Hermitian band matrices\n    \n    \n    Notes\n    -----\n    This function makes use of LAPACK ``S/DSTEMR`` routines.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import eigh_tridiagonal\n    >>> d = 3*np.ones(4)\n    >>> e = -1*np.ones(3)\n    >>> w, v = eigh_tridiagonal(d, e)\n    >>> A = np.diag(d) + np.diag(e, k=1) + np.diag(e, k=-1)\n    >>> np.allclose(A @ v - v @ np.diag(w), np.zeros((4, 4)))\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "62721f7509efeb0b9ad9a8aaad0c410721d70f930ba54f2633dedff8baf5e453",
            "fields": [
                {
                    "id": "9nd9110a",
                    "encoding": "",
                    "name": "d",
                    "value": "",
                    "defaultValue": "",
                    "description": "The diagonal elements of the array.",
                    "type": "ndarray, shape (ndim,)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c04_r1wu",
                    "encoding": "",
                    "name": "e",
                    "value": "",
                    "defaultValue": "",
                    "description": "The off-diagonal elements of the array.",
                    "type": "ndarray, shape (ndim-1,)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g5k3pomb",
                    "encoding": "",
                    "name": "eigvals_only",
                    "value": false,
                    "defaultValue": false,
                    "description": "Compute only the eigenvalues and no eigenvectors.\n(Default: calculate also eigenvectors)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eqv8us0y",
                    "encoding": "",
                    "name": "select",
                    "value": "a",
                    "defaultValue": "a",
                    "description": "Which eigenvalues to calculate\n\n======  ========================================\nselect  calculated\n======  ========================================\n'a'     All eigenvalues\n'v'     Eigenvalues in the interval (min, max]\n'i'     Eigenvalues with indices min <= i <= max\n======  ========================================",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q2ymrrix",
                    "encoding": "",
                    "name": "select_range",
                    "value": "",
                    "defaultValue": "",
                    "description": "Range of selected eigenvalues",
                    "type": "(min, max)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w4bjvxy2",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrix contains only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i9iz9jzw",
                    "encoding": "",
                    "name": "tol",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "The absolute tolerance to which each eigenvalue is required\n(only used when 'stebz' is the `lapack_driver`).\nAn eigenvalue (or cluster) is considered to have converged if it\nlies in an interval of this width. If <= 0. (default),\nthe value ``eps*|a|`` is used where eps is the machine precision,\nand ``|a|`` is the 1-norm of the matrix ``a``.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ibp4wlqh",
                    "encoding": "",
                    "name": "lapack_driver",
                    "value": "auto",
                    "defaultValue": "auto",
                    "description": "LAPACK function to use, can be 'auto', 'stemr', 'stebz', 'sterf',\n'stev', or 'stevd'. When 'auto' (default), it will use 'stevd' if ``select='a'``\nand 'stebz' otherwise. When 'stebz' is used to find the eigenvalues and\n``eigvals_only=False``, then a second LAPACK call (to ``?STEIN``) is\nused to find the corresponding eigenvectors. 'sterf' can only be\nused when ``eigvals_only=True`` and ``select='a'``. 'stev' can only\nbe used when ``select='a'``.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w2pr6jt1",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.decomp.eigh_tridiagonal",
                    "defaultValue": "scipy.linalg.decomp.eigh_tridiagonal",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mngelf1b",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qil9zcqt",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "qjgfb2o6",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z9m3i_in",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.decomp",
                    "defaultValue": "scipy.linalg.decomp",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fk60qm72",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dog39evm",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ubj2v39p",
            "name": "decomp.eigvals",
            "description": "Compute eigenvalues from an ordinary or generalized eigenvalue problem.\n    \n    Find eigenvalues of a general matrix::\n    \n        a   vr[:,i] = w[i]        b   vr[:,i]\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a : (M, M) array_like\n        A complex or real matrix whose eigenvalues and eigenvectors\n        will be computed.\n    b : (M, M) array_like, optional\n        Right-hand side matrix in a generalized eigenvalue problem.\n        If omitted, identity matrix is assumed.\n    overwrite_a : bool, optional\n        Whether to overwrite data in a (may improve performance)\n    check_finite : bool, optional\n        Whether to check that the input matrices contain only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities\n        or NaNs.\n    homogeneous_eigvals : bool, optional\n        If True, return the eigenvalues in homogeneous coordinates.\n        In this case ``w`` is a (2, M) array so that::\n        \n            w[1,i] a vr[:,i] = w[0,i] b vr[:,i]\n        \n        Default is False.\n    \n    Returns\n    -------\n    w : (M,) or (2, M) double or complex ndarray\n        The eigenvalues, each repeated according to its multiplicity\n        but not in any specific order. The shape is (M,) unless\n        ``homogeneous_eigvals=True``.\n    \n    Raises\n    ------\n    LinAlgError\n        If eigenvalue computation does not converge\n    \n    See Also\n    --------\n    \n    :func:`eig`\n        eigenvalues and right eigenvectors of general arrays.\n    :func:`eigvalsh`\n        eigenvalues of symmetric or Hermitian arrays\n    :func:`eigvals_banded`\n        eigenvalues for symmetric/Hermitian band matrices\n    :func:`eigvalsh_tridiagonal`\n        eigenvalues of symmetric/Hermitian tridiagonal matrices\n    \n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy import linalg\n    >>> a = np.array([[0., -1.], [1., 0.]])\n    >>> linalg.eigvals(a)\n    array([0.+1.j, 0.-1.j])\n    \n    >>> b = np.array([[0., 1.], [1., 1.]])\n    >>> linalg.eigvals(a, b)\n    array([ 1.+0.j, -1.+0.j])\n    \n    >>> a = np.array([[3., 0., 0.], [0., 8., 0.], [0., 0., 7.]])\n    >>> linalg.eigvals(a, homogeneous_eigvals=True)\n    array([[3.+0.j, 8.+0.j, 7.+0.j],\n           [1.+0.j, 1.+0.j, 1.+0.j]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e5c85f0db7b98de70e6e1f79d6c4e51c8a3b0300de55fd2da1520b5bea21c607",
            "fields": [
                {
                    "id": "ogjctrpx",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "A complex or real matrix whose eigenvalues and eigenvectors\nwill be computed.",
                    "type": "(M, M) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k1orinz6",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "Right-hand side matrix in a generalized eigenvalue problem.\nIf omitted, identity matrix is assumed.",
                    "type": "(M, M) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hmm8ddxy",
                    "encoding": "",
                    "name": "overwrite_a",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to overwrite data in a (may improve performance)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4egufndt",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrices contain only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities\nor NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q1_o1qeo",
                    "encoding": "",
                    "name": "homogeneous_eigvals",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, return the eigenvalues in homogeneous coordinates.\nIn this case ``w`` is a (2, M) array so that::\n\n    w[1,i] a vr[:,i] = w[0,i] b vr[:,i]\n\nDefault is False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pbucrj9o",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.decomp.eigvals",
                    "defaultValue": "scipy.linalg.decomp.eigvals",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f3ztrpfd",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "17_a4owy",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "739xi52h",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1oq1kfy3",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.decomp",
                    "defaultValue": "scipy.linalg.decomp",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mfwlf6as",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6abap1yl",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "l88zqism",
            "name": "decomp.eigvals_banded",
            "description": "Solve real symmetric or complex Hermitian band matrix eigenvalue problem.\n    \n    Find eigenvalues w of a::\n    \n        a v[:,i] = w[i] v[:,i]\n        v.H v    = identity\n    \n    The matrix a is stored in a_band either in lower diagonal or upper\n    diagonal ordered form:\n    \n        a_band[u + i - j, j] == a[i,j]        (if upper form; i <= j)\n        a_band[    i - j, j] == a[i,j]        (if lower form; i >= j)\n    \n    where u is the number of bands above the diagonal.\n    \n    Example of a_band (shape of a is (6,6), u=2)::\n    \n        upper form:\n        *   *   a02 a13 a24 a35\n        *   a01 a12 a23 a34 a45\n        a00 a11 a22 a33 a44 a55\n    \n        lower form:\n        a00 a11 a22 a33 a44 a55\n        a10 a21 a32 a43 a54 *\n        a20 a31 a42 a53 *   *\n    \n    Cells marked with * are not used.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a_band : (u+1, M) array_like\n        The bands of the M by M matrix a.\n    lower : bool, optional\n        Is the matrix in the lower form. (Default is upper form)\n    overwrite_a_band : bool, optional\n        Discard data in a_band (may enhance performance)\n    select : {'a', 'v', 'i'}, optional\n        Which eigenvalues to calculate\n        \n        ======  ========================================\n        select  calculated\n        ======  ========================================\n        'a'     All eigenvalues\n        'v'     Eigenvalues in the interval (min, max]\n        'i'     Eigenvalues with indices min <= i <= max\n        ======  ========================================\n    select_range : (min, max), optional\n        Range of selected eigenvalues\n    check_finite : bool, optional\n        Whether to check that the input matrix contains only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    w : (M,) ndarray\n        The eigenvalues, in ascending order, each repeated according to its\n        multiplicity.\n    \n    Raises\n    ------\n    LinAlgError\n        If eigenvalue computation does not converge.\n    \n    See Also\n    --------\n    \n    :func:`eig_banded`\n        eigenvalues and right eigenvectors for symmetric/Hermitian band matrices\n    :func:`eigvalsh_tridiagonal`\n        eigenvalues of symmetric/Hermitian tridiagonal matrices\n    :func:`eigvals`\n        eigenvalues of general arrays\n    :func:`eigh`\n        eigenvalues and right eigenvectors for symmetric/Hermitian arrays\n    :func:`eig`\n        eigenvalues and right eigenvectors for non-symmetric arrays\n    \n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import eigvals_banded\n    >>> A = np.array([[1, 5, 2, 0], [5, 2, 5, 2], [2, 5, 3, 5], [0, 2, 5, 4]])\n    >>> Ab = np.array([[1, 2, 3, 4], [5, 5, 5, 0], [2, 2, 0, 0]])\n    >>> w = eigvals_banded(Ab, lower=True)\n    >>> w\n    array([-4.26200532, -2.22987175,  3.95222349, 12.53965359])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "dae37c49bb8cb818ba5952ae0a96ad4934e69e5a9efb037792c987353c50d3a8",
            "fields": [
                {
                    "id": "l9dkx40m",
                    "encoding": "",
                    "name": "a_band",
                    "value": "",
                    "defaultValue": "",
                    "description": "The bands of the M by M matrix a.",
                    "type": "(u+1, M) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dag1mo71",
                    "encoding": "",
                    "name": "lower",
                    "value": false,
                    "defaultValue": false,
                    "description": "Is the matrix in the lower form. (Default is upper form)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zb5m3m1c",
                    "encoding": "",
                    "name": "overwrite_a_band",
                    "value": false,
                    "defaultValue": false,
                    "description": "Discard data in a_band (may enhance performance)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "awtywm7h",
                    "encoding": "",
                    "name": "select",
                    "value": "a",
                    "defaultValue": "a",
                    "description": "Which eigenvalues to calculate\n\n======  ========================================\nselect  calculated\n======  ========================================\n'a'     All eigenvalues\n'v'     Eigenvalues in the interval (min, max]\n'i'     Eigenvalues with indices min <= i <= max\n======  ========================================",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m3_8hddx",
                    "encoding": "",
                    "name": "select_range",
                    "value": "",
                    "defaultValue": "",
                    "description": "Range of selected eigenvalues",
                    "type": "(min, max)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3ij4sh60",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrix contains only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ogekekt6",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.decomp.eigvals_banded",
                    "defaultValue": "scipy.linalg.decomp.eigvals_banded",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v3r1gjae",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tuskqdra",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "fo9ymee5",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h9ono1bi",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.decomp",
                    "defaultValue": "scipy.linalg.decomp",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wx4jredj",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dvut_fdt",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "u1nnku4b",
            "name": "decomp.eigvalsh",
            "description": "Solves a standard or generalized eigenvalue problem for a complex\n    Hermitian or real symmetric matrix.\n    \n    Find eigenvalues array ``w`` of array ``a``, where ``b`` is positive\n    definite such that for every eigenvalue \u03bb (i-th entry of w) and its\n    eigenvector vi (i-th column of v) satisfies::\n    \n                      a @ vi = \u03bb * b @ vi\n        vi.conj().T @ a @ vi = \u03bb\n        vi.conj().T @ b @ vi = 1\n    \n    In the standard problem, b is assumed to be the identity matrix.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a : (M, M) array_like\n        A complex Hermitian or real symmetric matrix whose eigenvalues will\n        be computed.\n    b : (M, M) array_like, optional\n        A complex Hermitian or real symmetric definite positive matrix in.\n        If omitted, identity matrix is assumed.\n    lower : bool, optional\n        Whether the pertinent array data is taken from the lower or upper\n        triangle of ``a`` and, if applicable, ``b``. (Default: lower)\n    overwrite_a : bool, optional\n        Whether to overwrite data in ``a`` (may improve performance). Default\n        is False.\n    overwrite_b : bool, optional\n        Whether to overwrite data in ``b`` (may improve performance). Default\n        is False.\n    type : int, optional\n        For the generalized problems, this keyword specifies the problem type\n        to be solved for ``w`` and ``v`` (only takes 1, 2, 3 as possible\n        inputs)::\n        \n            1 =>     a @ v = w @ b @ v\n            2 => a @ b @ v = w @ v\n            3 => b @ a @ v = w @ v\n        \n        This keyword is ignored for standard problems.\n    check_finite : bool, optional\n        Whether to check that the input matrices contain only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    subset_by_index : iterable, optional\n        If provided, this two-element iterable defines the start and the end\n        indices of the desired eigenvalues (ascending order and 0-indexed).\n        To return only the second smallest to fifth smallest eigenvalues,\n        ``[1, 4]`` is used. ``[n-3, n-1]`` returns the largest three. Only\n        available with \"evr\", \"evx\", and \"gvx\" drivers. The entries are\n        directly converted to integers via ``int()``.\n    subset_by_value : iterable, optional\n        If provided, this two-element iterable defines the half-open interval\n        ``(a, b]`` that, if any, only the eigenvalues between these values\n        are returned. Only available with \"evr\", \"evx\", and \"gvx\" drivers. Use\n        ``np.inf`` for the unconstrained ends.\n    driver : str, optional\n        Defines which LAPACK driver should be used. Valid options are \"ev\",\n        \"evd\", \"evr\", \"evx\" for standard problems and \"gv\", \"gvd\", \"gvx\" for\n        generalized (where b is not None) problems. See the Notes section of\n        `scipy.linalg.eigh`.\n    \n    Returns\n    -------\n    w : (N,) ndarray\n        The N (N<=M) selected eigenvalues, in ascending order, each\n        repeated according to its multiplicity.\n    \n    Raises\n    ------\n    LinAlgError\n        If eigenvalue computation does not converge, an error occurred, or\n        b matrix is not definite positive. Note that if input matrices are\n        not symmetric or Hermitian, no error will be reported but results will\n        be wrong.\n    \n    See Also\n    --------\n    \n    :func:`eigh`\n        eigenvalues and right eigenvectors for symmetric/Hermitian arrays\n    :func:`eigvals`\n        eigenvalues of general arrays\n    :func:`eigvals_banded`\n        eigenvalues for symmetric/Hermitian band matrices\n    :func:`eigvalsh_tridiagonal`\n        eigenvalues of symmetric/Hermitian tridiagonal matrices\n    \n    \n    Notes\n    -----\n    This function does not check the input array for being Hermitian/symmetric\n    in order to allow for representing arrays with only their upper/lower\n    triangular parts.\n    \n    This function serves as a one-liner shorthand for `scipy.linalg.eigh` with\n    the option ``eigvals_only=True`` to get the eigenvalues and not the\n    eigenvectors. Here it is kept as a legacy convenience. It might be\n    beneficial to use the main function to have full control and to be a bit\n    more pythonic.\n    \n    Examples\n    --------\n    For more examples see `scipy.linalg.eigh`.\n    \n    >>> import numpy as np\n    >>> from scipy.linalg import eigvalsh\n    >>> A = np.array([[6, 3, 1, 5], [3, 0, 5, 1], [1, 5, 6, 2], [5, 1, 2, 2]])\n    >>> w = eigvalsh(A)\n    >>> w\n    array([-3.74637491, -0.76263923,  6.08502336, 12.42399079])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b1434e0f570c7e9300d201d148587c9ee602be197f069b37d2de3d849a9e8bd6",
            "fields": [
                {
                    "id": "ldytwj6y",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "A complex Hermitian or real symmetric matrix whose eigenvalues will\nbe computed.",
                    "type": "(M, M) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b5chuzw0",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "A complex Hermitian or real symmetric definite positive matrix in.\nIf omitted, identity matrix is assumed.",
                    "type": "(M, M) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_7vypds6",
                    "encoding": "",
                    "name": "lower",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether the pertinent array data is taken from the lower or upper\ntriangle of ``a`` and, if applicable, ``b``. (Default: lower)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tkfm1gc9",
                    "encoding": "",
                    "name": "overwrite_a",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to overwrite data in ``a`` (may improve performance). Default\nis False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lvdujbh0",
                    "encoding": "",
                    "name": "overwrite_b",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to overwrite data in ``b`` (may improve performance). Default\nis False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yhjdzm4a",
                    "encoding": "",
                    "name": "type",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "For the generalized problems, this keyword specifies the problem type\nto be solved for ``w`` and ``v`` (only takes 1, 2, 3 as possible\ninputs)::\n\n    1 =>     a @ v = w @ b @ v\n    2 => a @ b @ v = w @ v\n    3 => b @ a @ v = w @ v\n\nThis keyword is ignored for standard problems.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kcu0qjiz",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrices contain only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "48frw5d0",
                    "encoding": "",
                    "name": "subset_by_index",
                    "value": "",
                    "defaultValue": "",
                    "description": "If provided, this two-element iterable defines the start and the end\nindices of the desired eigenvalues (ascending order and 0-indexed).\nTo return only the second smallest to fifth smallest eigenvalues,\n``[1, 4]`` is used. ``[n-3, n-1]`` returns the largest three. Only\navailable with \"evr\", \"evx\", and \"gvx\" drivers. The entries are\ndirectly converted to integers via ``int()``.",
                    "type": "iterable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p2mb_fzw",
                    "encoding": "",
                    "name": "subset_by_value",
                    "value": "",
                    "defaultValue": "",
                    "description": "If provided, this two-element iterable defines the half-open interval\n``(a, b]`` that, if any, only the eigenvalues between these values\nare returned. Only available with \"evr\", \"evx\", and \"gvx\" drivers. Use\n``np.inf`` for the unconstrained ends.",
                    "type": "iterable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qmhappl9",
                    "encoding": "",
                    "name": "driver",
                    "value": "",
                    "defaultValue": "",
                    "description": "Defines which LAPACK driver should be used. Valid options are \"ev\",\n\"evd\", \"evr\", \"evx\" for standard problems and \"gv\", \"gvd\", \"gvx\" for\ngeneralized (where b is not None) problems. See the Notes section of\n`scipy.linalg.eigh`.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9h3bl1l3",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.decomp.eigvalsh",
                    "defaultValue": "scipy.linalg.decomp.eigvalsh",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ww982v1g",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "at990odd",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "wu_1scn9",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9n39vdb7",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.decomp",
                    "defaultValue": "scipy.linalg.decomp",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "reain2mq",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8sobucac",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "eqebcqqs",
            "name": "decomp.eigvalsh_tridiagonal",
            "description": "Solve eigenvalue problem for a real symmetric tridiagonal matrix.\n    \n    Find eigenvalues `w` of ``a``::\n    \n        a v[:,i] = w[i] v[:,i]\n        v.H v    = identity\n    \n    For a real symmetric matrix ``a`` with diagonal elements `d` and\n    off-diagonal elements `e`.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    d : ndarray, shape (ndim,)\n        The diagonal elements of the array.\n    e : ndarray, shape (ndim-1,)\n        The off-diagonal elements of the array.\n    select : {'a', 'v', 'i'}, optional\n        Which eigenvalues to calculate\n        \n        ======  ========================================\n        select  calculated\n        ======  ========================================\n        'a'     All eigenvalues\n        'v'     Eigenvalues in the interval (min, max]\n        'i'     Eigenvalues with indices min <= i <= max\n        ======  ========================================\n    select_range : (min, max), optional\n        Range of selected eigenvalues\n    check_finite : bool, optional\n        Whether to check that the input matrix contains only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    tol : float\n        The absolute tolerance to which each eigenvalue is required\n        (only used when ``lapack_driver='stebz'``).\n        An eigenvalue (or cluster) is considered to have converged if it\n        lies in an interval of this width. If <= 0. (default),\n        the value ``eps*|a|`` is used where eps is the machine precision,\n        and ``|a|`` is the 1-norm of the matrix ``a``.\n    lapack_driver : str\n        LAPACK function to use, can be 'auto', 'stemr', 'stebz',  'sterf',\n        'stev', or 'stevd'. When 'auto' (default), it will use 'stevd' if\n        ``select='a'`` and 'stebz' otherwise. 'sterf' and 'stev' can only\n        be used when ``select='a'``.\n    \n    Returns\n    -------\n    w : (M,) ndarray\n        The eigenvalues, in ascending order, each repeated according to its\n        multiplicity.\n    \n    Raises\n    ------\n    LinAlgError\n        If eigenvalue computation does not converge.\n    \n    See Also\n    --------\n    \n    :func:`eigh_tridiagonal`\n        eigenvalues and right eiegenvectors for symmetric/Hermitian tridiagonal matrices\n    \n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import eigvalsh_tridiagonal, eigvalsh\n    >>> d = 3*np.ones(4)\n    >>> e = -1*np.ones(3)\n    >>> w = eigvalsh_tridiagonal(d, e)\n    >>> A = np.diag(d) + np.diag(e, k=1) + np.diag(e, k=-1)\n    >>> w2 = eigvalsh(A)  # Verify with other eigenvalue routines\n    >>> np.allclose(w - w2, np.zeros(4))\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "34b55c469551839c8f3f26bfc06c029cb5b3163be76d510fe57780946bc519c4",
            "fields": [
                {
                    "id": "uyccbo_y",
                    "encoding": "",
                    "name": "d",
                    "value": "",
                    "defaultValue": "",
                    "description": "The diagonal elements of the array.",
                    "type": "ndarray, shape (ndim,)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "99isgd_3",
                    "encoding": "",
                    "name": "e",
                    "value": "",
                    "defaultValue": "",
                    "description": "The off-diagonal elements of the array.",
                    "type": "ndarray, shape (ndim-1,)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3umlj62k",
                    "encoding": "",
                    "name": "select",
                    "value": "a",
                    "defaultValue": "a",
                    "description": "Which eigenvalues to calculate\n\n======  ========================================\nselect  calculated\n======  ========================================\n'a'     All eigenvalues\n'v'     Eigenvalues in the interval (min, max]\n'i'     Eigenvalues with indices min <= i <= max\n======  ========================================",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xxcyiqzf",
                    "encoding": "",
                    "name": "select_range",
                    "value": "",
                    "defaultValue": "",
                    "description": "Range of selected eigenvalues",
                    "type": "(min, max)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "foh44v42",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrix contains only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "55o67epw",
                    "encoding": "",
                    "name": "tol",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "The absolute tolerance to which each eigenvalue is required\n(only used when ``lapack_driver='stebz'``).\nAn eigenvalue (or cluster) is considered to have converged if it\nlies in an interval of this width. If <= 0. (default),\nthe value ``eps*|a|`` is used where eps is the machine precision,\nand ``|a|`` is the 1-norm of the matrix ``a``.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b2oklnbv",
                    "encoding": "",
                    "name": "lapack_driver",
                    "value": "auto",
                    "defaultValue": "auto",
                    "description": "LAPACK function to use, can be 'auto', 'stemr', 'stebz',  'sterf',\n'stev', or 'stevd'. When 'auto' (default), it will use 'stevd' if\n``select='a'`` and 'stebz' otherwise. 'sterf' and 'stev' can only\nbe used when ``select='a'``.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4xsc0l6t",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.decomp.eigvalsh_tridiagonal",
                    "defaultValue": "scipy.linalg.decomp.eigvalsh_tridiagonal",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "if8ggkpw",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ydwkudv5",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "alx377sc",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_en_fz2i",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.decomp",
                    "defaultValue": "scipy.linalg.decomp",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pug9_kno",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v26pdyrf",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "3vcr8zns",
            "name": "decomp.get_lapack_funcs",
            "description": "Return available LAPACK function objects from names.\n    \n    Arrays are used to determine the optimal prefix of LAPACK routines.\n    \n    Parameters\n    ----------\n    names : str or sequence of str\n        Name(s) of LAPACK functions without type prefix.\n    \n    arrays : sequence of ndarrays, optional\n        Arrays can be given to determine optimal prefix of LAPACK\n        routines. If not given, double-precision routines will be\n        used, otherwise the most generic type in arrays will be used.\n    \n    dtype : str or dtype, optional\n        Data-type specifier. Not used if `arrays` is non-empty.\n    \n    ilp64 : {True, False, 'preferred'}, optional\n        Whether to return ILP64 routine variant.\n        Choosing 'preferred' returns ILP64 routine if available, and\n        otherwise the 32-bit routine. Default: False\n    \n    Returns\n    -------\n    funcs : list\n        List containing the found function(s).\n    \n    Notes\n    -----\n    This routine automatically chooses between Fortran/C\n    interfaces. Fortran code is used whenever possible for arrays with\n    column major order. In all other cases, C code is preferred.\n    \n    In LAPACK, the naming convention is that all functions start with a\n    type prefix, which depends on the type of the principal\n    matrix. These can be one of {'s', 'd', 'c', 'z'} for the NumPy\n    types {float32, float64, complex64, complex128} respectively, and\n    are stored in attribute ``typecode`` of the returned functions.\n    \n    Examples\n    --------\n    Suppose we would like to use '?lange' routine which computes the selected\n    norm of an array. We pass our array in order to get the correct 'lange'\n    flavor.\n    \n    >>> import numpy as np\n    >>> import scipy.linalg as LA\n    >>> rng = np.random.default_rng()\n    \n    >>> a = rng.random((3,2))\n    >>> x_lange = LA.get_lapack_funcs('lange', (a,))\n    >>> x_lange.typecode\n    'd'\n    >>> x_lange = LA.get_lapack_funcs('lange',(a*1j,))\n    >>> x_lange.typecode\n    'z'\n    \n    Several LAPACK routines work best when its internal WORK array has\n    the optimal size (big enough for fast computation and small enough to\n    avoid waste of memory). This size is determined also by a dedicated query\n    to the function which is often wrapped as a standalone function and\n    commonly denoted as ``###_lwork``. Below is an example for ``?sysv``\n    \n    >>> a = rng.random((1000, 1000))\n    >>> b = rng.random((1000, 1)) * 1j\n    >>> # We pick up zsysv and zsysv_lwork due to b array\n    ... xsysv, xlwork = LA.get_lapack_funcs(('sysv', 'sysv_lwork'), (a, b))\n    >>> opt_lwork, _ = xlwork(a.shape[0])  # returns a complex for 'z' prefix\n    >>> udut, ipiv, x, info = xsysv(a, b, lwork=int(opt_lwork.real))",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1a835c54935df8d5c1128067498376a9de2ee530fb1db054e58f09541ec8647c",
            "fields": [
                {
                    "id": "46h0dmzj",
                    "encoding": "",
                    "name": "names",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name(s) of LAPACK functions without type prefix.",
                    "type": "str or sequence of str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "anhe2ed9",
                    "encoding": "",
                    "name": "arrays",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Arrays can be given to determine optimal prefix of LAPACK\nroutines. If not given, double-precision routines will be\nused, otherwise the most generic type in arrays will be used.",
                    "type": "builtins.tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9t1vi2te",
                    "encoding": "",
                    "name": "dtype",
                    "value": "",
                    "defaultValue": "",
                    "description": "Data-type specifier. Not used if `arrays` is non-empty.",
                    "type": "str or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7k31cumv",
                    "encoding": "",
                    "name": "ilp64",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to return ILP64 routine variant.\nChoosing 'preferred' returns ILP64 routine if available, and\notherwise the 32-bit routine. Default: False",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dc6exh7o",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.decomp.get_lapack_funcs",
                    "defaultValue": "scipy.linalg.decomp.get_lapack_funcs",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rqkhfesi",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nazvmfbc",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "miv_ibhf",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "re2coyq_",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.decomp",
                    "defaultValue": "scipy.linalg.decomp",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lc7zjrnc",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zixotuam",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "lz805tn8",
            "name": "decomp.hessenberg",
            "description": "Compute Hessenberg form of a matrix.\n    \n    The Hessenberg decomposition is::\n    \n        A = Q H Q^H\n    \n    where `Q` is unitary/orthogonal and `H` has only zero elements below\n    the first sub-diagonal.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a : (M, M) array_like\n        Matrix to bring into Hessenberg form.\n    calc_q : bool, optional\n        Whether to compute the transformation matrix.  Default is False.\n    overwrite_a : bool, optional\n        Whether to overwrite `a`; may improve performance.\n        Default is False.\n    check_finite : bool, optional\n        Whether to check that the input matrix contains only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    H : (M, M) ndarray\n        Hessenberg form of `a`.\n    Q : (M, M) ndarray\n        Unitary/orthogonal similarity transformation matrix ``A = Q H Q^H``.\n        Only returned if ``calc_q=True``.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import hessenberg\n    >>> A = np.array([[2, 5, 8, 7], [5, 2, 2, 8], [7, 5, 6, 6], [5, 4, 4, 8]])\n    >>> H, Q = hessenberg(A, calc_q=True)\n    >>> H\n    array([[  2.        , -11.65843866,   1.42005301,   0.25349066],\n           [ -9.94987437,  14.53535354,  -5.31022304,   2.43081618],\n           [  0.        ,  -1.83299243,   0.38969961,  -0.51527034],\n           [  0.        ,   0.        ,  -3.83189513,   1.07494686]])\n    >>> np.allclose(Q @ H @ Q.conj().T - A, np.zeros((4, 4)))\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d5f770bb20651660441c9e2a42cc5e3fb0d0813b4571f3461329460a48a72639",
            "fields": [
                {
                    "id": "ihcxho2f",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Matrix to bring into Hessenberg form.",
                    "type": "(M, M) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k72hm1ra",
                    "encoding": "",
                    "name": "calc_q",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to compute the transformation matrix.  Default is False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "02jpj2xe",
                    "encoding": "",
                    "name": "overwrite_a",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to overwrite `a`; may improve performance.\nDefault is False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t2t1jpko",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrix contains only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dcx76y9x",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.decomp.hessenberg",
                    "defaultValue": "scipy.linalg.decomp.hessenberg",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "94v7oyr4",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "psv9qs29",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "2i7zkfvd",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2ovo95y9",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.decomp",
                    "defaultValue": "scipy.linalg.decomp",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8377ecvl",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "faius0z_",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ydhyjezq",
            "name": "decomp.norm",
            "description": "Matrix or vector norm.\n    \n    This function is able to return one of eight different matrix norms,\n    or one of an infinite number of vector norms (described below), depending\n    on the value of the ``ord`` parameter. For tensors with rank different from\n    1 or 2, only `ord=None` is supported.\n    \n    Parameters\n    ----------\n    a : array_like\n        Input array. If `axis` is None, `a` must be 1-D or 2-D, unless `ord`\n        is None. If both `axis` and `ord` are None, the 2-norm of\n        ``a.ravel`` will be returned.\n    ord : {int, inf, -inf, 'fro', 'nuc', None}, optional\n        Order of the norm (see table under ``Notes``). inf means NumPy's\n        `inf` object.\n    axis : {int, 2-tuple of ints, None}, optional\n        If `axis` is an integer, it specifies the axis of `a` along which to\n        compute the vector norms. If `axis` is a 2-tuple, it specifies the\n        axes that hold 2-D matrices, and the matrix norms of these matrices\n        are computed. If `axis` is None then either a vector norm (when `a`\n        is 1-D) or a matrix norm (when `a` is 2-D) is returned.\n    keepdims : bool, optional\n        If this is set to True, the axes which are normed over are left in the\n        result as dimensions with size one. With this option the result will\n        broadcast correctly against the original `a`.\n    check_finite : bool, optional\n        Whether to check that the input matrix contains only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    n : float or ndarray\n        Norm of the matrix or vector(s).\n    \n    Notes\n    -----\n    For values of ``ord <= 0``, the result is, strictly speaking, not a\n    mathematical 'norm', but it may still be useful for various numerical\n    purposes.\n    \n    The following norms can be calculated:\n    \n    =====  ============================  ==========================\n    ord    norm for matrices             norm for vectors\n    =====  ============================  ==========================\n    None   Frobenius norm                2-norm\n    'fro'  Frobenius norm                --\n    'nuc'  nuclear norm                  --\n    inf    max(sum(abs(a), axis=1))      max(abs(a))\n    -inf   min(sum(abs(a), axis=1))      min(abs(a))\n    0      --                            sum(a != 0)\n    1      max(sum(abs(a), axis=0))      as below\n    -1     min(sum(abs(a), axis=0))      as below\n    2      2-norm (largest sing. value)  as below\n    -2     smallest singular value       as below\n    other  --                            sum(abs(a)**ord)**(1./ord)\n    =====  ============================  ==========================\n    \n    The Frobenius norm is given by [1]_:\n    \n        :math:`||A||_F = [\\sum_{i,j} abs(a_{i,j})^2]^{1/2}`\n    \n    The nuclear norm is the sum of the singular values.\n    \n    Both the Frobenius and nuclear norm orders are only defined for\n    matrices.\n    \n    References\n    ----------\n    .. [1] G. H. Golub and C. F. Van Loan, *Matrix Computations*,\n           Baltimore, MD, Johns Hopkins University Press, 1985, pg. 15\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import norm\n    >>> a = np.arange(9) - 4.0\n    >>> a\n    array([-4., -3., -2., -1.,  0.,  1.,  2.,  3.,  4.])\n    >>> b = a.reshape((3, 3))\n    >>> b\n    array([[-4., -3., -2.],\n           [-1.,  0.,  1.],\n           [ 2.,  3.,  4.]])\n    \n    >>> norm(a)\n    7.745966692414834\n    >>> norm(b)\n    7.745966692414834\n    >>> norm(b, 'fro')\n    7.745966692414834\n    >>> norm(a, np.inf)\n    4.0\n    >>> norm(b, np.inf)\n    9.0\n    >>> norm(a, -np.inf)\n    0.0\n    >>> norm(b, -np.inf)\n    2.0\n    \n    >>> norm(a, 1)\n    20.0\n    >>> norm(b, 1)\n    7.0\n    >>> norm(a, -1)\n    -4.6566128774142013e-010\n    >>> norm(b, -1)\n    6.0\n    >>> norm(a, 2)\n    7.745966692414834\n    >>> norm(b, 2)\n    7.3484692283495345\n    \n    >>> norm(a, -2)\n    0.0\n    >>> norm(b, -2)\n    1.8570331885190563e-016\n    >>> norm(a, 3)\n    5.8480354764257312\n    >>> norm(a, -3)\n    0.0",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "59c784b2c0990185a381b90d70b86caf293c2f4b16995669c2ff2eb53c9b6cc8",
            "fields": [
                {
                    "id": "gb9mvcs1",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array. If `axis` is None, `a` must be 1-D or 2-D, unless `ord`\nis None. If both `axis` and `ord` are None, the 2-norm of\n``a.ravel`` will be returned.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ikjqrjms",
                    "encoding": "",
                    "name": "ord",
                    "value": "",
                    "defaultValue": "",
                    "description": "Order of the norm (see table under ``Notes``). inf means NumPy's\n`inf` object.",
                    "type": "{int, inf, -inf, 'fro', 'nuc', None}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "13nsomcy",
                    "encoding": "",
                    "name": "axis",
                    "value": "",
                    "defaultValue": "",
                    "description": "If `axis` is an integer, it specifies the axis of `a` along which to\ncompute the vector norms. If `axis` is a 2-tuple, it specifies the\naxes that hold 2-D matrices, and the matrix norms of these matrices\nare computed. If `axis` is None then either a vector norm (when `a`\nis 1-D) or a matrix norm (when `a` is 2-D) is returned.",
                    "type": "{int, 2-tuple of ints, None}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ajmeoxam",
                    "encoding": "",
                    "name": "keepdims",
                    "value": false,
                    "defaultValue": false,
                    "description": "If this is set to True, the axes which are normed over are left in the\nresult as dimensions with size one. With this option the result will\nbroadcast correctly against the original `a`.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ep8zw2kd",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrix contains only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2lgrx94j",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.decomp.norm",
                    "defaultValue": "scipy.linalg.decomp.norm",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s9_yxrzh",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t1tj47ah",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "haq7_dt6",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y8rg2jlp",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.decomp",
                    "defaultValue": "scipy.linalg.decomp",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9nsge4p3",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0x5bqpzt",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "5xjyrptm",
            "name": "decomp_cholesky.cho_factor",
            "description": "Compute the Cholesky decomposition of a matrix, to use in cho_solve\n    \n    Returns a matrix containing the Cholesky decomposition,\n    ``A = L L*`` or ``A = U* U`` of a Hermitian positive-definite matrix `a`.\n    The return value can be directly used as the first parameter to cho_solve.\n    \n    .. warning::\n        The returned matrix also contains random data in the entries not\n        used by the Cholesky decomposition. If you need to zero these\n        entries, use the function `cholesky` instead.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a : (M, M) array_like\n        Matrix to be decomposed\n    lower : bool, optional\n        Whether to compute the upper or lower triangular Cholesky factorization.\n        During decomposition, only the selected half of the matrix is referenced.\n        (Default: upper-triangular)\n    overwrite_a : bool, optional\n        Whether to overwrite data in a (may improve performance)\n    check_finite : bool, optional\n        Whether to check that the entire input matrix contains only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    c : (M, M) ndarray\n        Matrix whose upper or lower triangle contains the Cholesky factor\n        of `a`. Other parts of the matrix contain random data.\n    lower : bool\n        Flag indicating whether the factor is in the lower or upper triangle\n    \n    Raises\n    ------\n    LinAlgError\n        Raised if decomposition fails.\n    \n    See Also\n    --------\n    \n    :func:`cho_solve`\n        Solve a linear set equations using the Cholesky factorization of a matrix.\n    \n    \n    Notes\n    -----\n    During the finiteness check (if selected), the entire matrix `a` is\n    checked. During decomposition, `a` is assumed to be symmetric or Hermitian\n    (as applicable), and only the half selected by option `lower` is referenced.\n    Consequently, if `a` is asymmetric/non-Hermitian, `cholesky` may still\n    succeed if the symmetric/Hermitian matrix represented by the selected half\n    is positive definite, yet it may fail if an element in the other half is\n    non-finite.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import cho_factor\n    >>> A = np.array([[9, 3, 1, 5], [3, 7, 5, 1], [1, 5, 9, 2], [5, 1, 2, 6]])\n    >>> c, low = cho_factor(A)\n    >>> c\n    array([[3.        , 1.        , 0.33333333, 1.66666667],\n           [3.        , 2.44948974, 1.90515869, -0.27216553],\n           [1.        , 5.        , 2.29330749, 0.8559528 ],\n           [5.        , 1.        , 2.        , 1.55418563]])\n    >>> np.allclose(np.triu(c).T @ np. triu(c) - A, np.zeros((4, 4)))\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "99fdf222b672a49143171f5dea05b329976bb2521b5a809a57b685a9e924a9c0",
            "fields": [
                {
                    "id": "cggjq8eo",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Matrix to be decomposed",
                    "type": "(M, M) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zhyi52pa",
                    "encoding": "",
                    "name": "lower",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to compute the upper or lower triangular Cholesky factorization.\nDuring decomposition, only the selected half of the matrix is referenced.\n(Default: upper-triangular)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k9tmta7v",
                    "encoding": "",
                    "name": "overwrite_a",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to overwrite data in a (may improve performance)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kkv2f46i",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the entire input matrix contains only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "igzo2f2y",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.decomp_cholesky.cho_factor",
                    "defaultValue": "scipy.linalg.decomp_cholesky.cho_factor",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pu3_94ns",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bdhhd97l",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "y8sfszq7",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2onhtjtj",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.decomp_cholesky",
                    "defaultValue": "scipy.linalg.decomp_cholesky",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m_t9c30m",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1m63clcg",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "xdhp3tjc",
            "name": "decomp_cholesky.cho_solve",
            "description": "Solve the linear equations A x = b, given the Cholesky factorization of A.\n    \n    Parameters\n    ----------\n    (c, lower) : tuple, (array, bool)\n        Cholesky factorization of a, as given by cho_factor\n    b : array\n        Right-hand side\n    overwrite_b : bool, optional\n        Whether to overwrite data in b (may improve performance)\n    check_finite : bool, optional\n        Whether to check that the input matrices contain only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    x : array\n        The solution to the system A x = b\n    \n    See Also\n    --------\n    cho_factor : Cholesky factorization of a matrix\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import cho_factor, cho_solve\n    >>> A = np.array([[9, 3, 1, 5], [3, 7, 5, 1], [1, 5, 9, 2], [5, 1, 2, 6]])\n    >>> c, low = cho_factor(A)\n    >>> x = cho_solve((c, low), [1, 1, 1, 1])\n    >>> np.allclose(A @ x - [1, 1, 1, 1], np.zeros(4))\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b827f4f2625013d65335f079707fc0920adc73cc4066b142b230920ecbd7b708",
            "fields": [
                {
                    "id": "y4enbpeo",
                    "encoding": "",
                    "name": "c_and_lower",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ex2iul_9",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "Right-hand side",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a6lwv6sn",
                    "encoding": "",
                    "name": "overwrite_b",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to overwrite data in b (may improve performance)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wul3rffr",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrices contain only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nm5a1__c",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.decomp_cholesky.cho_solve",
                    "defaultValue": "scipy.linalg.decomp_cholesky.cho_solve",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w6_o06gx",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sbnptogu",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "sl0rfp91",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z4s4n5nx",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.decomp_cholesky",
                    "defaultValue": "scipy.linalg.decomp_cholesky",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rw9t0nct",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hinzu0iq",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "_hq8vsag",
            "name": "decomp_cholesky.cho_solve_banded",
            "description": "Solve the linear equations ``A x = b``, given the Cholesky factorization of\n    the banded Hermitian ``A``.\n    \n    Parameters\n    ----------\n    (cb, lower) : tuple, (ndarray, bool)\n        `cb` is the Cholesky factorization of A, as given by cholesky_banded.\n        `lower` must be the same value that was given to cholesky_banded.\n    b : array_like\n        Right-hand side\n    overwrite_b : bool, optional\n        If True, the function will overwrite the values in `b`.\n    check_finite : bool, optional\n        Whether to check that the input matrices contain only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    x : array\n        The solution to the system A x = b\n    \n    See Also\n    --------\n    cholesky_banded : Cholesky factorization of a banded matrix\n    \n    Notes\n    -----\n    \n    .. versionadded:: 0.8.0\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import cholesky_banded, cho_solve_banded\n    >>> Ab = np.array([[0, 0, 1j, 2, 3j], [0, -1, -2, 3, 4], [9, 8, 7, 6, 9]])\n    >>> A = np.diag(Ab[0,2:], k=2) + np.diag(Ab[1,1:], k=1)\n    >>> A = A + A.conj().T + np.diag(Ab[2, :])\n    >>> c = cholesky_banded(Ab)\n    >>> x = cho_solve_banded((c, False), np.ones(5))\n    >>> np.allclose(A @ x - np.ones(5), np.zeros(5))\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c5bab6b0d9c044fc43952d0c7fa6cf47c78029463829cfb66400f5ed5dede228",
            "fields": [
                {
                    "id": "b5uch1nu",
                    "encoding": "",
                    "name": "cb_and_lower",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_bogww8x",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "Right-hand side",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uocqg_8n",
                    "encoding": "",
                    "name": "overwrite_b",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, the function will overwrite the values in `b`.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r05qggxn",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrices contain only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ywpu909w",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.decomp_cholesky.cho_solve_banded",
                    "defaultValue": "scipy.linalg.decomp_cholesky.cho_solve_banded",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q_qwrt50",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xjf5sqpd",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "l1jn7iw8",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0_piydrw",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.decomp_cholesky",
                    "defaultValue": "scipy.linalg.decomp_cholesky",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "chec7mj9",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v7nevuzf",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "drjy45q9",
            "name": "decomp_cholesky.cholesky",
            "description": "Compute the Cholesky decomposition of a matrix.\n    \n    Returns the Cholesky decomposition, :math:`A = L L^*` or\n    :math:`A = U^* U` of a Hermitian positive-definite matrix A.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a : (M, M) array_like\n        Matrix to be decomposed\n    lower : bool, optional\n        Whether to compute the upper- or lower-triangular Cholesky\n        factorization. During decomposition, only the selected half of the\n        matrix is referenced. Default is upper-triangular.\n    overwrite_a : bool, optional\n        Whether to overwrite data in `a` (may improve performance).\n    check_finite : bool, optional\n        Whether to check that the entire input matrix contains only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    c : (M, M) ndarray\n        Upper- or lower-triangular Cholesky factor of `a`.\n    \n    Raises\n    ------\n    LinAlgError : if decomposition fails.\n    \n    Notes\n    -----\n    During the finiteness check (if selected), the entire matrix `a` is\n    checked. During decomposition, `a` is assumed to be symmetric or Hermitian\n    (as applicable), and only the half selected by option `lower` is referenced.\n    Consequently, if `a` is asymmetric/non-Hermitian, `cholesky` may still\n    succeed if the symmetric/Hermitian matrix represented by the selected half\n    is positive definite, yet it may fail if an element in the other half is\n    non-finite.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import cholesky\n    >>> a = np.array([[1,-2j],[2j,5]])\n    >>> L = cholesky(a, lower=True)\n    >>> L\n    array([[ 1.+0.j,  0.+0.j],\n           [ 0.+2.j,  1.+0.j]])\n    >>> L @ L.T.conj()\n    array([[ 1.+0.j,  0.-2.j],\n           [ 0.+2.j,  5.+0.j]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "bd408d884a3bf09f5ea9859e84e9db0d5a03ca1fef62e94845a2fe9b2413f7a6",
            "fields": [
                {
                    "id": "5jynf5ob",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Matrix to be decomposed",
                    "type": "(M, M) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wn286mkt",
                    "encoding": "",
                    "name": "lower",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to compute the upper- or lower-triangular Cholesky\nfactorization. During decomposition, only the selected half of the\nmatrix is referenced. Default is upper-triangular.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bhktznzp",
                    "encoding": "",
                    "name": "overwrite_a",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to overwrite data in `a` (may improve performance).",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0v3cm2l7",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the entire input matrix contains only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sj1x3gdh",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.decomp_cholesky.cholesky",
                    "defaultValue": "scipy.linalg.decomp_cholesky.cholesky",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pw6kbdgb",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "le9c1xl1",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "nl4kf471",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_pyb1rbe",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.decomp_cholesky",
                    "defaultValue": "scipy.linalg.decomp_cholesky",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7fcarc02",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6g2jpz_o",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "b8i25ttq",
            "name": "decomp_cholesky.cholesky_banded",
            "description": "Cholesky decompose a banded Hermitian positive-definite matrix\n    \n    The matrix a is stored in ab either in lower-diagonal or upper-\n    diagonal ordered form::\n    \n        ab[u + i - j, j] == a[i,j]        (if upper form; i <= j)\n        ab[    i - j, j] == a[i,j]        (if lower form; i >= j)\n    \n    Example of ab (shape of a is (6,6), u=2)::\n    \n        upper form:\n        *   *   a02 a13 a24 a35\n        *   a01 a12 a23 a34 a45\n        a00 a11 a22 a33 a44 a55\n    \n        lower form:\n        a00 a11 a22 a33 a44 a55\n        a10 a21 a32 a43 a54 *\n        a20 a31 a42 a53 *   *\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    ab : (u + 1, M) array_like\n        Banded matrix\n    overwrite_ab : bool, optional\n        Discard data in ab (may enhance performance)\n    lower : bool, optional\n        Is the matrix in the lower form. (Default is upper form)\n    check_finite : bool, optional\n        Whether to check that the input matrix contains only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    c : (u + 1, M) ndarray\n        Cholesky factorization of a, in the same banded format as ab\n    \n    See Also\n    --------\n    \n    :func:`cho_solve_banded`\n        Solve a linear set equations, given the Cholesky factorization of a banded Hermitian.\n    \n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import cholesky_banded\n    >>> from numpy import allclose, zeros, diag\n    >>> Ab = np.array([[0, 0, 1j, 2, 3j], [0, -1, -2, 3, 4], [9, 8, 7, 6, 9]])\n    >>> A = np.diag(Ab[0,2:], k=2) + np.diag(Ab[1,1:], k=1)\n    >>> A = A + A.conj().T + np.diag(Ab[2, :])\n    >>> c = cholesky_banded(Ab)\n    >>> C = np.diag(c[0, 2:], k=2) + np.diag(c[1, 1:], k=1) + np.diag(c[2, :])\n    >>> np.allclose(C.conj().T @ C - A, np.zeros((5, 5)))\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2f069e2eac33559267418a14305005fb102f69ecba19b10e87e1c9a29b62b5d2",
            "fields": [
                {
                    "id": "fyx700d2",
                    "encoding": "",
                    "name": "ab",
                    "value": "",
                    "defaultValue": "",
                    "description": "Banded matrix",
                    "type": "(u + 1, M) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dbvwx8jo",
                    "encoding": "",
                    "name": "overwrite_ab",
                    "value": false,
                    "defaultValue": false,
                    "description": "Discard data in ab (may enhance performance)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n1rypvp8",
                    "encoding": "",
                    "name": "lower",
                    "value": false,
                    "defaultValue": false,
                    "description": "Is the matrix in the lower form. (Default is upper form)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g7mf4ykn",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrix contains only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_625qqc3",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.decomp_cholesky.cholesky_banded",
                    "defaultValue": "scipy.linalg.decomp_cholesky.cholesky_banded",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "reuoh7sc",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xoisglx3",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "4e7d8c5h",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a936s9e3",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.decomp_cholesky",
                    "defaultValue": "scipy.linalg.decomp_cholesky",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4o60c3pf",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nr6zhjow",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "9709htr5",
            "name": "decomp_cholesky.get_lapack_funcs",
            "description": "Return available LAPACK function objects from names.\n    \n    Arrays are used to determine the optimal prefix of LAPACK routines.\n    \n    Parameters\n    ----------\n    names : str or sequence of str\n        Name(s) of LAPACK functions without type prefix.\n    \n    arrays : sequence of ndarrays, optional\n        Arrays can be given to determine optimal prefix of LAPACK\n        routines. If not given, double-precision routines will be\n        used, otherwise the most generic type in arrays will be used.\n    \n    dtype : str or dtype, optional\n        Data-type specifier. Not used if `arrays` is non-empty.\n    \n    ilp64 : {True, False, 'preferred'}, optional\n        Whether to return ILP64 routine variant.\n        Choosing 'preferred' returns ILP64 routine if available, and\n        otherwise the 32-bit routine. Default: False\n    \n    Returns\n    -------\n    funcs : list\n        List containing the found function(s).\n    \n    Notes\n    -----\n    This routine automatically chooses between Fortran/C\n    interfaces. Fortran code is used whenever possible for arrays with\n    column major order. In all other cases, C code is preferred.\n    \n    In LAPACK, the naming convention is that all functions start with a\n    type prefix, which depends on the type of the principal\n    matrix. These can be one of {'s', 'd', 'c', 'z'} for the NumPy\n    types {float32, float64, complex64, complex128} respectively, and\n    are stored in attribute ``typecode`` of the returned functions.\n    \n    Examples\n    --------\n    Suppose we would like to use '?lange' routine which computes the selected\n    norm of an array. We pass our array in order to get the correct 'lange'\n    flavor.\n    \n    >>> import numpy as np\n    >>> import scipy.linalg as LA\n    >>> rng = np.random.default_rng()\n    \n    >>> a = rng.random((3,2))\n    >>> x_lange = LA.get_lapack_funcs('lange', (a,))\n    >>> x_lange.typecode\n    'd'\n    >>> x_lange = LA.get_lapack_funcs('lange',(a*1j,))\n    >>> x_lange.typecode\n    'z'\n    \n    Several LAPACK routines work best when its internal WORK array has\n    the optimal size (big enough for fast computation and small enough to\n    avoid waste of memory). This size is determined also by a dedicated query\n    to the function which is often wrapped as a standalone function and\n    commonly denoted as ``###_lwork``. Below is an example for ``?sysv``\n    \n    >>> a = rng.random((1000, 1000))\n    >>> b = rng.random((1000, 1)) * 1j\n    >>> # We pick up zsysv and zsysv_lwork due to b array\n    ... xsysv, xlwork = LA.get_lapack_funcs(('sysv', 'sysv_lwork'), (a, b))\n    >>> opt_lwork, _ = xlwork(a.shape[0])  # returns a complex for 'z' prefix\n    >>> udut, ipiv, x, info = xsysv(a, b, lwork=int(opt_lwork.real))",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7bdc77d9d6238b50d220ccde53503ea649085adb814da94fba5ba45084f7affd",
            "fields": [
                {
                    "id": "p70cph9t",
                    "encoding": "",
                    "name": "names",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name(s) of LAPACK functions without type prefix.",
                    "type": "str or sequence of str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "56mvi8nj",
                    "encoding": "",
                    "name": "arrays",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Arrays can be given to determine optimal prefix of LAPACK\nroutines. If not given, double-precision routines will be\nused, otherwise the most generic type in arrays will be used.",
                    "type": "builtins.tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d3pey7v_",
                    "encoding": "",
                    "name": "dtype",
                    "value": "",
                    "defaultValue": "",
                    "description": "Data-type specifier. Not used if `arrays` is non-empty.",
                    "type": "str or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t5fv4uy_",
                    "encoding": "",
                    "name": "ilp64",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to return ILP64 routine variant.\nChoosing 'preferred' returns ILP64 routine if available, and\notherwise the 32-bit routine. Default: False",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r1k3cvrg",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.decomp_cholesky.get_lapack_funcs",
                    "defaultValue": "scipy.linalg.decomp_cholesky.get_lapack_funcs",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d4oscl61",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "65dbggo3",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "sygr62k1",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d493micw",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.decomp_cholesky",
                    "defaultValue": "scipy.linalg.decomp_cholesky",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kp8m6_2f",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sobhq7mu",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "u6zc5e_x",
            "name": "decomp_lu.get_lapack_funcs",
            "description": "Return available LAPACK function objects from names.\n    \n    Arrays are used to determine the optimal prefix of LAPACK routines.\n    \n    Parameters\n    ----------\n    names : str or sequence of str\n        Name(s) of LAPACK functions without type prefix.\n    \n    arrays : sequence of ndarrays, optional\n        Arrays can be given to determine optimal prefix of LAPACK\n        routines. If not given, double-precision routines will be\n        used, otherwise the most generic type in arrays will be used.\n    \n    dtype : str or dtype, optional\n        Data-type specifier. Not used if `arrays` is non-empty.\n    \n    ilp64 : {True, False, 'preferred'}, optional\n        Whether to return ILP64 routine variant.\n        Choosing 'preferred' returns ILP64 routine if available, and\n        otherwise the 32-bit routine. Default: False\n    \n    Returns\n    -------\n    funcs : list\n        List containing the found function(s).\n    \n    Notes\n    -----\n    This routine automatically chooses between Fortran/C\n    interfaces. Fortran code is used whenever possible for arrays with\n    column major order. In all other cases, C code is preferred.\n    \n    In LAPACK, the naming convention is that all functions start with a\n    type prefix, which depends on the type of the principal\n    matrix. These can be one of {'s', 'd', 'c', 'z'} for the NumPy\n    types {float32, float64, complex64, complex128} respectively, and\n    are stored in attribute ``typecode`` of the returned functions.\n    \n    Examples\n    --------\n    Suppose we would like to use '?lange' routine which computes the selected\n    norm of an array. We pass our array in order to get the correct 'lange'\n    flavor.\n    \n    >>> import numpy as np\n    >>> import scipy.linalg as LA\n    >>> rng = np.random.default_rng()\n    \n    >>> a = rng.random((3,2))\n    >>> x_lange = LA.get_lapack_funcs('lange', (a,))\n    >>> x_lange.typecode\n    'd'\n    >>> x_lange = LA.get_lapack_funcs('lange',(a*1j,))\n    >>> x_lange.typecode\n    'z'\n    \n    Several LAPACK routines work best when its internal WORK array has\n    the optimal size (big enough for fast computation and small enough to\n    avoid waste of memory). This size is determined also by a dedicated query\n    to the function which is often wrapped as a standalone function and\n    commonly denoted as ``###_lwork``. Below is an example for ``?sysv``\n    \n    >>> a = rng.random((1000, 1000))\n    >>> b = rng.random((1000, 1)) * 1j\n    >>> # We pick up zsysv and zsysv_lwork due to b array\n    ... xsysv, xlwork = LA.get_lapack_funcs(('sysv', 'sysv_lwork'), (a, b))\n    >>> opt_lwork, _ = xlwork(a.shape[0])  # returns a complex for 'z' prefix\n    >>> udut, ipiv, x, info = xsysv(a, b, lwork=int(opt_lwork.real))",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5b7c46022b16d88d0f2edb3cdcb0220bd4bec78ae315444e0b1e6ce4b165d29a",
            "fields": [
                {
                    "id": "yixzs7lb",
                    "encoding": "",
                    "name": "names",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name(s) of LAPACK functions without type prefix.",
                    "type": "str or sequence of str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k18vgph7",
                    "encoding": "",
                    "name": "arrays",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Arrays can be given to determine optimal prefix of LAPACK\nroutines. If not given, double-precision routines will be\nused, otherwise the most generic type in arrays will be used.",
                    "type": "builtins.tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "19y2fzjt",
                    "encoding": "",
                    "name": "dtype",
                    "value": "",
                    "defaultValue": "",
                    "description": "Data-type specifier. Not used if `arrays` is non-empty.",
                    "type": "str or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4bdo42o7",
                    "encoding": "",
                    "name": "ilp64",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to return ILP64 routine variant.\nChoosing 'preferred' returns ILP64 routine if available, and\notherwise the 32-bit routine. Default: False",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iu_qu71t",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.decomp_lu.get_lapack_funcs",
                    "defaultValue": "scipy.linalg.decomp_lu.get_lapack_funcs",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "49b8sfr5",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mhv4wsbm",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "fpg0tg0o",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kzb8c8f_",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.decomp_lu",
                    "defaultValue": "scipy.linalg.decomp_lu",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6lie3e21",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i175fg37",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "htsllkme",
            "name": "decomp_lu.lu",
            "description": "Compute LU decomposition of a matrix with partial pivoting.\n    \n    The decomposition satisfies::\n    \n        A = P @ L @ U\n    \n    where ``P`` is a permutation matrix, ``L`` lower triangular with unit\n    diagonal elements, and ``U`` upper triangular. If `permute_l` is set to\n    ``True`` then ``L`` is returned already permuted and hence satisfying\n    ``A = L @ U``.\n    \n    Parameters\n    ----------\n    a : (M, N) array_like\n        Array to decompose\n    permute_l : bool, optional\n        Perform the multiplication P*L (Default: do not permute)\n    overwrite_a : bool, optional\n        Whether to overwrite data in a (may improve performance)\n    check_finite : bool, optional\n        Whether to check that the input matrix contains only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    p_indices : bool, optional\n        If ``True`` the permutation information is returned as row indices.\n        The default is ``False`` for backwards-compatibility reasons.\n    \n    Returns\n    -------\n    **(If `permute_l` is ``False``)**\n    \n    p : (..., M, M) ndarray\n        Permutation arrays or vectors depending on `p_indices`\n    l : (..., M, K) ndarray\n        Lower triangular or trapezoidal array with unit diagonal.\n        ``K = min(M, N)``\n    u : (..., K, N) ndarray\n        Upper triangular or trapezoidal array\n    \n    **(If `permute_l` is ``True``)**\n    \n    pl : (..., M, K) ndarray\n        Permuted L matrix.\n        ``K = min(M, N)``\n    u : (..., K, N) ndarray\n        Upper triangular or trapezoidal array\n    \n    Notes\n    -----\n    Permutation matrices are costly since they are nothing but row reorder of\n    ``L`` and hence indices are strongly recommended to be used instead if the\n    permutation is required. The relation in the 2D case then becomes simply\n    ``A = L[P, :] @ U``. In higher dimensions, it is better to use `permute_l`\n    to avoid complicated indexing tricks.\n    \n    In 2D case, if one has the indices however, for some reason, the\n    permutation matrix is still needed then it can be constructed by\n    ``np.eye(M)[P, :]``.\n    \n    Examples\n    --------\n    \n    >>> import numpy as np\n    >>> from scipy.linalg import lu\n    >>> A = np.array([[2, 5, 8, 7], [5, 2, 2, 8], [7, 5, 6, 6], [5, 4, 4, 8]])\n    >>> p, l, u = lu(A)\n    >>> np.allclose(A, p @ l @ u)\n    True\n    >>> p  # Permutation matrix\n    array([[0., 1., 0., 0.],  # Row index 1\n           [0., 0., 0., 1.],  # Row index 3\n           [1., 0., 0., 0.],  # Row index 0\n           [0., 0., 1., 0.]]) # Row index 2\n    >>> p, _, _ = lu(A, p_indices=True)\n    >>> p\n    array([1, 3, 0, 2], dtype=int32)  # as given by row indices above\n    >>> np.allclose(A, l[p, :] @ u)\n    True\n    \n    We can also use nd-arrays, for example, a demonstration with 4D array:\n    \n    >>> rng = np.random.default_rng()\n    >>> A = rng.uniform(low=-4, high=4, size=[3, 2, 4, 8])\n    >>> p, l, u = lu(A)\n    >>> p.shape, l.shape, u.shape\n    ((3, 2, 4, 4), (3, 2, 4, 4), (3, 2, 4, 8))\n    >>> np.allclose(A, p @ l @ u)\n    True\n    >>> PL, U = lu(A, permute_l=True)\n    >>> np.allclose(A, PL @ U)\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4d68831149c8d4559b73bf7ecd87e19874107591b9ba99888d2bf9c44f2b4346",
            "fields": [
                {
                    "id": "9zu7t8n_",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Array to decompose",
                    "type": "(M, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qw2jnqsh",
                    "encoding": "",
                    "name": "permute_l",
                    "value": false,
                    "defaultValue": false,
                    "description": "Perform the multiplication P*L (Default: do not permute)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qw_0jukx",
                    "encoding": "",
                    "name": "overwrite_a",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to overwrite data in a (may improve performance)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c497n5z9",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrix contains only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q3wziden",
                    "encoding": "",
                    "name": "p_indices",
                    "value": false,
                    "defaultValue": false,
                    "description": "If ``True`` the permutation information is returned as row indices.\nThe default is ``False`` for backwards-compatibility reasons.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8j9sakws",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.decomp_lu.lu",
                    "defaultValue": "scipy.linalg.decomp_lu.lu",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1k6qmyw6",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "etrwjtc9",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "fpn1xug2",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n5qfepm3",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.decomp_lu",
                    "defaultValue": "scipy.linalg.decomp_lu",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u7dbgmde",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dquf5mj0",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "6ydr7s3k",
            "name": "decomp_lu.lu_factor",
            "description": "Compute pivoted LU decomposition of a matrix.\n    \n    The decomposition is::\n    \n        A = P L U\n    \n    where P is a permutation matrix, L lower triangular with unit\n    diagonal elements, and U upper triangular.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a : (M, N) array_like\n        Matrix to decompose\n    overwrite_a : bool, optional\n        Whether to overwrite data in A (may increase performance)\n    check_finite : bool, optional\n        Whether to check that the input matrix contains only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    lu : (M, N) ndarray\n        Matrix containing U in its upper triangle, and L in its lower triangle.\n        The unit diagonal elements of L are not stored.\n    piv : (K,) ndarray\n        Pivot indices representing the permutation matrix P:\n        row i of matrix was interchanged with row piv[i].\n        Of shape ``(K,)``, with ``K = min(M, N)``.\n    \n    See Also\n    --------\n    \n    :func:`lu`\n        gives lu factorization in more user-friendly format\n    :func:`lu_solve`\n        solve an equation system using the LU factorization of a matrix\n    \n    \n    Notes\n    -----\n    This is a wrapper to the ``*GETRF`` routines from LAPACK. Unlike\n    :func:`lu`, it outputs the L and U factors into a single array\n    and returns pivot indices instead of a permutation matrix.\n    \n    While the underlying ``*GETRF`` routines return 1-based pivot indices, the\n    ``piv`` array returned by ``lu_factor`` contains 0-based indices.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import lu_factor\n    >>> A = np.array([[2, 5, 8, 7], [5, 2, 2, 8], [7, 5, 6, 6], [5, 4, 4, 8]])\n    >>> lu, piv = lu_factor(A)\n    >>> piv\n    array([2, 2, 3, 3], dtype=int32)\n    \n    Convert LAPACK's ``piv`` array to NumPy index and test the permutation\n    \n    >>> def pivot_to_permutation(piv):\n    ...     perm = np.arange(len(piv))\n    ...     for i in range(len(piv)):\n    ...         perm[i], perm[piv[i]] = perm[piv[i]], perm[i]\n    ...     return perm\n    ...\n    >>> p_inv = pivot_to_permutation(piv)\n    >>> p_inv\n    array([2, 0, 3, 1])\n    >>> L, U = np.tril(lu, k=-1) + np.eye(4), np.triu(lu)\n    >>> np.allclose(A[p_inv] - L @ U, np.zeros((4, 4)))\n    True\n    \n    The P matrix in P L U is defined by the inverse permutation and\n    can be recovered using argsort:\n    \n    >>> p = np.argsort(p_inv)\n    >>> p\n    array([1, 3, 0, 2])\n    >>> np.allclose(A - L[p] @ U, np.zeros((4, 4)))\n    True\n    \n    or alternatively:\n    \n    >>> P = np.eye(4)[p]\n    >>> np.allclose(A - P @ L @ U, np.zeros((4, 4)))\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d7ddd352f76f6c21bea5feac3d3a7d0f503fabfb032ebb454b589f6dbe2c00e7",
            "fields": [
                {
                    "id": "iw1x8lar",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Matrix to decompose",
                    "type": "(M, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "04evw6yh",
                    "encoding": "",
                    "name": "overwrite_a",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to overwrite data in A (may increase performance)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yytp38va",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrix contains only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9e544kbe",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.decomp_lu.lu_factor",
                    "defaultValue": "scipy.linalg.decomp_lu.lu_factor",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y1k8vui3",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ji2spuzj",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "0gp54dlc",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "idihebro",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.decomp_lu",
                    "defaultValue": "scipy.linalg.decomp_lu",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u5llcmr1",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c77y5tso",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "8fo8kw9d",
            "name": "decomp_lu.lu_solve",
            "description": "Solve an equation system, a x = b, given the LU factorization of a\n    \n    Parameters\n    ----------\n    (lu, piv)\n        Factorization of the coefficient matrix a, as given by lu_factor.\n        In particular piv are 0-indexed pivot indices.\n    b : array\n        Right-hand side\n    trans : {0, 1, 2}, optional\n        Type of system to solve:\n    \n        =====  =========\n        trans  system\n        =====  =========\n        0      a x   = b\n        1      a^T x = b\n        2      a^H x = b\n        =====  =========\n    overwrite_b : bool, optional\n        Whether to overwrite data in b (may increase performance)\n    check_finite : bool, optional\n        Whether to check that the input matrices contain only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    x : array\n        Solution to the system\n    \n    See Also\n    --------\n    lu_factor : LU factorize a matrix\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import lu_factor, lu_solve\n    >>> A = np.array([[2, 5, 8, 7], [5, 2, 2, 8], [7, 5, 6, 6], [5, 4, 4, 8]])\n    >>> b = np.array([1, 1, 1, 1])\n    >>> lu, piv = lu_factor(A)\n    >>> x = lu_solve((lu, piv), b)\n    >>> np.allclose(A @ x - b, np.zeros((4,)))\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "05db8647e4a87c6234ababc03abe1c249d8fc837453da1bc0c6fbb82159beb5a",
            "fields": [
                {
                    "id": "g4k_oz1j",
                    "encoding": "",
                    "name": "lu_and_piv",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q0z3r17y",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "Right-hand side",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8q0kdcjz",
                    "encoding": "",
                    "name": "trans",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Type of system to solve:\n\n=====  =========\ntrans  system\n=====  =========\n0      a x   = b\n1      a^T x = b\n2      a^H x = b\n=====  =========",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "577hc1nh",
                    "encoding": "",
                    "name": "overwrite_b",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to overwrite data in b (may increase performance)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dlvpol73",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrices contain only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1911tycj",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.decomp_lu.lu_solve",
                    "defaultValue": "scipy.linalg.decomp_lu.lu_solve",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4asdnh4t",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "og_h9_pp",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "pphura3g",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j546kffa",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.decomp_lu",
                    "defaultValue": "scipy.linalg.decomp_lu",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "os8mpfc9",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v1wszs1i",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "i1k7my4n",
            "name": "decomp_qr.get_lapack_funcs",
            "description": "Return available LAPACK function objects from names.\n    \n    Arrays are used to determine the optimal prefix of LAPACK routines.\n    \n    Parameters\n    ----------\n    names : str or sequence of str\n        Name(s) of LAPACK functions without type prefix.\n    \n    arrays : sequence of ndarrays, optional\n        Arrays can be given to determine optimal prefix of LAPACK\n        routines. If not given, double-precision routines will be\n        used, otherwise the most generic type in arrays will be used.\n    \n    dtype : str or dtype, optional\n        Data-type specifier. Not used if `arrays` is non-empty.\n    \n    ilp64 : {True, False, 'preferred'}, optional\n        Whether to return ILP64 routine variant.\n        Choosing 'preferred' returns ILP64 routine if available, and\n        otherwise the 32-bit routine. Default: False\n    \n    Returns\n    -------\n    funcs : list\n        List containing the found function(s).\n    \n    Notes\n    -----\n    This routine automatically chooses between Fortran/C\n    interfaces. Fortran code is used whenever possible for arrays with\n    column major order. In all other cases, C code is preferred.\n    \n    In LAPACK, the naming convention is that all functions start with a\n    type prefix, which depends on the type of the principal\n    matrix. These can be one of {'s', 'd', 'c', 'z'} for the NumPy\n    types {float32, float64, complex64, complex128} respectively, and\n    are stored in attribute ``typecode`` of the returned functions.\n    \n    Examples\n    --------\n    Suppose we would like to use '?lange' routine which computes the selected\n    norm of an array. We pass our array in order to get the correct 'lange'\n    flavor.\n    \n    >>> import numpy as np\n    >>> import scipy.linalg as LA\n    >>> rng = np.random.default_rng()\n    \n    >>> a = rng.random((3,2))\n    >>> x_lange = LA.get_lapack_funcs('lange', (a,))\n    >>> x_lange.typecode\n    'd'\n    >>> x_lange = LA.get_lapack_funcs('lange',(a*1j,))\n    >>> x_lange.typecode\n    'z'\n    \n    Several LAPACK routines work best when its internal WORK array has\n    the optimal size (big enough for fast computation and small enough to\n    avoid waste of memory). This size is determined also by a dedicated query\n    to the function which is often wrapped as a standalone function and\n    commonly denoted as ``###_lwork``. Below is an example for ``?sysv``\n    \n    >>> a = rng.random((1000, 1000))\n    >>> b = rng.random((1000, 1)) * 1j\n    >>> # We pick up zsysv and zsysv_lwork due to b array\n    ... xsysv, xlwork = LA.get_lapack_funcs(('sysv', 'sysv_lwork'), (a, b))\n    >>> opt_lwork, _ = xlwork(a.shape[0])  # returns a complex for 'z' prefix\n    >>> udut, ipiv, x, info = xsysv(a, b, lwork=int(opt_lwork.real))",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a4627aac97f3f569c108526426ef587fc4d121a93d66d9d2e48c9a23f50b896e",
            "fields": [
                {
                    "id": "sfdfr236",
                    "encoding": "",
                    "name": "names",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name(s) of LAPACK functions without type prefix.",
                    "type": "str or sequence of str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l_k_9624",
                    "encoding": "",
                    "name": "arrays",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Arrays can be given to determine optimal prefix of LAPACK\nroutines. If not given, double-precision routines will be\nused, otherwise the most generic type in arrays will be used.",
                    "type": "builtins.tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s3xon75f",
                    "encoding": "",
                    "name": "dtype",
                    "value": "",
                    "defaultValue": "",
                    "description": "Data-type specifier. Not used if `arrays` is non-empty.",
                    "type": "str or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s9_v6dym",
                    "encoding": "",
                    "name": "ilp64",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to return ILP64 routine variant.\nChoosing 'preferred' returns ILP64 routine if available, and\notherwise the 32-bit routine. Default: False",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zjg18vj7",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.decomp_qr.get_lapack_funcs",
                    "defaultValue": "scipy.linalg.decomp_qr.get_lapack_funcs",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u_aesgwc",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ssfhina6",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "g1ujfwlf",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7dnlfiih",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.decomp_qr",
                    "defaultValue": "scipy.linalg.decomp_qr",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kdjtutpk",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ex_pzek_",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "cesea0td",
            "name": "decomp_qr.qr",
            "description": "Compute QR decomposition of a matrix.\n    \n    Calculate the decomposition ``A = Q R`` where Q is unitary/orthogonal\n    and R upper triangular.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a : (M, N) array_like\n        Matrix to be decomposed\n    overwrite_a : bool, optional\n        Whether data in `a` is overwritten (may improve performance if\n        `overwrite_a` is set to True by reusing the existing input data\n        structure rather than creating a new one.)\n    lwork : int, optional\n        Work array size, lwork >= a.shape[1]. If None or -1, an optimal size\n        is computed.\n    mode : {'full', 'r', 'economic', 'raw'}, optional\n        Determines what information is to be returned: either both Q and R\n        ('full', default), only R ('r') or both Q and R but computed in\n        economy-size ('economic', see Notes). The final option 'raw'\n        (added in SciPy 0.11) makes the function return two matrices\n        (Q, TAU) in the internal format used by LAPACK.\n    pivoting : bool, optional\n        Whether or not factorization should include pivoting for rank-revealing\n        qr decomposition. If pivoting, compute the decomposition\n        ``A[:, P] = Q @ R`` as above, but where P is chosen such that the\n        diagonal of R is non-increasing. Equivalently, albeit less efficiently,\n        an explicit P matrix may be formed explicitly by permuting the rows or columns\n        (depending on the side of the equation on which it is to be used) of\n        an identity matrix. See Examples.\n    check_finite : bool, optional\n        Whether to check that the input matrix contains only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    Q : float or complex ndarray\n        Of shape (M, M), or (M, K) for ``mode='economic'``. Not returned\n        if ``mode='r'``. Replaced by tuple ``(Q, TAU)`` if ``mode='raw'``.\n    R : float or complex ndarray\n        Of shape (M, N), or (K, N) for ``mode in ['economic', 'raw']``.\n        ``K = min(M, N)``.\n    P : int ndarray\n        Of shape (N,) for ``pivoting=True``. Not returned if\n        ``pivoting=False``.\n    \n    Raises\n    ------\n    LinAlgError\n        Raised if decomposition fails\n    \n    Notes\n    -----\n    This is an interface to the LAPACK routines dgeqrf, zgeqrf,\n    dorgqr, zungqr, dgeqp3, and zgeqp3.\n    \n    If ``mode=economic``, the shapes of Q and R are (M, K) and (K, N) instead\n    of (M,M) and (M,N), with ``K=min(M,N)``.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy import linalg\n    >>> rng = np.random.default_rng()\n    >>> a = rng.standard_normal((9, 6))\n    \n    >>> q, r = linalg.qr(a)\n    >>> np.allclose(a, np.dot(q, r))\n    True\n    >>> q.shape, r.shape\n    ((9, 9), (9, 6))\n    \n    >>> r2 = linalg.qr(a, mode='r')\n    >>> np.allclose(r, r2)\n    True\n    \n    >>> q3, r3 = linalg.qr(a, mode='economic')\n    >>> q3.shape, r3.shape\n    ((9, 6), (6, 6))\n    \n    >>> q4, r4, p4 = linalg.qr(a, pivoting=True)\n    >>> d = np.abs(np.diag(r4))\n    >>> np.all(d[1:] <= d[:-1])\n    True\n    >>> np.allclose(a[:, p4], np.dot(q4, r4))\n    True\n    >>> P = np.eye(p4.size)[p4]\n    >>> np.allclose(a, np.dot(q4, r4) @ P)\n    True\n    >>> np.allclose(a @ P.T, np.dot(q4, r4))\n    True\n    >>> q4.shape, r4.shape, p4.shape\n    ((9, 9), (9, 6), (6,))\n    \n    >>> q5, r5, p5 = linalg.qr(a, mode='economic', pivoting=True)\n    >>> q5.shape, r5.shape, p5.shape\n    ((9, 6), (6, 6), (6,))\n    >>> P = np.eye(6)[:, p5]\n    >>> np.allclose(a @ P, np.dot(q5, r5))\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "3faa37db0596931fde45f01cb230daa9ee246b48783aaf1ebc95156b63313c61",
            "fields": [
                {
                    "id": "wyi9i_kl",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Matrix to be decomposed",
                    "type": "(M, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4oz598cq",
                    "encoding": "",
                    "name": "overwrite_a",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether data in `a` is overwritten (may improve performance if\n`overwrite_a` is set to True by reusing the existing input data\nstructure rather than creating a new one.)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x47yxw_q",
                    "encoding": "",
                    "name": "lwork",
                    "value": "",
                    "defaultValue": "",
                    "description": "Work array size, lwork >= a.shape[1]. If None or -1, an optimal size\nis computed.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6qs25wmy",
                    "encoding": "",
                    "name": "mode",
                    "value": "full",
                    "defaultValue": "full",
                    "description": "Determines what information is to be returned: either both Q and R\n('full', default), only R ('r') or both Q and R but computed in\neconomy-size ('economic', see Notes). The final option 'raw'\n(added in SciPy 0.11) makes the function return two matrices\n(Q, TAU) in the internal format used by LAPACK.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_ksh4uhr",
                    "encoding": "",
                    "name": "pivoting",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether or not factorization should include pivoting for rank-revealing\nqr decomposition. If pivoting, compute the decomposition\n``A[:, P] = Q @ R`` as above, but where P is chosen such that the\ndiagonal of R is non-increasing. Equivalently, albeit less efficiently,\nan explicit P matrix may be formed explicitly by permuting the rows or columns\n(depending on the side of the equation on which it is to be used) of\nan identity matrix. See Examples.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rzpoijh_",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrix contains only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9qs_0_2d",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.decomp_qr.qr",
                    "defaultValue": "scipy.linalg.decomp_qr.qr",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "za3kdnvx",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uk_ucvsb",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "atzmjiux",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y3oshygu",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.decomp_qr",
                    "defaultValue": "scipy.linalg.decomp_qr",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xlscrnkm",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oeauddm_",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ltuawvb6",
            "name": "decomp_qr.qr_multiply",
            "description": "Calculate the QR decomposition and multiply Q with a matrix.\n    \n    Calculate the decomposition ``A = Q R`` where Q is unitary/orthogonal\n    and R upper triangular. Multiply Q with a vector or a matrix c.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a : (M, N), array_like\n        Input array\n    c : array_like\n        Input array to be multiplied by ``q``.\n    mode : {'left', 'right'}, optional\n        ``Q @ c`` is returned if mode is 'left', ``c @ Q`` is returned if\n        mode is 'right'.\n        The shape of c must be appropriate for the matrix multiplications,\n        if mode is 'left', ``min(a.shape) == c.shape[0]``,\n        if mode is 'right', ``a.shape[0] == c.shape[1]``.\n    pivoting : bool, optional\n        Whether or not factorization should include pivoting for rank-revealing\n        qr decomposition, see the documentation of qr.\n    conjugate : bool, optional\n        Whether Q should be complex-conjugated. This might be faster\n        than explicit conjugation.\n    overwrite_a : bool, optional\n        Whether data in a is overwritten (may improve performance)\n    overwrite_c : bool, optional\n        Whether data in c is overwritten (may improve performance).\n        If this is used, c must be big enough to keep the result,\n        i.e. ``c.shape[0]`` = ``a.shape[0]`` if mode is 'left'.\n    \n    Returns\n    -------\n    CQ : ndarray\n        The product of ``Q`` and ``c``.\n    R : (K, N), ndarray\n        R array of the resulting QR factorization where ``K = min(M, N)``.\n    P : (N,) ndarray\n        Integer pivot array. Only returned when ``pivoting=True``.\n    \n    Raises\n    ------\n    LinAlgError\n        Raised if QR decomposition fails.\n    \n    Notes\n    -----\n    This is an interface to the LAPACK routines ``?GEQRF``, ``?ORMQR``,\n    ``?UNMQR``, and ``?GEQP3``.\n    \n    .. versionadded:: 0.11.0\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import qr_multiply, qr\n    >>> A = np.array([[1, 3, 3], [2, 3, 2], [2, 3, 3], [1, 3, 2]])\n    >>> qc, r1, piv1 = qr_multiply(A, 2*np.eye(4), pivoting=1)\n    >>> qc\n    array([[-1.,  1., -1.],\n           [-1., -1.,  1.],\n           [-1., -1., -1.],\n           [-1.,  1.,  1.]])\n    >>> r1\n    array([[-6., -3., -5.            ],\n           [ 0., -1., -1.11022302e-16],\n           [ 0.,  0., -1.            ]])\n    >>> piv1\n    array([1, 0, 2], dtype=int32)\n    >>> q2, r2, piv2 = qr(A, mode='economic', pivoting=1)\n    >>> np.allclose(2*q2 - qc, np.zeros((4, 3)))\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "25b2ffb23e89c16b6571d27ef1024976e0e9ee6e154c9ad8a73ed47c693c4432",
            "fields": [
                {
                    "id": "0o1uer30",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array",
                    "type": "(M, N), arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m5f_kzm1",
                    "encoding": "",
                    "name": "c",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array to be multiplied by ``q``.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rdn3x07z",
                    "encoding": "",
                    "name": "mode",
                    "value": "right",
                    "defaultValue": "right",
                    "description": "``Q @ c`` is returned if mode is 'left', ``c @ Q`` is returned if\nmode is 'right'.\nThe shape of c must be appropriate for the matrix multiplications,\nif mode is 'left', ``min(a.shape) == c.shape[0]``,\nif mode is 'right', ``a.shape[0] == c.shape[1]``.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qgp450vu",
                    "encoding": "",
                    "name": "pivoting",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether or not factorization should include pivoting for rank-revealing\nqr decomposition, see the documentation of qr.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qcnnu_ot",
                    "encoding": "",
                    "name": "conjugate",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether Q should be complex-conjugated. This might be faster\nthan explicit conjugation.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ivwlmxga",
                    "encoding": "",
                    "name": "overwrite_a",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether data in a is overwritten (may improve performance)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "216r120v",
                    "encoding": "",
                    "name": "overwrite_c",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether data in c is overwritten (may improve performance).\nIf this is used, c must be big enough to keep the result,\ni.e. ``c.shape[0]`` = ``a.shape[0]`` if mode is 'left'.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jtg8dncy",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.decomp_qr.qr_multiply",
                    "defaultValue": "scipy.linalg.decomp_qr.qr_multiply",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "73pcfxgk",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bens1vgo",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "j579sgnp",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "owfmgyr2",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.decomp_qr",
                    "defaultValue": "scipy.linalg.decomp_qr",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5lu9zl7p",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3lfxsn2v",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "wn8zikx_",
            "name": "decomp_qr.rq",
            "description": "Compute RQ decomposition of a matrix.\n    \n    Calculate the decomposition ``A = R Q`` where Q is unitary/orthogonal\n    and R upper triangular.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a : (M, N) array_like\n        Matrix to be decomposed\n    overwrite_a : bool, optional\n        Whether data in a is overwritten (may improve performance)\n    lwork : int, optional\n        Work array size, lwork >= a.shape[1]. If None or -1, an optimal size\n        is computed.\n    mode : {'full', 'r', 'economic'}, optional\n        Determines what information is to be returned: either both Q and R\n        ('full', default), only R ('r') or both Q and R but computed in\n        economy-size ('economic', see Notes).\n    check_finite : bool, optional\n        Whether to check that the input matrix contains only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    R : float or complex ndarray\n        Of shape (M, N) or (M, K) for ``mode='economic'``. ``K = min(M, N)``.\n    Q : float or complex ndarray\n        Of shape (N, N) or (K, N) for ``mode='economic'``. Not returned\n        if ``mode='r'``.\n    \n    Raises\n    ------\n    LinAlgError\n        If decomposition fails.\n    \n    Notes\n    -----\n    This is an interface to the LAPACK routines sgerqf, dgerqf, cgerqf, zgerqf,\n    sorgrq, dorgrq, cungrq and zungrq.\n    \n    If ``mode=economic``, the shapes of Q and R are (K, N) and (M, K) instead\n    of (N,N) and (M,N), with ``K=min(M,N)``.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy import linalg\n    >>> rng = np.random.default_rng()\n    >>> a = rng.standard_normal((6, 9))\n    >>> r, q = linalg.rq(a)\n    >>> np.allclose(a, r @ q)\n    True\n    >>> r.shape, q.shape\n    ((6, 9), (9, 9))\n    >>> r2 = linalg.rq(a, mode='r')\n    >>> np.allclose(r, r2)\n    True\n    >>> r3, q3 = linalg.rq(a, mode='economic')\n    >>> r3.shape, q3.shape\n    ((6, 6), (6, 9))",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "abde9d39ea3f1df1f6f8284c7669c03e4fe4ad396ca16b521c1476f61c4a2471",
            "fields": [
                {
                    "id": "1sksl1zq",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Matrix to be decomposed",
                    "type": "(M, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "454ge6_y",
                    "encoding": "",
                    "name": "overwrite_a",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether data in a is overwritten (may improve performance)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_0qe_xc2",
                    "encoding": "",
                    "name": "lwork",
                    "value": "",
                    "defaultValue": "",
                    "description": "Work array size, lwork >= a.shape[1]. If None or -1, an optimal size\nis computed.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "esa2tue2",
                    "encoding": "",
                    "name": "mode",
                    "value": "full",
                    "defaultValue": "full",
                    "description": "Determines what information is to be returned: either both Q and R\n('full', default), only R ('r') or both Q and R but computed in\neconomy-size ('economic', see Notes).",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "34ef80sp",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrix contains only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s72ypi1r",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.decomp_qr.rq",
                    "defaultValue": "scipy.linalg.decomp_qr.rq",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dg78s7iq",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3pe5a492",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "f75y_0s8",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vyc6iu5z",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.decomp_qr",
                    "defaultValue": "scipy.linalg.decomp_qr",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e21qy2v8",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oaeasq4s",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "fvtt2h3a",
            "name": "decomp_schur.eigvals",
            "description": "Compute eigenvalues from an ordinary or generalized eigenvalue problem.\n    \n    Find eigenvalues of a general matrix::\n    \n        a   vr[:,i] = w[i]        b   vr[:,i]\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a : (M, M) array_like\n        A complex or real matrix whose eigenvalues and eigenvectors\n        will be computed.\n    b : (M, M) array_like, optional\n        Right-hand side matrix in a generalized eigenvalue problem.\n        If omitted, identity matrix is assumed.\n    overwrite_a : bool, optional\n        Whether to overwrite data in a (may improve performance)\n    check_finite : bool, optional\n        Whether to check that the input matrices contain only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities\n        or NaNs.\n    homogeneous_eigvals : bool, optional\n        If True, return the eigenvalues in homogeneous coordinates.\n        In this case ``w`` is a (2, M) array so that::\n        \n            w[1,i] a vr[:,i] = w[0,i] b vr[:,i]\n        \n        Default is False.\n    \n    Returns\n    -------\n    w : (M,) or (2, M) double or complex ndarray\n        The eigenvalues, each repeated according to its multiplicity\n        but not in any specific order. The shape is (M,) unless\n        ``homogeneous_eigvals=True``.\n    \n    Raises\n    ------\n    LinAlgError\n        If eigenvalue computation does not converge\n    \n    See Also\n    --------\n    \n    :func:`eig`\n        eigenvalues and right eigenvectors of general arrays.\n    :func:`eigvalsh`\n        eigenvalues of symmetric or Hermitian arrays\n    :func:`eigvals_banded`\n        eigenvalues for symmetric/Hermitian band matrices\n    :func:`eigvalsh_tridiagonal`\n        eigenvalues of symmetric/Hermitian tridiagonal matrices\n    \n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy import linalg\n    >>> a = np.array([[0., -1.], [1., 0.]])\n    >>> linalg.eigvals(a)\n    array([0.+1.j, 0.-1.j])\n    \n    >>> b = np.array([[0., 1.], [1., 1.]])\n    >>> linalg.eigvals(a, b)\n    array([ 1.+0.j, -1.+0.j])\n    \n    >>> a = np.array([[3., 0., 0.], [0., 8., 0.], [0., 0., 7.]])\n    >>> linalg.eigvals(a, homogeneous_eigvals=True)\n    array([[3.+0.j, 8.+0.j, 7.+0.j],\n           [1.+0.j, 1.+0.j, 1.+0.j]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ebdbbd2edf9bbaca478d0e52e71010ceba6a6c3c6d74332e0c769e2f368c2171",
            "fields": [
                {
                    "id": "uf0o9qeq",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "A complex or real matrix whose eigenvalues and eigenvectors\nwill be computed.",
                    "type": "(M, M) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4m8x79e0",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "Right-hand side matrix in a generalized eigenvalue problem.\nIf omitted, identity matrix is assumed.",
                    "type": "(M, M) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vc43xndu",
                    "encoding": "",
                    "name": "overwrite_a",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to overwrite data in a (may improve performance)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c7i_92ji",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrices contain only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities\nor NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m1d_dgp6",
                    "encoding": "",
                    "name": "homogeneous_eigvals",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, return the eigenvalues in homogeneous coordinates.\nIn this case ``w`` is a (2, M) array so that::\n\n    w[1,i] a vr[:,i] = w[0,i] b vr[:,i]\n\nDefault is False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "utx2d9og",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.decomp_schur.eigvals",
                    "defaultValue": "scipy.linalg.decomp_schur.eigvals",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rz9pbxig",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rrko1arf",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "k7svkcyy",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3b4k30z4",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.decomp_schur",
                    "defaultValue": "scipy.linalg.decomp_schur",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q1wwxykr",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3wkqeox4",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "3o3wyhxf",
            "name": "decomp_schur.get_lapack_funcs",
            "description": "Return available LAPACK function objects from names.\n    \n    Arrays are used to determine the optimal prefix of LAPACK routines.\n    \n    Parameters\n    ----------\n    names : str or sequence of str\n        Name(s) of LAPACK functions without type prefix.\n    \n    arrays : sequence of ndarrays, optional\n        Arrays can be given to determine optimal prefix of LAPACK\n        routines. If not given, double-precision routines will be\n        used, otherwise the most generic type in arrays will be used.\n    \n    dtype : str or dtype, optional\n        Data-type specifier. Not used if `arrays` is non-empty.\n    \n    ilp64 : {True, False, 'preferred'}, optional\n        Whether to return ILP64 routine variant.\n        Choosing 'preferred' returns ILP64 routine if available, and\n        otherwise the 32-bit routine. Default: False\n    \n    Returns\n    -------\n    funcs : list\n        List containing the found function(s).\n    \n    Notes\n    -----\n    This routine automatically chooses between Fortran/C\n    interfaces. Fortran code is used whenever possible for arrays with\n    column major order. In all other cases, C code is preferred.\n    \n    In LAPACK, the naming convention is that all functions start with a\n    type prefix, which depends on the type of the principal\n    matrix. These can be one of {'s', 'd', 'c', 'z'} for the NumPy\n    types {float32, float64, complex64, complex128} respectively, and\n    are stored in attribute ``typecode`` of the returned functions.\n    \n    Examples\n    --------\n    Suppose we would like to use '?lange' routine which computes the selected\n    norm of an array. We pass our array in order to get the correct 'lange'\n    flavor.\n    \n    >>> import numpy as np\n    >>> import scipy.linalg as LA\n    >>> rng = np.random.default_rng()\n    \n    >>> a = rng.random((3,2))\n    >>> x_lange = LA.get_lapack_funcs('lange', (a,))\n    >>> x_lange.typecode\n    'd'\n    >>> x_lange = LA.get_lapack_funcs('lange',(a*1j,))\n    >>> x_lange.typecode\n    'z'\n    \n    Several LAPACK routines work best when its internal WORK array has\n    the optimal size (big enough for fast computation and small enough to\n    avoid waste of memory). This size is determined also by a dedicated query\n    to the function which is often wrapped as a standalone function and\n    commonly denoted as ``###_lwork``. Below is an example for ``?sysv``\n    \n    >>> a = rng.random((1000, 1000))\n    >>> b = rng.random((1000, 1)) * 1j\n    >>> # We pick up zsysv and zsysv_lwork due to b array\n    ... xsysv, xlwork = LA.get_lapack_funcs(('sysv', 'sysv_lwork'), (a, b))\n    >>> opt_lwork, _ = xlwork(a.shape[0])  # returns a complex for 'z' prefix\n    >>> udut, ipiv, x, info = xsysv(a, b, lwork=int(opt_lwork.real))",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c1df80c43d95bd9ee4c4c7a656d0fbf0ccc91e92e30b7e8452a98682f9d00e1d",
            "fields": [
                {
                    "id": "c08rjf6_",
                    "encoding": "",
                    "name": "names",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name(s) of LAPACK functions without type prefix.",
                    "type": "str or sequence of str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "raptd27z",
                    "encoding": "",
                    "name": "arrays",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Arrays can be given to determine optimal prefix of LAPACK\nroutines. If not given, double-precision routines will be\nused, otherwise the most generic type in arrays will be used.",
                    "type": "builtins.tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uxx9ynun",
                    "encoding": "",
                    "name": "dtype",
                    "value": "",
                    "defaultValue": "",
                    "description": "Data-type specifier. Not used if `arrays` is non-empty.",
                    "type": "str or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dup7irwf",
                    "encoding": "",
                    "name": "ilp64",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to return ILP64 routine variant.\nChoosing 'preferred' returns ILP64 routine if available, and\notherwise the 32-bit routine. Default: False",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jva9_h1j",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.decomp_schur.get_lapack_funcs",
                    "defaultValue": "scipy.linalg.decomp_schur.get_lapack_funcs",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qvdrojmq",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fg8i0i1f",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "npqomdk5",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1kb4mg_6",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.decomp_schur",
                    "defaultValue": "scipy.linalg.decomp_schur",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g0nl70qy",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z3fzl53q",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "u2etj9t9",
            "name": "decomp_schur.norm",
            "description": "Matrix or vector norm.\n    \n    This function is able to return one of eight different matrix norms,\n    or one of an infinite number of vector norms (described below), depending\n    on the value of the ``ord`` parameter.\n    \n    Parameters\n    ----------\n    x : array_like\n        Input array.  If `axis` is None, `x` must be 1-D or 2-D, unless `ord`\n        is None. If both `axis` and `ord` are None, the 2-norm of\n        ``x.ravel`` will be returned.\n    ord : {int, float, inf, -inf, 'fro', 'nuc'}, optional\n        Order of the norm (see table under ``Notes`` for what values are\n        supported for matrices and vectors respectively). inf means numpy's\n        `inf` object. The default is None.\n    axis : {None, int, 2-tuple of ints}, optional.\n        If `axis` is an integer, it specifies the axis of `x` along which to\n        compute the vector norms.  If `axis` is a 2-tuple, it specifies the\n        axes that hold 2-D matrices, and the matrix norms of these matrices\n        are computed.  If `axis` is None then either a vector norm (when `x`\n        is 1-D) or a matrix norm (when `x` is 2-D) is returned. The default\n        is None.\n    \n    keepdims : bool, optional\n        If this is set to True, the axes which are normed over are left in the\n        result as dimensions with size one.  With this option the result will\n        broadcast correctly against the original `x`.\n    \n    Returns\n    -------\n    n : float or ndarray\n        Norm of the matrix or vector(s).\n    \n    See Also\n    --------\n    scipy.linalg.norm : Similar function in SciPy.\n    \n    Notes\n    -----\n    For values of ``ord < 1``, the result is, strictly speaking, not a\n    mathematical 'norm', but it may still be useful for various numerical\n    purposes.\n    \n    The following norms can be calculated:\n    \n    =====  ============================  ==========================\n    ord    norm for matrices             norm for vectors\n    =====  ============================  ==========================\n    None   Frobenius norm                2-norm\n    'fro'  Frobenius norm                --\n    'nuc'  nuclear norm                  --\n    inf    max(sum(abs(x), axis=1))      max(abs(x))\n    -inf   min(sum(abs(x), axis=1))      min(abs(x))\n    0      --                            sum(x != 0)\n    1      max(sum(abs(x), axis=0))      as below\n    -1     min(sum(abs(x), axis=0))      as below\n    2      2-norm (largest sing. value)  as below\n    -2     smallest singular value       as below\n    other  --                            sum(abs(x)**ord)**(1./ord)\n    =====  ============================  ==========================\n    \n    The Frobenius norm is given by [1]_:\n    \n    :math:`||A||_F = [\\sum_{i,j} abs(a_{i,j})^2]^{1/2}`\n    \n    The nuclear norm is the sum of the singular values.\n    \n    Both the Frobenius and nuclear norm orders are only defined for\n    matrices and raise a ValueError when ``x.ndim != 2``.\n    \n    References\n    ----------\n    .. [1] G. H. Golub and C. F. Van Loan, *Matrix Computations*,\n           Baltimore, MD, Johns Hopkins University Press, 1985, pg. 15\n    \n    Examples\n    --------\n    \n    >>> import numpy as np\n    >>> from numpy import linalg as LA\n    >>> a = np.arange(9) - 4\n    >>> a\n    array([-4, -3, -2, ...,  2,  3,  4])\n    >>> b = a.reshape((3, 3))\n    >>> b\n    array([[-4, -3, -2],\n           [-1,  0,  1],\n           [ 2,  3,  4]])\n    \n    >>> LA.norm(a)\n    7.745966692414834\n    >>> LA.norm(b)\n    7.745966692414834\n    >>> LA.norm(b, 'fro')\n    7.745966692414834\n    >>> LA.norm(a, np.inf)\n    4.0\n    >>> LA.norm(b, np.inf)\n    9.0\n    >>> LA.norm(a, -np.inf)\n    0.0\n    >>> LA.norm(b, -np.inf)\n    2.0\n    \n    >>> LA.norm(a, 1)\n    20.0\n    >>> LA.norm(b, 1)\n    7.0\n    >>> LA.norm(a, -1)\n    -4.6566128774142013e-010\n    >>> LA.norm(b, -1)\n    6.0\n    >>> LA.norm(a, 2)\n    7.745966692414834\n    >>> LA.norm(b, 2)\n    7.3484692283495345\n    \n    >>> LA.norm(a, -2)\n    0.0\n    >>> LA.norm(b, -2)\n    1.8570331885190563e-016 # may vary\n    >>> LA.norm(a, 3)\n    5.8480354764257312 # may vary\n    >>> LA.norm(a, -3)\n    0.0\n    \n    Using the `axis` argument to compute vector norms:\n    \n    >>> c = np.array([[ 1, 2, 3],\n    ...               [-1, 1, 4]])\n    >>> LA.norm(c, axis=0)\n    array([ 1.41421356,  2.23606798,  5.        ])\n    >>> LA.norm(c, axis=1)\n    array([ 3.74165739,  4.24264069])\n    >>> LA.norm(c, ord=1, axis=1)\n    array([ 6.,  6.])\n    \n    Using the `axis` argument to compute matrix norms:\n    \n    >>> m = np.arange(8).reshape(2,2,2)\n    >>> LA.norm(m, axis=(1,2))\n    array([  3.74165739,  11.22497216])\n    >>> LA.norm(m[0, :, :]), LA.norm(m[1, :, :])\n    (3.7416573867739413, 11.224972160321824)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "fc56a556ade8bd9dacbb905e0b995d6a17821b73be56930dec939526e04295f9",
            "fields": [
                {
                    "id": "ab4qsin8",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array.  If `axis` is None, `x` must be 1-D or 2-D, unless `ord`\nis None. If both `axis` and `ord` are None, the 2-norm of\n``x.ravel`` will be returned.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eahp3zyk",
                    "encoding": "",
                    "name": "ord",
                    "value": "",
                    "defaultValue": "",
                    "description": "Order of the norm (see table under ``Notes`` for what values are\nsupported for matrices and vectors respectively). inf means numpy's\n`inf` object. The default is None.",
                    "type": "{int, float, inf, -inf, 'fro', 'nuc'}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d9e5qgp_",
                    "encoding": "",
                    "name": "axis",
                    "value": "",
                    "defaultValue": "",
                    "description": "If `axis` is an integer, it specifies the axis of `x` along which to\ncompute the vector norms.  If `axis` is a 2-tuple, it specifies the\naxes that hold 2-D matrices, and the matrix norms of these matrices\nare computed.  If `axis` is None then either a vector norm (when `x`\nis 1-D) or a matrix norm (when `x` is 2-D) is returned. The default\nis None.",
                    "type": "{None, int, 2-tuple of ints}, optional.",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3_3fgi6p",
                    "encoding": "",
                    "name": "keepdims",
                    "value": false,
                    "defaultValue": false,
                    "description": "If this is set to True, the axes which are normed over are left in the\nresult as dimensions with size one.  With this option the result will\nbroadcast correctly against the original `x`.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fyplg9am",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.decomp_schur.norm",
                    "defaultValue": "scipy.linalg.decomp_schur.norm",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aslcc3xx",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o9d67kvh",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ayzzfnom",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p1mme6vn",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.decomp_schur",
                    "defaultValue": "scipy.linalg.decomp_schur",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7x074tuz",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tav7khgf",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "g4p94ssa",
            "name": "decomp_schur.rsf2csf",
            "description": "Convert real Schur form to complex Schur form.\n    \n    Convert a quasi-diagonal real-valued Schur form to the upper-triangular\n    complex-valued Schur form.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    T : (M, M) array_like\n        Real Schur form of the original array\n    Z : (M, M) array_like\n        Schur transformation matrix\n    check_finite : bool, optional\n        Whether to check that the input arrays contain only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    T : (M, M) ndarray\n        Complex Schur form of the original array\n    Z : (M, M) ndarray\n        Schur transformation matrix corresponding to the complex form\n    \n    See Also\n    --------\n    \n    :func:`schur`\n        Schur decomposition of an array\n    \n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import schur, rsf2csf\n    >>> A = np.array([[0, 2, 2], [0, 1, 2], [1, 0, 1]])\n    >>> T, Z = schur(A)\n    >>> T\n    array([[ 2.65896708,  1.42440458, -1.92933439],\n           [ 0.        , -0.32948354, -0.49063704],\n           [ 0.        ,  1.31178921, -0.32948354]])\n    >>> Z\n    array([[0.72711591, -0.60156188, 0.33079564],\n           [0.52839428, 0.79801892, 0.28976765],\n           [0.43829436, 0.03590414, -0.89811411]])\n    >>> T2 , Z2 = rsf2csf(T, Z)\n    >>> T2\n    array([[2.65896708+0.j, -1.64592781+0.743164187j, -1.21516887+1.00660462j],\n           [0.+0.j , -0.32948354+8.02254558e-01j, -0.82115218-2.77555756e-17j],\n           [0.+0.j , 0.+0.j, -0.32948354-0.802254558j]])\n    >>> Z2\n    array([[0.72711591+0.j,  0.28220393-0.31385693j,  0.51319638-0.17258824j],\n           [0.52839428+0.j,  0.24720268+0.41635578j, -0.68079517-0.15118243j],\n           [0.43829436+0.j, -0.76618703+0.01873251j, -0.03063006+0.46857912j]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "fa0c77b892b42839d9447c26370086a4078a39e058e1dc2adb29b6b20d3bdce9",
            "fields": [
                {
                    "id": "9o2rpy62",
                    "encoding": "",
                    "name": "T",
                    "value": "",
                    "defaultValue": "",
                    "description": "Real Schur form of the original array",
                    "type": "(M, M) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7_xay8iz",
                    "encoding": "",
                    "name": "Z",
                    "value": "",
                    "defaultValue": "",
                    "description": "Schur transformation matrix",
                    "type": "(M, M) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wt5ljjw3",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input arrays contain only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "049f4zpf",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.decomp_schur.rsf2csf",
                    "defaultValue": "scipy.linalg.decomp_schur.rsf2csf",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xtykw2yi",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yd95ji78",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "bgbsoz8a",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3l2f42bc",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.decomp_schur",
                    "defaultValue": "scipy.linalg.decomp_schur",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7q_koins",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4tg7hx_q",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "iy7s08j9",
            "name": "decomp_schur.schur",
            "description": "Compute Schur decomposition of a matrix.\n    \n    The Schur decomposition is::\n    \n        A = Z T Z^H\n    \n    where Z is unitary and T is either upper-triangular, or for real\n    Schur decomposition (output='real'), quasi-upper triangular. In\n    the quasi-triangular form, 2x2 blocks describing complex-valued\n    eigenvalue pairs may extrude from the diagonal.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a : (M, M) array_like\n        Matrix to decompose\n    output : {'real', 'complex'}, optional\n        When the dtype of `a` is real, this specifies whether to compute\n        the real or complex Schur decomposition.\n        When the dtype of `a` is complex, this argument is ignored, and the\n        complex Schur decomposition is computed.\n    lwork : int, optional\n        Work array size. If None or -1, it is automatically computed.\n    overwrite_a : bool, optional\n        Whether to overwrite data in a (may improve performance).\n    sort : {None, callable, 'lhp', 'rhp', 'iuc', 'ouc'}, optional\n        Specifies whether the upper eigenvalues should be sorted. A callable\n        may be passed that, given an eigenvalue, returns a boolean denoting\n        whether the eigenvalue should be sorted to the top-left (True).\n        \n        - If ``output='complex'`` OR the dtype of `a` is complex, the callable\n          should have one argument: the eigenvalue expressed as a complex number.\n        - If ``output='real'`` AND the dtype of `a` is real, the callable should have\n          two arguments: the real and imaginary parts of the eigenvalue, respectively.\n        \n        Alternatively, string parameters may be used::\n        \n            'lhp'   Left-hand plane (real(eigenvalue) < 0.0)\n            'rhp'   Right-hand plane (real(eigenvalue) >= 0.0)\n            'iuc'   Inside the unit circle (abs(eigenvalue) <= 1.0)\n            'ouc'   Outside the unit circle (abs(eigenvalue) > 1.0)\n        \n        Defaults to None (no sorting).\n    check_finite : bool, optional\n        Whether to check that the input matrix contains only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    T : (M, M) ndarray\n        Schur form of A. It is real-valued for the real Schur decomposition.\n    Z : (M, M) ndarray\n        An unitary Schur transformation matrix for A.\n        It is real-valued for the real Schur decomposition.\n    sdim : int\n        If and only if sorting was requested, a third return value will\n        contain the number of eigenvalues satisfying the sort condition.\n        Note that complex conjugate pairs for which the condition is true\n        for either eigenvalue count as 2.\n    \n    Raises\n    ------\n    LinAlgError\n        Error raised under three conditions:\n        \n        1. The algorithm failed due to a failure of the QR algorithm to\n           compute all eigenvalues.\n        2. If eigenvalue sorting was requested, the eigenvalues could not be\n           reordered due to a failure to separate eigenvalues, usually because\n           of poor conditioning.\n        3. If eigenvalue sorting was requested, roundoff errors caused the\n           leading eigenvalues to no longer satisfy the sorting condition.\n    \n    See Also\n    --------\n    \n    :func:`rsf2csf`\n        Convert real Schur form to complex Schur form\n    \n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import schur, eigvals\n    >>> A = np.array([[0, 2, 2], [0, 1, 2], [1, 0, 1]])\n    >>> T, Z = schur(A)\n    >>> T\n    array([[ 2.65896708,  1.42440458, -1.92933439],\n           [ 0.        , -0.32948354, -0.49063704],\n           [ 0.        ,  1.31178921, -0.32948354]])\n    >>> Z\n    array([[0.72711591, -0.60156188, 0.33079564],\n           [0.52839428, 0.79801892, 0.28976765],\n           [0.43829436, 0.03590414, -0.89811411]])\n    \n    >>> T2, Z2 = schur(A, output='complex')\n    >>> T2\n    array([[ 2.65896708, -1.22839825+1.32378589j,  0.42590089+1.51937378j], # may vary\n           [ 0.        , -0.32948354+0.80225456j, -0.59877807+0.56192146j],\n           [ 0.        ,  0.                    , -0.32948354-0.80225456j]])\n    >>> eigvals(T2)\n    array([2.65896708, -0.32948354+0.80225456j, -0.32948354-0.80225456j])   # may vary\n    \n    A custom eigenvalue-sorting condition that sorts by positive imaginary part\n    is satisfied by only one eigenvalue.\n    \n    >>> _, _, sdim = schur(A, output='complex', sort=lambda x: x.imag > 1e-15)\n    >>> sdim\n    1\n    \n    When ``output='real'`` and the array `a` is real, the `sort` callable must accept\n    the real and imaginary parts as separate arguments. Note that now the complex\n    eigenvalues ``-0.32948354+0.80225456j`` and ``-0.32948354-0.80225456j`` will be\n    treated as a complex conjugate pair, and according to the `sdim` documentation,\n    complex conjugate pairs for which the condition is True for *either* eigenvalue\n    increase `sdim` by *two*.\n    \n    >>> _, _, sdim = schur(A, output='real', sort=lambda x, y: y > 1e-15)\n    >>> sdim\n    2",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7fdc772bfbfb4526130798e67c6ba7f2b2cc2b1a478c3dbeadb3250a27204995",
            "fields": [
                {
                    "id": "yn5mk83b",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Matrix to decompose",
                    "type": "(M, M) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s5jkqzh1",
                    "encoding": "",
                    "name": "output",
                    "value": "real",
                    "defaultValue": "real",
                    "description": "When the dtype of `a` is real, this specifies whether to compute\nthe real or complex Schur decomposition.\nWhen the dtype of `a` is complex, this argument is ignored, and the\ncomplex Schur decomposition is computed.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xzmmzrqd",
                    "encoding": "",
                    "name": "lwork",
                    "value": "",
                    "defaultValue": "",
                    "description": "Work array size. If None or -1, it is automatically computed.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zqc8rhpj",
                    "encoding": "",
                    "name": "overwrite_a",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to overwrite data in a (may improve performance).",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fyjuovwm",
                    "encoding": "",
                    "name": "sort",
                    "value": "",
                    "defaultValue": "",
                    "description": "Specifies whether the upper eigenvalues should be sorted. A callable\nmay be passed that, given an eigenvalue, returns a boolean denoting\nwhether the eigenvalue should be sorted to the top-left (True).\n\n- If ``output='complex'`` OR the dtype of `a` is complex, the callable\n  should have one argument: the eigenvalue expressed as a complex number.\n- If ``output='real'`` AND the dtype of `a` is real, the callable should have\n  two arguments: the real and imaginary parts of the eigenvalue, respectively.\n\nAlternatively, string parameters may be used::\n\n    'lhp'   Left-hand plane (real(eigenvalue) < 0.0)\n    'rhp'   Right-hand plane (real(eigenvalue) >= 0.0)\n    'iuc'   Inside the unit circle (abs(eigenvalue) <= 1.0)\n    'ouc'   Outside the unit circle (abs(eigenvalue) > 1.0)\n\nDefaults to None (no sorting).",
                    "type": "{None, callable, 'lhp', 'rhp', 'iuc', 'ouc'}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6gqo51ft",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrix contains only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "begt3t3y",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.decomp_schur.schur",
                    "defaultValue": "scipy.linalg.decomp_schur.schur",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ft_vsufj",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "68w354z5",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "6tupvk_e",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "et3l600z",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.decomp_schur",
                    "defaultValue": "scipy.linalg.decomp_schur",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zb4pheo1",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "alc84yd3",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "3i595ohv",
            "name": "decomp_svd.diagsvd",
            "description": "Construct the sigma matrix in SVD from singular values and size M, N.\n    \n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    s : (M,) or (N,) array_like\n        Singular values\n    M : int\n        Size of the matrix whose singular values are `s`.\n    N : int\n        Size of the matrix whose singular values are `s`.\n    \n    Returns\n    -------\n    S : (M, N) ndarray\n        The S-matrix in the singular value decomposition\n    \n    See Also\n    --------\n    \n    :func:`svd`\n        Singular value decomposition of a matrix\n    :func:`svdvals`\n        Compute singular values of a matrix.\n    \n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import diagsvd\n    >>> vals = np.array([1, 2, 3])  # The array representing the computed svd\n    >>> diagsvd(vals, 3, 4)\n    array([[1, 0, 0, 0],\n           [0, 2, 0, 0],\n           [0, 0, 3, 0]])\n    >>> diagsvd(vals, 4, 3)\n    array([[1, 0, 0],\n           [0, 2, 0],\n           [0, 0, 3],\n           [0, 0, 0]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d9de326ff0c60e16ce046f0b2e14cc17e8cbfbf4dae5770f88e94ce59f49c98c",
            "fields": [
                {
                    "id": "xjflcbm9",
                    "encoding": "",
                    "name": "s",
                    "value": "",
                    "defaultValue": "",
                    "description": "Singular values",
                    "type": "(M,) or (N,) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3pmnpgt7",
                    "encoding": "",
                    "name": "M",
                    "value": "",
                    "defaultValue": "",
                    "description": "Size of the matrix whose singular values are `s`.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fp041ff_",
                    "encoding": "",
                    "name": "N",
                    "value": "",
                    "defaultValue": "",
                    "description": "Size of the matrix whose singular values are `s`.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bb8s2bia",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.decomp_svd.diagsvd",
                    "defaultValue": "scipy.linalg.decomp_svd.diagsvd",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xocf3nho",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qb_7dqeg",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "pcgy2qxx",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c_pr9ysz",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.decomp_svd",
                    "defaultValue": "scipy.linalg.decomp_svd",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z1i5nz7e",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3811gfve",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "7p36ska1",
            "name": "decomp_svd.get_lapack_funcs",
            "description": "Return available LAPACK function objects from names.\n    \n    Arrays are used to determine the optimal prefix of LAPACK routines.\n    \n    Parameters\n    ----------\n    names : str or sequence of str\n        Name(s) of LAPACK functions without type prefix.\n    \n    arrays : sequence of ndarrays, optional\n        Arrays can be given to determine optimal prefix of LAPACK\n        routines. If not given, double-precision routines will be\n        used, otherwise the most generic type in arrays will be used.\n    \n    dtype : str or dtype, optional\n        Data-type specifier. Not used if `arrays` is non-empty.\n    \n    ilp64 : {True, False, 'preferred'}, optional\n        Whether to return ILP64 routine variant.\n        Choosing 'preferred' returns ILP64 routine if available, and\n        otherwise the 32-bit routine. Default: False\n    \n    Returns\n    -------\n    funcs : list\n        List containing the found function(s).\n    \n    Notes\n    -----\n    This routine automatically chooses between Fortran/C\n    interfaces. Fortran code is used whenever possible for arrays with\n    column major order. In all other cases, C code is preferred.\n    \n    In LAPACK, the naming convention is that all functions start with a\n    type prefix, which depends on the type of the principal\n    matrix. These can be one of {'s', 'd', 'c', 'z'} for the NumPy\n    types {float32, float64, complex64, complex128} respectively, and\n    are stored in attribute ``typecode`` of the returned functions.\n    \n    Examples\n    --------\n    Suppose we would like to use '?lange' routine which computes the selected\n    norm of an array. We pass our array in order to get the correct 'lange'\n    flavor.\n    \n    >>> import numpy as np\n    >>> import scipy.linalg as LA\n    >>> rng = np.random.default_rng()\n    \n    >>> a = rng.random((3,2))\n    >>> x_lange = LA.get_lapack_funcs('lange', (a,))\n    >>> x_lange.typecode\n    'd'\n    >>> x_lange = LA.get_lapack_funcs('lange',(a*1j,))\n    >>> x_lange.typecode\n    'z'\n    \n    Several LAPACK routines work best when its internal WORK array has\n    the optimal size (big enough for fast computation and small enough to\n    avoid waste of memory). This size is determined also by a dedicated query\n    to the function which is often wrapped as a standalone function and\n    commonly denoted as ``###_lwork``. Below is an example for ``?sysv``\n    \n    >>> a = rng.random((1000, 1000))\n    >>> b = rng.random((1000, 1)) * 1j\n    >>> # We pick up zsysv and zsysv_lwork due to b array\n    ... xsysv, xlwork = LA.get_lapack_funcs(('sysv', 'sysv_lwork'), (a, b))\n    >>> opt_lwork, _ = xlwork(a.shape[0])  # returns a complex for 'z' prefix\n    >>> udut, ipiv, x, info = xsysv(a, b, lwork=int(opt_lwork.real))",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ba36d8f16e65c4c1b9c50ea2e5dfd8a27a56d0288179a701f5c99f9db9ced458",
            "fields": [
                {
                    "id": "flcrevk1",
                    "encoding": "",
                    "name": "names",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name(s) of LAPACK functions without type prefix.",
                    "type": "str or sequence of str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_j6rc98f",
                    "encoding": "",
                    "name": "arrays",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Arrays can be given to determine optimal prefix of LAPACK\nroutines. If not given, double-precision routines will be\nused, otherwise the most generic type in arrays will be used.",
                    "type": "builtins.tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "exfn4r8f",
                    "encoding": "",
                    "name": "dtype",
                    "value": "",
                    "defaultValue": "",
                    "description": "Data-type specifier. Not used if `arrays` is non-empty.",
                    "type": "str or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_c523n93",
                    "encoding": "",
                    "name": "ilp64",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to return ILP64 routine variant.\nChoosing 'preferred' returns ILP64 routine if available, and\notherwise the 32-bit routine. Default: False",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b_u16a83",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.decomp_svd.get_lapack_funcs",
                    "defaultValue": "scipy.linalg.decomp_svd.get_lapack_funcs",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mgd_hw_1",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1a482vf2",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ynme9y5v",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t0fc1dn5",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.decomp_svd",
                    "defaultValue": "scipy.linalg.decomp_svd",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vx94ora5",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fukocity",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "4yg96xlw",
            "name": "decomp_svd.null_space",
            "description": "Construct an orthonormal basis for the null space of A using SVD\n    \n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    A : (M, N) array_like\n        Input array\n    rcond : float, optional\n        Relative condition number. Singular values ``s`` smaller than\n        ``rcond * max(s)`` are considered zero.\n        Default: floating point eps * max(M,N).\n    overwrite_a : bool, optional\n        Whether to overwrite `a`; may improve performance.\n        Default is False.\n    check_finite : bool, optional\n        Whether to check that the input matrix contains only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    lapack_driver : {'gesdd', 'gesvd'}, optional\n        Whether to use the more efficient divide-and-conquer approach\n        (``'gesdd'``) or general rectangular approach (``'gesvd'``)\n        to compute the SVD. MATLAB and Octave use the ``'gesvd'`` approach.\n        Default is ``'gesdd'``.\n    \n    Returns\n    -------\n    Z : (N, K) ndarray\n        Orthonormal basis for the null space of A.\n        K = dimension of effective null space, as determined by rcond\n    \n    See Also\n    --------\n    \n    :func:`svd`\n        Singular value decomposition of a matrix\n    :func:`orth`\n        Matrix range\n    \n    \n    Examples\n    --------\n    1-D null space:\n    \n    >>> import numpy as np\n    >>> from scipy.linalg import null_space\n    >>> A = np.array([[1, 1], [1, 1]])\n    >>> ns = null_space(A)\n    >>> ns * np.copysign(1, ns[0,0])  # Remove the sign ambiguity of the vector\n    array([[ 0.70710678],\n           [-0.70710678]])\n    \n    2-D null space:\n    \n    >>> from numpy.random import default_rng\n    >>> rng = default_rng()\n    >>> B = rng.random((3, 5))\n    >>> Z = null_space(B)\n    >>> Z.shape\n    (5, 2)\n    >>> np.allclose(B.dot(Z), 0)\n    True\n    \n    The basis vectors are orthonormal (up to rounding error):\n    \n    >>> Z.T.dot(Z)\n    array([[  1.00000000e+00,   6.92087741e-17],\n           [  6.92087741e-17,   1.00000000e+00]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6f0a90901aff79a9727be2708794c27c4d45b307769894f6de3e67c66cdaf099",
            "fields": [
                {
                    "id": "e5xxudo7",
                    "encoding": "",
                    "name": "A",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array",
                    "type": "(M, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "254h18u2",
                    "encoding": "",
                    "name": "rcond",
                    "value": "",
                    "defaultValue": "",
                    "description": "Relative condition number. Singular values ``s`` smaller than\n``rcond * max(s)`` are considered zero.\nDefault: floating point eps * max(M,N).",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5f2rrhjm",
                    "encoding": "",
                    "name": "overwrite_a",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to overwrite `a`; may improve performance.\nDefault is False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fvk4spqy",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrix contains only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wskliq2m",
                    "encoding": "",
                    "name": "lapack_driver",
                    "value": "gesdd",
                    "defaultValue": "gesdd",
                    "description": "Whether to use the more efficient divide-and-conquer approach\n(``'gesdd'``) or general rectangular approach (``'gesvd'``)\nto compute the SVD. MATLAB and Octave use the ``'gesvd'`` approach.\nDefault is ``'gesdd'``.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oxd3e9w0",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.decomp_svd.null_space",
                    "defaultValue": "scipy.linalg.decomp_svd.null_space",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ery2grjh",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cp7b8i7i",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "bcaoz0iy",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lpkmko6x",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.decomp_svd",
                    "defaultValue": "scipy.linalg.decomp_svd",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tl6e8wky",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e7zxdd1h",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "_ljmaob_",
            "name": "decomp_svd.orth",
            "description": "Construct an orthonormal basis for the range of A using SVD\n    \n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    A : (M, N) array_like\n        Input array\n    rcond : float, optional\n        Relative condition number. Singular values ``s`` smaller than\n        ``rcond * max(s)`` are considered zero.\n        Default: floating point eps * max(M,N).\n    \n    Returns\n    -------\n    Q : (M, K) ndarray\n        Orthonormal basis for the range of A.\n        K = effective rank of A, as determined by rcond\n    \n    See Also\n    --------\n    \n    :func:`svd`\n        Singular value decomposition of a matrix\n    :func:`null_space`\n        Matrix null space\n    \n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import orth\n    >>> A = np.array([[2, 0, 0], [0, 5, 0]])  # rank 2 array\n    >>> orth(A)\n    array([[0., 1.],\n           [1., 0.]])\n    >>> orth(A.T)\n    array([[0., 1.],\n           [1., 0.],\n           [0., 0.]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e9b5e39454bcbba2b0eeb250c32ff94347caa38d7cfb4de23ca92d5d2bc44a2d",
            "fields": [
                {
                    "id": "eck3oh0f",
                    "encoding": "",
                    "name": "A",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array",
                    "type": "(M, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2ijlat_a",
                    "encoding": "",
                    "name": "rcond",
                    "value": "",
                    "defaultValue": "",
                    "description": "Relative condition number. Singular values ``s`` smaller than\n``rcond * max(s)`` are considered zero.\nDefault: floating point eps * max(M,N).",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p068wg75",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.decomp_svd.orth",
                    "defaultValue": "scipy.linalg.decomp_svd.orth",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4ezoopkm",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cgvbb2q1",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "fp2syaw0",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5in80jny",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.decomp_svd",
                    "defaultValue": "scipy.linalg.decomp_svd",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t4761b98",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uavv9i88",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "u8zcnjft",
            "name": "decomp_svd.subspace_angles",
            "description": "Compute the subspace angles between two matrices.\n    \n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    A : (M, N) array_like\n        The first input array.\n    B : (M, K) array_like\n        The second input array.\n    \n    Returns\n    -------\n    angles : ndarray, shape (min(N, K),)\n        The subspace angles between the column spaces of `A` and `B` in\n        descending order.\n    \n    See Also\n    --------\n    \n    :func:`orth`\n        ..\n    :func:`svd`\n        ..\n    \n    Notes\n    -----\n    This computes the subspace angles according to the formula\n    provided in [1]_. For equivalence with MATLAB and Octave behavior,\n    use ``angles[0]``.\n    \n    .. versionadded:: 1.0\n    \n    References\n    ----------\n    .. [1] Knyazev A, Argentati M (2002) Principal Angles between Subspaces\n           in an A-Based Scalar Product: Algorithms and Perturbation\n           Estimates. SIAM J. Sci. Comput. 23:2008-2040.\n    \n    Examples\n    --------\n    An Hadamard matrix, which has orthogonal columns, so we expect that\n    the suspace angle to be :math:`\\frac{\\pi}{2}`:\n    \n    >>> import numpy as np\n    >>> from scipy.linalg import hadamard, subspace_angles\n    >>> rng = np.random.default_rng()\n    >>> H = hadamard(4)\n    >>> print(H)\n    [[ 1  1  1  1]\n     [ 1 -1  1 -1]\n     [ 1  1 -1 -1]\n     [ 1 -1 -1  1]]\n    >>> np.rad2deg(subspace_angles(H[:, :2], H[:, 2:]))\n    array([ 90.,  90.])\n    \n    And the subspace angle of a matrix to itself should be zero:\n    \n    >>> subspace_angles(H[:, :2], H[:, :2]) <= 2 * np.finfo(float).eps\n    array([ True,  True], dtype=bool)\n    \n    The angles between non-orthogonal subspaces are in between these extremes:\n    \n    >>> x = rng.standard_normal((4, 3))\n    >>> np.rad2deg(subspace_angles(x[:, :2], x[:, [2]]))\n    array([ 55.832])  # random",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "84375ab3fead829e9b98ef4b608347dd55ffb05c6460c76a663f5a3b68278cfa",
            "fields": [
                {
                    "id": "jj1bpnvc",
                    "encoding": "",
                    "name": "A",
                    "value": "",
                    "defaultValue": "",
                    "description": "The first input array.",
                    "type": "(M, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tr0bqa8g",
                    "encoding": "",
                    "name": "B",
                    "value": "",
                    "defaultValue": "",
                    "description": "The second input array.",
                    "type": "(M, K) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1p0_heii",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.decomp_svd.subspace_angles",
                    "defaultValue": "scipy.linalg.decomp_svd.subspace_angles",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "usdf52az",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ynlfg8t9",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "jw8h5t72",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kc8d1jot",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.decomp_svd",
                    "defaultValue": "scipy.linalg.decomp_svd",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8_dqfq81",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kjd1w4a0",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "r5_hi2ph",
            "name": "decomp_svd.svd",
            "description": "Singular Value Decomposition.\n    \n    Factorizes the matrix `a` into two unitary matrices ``U`` and ``Vh``, and\n    a 1-D array ``s`` of singular values (real, non-negative) such that\n    ``a == U @ S @ Vh``, where ``S`` is a suitably shaped matrix of zeros with\n    main diagonal ``s``.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a : (M, N) array_like\n        Matrix to decompose.\n    full_matrices : bool, optional\n        If True (default), `U` and `Vh` are of shape ``(M, M)``, ``(N, N)``.\n        If False, the shapes are ``(M, K)`` and ``(K, N)``, where\n        ``K = min(M, N)``.\n    compute_uv : bool, optional\n        Whether to compute also ``U`` and ``Vh`` in addition to ``s``.\n        Default is True.\n    overwrite_a : bool, optional\n        Whether to overwrite `a`; may improve performance.\n        Default is False.\n    check_finite : bool, optional\n        Whether to check that the input matrix contains only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    lapack_driver : {'gesdd', 'gesvd'}, optional\n        Whether to use the more efficient divide-and-conquer approach\n        (``'gesdd'``) or general rectangular approach (``'gesvd'``)\n        to compute the SVD. MATLAB and Octave use the ``'gesvd'`` approach.\n        Default is ``'gesdd'``.\n    \n    Returns\n    -------\n    U : ndarray\n        Unitary matrix having left singular vectors as columns.\n        Of shape ``(M, M)`` or ``(M, K)``, depending on `full_matrices`.\n    s : ndarray\n        The singular values, sorted in non-increasing order.\n        Of shape (K,), with ``K = min(M, N)``.\n    Vh : ndarray\n        Unitary matrix having right singular vectors as rows.\n        Of shape ``(N, N)`` or ``(K, N)`` depending on `full_matrices`.\n    For ``compute_uv=False``, only ``s`` is returned.\n    \n    Raises\n    ------\n    LinAlgError\n        If SVD computation does not converge.\n    \n    See Also\n    --------\n    \n    :func:`svdvals`\n        Compute singular values of a matrix.\n    :func:`diagsvd`\n        Construct the Sigma matrix, given the vector s.\n    \n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy import linalg\n    >>> rng = np.random.default_rng()\n    >>> m, n = 9, 6\n    >>> a = rng.standard_normal((m, n)) + 1.j*rng.standard_normal((m, n))\n    >>> U, s, Vh = linalg.svd(a)\n    >>> U.shape,  s.shape, Vh.shape\n    ((9, 9), (6,), (6, 6))\n    \n    Reconstruct the original matrix from the decomposition:\n    \n    >>> sigma = np.zeros((m, n))\n    >>> for i in range(min(m, n)):\n    ...     sigma[i, i] = s[i]\n    >>> a1 = np.dot(U, np.dot(sigma, Vh))\n    >>> np.allclose(a, a1)\n    True\n    \n    Alternatively, use ``full_matrices=False`` (notice that the shape of\n    ``U`` is then ``(m, n)`` instead of ``(m, m)``):\n    \n    >>> U, s, Vh = linalg.svd(a, full_matrices=False)\n    >>> U.shape, s.shape, Vh.shape\n    ((9, 6), (6,), (6, 6))\n    >>> S = np.diag(s)\n    >>> np.allclose(a, np.dot(U, np.dot(S, Vh)))\n    True\n    \n    >>> s2 = linalg.svd(a, compute_uv=False)\n    >>> np.allclose(s, s2)\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "90cb7ef630d29b56329cf33559689b703cbce42279afa0280d80ab9ab354cbc5",
            "fields": [
                {
                    "id": "gg9hkx82",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Matrix to decompose.",
                    "type": "(M, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4aj4z6gc",
                    "encoding": "",
                    "name": "full_matrices",
                    "value": true,
                    "defaultValue": true,
                    "description": "If True (default), `U` and `Vh` are of shape ``(M, M)``, ``(N, N)``.\nIf False, the shapes are ``(M, K)`` and ``(K, N)``, where\n``K = min(M, N)``.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mius_3ah",
                    "encoding": "",
                    "name": "compute_uv",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to compute also ``U`` and ``Vh`` in addition to ``s``.\nDefault is True.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7nst7i79",
                    "encoding": "",
                    "name": "overwrite_a",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to overwrite `a`; may improve performance.\nDefault is False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nmcda1nl",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrix contains only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mdvanido",
                    "encoding": "",
                    "name": "lapack_driver",
                    "value": "gesdd",
                    "defaultValue": "gesdd",
                    "description": "Whether to use the more efficient divide-and-conquer approach\n(``'gesdd'``) or general rectangular approach (``'gesvd'``)\nto compute the SVD. MATLAB and Octave use the ``'gesvd'`` approach.\nDefault is ``'gesdd'``.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "48aiimfs",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.decomp_svd.svd",
                    "defaultValue": "scipy.linalg.decomp_svd.svd",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8m06fcx0",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_x2ab0wn",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "zdjq8pmq",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bzxqlge4",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.decomp_svd",
                    "defaultValue": "scipy.linalg.decomp_svd",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lel6h2fx",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v6sj7n4u",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "9_g4jjcv",
            "name": "decomp_svd.svdvals",
            "description": "Compute singular values of a matrix.\n    \n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a : (M, N) array_like\n        Matrix to decompose.\n    overwrite_a : bool, optional\n        Whether to overwrite `a`; may improve performance.\n        Default is False.\n    check_finite : bool, optional\n        Whether to check that the input matrix contains only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    s : (min(M, N),) ndarray\n        The singular values, sorted in decreasing order.\n    \n    Raises\n    ------\n    LinAlgError\n        If SVD computation does not converge.\n    \n    See Also\n    --------\n    \n    :func:`svd`\n        Compute the full singular value decomposition of a matrix.\n    :func:`diagsvd`\n        Construct the Sigma matrix, given the vector s.\n    \n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import svdvals\n    >>> m = np.array([[1.0, 0.0],\n    ...               [2.0, 3.0],\n    ...               [1.0, 1.0],\n    ...               [0.0, 2.0],\n    ...               [1.0, 0.0]])\n    >>> svdvals(m)\n    array([ 4.28091555,  1.63516424])\n    \n    We can verify the maximum singular value of `m` by computing the maximum\n    length of `m.dot(u)` over all the unit vectors `u` in the (x,y) plane.\n    We approximate \"all\" the unit vectors with a large sample. Because\n    of linearity, we only need the unit vectors with angles in [0, pi].\n    \n    >>> t = np.linspace(0, np.pi, 2000)\n    >>> u = np.array([np.cos(t), np.sin(t)])\n    >>> np.linalg.norm(m.dot(u), axis=0).max()\n    4.2809152422538475\n    \n    `p` is a projection matrix with rank 1. With exact arithmetic,\n    its singular values would be [1, 0, 0, 0].\n    \n    >>> v = np.array([0.1, 0.3, 0.9, 0.3])\n    >>> p = np.outer(v, v)\n    >>> svdvals(p)\n    array([  1.00000000e+00,   2.02021698e-17,   1.56692500e-17,\n             8.15115104e-34])\n    \n    The singular values of an orthogonal matrix are all 1. Here, we\n    create a random orthogonal matrix by using the `rvs()` method of\n    `scipy.stats.ortho_group`.\n    \n    >>> from scipy.stats import ortho_group\n    >>> orth = ortho_group.rvs(4)\n    >>> svdvals(orth)\n    array([ 1.,  1.,  1.,  1.])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a1c548a1a5e17778fe72cb8d7204daa775d756b3be7287c5e05286eb0ba3835d",
            "fields": [
                {
                    "id": "lnlvf4cf",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Matrix to decompose.",
                    "type": "(M, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xy19ukk6",
                    "encoding": "",
                    "name": "overwrite_a",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to overwrite `a`; may improve performance.\nDefault is False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0wh5r3je",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrix contains only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zs271ztq",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.decomp_svd.svdvals",
                    "defaultValue": "scipy.linalg.decomp_svd.svdvals",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z2zheqxc",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6rw4rq9e",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "fjc7txz2",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fche0d2a",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.decomp_svd",
                    "defaultValue": "scipy.linalg.decomp_svd",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3nntjgj8",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vkwjlf7_",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "m27vfz_4",
            "name": "lapack.get_lapack_funcs",
            "description": "Return available LAPACK function objects from names.\n    \n    Arrays are used to determine the optimal prefix of LAPACK routines.\n    \n    Parameters\n    ----------\n    names : str or sequence of str\n        Name(s) of LAPACK functions without type prefix.\n    \n    arrays : sequence of ndarrays, optional\n        Arrays can be given to determine optimal prefix of LAPACK\n        routines. If not given, double-precision routines will be\n        used, otherwise the most generic type in arrays will be used.\n    \n    dtype : str or dtype, optional\n        Data-type specifier. Not used if `arrays` is non-empty.\n    \n    ilp64 : {True, False, 'preferred'}, optional\n        Whether to return ILP64 routine variant.\n        Choosing 'preferred' returns ILP64 routine if available, and\n        otherwise the 32-bit routine. Default: False\n    \n    Returns\n    -------\n    funcs : list\n        List containing the found function(s).\n    \n    Notes\n    -----\n    This routine automatically chooses between Fortran/C\n    interfaces. Fortran code is used whenever possible for arrays with\n    column major order. In all other cases, C code is preferred.\n    \n    In LAPACK, the naming convention is that all functions start with a\n    type prefix, which depends on the type of the principal\n    matrix. These can be one of {'s', 'd', 'c', 'z'} for the NumPy\n    types {float32, float64, complex64, complex128} respectively, and\n    are stored in attribute ``typecode`` of the returned functions.\n    \n    Examples\n    --------\n    Suppose we would like to use '?lange' routine which computes the selected\n    norm of an array. We pass our array in order to get the correct 'lange'\n    flavor.\n    \n    >>> import numpy as np\n    >>> import scipy.linalg as LA\n    >>> rng = np.random.default_rng()\n    \n    >>> a = rng.random((3,2))\n    >>> x_lange = LA.get_lapack_funcs('lange', (a,))\n    >>> x_lange.typecode\n    'd'\n    >>> x_lange = LA.get_lapack_funcs('lange',(a*1j,))\n    >>> x_lange.typecode\n    'z'\n    \n    Several LAPACK routines work best when its internal WORK array has\n    the optimal size (big enough for fast computation and small enough to\n    avoid waste of memory). This size is determined also by a dedicated query\n    to the function which is often wrapped as a standalone function and\n    commonly denoted as ``###_lwork``. Below is an example for ``?sysv``\n    \n    >>> a = rng.random((1000, 1000))\n    >>> b = rng.random((1000, 1)) * 1j\n    >>> # We pick up zsysv and zsysv_lwork due to b array\n    ... xsysv, xlwork = LA.get_lapack_funcs(('sysv', 'sysv_lwork'), (a, b))\n    >>> opt_lwork, _ = xlwork(a.shape[0])  # returns a complex for 'z' prefix\n    >>> udut, ipiv, x, info = xsysv(a, b, lwork=int(opt_lwork.real))",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8e17c98121fb56cfcee7eae7dfd1a2576d790b7c5581d1b19fd37eed3d329b3d",
            "fields": [
                {
                    "id": "p7q49cur",
                    "encoding": "",
                    "name": "names",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name(s) of LAPACK functions without type prefix.",
                    "type": "str or sequence of str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q7270jvz",
                    "encoding": "",
                    "name": "arrays",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Arrays can be given to determine optimal prefix of LAPACK\nroutines. If not given, double-precision routines will be\nused, otherwise the most generic type in arrays will be used.",
                    "type": "builtins.tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "46or4e3v",
                    "encoding": "",
                    "name": "dtype",
                    "value": "",
                    "defaultValue": "",
                    "description": "Data-type specifier. Not used if `arrays` is non-empty.",
                    "type": "str or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7qbmy8kg",
                    "encoding": "",
                    "name": "ilp64",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to return ILP64 routine variant.\nChoosing 'preferred' returns ILP64 routine if available, and\notherwise the 32-bit routine. Default: False",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6kwt8rya",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.lapack.get_lapack_funcs",
                    "defaultValue": "scipy.linalg.lapack.get_lapack_funcs",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h60zpl5o",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4basc79l",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "shawmzkm",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zb9wk2i9",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.lapack",
                    "defaultValue": "scipy.linalg.lapack",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t016ekm7",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4az4vmk5",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "iqpqhfta",
            "name": "matfuncs.coshm",
            "description": "Compute the hyperbolic matrix cosine.\n    \n    This routine uses expm to compute the matrix exponentials.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    A : (N, N) array_like\n        Input array.\n    \n    Returns\n    -------\n    coshm : (N, N) ndarray\n        Hyperbolic matrix cosine of `A`\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import tanhm, sinhm, coshm\n    >>> a = np.array([[1.0, 3.0], [1.0, 4.0]])\n    >>> c = coshm(a)\n    >>> c\n    array([[ 11.24592233,  38.76236492],\n           [ 12.92078831,  50.00828725]])\n    \n    Verify tanhm(a) = sinhm(a).dot(inv(coshm(a)))\n    \n    >>> t = tanhm(a)\n    >>> s = sinhm(a)\n    >>> t - s.dot(np.linalg.inv(c))\n    array([[  2.72004641e-15,   4.55191440e-15],\n           [  0.00000000e+00,  -5.55111512e-16]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "90d09314f80dcecc223d54de3aa13b56f39788e3fe060c691ae98de13803a62a",
            "fields": [
                {
                    "id": "mp8dnv58",
                    "encoding": "",
                    "name": "A",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array.",
                    "type": "(N, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f6ixdesb",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.matfuncs.coshm",
                    "defaultValue": "scipy.linalg.matfuncs.coshm",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7gxxumuy",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oucwujrj",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "math7ki3",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7nqozd1l",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.matfuncs",
                    "defaultValue": "scipy.linalg.matfuncs",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xhdbs7i2",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3ah0id0w",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "qb8d5eu1",
            "name": "matfuncs.cosm",
            "description": "Compute the matrix cosine.\n    \n    This routine uses expm to compute the matrix exponentials.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    A : (N, N) array_like\n        Input array\n    \n    Returns\n    -------\n    cosm : (N, N) ndarray\n        Matrix cosine of A\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import expm, sinm, cosm\n    \n    Euler's identity (exp(i*theta) = cos(theta) + i*sin(theta))\n    applied to a matrix:\n    \n    >>> a = np.array([[1.0, 2.0], [-1.0, 3.0]])\n    >>> expm(1j*a)\n    array([[ 0.42645930+1.89217551j, -2.13721484-0.97811252j],\n           [ 1.06860742+0.48905626j, -1.71075555+0.91406299j]])\n    >>> cosm(a) + 1j*sinm(a)\n    array([[ 0.42645930+1.89217551j, -2.13721484-0.97811252j],\n           [ 1.06860742+0.48905626j, -1.71075555+0.91406299j]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1a391b2ad15a73fa04c13a7929b7ce02a9fb5d5c9c617cbfa106c868eb93e410",
            "fields": [
                {
                    "id": "pvq8v62d",
                    "encoding": "",
                    "name": "A",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array",
                    "type": "(N, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kelfbgm0",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.matfuncs.cosm",
                    "defaultValue": "scipy.linalg.matfuncs.cosm",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5nnfata7",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m2bjutjn",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "y0rxzpcm",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "99cy4qou",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.matfuncs",
                    "defaultValue": "scipy.linalg.matfuncs",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eb2ubdr1",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "af0ctjt1",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "et9xbn51",
            "name": "matfuncs.expm",
            "description": "Compute the matrix exponential of an array.\n    \n    Parameters\n    ----------\n    A : ndarray\n        Input with last two dimensions are square ``(..., n, n)``.\n    \n    Returns\n    -------\n    eA : ndarray\n        The resulting matrix exponential with the same shape of ``A``\n    \n    Notes\n    -----\n    Implements the algorithm given in [1], which is essentially a Pade\n    approximation with a variable order that is decided based on the array\n    data.\n    \n    For input with size ``n``, the memory usage is in the worst case in the\n    order of ``8*(n**2)``. If the input data is not of single and double\n    precision of real and complex dtypes, it is copied to a new array.\n    \n    For cases ``n >= 400``, the exact 1-norm computation cost, breaks even with\n    1-norm estimation and from that point on the estimation scheme given in\n    [2] is used to decide on the approximation order.\n    \n    References\n    ----------\n    .. [1] Awad H. Al-Mohy and Nicholas J. Higham, (2009), \"A New Scaling\n           and Squaring Algorithm for the Matrix Exponential\", SIAM J. Matrix\n           Anal. Appl. 31(3):970-989, :doi:`10.1137/09074721X`\n    \n    .. [2] Nicholas J. Higham and Francoise Tisseur (2000), \"A Block Algorithm\n           for Matrix 1-Norm Estimation, with an Application to 1-Norm\n           Pseudospectra.\" SIAM J. Matrix Anal. Appl. 21(4):1185-1201,\n           :doi:`10.1137/S0895479899356080`\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import expm, sinm, cosm\n    \n    Matrix version of the formula exp(0) = 1:\n    \n    >>> expm(np.zeros((3, 2, 2)))\n    array([[[1., 0.],\n            [0., 1.]],\n    <BLANKLINE>\n           [[1., 0.],\n            [0., 1.]],\n    <BLANKLINE>\n           [[1., 0.],\n            [0., 1.]]])\n    \n    Euler's identity (exp(i*theta) = cos(theta) + i*sin(theta))\n    applied to a matrix:\n    \n    >>> a = np.array([[1.0, 2.0], [-1.0, 3.0]])\n    >>> expm(1j*a)\n    array([[ 0.42645930+1.89217551j, -2.13721484-0.97811252j],\n           [ 1.06860742+0.48905626j, -1.71075555+0.91406299j]])\n    >>> cosm(a) + 1j*sinm(a)\n    array([[ 0.42645930+1.89217551j, -2.13721484-0.97811252j],\n           [ 1.06860742+0.48905626j, -1.71075555+0.91406299j]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "580435883d6b1e87062ca7af1dc391037daecdc09bcba78e9ceb3625a1e6bec2",
            "fields": [
                {
                    "id": "dyvf30aj",
                    "encoding": "",
                    "name": "A",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input with last two dimensions are square ``(..., n, n)``.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "op9ue_dl",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.matfuncs.expm",
                    "defaultValue": "scipy.linalg.matfuncs.expm",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g_5r7w7w",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e0ycipn9",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "vpagx1ne",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d81facw4",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.matfuncs",
                    "defaultValue": "scipy.linalg.matfuncs",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2jebcwge",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1dxb0qqw",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "yvevr0nm",
            "name": "matfuncs.expm_cond",
            "description": "Relative condition number of the matrix exponential in the Frobenius norm.\n    \n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    A : 2-D array_like\n        Square input matrix with shape (N, N).\n    check_finite : bool, optional\n        Whether to check that the input matrix contains only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    kappa : float\n        The relative condition number of the matrix exponential\n        in the Frobenius norm\n    \n    See Also\n    --------\n    \n    :func:`expm`\n        Compute the exponential of a matrix.\n    :func:`expm_frechet`\n        Compute the Frechet derivative of the matrix exponential.\n    \n    \n    Notes\n    -----\n    A faster estimate for the condition number in the 1-norm\n    has been published but is not yet implemented in SciPy.\n    \n    .. versionadded:: 0.14.0\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import expm_cond\n    >>> A = np.array([[-0.3, 0.2, 0.6], [0.6, 0.3, -0.1], [-0.7, 1.2, 0.9]])\n    >>> k = expm_cond(A)\n    >>> k\n    1.7787805864469866",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "12fb2451c07e3e0bd51cc81a888a5294d3ebbabbdfdf43694f270f42e1d7e01c",
            "fields": [
                {
                    "id": "169asnxb",
                    "encoding": "",
                    "name": "A",
                    "value": "",
                    "defaultValue": "",
                    "description": "Square input matrix with shape (N, N).",
                    "type": "2-D arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1clva9us",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrix contains only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zhjtlo0x",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.matfuncs.expm_cond",
                    "defaultValue": "scipy.linalg.matfuncs.expm_cond",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fpehsr91",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d1vo2ac5",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "oiqwr6zs",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "36ug6qo2",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.matfuncs",
                    "defaultValue": "scipy.linalg.matfuncs",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xc535p18",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yvvlaory",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "rf0ssjfq",
            "name": "matfuncs.expm_frechet",
            "description": "Frechet derivative of the matrix exponential of A in the direction E.\n    \n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    A : (N, N) array_like\n        Matrix of which to take the matrix exponential.\n    E : (N, N) array_like\n        Matrix direction in which to take the Frechet derivative.\n    method : str, optional\n        Choice of algorithm. Should be one of\n        \n        - `SPS` (default)\n        - `blockEnlarge`\n    compute_expm : bool, optional\n        Whether to compute also `expm_A` in addition to `expm_frechet_AE`.\n        Default is True.\n    check_finite : bool, optional\n        Whether to check that the input matrix contains only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    expm_A : ndarray\n        Matrix exponential of A.\n    expm_frechet_AE : ndarray\n        Frechet derivative of the matrix exponential of A in the direction E.\n    For ``compute_expm = False``, only `expm_frechet_AE` is returned.\n    \n    See Also\n    --------\n    \n    :func:`expm`\n        Compute the exponential of a matrix.\n    \n    \n    Notes\n    -----\n    This section describes the available implementations that can be selected\n    by the `method` parameter. The default method is *SPS*.\n    \n    Method *blockEnlarge* is a naive algorithm.\n    \n    Method *SPS* is Scaling-Pade-Squaring [1]_.\n    It is a sophisticated implementation which should take\n    only about 3/8 as much time as the naive implementation.\n    The asymptotics are the same.\n    \n    .. versionadded:: 0.13.0\n    \n    References\n    ----------\n    .. [1] Awad H. Al-Mohy and Nicholas J. Higham (2009)\n           Computing the Frechet Derivative of the Matrix Exponential,\n           with an application to Condition Number Estimation.\n           SIAM Journal On Matrix Analysis and Applications.,\n           30 (4). pp. 1639-1657. ISSN 1095-7162\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy import linalg\n    >>> rng = np.random.default_rng()\n    \n    >>> A = rng.standard_normal((3, 3))\n    >>> E = rng.standard_normal((3, 3))\n    >>> expm_A, expm_frechet_AE = linalg.expm_frechet(A, E)\n    >>> expm_A.shape, expm_frechet_AE.shape\n    ((3, 3), (3, 3))\n    \n    Create a 6x6 matrix containing [[A, E], [0, A]]:\n    \n    >>> M = np.zeros((6, 6))\n    >>> M[:3, :3] = A\n    >>> M[:3, 3:] = E\n    >>> M[3:, 3:] = A\n    \n    >>> expm_M = linalg.expm(M)\n    >>> np.allclose(expm_A, expm_M[:3, :3])\n    True\n    >>> np.allclose(expm_frechet_AE, expm_M[:3, 3:])\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f79db9c89e8c879e14d25bd048044808dae9b75a36df2da11e926657a74c92f9",
            "fields": [
                {
                    "id": "_72hyl8r",
                    "encoding": "",
                    "name": "A",
                    "value": "",
                    "defaultValue": "",
                    "description": "Matrix of which to take the matrix exponential.",
                    "type": "(N, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w_mn_5os",
                    "encoding": "",
                    "name": "E",
                    "value": "",
                    "defaultValue": "",
                    "description": "Matrix direction in which to take the Frechet derivative.",
                    "type": "(N, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wugnl4tj",
                    "encoding": "",
                    "name": "method",
                    "value": "",
                    "defaultValue": "",
                    "description": "Choice of algorithm. Should be one of\n\n- `SPS` (default)\n- `blockEnlarge`",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j8f0irjl",
                    "encoding": "",
                    "name": "compute_expm",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to compute also `expm_A` in addition to `expm_frechet_AE`.\nDefault is True.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ngqg6f5r",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrix contains only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1aikzytb",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.matfuncs.expm_frechet",
                    "defaultValue": "scipy.linalg.matfuncs.expm_frechet",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lfuca44x",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cqflehqt",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "boqj8uue",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xzxt9lgg",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.matfuncs",
                    "defaultValue": "scipy.linalg.matfuncs",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "obykkutd",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nyx3dvya",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ae3wfpmo",
            "name": "matfuncs.fractional_matrix_power",
            "description": "Compute the fractional power of a matrix.\n    \n    Proceeds according to the discussion in section (6) of [1]_.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    A : (N, N) array_like\n        Matrix whose fractional power to evaluate.\n    t : float\n        Fractional power.\n    \n    Returns\n    -------\n    X : (N, N) array_like\n        The fractional power of the matrix.\n    \n    References\n    ----------\n    .. [1] Nicholas J. Higham and Lijing lin (2011)\n           \"A Schur-Pade Algorithm for Fractional Powers of a Matrix.\"\n           SIAM Journal on Matrix Analysis and Applications,\n           32 (3). pp. 1056-1078. ISSN 0895-4798\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import fractional_matrix_power\n    >>> a = np.array([[1.0, 3.0], [1.0, 4.0]])\n    >>> b = fractional_matrix_power(a, 0.5)\n    >>> b\n    array([[ 0.75592895,  1.13389342],\n           [ 0.37796447,  1.88982237]])\n    >>> np.dot(b, b)      # Verify square root\n    array([[ 1.,  3.],\n           [ 1.,  4.]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "0117cff2bfe646865f476358b206f45e8118889fe3ace55708933076e896ac44",
            "fields": [
                {
                    "id": "qrbldefo",
                    "encoding": "",
                    "name": "A",
                    "value": "",
                    "defaultValue": "",
                    "description": "Matrix whose fractional power to evaluate.",
                    "type": "(N, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dcik2t2e",
                    "encoding": "",
                    "name": "t",
                    "value": "",
                    "defaultValue": "",
                    "description": "Fractional power.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gndyeha8",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.matfuncs.fractional_matrix_power",
                    "defaultValue": "scipy.linalg.matfuncs.fractional_matrix_power",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1ds2012r",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tueij6h4",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "tq1nahxz",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m6p5obk0",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.matfuncs",
                    "defaultValue": "scipy.linalg.matfuncs",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uqlneeiu",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "59ui7vum",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "lgps26jh",
            "name": "matfuncs.funm",
            "description": "Evaluate a matrix function specified by a callable.\n    \n    Returns the value of matrix-valued function ``f`` at `A`. The\n    function ``f`` is an extension of the scalar-valued function `func`\n    to matrices.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    A : (N, N) array_like\n        Matrix at which to evaluate the function\n    func : callable\n        Callable object that evaluates a scalar function f.\n        Must be vectorized (eg. using vectorize).\n    disp : bool, optional\n        Print warning if error in the result is estimated large\n        instead of returning estimated error. (Default: True)\n    \n    Returns\n    -------\n    funm : (N, N) ndarray\n        Value of the matrix function specified by func evaluated at `A`\n    errest : float\n        (if disp == False)\n        \n        1-norm of the estimated error, ||err||_1 / ||A||_1\n    \n    Notes\n    -----\n    This function implements the general algorithm based on Schur decomposition\n    (Algorithm 9.1.1. in [1]_).\n    \n    If the input matrix is known to be diagonalizable, then relying on the\n    eigendecomposition is likely to be faster. For example, if your matrix is\n    Hermitian, you can do\n    \n    >>> from scipy.linalg import eigh\n    >>> def funm_herm(a, func, check_finite=False):\n    ...     w, v = eigh(a, check_finite=check_finite)\n    ...     ## if you further know that your matrix is positive semidefinite,\n    ...     ## you can optionally guard against precision errors by doing\n    ...     # w = np.maximum(w, 0)\n    ...     w = func(w)\n    ...     return (v * w).dot(v.conj().T)\n    \n    References\n    ----------\n    .. [1] Gene H. Golub, Charles F. van Loan, Matrix Computations 4th ed.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import funm\n    >>> a = np.array([[1.0, 3.0], [1.0, 4.0]])\n    >>> funm(a, lambda x: x*x)\n    array([[  4.,  15.],\n           [  5.,  19.]])\n    >>> a.dot(a)\n    array([[  4.,  15.],\n           [  5.,  19.]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9e995cb0da3899dbeb6dc295f2320ea8e199f3cca1b4d56079ec199adc2e2601",
            "fields": [
                {
                    "id": "agik5kbv",
                    "encoding": "",
                    "name": "A",
                    "value": "",
                    "defaultValue": "",
                    "description": "Matrix at which to evaluate the function",
                    "type": "(N, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mr1ol4nw",
                    "encoding": "",
                    "name": "func",
                    "value": "",
                    "defaultValue": "",
                    "description": "Callable object that evaluates a scalar function f.\nMust be vectorized (eg. using vectorize).",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "izmzo99h",
                    "encoding": "",
                    "name": "disp",
                    "value": true,
                    "defaultValue": true,
                    "description": "Print warning if error in the result is estimated large\ninstead of returning estimated error. (Default: True)",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b_kki5l1",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.matfuncs.funm",
                    "defaultValue": "scipy.linalg.matfuncs.funm",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2lvvbt_9",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ezahcdgv",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "jo5h1wp0",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yjc1hltg",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.matfuncs",
                    "defaultValue": "scipy.linalg.matfuncs",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ot4cr_83",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zidx09d9",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "euvwchxk",
            "name": "matfuncs.inv",
            "description": "Compute the inverse of a matrix.\n    \n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a : array_like\n        Square matrix to be inverted.\n    overwrite_a : bool, optional\n        Discard data in `a` (may improve performance). Default is False.\n    check_finite : bool, optional\n        Whether to check that the input matrix contains only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    ainv : ndarray\n        Inverse of the matrix `a`.\n    \n    Raises\n    ------\n    LinAlgError\n        If `a` is singular.\n    ValueError\n        If `a` is not square, or not 2D.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy import linalg\n    >>> a = np.array([[1., 2.], [3., 4.]])\n    >>> linalg.inv(a)\n    array([[-2. ,  1. ],\n           [ 1.5, -0.5]])\n    >>> np.dot(a, linalg.inv(a))\n    array([[ 1.,  0.],\n           [ 0.,  1.]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1bbf0a3fa39458751f941b64dbedc959e358271def20da296a7a9eff1d1b7c4e",
            "fields": [
                {
                    "id": "tchaek1z",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Square matrix to be inverted.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sjajzf7h",
                    "encoding": "",
                    "name": "overwrite_a",
                    "value": false,
                    "defaultValue": false,
                    "description": "Discard data in `a` (may improve performance). Default is False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p40f2150",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrix contains only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7qtpf38e",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.matfuncs.inv",
                    "defaultValue": "scipy.linalg.matfuncs.inv",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rd_956w7",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qv1__1fv",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "bdwa751d",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xr7b4cnw",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.matfuncs",
                    "defaultValue": "scipy.linalg.matfuncs",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ag98j2q_",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rfxz4cg8",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "trk73zpb",
            "name": "matfuncs.khatri_rao",
            "description": "Khatri-rao product\n    \n    A column-wise Kronecker product of two matrices\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a : (n, k) array_like\n        Input array\n    b : (m, k) array_like\n        Input array\n    \n    Returns\n    -------\n    c:  (n*m, k) ndarray\n        Khatri-rao product of `a` and `b`.\n    \n    Notes\n    -----\n    The mathematical definition of the Khatri-Rao product is:\n    \n    .. math::\n    \n        (A_{ij}  \\bigotimes B_{ij})_{ij}\n    \n    which is the Kronecker product of every column of A and B, e.g.::\n    \n        c = np.vstack([np.kron(a[:, k], b[:, k]) for k in range(b.shape[1])]).T\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy import linalg\n    >>> a = np.array([[1, 2, 3], [4, 5, 6]])\n    >>> b = np.array([[3, 4, 5], [6, 7, 8], [2, 3, 9]])\n    >>> linalg.khatri_rao(a, b)\n    array([[ 3,  8, 15],\n           [ 6, 14, 24],\n           [ 2,  6, 27],\n           [12, 20, 30],\n           [24, 35, 48],\n           [ 8, 15, 54]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "93da13397d534c392ad0a5d2a7fa46096b2b15e633104f519eab80bb80d53ceb",
            "fields": [
                {
                    "id": "sw_b_53c",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array",
                    "type": "(n, k) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mbe75pw2",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array",
                    "type": "(m, k) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sutsehbq",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.matfuncs.khatri_rao",
                    "defaultValue": "scipy.linalg.matfuncs.khatri_rao",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rwkba0zv",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eubnawgj",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "0doiosye",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "huwzd4ur",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.matfuncs",
                    "defaultValue": "scipy.linalg.matfuncs",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "budl17_l",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qmflfemj",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "e63a1t8h",
            "name": "matfuncs.logm",
            "description": "Compute matrix logarithm.\n    \n    The matrix logarithm is the inverse of\n    expm: expm(logm(`A`)) == `A`\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    A : (N, N) array_like\n        Matrix whose logarithm to evaluate\n    disp : bool, optional\n        Emit warning if error in the result is estimated large\n        instead of returning estimated error. (Default: True)\n        \n        .. deprecated:: 1.16.0\n            The `disp` argument is deprecated and will be\n            removed in SciPy 1.18.0. The previously returned error estimate\n            can be computed as ``norm(expm(logm(A)) - A, 1) / norm(A, 1)``.\n    \n    Returns\n    -------\n    logm : (N, N) ndarray\n        Matrix logarithm of `A`\n    errest : float\n        (if disp == False)\n        \n        1-norm of the estimated error, ||err||_1 / ||A||_1\n    \n    References\n    ----------\n    .. [1] Awad H. Al-Mohy and Nicholas J. Higham (2012)\n           \"Improved Inverse Scaling and Squaring Algorithms\n           for the Matrix Logarithm.\"\n           SIAM Journal on Scientific Computing, 34 (4). C152-C169.\n           ISSN 1095-7197\n    \n    .. [2] Nicholas J. Higham (2008)\n           \"Functions of Matrices: Theory and Computation\"\n           ISBN 978-0-898716-46-7\n    \n    .. [3] Nicholas J. Higham and Lijing lin (2011)\n           \"A Schur-Pade Algorithm for Fractional Powers of a Matrix.\"\n           SIAM Journal on Matrix Analysis and Applications,\n           32 (3). pp. 1056-1078. ISSN 0895-4798\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import logm, expm\n    >>> a = np.array([[1.0, 3.0], [1.0, 4.0]])\n    >>> b = logm(a)\n    >>> b\n    array([[-1.02571087,  2.05142174],\n           [ 0.68380725,  1.02571087]])\n    >>> expm(b)         # Verify expm(logm(a)) returns a\n    array([[ 1.,  3.],\n           [ 1.,  4.]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d0ce732c87075b2b0768eff2d1124b0fa2daf7b4596152a1e016be386706e6ee",
            "fields": [
                {
                    "id": "zxz9z5hc",
                    "encoding": "",
                    "name": "A",
                    "value": "",
                    "defaultValue": "",
                    "description": "Matrix whose logarithm to evaluate",
                    "type": "(N, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fxq6ba46",
                    "encoding": "",
                    "name": "disp",
                    "value": "builtins.object",
                    "defaultValue": "builtins.object",
                    "description": "Emit warning if error in the result is estimated large\ninstead of returning estimated error. (Default: True)\n\n.. deprecated:: 1.16.0\n    The `disp` argument is deprecated and will be\n    removed in SciPy 1.18.0. The previously returned error estimate\n    can be computed as ``norm(expm(logm(A)) - A, 1) / norm(A, 1)``.",
                    "type": "builtins.object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "20ax3lzj",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.matfuncs.logm",
                    "defaultValue": "scipy.linalg.matfuncs.logm",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zjufsadf",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j9twezhx",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "le4yhjfp",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wlo6_9ls",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.matfuncs",
                    "defaultValue": "scipy.linalg.matfuncs",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b89tftlm",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z__gb7d6",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "5cz6pxak",
            "name": "matfuncs.norm",
            "description": "Matrix or vector norm.\n    \n    This function is able to return one of eight different matrix norms,\n    or one of an infinite number of vector norms (described below), depending\n    on the value of the ``ord`` parameter. For tensors with rank different from\n    1 or 2, only `ord=None` is supported.\n    \n    Parameters\n    ----------\n    a : array_like\n        Input array. If `axis` is None, `a` must be 1-D or 2-D, unless `ord`\n        is None. If both `axis` and `ord` are None, the 2-norm of\n        ``a.ravel`` will be returned.\n    ord : {int, inf, -inf, 'fro', 'nuc', None}, optional\n        Order of the norm (see table under ``Notes``). inf means NumPy's\n        `inf` object.\n    axis : {int, 2-tuple of ints, None}, optional\n        If `axis` is an integer, it specifies the axis of `a` along which to\n        compute the vector norms. If `axis` is a 2-tuple, it specifies the\n        axes that hold 2-D matrices, and the matrix norms of these matrices\n        are computed. If `axis` is None then either a vector norm (when `a`\n        is 1-D) or a matrix norm (when `a` is 2-D) is returned.\n    keepdims : bool, optional\n        If this is set to True, the axes which are normed over are left in the\n        result as dimensions with size one. With this option the result will\n        broadcast correctly against the original `a`.\n    check_finite : bool, optional\n        Whether to check that the input matrix contains only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    n : float or ndarray\n        Norm of the matrix or vector(s).\n    \n    Notes\n    -----\n    For values of ``ord <= 0``, the result is, strictly speaking, not a\n    mathematical 'norm', but it may still be useful for various numerical\n    purposes.\n    \n    The following norms can be calculated:\n    \n    =====  ============================  ==========================\n    ord    norm for matrices             norm for vectors\n    =====  ============================  ==========================\n    None   Frobenius norm                2-norm\n    'fro'  Frobenius norm                --\n    'nuc'  nuclear norm                  --\n    inf    max(sum(abs(a), axis=1))      max(abs(a))\n    -inf   min(sum(abs(a), axis=1))      min(abs(a))\n    0      --                            sum(a != 0)\n    1      max(sum(abs(a), axis=0))      as below\n    -1     min(sum(abs(a), axis=0))      as below\n    2      2-norm (largest sing. value)  as below\n    -2     smallest singular value       as below\n    other  --                            sum(abs(a)**ord)**(1./ord)\n    =====  ============================  ==========================\n    \n    The Frobenius norm is given by [1]_:\n    \n        :math:`||A||_F = [\\sum_{i,j} abs(a_{i,j})^2]^{1/2}`\n    \n    The nuclear norm is the sum of the singular values.\n    \n    Both the Frobenius and nuclear norm orders are only defined for\n    matrices.\n    \n    References\n    ----------\n    .. [1] G. H. Golub and C. F. Van Loan, *Matrix Computations*,\n           Baltimore, MD, Johns Hopkins University Press, 1985, pg. 15\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import norm\n    >>> a = np.arange(9) - 4.0\n    >>> a\n    array([-4., -3., -2., -1.,  0.,  1.,  2.,  3.,  4.])\n    >>> b = a.reshape((3, 3))\n    >>> b\n    array([[-4., -3., -2.],\n           [-1.,  0.,  1.],\n           [ 2.,  3.,  4.]])\n    \n    >>> norm(a)\n    7.745966692414834\n    >>> norm(b)\n    7.745966692414834\n    >>> norm(b, 'fro')\n    7.745966692414834\n    >>> norm(a, np.inf)\n    4.0\n    >>> norm(b, np.inf)\n    9.0\n    >>> norm(a, -np.inf)\n    0.0\n    >>> norm(b, -np.inf)\n    2.0\n    \n    >>> norm(a, 1)\n    20.0\n    >>> norm(b, 1)\n    7.0\n    >>> norm(a, -1)\n    -4.6566128774142013e-010\n    >>> norm(b, -1)\n    6.0\n    >>> norm(a, 2)\n    7.745966692414834\n    >>> norm(b, 2)\n    7.3484692283495345\n    \n    >>> norm(a, -2)\n    0.0\n    >>> norm(b, -2)\n    1.8570331885190563e-016\n    >>> norm(a, 3)\n    5.8480354764257312\n    >>> norm(a, -3)\n    0.0",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9ff7143091fb0d4ffe0ed41db4667f7fdb6e6912109ac3472e5d2ce33113a88f",
            "fields": [
                {
                    "id": "6c835k5y",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array. If `axis` is None, `a` must be 1-D or 2-D, unless `ord`\nis None. If both `axis` and `ord` are None, the 2-norm of\n``a.ravel`` will be returned.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pirw9t63",
                    "encoding": "",
                    "name": "ord",
                    "value": "",
                    "defaultValue": "",
                    "description": "Order of the norm (see table under ``Notes``). inf means NumPy's\n`inf` object.",
                    "type": "{int, inf, -inf, 'fro', 'nuc', None}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uvvne186",
                    "encoding": "",
                    "name": "axis",
                    "value": "",
                    "defaultValue": "",
                    "description": "If `axis` is an integer, it specifies the axis of `a` along which to\ncompute the vector norms. If `axis` is a 2-tuple, it specifies the\naxes that hold 2-D matrices, and the matrix norms of these matrices\nare computed. If `axis` is None then either a vector norm (when `a`\nis 1-D) or a matrix norm (when `a` is 2-D) is returned.",
                    "type": "{int, 2-tuple of ints, None}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pi4lmwlu",
                    "encoding": "",
                    "name": "keepdims",
                    "value": false,
                    "defaultValue": false,
                    "description": "If this is set to True, the axes which are normed over are left in the\nresult as dimensions with size one. With this option the result will\nbroadcast correctly against the original `a`.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "socf02u8",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrix contains only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_yn_zoga",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.matfuncs.norm",
                    "defaultValue": "scipy.linalg.matfuncs.norm",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6n43j41c",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zhlcpzqf",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "hi8n_0ui",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bgspjhnz",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.matfuncs",
                    "defaultValue": "scipy.linalg.matfuncs",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ny9mh62m",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e55tqc0d",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "5f6emweq",
            "name": "matfuncs.rsf2csf",
            "description": "Convert real Schur form to complex Schur form.\n    \n    Convert a quasi-diagonal real-valued Schur form to the upper-triangular\n    complex-valued Schur form.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    T : (M, M) array_like\n        Real Schur form of the original array\n    Z : (M, M) array_like\n        Schur transformation matrix\n    check_finite : bool, optional\n        Whether to check that the input arrays contain only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    T : (M, M) ndarray\n        Complex Schur form of the original array\n    Z : (M, M) ndarray\n        Schur transformation matrix corresponding to the complex form\n    \n    See Also\n    --------\n    \n    :func:`schur`\n        Schur decomposition of an array\n    \n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import schur, rsf2csf\n    >>> A = np.array([[0, 2, 2], [0, 1, 2], [1, 0, 1]])\n    >>> T, Z = schur(A)\n    >>> T\n    array([[ 2.65896708,  1.42440458, -1.92933439],\n           [ 0.        , -0.32948354, -0.49063704],\n           [ 0.        ,  1.31178921, -0.32948354]])\n    >>> Z\n    array([[0.72711591, -0.60156188, 0.33079564],\n           [0.52839428, 0.79801892, 0.28976765],\n           [0.43829436, 0.03590414, -0.89811411]])\n    >>> T2 , Z2 = rsf2csf(T, Z)\n    >>> T2\n    array([[2.65896708+0.j, -1.64592781+0.743164187j, -1.21516887+1.00660462j],\n           [0.+0.j , -0.32948354+8.02254558e-01j, -0.82115218-2.77555756e-17j],\n           [0.+0.j , 0.+0.j, -0.32948354-0.802254558j]])\n    >>> Z2\n    array([[0.72711591+0.j,  0.28220393-0.31385693j,  0.51319638-0.17258824j],\n           [0.52839428+0.j,  0.24720268+0.41635578j, -0.68079517-0.15118243j],\n           [0.43829436+0.j, -0.76618703+0.01873251j, -0.03063006+0.46857912j]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e4ac81a929f0843118b77ac43d07b9646adc036dda6f90054a2b94b429b80573",
            "fields": [
                {
                    "id": "7hkmoq_e",
                    "encoding": "",
                    "name": "T",
                    "value": "",
                    "defaultValue": "",
                    "description": "Real Schur form of the original array",
                    "type": "(M, M) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4opa2iqn",
                    "encoding": "",
                    "name": "Z",
                    "value": "",
                    "defaultValue": "",
                    "description": "Schur transformation matrix",
                    "type": "(M, M) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l_rxtu2h",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input arrays contain only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "56q58y80",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.matfuncs.rsf2csf",
                    "defaultValue": "scipy.linalg.matfuncs.rsf2csf",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_rghtee3",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "px7ksvtu",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "4hon0lbh",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "05vo56cx",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.matfuncs",
                    "defaultValue": "scipy.linalg.matfuncs",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xmbexvfb",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e_fwarx8",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "060x73z2",
            "name": "matfuncs.schur",
            "description": "Compute Schur decomposition of a matrix.\n    \n    The Schur decomposition is::\n    \n        A = Z T Z^H\n    \n    where Z is unitary and T is either upper-triangular, or for real\n    Schur decomposition (output='real'), quasi-upper triangular. In\n    the quasi-triangular form, 2x2 blocks describing complex-valued\n    eigenvalue pairs may extrude from the diagonal.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a : (M, M) array_like\n        Matrix to decompose\n    output : {'real', 'complex'}, optional\n        When the dtype of `a` is real, this specifies whether to compute\n        the real or complex Schur decomposition.\n        When the dtype of `a` is complex, this argument is ignored, and the\n        complex Schur decomposition is computed.\n    lwork : int, optional\n        Work array size. If None or -1, it is automatically computed.\n    overwrite_a : bool, optional\n        Whether to overwrite data in a (may improve performance).\n    sort : {None, callable, 'lhp', 'rhp', 'iuc', 'ouc'}, optional\n        Specifies whether the upper eigenvalues should be sorted. A callable\n        may be passed that, given an eigenvalue, returns a boolean denoting\n        whether the eigenvalue should be sorted to the top-left (True).\n        \n        - If ``output='complex'`` OR the dtype of `a` is complex, the callable\n          should have one argument: the eigenvalue expressed as a complex number.\n        - If ``output='real'`` AND the dtype of `a` is real, the callable should have\n          two arguments: the real and imaginary parts of the eigenvalue, respectively.\n        \n        Alternatively, string parameters may be used::\n        \n            'lhp'   Left-hand plane (real(eigenvalue) < 0.0)\n            'rhp'   Right-hand plane (real(eigenvalue) >= 0.0)\n            'iuc'   Inside the unit circle (abs(eigenvalue) <= 1.0)\n            'ouc'   Outside the unit circle (abs(eigenvalue) > 1.0)\n        \n        Defaults to None (no sorting).\n    check_finite : bool, optional\n        Whether to check that the input matrix contains only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    T : (M, M) ndarray\n        Schur form of A. It is real-valued for the real Schur decomposition.\n    Z : (M, M) ndarray\n        An unitary Schur transformation matrix for A.\n        It is real-valued for the real Schur decomposition.\n    sdim : int\n        If and only if sorting was requested, a third return value will\n        contain the number of eigenvalues satisfying the sort condition.\n        Note that complex conjugate pairs for which the condition is true\n        for either eigenvalue count as 2.\n    \n    Raises\n    ------\n    LinAlgError\n        Error raised under three conditions:\n        \n        1. The algorithm failed due to a failure of the QR algorithm to\n           compute all eigenvalues.\n        2. If eigenvalue sorting was requested, the eigenvalues could not be\n           reordered due to a failure to separate eigenvalues, usually because\n           of poor conditioning.\n        3. If eigenvalue sorting was requested, roundoff errors caused the\n           leading eigenvalues to no longer satisfy the sorting condition.\n    \n    See Also\n    --------\n    \n    :func:`rsf2csf`\n        Convert real Schur form to complex Schur form\n    \n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import schur, eigvals\n    >>> A = np.array([[0, 2, 2], [0, 1, 2], [1, 0, 1]])\n    >>> T, Z = schur(A)\n    >>> T\n    array([[ 2.65896708,  1.42440458, -1.92933439],\n           [ 0.        , -0.32948354, -0.49063704],\n           [ 0.        ,  1.31178921, -0.32948354]])\n    >>> Z\n    array([[0.72711591, -0.60156188, 0.33079564],\n           [0.52839428, 0.79801892, 0.28976765],\n           [0.43829436, 0.03590414, -0.89811411]])\n    \n    >>> T2, Z2 = schur(A, output='complex')\n    >>> T2\n    array([[ 2.65896708, -1.22839825+1.32378589j,  0.42590089+1.51937378j], # may vary\n           [ 0.        , -0.32948354+0.80225456j, -0.59877807+0.56192146j],\n           [ 0.        ,  0.                    , -0.32948354-0.80225456j]])\n    >>> eigvals(T2)\n    array([2.65896708, -0.32948354+0.80225456j, -0.32948354-0.80225456j])   # may vary\n    \n    A custom eigenvalue-sorting condition that sorts by positive imaginary part\n    is satisfied by only one eigenvalue.\n    \n    >>> _, _, sdim = schur(A, output='complex', sort=lambda x: x.imag > 1e-15)\n    >>> sdim\n    1\n    \n    When ``output='real'`` and the array `a` is real, the `sort` callable must accept\n    the real and imaginary parts as separate arguments. Note that now the complex\n    eigenvalues ``-0.32948354+0.80225456j`` and ``-0.32948354-0.80225456j`` will be\n    treated as a complex conjugate pair, and according to the `sdim` documentation,\n    complex conjugate pairs for which the condition is True for *either* eigenvalue\n    increase `sdim` by *two*.\n    \n    >>> _, _, sdim = schur(A, output='real', sort=lambda x, y: y > 1e-15)\n    >>> sdim\n    2",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d5549a48d7dc06fdea7cb8f84ebf8a0b788349be696a9d8ce3bd9139dff0a8c5",
            "fields": [
                {
                    "id": "b2zpt03k",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Matrix to decompose",
                    "type": "(M, M) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pqdykrse",
                    "encoding": "",
                    "name": "output",
                    "value": "real",
                    "defaultValue": "real",
                    "description": "When the dtype of `a` is real, this specifies whether to compute\nthe real or complex Schur decomposition.\nWhen the dtype of `a` is complex, this argument is ignored, and the\ncomplex Schur decomposition is computed.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_2xft_f3",
                    "encoding": "",
                    "name": "lwork",
                    "value": "",
                    "defaultValue": "",
                    "description": "Work array size. If None or -1, it is automatically computed.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e9f7iauh",
                    "encoding": "",
                    "name": "overwrite_a",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to overwrite data in a (may improve performance).",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "acjn1iy6",
                    "encoding": "",
                    "name": "sort",
                    "value": "",
                    "defaultValue": "",
                    "description": "Specifies whether the upper eigenvalues should be sorted. A callable\nmay be passed that, given an eigenvalue, returns a boolean denoting\nwhether the eigenvalue should be sorted to the top-left (True).\n\n- If ``output='complex'`` OR the dtype of `a` is complex, the callable\n  should have one argument: the eigenvalue expressed as a complex number.\n- If ``output='real'`` AND the dtype of `a` is real, the callable should have\n  two arguments: the real and imaginary parts of the eigenvalue, respectively.\n\nAlternatively, string parameters may be used::\n\n    'lhp'   Left-hand plane (real(eigenvalue) < 0.0)\n    'rhp'   Right-hand plane (real(eigenvalue) >= 0.0)\n    'iuc'   Inside the unit circle (abs(eigenvalue) <= 1.0)\n    'ouc'   Outside the unit circle (abs(eigenvalue) > 1.0)\n\nDefaults to None (no sorting).",
                    "type": "{None, callable, 'lhp', 'rhp', 'iuc', 'ouc'}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mzm5kcb2",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrix contains only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iha1aamy",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.matfuncs.schur",
                    "defaultValue": "scipy.linalg.matfuncs.schur",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "athp7m2z",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rpju_cqy",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "bry2c5ns",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t6db5lvn",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.matfuncs",
                    "defaultValue": "scipy.linalg.matfuncs",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sxwlhnt6",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u_68uswu",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "po3wt_qh",
            "name": "matfuncs.signm",
            "description": "Matrix sign function.\n    \n    Extension of the scalar sign(x) to matrices.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    A : (N, N) array_like\n        Matrix at which to evaluate the sign function\n    disp : bool, optional\n        Print warning if error in the result is estimated large\n        instead of returning estimated error. (Default: True)\n        \n        .. deprecated:: 1.16.0\n            The `disp` argument is deprecated and will be\n            removed in SciPy 1.18.0. The previously returned error estimate\n            can be computed as ``norm(signm @ signm - signm, 1)``.\n    \n    Returns\n    -------\n    signm : (N, N) ndarray\n        Value of the sign function at `A`\n    errest : float\n        (if disp == False)\n        \n        1-norm of the estimated error, ||err||_1 / ||A||_1\n    \n    Examples\n    --------\n    >>> from scipy.linalg import signm, eigvals\n    >>> a = [[1,2,3], [1,2,1], [1,1,1]]\n    >>> eigvals(a)\n    array([ 4.12488542+0.j, -0.76155718+0.j,  0.63667176+0.j])\n    >>> eigvals(signm(a))\n    array([-1.+0.j,  1.+0.j,  1.+0.j])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f5a6b18871805ddd78338b0d39b4e691c2f936aa36ba6887c422ca9cebac810c",
            "fields": [
                {
                    "id": "5xgmnl7a",
                    "encoding": "",
                    "name": "A",
                    "value": "",
                    "defaultValue": "",
                    "description": "Matrix at which to evaluate the sign function",
                    "type": "(N, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k14su9at",
                    "encoding": "",
                    "name": "disp",
                    "value": "builtins.object",
                    "defaultValue": "builtins.object",
                    "description": "Print warning if error in the result is estimated large\ninstead of returning estimated error. (Default: True)\n\n.. deprecated:: 1.16.0\n    The `disp` argument is deprecated and will be\n    removed in SciPy 1.18.0. The previously returned error estimate\n    can be computed as ``norm(signm @ signm - signm, 1)``.",
                    "type": "builtins.object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "evlwybuq",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.matfuncs.signm",
                    "defaultValue": "scipy.linalg.matfuncs.signm",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bhdwhe7b",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2pl_5yan",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "i0_qpm3i",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bbd2kjdm",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.matfuncs",
                    "defaultValue": "scipy.linalg.matfuncs",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ld8ojef_",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rgpak1rh",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "9nafy2az",
            "name": "matfuncs.sinhm",
            "description": "Compute the hyperbolic matrix sine.\n    \n    This routine uses expm to compute the matrix exponentials.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    A : (N, N) array_like\n        Input array.\n    \n    Returns\n    -------\n    sinhm : (N, N) ndarray\n        Hyperbolic matrix sine of `A`\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import tanhm, sinhm, coshm\n    >>> a = np.array([[1.0, 3.0], [1.0, 4.0]])\n    >>> s = sinhm(a)\n    >>> s\n    array([[ 10.57300653,  39.28826594],\n           [ 13.09608865,  49.86127247]])\n    \n    Verify tanhm(a) = sinhm(a).dot(inv(coshm(a)))\n    \n    >>> t = tanhm(a)\n    >>> c = coshm(a)\n    >>> t - s.dot(np.linalg.inv(c))\n    array([[  2.72004641e-15,   4.55191440e-15],\n           [  0.00000000e+00,  -5.55111512e-16]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "56870f1958178ba9b8a07325d89ed4bb70ca78c7dd8f2293cb6a3f68ced42346",
            "fields": [
                {
                    "id": "d0e1lz8_",
                    "encoding": "",
                    "name": "A",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array.",
                    "type": "(N, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g68u1ywv",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.matfuncs.sinhm",
                    "defaultValue": "scipy.linalg.matfuncs.sinhm",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b7v5oloa",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qss9s9tt",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "iqu_jou5",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ychhu1ng",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.matfuncs",
                    "defaultValue": "scipy.linalg.matfuncs",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ewzjzq97",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "87ml45sm",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "7zxfzjt3",
            "name": "matfuncs.sinm",
            "description": "Compute the matrix sine.\n    \n    This routine uses expm to compute the matrix exponentials.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    A : (N, N) array_like\n        Input array.\n    \n    Returns\n    -------\n    sinm : (N, N) ndarray\n        Matrix sine of `A`\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import expm, sinm, cosm\n    \n    Euler's identity (exp(i*theta) = cos(theta) + i*sin(theta))\n    applied to a matrix:\n    \n    >>> a = np.array([[1.0, 2.0], [-1.0, 3.0]])\n    >>> expm(1j*a)\n    array([[ 0.42645930+1.89217551j, -2.13721484-0.97811252j],\n           [ 1.06860742+0.48905626j, -1.71075555+0.91406299j]])\n    >>> cosm(a) + 1j*sinm(a)\n    array([[ 0.42645930+1.89217551j, -2.13721484-0.97811252j],\n           [ 1.06860742+0.48905626j, -1.71075555+0.91406299j]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d79431fd5b19cae7075a4dafa135081386f77923d2eb595903dbe8ea5d5745a9",
            "fields": [
                {
                    "id": "whl0q39v",
                    "encoding": "",
                    "name": "A",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array.",
                    "type": "(N, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oyokbr11",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.matfuncs.sinm",
                    "defaultValue": "scipy.linalg.matfuncs.sinm",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xvbyd_9z",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m4ixk_hd",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "7squ1swq",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z3g3_6i_",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.matfuncs",
                    "defaultValue": "scipy.linalg.matfuncs",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3xe7qghg",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aqvnyzg7",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "xoc04udc",
            "name": "matfuncs.solve",
            "description": "Solve the equation ``a @ x = b`` for  ``x``,\n    where `a` is a square matrix.\n    \n    If the data matrix is known to be a particular type then supplying the\n    corresponding string to ``assume_a`` key chooses the dedicated solver.\n    The available options are\n    \n    =============================  ================================\n     diagonal                       'diagonal'\n     tridiagonal                    'tridiagonal'\n     banded                         'banded'\n     upper triangular               'upper triangular'\n     lower triangular               'lower triangular'\n     symmetric                      'symmetric' (or 'sym')\n     hermitian                      'hermitian' (or 'her')\n     symmetric positive definite    'positive definite' (or 'pos')\n     general                        'general' (or 'gen')\n    =============================  ================================\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a : (N, N) array_like\n        Square input data\n    b : (N, NRHS) array_like\n        Input data for the right hand side.\n    lower : bool, default: False\n        Ignored unless ``assume_a`` is one of ``'sym'``, ``'her'``, or ``'pos'``.\n        If True, the calculation uses only the data in the lower triangle of `a`;\n        entries above the diagonal are ignored. If False (default), the\n        calculation uses only the data in the upper triangle of `a`; entries\n        below the diagonal are ignored.\n    overwrite_a : bool, default: False\n        Allow overwriting data in `a` (may enhance performance).\n    overwrite_b : bool, default: False\n        Allow overwriting data in `b` (may enhance performance).\n    check_finite : bool, default: True\n        Whether to check that the input matrices contain only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    assume_a : str, optional\n        Valid entries are described above.\n        If omitted or ``None``, checks are performed to identify structure so the\n        appropriate solver can be called.\n    transposed : bool, default: False\n        If True, solve ``a.T @ x == b``. Raises `NotImplementedError`\n        for complex `a`.\n    \n    Returns\n    -------\n    x : (N, NRHS) ndarray\n        The solution array.\n    \n    Raises\n    ------\n    ValueError\n        If size mismatches detected or input a is not square.\n    LinAlgError\n        If the computation fails because of matrix singularity.\n    LinAlgWarning\n        If an ill-conditioned input a is detected.\n    NotImplementedError\n        If transposed is True and input a is a complex matrix.\n    \n    Notes\n    -----\n    If the input b matrix is a 1-D array with N elements, when supplied\n    together with an NxN input a, it is assumed as a valid column vector\n    despite the apparent size mismatch. This is compatible with the\n    numpy.dot() behavior and the returned result is still 1-D array.\n    \n    The general, symmetric, Hermitian and positive definite solutions are\n    obtained via calling ?GESV, ?SYSV, ?HESV, and ?POSV routines of\n    LAPACK respectively.\n    \n    The datatype of the arrays define which solver is called regardless\n    of the values. In other words, even when the complex array entries have\n    precisely zero imaginary parts, the complex solver will be called based\n    on the data type of the array.\n    \n    Examples\n    --------\n    Given `a` and `b`, solve for `x`:\n    \n    >>> import numpy as np\n    >>> a = np.array([[3, 2, 0], [1, -1, 0], [0, 5, 1]])\n    >>> b = np.array([2, 4, -1])\n    >>> from scipy import linalg\n    >>> x = linalg.solve(a, b)\n    >>> x\n    array([ 2., -2.,  9.])\n    >>> np.dot(a, x) == b\n    array([ True,  True,  True], dtype=bool)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "3498f4b46ff195d1c703529fc4cd04808c33254c7fdd96caa5ed06b4600b935f",
            "fields": [
                {
                    "id": "ezqxlz08",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Square input data",
                    "type": "(N, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7bf8e692",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input data for the right hand side.",
                    "type": "(N, NRHS) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k86k_tcf",
                    "encoding": "",
                    "name": "lower",
                    "value": false,
                    "defaultValue": false,
                    "description": "Ignored unless ``assume_a`` is one of ``'sym'``, ``'her'``, or ``'pos'``.\nIf True, the calculation uses only the data in the lower triangle of `a`;\nentries above the diagonal are ignored. If False (default), the\ncalculation uses only the data in the upper triangle of `a`; entries\nbelow the diagonal are ignored.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xii7tz2s",
                    "encoding": "",
                    "name": "overwrite_a",
                    "value": false,
                    "defaultValue": false,
                    "description": "Allow overwriting data in `a` (may enhance performance).",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_us8iwye",
                    "encoding": "",
                    "name": "overwrite_b",
                    "value": false,
                    "defaultValue": false,
                    "description": "Allow overwriting data in `b` (may enhance performance).",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c4hiugnc",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrices contain only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zqfltd_z",
                    "encoding": "",
                    "name": "assume_a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Valid entries are described above.\nIf omitted or ``None``, checks are performed to identify structure so the\nappropriate solver can be called.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3n3l5xvk",
                    "encoding": "",
                    "name": "transposed",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, solve ``a.T @ x == b``. Raises `NotImplementedError`\nfor complex `a`.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xm13w4bu",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.matfuncs.solve",
                    "defaultValue": "scipy.linalg.matfuncs.solve",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fpqk65w8",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r1yipqjx",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "a9q8bdd0",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bfzs3gwa",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.matfuncs",
                    "defaultValue": "scipy.linalg.matfuncs",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sopxft57",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "griiip2r",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "qynghx88",
            "name": "matfuncs.sqrtm",
            "description": "Compute, if exists, the matrix square root.\n    \n    The matrix square root of ``A`` is a matrix ``X`` such that ``X @ X = A``.\n    Every square matrix is not guaranteed to have a matrix square root, for\n    example, the array ``[[0, 1], [0, 0]]`` does not have a square root.\n    \n    Moreover, not every real matrix has a real square root. Hence, for\n    real-valued matrices the return type can be complex if, numerically, there\n    is an eigenvalue on the negative real axis.\n    \n    Parameters\n    ----------\n    A : ndarray\n        Input with last two dimensions are square ``(..., n, n)``.\n    disp : bool, optional\n        Print warning if error in the result is estimated large\n        instead of returning estimated error. (Default: True)\n    \n        .. deprecated:: 1.16.0\n            The `disp` argument is deprecated and will be\n            removed in SciPy 1.18.0. The previously returned error estimate\n            can be computed as ``norm(X @ X - A, 'fro')**2 / norm(A, 'fro')``\n    \n    blocksize : integer, optional\n    \n        .. deprecated:: 1.16.0\n            The `blocksize` argument is deprecated as it is unused by the algorithm\n            and will be removed in SciPy 1.18.0.\n    \n    Returns\n    -------\n    sqrtm : ndarray\n        Computed matrix squareroot of `A` with same size ``(..., n, n)``.\n    \n    errest : float\n        Frobenius norm of the estimated error, ||err||_F / ||A||_F. Only\n        returned, if ``disp`` is set to ``False``. This return argument will be\n        removed in version 1.20.0 and only the sqrtm result will be returned.\n    \n        .. deprecated:: 1.16.0\n    \n    Notes\n    -----\n    This function uses the Schur decomposition method to compute the matrix\n    square root following [1]_ and for real matrices [2]_. Moreover, note\n    that, there exist matrices that have square roots that are not polynomials\n    in ``A``. For a classical example from [2]_, the matrix satisfies::\n    \n            [ a, a**2 + 1]**2     [-1,  0]\n            [-1,       -a]     =  [ 0, -1]\n    \n    for any scalar ``a`` but it is not a polynomial in ``-I``. Thus, they will\n    not be found by this function.\n    \n    References\n    ----------\n    .. [1] Edvin Deadman, Nicholas J. Higham, Rui Ralha (2013)\n           \"Blocked Schur Algorithms for Computing the Matrix Square Root,\n           Lecture Notes in Computer Science, 7782. pp. 171-182.\n           :doi:`10.1016/0024-3795(87)90118-2`\n    .. [2] Nicholas J. Higham (1987) \"Computing real square roots of a real\n           matrix\", Linear Algebra and its Applications, 88/89:405-430.\n           :doi:`10.1016/0024-3795(87)90118-2`\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import sqrtm\n    >>> a = np.array([[1.0, 3.0], [1.0, 4.0]])\n    >>> r = sqrtm(a)\n    >>> r\n    array([[ 0.75592895,  1.13389342],\n           [ 0.37796447,  1.88982237]])\n    >>> r.dot(r)\n    array([[ 1.,  3.],\n           [ 1.,  4.]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6a59df18dde7667abb9f2ef257c3125df0bd111106074fcc10c72b6fd01c2fe3",
            "fields": [
                {
                    "id": "0o625mbr",
                    "encoding": "",
                    "name": "A",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input with last two dimensions are square ``(..., n, n)``.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yx3a6phr",
                    "encoding": "",
                    "name": "disp",
                    "value": "builtins.object",
                    "defaultValue": "builtins.object",
                    "description": "Print warning if error in the result is estimated large\ninstead of returning estimated error. (Default: True)\n\n.. deprecated:: 1.16.0\n    The `disp` argument is deprecated and will be\n    removed in SciPy 1.18.0. The previously returned error estimate\n    can be computed as ``norm(X @ X - A, 'fro')**2 / norm(A, 'fro')``",
                    "type": "builtins.object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_1xe4bst",
                    "encoding": "",
                    "name": "blocksize",
                    "value": "builtins.object",
                    "defaultValue": "builtins.object",
                    "description": ".. deprecated:: 1.16.0\n    The `blocksize` argument is deprecated as it is unused by the algorithm\n    and will be removed in SciPy 1.18.0.",
                    "type": "builtins.object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "witz_55y",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.matfuncs.sqrtm",
                    "defaultValue": "scipy.linalg.matfuncs.sqrtm",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ipl2912x",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "733_8779",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "_miatwx2",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dxsa9ms_",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.matfuncs",
                    "defaultValue": "scipy.linalg.matfuncs",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bxe_02rk",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "otkxxho6",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "kl0k0658",
            "name": "matfuncs.svd",
            "description": "Singular Value Decomposition.\n    \n    Factorizes the matrix `a` into two unitary matrices ``U`` and ``Vh``, and\n    a 1-D array ``s`` of singular values (real, non-negative) such that\n    ``a == U @ S @ Vh``, where ``S`` is a suitably shaped matrix of zeros with\n    main diagonal ``s``.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    a : (M, N) array_like\n        Matrix to decompose.\n    full_matrices : bool, optional\n        If True (default), `U` and `Vh` are of shape ``(M, M)``, ``(N, N)``.\n        If False, the shapes are ``(M, K)`` and ``(K, N)``, where\n        ``K = min(M, N)``.\n    compute_uv : bool, optional\n        Whether to compute also ``U`` and ``Vh`` in addition to ``s``.\n        Default is True.\n    overwrite_a : bool, optional\n        Whether to overwrite `a`; may improve performance.\n        Default is False.\n    check_finite : bool, optional\n        Whether to check that the input matrix contains only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    lapack_driver : {'gesdd', 'gesvd'}, optional\n        Whether to use the more efficient divide-and-conquer approach\n        (``'gesdd'``) or general rectangular approach (``'gesvd'``)\n        to compute the SVD. MATLAB and Octave use the ``'gesvd'`` approach.\n        Default is ``'gesdd'``.\n    \n    Returns\n    -------\n    U : ndarray\n        Unitary matrix having left singular vectors as columns.\n        Of shape ``(M, M)`` or ``(M, K)``, depending on `full_matrices`.\n    s : ndarray\n        The singular values, sorted in non-increasing order.\n        Of shape (K,), with ``K = min(M, N)``.\n    Vh : ndarray\n        Unitary matrix having right singular vectors as rows.\n        Of shape ``(N, N)`` or ``(K, N)`` depending on `full_matrices`.\n    For ``compute_uv=False``, only ``s`` is returned.\n    \n    Raises\n    ------\n    LinAlgError\n        If SVD computation does not converge.\n    \n    See Also\n    --------\n    \n    :func:`svdvals`\n        Compute singular values of a matrix.\n    :func:`diagsvd`\n        Construct the Sigma matrix, given the vector s.\n    \n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy import linalg\n    >>> rng = np.random.default_rng()\n    >>> m, n = 9, 6\n    >>> a = rng.standard_normal((m, n)) + 1.j*rng.standard_normal((m, n))\n    >>> U, s, Vh = linalg.svd(a)\n    >>> U.shape,  s.shape, Vh.shape\n    ((9, 9), (6,), (6, 6))\n    \n    Reconstruct the original matrix from the decomposition:\n    \n    >>> sigma = np.zeros((m, n))\n    >>> for i in range(min(m, n)):\n    ...     sigma[i, i] = s[i]\n    >>> a1 = np.dot(U, np.dot(sigma, Vh))\n    >>> np.allclose(a, a1)\n    True\n    \n    Alternatively, use ``full_matrices=False`` (notice that the shape of\n    ``U`` is then ``(m, n)`` instead of ``(m, m)``):\n    \n    >>> U, s, Vh = linalg.svd(a, full_matrices=False)\n    >>> U.shape, s.shape, Vh.shape\n    ((9, 6), (6,), (6, 6))\n    >>> S = np.diag(s)\n    >>> np.allclose(a, np.dot(U, np.dot(S, Vh)))\n    True\n    \n    >>> s2 = linalg.svd(a, compute_uv=False)\n    >>> np.allclose(s, s2)\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "baf4a6b7d61f618193bddbd4cf7b8403f7b7f2027fb3af7d1d77f8fc06e059e0",
            "fields": [
                {
                    "id": "96y7pxi0",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Matrix to decompose.",
                    "type": "(M, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "19a0efcj",
                    "encoding": "",
                    "name": "full_matrices",
                    "value": true,
                    "defaultValue": true,
                    "description": "If True (default), `U` and `Vh` are of shape ``(M, M)``, ``(N, N)``.\nIf False, the shapes are ``(M, K)`` and ``(K, N)``, where\n``K = min(M, N)``.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4g494h1r",
                    "encoding": "",
                    "name": "compute_uv",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to compute also ``U`` and ``Vh`` in addition to ``s``.\nDefault is True.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zwsdsytv",
                    "encoding": "",
                    "name": "overwrite_a",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to overwrite `a`; may improve performance.\nDefault is False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eki1m07o",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrix contains only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1u4vj_ae",
                    "encoding": "",
                    "name": "lapack_driver",
                    "value": "gesdd",
                    "defaultValue": "gesdd",
                    "description": "Whether to use the more efficient divide-and-conquer approach\n(``'gesdd'``) or general rectangular approach (``'gesvd'``)\nto compute the SVD. MATLAB and Octave use the ``'gesvd'`` approach.\nDefault is ``'gesdd'``.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "08mhabgj",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.matfuncs.svd",
                    "defaultValue": "scipy.linalg.matfuncs.svd",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nw7si51f",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "43m_9x_8",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "0o01t357",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t6avjlvm",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.matfuncs",
                    "defaultValue": "scipy.linalg.matfuncs",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fjddog5i",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0cg48giw",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "rvrrqyzt",
            "name": "matfuncs.tanhm",
            "description": "Compute the hyperbolic matrix tangent.\n    \n    This routine uses expm to compute the matrix exponentials.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    A : (N, N) array_like\n        Input array\n    \n    Returns\n    -------\n    tanhm : (N, N) ndarray\n        Hyperbolic matrix tangent of `A`\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import tanhm, sinhm, coshm\n    >>> a = np.array([[1.0, 3.0], [1.0, 4.0]])\n    >>> t = tanhm(a)\n    >>> t\n    array([[ 0.3428582 ,  0.51987926],\n           [ 0.17329309,  0.86273746]])\n    \n    Verify tanhm(a) = sinhm(a).dot(inv(coshm(a)))\n    \n    >>> s = sinhm(a)\n    >>> c = coshm(a)\n    >>> t - s.dot(np.linalg.inv(c))\n    array([[  2.72004641e-15,   4.55191440e-15],\n           [  0.00000000e+00,  -5.55111512e-16]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "bb248ede33eacc8a37c01b88ca42c7efb0583dd6b8cb702d196bbcf3df4e1649",
            "fields": [
                {
                    "id": "dh4uml0f",
                    "encoding": "",
                    "name": "A",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array",
                    "type": "(N, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rnaa_z8e",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.matfuncs.tanhm",
                    "defaultValue": "scipy.linalg.matfuncs.tanhm",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "60gkqf_k",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2kwhkzyj",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "bp2xpn62",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1v1ei826",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.matfuncs",
                    "defaultValue": "scipy.linalg.matfuncs",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9a6ia_7d",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eoxaag05",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "bd0yf_b5",
            "name": "matfuncs.tanm",
            "description": "Compute the matrix tangent.\n    \n    This routine uses expm to compute the matrix exponentials.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    A : (N, N) array_like\n        Input array.\n    \n    Returns\n    -------\n    tanm : (N, N) ndarray\n        Matrix tangent of `A`\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import tanm, sinm, cosm\n    >>> a = np.array([[1.0, 3.0], [1.0, 4.0]])\n    >>> t = tanm(a)\n    >>> t\n    array([[ -2.00876993,  -8.41880636],\n           [ -2.80626879, -10.42757629]])\n    \n    Verify tanm(a) = sinm(a).dot(inv(cosm(a)))\n    \n    >>> s = sinm(a)\n    >>> c = cosm(a)\n    >>> s.dot(np.linalg.inv(c))\n    array([[ -2.00876993,  -8.41880636],\n           [ -2.80626879, -10.42757629]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c5bbbb7585adbe9b9975d1564a37fb0b8e5c8a45858bd36863ab6a5cfb6c61d3",
            "fields": [
                {
                    "id": "coc464s9",
                    "encoding": "",
                    "name": "A",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array.",
                    "type": "(N, N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rqravdf9",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.matfuncs.tanm",
                    "defaultValue": "scipy.linalg.matfuncs.tanm",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xw_563om",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "geiz93be",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "9ieqbkui",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c2x8ycv4",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.matfuncs",
                    "defaultValue": "scipy.linalg.matfuncs",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z9jp3h2w",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ppcb605g",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "e738ckih",
            "name": "misc.get_blas_funcs",
            "description": "Return available BLAS function objects from names.\n    \n    Arrays are used to determine the optimal prefix of BLAS routines.\n    \n    Parameters\n    ----------\n    names : str or sequence of str\n        Name(s) of BLAS functions without type prefix.\n    \n    arrays : sequence of ndarrays, optional\n        Arrays can be given to determine optimal prefix of BLAS\n        routines. If not given, double-precision routines will be\n        used, otherwise the most generic type in arrays will be used.\n    \n    dtype : str or dtype, optional\n        Data-type specifier. Not used if `arrays` is non-empty.\n    \n    ilp64 : {True, False, 'preferred'}, optional\n        Whether to return ILP64 routine variant.\n        Choosing 'preferred' returns ILP64 routine if available,\n        and otherwise the 32-bit routine. Default: False\n    \n    Returns\n    -------\n    funcs : list\n        List containing the found function(s).\n    \n    \n    Notes\n    -----\n    This routine automatically chooses between Fortran/C\n    interfaces. Fortran code is used whenever possible for arrays with\n    column major order. In all other cases, C code is preferred.\n    \n    In BLAS, the naming convention is that all functions start with a\n    type prefix, which depends on the type of the principal\n    matrix. These can be one of {'s', 'd', 'c', 'z'} for the NumPy\n    types {float32, float64, complex64, complex128} respectively.\n    The code and the dtype are stored in attributes `typecode` and `dtype`\n    of the returned functions.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> import scipy.linalg as LA\n    >>> rng = np.random.default_rng()\n    >>> a = rng.random((3,2))\n    >>> x_gemv = LA.get_blas_funcs('gemv', (a,))\n    >>> x_gemv.typecode\n    'd'\n    >>> x_gemv = LA.get_blas_funcs('gemv',(a*1j,))\n    >>> x_gemv.typecode\n    'z'",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "58d3155458d285b846c22511f2a500c569955a1484d617e8cc9a6b48d72d1cd4",
            "fields": [
                {
                    "id": "03r3lrne",
                    "encoding": "",
                    "name": "names",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name(s) of BLAS functions without type prefix.",
                    "type": "str or sequence of str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ekh4lr2h",
                    "encoding": "",
                    "name": "arrays",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Arrays can be given to determine optimal prefix of BLAS\nroutines. If not given, double-precision routines will be\nused, otherwise the most generic type in arrays will be used.",
                    "type": "builtins.tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ym9h0z1l",
                    "encoding": "",
                    "name": "dtype",
                    "value": "",
                    "defaultValue": "",
                    "description": "Data-type specifier. Not used if `arrays` is non-empty.",
                    "type": "str or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qh84ukv6",
                    "encoding": "",
                    "name": "ilp64",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to return ILP64 routine variant.\nChoosing 'preferred' returns ILP64 routine if available,\nand otherwise the 32-bit routine. Default: False",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j9633ckw",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.misc.get_blas_funcs",
                    "defaultValue": "scipy.linalg.misc.get_blas_funcs",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f0yhaa2f",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hi34qmk6",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "z4wox2di",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c60n9i9t",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.misc",
                    "defaultValue": "scipy.linalg.misc",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8m7zvyxe",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t0od7iv5",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "b0pkcs96",
            "name": "misc.get_lapack_funcs",
            "description": "Return available LAPACK function objects from names.\n    \n    Arrays are used to determine the optimal prefix of LAPACK routines.\n    \n    Parameters\n    ----------\n    names : str or sequence of str\n        Name(s) of LAPACK functions without type prefix.\n    \n    arrays : sequence of ndarrays, optional\n        Arrays can be given to determine optimal prefix of LAPACK\n        routines. If not given, double-precision routines will be\n        used, otherwise the most generic type in arrays will be used.\n    \n    dtype : str or dtype, optional\n        Data-type specifier. Not used if `arrays` is non-empty.\n    \n    ilp64 : {True, False, 'preferred'}, optional\n        Whether to return ILP64 routine variant.\n        Choosing 'preferred' returns ILP64 routine if available, and\n        otherwise the 32-bit routine. Default: False\n    \n    Returns\n    -------\n    funcs : list\n        List containing the found function(s).\n    \n    Notes\n    -----\n    This routine automatically chooses between Fortran/C\n    interfaces. Fortran code is used whenever possible for arrays with\n    column major order. In all other cases, C code is preferred.\n    \n    In LAPACK, the naming convention is that all functions start with a\n    type prefix, which depends on the type of the principal\n    matrix. These can be one of {'s', 'd', 'c', 'z'} for the NumPy\n    types {float32, float64, complex64, complex128} respectively, and\n    are stored in attribute ``typecode`` of the returned functions.\n    \n    Examples\n    --------\n    Suppose we would like to use '?lange' routine which computes the selected\n    norm of an array. We pass our array in order to get the correct 'lange'\n    flavor.\n    \n    >>> import numpy as np\n    >>> import scipy.linalg as LA\n    >>> rng = np.random.default_rng()\n    \n    >>> a = rng.random((3,2))\n    >>> x_lange = LA.get_lapack_funcs('lange', (a,))\n    >>> x_lange.typecode\n    'd'\n    >>> x_lange = LA.get_lapack_funcs('lange',(a*1j,))\n    >>> x_lange.typecode\n    'z'\n    \n    Several LAPACK routines work best when its internal WORK array has\n    the optimal size (big enough for fast computation and small enough to\n    avoid waste of memory). This size is determined also by a dedicated query\n    to the function which is often wrapped as a standalone function and\n    commonly denoted as ``###_lwork``. Below is an example for ``?sysv``\n    \n    >>> a = rng.random((1000, 1000))\n    >>> b = rng.random((1000, 1)) * 1j\n    >>> # We pick up zsysv and zsysv_lwork due to b array\n    ... xsysv, xlwork = LA.get_lapack_funcs(('sysv', 'sysv_lwork'), (a, b))\n    >>> opt_lwork, _ = xlwork(a.shape[0])  # returns a complex for 'z' prefix\n    >>> udut, ipiv, x, info = xsysv(a, b, lwork=int(opt_lwork.real))",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2e2ec21e9fec634039bcee17c618521e778d188b37eb541bb0ed469bf8d037f9",
            "fields": [
                {
                    "id": "f1_g7zpq",
                    "encoding": "",
                    "name": "names",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name(s) of LAPACK functions without type prefix.",
                    "type": "str or sequence of str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "men2fxsd",
                    "encoding": "",
                    "name": "arrays",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Arrays can be given to determine optimal prefix of LAPACK\nroutines. If not given, double-precision routines will be\nused, otherwise the most generic type in arrays will be used.",
                    "type": "builtins.tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nuine5zu",
                    "encoding": "",
                    "name": "dtype",
                    "value": "",
                    "defaultValue": "",
                    "description": "Data-type specifier. Not used if `arrays` is non-empty.",
                    "type": "str or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "29w1ciae",
                    "encoding": "",
                    "name": "ilp64",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to return ILP64 routine variant.\nChoosing 'preferred' returns ILP64 routine if available, and\notherwise the 32-bit routine. Default: False",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "934hk9hy",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.misc.get_lapack_funcs",
                    "defaultValue": "scipy.linalg.misc.get_lapack_funcs",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lfl34pbj",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wn90_sr4",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "j4t8cznv",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0alzp7__",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.misc",
                    "defaultValue": "scipy.linalg.misc",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mf8kzqyx",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zn1zyglk",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "lgkv2ve0",
            "name": "misc.norm",
            "description": "Matrix or vector norm.\n    \n    This function is able to return one of eight different matrix norms,\n    or one of an infinite number of vector norms (described below), depending\n    on the value of the ``ord`` parameter. For tensors with rank different from\n    1 or 2, only `ord=None` is supported.\n    \n    Parameters\n    ----------\n    a : array_like\n        Input array. If `axis` is None, `a` must be 1-D or 2-D, unless `ord`\n        is None. If both `axis` and `ord` are None, the 2-norm of\n        ``a.ravel`` will be returned.\n    ord : {int, inf, -inf, 'fro', 'nuc', None}, optional\n        Order of the norm (see table under ``Notes``). inf means NumPy's\n        `inf` object.\n    axis : {int, 2-tuple of ints, None}, optional\n        If `axis` is an integer, it specifies the axis of `a` along which to\n        compute the vector norms. If `axis` is a 2-tuple, it specifies the\n        axes that hold 2-D matrices, and the matrix norms of these matrices\n        are computed. If `axis` is None then either a vector norm (when `a`\n        is 1-D) or a matrix norm (when `a` is 2-D) is returned.\n    keepdims : bool, optional\n        If this is set to True, the axes which are normed over are left in the\n        result as dimensions with size one. With this option the result will\n        broadcast correctly against the original `a`.\n    check_finite : bool, optional\n        Whether to check that the input matrix contains only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n    \n    Returns\n    -------\n    n : float or ndarray\n        Norm of the matrix or vector(s).\n    \n    Notes\n    -----\n    For values of ``ord <= 0``, the result is, strictly speaking, not a\n    mathematical 'norm', but it may still be useful for various numerical\n    purposes.\n    \n    The following norms can be calculated:\n    \n    =====  ============================  ==========================\n    ord    norm for matrices             norm for vectors\n    =====  ============================  ==========================\n    None   Frobenius norm                2-norm\n    'fro'  Frobenius norm                --\n    'nuc'  nuclear norm                  --\n    inf    max(sum(abs(a), axis=1))      max(abs(a))\n    -inf   min(sum(abs(a), axis=1))      min(abs(a))\n    0      --                            sum(a != 0)\n    1      max(sum(abs(a), axis=0))      as below\n    -1     min(sum(abs(a), axis=0))      as below\n    2      2-norm (largest sing. value)  as below\n    -2     smallest singular value       as below\n    other  --                            sum(abs(a)**ord)**(1./ord)\n    =====  ============================  ==========================\n    \n    The Frobenius norm is given by [1]_:\n    \n        :math:`||A||_F = [\\sum_{i,j} abs(a_{i,j})^2]^{1/2}`\n    \n    The nuclear norm is the sum of the singular values.\n    \n    Both the Frobenius and nuclear norm orders are only defined for\n    matrices.\n    \n    References\n    ----------\n    .. [1] G. H. Golub and C. F. Van Loan, *Matrix Computations*,\n           Baltimore, MD, Johns Hopkins University Press, 1985, pg. 15\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import norm\n    >>> a = np.arange(9) - 4.0\n    >>> a\n    array([-4., -3., -2., -1.,  0.,  1.,  2.,  3.,  4.])\n    >>> b = a.reshape((3, 3))\n    >>> b\n    array([[-4., -3., -2.],\n           [-1.,  0.,  1.],\n           [ 2.,  3.,  4.]])\n    \n    >>> norm(a)\n    7.745966692414834\n    >>> norm(b)\n    7.745966692414834\n    >>> norm(b, 'fro')\n    7.745966692414834\n    >>> norm(a, np.inf)\n    4.0\n    >>> norm(b, np.inf)\n    9.0\n    >>> norm(a, -np.inf)\n    0.0\n    >>> norm(b, -np.inf)\n    2.0\n    \n    >>> norm(a, 1)\n    20.0\n    >>> norm(b, 1)\n    7.0\n    >>> norm(a, -1)\n    -4.6566128774142013e-010\n    >>> norm(b, -1)\n    6.0\n    >>> norm(a, 2)\n    7.745966692414834\n    >>> norm(b, 2)\n    7.3484692283495345\n    \n    >>> norm(a, -2)\n    0.0\n    >>> norm(b, -2)\n    1.8570331885190563e-016\n    >>> norm(a, 3)\n    5.8480354764257312\n    >>> norm(a, -3)\n    0.0",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "fcf2b894fd3082e4e5961e57265dbdf42ed8d93366286f8a4c80c16bad5b3cd4",
            "fields": [
                {
                    "id": "u_2qnvud",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array. If `axis` is None, `a` must be 1-D or 2-D, unless `ord`\nis None. If both `axis` and `ord` are None, the 2-norm of\n``a.ravel`` will be returned.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "js6epcj1",
                    "encoding": "",
                    "name": "ord",
                    "value": "",
                    "defaultValue": "",
                    "description": "Order of the norm (see table under ``Notes``). inf means NumPy's\n`inf` object.",
                    "type": "{int, inf, -inf, 'fro', 'nuc', None}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c7ee7r44",
                    "encoding": "",
                    "name": "axis",
                    "value": "",
                    "defaultValue": "",
                    "description": "If `axis` is an integer, it specifies the axis of `a` along which to\ncompute the vector norms. If `axis` is a 2-tuple, it specifies the\naxes that hold 2-D matrices, and the matrix norms of these matrices\nare computed. If `axis` is None then either a vector norm (when `a`\nis 1-D) or a matrix norm (when `a` is 2-D) is returned.",
                    "type": "{int, 2-tuple of ints, None}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l37lyiv3",
                    "encoding": "",
                    "name": "keepdims",
                    "value": false,
                    "defaultValue": false,
                    "description": "If this is set to True, the axes which are normed over are left in the\nresult as dimensions with size one. With this option the result will\nbroadcast correctly against the original `a`.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cjb3o8y5",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input matrix contains only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qtq_d56j",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.misc.norm",
                    "defaultValue": "scipy.linalg.misc.norm",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jox6pz5c",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p83vdk5h",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "vyq_dt1j",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6fkqyne5",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.misc",
                    "defaultValue": "scipy.linalg.misc",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oc3pebs7",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0id5yyoc",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ez66gd15",
            "name": "special_matrices.block_diag",
            "description": "Create a block diagonal array from provided arrays.\n    \n    For example, given 2-D inputs `A`, `B` and `C`, the output will have these\n    arrays arranged on the diagonal::\n    \n        [[A, 0, 0],\n         [0, B, 0],\n         [0, 0, C]]\n    \n    Parameters\n    ----------\n    A, B, C, ... : array_like\n        Input arrays.  A 1-D array or array_like sequence of length ``n`` is\n        treated as a 2-D array with shape ``(1, n)``. Any dimensions before\n        the last two are treated as batch dimensions; see :ref:`linalg_batch`.\n    \n    Returns\n    -------\n    D : ndarray\n        Array with `A`, `B`, `C`, ... on the diagonal of the last two\n        dimensions. `D` has the same dtype as the result type of the\n        inputs.\n    \n    Notes\n    -----\n    If all the input arrays are square, the output is known as a\n    block diagonal matrix.\n    \n    Empty sequences (i.e., array-likes of zero size) will not be ignored.\n    Noteworthy, both ``[]`` and ``[[]]`` are treated as matrices with shape\n    ``(1,0)``.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import block_diag\n    >>> A = [[1, 0],\n    ...      [0, 1]]\n    >>> B = [[3, 4, 5],\n    ...      [6, 7, 8]]\n    >>> C = [[7]]\n    >>> P = np.zeros((2, 0), dtype='int32')\n    >>> block_diag(A, B, C)\n    array([[1, 0, 0, 0, 0, 0],\n           [0, 1, 0, 0, 0, 0],\n           [0, 0, 3, 4, 5, 0],\n           [0, 0, 6, 7, 8, 0],\n           [0, 0, 0, 0, 0, 7]])\n    >>> block_diag(A, P, B, C)\n    array([[1, 0, 0, 0, 0, 0],\n           [0, 1, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0],\n           [0, 0, 3, 4, 5, 0],\n           [0, 0, 6, 7, 8, 0],\n           [0, 0, 0, 0, 0, 7]])\n    >>> block_diag(1.0, [2, 3], [[4, 5], [6, 7]])\n    array([[ 1.,  0.,  0.,  0.,  0.],\n           [ 0.,  2.,  3.,  0.,  0.],\n           [ 0.,  0.,  0.,  4.,  5.],\n           [ 0.,  0.,  0.,  6.,  7.]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "620d4249f5141dd661cffab6996650949cec487d47b70b66ff996200eba54181",
            "fields": [
                {
                    "id": "u0ieci0j",
                    "encoding": "",
                    "name": "arrs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yqth6wb4",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.special_matrices.block_diag",
                    "defaultValue": "scipy.linalg.special_matrices.block_diag",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9kn0uht_",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w_vahy0g",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "tlgtamyz",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vywj3h9q",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.special_matrices",
                    "defaultValue": "scipy.linalg.special_matrices",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_9tj7oax",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rnszq18o",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "vtinmpgi",
            "name": "special_matrices.circulant",
            "description": "Construct a circulant matrix.\n    \n    Parameters\n    ----------\n    c : (..., N,)  array_like\n        The first column(s) of the matrix. Multidimensional arrays are treated as a\n        batch: each slice along the last axis is the first column of an output matrix.\n    \n    Returns\n    -------\n    A : (..., N, N) ndarray\n        A circulant matrix whose first column is given by `c`.  For batch input, each\n        slice of shape ``(N, N)`` along the last two dimensions of the output\n        corresponds with a slice of shape ``(N,)`` along the last dimension of the\n        input.\n    \n    \n    See Also\n    --------\n    toeplitz : Toeplitz matrix\n    hankel : Hankel matrix\n    solve_circulant : Solve a circulant system.\n    \n    Notes\n    -----\n    .. versionadded:: 0.8.0\n    \n    Examples\n    --------\n    >>> from scipy.linalg import circulant\n    >>> circulant([1, 2, 3])\n    array([[1, 3, 2],\n           [2, 1, 3],\n           [3, 2, 1]])\n    \n    >>> circulant([[1, 2, 3], [4, 5, 6]])\n    array([[[1, 3, 2],\n            [2, 1, 3],\n            [3, 2, 1]],\n           [[4, 6, 5],\n            [5, 4, 6],\n            [6, 5, 4]]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6bb519da2a932cf4ace6b457713b8759e4cc4c487a024ab0466ee17e55f90c0e",
            "fields": [
                {
                    "id": "u6oafpty",
                    "encoding": "",
                    "name": "c",
                    "value": "",
                    "defaultValue": "",
                    "description": "The first column(s) of the matrix. Multidimensional arrays are treated as a\nbatch: each slice along the last axis is the first column of an output matrix.",
                    "type": "(..., N,)  arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gpwtfxn3",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.special_matrices.circulant",
                    "defaultValue": "scipy.linalg.special_matrices.circulant",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rwdcj06x",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yquyj32x",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "gex64z6e",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hg2o7duq",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.special_matrices",
                    "defaultValue": "scipy.linalg.special_matrices",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j3i8zeaq",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k7flg8ms",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ssz47uym",
            "name": "special_matrices.companion",
            "description": "Create a companion matrix.\n    \n    Create the companion matrix [1]_ associated with the polynomial whose\n    coefficients are given in `a`.\n    \n    Parameters\n    ----------\n    a : (..., N) array_like\n        1-D array of polynomial coefficients. The length of `a` must be\n        at least two, and ``a[0]`` must not be zero.\n        M-dimensional arrays are treated as a batch: each slice along the last\n        axis is a 1-D array of polynomial coefficients.\n    \n    Returns\n    -------\n    c : (..., N-1, N-1) ndarray\n        For 1-D input, the first row of `c` is ``-a[1:]/a[0]``, and the first\n        sub-diagonal is all ones.  The data-type of the array is the same\n        as the data-type of ``1.0*a[0]``.\n        For batch input, each slice of shape ``(N-1, N-1)`` along the last two\n        dimensions of the output corresponds with a slice of shape ``(N,)``\n        along the last dimension of the input.\n    \n    Raises\n    ------\n    ValueError\n        If any of the following are true: a) ``a.shape[-1] < 2``; b) ``a[..., 0] == 0``.\n    \n    Notes\n    -----\n    .. versionadded:: 0.8.0\n    \n    References\n    ----------\n    .. [1] R. A. Horn & C. R. Johnson, *Matrix Analysis*.  Cambridge, UK:\n        Cambridge University Press, 1999, pp. 146-7.\n    \n    Examples\n    --------\n    >>> from scipy.linalg import companion\n    >>> companion([1, -10, 31, -30])\n    array([[ 10., -31.,  30.],\n           [  1.,   0.,   0.],\n           [  0.,   1.,   0.]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a21c21d3353bba49996bea19f16076f9f7d6c0ab5c9e2d6017ee9e2e818f56a7",
            "fields": [
                {
                    "id": "1z1kttu6",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "1-D array of polynomial coefficients. The length of `a` must be\nat least two, and ``a[0]`` must not be zero.\nM-dimensional arrays are treated as a batch: each slice along the last\naxis is a 1-D array of polynomial coefficients.",
                    "type": "(..., N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3qalqzvi",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.special_matrices.companion",
                    "defaultValue": "scipy.linalg.special_matrices.companion",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5dx04no_",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h6n9zx2c",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "izlvvl9b",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p9lrtb67",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.special_matrices",
                    "defaultValue": "scipy.linalg.special_matrices",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "thdxd_xy",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gewecn3h",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "lallg40w",
            "name": "special_matrices.convolution_matrix",
            "description": "Construct a convolution matrix.\n    \n    Constructs the Toeplitz matrix representing one-dimensional\n    convolution [1]_.  See the notes below for details.\n    \n    Parameters\n    ----------\n    a : (..., m) array_like\n        The 1-D array to convolve. N-dimensional arrays are treated as a\n        batch: each slice along the last axis is a 1-D array to convolve.\n    n : int\n        The number of columns in the resulting matrix.  It gives the length\n        of the input to be convolved with `a`.  This is analogous to the\n        length of `v` in ``numpy.convolve(a, v)``.\n    mode : str\n        This is analogous to `mode` in ``numpy.convolve(v, a, mode)``.\n        It must be one of ('full', 'valid', 'same').\n        See below for how `mode` determines the shape of the result.\n    \n    Returns\n    -------\n    A : (..., k, n) ndarray\n        The convolution matrix whose row count `k` depends on `mode`::\n    \n            =======  =========================\n             mode    k\n            =======  =========================\n            'full'   m + n -1\n            'same'   max(m, n)\n            'valid'  max(m, n) - min(m, n) + 1\n            =======  =========================\n    \n        For batch input, each slice of shape ``(k, n)`` along the last two\n        dimensions of the output corresponds with a slice of shape ``(m,)``\n        along the last dimension of the input.\n    \n    See Also\n    --------\n    toeplitz : Toeplitz matrix\n    \n    Notes\n    -----\n    The code::\n    \n        A = convolution_matrix(a, n, mode)\n    \n    creates a Toeplitz matrix `A` such that ``A @ v`` is equivalent to\n    using ``convolve(a, v, mode)``.  The returned array always has `n`\n    columns.  The number of rows depends on the specified `mode`, as\n    explained above.\n    \n    In the default 'full' mode, the entries of `A` are given by::\n    \n        A[i, j] == (a[i-j] if (0 <= (i-j) < m) else 0)\n    \n    where ``m = len(a)``.  Suppose, for example, the input array is\n    ``[x, y, z]``.  The convolution matrix has the form::\n    \n        [x, 0, 0, ..., 0, 0]\n        [y, x, 0, ..., 0, 0]\n        [z, y, x, ..., 0, 0]\n        ...\n        [0, 0, 0, ..., x, 0]\n        [0, 0, 0, ..., y, x]\n        [0, 0, 0, ..., z, y]\n        [0, 0, 0, ..., 0, z]\n    \n    In 'valid' mode, the entries of `A` are given by::\n    \n        A[i, j] == (a[i-j+m-1] if (0 <= (i-j+m-1) < m) else 0)\n    \n    This corresponds to a matrix whose rows are the subset of those from\n    the 'full' case where all the coefficients in `a` are contained in the\n    row.  For input ``[x, y, z]``, this array looks like::\n    \n        [z, y, x, 0, 0, ..., 0, 0, 0]\n        [0, z, y, x, 0, ..., 0, 0, 0]\n        [0, 0, z, y, x, ..., 0, 0, 0]\n        ...\n        [0, 0, 0, 0, 0, ..., x, 0, 0]\n        [0, 0, 0, 0, 0, ..., y, x, 0]\n        [0, 0, 0, 0, 0, ..., z, y, x]\n    \n    In the 'same' mode, the entries of `A` are given by::\n    \n        d = (m - 1) // 2\n        A[i, j] == (a[i-j+d] if (0 <= (i-j+d) < m) else 0)\n    \n    The typical application of the 'same' mode is when one has a signal of\n    length `n` (with `n` greater than ``len(a)``), and the desired output\n    is a filtered signal that is still of length `n`.\n    \n    For input ``[x, y, z]``, this array looks like::\n    \n        [y, x, 0, 0, ..., 0, 0, 0]\n        [z, y, x, 0, ..., 0, 0, 0]\n        [0, z, y, x, ..., 0, 0, 0]\n        [0, 0, z, y, ..., 0, 0, 0]\n        ...\n        [0, 0, 0, 0, ..., y, x, 0]\n        [0, 0, 0, 0, ..., z, y, x]\n        [0, 0, 0, 0, ..., 0, z, y]\n    \n    .. versionadded:: 1.5.0\n    \n    References\n    ----------\n    .. [1] \"Convolution\", https://en.wikipedia.org/wiki/Convolution\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import convolution_matrix\n    >>> A = convolution_matrix([-1, 4, -2], 5, mode='same')\n    >>> A\n    array([[ 4, -1,  0,  0,  0],\n           [-2,  4, -1,  0,  0],\n           [ 0, -2,  4, -1,  0],\n           [ 0,  0, -2,  4, -1],\n           [ 0,  0,  0, -2,  4]])\n    \n    Compare multiplication by `A` with the use of `numpy.convolve`.\n    \n    >>> x = np.array([1, 2, 0, -3, 0.5])\n    >>> A @ x\n    array([  2. ,   6. ,  -1. , -12.5,   8. ])\n    \n    Verify that ``A @ x`` produced the same result as applying the\n    convolution function.\n    \n    >>> np.convolve([-1, 4, -2], x, mode='same')\n    array([  2. ,   6. ,  -1. , -12.5,   8. ])\n    \n    For comparison to the case ``mode='same'`` shown above, here are the\n    matrices produced by ``mode='full'`` and ``mode='valid'`` for the\n    same coefficients and size.\n    \n    >>> convolution_matrix([-1, 4, -2], 5, mode='full')\n    array([[-1,  0,  0,  0,  0],\n           [ 4, -1,  0,  0,  0],\n           [-2,  4, -1,  0,  0],\n           [ 0, -2,  4, -1,  0],\n           [ 0,  0, -2,  4, -1],\n           [ 0,  0,  0, -2,  4],\n           [ 0,  0,  0,  0, -2]])\n    \n    >>> convolution_matrix([-1, 4, -2], 5, mode='valid')\n    array([[-2,  4, -1,  0,  0],\n           [ 0, -2,  4, -1,  0],\n           [ 0,  0, -2,  4, -1]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "715625a540cef33c6c685f9759ef5b4d551705da34b503e92320e4abecaa94ab",
            "fields": [
                {
                    "id": "2_ygzo04",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "The 1-D array to convolve. N-dimensional arrays are treated as a\nbatch: each slice along the last axis is a 1-D array to convolve.",
                    "type": "(..., m) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "457hxrma",
                    "encoding": "",
                    "name": "n",
                    "value": "",
                    "defaultValue": "",
                    "description": "The number of columns in the resulting matrix.  It gives the length\nof the input to be convolved with `a`.  This is analogous to the\nlength of `v` in ``numpy.convolve(a, v)``.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5jf9p3pj",
                    "encoding": "",
                    "name": "mode",
                    "value": "full",
                    "defaultValue": "full",
                    "description": "This is analogous to `mode` in ``numpy.convolve(v, a, mode)``.\nIt must be one of ('full', 'valid', 'same').\nSee below for how `mode` determines the shape of the result.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ekc1qhqb",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.special_matrices.convolution_matrix",
                    "defaultValue": "scipy.linalg.special_matrices.convolution_matrix",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "boawptt9",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s2qy2feq",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "t7p9gt4b",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "grjqzso4",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.special_matrices",
                    "defaultValue": "scipy.linalg.special_matrices",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yz7d7v_7",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6f_rfgp0",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "syb_1gcm",
            "name": "special_matrices.dft",
            "description": "Discrete Fourier transform matrix.\n    \n    Create the matrix that computes the discrete Fourier transform of a\n    sequence [1]_. The nth primitive root of unity used to generate the\n    matrix is exp(-2*pi*i/n), where i = sqrt(-1).\n    \n    Parameters\n    ----------\n    n : int\n        Size the matrix to create.\n    scale : str, optional\n        Must be None, 'sqrtn', or 'n'.\n        If `scale` is 'sqrtn', the matrix is divided by `sqrt(n)`.\n        If `scale` is 'n', the matrix is divided by `n`.\n        If `scale` is None (the default), the matrix is not normalized, and the\n        return value is simply the Vandermonde matrix of the roots of unity.\n    \n    Returns\n    -------\n    m : (n, n) ndarray\n        The DFT matrix.\n    \n    Notes\n    -----\n    When `scale` is None, multiplying a vector by the matrix returned by\n    `dft` is mathematically equivalent to (but much less efficient than)\n    the calculation performed by `scipy.fft.fft`.\n    \n    .. versionadded:: 0.14.0\n    \n    References\n    ----------\n    .. [1] \"DFT matrix\", https://en.wikipedia.org/wiki/DFT_matrix\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import dft\n    >>> np.set_printoptions(precision=2, suppress=True)  # for compact output\n    >>> m = dft(5)\n    >>> m\n    array([[ 1.  +0.j  ,  1.  +0.j  ,  1.  +0.j  ,  1.  +0.j  ,  1.  +0.j  ],\n           [ 1.  +0.j  ,  0.31-0.95j, -0.81-0.59j, -0.81+0.59j,  0.31+0.95j],\n           [ 1.  +0.j  , -0.81-0.59j,  0.31+0.95j,  0.31-0.95j, -0.81+0.59j],\n           [ 1.  +0.j  , -0.81+0.59j,  0.31-0.95j,  0.31+0.95j, -0.81-0.59j],\n           [ 1.  +0.j  ,  0.31+0.95j, -0.81+0.59j, -0.81-0.59j,  0.31-0.95j]])\n    >>> x = np.array([1, 2, 3, 0, 3])\n    >>> m @ x  # Compute the DFT of x\n    array([ 9.  +0.j  ,  0.12-0.81j, -2.12+3.44j, -2.12-3.44j,  0.12+0.81j])\n    \n    Verify that ``m @ x`` is the same as ``fft(x)``.\n    \n    >>> from scipy.fft import fft\n    >>> fft(x)     # Same result as m @ x\n    array([ 9.  +0.j  ,  0.12-0.81j, -2.12+3.44j, -2.12-3.44j,  0.12+0.81j])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "340034b15039abb2caa1a6837122d318f969d281b92fd1882903f7924552c8e1",
            "fields": [
                {
                    "id": "uep_8imp",
                    "encoding": "",
                    "name": "n",
                    "value": "",
                    "defaultValue": "",
                    "description": "Size the matrix to create.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rpwhaj_c",
                    "encoding": "",
                    "name": "scale",
                    "value": "",
                    "defaultValue": "",
                    "description": "Must be None, 'sqrtn', or 'n'.\nIf `scale` is 'sqrtn', the matrix is divided by `sqrt(n)`.\nIf `scale` is 'n', the matrix is divided by `n`.\nIf `scale` is None (the default), the matrix is not normalized, and the\nreturn value is simply the Vandermonde matrix of the roots of unity.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "73bzpvie",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.special_matrices.dft",
                    "defaultValue": "scipy.linalg.special_matrices.dft",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sjmfypjy",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0or11d0m",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "my5wjb02",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sryzi_tp",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.special_matrices",
                    "defaultValue": "scipy.linalg.special_matrices",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n4t7q27q",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "myfy67jd",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "r_mbr_22",
            "name": "special_matrices.fiedler",
            "description": "Returns a symmetric Fiedler matrix\n    \n    Given an sequence of numbers `a`, Fiedler matrices have the structure\n    ``F[i, j] = np.abs(a[i] - a[j])``, and hence zero diagonals and nonnegative\n    entries. A Fiedler matrix has a dominant positive eigenvalue and other\n    eigenvalues are negative. Although not valid generally, for certain inputs,\n    the inverse and the determinant can be derived explicitly as given in [1]_.\n    \n    Parameters\n    ----------\n    a : (..., n,) array_like\n        Coefficient array. N-dimensional arrays are treated as a batch:\n        each slice along the last axis is a 1-D coefficient array.\n    \n    Returns\n    -------\n    F : (..., n, n) ndarray\n        Fiedler matrix. For batch input, each slice of shape ``(n, n)``\n        along the last two dimensions of the output corresponds with a\n        slice of shape ``(n,)`` along the last dimension of the input.\n    \n    See Also\n    --------\n    circulant, toeplitz\n    \n    Notes\n    -----\n    \n    .. versionadded:: 1.3.0\n    \n    References\n    ----------\n    .. [1] J. Todd, \"Basic Numerical Mathematics: Vol.2 : Numerical Algebra\",\n        1977, Birkhauser, :doi:`10.1007/978-3-0348-7286-7`\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import det, inv, fiedler\n    >>> a = [1, 4, 12, 45, 77]\n    >>> n = len(a)\n    >>> A = fiedler(a)\n    >>> A\n    array([[ 0,  3, 11, 44, 76],\n           [ 3,  0,  8, 41, 73],\n           [11,  8,  0, 33, 65],\n           [44, 41, 33,  0, 32],\n           [76, 73, 65, 32,  0]])\n    \n    The explicit formulas for determinant and inverse seem to hold only for\n    monotonically increasing/decreasing arrays. Note the tridiagonal structure\n    and the corners.\n    \n    >>> Ai = inv(A)\n    >>> Ai[np.abs(Ai) < 1e-12] = 0.  # cleanup the numerical noise for display\n    >>> Ai\n    array([[-0.16008772,  0.16666667,  0.        ,  0.        ,  0.00657895],\n           [ 0.16666667, -0.22916667,  0.0625    ,  0.        ,  0.        ],\n           [ 0.        ,  0.0625    , -0.07765152,  0.01515152,  0.        ],\n           [ 0.        ,  0.        ,  0.01515152, -0.03077652,  0.015625  ],\n           [ 0.00657895,  0.        ,  0.        ,  0.015625  , -0.00904605]])\n    >>> det(A)\n    15409151.999999998\n    >>> (-1)**(n-1) * 2**(n-2) * np.diff(a).prod() * (a[-1] - a[0])\n    15409152",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "0f72f898e86a3610fc49af4e504bdd9a5fe6643a38c77020cf4fd7e5bd7ad9e3",
            "fields": [
                {
                    "id": "z_3jrqzl",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Coefficient array. N-dimensional arrays are treated as a batch:\neach slice along the last axis is a 1-D coefficient array.",
                    "type": "(..., n,) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sow8wuil",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.special_matrices.fiedler",
                    "defaultValue": "scipy.linalg.special_matrices.fiedler",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x38z4u6s",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pz2awpbx",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ms5ggu2p",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k6fw7axg",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.special_matrices",
                    "defaultValue": "scipy.linalg.special_matrices",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_uxxp2c0",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "par_qxij",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "25c9bwec",
            "name": "special_matrices.fiedler_companion",
            "description": "Returns a Fiedler companion matrix\n    \n    Given a polynomial coefficient array ``a``, this function forms a\n    pentadiagonal matrix with a special structure whose eigenvalues coincides\n    with the roots of ``a``.\n    \n    Parameters\n    ----------\n    a : (..., N) array_like\n        1-D array of polynomial coefficients in descending order with a nonzero\n        leading coefficient. For ``N < 2``, an empty array is returned.\n        N-dimensional arrays are treated as a batch: each slice along the last\n        axis is a 1-D array of polynomial coefficients.\n    \n    Returns\n    -------\n    c : (..., N-1, N-1) ndarray\n        Resulting companion matrix. For batch input, each slice of shape\n        ``(N-1, N-1)`` along the last two dimensions of the output corresponds\n        with a slice of shape ``(N,)`` along the last dimension of the input.\n    \n    See Also\n    --------\n    companion\n    \n    Notes\n    -----\n    Similar to `companion`, each leading coefficient along the last axis of the\n    input should be nonzero.\n    If the leading coefficient is not 1, other coefficients are rescaled before\n    the array generation. To avoid numerical issues, it is best to provide a\n    monic polynomial.\n    \n    .. versionadded:: 1.3.0\n    \n    References\n    ----------\n    .. [1] M. Fiedler, \" A note on companion matrices\", Linear Algebra and its\n        Applications, 2003, :doi:`10.1016/S0024-3795(03)00548-2`\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.linalg import fiedler_companion, eigvals\n    >>> p = np.poly(np.arange(1, 9, 2))  # [1., -16., 86., -176., 105.]\n    >>> fc = fiedler_companion(p)\n    >>> fc\n    array([[  16.,  -86.,    1.,    0.],\n           [   1.,    0.,    0.,    0.],\n           [   0.,  176.,    0., -105.],\n           [   0.,    1.,    0.,    0.]])\n    >>> eigvals(fc)\n    array([7.+0.j, 5.+0.j, 3.+0.j, 1.+0.j])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6bc7f08a22a7b7215216c87c82d016bd105d5af719dc096bc49dbe59d349f0fe",
            "fields": [
                {
                    "id": "0nc2j244",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "1-D array of polynomial coefficients in descending order with a nonzero\nleading coefficient. For ``N < 2``, an empty array is returned.\nN-dimensional arrays are treated as a batch: each slice along the last\naxis is a 1-D array of polynomial coefficients.",
                    "type": "(..., N) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yfjvmqc6",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.special_matrices.fiedler_companion",
                    "defaultValue": "scipy.linalg.special_matrices.fiedler_companion",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h1uy7hmc",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9a43lphc",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "hfmuzppv",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qfbrfkw3",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.special_matrices",
                    "defaultValue": "scipy.linalg.special_matrices",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "giziy6bx",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p7gp6f_w",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "x9jhjt8i",
            "name": "special_matrices.hadamard",
            "description": "Construct an Hadamard matrix.\n    \n    Constructs an n-by-n Hadamard matrix, using Sylvester's\n    construction. `n` must be a power of 2.\n    \n    Parameters\n    ----------\n    n : int\n        The order of the matrix. `n` must be a power of 2.\n    dtype : dtype, optional\n        The data type of the array to be constructed.\n    \n    Returns\n    -------\n    H : (n, n) ndarray\n        The Hadamard matrix.\n    \n    Notes\n    -----\n    .. versionadded:: 0.8.0\n    \n    Examples\n    --------\n    >>> from scipy.linalg import hadamard\n    >>> hadamard(2, dtype=complex)\n    array([[ 1.+0.j,  1.+0.j],\n           [ 1.+0.j, -1.-0.j]])\n    >>> hadamard(4)\n    array([[ 1,  1,  1,  1],\n           [ 1, -1,  1, -1],\n           [ 1,  1, -1, -1],\n           [ 1, -1, -1,  1]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "85681d08907272d65c0773a815e2615fa4aa6c13222c720a3536aec4f9a08d0b",
            "fields": [
                {
                    "id": "6psunfab",
                    "encoding": "",
                    "name": "n",
                    "value": "",
                    "defaultValue": "",
                    "description": "The order of the matrix. `n` must be a power of 2.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pw3ea2x0",
                    "encoding": "",
                    "name": "dtype",
                    "value": "builtins.type",
                    "defaultValue": "builtins.type",
                    "description": "The data type of the array to be constructed.",
                    "type": "builtins.type",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n32glctz",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.special_matrices.hadamard",
                    "defaultValue": "scipy.linalg.special_matrices.hadamard",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hrry19bq",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x5f42bi2",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "c5ltya_u",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sens5ry4",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.special_matrices",
                    "defaultValue": "scipy.linalg.special_matrices",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tdgzc_e_",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "grxdv3ce",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "gh72kkal",
            "name": "special_matrices.hankel",
            "description": "Construct a Hankel matrix.\n    \n    The Hankel matrix has constant anti-diagonals, with `c` as its\n    first column and `r` as its last row. If the first element of `r`\n    differs from the last element of `c`, the first element of `r` is\n    replaced by the last element of `c` to ensure that anti-diagonals\n    remain constant. If `r` is not given, then `r = zeros_like(c)` is\n    assumed.\n    \n    Parameters\n    ----------\n    c : array_like\n        First column of the matrix. Whatever the actual shape of `c`, it\n        will be converted to a 1-D array.\n    r : array_like, optional\n        Last row of the matrix. If None, ``r = zeros_like(c)`` is assumed.\n        r[0] is ignored; the last row of the returned matrix is\n        ``[c[-1], r[1:]]``. Whatever the actual shape of `r`, it will be\n        converted to a 1-D array.\n    \n    Returns\n    -------\n    A : (len(c), len(r)) ndarray\n        The Hankel matrix. Dtype is the same as ``(c[0] + r[0]).dtype``.\n    \n    See Also\n    --------\n    toeplitz : Toeplitz matrix\n    circulant : circulant matrix\n    \n    Examples\n    --------\n    >>> from scipy.linalg import hankel\n    >>> hankel([1, 17, 99])\n    array([[ 1, 17, 99],\n           [17, 99,  0],\n           [99,  0,  0]])\n    >>> hankel([1,2,3,4], [4,7,7,8,9])\n    array([[1, 2, 3, 4, 7],\n           [2, 3, 4, 7, 7],\n           [3, 4, 7, 7, 8],\n           [4, 7, 7, 8, 9]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "768a3d6c1563bb18ea559bc234d7e1a447f7064ad057cc819dca1fd274bee3db",
            "fields": [
                {
                    "id": "eqqmk8f4",
                    "encoding": "",
                    "name": "c",
                    "value": "",
                    "defaultValue": "",
                    "description": "First column of the matrix. Whatever the actual shape of `c`, it\nwill be converted to a 1-D array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "emcyrp9e",
                    "encoding": "",
                    "name": "r",
                    "value": "",
                    "defaultValue": "",
                    "description": "Last row of the matrix. If None, ``r = zeros_like(c)`` is assumed.\nr[0] is ignored; the last row of the returned matrix is\n``[c[-1], r[1:]]``. Whatever the actual shape of `r`, it will be\nconverted to a 1-D array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rkjmoamv",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.special_matrices.hankel",
                    "defaultValue": "scipy.linalg.special_matrices.hankel",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1qckfxs9",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ty78m3na",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "3uxuhpiw",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yqbmnkcc",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.special_matrices",
                    "defaultValue": "scipy.linalg.special_matrices",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w9wnv140",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "62qtgq__",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "wp1827t2",
            "name": "special_matrices.helmert",
            "description": "Create an Helmert matrix of order `n`.\n    \n    This has applications in statistics, compositional or simplicial analysis,\n    and in Aitchison geometry.\n    \n    Parameters\n    ----------\n    n : int\n        The size of the array to create.\n    full : bool, optional\n        If True the (n, n) ndarray will be returned.\n        Otherwise the submatrix that does not include the first\n        row will be returned.\n        Default: False.\n    \n    Returns\n    -------\n    M : ndarray\n        The Helmert matrix.\n        The shape is (n, n) or (n-1, n) depending on the `full` argument.\n    \n    Examples\n    --------\n    >>> from scipy.linalg import helmert\n    >>> helmert(5, full=True)\n    array([[ 0.4472136 ,  0.4472136 ,  0.4472136 ,  0.4472136 ,  0.4472136 ],\n           [ 0.70710678, -0.70710678,  0.        ,  0.        ,  0.        ],\n           [ 0.40824829,  0.40824829, -0.81649658,  0.        ,  0.        ],\n           [ 0.28867513,  0.28867513,  0.28867513, -0.8660254 ,  0.        ],\n           [ 0.2236068 ,  0.2236068 ,  0.2236068 ,  0.2236068 , -0.89442719]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e4be3175409144ad3001b3578f87c0930568abdaa164b9746d87708f79d6b956",
            "fields": [
                {
                    "id": "i121jy07",
                    "encoding": "",
                    "name": "n",
                    "value": "",
                    "defaultValue": "",
                    "description": "The size of the array to create.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bpeo5h9a",
                    "encoding": "",
                    "name": "full",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True the (n, n) ndarray will be returned.\nOtherwise the submatrix that does not include the first\nrow will be returned.\nDefault: False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lr4eanq8",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.special_matrices.helmert",
                    "defaultValue": "scipy.linalg.special_matrices.helmert",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1hwyr695",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qthlk988",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "7thsbsqb",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4te6d15h",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.special_matrices",
                    "defaultValue": "scipy.linalg.special_matrices",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ra_61fp8",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k9_2xegg",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "doncbrnr",
            "name": "special_matrices.hilbert",
            "description": "Create a Hilbert matrix of order `n`.\n    \n    Returns the `n` by `n` array with entries `h[i,j] = 1 / (i + j + 1)`.\n    \n    Parameters\n    ----------\n    n : int\n        The size of the array to create.\n    \n    Returns\n    -------\n    h : (n, n) ndarray\n        The Hilbert matrix.\n    \n    See Also\n    --------\n    invhilbert : Compute the inverse of a Hilbert matrix.\n    \n    Notes\n    -----\n    .. versionadded:: 0.10.0\n    \n    Examples\n    --------\n    >>> from scipy.linalg import hilbert\n    >>> hilbert(3)\n    array([[ 1.        ,  0.5       ,  0.33333333],\n           [ 0.5       ,  0.33333333,  0.25      ],\n           [ 0.33333333,  0.25      ,  0.2       ]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f0eb64819ec283af331e171f92fea221000c66dd1771a7867d2073b00b216160",
            "fields": [
                {
                    "id": "fz_crdqa",
                    "encoding": "",
                    "name": "n",
                    "value": "",
                    "defaultValue": "",
                    "description": "The size of the array to create.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a9z25spd",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.special_matrices.hilbert",
                    "defaultValue": "scipy.linalg.special_matrices.hilbert",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4a578rn4",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yiqj8ew7",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "4us_mwxj",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h88agmj9",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.special_matrices",
                    "defaultValue": "scipy.linalg.special_matrices",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sebzv2ic",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dg_x2hp7",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "goazf3n8",
            "name": "special_matrices.invhilbert",
            "description": "Compute the inverse of the Hilbert matrix of order `n`.\n    \n    The entries in the inverse of a Hilbert matrix are integers. When `n`\n    is greater than 14, some entries in the inverse exceed the upper limit\n    of 64 bit integers. The `exact` argument provides two options for\n    dealing with these large integers.\n    \n    Parameters\n    ----------\n    n : int\n        The order of the Hilbert matrix.\n    exact : bool, optional\n        If False, the data type of the array that is returned is np.float64,\n        and the array is an approximation of the inverse.\n        If True, the array is the exact integer inverse array. To represent\n        the exact inverse when n > 14, the returned array is an object array\n        of long integers. For n <= 14, the exact inverse is returned as an\n        array with data type np.int64.\n    \n    Returns\n    -------\n    invh : (n, n) ndarray\n        The data type of the array is np.float64 if `exact` is False.\n        If `exact` is True, the data type is either np.int64 (for n <= 14)\n        or object (for n > 14). In the latter case, the objects in the\n        array will be long integers.\n    \n    See Also\n    --------\n    hilbert : Create a Hilbert matrix.\n    \n    Notes\n    -----\n    .. versionadded:: 0.10.0\n    \n    Examples\n    --------\n    >>> from scipy.linalg import invhilbert\n    >>> invhilbert(4)\n    array([[   16.,  -120.,   240.,  -140.],\n           [ -120.,  1200., -2700.,  1680.],\n           [  240., -2700.,  6480., -4200.],\n           [ -140.,  1680., -4200.,  2800.]])\n    >>> invhilbert(4, exact=True)\n    array([[   16,  -120,   240,  -140],\n           [ -120,  1200, -2700,  1680],\n           [  240, -2700,  6480, -4200],\n           [ -140,  1680, -4200,  2800]], dtype=int64)\n    >>> invhilbert(16)[7,7]\n    4.2475099528537506e+19\n    >>> invhilbert(16, exact=True)[7,7]\n    42475099528537378560",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b4764e52ba5c56a9abed0325cd10aeb863fb6e50657e81fa7daad1086917bd7c",
            "fields": [
                {
                    "id": "aw9zhtjx",
                    "encoding": "",
                    "name": "n",
                    "value": "",
                    "defaultValue": "",
                    "description": "The order of the Hilbert matrix.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j_cgsclr",
                    "encoding": "",
                    "name": "exact",
                    "value": false,
                    "defaultValue": false,
                    "description": "If False, the data type of the array that is returned is np.float64,\nand the array is an approximation of the inverse.\nIf True, the array is the exact integer inverse array. To represent\nthe exact inverse when n > 14, the returned array is an object array\nof long integers. For n <= 14, the exact inverse is returned as an\narray with data type np.int64.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8gowjeyv",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.special_matrices.invhilbert",
                    "defaultValue": "scipy.linalg.special_matrices.invhilbert",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "okn_xi4l",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l8h2gpiu",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "_8ydo3cb",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "poxrpaj3",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.special_matrices",
                    "defaultValue": "scipy.linalg.special_matrices",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_vpcz9fk",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ngvl6yni",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "0ydmaf9u",
            "name": "special_matrices.invpascal",
            "description": "Returns the inverse of the n x n Pascal matrix.\n    \n    The Pascal matrix is a matrix containing the binomial coefficients as\n    its elements.\n    \n    Parameters\n    ----------\n    n : int\n        The size of the matrix to create; that is, the result is an n x n\n        matrix.\n    kind : str, optional\n        Must be one of 'symmetric', 'lower', or 'upper'.\n        Default is 'symmetric'.\n    exact : bool, optional\n        If `exact` is True, the result is either an array of type\n        ``numpy.int64`` (if `n` <= 35) or an object array of Python integers.\n        If `exact` is False, the coefficients in the matrix are computed using\n        `scipy.special.comb` with `exact=False`. The result will be a floating\n        point array, and for large `n`, the values in the array will not be the\n        exact coefficients.\n    \n    Returns\n    -------\n    invp : (n, n) ndarray\n        The inverse of the Pascal matrix.\n    \n    See Also\n    --------\n    pascal\n    \n    Notes\n    -----\n    \n    .. versionadded:: 0.16.0\n    \n    References\n    ----------\n    .. [1] \"Pascal matrix\", https://en.wikipedia.org/wiki/Pascal_matrix\n    .. [2] Cohen, A. M., \"The inverse of a Pascal matrix\", Mathematical\n           Gazette, 59(408), pp. 111-112, 1975.\n    \n    Examples\n    --------\n    >>> from scipy.linalg import invpascal, pascal\n    >>> invp = invpascal(5)\n    >>> invp\n    array([[  5, -10,  10,  -5,   1],\n           [-10,  30, -35,  19,  -4],\n           [ 10, -35,  46, -27,   6],\n           [ -5,  19, -27,  17,  -4],\n           [  1,  -4,   6,  -4,   1]])\n    \n    >>> p = pascal(5)\n    >>> p.dot(invp)\n    array([[ 1.,  0.,  0.,  0.,  0.],\n           [ 0.,  1.,  0.,  0.,  0.],\n           [ 0.,  0.,  1.,  0.,  0.],\n           [ 0.,  0.,  0.,  1.,  0.],\n           [ 0.,  0.,  0.,  0.,  1.]])\n    \n    An example of the use of `kind` and `exact`:\n    \n    >>> invpascal(5, kind='lower', exact=False)\n    array([[ 1., -0.,  0., -0.,  0.],\n           [-1.,  1., -0.,  0., -0.],\n           [ 1., -2.,  1., -0.,  0.],\n           [-1.,  3., -3.,  1., -0.],\n           [ 1., -4.,  6., -4.,  1.]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e94ccb8e7eb50201fe3ba91a10edfade2fc814d55150a319a0b20cb4ad6c9c69",
            "fields": [
                {
                    "id": "0ihllaph",
                    "encoding": "",
                    "name": "n",
                    "value": "",
                    "defaultValue": "",
                    "description": "The size of the matrix to create; that is, the result is an n x n\nmatrix.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "szhghwn2",
                    "encoding": "",
                    "name": "kind",
                    "value": "symmetric",
                    "defaultValue": "symmetric",
                    "description": "Must be one of 'symmetric', 'lower', or 'upper'.\nDefault is 'symmetric'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9q9pah9z",
                    "encoding": "",
                    "name": "exact",
                    "value": true,
                    "defaultValue": true,
                    "description": "If `exact` is True, the result is either an array of type\n``numpy.int64`` (if `n` <= 35) or an object array of Python integers.\nIf `exact` is False, the coefficients in the matrix are computed using\n`scipy.special.comb` with `exact=False`. The result will be a floating\npoint array, and for large `n`, the values in the array will not be the\nexact coefficients.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eyjtzmiz",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.special_matrices.invpascal",
                    "defaultValue": "scipy.linalg.special_matrices.invpascal",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bdg5_yjp",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "13urxmip",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "forohflb",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "evsqny1u",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.special_matrices",
                    "defaultValue": "scipy.linalg.special_matrices",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rdnxgz_l",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o4xev0_1",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "pzppo88x",
            "name": "special_matrices.kron",
            "description": "Kronecker product.\n    \n    .. deprecated:: 1.15.0\n        `kron` has been deprecated in favour of `numpy.kron` and will be\n        removed in SciPy 1.17.0.\n    \n    The result is the block matrix::\n    \n        a[0,0]*b    a[0,1]*b  ... a[0,-1]*b\n        a[1,0]*b    a[1,1]*b  ... a[1,-1]*b\n        ...\n        a[-1,0]*b   a[-1,1]*b ... a[-1,-1]*b\n    \n    Parameters\n    ----------\n    a : (M, N) ndarray\n        Input array\n    b : (P, Q) ndarray\n        Input array\n    \n    Returns\n    -------\n    A : (M*P, N*Q) ndarray\n        Kronecker product of `a` and `b`.\n    \n    Examples\n    --------\n    >>> from numpy import array\n    >>> from scipy.linalg import kron\n    >>> kron(array([[1,2],[3,4]]), array([[1,1,1]]))\n    array([[1, 1, 1, 2, 2, 2],\n           [3, 3, 3, 4, 4, 4]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "403a200779352ccd11321c3523ab09bc332c3b8cc31e07de8a2d0920965427fa",
            "fields": [
                {
                    "id": "bw3edfbm",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array",
                    "type": "(M, N) ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a9k7ioor",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array",
                    "type": "(P, Q) ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b_o1xk67",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.special_matrices.kron",
                    "defaultValue": "scipy.linalg.special_matrices.kron",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2srw9xs0",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hlphm7bp",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "3yiij09r",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o5edoq22",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.special_matrices",
                    "defaultValue": "scipy.linalg.special_matrices",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xh2gpm24",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z_raczik",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "761uys54",
            "name": "special_matrices.leslie",
            "description": "Create a Leslie matrix.\n    \n    Given the length n array of fecundity coefficients `f` and the length\n    n-1 array of survival coefficients `s`, return the associated Leslie\n    matrix.\n    \n    The documentation is written assuming array arguments are of specified\n    \"core\" shapes. However, array argument(s) of this function may have additional\n    \"batch\" dimensions prepended to the core shape. In this case, the array is treated\n    as a batch of lower-dimensional slices; see :ref:`linalg_batch` for details.\n    \n    Parameters\n    ----------\n    f : (N,) array_like\n        The \"fecundity\" coefficients.\n    s : (N-1,) array_like\n        The \"survival\" coefficients. The length of `s` must be one less\n        than the length of `f`, and it must be at least 1.\n    \n    Returns\n    -------\n    L : (N, N) ndarray\n        The array is zero except for the first row,\n        which is `f`, and the first sub-diagonal, which is `s`.\n        The data-type of the array will be the data-type of\n        ``f[0]+s[0]``.\n    \n    Notes\n    -----\n    The Leslie matrix is used to model discrete-time, age-structured\n    population growth [1]_ [2]_. In a population with `n` age classes, two sets\n    of parameters define a Leslie matrix: the `n` \"fecundity coefficients\",\n    which give the number of offspring per-capita produced by each age\n    class, and the `n` - 1 \"survival coefficients\", which give the\n    per-capita survival rate of each age class.\n    \n    References\n    ----------\n    .. [1] P. H. Leslie, On the use of matrices in certain population\n           mathematics, Biometrika, Vol. 33, No. 3, 183--212 (Nov. 1945)\n    .. [2] P. H. Leslie, Some further notes on the use of matrices in\n           population mathematics, Biometrika, Vol. 35, No. 3/4, 213--245\n           (Dec. 1948)\n    \n    Examples\n    --------\n    >>> from scipy.linalg import leslie\n    >>> leslie([0.1, 2.0, 1.0, 0.1], [0.2, 0.8, 0.7])\n    array([[ 0.1,  2. ,  1. ,  0.1],\n           [ 0.2,  0. ,  0. ,  0. ],\n           [ 0. ,  0.8,  0. ,  0. ],\n           [ 0. ,  0. ,  0.7,  0. ]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "09a9d6759d25487bd65258a1e30b564159bb2e0431e18a084e6f7895da7a40e3",
            "fields": [
                {
                    "id": "_3i_3t5k",
                    "encoding": "",
                    "name": "f",
                    "value": "",
                    "defaultValue": "",
                    "description": "The \"fecundity\" coefficients.",
                    "type": "(N,) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dqkle3od",
                    "encoding": "",
                    "name": "s",
                    "value": "",
                    "defaultValue": "",
                    "description": "The \"survival\" coefficients. The length of `s` must be one less\nthan the length of `f`, and it must be at least 1.",
                    "type": "(N-1,) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qo9enw03",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.special_matrices.leslie",
                    "defaultValue": "scipy.linalg.special_matrices.leslie",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x90t076c",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "imc23x_8",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "cv_jgoo2",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5id9fme3",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.special_matrices",
                    "defaultValue": "scipy.linalg.special_matrices",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vyjymj7m",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ietx_zuc",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "u722590p",
            "name": "special_matrices.pascal",
            "description": "Returns the n x n Pascal matrix.\n    \n    The Pascal matrix is a matrix containing the binomial coefficients as\n    its elements.\n    \n    Parameters\n    ----------\n    n : int\n        The size of the matrix to create; that is, the result is an n x n\n        matrix.\n    kind : str, optional\n        Must be one of 'symmetric', 'lower', or 'upper'.\n        Default is 'symmetric'.\n    exact : bool, optional\n        If `exact` is True, the result is either an array of type\n        numpy.uint64 (if n < 35) or an object array of Python long integers.\n        If `exact` is False, the coefficients in the matrix are computed using\n        `scipy.special.comb` with ``exact=False``. The result will be a floating\n        point array, and the values in the array will not be the exact\n        coefficients, but this version is much faster than ``exact=True``.\n    \n    Returns\n    -------\n    p : (n, n) ndarray\n        The Pascal matrix.\n    \n    See Also\n    --------\n    invpascal\n    \n    Notes\n    -----\n    See https://en.wikipedia.org/wiki/Pascal_matrix for more information\n    about Pascal matrices.\n    \n    .. versionadded:: 0.11.0\n    \n    Examples\n    --------\n    >>> from scipy.linalg import pascal\n    >>> pascal(4)\n    array([[ 1,  1,  1,  1],\n           [ 1,  2,  3,  4],\n           [ 1,  3,  6, 10],\n           [ 1,  4, 10, 20]], dtype=uint64)\n    >>> pascal(4, kind='lower')\n    array([[1, 0, 0, 0],\n           [1, 1, 0, 0],\n           [1, 2, 1, 0],\n           [1, 3, 3, 1]], dtype=uint64)\n    >>> pascal(50)[-1, -1]\n    25477612258980856902730428600\n    >>> from scipy.special import comb\n    >>> comb(98, 49, exact=True)\n    25477612258980856902730428600",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c2b1cd25f591b699e6ba22d35a69861a585e29429017aabbab6b1e44a81f5e63",
            "fields": [
                {
                    "id": "2yr89jcx",
                    "encoding": "",
                    "name": "n",
                    "value": "",
                    "defaultValue": "",
                    "description": "The size of the matrix to create; that is, the result is an n x n\nmatrix.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qydekcck",
                    "encoding": "",
                    "name": "kind",
                    "value": "symmetric",
                    "defaultValue": "symmetric",
                    "description": "Must be one of 'symmetric', 'lower', or 'upper'.\nDefault is 'symmetric'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9hqcml9p",
                    "encoding": "",
                    "name": "exact",
                    "value": true,
                    "defaultValue": true,
                    "description": "If `exact` is True, the result is either an array of type\nnumpy.uint64 (if n < 35) or an object array of Python long integers.\nIf `exact` is False, the coefficients in the matrix are computed using\n`scipy.special.comb` with ``exact=False``. The result will be a floating\npoint array, and the values in the array will not be the exact\ncoefficients, but this version is much faster than ``exact=True``.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v5ltu9tt",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.special_matrices.pascal",
                    "defaultValue": "scipy.linalg.special_matrices.pascal",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3rmidx40",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ddsk_dt6",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "uzyul47d",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yavovqma",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.special_matrices",
                    "defaultValue": "scipy.linalg.special_matrices",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "38l1wzpk",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ie8siyt_",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "39x7bu6e",
            "name": "special_matrices.toeplitz",
            "description": "Construct a Toeplitz matrix.\n    \n    The Toeplitz matrix has constant diagonals, with c as its first column\n    and r as its first row. If r is not given, ``r == conjugate(c)`` is\n    assumed.\n    \n    Parameters\n    ----------\n    c : array_like\n        First column of the matrix.\n    r : array_like, optional\n        First row of the matrix. If None, ``r = conjugate(c)`` is assumed;\n        in this case, if c[0] is real, the result is a Hermitian matrix.\n        r[0] is ignored; the first row of the returned matrix is\n        ``[c[0], r[1:]]``.\n    \n        .. warning::\n    \n            Beginning in SciPy 1.17, multidimensional input will be treated as a batch,\n            not ``ravel``\\ ed. To preserve the existing behavior, ``ravel`` arguments\n            before passing them to `toeplitz`.\n    \n    Returns\n    -------\n    A : (len(c), len(r)) ndarray\n        The Toeplitz matrix. Dtype is the same as ``(c[0] + r[0]).dtype``.\n    \n    See Also\n    --------\n    circulant : circulant matrix\n    hankel : Hankel matrix\n    solve_toeplitz : Solve a Toeplitz system.\n    \n    Notes\n    -----\n    The behavior when `c` or `r` is a scalar, or when `c` is complex and\n    `r` is None, was changed in version 0.8.0. The behavior in previous\n    versions was undocumented and is no longer supported.\n    \n    Examples\n    --------\n    >>> from scipy.linalg import toeplitz\n    >>> toeplitz([1,2,3], [1,4,5,6])\n    array([[1, 4, 5, 6],\n           [2, 1, 4, 5],\n           [3, 2, 1, 4]])\n    >>> toeplitz([1.0, 2+3j, 4-1j])\n    array([[ 1.+0.j,  2.-3.j,  4.+1.j],\n           [ 2.+3.j,  1.+0.j,  2.-3.j],\n           [ 4.-1.j,  2.+3.j,  1.+0.j]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "16c58819ebe494a53ae2463a4381e4673645864ade2e6fdee50f398b6b9ccc8c",
            "fields": [
                {
                    "id": "k3jowuq7",
                    "encoding": "",
                    "name": "c",
                    "value": "",
                    "defaultValue": "",
                    "description": "First column of the matrix.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rtkn7dhp",
                    "encoding": "",
                    "name": "r",
                    "value": "",
                    "defaultValue": "",
                    "description": "First row of the matrix. If None, ``r = conjugate(c)`` is assumed;\nin this case, if c[0] is real, the result is a Hermitian matrix.\nr[0] is ignored; the first row of the returned matrix is\n``[c[0], r[1:]]``.\n\n.. warning::\n\n    Beginning in SciPy 1.17, multidimensional input will be treated as a batch,\n    not ``ravel``\\ ed. To preserve the existing behavior, ``ravel`` arguments\n    before passing them to `toeplitz`.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iyxag21w",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.special_matrices.toeplitz",
                    "defaultValue": "scipy.linalg.special_matrices.toeplitz",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lpr5l2rw",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "438sktun",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "r54gs1xg",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ooobdr9a",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.special_matrices",
                    "defaultValue": "scipy.linalg.special_matrices",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pu55mwiy",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vdr9it16",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "7snvwr7l",
            "name": "interpolative.estimate_rank",
            "description": "Estimate matrix rank to a specified relative precision using randomized\n    methods.\n    \n    The matrix `A` can be given as either a :class:`numpy.ndarray` or a\n    :class:`scipy.sparse.linalg.LinearOperator`, with different algorithms used\n    for each case. If `A` is of type :class:`numpy.ndarray`, then the output\n    rank is typically about 8 higher than the actual numerical rank.\n    \n    ..  This function automatically detects the form of the input parameters and\n        passes them to the appropriate backend. For details,\n        see :func:`_backend.idd_estrank`, :func:`_backend.idd_findrank`,\n        :func:`_backend.idz_estrank`, and :func:`_backend.idz_findrank`.\n    \n    Parameters\n    ----------\n    A : :class:`numpy.ndarray` or :class:`scipy.sparse.linalg.LinearOperator`\n        Matrix whose rank is to be estimated, given as either a\n        :class:`numpy.ndarray` or a :class:`scipy.sparse.linalg.LinearOperator`\n        with the `rmatvec` method (to apply the matrix adjoint).\n    eps : float\n        Relative error for numerical rank definition.\n    rng : `numpy.random.Generator`, optional\n        Pseudorandom number generator state. When `rng` is None, a new\n        `numpy.random.Generator` is created using entropy from the\n        operating system. Types other than `numpy.random.Generator` are\n        passed to `numpy.random.default_rng` to instantiate a ``Generator``.\n        If `rand` is ``False``, the argument is ignored.\n    \n    Returns\n    -------\n    int\n        Estimated matrix rank.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f075d7230c1dc9559654fbc4b65dab4d952cad2aeededf6d6a691aea633c7b11",
            "fields": [
                {
                    "id": "s9hur_ch",
                    "encoding": "",
                    "name": "A",
                    "value": "",
                    "defaultValue": "",
                    "description": "Matrix whose rank is to be estimated, given as either a\n:class:`numpy.ndarray` or a :class:`scipy.sparse.linalg.LinearOperator`\nwith the `rmatvec` method (to apply the matrix adjoint).",
                    "type": "class:numpy.ndarray or :class:scipy.sparse.linalg.LinearOperator",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lks1spff",
                    "encoding": "",
                    "name": "eps",
                    "value": "",
                    "defaultValue": "",
                    "description": "Relative error for numerical rank definition.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "irhxcl_y",
                    "encoding": "",
                    "name": "rng",
                    "value": "",
                    "defaultValue": "",
                    "description": "Pseudorandom number generator state. When `rng` is None, a new\n`numpy.random.Generator` is created using entropy from the\noperating system. Types other than `numpy.random.Generator` are\npassed to `numpy.random.default_rng` to instantiate a ``Generator``.\nIf `rand` is ``False``, the argument is ignored.",
                    "type": "numpy.random.Generator",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ahc1_n7w",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.interpolative.estimate_rank",
                    "defaultValue": "scipy.linalg.interpolative.estimate_rank",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o8btihls",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wppjdst5",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "jixyi1yw",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ni1xx3qp",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.interpolative",
                    "defaultValue": "scipy.linalg.interpolative",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xdvtbrfa",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "44iomhpu",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "utg4vbwg",
            "name": "interpolative.estimate_spectral_norm",
            "description": "Estimate spectral norm of a matrix by the randomized power method.\n    \n    ..  This function automatically detects the matrix data type and calls the\n        appropriate backend. For details, see :func:`_backend.idd_snorm` and\n        :func:`_backend.idz_snorm`.\n    \n    Parameters\n    ----------\n    A : :class:`scipy.sparse.linalg.LinearOperator`\n        Matrix given as a :class:`scipy.sparse.linalg.LinearOperator` with the\n        `matvec` and `rmatvec` methods (to apply the matrix and its adjoint).\n    its : int, optional\n        Number of power method iterations.\n    rng : `numpy.random.Generator`, optional\n        Pseudorandom number generator state. When `rng` is None, a new\n        `numpy.random.Generator` is created using entropy from the\n        operating system. Types other than `numpy.random.Generator` are\n        passed to `numpy.random.default_rng` to instantiate a ``Generator``.\n        If `rand` is ``False``, the argument is ignored.\n    \n    Returns\n    -------\n    float\n        Spectral norm estimate.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ce94a0f6c25b44c2eb23840c397da9469297d412e4a13fa90d63c2220bdf9bda",
            "fields": [
                {
                    "id": "zju8yw_r",
                    "encoding": "",
                    "name": "A",
                    "value": "",
                    "defaultValue": "",
                    "description": "Matrix given as a :class:`scipy.sparse.linalg.LinearOperator` with the\n`matvec` and `rmatvec` methods (to apply the matrix and its adjoint).",
                    "type": "class:scipy.sparse.linalg.LinearOperator",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3_10l34e",
                    "encoding": "",
                    "name": "its",
                    "value": 20,
                    "defaultValue": 20,
                    "description": "Number of power method iterations.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_1x5a06f",
                    "encoding": "",
                    "name": "rng",
                    "value": "",
                    "defaultValue": "",
                    "description": "Pseudorandom number generator state. When `rng` is None, a new\n`numpy.random.Generator` is created using entropy from the\noperating system. Types other than `numpy.random.Generator` are\npassed to `numpy.random.default_rng` to instantiate a ``Generator``.\nIf `rand` is ``False``, the argument is ignored.",
                    "type": "numpy.random.Generator",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8lyjwywt",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.interpolative.estimate_spectral_norm",
                    "defaultValue": "scipy.linalg.interpolative.estimate_spectral_norm",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g6alzow8",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c4xaay2s",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "0m4ol1_9",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zoffk36a",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.interpolative",
                    "defaultValue": "scipy.linalg.interpolative",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8q675kly",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cp5eie3s",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "jsy63608",
            "name": "interpolative.estimate_spectral_norm_diff",
            "description": "Estimate spectral norm of the difference of two matrices by the randomized\n    power method.\n    \n    ..  This function automatically detects the matrix data type and calls the\n        appropriate backend. For details, see :func:`_backend.idd_diffsnorm` and\n        :func:`_backend.idz_diffsnorm`.\n    \n    Parameters\n    ----------\n    A : :class:`scipy.sparse.linalg.LinearOperator`\n        First matrix given as a :class:`scipy.sparse.linalg.LinearOperator` with the\n        `matvec` and `rmatvec` methods (to apply the matrix and its adjoint).\n    B : :class:`scipy.sparse.linalg.LinearOperator`\n        Second matrix given as a :class:`scipy.sparse.linalg.LinearOperator` with\n        the `matvec` and `rmatvec` methods (to apply the matrix and its adjoint).\n    its : int, optional\n        Number of power method iterations.\n    rng : `numpy.random.Generator`, optional\n        Pseudorandom number generator state. When `rng` is None, a new\n        `numpy.random.Generator` is created using entropy from the\n        operating system. Types other than `numpy.random.Generator` are\n        passed to `numpy.random.default_rng` to instantiate a ``Generator``.\n        If `rand` is ``False``, the argument is ignored.\n    \n    Returns\n    -------\n    float\n        Spectral norm estimate of matrix difference.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "87b5bd9c40e1ec668b948f9ff4bdba4fddc8117bf1703380e0d74bb9f127e288",
            "fields": [
                {
                    "id": "zvc1khys",
                    "encoding": "",
                    "name": "A",
                    "value": "",
                    "defaultValue": "",
                    "description": "First matrix given as a :class:`scipy.sparse.linalg.LinearOperator` with the\n`matvec` and `rmatvec` methods (to apply the matrix and its adjoint).",
                    "type": "class:scipy.sparse.linalg.LinearOperator",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "je3iwa14",
                    "encoding": "",
                    "name": "B",
                    "value": "",
                    "defaultValue": "",
                    "description": "Second matrix given as a :class:`scipy.sparse.linalg.LinearOperator` with\nthe `matvec` and `rmatvec` methods (to apply the matrix and its adjoint).",
                    "type": "class:scipy.sparse.linalg.LinearOperator",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oqrzvvl2",
                    "encoding": "",
                    "name": "its",
                    "value": 20,
                    "defaultValue": 20,
                    "description": "Number of power method iterations.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h5pfehea",
                    "encoding": "",
                    "name": "rng",
                    "value": "",
                    "defaultValue": "",
                    "description": "Pseudorandom number generator state. When `rng` is None, a new\n`numpy.random.Generator` is created using entropy from the\noperating system. Types other than `numpy.random.Generator` are\npassed to `numpy.random.default_rng` to instantiate a ``Generator``.\nIf `rand` is ``False``, the argument is ignored.",
                    "type": "numpy.random.Generator",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aelbg_xj",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.interpolative.estimate_spectral_norm_diff",
                    "defaultValue": "scipy.linalg.interpolative.estimate_spectral_norm_diff",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_4aa1egi",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_btr9yn8",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "2m59nuhg",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ubwflmem",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.interpolative",
                    "defaultValue": "scipy.linalg.interpolative",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hmi29rio",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ifw7b8sh",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "h3bj8dg0",
            "name": "interpolative.id_to_svd",
            "description": "Convert ID to SVD.\n    \n    The SVD reconstruction of a matrix with skeleton matrix `B` and ID indices and\n    coefficients `idx` and `proj`, respectively, is::\n    \n        U, S, V = id_to_svd(B, idx, proj)\n        A = numpy.dot(U, numpy.dot(numpy.diag(S), V.conj().T))\n    \n    See also :func:`svd`.\n    \n    ..  This function automatically detects the matrix data type and calls the\n        appropriate backend. For details, see :func:`_backend.idd_id2svd` and\n        :func:`_backend.idz_id2svd`.\n    \n    Parameters\n    ----------\n    B : :class:`numpy.ndarray`\n        Skeleton matrix.\n    idx : :class:`numpy.ndarray`\n        1D column index array.\n    proj : :class:`numpy.ndarray`\n        Interpolation coefficients.\n    \n    Returns\n    -------\n    U : :class:`numpy.ndarray`\n        Left singular vectors.\n    S : :class:`numpy.ndarray`\n        Singular values.\n    V : :class:`numpy.ndarray`\n        Right singular vectors.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e280fa5b4adf7bdb1e3123421b0839992c959bdf20b38636c031d327942d2d0e",
            "fields": [
                {
                    "id": "7z_fbpwl",
                    "encoding": "",
                    "name": "B",
                    "value": "",
                    "defaultValue": "",
                    "description": "Skeleton matrix.",
                    "type": "class:numpy.ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xm14br30",
                    "encoding": "",
                    "name": "idx",
                    "value": "",
                    "defaultValue": "",
                    "description": "1D column index array.",
                    "type": "class:numpy.ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ppr7fa34",
                    "encoding": "",
                    "name": "proj",
                    "value": "",
                    "defaultValue": "",
                    "description": "Interpolation coefficients.",
                    "type": "class:numpy.ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jivftqop",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.interpolative.id_to_svd",
                    "defaultValue": "scipy.linalg.interpolative.id_to_svd",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1pjj2lhy",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "la6o0x0z",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "bciublw9",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c4vlygqn",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.interpolative",
                    "defaultValue": "scipy.linalg.interpolative",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m_8z6pei",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w45ww_53",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "lqj5zl5r",
            "name": "interpolative.interp_decomp",
            "description": "Compute ID of a matrix.\n    \n    An ID of a matrix `A` is a factorization defined by a rank `k`, a column\n    index array `idx`, and interpolation coefficients `proj` such that::\n    \n        numpy.dot(A[:,idx[:k]], proj) = A[:,idx[k:]]\n    \n    The original matrix can then be reconstructed as::\n    \n        numpy.hstack([A[:,idx[:k]],\n                                    numpy.dot(A[:,idx[:k]], proj)]\n                                )[:,numpy.argsort(idx)]\n    \n    or via the routine :func:`reconstruct_matrix_from_id`. This can\n    equivalently be written as::\n    \n        numpy.dot(A[:,idx[:k]],\n                            numpy.hstack([numpy.eye(k), proj])\n                          )[:,np.argsort(idx)]\n    \n    in terms of the skeleton and interpolation matrices::\n    \n        B = A[:,idx[:k]]\n    \n    and::\n    \n        P = numpy.hstack([numpy.eye(k), proj])[:,np.argsort(idx)]\n    \n    respectively. See also :func:`reconstruct_interp_matrix` and\n    :func:`reconstruct_skel_matrix`.\n    \n    The ID can be computed to any relative precision or rank (depending on the\n    value of `eps_or_k`). If a precision is specified (`eps_or_k < 1`), then\n    this function has the output signature::\n    \n        k, idx, proj = interp_decomp(A, eps_or_k)\n    \n    Otherwise, if a rank is specified (`eps_or_k >= 1`), then the output\n    signature is::\n    \n        idx, proj = interp_decomp(A, eps_or_k)\n    \n    ..  This function automatically detects the form of the input parameters\n        and passes them to the appropriate backend. For details, see\n        :func:`_backend.iddp_id`, :func:`_backend.iddp_aid`,\n        :func:`_backend.iddp_rid`, :func:`_backend.iddr_id`,\n        :func:`_backend.iddr_aid`, :func:`_backend.iddr_rid`,\n        :func:`_backend.idzp_id`, :func:`_backend.idzp_aid`,\n        :func:`_backend.idzp_rid`, :func:`_backend.idzr_id`,\n        :func:`_backend.idzr_aid`, and :func:`_backend.idzr_rid`.\n    \n    Parameters\n    ----------\n    A : :class:`numpy.ndarray` or :class:`scipy.sparse.linalg.LinearOperator` with `rmatvec`\n        Matrix to be factored\n    eps_or_k : float or int\n        Relative error (if ``eps_or_k < 1``) or rank (if ``eps_or_k >= 1``) of\n        approximation.\n    rand : bool, optional\n        Whether to use random sampling if `A` is of type :class:`numpy.ndarray`\n        (randomized algorithms are always used if `A` is of type\n        :class:`scipy.sparse.linalg.LinearOperator`).\n    rng : `numpy.random.Generator`, optional\n        Pseudorandom number generator state. When `rng` is None, a new\n        `numpy.random.Generator` is created using entropy from the\n        operating system. Types other than `numpy.random.Generator` are\n        passed to `numpy.random.default_rng` to instantiate a ``Generator``.\n        If `rand` is ``False``, the argument is ignored.\n    \n    Returns\n    -------\n    k : int\n        Rank required to achieve specified relative precision if\n        ``eps_or_k < 1``.\n    idx : :class:`numpy.ndarray`\n        Column index array.\n    proj : :class:`numpy.ndarray`\n        Interpolation coefficients.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8a576edf44f38f5787a1637b45d015b65dadbe54e773a4ca230a3130c0c27002",
            "fields": [
                {
                    "id": "gqm8zlpm",
                    "encoding": "",
                    "name": "A",
                    "value": "",
                    "defaultValue": "",
                    "description": "Matrix to be factored",
                    "type": "class:numpy.ndarray or :class:scipy.sparse.linalg.LinearOperator with rmatvec",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ak6jzo0v",
                    "encoding": "",
                    "name": "eps_or_k",
                    "value": "",
                    "defaultValue": "",
                    "description": "Relative error (if ``eps_or_k < 1``) or rank (if ``eps_or_k >= 1``) of\napproximation.",
                    "type": "float or int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "57lge23_",
                    "encoding": "",
                    "name": "rand",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to use random sampling if `A` is of type :class:`numpy.ndarray`\n(randomized algorithms are always used if `A` is of type\n:class:`scipy.sparse.linalg.LinearOperator`).",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "np7mw435",
                    "encoding": "",
                    "name": "rng",
                    "value": "",
                    "defaultValue": "",
                    "description": "Pseudorandom number generator state. When `rng` is None, a new\n`numpy.random.Generator` is created using entropy from the\noperating system. Types other than `numpy.random.Generator` are\npassed to `numpy.random.default_rng` to instantiate a ``Generator``.\nIf `rand` is ``False``, the argument is ignored.",
                    "type": "numpy.random.Generator",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2t16rsfv",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.interpolative.interp_decomp",
                    "defaultValue": "scipy.linalg.interpolative.interp_decomp",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "flz0w8wh",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "35fzwqvk",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "481_w7jk",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "64catwsb",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.interpolative",
                    "defaultValue": "scipy.linalg.interpolative",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r9ahpxoe",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "upkmtj3f",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "cn8z2c41",
            "name": "interpolative.rand",
            "description": "This function, historically, used to generate uniformly distributed random number\n    for the randomization algorithms used in the `scipy.linalg.interpolative` functions\n    written in Fortran77.\n    \n    The library has been ported to Python and now the functions use the native NumPy\n    generators. Thus this function should not be used and will be removed in the\n    SciPy version 1.17.0.\n    \n    If pseudo-random numbers are needed, NumPy pseudo-random generators should be used\n    instead.\n    \n    Parameters\n    ----------\n    *shape\n        Shape of output array",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "15311c8e991dfc283371fc35df916ea44a72597226b27f8e9742806734642328",
            "fields": [
                {
                    "id": "ho0f8_a5",
                    "encoding": "",
                    "name": "shape",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n8hdi_w1",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.interpolative.rand",
                    "defaultValue": "scipy.linalg.interpolative.rand",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "57yjqr4r",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mdtzowcd",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "djt66bvl",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r6qcwwl3",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.interpolative",
                    "defaultValue": "scipy.linalg.interpolative",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i3iy16_t",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o09l05kx",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "p9e8ndd4",
            "name": "interpolative.reconstruct_interp_matrix",
            "description": "Reconstruct interpolation matrix from ID.\n    \n    The interpolation matrix can be reconstructed from the ID indices and\n    coefficients `idx` and `proj`, respectively, as::\n    \n        P = numpy.hstack([numpy.eye(proj.shape[0]), proj])[:,numpy.argsort(idx)]\n    \n    The original matrix can then be reconstructed from its skeleton matrix ``B``\n    via ``A = B @ P``\n    \n    See also :func:`reconstruct_matrix_from_id` and\n    :func:`reconstruct_skel_matrix`.\n    \n    ..  This function automatically detects the matrix data type and calls the\n        appropriate backend. For details, see :func:`_backend.idd_reconint` and\n        :func:`_backend.idz_reconint`.\n    \n    Parameters\n    ----------\n    idx : :class:`numpy.ndarray`\n        1D column index array.\n    proj : :class:`numpy.ndarray`\n        Interpolation coefficients.\n    \n    Returns\n    -------\n    :class:`numpy.ndarray`\n        Interpolation matrix.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d966a6937b05dac3a59d7c77a96835a5c90f52a56ec34ad3ac81d979adb1c0a6",
            "fields": [
                {
                    "id": "q1tqoni3",
                    "encoding": "",
                    "name": "idx",
                    "value": "",
                    "defaultValue": "",
                    "description": "1D column index array.",
                    "type": "class:numpy.ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ur5ws_ox",
                    "encoding": "",
                    "name": "proj",
                    "value": "",
                    "defaultValue": "",
                    "description": "Interpolation coefficients.",
                    "type": "class:numpy.ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8cbz27ew",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.interpolative.reconstruct_interp_matrix",
                    "defaultValue": "scipy.linalg.interpolative.reconstruct_interp_matrix",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nal9hsvg",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ujoj_j0o",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "0go_3x4n",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_65um3g5",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.interpolative",
                    "defaultValue": "scipy.linalg.interpolative",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s34neb8r",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gx0zax_3",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "2uykyvxf",
            "name": "interpolative.reconstruct_matrix_from_id",
            "description": "Reconstruct matrix from its ID.\n    \n    A matrix `A` with skeleton matrix `B` and ID indices and coefficients `idx`\n    and `proj`, respectively, can be reconstructed as::\n    \n        numpy.hstack([B, numpy.dot(B, proj)])[:,numpy.argsort(idx)]\n    \n    See also :func:`reconstruct_interp_matrix` and\n    :func:`reconstruct_skel_matrix`.\n    \n    ..  This function automatically detects the matrix data type and calls the\n        appropriate backend. For details, see :func:`_backend.idd_reconid` and\n        :func:`_backend.idz_reconid`.\n    \n    Parameters\n    ----------\n    B : :class:`numpy.ndarray`\n        Skeleton matrix.\n    idx : :class:`numpy.ndarray`\n        Column index array.\n    proj : :class:`numpy.ndarray`\n        Interpolation coefficients.\n    \n    Returns\n    -------\n    :class:`numpy.ndarray`\n        Reconstructed matrix.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4f761052d8c679fe72a26f1d3dd5249eaed4b841d85d2e38b211acd52c7d23de",
            "fields": [
                {
                    "id": "wqjsq7vb",
                    "encoding": "",
                    "name": "B",
                    "value": "",
                    "defaultValue": "",
                    "description": "Skeleton matrix.",
                    "type": "class:numpy.ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "80czta4m",
                    "encoding": "",
                    "name": "idx",
                    "value": "",
                    "defaultValue": "",
                    "description": "Column index array.",
                    "type": "class:numpy.ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jkf8xkkd",
                    "encoding": "",
                    "name": "proj",
                    "value": "",
                    "defaultValue": "",
                    "description": "Interpolation coefficients.",
                    "type": "class:numpy.ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8eo3k1ed",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.interpolative.reconstruct_matrix_from_id",
                    "defaultValue": "scipy.linalg.interpolative.reconstruct_matrix_from_id",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "phahjk3t",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4tjsfngo",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "7gco7jok",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fwlt2xnk",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.interpolative",
                    "defaultValue": "scipy.linalg.interpolative",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5y_n30pl",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lcw80yw5",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "iuwsov7t",
            "name": "interpolative.reconstruct_skel_matrix",
            "description": "Reconstruct skeleton matrix from ID.\n    \n    The skeleton matrix can be reconstructed from the original matrix `A` and its\n    ID rank and indices `k` and `idx`, respectively, as::\n    \n        B = A[:,idx[:k]]\n    \n    The original matrix can then be reconstructed via::\n    \n        numpy.hstack([B, numpy.dot(B, proj)])[:,numpy.argsort(idx)]\n    \n    See also :func:`reconstruct_matrix_from_id` and\n    :func:`reconstruct_interp_matrix`.\n    \n    ..  This function automatically detects the matrix data type and calls the\n        appropriate backend. For details, see :func:`_backend.idd_copycols` and\n        :func:`_backend.idz_copycols`.\n    \n    Parameters\n    ----------\n    A : :class:`numpy.ndarray`\n        Original matrix.\n    k : int\n        Rank of ID.\n    idx : :class:`numpy.ndarray`\n        Column index array.\n    \n    Returns\n    -------\n    :class:`numpy.ndarray`\n        Skeleton matrix.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "3bfc77cc31684814de5fd3308334e9dcb5bdb58b6491a9414df1065f725265b9",
            "fields": [
                {
                    "id": "p69xsgor",
                    "encoding": "",
                    "name": "A",
                    "value": "",
                    "defaultValue": "",
                    "description": "Original matrix.",
                    "type": "class:numpy.ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q8cjgd9l",
                    "encoding": "",
                    "name": "k",
                    "value": "",
                    "defaultValue": "",
                    "description": "Rank of ID.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cs7bgndg",
                    "encoding": "",
                    "name": "idx",
                    "value": "",
                    "defaultValue": "",
                    "description": "Column index array.",
                    "type": "class:numpy.ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "65ayl66p",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.interpolative.reconstruct_skel_matrix",
                    "defaultValue": "scipy.linalg.interpolative.reconstruct_skel_matrix",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k4thslm5",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zy6vbfzb",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "bja96gw3",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3cxglx7a",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.interpolative",
                    "defaultValue": "scipy.linalg.interpolative",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lla5hlgt",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1mpmu6ta",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "edfvwmur",
            "name": "interpolative.seed",
            "description": "This function, historically, used to set the seed of the randomization algorithms\n    used in the `scipy.linalg.interpolative` functions written in Fortran77.\n    \n    The library has been ported to Python and now the functions use the native NumPy\n    generators and this function has no content and returns None. Thus this function\n    should not be used and will be removed in SciPy version 1.17.0.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d292d3d0f098952aa5055078cf0ad9ce66332aed514a60ab53cf473a01eeb6c4",
            "fields": [
                {
                    "id": "ecrxkjkn",
                    "encoding": "",
                    "name": "seed",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "58cd2_fw",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.interpolative.seed",
                    "defaultValue": "scipy.linalg.interpolative.seed",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cpx8r2qt",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dgcpi_9u",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "67m99opm",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vjzj9ree",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.interpolative",
                    "defaultValue": "scipy.linalg.interpolative",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "49n78e4x",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c88zdt5t",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "6nkon3sa",
            "name": "interpolative.svd",
            "description": "Compute SVD of a matrix via an ID.\n    \n    An SVD of a matrix `A` is a factorization::\n    \n        A = U @ np.diag(S) @ V.conj().T\n    \n    where `U` and `V` have orthonormal columns and `S` is nonnegative.\n    \n    The SVD can be computed to any relative precision or rank (depending on the\n    value of `eps_or_k`).\n    \n    See also :func:`interp_decomp` and :func:`id_to_svd`.\n    \n    ..  This function automatically detects the form of the input parameters and\n        passes them to the appropriate backend. For details, see\n        :func:`_backend.iddp_svd`, :func:`_backend.iddp_asvd`,\n        :func:`_backend.iddp_rsvd`, :func:`_backend.iddr_svd`,\n        :func:`_backend.iddr_asvd`, :func:`_backend.iddr_rsvd`,\n        :func:`_backend.idzp_svd`, :func:`_backend.idzp_asvd`,\n        :func:`_backend.idzp_rsvd`, :func:`_backend.idzr_svd`,\n        :func:`_backend.idzr_asvd`, and :func:`_backend.idzr_rsvd`.\n    \n    Parameters\n    ----------\n    A : :class:`numpy.ndarray` or :class:`scipy.sparse.linalg.LinearOperator`\n        Matrix to be factored, given as either a :class:`numpy.ndarray` or a\n        :class:`scipy.sparse.linalg.LinearOperator` with the `matvec` and\n        `rmatvec` methods (to apply the matrix and its adjoint).\n    eps_or_k : float or int\n        Relative error (if ``eps_or_k < 1``) or rank (if ``eps_or_k >= 1``) of\n        approximation.\n    rand : bool, optional\n        Whether to use random sampling if `A` is of type :class:`numpy.ndarray`\n        (randomized algorithms are always used if `A` is of type\n        :class:`scipy.sparse.linalg.LinearOperator`).\n    rng : `numpy.random.Generator`, optional\n        Pseudorandom number generator state. When `rng` is None, a new\n        `numpy.random.Generator` is created using entropy from the\n        operating system. Types other than `numpy.random.Generator` are\n        passed to `numpy.random.default_rng` to instantiate a ``Generator``.\n        If `rand` is ``False``, the argument is ignored.\n    \n    Returns\n    -------\n    U : :class:`numpy.ndarray`\n        2D array of left singular vectors.\n    S : :class:`numpy.ndarray`\n        1D array of singular values.\n    V : :class:`numpy.ndarray`\n        2D array right singular vectors.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2a6ba9ebd97f8529bcae56265b2acce752fca3b01bc3031aafb8e967fd047d25",
            "fields": [
                {
                    "id": "by7eixx5",
                    "encoding": "",
                    "name": "A",
                    "value": "",
                    "defaultValue": "",
                    "description": "Matrix to be factored, given as either a :class:`numpy.ndarray` or a\n:class:`scipy.sparse.linalg.LinearOperator` with the `matvec` and\n`rmatvec` methods (to apply the matrix and its adjoint).",
                    "type": "class:numpy.ndarray or :class:scipy.sparse.linalg.LinearOperator",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u13cfc5a",
                    "encoding": "",
                    "name": "eps_or_k",
                    "value": "",
                    "defaultValue": "",
                    "description": "Relative error (if ``eps_or_k < 1``) or rank (if ``eps_or_k >= 1``) of\napproximation.",
                    "type": "float or int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n0_mobbr",
                    "encoding": "",
                    "name": "rand",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to use random sampling if `A` is of type :class:`numpy.ndarray`\n(randomized algorithms are always used if `A` is of type\n:class:`scipy.sparse.linalg.LinearOperator`).",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1e20qz9x",
                    "encoding": "",
                    "name": "rng",
                    "value": "",
                    "defaultValue": "",
                    "description": "Pseudorandom number generator state. When `rng` is None, a new\n`numpy.random.Generator` is created using entropy from the\noperating system. Types other than `numpy.random.Generator` are\npassed to `numpy.random.default_rng` to instantiate a ``Generator``.\nIf `rand` is ``False``, the argument is ignored.",
                    "type": "numpy.random.Generator",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "njkjwvt4",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.linalg.interpolative.svd",
                    "defaultValue": "scipy.linalg.interpolative.svd",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bh7w53mk",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1zwkqh9p",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ydh6_zkh",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n6n1mfdy",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.linalg.interpolative",
                    "defaultValue": "scipy.linalg.interpolative",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nz8qs426",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cvwkwald",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        }
    ],
    "linkDataArray": []
}