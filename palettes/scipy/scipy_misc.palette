{
    "modelData": {
        "filePath": "scipy_misc.palette",
        "fileType": "palette",
        "shortDescription": "",
        "detailedDescription": "==========================================\nMiscellaneous routines (:mod:`scipy.misc`)\n==========================================\n\n.. currentmodule:: scipy.misc\n\nVarious utilities that don't have another home.\n\n.. autosummary::\n   :toctree: generated/\n\n   ascent - Get example image for processing\n   central_diff_weights - Weights for an n-point central mth derivative\n   derivative - Find the nth derivative of a function at a point\n   face - Get example image for processing\n   electrocardiogram - Load an example of a 1-D signal.",
        "repoService": "GitHub",
        "repoBranch": "master",
        "repo": "ICRAR/EAGLE_test_repo",
        "eagleVersion": "",
        "eagleCommitHash": "",
        "schemaVersion": "AppRef",
        "readonly": true,
        "repositoryUrl": "tmp",
        "commitHash": "0.1",
        "downloadUrl": "",
        "signature": "c082d60ccfee60beb31a8d34d1e669c35ad5aa3c168a19b3c588ecfd0f103936",
        "lastModifiedName": "wici",
        "lastModifiedEmail": "",
        "lastModifiedDatetime": 1695133106.501619,
        "numLGNodes": 4
    },
    "nodeDataArray": [
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.misc.ascent",
            "description": "Get an 8-bit grayscale bit-depth, 512 x 512 derived image for easy use in demos\n    \n    The image is derived from accent-to-the-top.jpg at\n    http://www.public-domain-image.com/people-public-domain-images-pictures/",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8ed2415b52370ea18cab5b45c64c659d4e9cc75564029eff91e3a5216ce2d227",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.misc._common.ascent",
                    "defaultValue": "scipy.misc._common.ascent",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.misc.central_diff_weights",
            "description": "Return weights for an Np-point central derivative.\n    \n    Assumes equally-spaced function points.\n    \n    If weights are in the vector w, then\n    derivative is w[0] * f(x-ho*dx) + ... + w[-1] * f(x+h0*dx)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c951d784cda44aacb21a7982f419a60076ea7e950772d0b4c32c400a710998de",
            "fields": [
                {
                    "name": "ndiv",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "int, optional     Number of divisions. Default is 1. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.misc._common.central_diff_weights",
                    "defaultValue": "scipy.misc._common.central_diff_weights",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.misc.electrocardiogram",
            "description": "Load an electrocardiogram as an example for a 1-D signal.\n    \n    The returned signal is a 5 minute long electrocardiogram (ECG), a medical\n    recording of the heart's electrical activity, sampled at 360 Hz.\n    \n    Returns\n    -------\n    ecg : ndarray\n        The electrocardiogram in millivolt (mV) sampled at 360 Hz.\n    \n    Notes\n    -----\n    The provided signal is an excerpt (19:35 to 24:35) from the `record 208`_\n    (lead MLII) provided by the MIT-BIH Arrhythmia Database [1]_ on\n    PhysioNet [2]_. The excerpt includes noise induced artifacts, typical\n    heartbeats as well as pathological changes.\n    \n    .. _record 208: https://physionet.org/physiobank/database/html/mitdbdir/records.htm#208\n    \n    .. versionadded:: 1.1.0\n    \n    References\n    ----------\n    .. [1] Moody GB, Mark RG. The impact of the MIT-BIH Arrhythmia Database.\n           IEEE Eng in Med and Biol 20(3):45-50 (May-June 2001).\n           (PMID: 11446209); :doi:`10.13026/C2F305`\n    .. [2] Goldberger AL, Amaral LAN, Glass L, Hausdorff JM, Ivanov PCh,\n           Mark RG, Mietus JE, Moody GB, Peng C-K, Stanley HE. PhysioBank,\n           PhysioToolkit, and PhysioNet: Components of a New Research Resource\n           for Complex Physiologic Signals. Circulation 101(23):e215-e220;\n           :doi:`10.1161/01.CIR.101.23.e215`\n    \n    Examples\n    --------\n    >>> from scipy.misc import electrocardiogram\n    >>> ecg = electrocardiogram()\n    >>> ecg\n    array([-0.245, -0.215, -0.185, ..., -0.405, -0.395, -0.385])\n    >>> ecg.shape, ecg.mean(), ecg.std()\n    ((108000,), -0.16510875, 0.5992473991177294)\n    \n    As stated the signal features several areas with a different morphology.\n    E.g., the first few seconds show the electrical activity of a heart in\n    normal sinus rhythm as seen below.\n    \n    >>> import matplotlib.pyplot as plt\n    >>> fs = 360\n    >>> time = np.arange(ecg.size) / fs\n    >>> plt.plot(time, ecg)\n    >>> plt.xlabel(\"time in s\")\n    >>> plt.ylabel(\"ECG in mV\")\n    >>> plt.xlim(9, 10.2)\n    >>> plt.ylim(-1, 1.5)\n    >>> plt.show()\n    \n    After second 16, however, the first premature ventricular contractions, also\n    called extrasystoles, appear. These have a different morphology compared to\n    typical heartbeats. The difference can easily be observed in the following\n    plot.\n    \n    >>> plt.plot(time, ecg)\n    >>> plt.xlabel(\"time in s\")\n    >>> plt.ylabel(\"ECG in mV\")\n    >>> plt.xlim(46.5, 50)\n    >>> plt.ylim(-2, 1.5)\n    >>> plt.show()\n    \n    At several points large artifacts disturb the recording, e.g.:\n    \n    >>> plt.plot(time, ecg)\n    >>> plt.xlabel(\"time in s\")\n    >>> plt.ylabel(\"ECG in mV\")\n    >>> plt.xlim(207, 215)\n    >>> plt.ylim(-2, 3.5)\n    >>> plt.show()\n    \n    Finally, examining the power spectrum reveals that most of the biosignal is\n    made up of lower frequencies. At 60 Hz the noise induced by the mains\n    electricity can be clearly observed.\n    \n    >>> from scipy.signal import welch\n    >>> f, Pxx = welch(ecg, fs=fs, nperseg=2048, scaling=\"spectrum\")\n    >>> plt.semilogy(f, Pxx)\n    >>> plt.xlabel(\"Frequency in Hz\")\n    >>> plt.ylabel(\"Power spectrum of the ECG in mV**2\")\n    >>> plt.xlim(f[[0, -1]])\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8a591190c2613da4c66d028103d023797ef96873f4f18770e34626ed8f9c79fa",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.misc._common.electrocardiogram",
                    "defaultValue": "scipy.misc._common.electrocardiogram",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.misc.face",
            "description": "Get a 1024 x 768, color image of a raccoon face.\n    \n    raccoon-procyon-lotor.jpg at http://www.public-domain-image.com",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b0344c83152527f9e70b353f8c5bb0a23ffffe618fde2493eb2a3d12e01576d2",
            "fields": [
                {
                    "name": "gray",
                    "value": false,
                    "defaultValue": false,
                    "description": "bool, optional     If True return 8-bit grey-scale image, otherwise return a color image ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.misc._common.face",
                    "defaultValue": "scipy.misc._common.face",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        }
    ],
    "linkDataArray": []
}