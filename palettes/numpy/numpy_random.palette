{
    "modelData": {
        "filePath": "numpy_random.palette",
        "fileType": "palette",
        "shortDescription": "",
        "detailedDescription": "========================\nRandom Number Generation\n========================\n\nUse ``default_rng()`` to create a `Generator` and call its methods.\n\n=============== =========================================================\nGenerator\n--------------- ---------------------------------------------------------\nGenerator       Class implementing all of the random number distributions\ndefault_rng     Default constructor for ``Generator``\n=============== =========================================================\n\n============================================= ===\nBitGenerator Streams that work with Generator\n--------------------------------------------- ---\nMT19937\nPCG64\nPCG64DXSM\nPhilox\nSFC64\n============================================= ===\n\n============================================= ===\nGetting entropy to initialize a BitGenerator\n--------------------------------------------- ---\nSeedSequence\n============================================= ===\n\n\nLegacy\n------\n\nFor backwards compatibility with previous versions of numpy before 1.17, the\nvarious aliases to the global `RandomState` methods are left alone and do not\nuse the new `Generator` API.\n\n==================== =========================================================\nUtility functions\n-------------------- ---------------------------------------------------------\nrandom               Uniformly distributed floats over ``[0, 1)``\nbytes                Uniformly distributed random bytes.\npermutation          Randomly permute a sequence / generate a random sequence.\nshuffle              Randomly permute a sequence in place.\nchoice               Random sample from 1-D array.\n==================== =========================================================\n\n==================== =========================================================\nCompatibility\nfunctions - removed\nin the new API\n-------------------- ---------------------------------------------------------\nrand                 Uniformly distributed values.\nrandn                Normally distributed values.\nranf                 Uniformly distributed floating point numbers.\nrandom_integers      Uniformly distributed integers in a given range.\n                     (deprecated, use ``integers(..., closed=True)`` instead)\nrandom_sample        Alias for `random_sample`\nrandint              Uniformly distributed integers in a given range\nseed                 Seed the legacy random number generator.\n==================== =========================================================\n\n==================== =========================================================\nUnivariate\ndistributions\n-------------------- ---------------------------------------------------------\nbeta                 Beta distribution over ``[0, 1]``.\nbinomial             Binomial distribution.\nchisquare            :math:`\\chi^2` distribution.\nexponential          Exponential distribution.\nf                    F (Fisher-Snedecor) distribution.\ngamma                Gamma distribution.\ngeometric            Geometric distribution.\ngumbel               Gumbel distribution.\nhypergeometric       Hypergeometric distribution.\nlaplace              Laplace distribution.\nlogistic             Logistic distribution.\nlognormal            Log-normal distribution.\nlogseries            Logarithmic series distribution.\nnegative_binomial    Negative binomial distribution.\nnoncentral_chisquare Non-central chi-square distribution.\nnoncentral_f         Non-central F distribution.\nnormal               Normal / Gaussian distribution.\npareto               Pareto distribution.\npoisson              Poisson distribution.\npower                Power distribution.\nrayleigh             Rayleigh distribution.\ntriangular           Triangular distribution.\nuniform              Uniform distribution.\nvonmises             Von Mises circular distribution.\nwald                 Wald (inverse Gaussian) distribution.\nweibull              Weibull distribution.\nzipf                 Zipf's distribution over ranked data.\n==================== =========================================================\n\n==================== ==========================================================\nMultivariate\ndistributions\n-------------------- ----------------------------------------------------------\ndirichlet            Multivariate generalization of Beta distribution.\nmultinomial          Multivariate generalization of the binomial distribution.\nmultivariate_normal  Multivariate generalization of the normal distribution.\n==================== ==========================================================\n\n==================== =========================================================\nStandard\ndistributions\n-------------------- ---------------------------------------------------------\nstandard_cauchy      Standard Cauchy-Lorentz distribution.\nstandard_exponential Standard exponential distribution.\nstandard_gamma       Standard Gamma distribution.\nstandard_normal      Standard normal distribution.\nstandard_t           Standard Student's t-distribution.\n==================== =========================================================\n\n==================== =========================================================\nInternal functions\n-------------------- ---------------------------------------------------------\nget_state            Get tuple representing internal state of generator.\nset_state            Set state of generator.\n==================== =========================================================",
        "repoService": "GitHub",
        "repoBranch": "master",
        "repo": "ICRAR/EAGLE_test_repo",
        "eagleVersion": "",
        "eagleCommitHash": "",
        "schemaVersion": "AppRef",
        "readonly": true,
        "repositoryUrl": "numpy",
        "commitHash": "0.1",
        "downloadUrl": "",
        "signature": "1454768a1091aa89278d7af91d8dcbe1035e6f086954febd11ce4a3a4be30c29",
        "lastModifiedName": "wici",
        "lastModifiedEmail": "",
        "lastModifiedDatetime": 1695173642.745832,
        "numLGNodes": 162
    },
    "nodeDataArray": [
        {
            "category": "PythonApp",
            "key": -1,
            "name": "BitGenerator.__init__",
            "description": "No description found\nBitGenerator(seed=None)\n    \n    Base Class for generic BitGenerators, which provide a stream\n    of random bits based on different algorithms. Must be overridden.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "191b31f1d06b55e4f862322780ec2cd56cc1e87ac98eaee5f7c8dababe20156c",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to object",
                    "type": "numpy.random.BitGenerator",
                    "parameterType": "ApplicationArgument",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": true
                },
                {
                    "name": "args",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "kwargs",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.BitGenerator.__init__",
                    "defaultValue": "numpy.random.BitGenerator.__init__",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "BitGenerator.random_raw",
            "description": "\nReturn randoms as generated by the underlying BitGenerator\n\nParameters\n----------\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  Default is None, in which case a\n    single value is returned.\noutput : bool, optional\n    Output values.  Used for performance testing since the generated\n    values are not returned.\n\nReturns\n-------\nout : uint or ndarray\n    Drawn samples.\n\nNotes\n-----\nThis method directly exposes the raw underlying pseudo-random\nnumber generator. All values are returned as unsigned 64-bit\nvalues irrespective of the number of bits produced by the PRNG.\n\nSee the class docstring for the number of bits returned.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "bca5d289881904a8fadfbc94d72d364619c3bf394ce57abb9c7e3cbce7768201",
            "fields": [
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  Default is None, in which case a     single value is returned. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "bool, optional     Output values.  Used for performance testing since the generated     values are not returned. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.BitGenerator.random_raw",
                    "defaultValue": "numpy.random.BitGenerator.random_raw",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Generator.__init__",
            "description": "No description found\nGenerator(bit_generator)\n    \n    Container for the BitGenerators.\n    \n    ``Generator`` exposes a number of methods for generating random\n    numbers drawn from a variety of probability distributions. In addition to\n    the distribution-specific arguments, each method takes a keyword argument\n    `size` that defaults to ``None``. If `size` is ``None``, then a single\n    value is generated and returned. If `size` is an integer, then a 1-D\n    array filled with generated values is returned. If `size` is a tuple,\n    then an array with that shape is filled and returned.\n    \n    The function :func:`numpy.random.default_rng` will instantiate\n    a `Generator` with numpy's default `BitGenerator`.\n    \n    **No Compatibility Guarantee**\n    \n    ``Generator`` does not provide a version compatibility guarantee. In\n    particular, as better algorithms evolve the bit stream may change.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "36748a3a2090d225794f633f89fb9a1d05658bbf2d425cd4cdbd63fe610cb885",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to object",
                    "type": "numpy.random.Generator",
                    "parameterType": "ApplicationArgument",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": true
                },
                {
                    "name": "args",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "kwargs",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.Generator.__init__",
                    "defaultValue": "numpy.random.Generator.__init__",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Generator.beta",
            "description": "\nDraw samples from a Beta distribution.\n\nThe Beta distribution is a special case of the Dirichlet distribution,\nand is related to the Gamma distribution.  It has the probability\ndistribution function\n\n.. math:: f(x; a,b) = \\frac{1}{B(\\alpha, \\beta)} x^{\\alpha - 1}\n                                                 (1 - x)^{\\beta - 1},\n\nwhere the normalization, B, is the beta function,\n\n.. math:: B(\\alpha, \\beta) = \\int_0^1 t^{\\alpha - 1}\n                             (1 - t)^{\\beta - 1} dt.\n\nIt is often seen in Bayesian inference and order statistics.\n\nParameters\n----------\na : float or array_like of floats\n    Alpha, positive (>0).\nb : float or array_like of floats\n    Beta, positive (>0).\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``a`` and ``b`` are both scalars.\n    Otherwise, ``np.broadcast(a, b).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized beta distribution.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "47715a1ce779f2684bcf3d002895b109a0851260a40e027d4ba7246fe869ef58",
            "fields": [
                {
                    "name": "a",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     Alpha, positive (>0). ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "b",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     Beta, positive (>0). ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  If size is ``None`` (default),     a single value is returned if ``a`` and ``b`` are both scalars.     Otherwise, ``np.broadcast(a, b).size`` samples are drawn. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.Generator.beta",
                    "defaultValue": "numpy.random.Generator.beta",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Generator.binomial",
            "description": "\nDraw samples from a binomial distribution.\n\nSamples are drawn from a binomial distribution with specified\nparameters, n trials and p probability of success where\nn an integer >= 0 and p is in the interval [0,1]. (n may be\ninput as a float, but it is truncated to an integer in use)\n\nParameters\n----------\nn : int or array_like of ints\n    Parameter of the distribution, >= 0. Floats are also accepted,\n    but they will be truncated to integers.\np : float or array_like of floats\n    Parameter of the distribution, >= 0 and <=1.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``n`` and ``p`` are both scalars.\n    Otherwise, ``np.broadcast(n, p).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized binomial distribution, where\n    each sample is equal to the number of successes over the n trials.\n\nSee Also\n--------\nscipy.stats.binom : probability density function, distribution or\n    cumulative density function, etc.\n\nNotes\n-----\nThe probability density for the binomial distribution is\n\n.. math:: P(N) = \\binom{n}{N}p^N(1-p)^{n-N},\n\nwhere :math:`n` is the number of trials, :math:`p` is the probability\nof success, and :math:`N` is the number of successes.\n\nWhen estimating the standard error of a proportion in a population by\nusing a random sample, the normal distribution works well unless the\nproduct p*n <=5, where p = population proportion estimate, and n =\nnumber of samples, in which case the binomial distribution is used\ninstead. For example, a sample of 15 people shows 4 who are left\nhanded, and 11 who are right handed. Then p = 4/15 = 27%. 0.27*15 = 4,\nso the binomial distribution should be used in this case.\n\nReferences\n----------\n.. [1] Dalgaard, Peter, \"Introductory Statistics with R\",\n       Springer-Verlag, 2002.\n.. [2] Glantz, Stanton A. \"Primer of Biostatistics.\", McGraw-Hill,\n       Fifth Edition, 2002.\n.. [3] Lentner, Marvin, \"Elementary Applied Statistics\", Bogden\n       and Quigley, 1972.\n.. [4] Weisstein, Eric W. \"Binomial Distribution.\" From MathWorld--A\n       Wolfram Web Resource.\n       http://mathworld.wolfram.com/BinomialDistribution.html\n.. [5] Wikipedia, \"Binomial distribution\",\n       https://en.wikipedia.org/wiki/Binomial_distribution\n\nExamples\n--------\nDraw samples from the distribution:\n\n>>> rng = np.random.default_rng()\n>>> n, p = 10, .5  # number of trials, probability of each trial\n>>> s = rng.binomial(n, p, 1000)\n# result of flipping a coin 10 times, tested 1000 times.\n\nA real world example. A company drills 9 wild-cat oil exploration\nwells, each with an estimated probability of success of 0.1. All nine\nwells fail. What is the probability of that happening?\n\nLet's do 20,000 trials of the model, and count the number that\ngenerate zero positive results.\n\n>>> sum(rng.binomial(9, 0.1, 20000) == 0)/20000.\n# answer = 0.38885, or 39%.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6427ba939cea97e9fd7c2ff2fbb13862232f1d11773f51dbeb11a42fb4756eea",
            "fields": [
                {
                    "name": "n",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or array_like of ints     Parameter of the distribution, >= 0. Floats are also accepted,     but they will be truncated to integers. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "p",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     Parameter of the distribution, >= 0 and <=1. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  If size is ``None`` (default),     a single value is returned if ``n`` and ``p`` are both scalars.     Otherwise, ``np.broadcast(n, p).size`` samples are drawn. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.Generator.binomial",
                    "defaultValue": "numpy.random.Generator.binomial",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Generator.bytes",
            "description": "\nReturn random bytes.\n\nParameters\n----------\nlength : int\n    Number of random bytes.\n\nReturns\n-------\nout : bytes\n    String of length `length`.\n\nExamples\n--------\n>>> np.random.default_rng().bytes(10)\nb'\\xfeC\\x9b\\x86\\x17\\xf2\\xa1\\xafcp' # random",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "87a97f0c76816078fffdacd37529ee45c25705667b43dea3c9dbddb5fc078293",
            "fields": [
                {
                    "name": "length",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int     Number of random bytes. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.Generator.bytes",
                    "defaultValue": "numpy.random.Generator.bytes",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Generator.chisquare",
            "description": "\nDraw samples from a chi-square distribution.\n\nWhen `df` independent random variables, each with standard normal\ndistributions (mean 0, variance 1), are squared and summed, the\nresulting distribution is chi-square (see Notes).  This distribution\nis often used in hypothesis testing.\n\nParameters\n----------\ndf : float or array_like of floats\n     Number of degrees of freedom, must be > 0.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``df`` is a scalar.  Otherwise,\n    ``np.array(df).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized chi-square distribution.\n\nRaises\n------\nValueError\n    When `df` <= 0 or when an inappropriate `size` (e.g. ``size=-1``)\n    is given.\n\nNotes\n-----\nThe variable obtained by summing the squares of `df` independent,\nstandard normally distributed random variables:\n\n.. math:: Q = \\sum_{i=0}^{\\mathtt{df}} X^2_i\n\nis chi-square distributed, denoted\n\n.. math:: Q \\sim \\chi^2_k.\n\nThe probability density function of the chi-squared distribution is\n\n.. math:: p(x) = \\frac{(1/2)^{k/2}}{\\Gamma(k/2)}\n                 x^{k/2 - 1} e^{-x/2},\n\nwhere :math:`\\Gamma` is the gamma function,\n\n.. math:: \\Gamma(x) = \\int_0^{-\\infty} t^{x - 1} e^{-t} dt.\n\nReferences\n----------\n.. [1] NIST \"Engineering Statistics Handbook\"\n       https://www.itl.nist.gov/div898/handbook/eda/section3/eda3666.htm\n\nExamples\n--------\n>>> np.random.default_rng().chisquare(2,4)\narray([ 1.89920014,  9.00867716,  3.13710533,  5.62318272]) # random",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5b18475da25120b889a3d800d09d68df13f50b5fadf674be984aada71c84c82b",
            "fields": [
                {
                    "name": "df",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats      Number of degrees of freedom, must be > 0. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  If size is ``None`` (default),     a single value is returned if ``df`` is a scalar.  Otherwise,     ``np.array(df).size`` samples are drawn. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.Generator.chisquare",
                    "defaultValue": "numpy.random.Generator.chisquare",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Generator.choice",
            "description": "\nGenerates a random sample from a given array\n\nParameters\n----------\na : {array_like, int}\n    If an ndarray, a random sample is generated from its elements.\n    If an int, the random sample is generated from np.arange(a).\nsize : {int, tuple[int]}, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn from the 1-d `a`. If `a` has more\n    than one dimension, the `size` shape will be inserted into the\n    `axis` dimension, so the output ``ndim`` will be ``a.ndim - 1 +\n    len(size)``. Default is None, in which case a single value is\n    returned.\nreplace : bool, optional\n    Whether the sample is with or without replacement. Default is True,\n    meaning that a value of ``a`` can be selected multiple times.\np : 1-D array_like, optional\n    The probabilities associated with each entry in a.\n    If not given, the sample assumes a uniform distribution over all\n    entries in ``a``.\naxis : int, optional\n    The axis along which the selection is performed. The default, 0,\n    selects by row.\nshuffle : bool, optional\n    Whether the sample is shuffled when sampling without replacement.\n    Default is True, False provides a speedup.\n\nReturns\n-------\nsamples : single item or ndarray\n    The generated random samples\n\nRaises\n------\nValueError\n    If a is an int and less than zero, if p is not 1-dimensional, if\n    a is array-like with a size 0, if p is not a vector of\n    probabilities, if a and p have different lengths, or if\n    replace=False and the sample size is greater than the population\n    size.\n\nSee Also\n--------\nintegers, shuffle, permutation\n\nNotes\n-----\nSetting user-specified probabilities through ``p`` uses a more general but less\nefficient sampler than the default. The general sampler produces a different sample\nthan the optimized sampler even if each element of ``p`` is 1 / len(a).\n\nExamples\n--------\nGenerate a uniform random sample from np.arange(5) of size 3:\n\n>>> rng = np.random.default_rng()\n>>> rng.choice(5, 3)\narray([0, 3, 4]) # random\n>>> #This is equivalent to rng.integers(0,5,3)\n\nGenerate a non-uniform random sample from np.arange(5) of size 3:\n\n>>> rng.choice(5, 3, p=[0.1, 0, 0.3, 0.6, 0])\narray([3, 3, 0]) # random\n\nGenerate a uniform random sample from np.arange(5) of size 3 without\nreplacement:\n\n>>> rng.choice(5, 3, replace=False)\narray([3,1,0]) # random\n>>> #This is equivalent to rng.permutation(np.arange(5))[:3]\n\nGenerate a uniform random sample from a 2-D array along the first\naxis (the default), without replacement:\n\n>>> rng.choice([[0, 1, 2], [3, 4, 5], [6, 7, 8]], 2, replace=False)\narray([[3, 4, 5], # random\n       [0, 1, 2]])\n\nGenerate a non-uniform random sample from np.arange(5) of size\n3 without replacement:\n\n>>> rng.choice(5, 3, replace=False, p=[0.1, 0, 0.3, 0.6, 0])\narray([2, 3, 0]) # random\n\nAny of the above can be repeated with an arbitrary array-like\ninstead of just integers. For instance:\n\n>>> aa_milne_arr = ['pooh', 'rabbit', 'piglet', 'Christopher']\n>>> rng.choice(aa_milne_arr, 5, p=[0.5, 0.1, 0.1, 0.3])\narray(['pooh', 'pooh', 'pooh', 'Christopher', 'piglet'], # random\n      dtype='<U11')",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c3a8ebe36903335265558505067a1fb2faed8e51cf96b8b3164ce07b4a777980",
            "fields": [
                {
                    "name": "a",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "{array_like, int}     If an ndarray, a random sample is generated from its elements.     If an int, the random sample is generated from np.arange(a). ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "{int, tuple[int]}, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn from the 1-d `a`. If `a` has more     than one dimension, the `size` shape will be inserted into the     `axis` dimension, so the output ``ndim`` will be ``a.ndim - 1 +     len(size)``. Default is None, in which case a single value is     returned. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "replace",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "bool, optional     Whether the sample is with or without replacement. Default is True,     meaning that a value of ``a`` can be selected multiple times. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "p",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "1-D array_like, optional     The probabilities associated with each entry in a.     If not given, the sample assumes a uniform distribution over all     entries in ``a``. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "axis",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int, optional     The axis along which the selection is performed. The default, 0,     selects by row. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "shuffle",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "bool, optional     Whether the sample is shuffled when sampling without replacement.     Default is True, False provides a speedup. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.Generator.choice",
                    "defaultValue": "numpy.random.Generator.choice",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Generator.dirichlet",
            "description": "\nDraw samples from the Dirichlet distribution.\n\nDraw `size` samples of dimension k from a Dirichlet distribution. A\nDirichlet-distributed random variable can be seen as a multivariate\ngeneralization of a Beta distribution. The Dirichlet distribution\nis a conjugate prior of a multinomial distribution in Bayesian\ninference.\n\nParameters\n----------\nalpha : sequence of floats, length k\n    Parameter of the distribution (length ``k`` for sample of\n    length ``k``).\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n)``, then\n    ``m * n * k`` samples are drawn.  Default is None, in which case a\n    vector of length ``k`` is returned.\n\nReturns\n-------\nsamples : ndarray,\n    The drawn samples, of shape ``(size, k)``.\n\nRaises\n------\nValueError\n    If any value in ``alpha`` is less than or equal to zero\n\nNotes\n-----\nThe Dirichlet distribution is a distribution over vectors\n:math:`x` that fulfil the conditions :math:`x_i>0` and\n:math:`\\sum_{i=1}^k x_i = 1`.\n\nThe probability density function :math:`p` of a\nDirichlet-distributed random vector :math:`X` is\nproportional to\n\n.. math:: p(x) \\propto \\prod_{i=1}^{k}{x^{\\alpha_i-1}_i},\n\nwhere :math:`\\alpha` is a vector containing the positive\nconcentration parameters.\n\nThe method uses the following property for computation: let :math:`Y`\nbe a random vector which has components that follow a standard gamma\ndistribution, then :math:`X = \\frac{1}{\\sum_{i=1}^k{Y_i}} Y`\nis Dirichlet-distributed\n\nReferences\n----------\n.. [1] David McKay, \"Information Theory, Inference and Learning\n       Algorithms,\" chapter 23,\n       http://www.inference.org.uk/mackay/itila/\n.. [2] Wikipedia, \"Dirichlet distribution\",\n       https://en.wikipedia.org/wiki/Dirichlet_distribution\n\nExamples\n--------\nTaking an example cited in Wikipedia, this distribution can be used if\none wanted to cut strings (each of initial length 1.0) into K pieces\nwith different lengths, where each piece had, on average, a designated\naverage length, but allowing some variation in the relative sizes of\nthe pieces.\n\n>>> s = np.random.default_rng().dirichlet((10, 5, 3), 20).transpose()\n\n>>> import matplotlib.pyplot as plt\n>>> plt.barh(range(20), s[0])\n>>> plt.barh(range(20), s[1], left=s[0], color='g')\n>>> plt.barh(range(20), s[2], left=s[0]+s[1], color='r')\n>>> plt.title(\"Lengths of Strings\")",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c8dd58f8395cc7f6c0fe97c5659906780dbe8b6dca352d1c49ffec18fa359fe9",
            "fields": [
                {
                    "name": "alpha",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "sequence of floats, length k     Parameter of the distribution (length ``k`` for sample of     length ``k``). ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n)``, then     ``m * n * k`` samples are drawn.  Default is None, in which case a     vector of length ``k`` is returned. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.Generator.dirichlet",
                    "defaultValue": "numpy.random.Generator.dirichlet",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Generator.exponential",
            "description": "\nDraw samples from an exponential distribution.\n\nIts probability density function is\n\n.. math:: f(x; \\frac{1}{\\beta}) = \\frac{1}{\\beta} \\exp(-\\frac{x}{\\beta}),\n\nfor ``x > 0`` and 0 elsewhere. :math:`\\beta` is the scale parameter,\nwhich is the inverse of the rate parameter :math:`\\lambda = 1/\\beta`.\nThe rate parameter is an alternative, widely used parameterization\nof the exponential distribution [3]_.\n\nThe exponential distribution is a continuous analogue of the\ngeometric distribution.  It describes many common situations, such as\nthe size of raindrops measured over many rainstorms [1]_, or the time\nbetween page requests to Wikipedia [2]_.\n\nParameters\n----------\nscale : float or array_like of floats\n    The scale parameter, :math:`\\beta = 1/\\lambda`. Must be\n    non-negative.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``scale`` is a scalar.  Otherwise,\n    ``np.array(scale).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized exponential distribution.\n\nReferences\n----------\n.. [1] Peyton Z. Peebles Jr., \"Probability, Random Variables and\n       Random Signal Principles\", 4th ed, 2001, p. 57.\n.. [2] Wikipedia, \"Poisson process\",\n       https://en.wikipedia.org/wiki/Poisson_process\n.. [3] Wikipedia, \"Exponential distribution\",\n       https://en.wikipedia.org/wiki/Exponential_distribution",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "cc6a904244d2c22daeef100ada5b9b83ff520536d91545f52d4d8c7fec83d6bb",
            "fields": [
                {
                    "name": "scale",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     The scale parameter, :math:`\\beta = 1/\\lambda`. Must be     non-negative. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  If size is ``None`` (default),     a single value is returned if ``scale`` is a scalar.  Otherwise,     ``np.array(scale).size`` samples are drawn. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.Generator.exponential",
                    "defaultValue": "numpy.random.Generator.exponential",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Generator.f",
            "description": "\nDraw samples from an F distribution.\n\nSamples are drawn from an F distribution with specified parameters,\n`dfnum` (degrees of freedom in numerator) and `dfden` (degrees of\nfreedom in denominator), where both parameters must be greater than\nzero.\n\nThe random variate of the F distribution (also known as the\nFisher distribution) is a continuous probability distribution\nthat arises in ANOVA tests, and is the ratio of two chi-square\nvariates.\n\nParameters\n----------\ndfnum : float or array_like of floats\n    Degrees of freedom in numerator, must be > 0.\ndfden : float or array_like of float\n    Degrees of freedom in denominator, must be > 0.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``dfnum`` and ``dfden`` are both scalars.\n    Otherwise, ``np.broadcast(dfnum, dfden).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized Fisher distribution.\n\nSee Also\n--------\nscipy.stats.f : probability density function, distribution or\n    cumulative density function, etc.\n\nNotes\n-----\nThe F statistic is used to compare in-group variances to between-group\nvariances. Calculating the distribution depends on the sampling, and\nso it is a function of the respective degrees of freedom in the\nproblem.  The variable `dfnum` is the number of samples minus one, the\nbetween-groups degrees of freedom, while `dfden` is the within-groups\ndegrees of freedom, the sum of the number of samples in each group\nminus the number of groups.\n\nReferences\n----------\n.. [1] Glantz, Stanton A. \"Primer of Biostatistics.\", McGraw-Hill,\n       Fifth Edition, 2002.\n.. [2] Wikipedia, \"F-distribution\",\n       https://en.wikipedia.org/wiki/F-distribution\n\nExamples\n--------\nAn example from Glantz[1], pp 47-40:\n\nTwo groups, children of diabetics (25 people) and children from people\nwithout diabetes (25 controls). Fasting blood glucose was measured,\ncase group had a mean value of 86.1, controls had a mean value of\n82.2. Standard deviations were 2.09 and 2.49 respectively. Are these\ndata consistent with the null hypothesis that the parents diabetic\nstatus does not affect their children's blood glucose levels?\nCalculating the F statistic from the data gives a value of 36.01.\n\nDraw samples from the distribution:\n\n>>> dfnum = 1. # between group degrees of freedom\n>>> dfden = 48. # within groups degrees of freedom\n>>> s = np.random.default_rng().f(dfnum, dfden, 1000)\n\nThe lower bound for the top 1% of the samples is :\n\n>>> np.sort(s)[-10]\n7.61988120985 # random\n\nSo there is about a 1% chance that the F statistic will exceed 7.62,\nthe measured value is 36, so the null hypothesis is rejected at the 1%\nlevel.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c08f1cc1f474eafd1a7bc2d220bb7bac4419523c959ca05c867b6658b236aa47",
            "fields": [
                {
                    "name": "dfnum",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     Degrees of freedom in numerator, must be > 0. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dfden",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of float     Degrees of freedom in denominator, must be > 0. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  If size is ``None`` (default),     a single value is returned if ``dfnum`` and ``dfden`` are both scalars.     Otherwise, ``np.broadcast(dfnum, dfden).size`` samples are drawn. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.Generator.f",
                    "defaultValue": "numpy.random.Generator.f",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Generator.gamma",
            "description": "\nDraw samples from a Gamma distribution.\n\nSamples are drawn from a Gamma distribution with specified parameters,\n`shape` (sometimes designated \"k\") and `scale` (sometimes designated\n\"theta\"), where both parameters are > 0.\n\nParameters\n----------\nshape : float or array_like of floats\n    The shape of the gamma distribution. Must be non-negative.\nscale : float or array_like of floats, optional\n    The scale of the gamma distribution. Must be non-negative.\n    Default is equal to 1.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``shape`` and ``scale`` are both scalars.\n    Otherwise, ``np.broadcast(shape, scale).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized gamma distribution.\n\nSee Also\n--------\nscipy.stats.gamma : probability density function, distribution or\n    cumulative density function, etc.\n\nNotes\n-----\nThe probability density for the Gamma distribution is\n\n.. math:: p(x) = x^{k-1}\\frac{e^{-x/\\theta}}{\\theta^k\\Gamma(k)},\n\nwhere :math:`k` is the shape and :math:`\\theta` the scale,\nand :math:`\\Gamma` is the Gamma function.\n\nThe Gamma distribution is often used to model the times to failure of\nelectronic components, and arises naturally in processes for which the\nwaiting times between Poisson distributed events are relevant.\n\nReferences\n----------\n.. [1] Weisstein, Eric W. \"Gamma Distribution.\" From MathWorld--A\n       Wolfram Web Resource.\n       http://mathworld.wolfram.com/GammaDistribution.html\n.. [2] Wikipedia, \"Gamma distribution\",\n       https://en.wikipedia.org/wiki/Gamma_distribution\n\nExamples\n--------\nDraw samples from the distribution:\n\n>>> shape, scale = 2., 2.  # mean=4, std=2*sqrt(2)\n>>> s = np.random.default_rng().gamma(shape, scale, 1000)\n\nDisplay the histogram of the samples, along with\nthe probability density function:\n\n>>> import matplotlib.pyplot as plt\n>>> import scipy.special as sps  # doctest: +SKIP\n>>> count, bins, ignored = plt.hist(s, 50, density=True)\n>>> y = bins**(shape-1)*(np.exp(-bins/scale) /  # doctest: +SKIP\n...                      (sps.gamma(shape)*scale**shape))\n>>> plt.plot(bins, y, linewidth=2, color='r')  # doctest: +SKIP\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c86d57468e88b144ef6c48448fc647f0d95bd6896ff8e1f34f4f418d07dfb6ef",
            "fields": [
                {
                    "name": "shape",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     The shape of the gamma distribution. Must be non-negative. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "scale",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats, optional     The scale of the gamma distribution. Must be non-negative.     Default is equal to 1. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  If size is ``None`` (default),     a single value is returned if ``shape`` and ``scale`` are both scalars.     Otherwise, ``np.broadcast(shape, scale).size`` samples are drawn. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.Generator.gamma",
                    "defaultValue": "numpy.random.Generator.gamma",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Generator.geometric",
            "description": "\nDraw samples from the geometric distribution.\n\nBernoulli trials are experiments with one of two outcomes:\nsuccess or failure (an example of such an experiment is flipping\na coin).  The geometric distribution models the number of trials\nthat must be run in order to achieve success.  It is therefore\nsupported on the positive integers, ``k = 1, 2, ...``.\n\nThe probability mass function of the geometric distribution is\n\n.. math:: f(k) = (1 - p)^{k - 1} p\n\nwhere `p` is the probability of success of an individual trial.\n\nParameters\n----------\np : float or array_like of floats\n    The probability of success of an individual trial.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``p`` is a scalar.  Otherwise,\n    ``np.array(p).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized geometric distribution.\n\nExamples\n--------\nDraw ten thousand values from the geometric distribution,\nwith the probability of an individual success equal to 0.35:\n\n>>> z = np.random.default_rng().geometric(p=0.35, size=10000)\n\nHow many trials succeeded after a single run?\n\n>>> (z == 1).sum() / 10000.\n0.34889999999999999 # random",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "39f62d9f3f4064671bad48942f7389c0260449d4d69925716533a4c730df89f7",
            "fields": [
                {
                    "name": "p",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     The probability of success of an individual trial. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  If size is ``None`` (default),     a single value is returned if ``p`` is a scalar.  Otherwise,     ``np.array(p).size`` samples are drawn. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.Generator.geometric",
                    "defaultValue": "numpy.random.Generator.geometric",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Generator.gumbel",
            "description": "\nDraw samples from a Gumbel distribution.\n\nDraw samples from a Gumbel distribution with specified location and\nscale.  For more information on the Gumbel distribution, see\nNotes and References below.\n\nParameters\n----------\nloc : float or array_like of floats, optional\n    The location of the mode of the distribution. Default is 0.\nscale : float or array_like of floats, optional\n    The scale parameter of the distribution. Default is 1. Must be non-\n    negative.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``loc`` and ``scale`` are both scalars.\n    Otherwise, ``np.broadcast(loc, scale).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized Gumbel distribution.\n\nSee Also\n--------\nscipy.stats.gumbel_l\nscipy.stats.gumbel_r\nscipy.stats.genextreme\nweibull\n\nNotes\n-----\nThe Gumbel (or Smallest Extreme Value (SEV) or the Smallest Extreme\nValue Type I) distribution is one of a class of Generalized Extreme\nValue (GEV) distributions used in modeling extreme value problems.\nThe Gumbel is a special case of the Extreme Value Type I distribution\nfor maximums from distributions with \"exponential-like\" tails.\n\nThe probability density for the Gumbel distribution is\n\n.. math:: p(x) = \\frac{e^{-(x - \\mu)/ \\beta}}{\\beta} e^{ -e^{-(x - \\mu)/\n          \\beta}},\n\nwhere :math:`\\mu` is the mode, a location parameter, and\n:math:`\\beta` is the scale parameter.\n\nThe Gumbel (named for German mathematician Emil Julius Gumbel) was used\nvery early in the hydrology literature, for modeling the occurrence of\nflood events. It is also used for modeling maximum wind speed and\nrainfall rates.  It is a \"fat-tailed\" distribution - the probability of\nan event in the tail of the distribution is larger than if one used a\nGaussian, hence the surprisingly frequent occurrence of 100-year\nfloods. Floods were initially modeled as a Gaussian process, which\nunderestimated the frequency of extreme events.\n\nIt is one of a class of extreme value distributions, the Generalized\nExtreme Value (GEV) distributions, which also includes the Weibull and\nFrechet.\n\nThe function has a mean of :math:`\\mu + 0.57721\\beta` and a variance\nof :math:`\\frac{\\pi^2}{6}\\beta^2`.\n\nReferences\n----------\n.. [1] Gumbel, E. J., \"Statistics of Extremes,\"\n       New York: Columbia University Press, 1958.\n.. [2] Reiss, R.-D. and Thomas, M., \"Statistical Analysis of Extreme\n       Values from Insurance, Finance, Hydrology and Other Fields,\"\n       Basel: Birkhauser Verlag, 2001.\n\nExamples\n--------\nDraw samples from the distribution:\n\n>>> rng = np.random.default_rng()\n>>> mu, beta = 0, 0.1 # location and scale\n>>> s = rng.gumbel(mu, beta, 1000)\n\nDisplay the histogram of the samples, along with\nthe probability density function:\n\n>>> import matplotlib.pyplot as plt\n>>> count, bins, ignored = plt.hist(s, 30, density=True)\n>>> plt.plot(bins, (1/beta)*np.exp(-(bins - mu)/beta)\n...          * np.exp( -np.exp( -(bins - mu) /beta) ),\n...          linewidth=2, color='r')\n>>> plt.show()\n\nShow how an extreme value distribution can arise from a Gaussian process\nand compare to a Gaussian:\n\n>>> means = []\n>>> maxima = []\n>>> for i in range(0,1000) :\n...    a = rng.normal(mu, beta, 1000)\n...    means.append(a.mean())\n...    maxima.append(a.max())\n>>> count, bins, ignored = plt.hist(maxima, 30, density=True)\n>>> beta = np.std(maxima) * np.sqrt(6) / np.pi\n>>> mu = np.mean(maxima) - 0.57721*beta\n>>> plt.plot(bins, (1/beta)*np.exp(-(bins - mu)/beta)\n...          * np.exp(-np.exp(-(bins - mu)/beta)),\n...          linewidth=2, color='r')\n>>> plt.plot(bins, 1/(beta * np.sqrt(2 * np.pi))\n...          * np.exp(-(bins - mu)**2 / (2 * beta**2)),\n...          linewidth=2, color='g')\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c51a1af1152c30858773e1903c48464820b0668ab0bcb038600dba42098d2924",
            "fields": [
                {
                    "name": "loc",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats, optional     The location of the mode of the distribution. Default is 0. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "scale",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats, optional     The scale parameter of the distribution. Default is 1. Must be non-     negative. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  If size is ``None`` (default),     a single value is returned if ``loc`` and ``scale`` are both scalars.     Otherwise, ``np.broadcast(loc, scale).size`` samples are drawn. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.Generator.gumbel",
                    "defaultValue": "numpy.random.Generator.gumbel",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Generator.hypergeometric",
            "description": "\nDraw samples from a Hypergeometric distribution.\n\nSamples are drawn from a hypergeometric distribution with specified\nparameters, `ngood` (ways to make a good selection), `nbad` (ways to make\na bad selection), and `nsample` (number of items sampled, which is less\nthan or equal to the sum ``ngood + nbad``).\n\nParameters\n----------\nngood : int or array_like of ints\n    Number of ways to make a good selection.  Must be nonnegative and\n    less than 10**9.\nnbad : int or array_like of ints\n    Number of ways to make a bad selection.  Must be nonnegative and\n    less than 10**9.\nnsample : int or array_like of ints\n    Number of items sampled.  Must be nonnegative and less than\n    ``ngood + nbad``.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if `ngood`, `nbad`, and `nsample`\n    are all scalars.  Otherwise, ``np.broadcast(ngood, nbad, nsample).size``\n    samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized hypergeometric distribution. Each\n    sample is the number of good items within a randomly selected subset of\n    size `nsample` taken from a set of `ngood` good items and `nbad` bad items.\n\nSee Also\n--------\nmultivariate_hypergeometric : Draw samples from the multivariate\n    hypergeometric distribution.\nscipy.stats.hypergeom : probability density function, distribution or\n    cumulative density function, etc.\n\nNotes\n-----\nThe probability density for the Hypergeometric distribution is\n\n.. math:: P(x) = \\frac{\\binom{g}{x}\\binom{b}{n-x}}{\\binom{g+b}{n}},\n\nwhere :math:`0 \\le x \\le n` and :math:`n-b \\le x \\le g`\n\nfor P(x) the probability of ``x`` good results in the drawn sample,\ng = `ngood`, b = `nbad`, and n = `nsample`.\n\nConsider an urn with black and white marbles in it, `ngood` of them\nare black and `nbad` are white. If you draw `nsample` balls without\nreplacement, then the hypergeometric distribution describes the\ndistribution of black balls in the drawn sample.\n\nNote that this distribution is very similar to the binomial\ndistribution, except that in this case, samples are drawn without\nreplacement, whereas in the Binomial case samples are drawn with\nreplacement (or the sample space is infinite). As the sample space\nbecomes large, this distribution approaches the binomial.\n\nThe arguments `ngood` and `nbad` each must be less than `10**9`. For\nextremely large arguments, the algorithm that is used to compute the\nsamples [4]_ breaks down because of loss of precision in floating point\ncalculations.  For such large values, if `nsample` is not also large,\nthe distribution can be approximated with the binomial distribution,\n`binomial(n=nsample, p=ngood/(ngood + nbad))`.\n\nReferences\n----------\n.. [1] Lentner, Marvin, \"Elementary Applied Statistics\", Bogden\n       and Quigley, 1972.\n.. [2] Weisstein, Eric W. \"Hypergeometric Distribution.\" From\n       MathWorld--A Wolfram Web Resource.\n       http://mathworld.wolfram.com/HypergeometricDistribution.html\n.. [3] Wikipedia, \"Hypergeometric distribution\",\n       https://en.wikipedia.org/wiki/Hypergeometric_distribution\n.. [4] Stadlober, Ernst, \"The ratio of uniforms approach for generating\n       discrete random variates\", Journal of Computational and Applied\n       Mathematics, 31, pp. 181-189 (1990).\n\nExamples\n--------\nDraw samples from the distribution:\n\n>>> rng = np.random.default_rng()\n>>> ngood, nbad, nsamp = 100, 2, 10\n# number of good, number of bad, and number of samples\n>>> s = rng.hypergeometric(ngood, nbad, nsamp, 1000)\n>>> from matplotlib.pyplot import hist\n>>> hist(s)\n#   note that it is very unlikely to grab both bad items\n\nSuppose you have an urn with 15 white and 15 black marbles.\nIf you pull 15 marbles at random, how likely is it that\n12 or more of them are one color?\n\n>>> s = rng.hypergeometric(15, 15, 15, 100000)\n>>> sum(s>=12)/100000. + sum(s<=3)/100000.\n#   answer = 0.003 ... pretty unlikely!",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e7123f1b19fcb6a1dee7e6cd7c9b1df388a6b3262ffc2d700831fb270916e0f1",
            "fields": [
                {
                    "name": "ngood",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or array_like of ints     Number of ways to make a good selection.  Must be nonnegative and     less than 10**9. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "nbad",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or array_like of ints     Number of ways to make a bad selection.  Must be nonnegative and     less than 10**9. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "nsample",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or array_like of ints     Number of items sampled.  Must be nonnegative and less than     ``ngood + nbad``. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  If size is ``None`` (default),     a single value is returned if `ngood`, `nbad`, and `nsample`     are all scalars.  Otherwise, ``np.broadcast(ngood, nbad, nsample).size``     samples are drawn. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.Generator.hypergeometric",
                    "defaultValue": "numpy.random.Generator.hypergeometric",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Generator.integers",
            "description": "\nReturn random integers from `low` (inclusive) to `high` (exclusive), or\nif endpoint=True, `low` (inclusive) to `high` (inclusive). Replaces\n`RandomState.randint` (with endpoint=False) and\n`RandomState.random_integers` (with endpoint=True)\n\nReturn random integers from the \"discrete uniform\" distribution of\nthe specified dtype. If `high` is None (the default), then results are\nfrom 0 to `low`.\n\nParameters\n----------\nlow : int or array-like of ints\n    Lowest (signed) integers to be drawn from the distribution (unless\n    ``high=None``, in which case this parameter is 0 and this value is\n    used for `high`).\nhigh : int or array-like of ints, optional\n    If provided, one above the largest (signed) integer to be drawn\n    from the distribution (see above for behavior if ``high=None``).\n    If array-like, must contain integer values\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  Default is None, in which case a\n    single value is returned.\ndtype : dtype, optional\n    Desired dtype of the result. Byteorder must be native.\n    The default value is np.int64.\nendpoint : bool, optional\n    If true, sample from the interval [low, high] instead of the\n    default [low, high)\n    Defaults to False\n\nReturns\n-------\nout : int or ndarray of ints\n    `size`-shaped array of random integers from the appropriate\n    distribution, or a single such random int if `size` not provided.\n\nNotes\n-----\nWhen using broadcasting with uint64 dtypes, the maximum value (2**64)\ncannot be represented as a standard integer type. The high array (or\nlow if high is None) must have object dtype, e.g., array([2**64]).\n\nExamples\n--------\n>>> rng = np.random.default_rng()\n>>> rng.integers(2, size=10)\narray([1, 0, 0, 0, 1, 1, 0, 0, 1, 0])  # random\n>>> rng.integers(1, size=10)\narray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n\nGenerate a 2 x 4 array of ints between 0 and 4, inclusive:\n\n>>> rng.integers(5, size=(2, 4))\narray([[4, 0, 2, 1],\n       [3, 2, 2, 0]])  # random\n\nGenerate a 1 x 3 array with 3 different upper bounds\n\n>>> rng.integers(1, [3, 5, 10])\narray([2, 2, 9])  # random\n\nGenerate a 1 by 3 array with 3 different lower bounds\n\n>>> rng.integers([1, 5, 7], 10)\narray([9, 8, 7])  # random\n\nGenerate a 2 by 4 array using broadcasting with dtype of uint8\n\n>>> rng.integers([1, 3, 5, 7], [[10], [20]], dtype=np.uint8)\narray([[ 8,  6,  9,  7],\n       [ 1, 16,  9, 12]], dtype=uint8)  # random\n\nReferences\n----------\n.. [1] Daniel Lemire., \"Fast Random Integer Generation in an Interval\",\n       ACM Transactions on Modeling and Computer Simulation 29 (1), 2019,\n       http://arxiv.org/abs/1805.10941.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "136901cf69135ca9e548a041180386e581d16eb72045c65c99d7761e52e82595",
            "fields": [
                {
                    "name": "low",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or array-like of ints     Lowest (signed) integers to be drawn from the distribution (unless     ``high=None``, in which case this parameter is 0 and this value is     used for `high`). ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "high",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or array-like of ints, optional     If provided, one above the largest (signed) integer to be drawn     from the distribution (see above for behavior if ``high=None``).     If array-like, must contain integer values ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  Default is None, in which case a     single value is returned. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dtype",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "dtype, optional     Desired dtype of the result. Byteorder must be native.     The default value is np.int64. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "endpoint",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "bool, optional     If true, sample from the interval [low, high] instead of the     default [low, high)     Defaults to False ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.Generator.integers",
                    "defaultValue": "numpy.random.Generator.integers",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Generator.laplace",
            "description": "\nDraw samples from the Laplace or double exponential distribution with\nspecified location (or mean) and scale (decay).\n\nThe Laplace distribution is similar to the Gaussian/normal distribution,\nbut is sharper at the peak and has fatter tails. It represents the\ndifference between two independent, identically distributed exponential\nrandom variables.\n\nParameters\n----------\nloc : float or array_like of floats, optional\n    The position, :math:`\\mu`, of the distribution peak. Default is 0.\nscale : float or array_like of floats, optional\n    :math:`\\lambda`, the exponential decay. Default is 1. Must be non-\n    negative.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``loc`` and ``scale`` are both scalars.\n    Otherwise, ``np.broadcast(loc, scale).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized Laplace distribution.\n\nNotes\n-----\nIt has the probability density function\n\n.. math:: f(x; \\mu, \\lambda) = \\frac{1}{2\\lambda}\n                               \\exp\\left(-\\frac{|x - \\mu|}{\\lambda}\\right).\n\nThe first law of Laplace, from 1774, states that the frequency\nof an error can be expressed as an exponential function of the\nabsolute magnitude of the error, which leads to the Laplace\ndistribution. For many problems in economics and health\nsciences, this distribution seems to model the data better\nthan the standard Gaussian distribution.\n\nReferences\n----------\n.. [1] Abramowitz, M. and Stegun, I. A. (Eds.). \"Handbook of\n       Mathematical Functions with Formulas, Graphs, and Mathematical\n       Tables, 9th printing,\" New York: Dover, 1972.\n.. [2] Kotz, Samuel, et. al. \"The Laplace Distribution and\n       Generalizations, \" Birkhauser, 2001.\n.. [3] Weisstein, Eric W. \"Laplace Distribution.\"\n       From MathWorld--A Wolfram Web Resource.\n       http://mathworld.wolfram.com/LaplaceDistribution.html\n.. [4] Wikipedia, \"Laplace distribution\",\n       https://en.wikipedia.org/wiki/Laplace_distribution\n\nExamples\n--------\nDraw samples from the distribution\n\n>>> loc, scale = 0., 1.\n>>> s = np.random.default_rng().laplace(loc, scale, 1000)\n\nDisplay the histogram of the samples, along with\nthe probability density function:\n\n>>> import matplotlib.pyplot as plt\n>>> count, bins, ignored = plt.hist(s, 30, density=True)\n>>> x = np.arange(-8., 8., .01)\n>>> pdf = np.exp(-abs(x-loc)/scale)/(2.*scale)\n>>> plt.plot(x, pdf)\n\nPlot Gaussian for comparison:\n\n>>> g = (1/(scale * np.sqrt(2 * np.pi)) *\n...      np.exp(-(x - loc)**2 / (2 * scale**2)))\n>>> plt.plot(x,g)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1fde55a53363ec09e62e9a7f16f7de3745f19408b1173e64c8adc3047cf5236f",
            "fields": [
                {
                    "name": "loc",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats, optional     The position, :math:`\\mu`, of the distribution peak. Default is 0. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "scale",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats, optional     :math:`\\lambda`, the exponential decay. Default is 1. Must be non-     negative. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  If size is ``None`` (default),     a single value is returned if ``loc`` and ``scale`` are both scalars.     Otherwise, ``np.broadcast(loc, scale).size`` samples are drawn. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.Generator.laplace",
                    "defaultValue": "numpy.random.Generator.laplace",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Generator.logistic",
            "description": "\nDraw samples from a logistic distribution.\n\nSamples are drawn from a logistic distribution with specified\nparameters, loc (location or mean, also median), and scale (>0).\n\nParameters\n----------\nloc : float or array_like of floats, optional\n    Parameter of the distribution. Default is 0.\nscale : float or array_like of floats, optional\n    Parameter of the distribution. Must be non-negative.\n    Default is 1.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``loc`` and ``scale`` are both scalars.\n    Otherwise, ``np.broadcast(loc, scale).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized logistic distribution.\n\nSee Also\n--------\nscipy.stats.logistic : probability density function, distribution or\n    cumulative density function, etc.\n\nNotes\n-----\nThe probability density for the Logistic distribution is\n\n.. math:: P(x) = P(x) = \\frac{e^{-(x-\\mu)/s}}{s(1+e^{-(x-\\mu)/s})^2},\n\nwhere :math:`\\mu` = location and :math:`s` = scale.\n\nThe Logistic distribution is used in Extreme Value problems where it\ncan act as a mixture of Gumbel distributions, in Epidemiology, and by\nthe World Chess Federation (FIDE) where it is used in the Elo ranking\nsystem, assuming the performance of each player is a logistically\ndistributed random variable.\n\nReferences\n----------\n.. [1] Reiss, R.-D. and Thomas M. (2001), \"Statistical Analysis of\n       Extreme Values, from Insurance, Finance, Hydrology and Other\n       Fields,\" Birkhauser Verlag, Basel, pp 132-133.\n.. [2] Weisstein, Eric W. \"Logistic Distribution.\" From\n       MathWorld--A Wolfram Web Resource.\n       http://mathworld.wolfram.com/LogisticDistribution.html\n.. [3] Wikipedia, \"Logistic-distribution\",\n       https://en.wikipedia.org/wiki/Logistic_distribution\n\nExamples\n--------\nDraw samples from the distribution:\n\n>>> loc, scale = 10, 1\n>>> s = np.random.default_rng().logistic(loc, scale, 10000)\n>>> import matplotlib.pyplot as plt\n>>> count, bins, ignored = plt.hist(s, bins=50)\n\n#   plot against distribution\n\n>>> def logist(x, loc, scale):\n...     return np.exp((loc-x)/scale)/(scale*(1+np.exp((loc-x)/scale))**2)\n>>> lgst_val = logist(bins, loc, scale)\n>>> plt.plot(bins, lgst_val * count.max() / lgst_val.max())\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "95180d43a9bc24af4b5c63481436f6c70df5bb7850311944c3ef02d77c81031c",
            "fields": [
                {
                    "name": "loc",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats, optional     Parameter of the distribution. Default is 0. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "scale",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats, optional     Parameter of the distribution. Must be non-negative.     Default is 1. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  If size is ``None`` (default),     a single value is returned if ``loc`` and ``scale`` are both scalars.     Otherwise, ``np.broadcast(loc, scale).size`` samples are drawn. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.Generator.logistic",
                    "defaultValue": "numpy.random.Generator.logistic",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Generator.lognormal",
            "description": "\nDraw samples from a log-normal distribution.\n\nDraw samples from a log-normal distribution with specified mean,\nstandard deviation, and array shape.  Note that the mean and standard\ndeviation are not the values for the distribution itself, but of the\nunderlying normal distribution it is derived from.\n\nParameters\n----------\nmean : float or array_like of floats, optional\n    Mean value of the underlying normal distribution. Default is 0.\nsigma : float or array_like of floats, optional\n    Standard deviation of the underlying normal distribution. Must be\n    non-negative. Default is 1.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``mean`` and ``sigma`` are both scalars.\n    Otherwise, ``np.broadcast(mean, sigma).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized log-normal distribution.\n\nSee Also\n--------\nscipy.stats.lognorm : probability density function, distribution,\n    cumulative density function, etc.\n\nNotes\n-----\nA variable `x` has a log-normal distribution if `log(x)` is normally\ndistributed.  The probability density function for the log-normal\ndistribution is:\n\n.. math:: p(x) = \\frac{1}{\\sigma x \\sqrt{2\\pi}}\n                 e^{(-\\frac{(ln(x)-\\mu)^2}{2\\sigma^2})}\n\nwhere :math:`\\mu` is the mean and :math:`\\sigma` is the standard\ndeviation of the normally distributed logarithm of the variable.\nA log-normal distribution results if a random variable is the *product*\nof a large number of independent, identically-distributed variables in\nthe same way that a normal distribution results if the variable is the\n*sum* of a large number of independent, identically-distributed\nvariables.\n\nReferences\n----------\n.. [1] Limpert, E., Stahel, W. A., and Abbt, M., \"Log-normal\n       Distributions across the Sciences: Keys and Clues,\"\n       BioScience, Vol. 51, No. 5, May, 2001.\n       https://stat.ethz.ch/~stahel/lognormal/bioscience.pdf\n.. [2] Reiss, R.D. and Thomas, M., \"Statistical Analysis of Extreme\n       Values,\" Basel: Birkhauser Verlag, 2001, pp. 31-32.\n\nExamples\n--------\nDraw samples from the distribution:\n\n>>> rng = np.random.default_rng()\n>>> mu, sigma = 3., 1. # mean and standard deviation\n>>> s = rng.lognormal(mu, sigma, 1000)\n\nDisplay the histogram of the samples, along with\nthe probability density function:\n\n>>> import matplotlib.pyplot as plt\n>>> count, bins, ignored = plt.hist(s, 100, density=True, align='mid')\n\n>>> x = np.linspace(min(bins), max(bins), 10000)\n>>> pdf = (np.exp(-(np.log(x) - mu)**2 / (2 * sigma**2))\n...        / (x * sigma * np.sqrt(2 * np.pi)))\n\n>>> plt.plot(x, pdf, linewidth=2, color='r')\n>>> plt.axis('tight')\n>>> plt.show()\n\nDemonstrate that taking the products of random samples from a uniform\ndistribution can be fit well by a log-normal probability density\nfunction.\n\n>>> # Generate a thousand samples: each is the product of 100 random\n>>> # values, drawn from a normal distribution.\n>>> rng = rng\n>>> b = []\n>>> for i in range(1000):\n...    a = 10. + rng.standard_normal(100)\n...    b.append(np.product(a))\n\n>>> b = np.array(b) / np.min(b) # scale values to be positive\n>>> count, bins, ignored = plt.hist(b, 100, density=True, align='mid')\n>>> sigma = np.std(np.log(b))\n>>> mu = np.mean(np.log(b))\n\n>>> x = np.linspace(min(bins), max(bins), 10000)\n>>> pdf = (np.exp(-(np.log(x) - mu)**2 / (2 * sigma**2))\n...        / (x * sigma * np.sqrt(2 * np.pi)))\n\n>>> plt.plot(x, pdf, color='r', linewidth=2)\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "76f92a5d5b54d15c12e815d490339a94fede29f54c6d55e37f0911fc94eb45e4",
            "fields": [
                {
                    "name": "mean",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats, optional     Mean value of the underlying normal distribution. Default is 0. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "sigma",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats, optional     Standard deviation of the underlying normal distribution. Must be     non-negative. Default is 1. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  If size is ``None`` (default),     a single value is returned if ``mean`` and ``sigma`` are both scalars.     Otherwise, ``np.broadcast(mean, sigma).size`` samples are drawn. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.Generator.lognormal",
                    "defaultValue": "numpy.random.Generator.lognormal",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Generator.logseries",
            "description": "\nDraw samples from a logarithmic series distribution.\n\nSamples are drawn from a log series distribution with specified\nshape parameter, 0 <= ``p`` < 1.\n\nParameters\n----------\np : float or array_like of floats\n    Shape parameter for the distribution.  Must be in the range [0, 1).\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``p`` is a scalar.  Otherwise,\n    ``np.array(p).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized logarithmic series distribution.\n\nSee Also\n--------\nscipy.stats.logser : probability density function, distribution or\n    cumulative density function, etc.\n\nNotes\n-----\nThe probability mass function for the Log Series distribution is\n\n.. math:: P(k) = \\frac{-p^k}{k \\ln(1-p)},\n\nwhere p = probability.\n\nThe log series distribution is frequently used to represent species\nrichness and occurrence, first proposed by Fisher, Corbet, and\nWilliams in 1943 [2].  It may also be used to model the numbers of\noccupants seen in cars [3].\n\nReferences\n----------\n.. [1] Buzas, Martin A.; Culver, Stephen J.,  Understanding regional\n       species diversity through the log series distribution of\n       occurrences: BIODIVERSITY RESEARCH Diversity & Distributions,\n       Volume 5, Number 5, September 1999 , pp. 187-195(9).\n.. [2] Fisher, R.A,, A.S. Corbet, and C.B. Williams. 1943. The\n       relation between the number of species and the number of\n       individuals in a random sample of an animal population.\n       Journal of Animal Ecology, 12:42-58.\n.. [3] D. J. Hand, F. Daly, D. Lunn, E. Ostrowski, A Handbook of Small\n       Data Sets, CRC Press, 1994.\n.. [4] Wikipedia, \"Logarithmic distribution\",\n       https://en.wikipedia.org/wiki/Logarithmic_distribution\n\nExamples\n--------\nDraw samples from the distribution:\n\n>>> a = .6\n>>> s = np.random.default_rng().logseries(a, 10000)\n>>> import matplotlib.pyplot as plt\n>>> count, bins, ignored = plt.hist(s)\n\n#   plot against distribution\n\n>>> def logseries(k, p):\n...     return -p**k/(k*np.log(1-p))\n>>> plt.plot(bins, logseries(bins, a) * count.max()/\n...          logseries(bins, a).max(), 'r')\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f6bdfec42f0aef9c6e3cbcc43e5a5aaa4b1bae2377deeecf1798748032cf66c5",
            "fields": [
                {
                    "name": "p",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     Shape parameter for the distribution.  Must be in the range [0, 1). ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  If size is ``None`` (default),     a single value is returned if ``p`` is a scalar.  Otherwise,     ``np.array(p).size`` samples are drawn. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.Generator.logseries",
                    "defaultValue": "numpy.random.Generator.logseries",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Generator.multinomial",
            "description": "\nDraw samples from a multinomial distribution.\n\nThe multinomial distribution is a multivariate generalization of the\nbinomial distribution.  Take an experiment with one of ``p``\npossible outcomes.  An example of such an experiment is throwing a dice,\nwhere the outcome can be 1 through 6.  Each sample drawn from the\ndistribution represents `n` such experiments.  Its values,\n``X_i = [X_0, X_1, ..., X_p]``, represent the number of times the\noutcome was ``i``.\n\nParameters\n----------\nn : int or array-like of ints\n    Number of experiments.\npvals : array-like of floats\n    Probabilities of each of the ``p`` different outcomes with shape\n    ``(k0, k1, ..., kn, p)``. Each element ``pvals[i,j,...,:]`` must\n    sum to 1 (however, the last element is always assumed to account\n    for the remaining probability, as long as\n    ``sum(pvals[..., :-1], axis=-1) <= 1.0``. Must have at least 1\n    dimension where pvals.shape[-1] > 0.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn each with ``p`` elements. Default\n    is None where the output size is determined by the broadcast shape\n    of ``n`` and all by the final dimension of ``pvals``, which is\n    denoted as ``b=(b0, b1, ..., bq)``. If size is not None, then it\n    must be compatible with the broadcast shape ``b``. Specifically,\n    size must have ``q`` or more elements and size[-(q-j):] must equal\n    ``bj``.\n\nReturns\n-------\nout : ndarray\n    The drawn samples, of shape size, if provided. When size is\n    provided, the output shape is size + (p,)  If not specified,\n    the shape is determined by the broadcast shape of ``n`` and\n    ``pvals``, ``(b0, b1, ..., bq)`` augmented with the dimension of\n    the multinomial, ``p``, so that that output shape is\n    ``(b0, b1, ..., bq, p)``.\n\n    Each entry ``out[i,j,...,:]`` is a ``p``-dimensional value drawn\n    from the distribution.\n\nExamples\n--------\nThrow a dice 20 times:\n\n>>> rng = np.random.default_rng()\n>>> rng.multinomial(20, [1/6.]*6, size=1)\narray([[4, 1, 7, 5, 2, 1]])  # random\n\nIt landed 4 times on 1, once on 2, etc.\n\nNow, throw the dice 20 times, and 20 times again:\n\n>>> rng.multinomial(20, [1/6.]*6, size=2)\narray([[3, 4, 3, 3, 4, 3],\n       [2, 4, 3, 4, 0, 7]])  # random\n\nFor the first run, we threw 3 times 1, 4 times 2, etc.  For the second,\nwe threw 2 times 1, 4 times 2, etc.\n\nNow, do one experiment throwing the dice 10 time, and 10 times again,\nand another throwing the dice 20 times, and 20 times again:\n\n>>> rng.multinomial([[10], [20]], [1/6.]*6, size=(2, 2))\narray([[[2, 4, 0, 1, 2, 1],\n        [1, 3, 0, 3, 1, 2]],\n       [[1, 4, 4, 4, 4, 3],\n        [3, 3, 2, 5, 5, 2]]])  # random\n\nThe first array shows the outcomes of throwing the dice 10 times, and\nthe second shows the outcomes from throwing the dice 20 times.\n\nA loaded die is more likely to land on number 6:\n\n>>> rng.multinomial(100, [1/7.]*5 + [2/7.])\narray([11, 16, 14, 17, 16, 26])  # random\n\nSimulate 10 throws of a 4-sided die and 20 throws of a 6-sided die\n\n>>> rng.multinomial([10, 20],[[1/4]*4 + [0]*2, [1/6]*6])\narray([[2, 1, 4, 3, 0, 0],\n       [3, 3, 3, 6, 1, 4]], dtype=int64)  # random\n\nGenerate categorical random variates from two categories where the\nfirst has 3 outcomes and the second has 2.\n\n>>> rng.multinomial(1, [[.1, .5, .4 ], [.3, .7, .0]])\narray([[0, 0, 1],\n       [0, 1, 0]], dtype=int64)  # random\n\n``argmax(axis=-1)`` is then used to return the categories.\n\n>>> pvals = [[.1, .5, .4 ], [.3, .7, .0]]\n>>> rvs = rng.multinomial(1, pvals, size=(4,2))\n>>> rvs.argmax(axis=-1)\narray([[0, 1],\n       [2, 0],\n       [2, 1],\n       [2, 0]], dtype=int64)  # random\n\nThe same output dimension can be produced using broadcasting.\n\n>>> rvs = rng.multinomial([[1]] * 4, pvals)\n>>> rvs.argmax(axis=-1)\narray([[0, 1],\n       [2, 0],\n       [2, 1],\n       [2, 0]], dtype=int64)  # random\n\nThe probability inputs should be normalized. As an implementation\ndetail, the value of the last entry is ignored and assumed to take\nup any leftover probability mass, but this should not be relied on.\nA biased coin which has twice as much weight on one side as on the\nother should be sampled like so:\n\n>>> rng.multinomial(100, [1.0 / 3, 2.0 / 3])  # RIGHT\narray([38, 62])  # random\n\nnot like:\n\n>>> rng.multinomial(100, [1.0, 2.0])  # WRONG\nTraceback (most recent call last):\nValueError: pvals < 0, pvals > 1 or pvals contains NaNs",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "94e33ae9bd40b3a5f1e2a8a77e979655b471e299eb401aa4b4864ec95e634abb",
            "fields": [
                {
                    "name": "n",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or array-like of ints     Number of experiments. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "pvals",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "array-like of floats     Probabilities of each of the ``p`` different outcomes with shape     ``(k0, k1, ..., kn, p)``. Each element ``pvals[i,j,...,:]`` must     sum to 1 (however, the last element is always assumed to account     for the remaining probability, as long as     ``sum(pvals[..., :-1], axis=-1) <= 1.0``. Must have at least 1     dimension where pvals.shape[-1] > 0. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn each with ``p`` elements. Default     is None where the output size is determined by the broadcast shape     of ``n`` and all by the final dimension of ``pvals``, which is     denoted as ``b=(b0, b1, ..., bq)``. If size is not None, then it     must be compatible with the broadcast shape ``b``. Specifically,     size must have ``q`` or more elements and size[-(q-j):] must equal     ``bj``. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.Generator.multinomial",
                    "defaultValue": "numpy.random.Generator.multinomial",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Generator.multivariate_hypergeometric",
            "description": "\nGenerate variates from a multivariate hypergeometric distribution.\n\nThe multivariate hypergeometric distribution is a generalization\nof the hypergeometric distribution.\n\nChoose ``nsample`` items at random without replacement from a\ncollection with ``N`` distinct types.  ``N`` is the length of\n``colors``, and the values in ``colors`` are the number of occurrences\nof that type in the collection.  The total number of items in the\ncollection is ``sum(colors)``.  Each random variate generated by this\nfunction is a vector of length ``N`` holding the counts of the\ndifferent types that occurred in the ``nsample`` items.\n\nThe name ``colors`` comes from a common description of the\ndistribution: it is the probability distribution of the number of\nmarbles of each color selected without replacement from an urn\ncontaining marbles of different colors; ``colors[i]`` is the number\nof marbles in the urn with color ``i``.\n\nParameters\n----------\ncolors : sequence of integers\n    The number of each type of item in the collection from which\n    a sample is drawn.  The values in ``colors`` must be nonnegative.\n    To avoid loss of precision in the algorithm, ``sum(colors)``\n    must be less than ``10**9`` when `method` is \"marginals\".\nnsample : int\n    The number of items selected.  ``nsample`` must not be greater\n    than ``sum(colors)``.\nsize : int or tuple of ints, optional\n    The number of variates to generate, either an integer or a tuple\n    holding the shape of the array of variates.  If the given size is,\n    e.g., ``(k, m)``, then ``k * m`` variates are drawn, where one\n    variate is a vector of length ``len(colors)``, and the return value\n    has shape ``(k, m, len(colors))``.  If `size` is an integer, the\n    output has shape ``(size, len(colors))``.  Default is None, in\n    which case a single variate is returned as an array with shape\n    ``(len(colors),)``.\nmethod : string, optional\n    Specify the algorithm that is used to generate the variates.\n    Must be 'count' or 'marginals' (the default).  See the Notes\n    for a description of the methods.\n\nReturns\n-------\nvariates : ndarray\n    Array of variates drawn from the multivariate hypergeometric\n    distribution.\n\nSee Also\n--------\nhypergeometric : Draw samples from the (univariate) hypergeometric\n    distribution.\n\nNotes\n-----\nThe two methods do not return the same sequence of variates.\n\nThe \"count\" algorithm is roughly equivalent to the following numpy\ncode::\n\n    choices = np.repeat(np.arange(len(colors)), colors)\n    selection = np.random.choice(choices, nsample, replace=False)\n    variate = np.bincount(selection, minlength=len(colors))\n\nThe \"count\" algorithm uses a temporary array of integers with length\n``sum(colors)``.\n\nThe \"marginals\" algorithm generates a variate by using repeated\ncalls to the univariate hypergeometric sampler.  It is roughly\nequivalent to::\n\n    variate = np.zeros(len(colors), dtype=np.int64)\n    # `remaining` is the cumulative sum of `colors` from the last\n    # element to the first; e.g. if `colors` is [3, 1, 5], then\n    # `remaining` is [9, 6, 5].\n    remaining = np.cumsum(colors[::-1])[::-1]\n    for i in range(len(colors)-1):\n        if nsample < 1:\n            break\n        variate[i] = hypergeometric(colors[i], remaining[i+1],\n                                   nsample)\n        nsample -= variate[i]\n    variate[-1] = nsample\n\nThe default method is \"marginals\".  For some cases (e.g. when\n`colors` contains relatively small integers), the \"count\" method\ncan be significantly faster than the \"marginals\" method.  If\nperformance of the algorithm is important, test the two methods\nwith typical inputs to decide which works best.\n\n.. versionadded:: 1.18.0\n\nExamples\n--------\n>>> colors = [16, 8, 4]\n>>> seed = 4861946401452\n>>> gen = np.random.Generator(np.random.PCG64(seed))\n>>> gen.multivariate_hypergeometric(colors, 6)\narray([5, 0, 1])\n>>> gen.multivariate_hypergeometric(colors, 6, size=3)\narray([[5, 0, 1],\n       [2, 2, 2],\n       [3, 3, 0]])\n>>> gen.multivariate_hypergeometric(colors, 6, size=(2, 2))\narray([[[3, 2, 1],\n        [3, 2, 1]],\n       [[4, 1, 1],\n        [3, 2, 1]]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e7f391d0bf5a32ae30359e42ee1ecaaadac64811129aae7e0948df8ba4838ccc",
            "fields": [
                {
                    "name": "colors",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "sequence of integers     The number of each type of item in the collection from which     a sample is drawn.  The values in ``colors`` must be nonnegative.     To avoid loss of precision in the algorithm, ``sum(colors)``     must be less than ``10**9`` when `method` is \"marginals\". ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "nsample",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int     The number of items selected.  ``nsample`` must not be greater     than ``sum(colors)``. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     The number of variates to generate, either an integer or a tuple     holding the shape of the array of variates.  If the given size is,     e.g., ``(k, m)``, then ``k * m`` variates are drawn, where one     variate is a vector of length ``len(colors)``, and the return value     has shape ``(k, m, len(colors))``.  If `size` is an integer, the     output has shape ``(size, len(colors))``.  Default is None, in     which case a single variate is returned as an array with shape     ``(len(colors),)``. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "method",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "string, optional     Specify the algorithm that is used to generate the variates.     Must be 'count' or 'marginals' (the default).  See the Notes     for a description of the methods. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.Generator.multivariate_hypergeometric",
                    "defaultValue": "numpy.random.Generator.multivariate_hypergeometric",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Generator.multivariate_normal",
            "description": "\nDraw random samples from a multivariate normal distribution.\n\nThe multivariate normal, multinormal or Gaussian distribution is a\ngeneralization of the one-dimensional normal distribution to higher\ndimensions.  Such a distribution is specified by its mean and\ncovariance matrix.  These parameters are analogous to the mean\n(average or \"center\") and variance (standard deviation, or \"width,\"\nsquared) of the one-dimensional normal distribution.\n\nParameters\n----------\nmean : 1-D array_like, of length N\n    Mean of the N-dimensional distribution.\ncov : 2-D array_like, of shape (N, N)\n    Covariance matrix of the distribution. It must be symmetric and\n    positive-semidefinite for proper sampling.\nsize : int or tuple of ints, optional\n    Given a shape of, for example, ``(m,n,k)``, ``m*n*k`` samples are\n    generated, and packed in an `m`-by-`n`-by-`k` arrangement.  Because\n    each sample is `N`-dimensional, the output shape is ``(m,n,k,N)``.\n    If no shape is specified, a single (`N`-D) sample is returned.\ncheck_valid : { 'warn', 'raise', 'ignore' }, optional\n    Behavior when the covariance matrix is not positive semidefinite.\ntol : float, optional\n    Tolerance when checking the singular values in covariance matrix.\n    cov is cast to double before the check.\nmethod : { 'svd', 'eigh', 'cholesky'}, optional\n    The cov input is used to compute a factor matrix A such that\n    ``A @ A.T = cov``. This argument is used to select the method\n    used to compute the factor matrix A. The default method 'svd' is\n    the slowest, while 'cholesky' is the fastest but less robust than\n    the slowest method. The method `eigh` uses eigen decomposition to\n    compute A and is faster than svd but slower than cholesky.\n\n    .. versionadded:: 1.18.0\n\nReturns\n-------\nout : ndarray\n    The drawn samples, of shape *size*, if that was provided.  If not,\n    the shape is ``(N,)``.\n\n    In other words, each entry ``out[i,j,...,:]`` is an N-dimensional\n    value drawn from the distribution.\n\nNotes\n-----\nThe mean is a coordinate in N-dimensional space, which represents the\nlocation where samples are most likely to be generated.  This is\nanalogous to the peak of the bell curve for the one-dimensional or\nunivariate normal distribution.\n\nCovariance indicates the level to which two variables vary together.\nFrom the multivariate normal distribution, we draw N-dimensional\nsamples, :math:`X = [x_1, x_2, ... x_N]`.  The covariance matrix\nelement :math:`C_{ij}` is the covariance of :math:`x_i` and :math:`x_j`.\nThe element :math:`C_{ii}` is the variance of :math:`x_i` (i.e. its\n\"spread\").\n\nInstead of specifying the full covariance matrix, popular\napproximations include:\n\n  - Spherical covariance (`cov` is a multiple of the identity matrix)\n  - Diagonal covariance (`cov` has non-negative elements, and only on\n    the diagonal)\n\nThis geometrical property can be seen in two dimensions by plotting\ngenerated data-points:\n\n>>> mean = [0, 0]\n>>> cov = [[1, 0], [0, 100]]  # diagonal covariance\n\nDiagonal covariance means that points are oriented along x or y-axis:\n\n>>> import matplotlib.pyplot as plt\n>>> x, y = np.random.default_rng().multivariate_normal(mean, cov, 5000).T\n>>> plt.plot(x, y, 'x')\n>>> plt.axis('equal')\n>>> plt.show()\n\nNote that the covariance matrix must be positive semidefinite (a.k.a.\nnonnegative-definite). Otherwise, the behavior of this method is\nundefined and backwards compatibility is not guaranteed.\n\nReferences\n----------\n.. [1] Papoulis, A., \"Probability, Random Variables, and Stochastic\n       Processes,\" 3rd ed., New York: McGraw-Hill, 1991.\n.. [2] Duda, R. O., Hart, P. E., and Stork, D. G., \"Pattern\n       Classification,\" 2nd ed., New York: Wiley, 2001.\n\nExamples\n--------\n>>> mean = (1, 2)\n>>> cov = [[1, 0], [0, 1]]\n>>> rng = np.random.default_rng()\n>>> x = rng.multivariate_normal(mean, cov, (3, 3))\n>>> x.shape\n(3, 3, 2)\n\nWe can use a different method other than the default to factorize cov:\n\n>>> y = rng.multivariate_normal(mean, cov, (3, 3), method='cholesky')\n>>> y.shape\n(3, 3, 2)\n\nHere we generate 800 samples from the bivariate normal distribution\nwith mean [0, 0] and covariance matrix [[6, -3], [-3, 3.5]].  The\nexpected variances of the first and second components of the sample\nare 6 and 3.5, respectively, and the expected correlation\ncoefficient is -3/sqrt(6*3.5) \u2248 -0.65465.\n\n>>> cov = np.array([[6, -3], [-3, 3.5]])\n>>> pts = rng.multivariate_normal([0, 0], cov, size=800)\n\nCheck that the mean, covariance, and correlation coefficient of the\nsample are close to the expected values:\n\n>>> pts.mean(axis=0)\narray([ 0.0326911 , -0.01280782])  # may vary\n>>> np.cov(pts.T)\narray([[ 5.96202397, -2.85602287],\n       [-2.85602287,  3.47613949]])  # may vary\n>>> np.corrcoef(pts.T)[0, 1]\n-0.6273591314603949  # may vary\n\nWe can visualize this data with a scatter plot.  The orientation\nof the point cloud illustrates the negative correlation of the\ncomponents of this sample.\n\n>>> import matplotlib.pyplot as plt\n>>> plt.plot(pts[:, 0], pts[:, 1], '.', alpha=0.5)\n>>> plt.axis('equal')\n>>> plt.grid()\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1751885d2be1215fda2405e86e17165a7b449c2553d3aebdbd3948644c71c522",
            "fields": [
                {
                    "name": "mean",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "1-D array_like, of length N     Mean of the N-dimensional distribution. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "cov",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "2-D array_like, of shape (N, N)     Covariance matrix of the distribution. It must be symmetric and     positive-semidefinite for proper sampling. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Given a shape of, for example, ``(m,n,k)``, ``m*n*k`` samples are     generated, and packed in an `m`-by-`n`-by-`k` arrangement.  Because     each sample is `N`-dimensional, the output shape is ``(m,n,k,N)``.     If no shape is specified, a single (`N`-D) sample is returned. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "check_valid",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "{ 'warn', 'raise', 'ignore' }, optional     Behavior when the covariance matrix is not positive semidefinite. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "tol",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float, optional     Tolerance when checking the singular values in covariance matrix.     cov is cast to double before the check. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "method",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "{ 'svd', 'eigh', 'cholesky'}, optional     The cov input is used to compute a factor matrix A such that     ``A @ A.T = cov``. This argument is used to select the method     used to compute the factor matrix A. The default method 'svd' is     the slowest, while 'cholesky' is the fastest but less robust than     the slowest method. The method `eigh` uses eigen decomposition to     compute A and is faster than svd but slower than cholesky.      .. versionadded:: 1.18.0 ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.Generator.multivariate_normal",
                    "defaultValue": "numpy.random.Generator.multivariate_normal",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Generator.negative_binomial",
            "description": "\nDraw samples from a negative binomial distribution.\n\nSamples are drawn from a negative binomial distribution with specified\nparameters, `n` successes and `p` probability of success where `n`\nis > 0 and `p` is in the interval (0, 1].\n\nParameters\n----------\nn : float or array_like of floats\n    Parameter of the distribution, > 0.\np : float or array_like of floats\n    Parameter of the distribution. Must satisfy 0 < p <= 1.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``n`` and ``p`` are both scalars.\n    Otherwise, ``np.broadcast(n, p).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized negative binomial distribution,\n    where each sample is equal to N, the number of failures that\n    occurred before a total of n successes was reached.\n\nNotes\n-----\nThe probability mass function of the negative binomial distribution is\n\n.. math:: P(N;n,p) = \\frac{\\Gamma(N+n)}{N!\\Gamma(n)}p^{n}(1-p)^{N},\n\nwhere :math:`n` is the number of successes, :math:`p` is the\nprobability of success, :math:`N+n` is the number of trials, and\n:math:`\\Gamma` is the gamma function. When :math:`n` is an integer,\n:math:`\\frac{\\Gamma(N+n)}{N!\\Gamma(n)} = \\binom{N+n-1}{N}`, which is\nthe more common form of this term in the the pmf. The negative\nbinomial distribution gives the probability of N failures given n\nsuccesses, with a success on the last trial.\n\nIf one throws a die repeatedly until the third time a \"1\" appears,\nthen the probability distribution of the number of non-\"1\"s that\nappear before the third \"1\" is a negative binomial distribution.\n\nBecause this method internally calls ``Generator.poisson`` with an\nintermediate random value, a ValueError is raised when the choice of \n:math:`n` and :math:`p` would result in the mean + 10 sigma of the sampled\nintermediate distribution exceeding the max acceptable value of the \n``Generator.poisson`` method. This happens when :math:`p` is too low \n(a lot of failures happen for every success) and :math:`n` is too big (\na lot of sucesses are allowed).\nTherefore, the :math:`n` and :math:`p` values must satisfy the constraint:\n\n.. math:: n\\frac{1-p}{p}+10n\\sqrt{n}\\frac{1-p}{p}<2^{63}-1-10\\sqrt{2^{63}-1},\n\nWhere the left side of the equation is the derived mean + 10 sigma of\na sample from the gamma distribution internally used as the :math:`lam`\nparameter of a poisson sample, and the right side of the equation is\nthe constraint for maximum value of :math:`lam` in ``Generator.poisson``.\n\nReferences\n----------\n.. [1] Weisstein, Eric W. \"Negative Binomial Distribution.\" From\n       MathWorld--A Wolfram Web Resource.\n       http://mathworld.wolfram.com/NegativeBinomialDistribution.html\n.. [2] Wikipedia, \"Negative binomial distribution\",\n       https://en.wikipedia.org/wiki/Negative_binomial_distribution\n\nExamples\n--------\nDraw samples from the distribution:\n\nA real world example. A company drills wild-cat oil\nexploration wells, each with an estimated probability of\nsuccess of 0.1.  What is the probability of having one success\nfor each successive well, that is what is the probability of a\nsingle success after drilling 5 wells, after 6 wells, etc.?\n\n>>> s = np.random.default_rng().negative_binomial(1, 0.1, 100000)\n>>> for i in range(1, 11): # doctest: +SKIP\n...    probability = sum(s<i) / 100000.\n...    print(i, \"wells drilled, probability of one success =\", probability)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8521695f0ac94713227f4788455de245b96dfb796c4cf29c6fdf3f8e2e249a97",
            "fields": [
                {
                    "name": "n",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     Parameter of the distribution, > 0. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "p",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     Parameter of the distribution. Must satisfy 0 < p <= 1. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  If size is ``None`` (default),     a single value is returned if ``n`` and ``p`` are both scalars.     Otherwise, ``np.broadcast(n, p).size`` samples are drawn. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.Generator.negative_binomial",
                    "defaultValue": "numpy.random.Generator.negative_binomial",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Generator.noncentral_chisquare",
            "description": "\nDraw samples from a noncentral chi-square distribution.\n\nThe noncentral :math:`\\chi^2` distribution is a generalization of\nthe :math:`\\chi^2` distribution.\n\nParameters\n----------\ndf : float or array_like of floats\n    Degrees of freedom, must be > 0.\n\n    .. versionchanged:: 1.10.0\n       Earlier NumPy versions required dfnum > 1.\nnonc : float or array_like of floats\n    Non-centrality, must be non-negative.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``df`` and ``nonc`` are both scalars.\n    Otherwise, ``np.broadcast(df, nonc).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized noncentral chi-square distribution.\n\nNotes\n-----\nThe probability density function for the noncentral Chi-square\ndistribution is\n\n.. math:: P(x;df,nonc) = \\sum^{\\infty}_{i=0}\n                       \\frac{e^{-nonc/2}(nonc/2)^{i}}{i!}\n                       P_{Y_{df+2i}}(x),\n\nwhere :math:`Y_{q}` is the Chi-square with q degrees of freedom.\n\nReferences\n----------\n.. [1] Wikipedia, \"Noncentral chi-squared distribution\"\n       https://en.wikipedia.org/wiki/Noncentral_chi-squared_distribution\n\nExamples\n--------\nDraw values from the distribution and plot the histogram\n\n>>> rng = np.random.default_rng()\n>>> import matplotlib.pyplot as plt\n>>> values = plt.hist(rng.noncentral_chisquare(3, 20, 100000),\n...                   bins=200, density=True)\n>>> plt.show()\n\nDraw values from a noncentral chisquare with very small noncentrality,\nand compare to a chisquare.\n\n>>> plt.figure()\n>>> values = plt.hist(rng.noncentral_chisquare(3, .0000001, 100000),\n...                   bins=np.arange(0., 25, .1), density=True)\n>>> values2 = plt.hist(rng.chisquare(3, 100000),\n...                    bins=np.arange(0., 25, .1), density=True)\n>>> plt.plot(values[1][0:-1], values[0]-values2[0], 'ob')\n>>> plt.show()\n\nDemonstrate how large values of non-centrality lead to a more symmetric\ndistribution.\n\n>>> plt.figure()\n>>> values = plt.hist(rng.noncentral_chisquare(3, 20, 100000),\n...                   bins=200, density=True)\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "bd1c5a6d9d456b2adf756605a4a1b4025ec6cbb18b639797073ae7d8a47e1926",
            "fields": [
                {
                    "name": "df",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     Degrees of freedom, must be > 0.      .. versionchanged:: 1.10.0        Earlier NumPy versions required dfnum > 1. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "nonc",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     Non-centrality, must be non-negative. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  If size is ``None`` (default),     a single value is returned if ``df`` and ``nonc`` are both scalars.     Otherwise, ``np.broadcast(df, nonc).size`` samples are drawn. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.Generator.noncentral_chisquare",
                    "defaultValue": "numpy.random.Generator.noncentral_chisquare",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Generator.noncentral_f",
            "description": "\nDraw samples from the noncentral F distribution.\n\nSamples are drawn from an F distribution with specified parameters,\n`dfnum` (degrees of freedom in numerator) and `dfden` (degrees of\nfreedom in denominator), where both parameters > 1.\n`nonc` is the non-centrality parameter.\n\nParameters\n----------\ndfnum : float or array_like of floats\n    Numerator degrees of freedom, must be > 0.\n\n    .. versionchanged:: 1.14.0\n       Earlier NumPy versions required dfnum > 1.\ndfden : float or array_like of floats\n    Denominator degrees of freedom, must be > 0.\nnonc : float or array_like of floats\n    Non-centrality parameter, the sum of the squares of the numerator\n    means, must be >= 0.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``dfnum``, ``dfden``, and ``nonc``\n    are all scalars.  Otherwise, ``np.broadcast(dfnum, dfden, nonc).size``\n    samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized noncentral Fisher distribution.\n\nNotes\n-----\nWhen calculating the power of an experiment (power = probability of\nrejecting the null hypothesis when a specific alternative is true) the\nnon-central F statistic becomes important.  When the null hypothesis is\ntrue, the F statistic follows a central F distribution. When the null\nhypothesis is not true, then it follows a non-central F statistic.\n\nReferences\n----------\n.. [1] Weisstein, Eric W. \"Noncentral F-Distribution.\"\n       From MathWorld--A Wolfram Web Resource.\n       http://mathworld.wolfram.com/NoncentralF-Distribution.html\n.. [2] Wikipedia, \"Noncentral F-distribution\",\n       https://en.wikipedia.org/wiki/Noncentral_F-distribution\n\nExamples\n--------\nIn a study, testing for a specific alternative to the null hypothesis\nrequires use of the Noncentral F distribution. We need to calculate the\narea in the tail of the distribution that exceeds the value of the F\ndistribution for the null hypothesis.  We'll plot the two probability\ndistributions for comparison.\n\n>>> rng = np.random.default_rng()\n>>> dfnum = 3 # between group deg of freedom\n>>> dfden = 20 # within groups degrees of freedom\n>>> nonc = 3.0\n>>> nc_vals = rng.noncentral_f(dfnum, dfden, nonc, 1000000)\n>>> NF = np.histogram(nc_vals, bins=50, density=True)\n>>> c_vals = rng.f(dfnum, dfden, 1000000)\n>>> F = np.histogram(c_vals, bins=50, density=True)\n>>> import matplotlib.pyplot as plt\n>>> plt.plot(F[1][1:], F[0])\n>>> plt.plot(NF[1][1:], NF[0])\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "61c1b266d579829a5f365c9234c451cd8d28de28bb46029ef000c0a307968242",
            "fields": [
                {
                    "name": "dfnum",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     Numerator degrees of freedom, must be > 0.      .. versionchanged:: 1.14.0        Earlier NumPy versions required dfnum > 1. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dfden",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     Denominator degrees of freedom, must be > 0. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "nonc",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     Non-centrality parameter, the sum of the squares of the numerator     means, must be >= 0. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  If size is ``None`` (default),     a single value is returned if ``dfnum``, ``dfden``, and ``nonc``     are all scalars.  Otherwise, ``np.broadcast(dfnum, dfden, nonc).size``     samples are drawn. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.Generator.noncentral_f",
                    "defaultValue": "numpy.random.Generator.noncentral_f",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Generator.normal",
            "description": "\nDraw random samples from a normal (Gaussian) distribution.\n\nThe probability density function of the normal distribution, first\nderived by De Moivre and 200 years later by both Gauss and Laplace\nindependently [2]_, is often called the bell curve because of\nits characteristic shape (see the example below).\n\nThe normal distributions occurs often in nature.  For example, it\ndescribes the commonly occurring distribution of samples influenced\nby a large number of tiny, random disturbances, each with its own\nunique distribution [2]_.\n\nParameters\n----------\nloc : float or array_like of floats\n    Mean (\"centre\") of the distribution.\nscale : float or array_like of floats\n    Standard deviation (spread or \"width\") of the distribution. Must be\n    non-negative.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``loc`` and ``scale`` are both scalars.\n    Otherwise, ``np.broadcast(loc, scale).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized normal distribution.\n\nSee Also\n--------\nscipy.stats.norm : probability density function, distribution or\n    cumulative density function, etc.\n\nNotes\n-----\nThe probability density for the Gaussian distribution is\n\n.. math:: p(x) = \\frac{1}{\\sqrt{ 2 \\pi \\sigma^2 }}\n                 e^{ - \\frac{ (x - \\mu)^2 } {2 \\sigma^2} },\n\nwhere :math:`\\mu` is the mean and :math:`\\sigma` the standard\ndeviation. The square of the standard deviation, :math:`\\sigma^2`,\nis called the variance.\n\nThe function has its peak at the mean, and its \"spread\" increases with\nthe standard deviation (the function reaches 0.607 times its maximum at\n:math:`x + \\sigma` and :math:`x - \\sigma` [2]_).  This implies that\n:meth:`normal` is more likely to return samples lying close to the\nmean, rather than those far away.\n\nReferences\n----------\n.. [1] Wikipedia, \"Normal distribution\",\n       https://en.wikipedia.org/wiki/Normal_distribution\n.. [2] P. R. Peebles Jr., \"Central Limit Theorem\" in \"Probability,\n       Random Variables and Random Signal Principles\", 4th ed., 2001,\n       pp. 51, 51, 125.\n\nExamples\n--------\nDraw samples from the distribution:\n\n>>> mu, sigma = 0, 0.1 # mean and standard deviation\n>>> s = np.random.default_rng().normal(mu, sigma, 1000)\n\nVerify the mean and the variance:\n\n>>> abs(mu - np.mean(s))\n0.0  # may vary\n\n>>> abs(sigma - np.std(s, ddof=1))\n0.0  # may vary\n\nDisplay the histogram of the samples, along with\nthe probability density function:\n\n>>> import matplotlib.pyplot as plt\n>>> count, bins, ignored = plt.hist(s, 30, density=True)\n>>> plt.plot(bins, 1/(sigma * np.sqrt(2 * np.pi)) *\n...                np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n...          linewidth=2, color='r')\n>>> plt.show()\n\nTwo-by-four array of samples from N(3, 6.25):\n\n>>> np.random.default_rng().normal(3, 2.5, size=(2, 4))\narray([[-4.49401501,  4.00950034, -1.81814867,  7.29718677],   # random\n       [ 0.39924804,  4.68456316,  4.99394529,  4.84057254]])  # random",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "97fbcc4314de6ed021dba4c60546e099ce122b0558e8a995c4d9d59dd4ffa4bf",
            "fields": [
                {
                    "name": "loc",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     Mean (\"centre\") of the distribution. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "scale",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     Standard deviation (spread or \"width\") of the distribution. Must be     non-negative. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  If size is ``None`` (default),     a single value is returned if ``loc`` and ``scale`` are both scalars.     Otherwise, ``np.broadcast(loc, scale).size`` samples are drawn. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.Generator.normal",
                    "defaultValue": "numpy.random.Generator.normal",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Generator.pareto",
            "description": "\nDraw samples from a Pareto II or Lomax distribution with\nspecified shape.\n\nThe Lomax or Pareto II distribution is a shifted Pareto\ndistribution. The classical Pareto distribution can be\nobtained from the Lomax distribution by adding 1 and\nmultiplying by the scale parameter ``m`` (see Notes).  The\nsmallest value of the Lomax distribution is zero while for the\nclassical Pareto distribution it is ``mu``, where the standard\nPareto distribution has location ``mu = 1``.  Lomax can also\nbe considered as a simplified version of the Generalized\nPareto distribution (available in SciPy), with the scale set\nto one and the location set to zero.\n\nThe Pareto distribution must be greater than zero, and is\nunbounded above.  It is also known as the \"80-20 rule\".  In\nthis distribution, 80 percent of the weights are in the lowest\n20 percent of the range, while the other 20 percent fill the\nremaining 80 percent of the range.\n\nParameters\n----------\na : float or array_like of floats\n    Shape of the distribution. Must be positive.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``a`` is a scalar.  Otherwise,\n    ``np.array(a).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized Pareto distribution.\n\nSee Also\n--------\nscipy.stats.lomax : probability density function, distribution or\n    cumulative density function, etc.\nscipy.stats.genpareto : probability density function, distribution or\n    cumulative density function, etc.\n\nNotes\n-----\nThe probability density for the Pareto distribution is\n\n.. math:: p(x) = \\frac{am^a}{x^{a+1}}\n\nwhere :math:`a` is the shape and :math:`m` the scale.\n\nThe Pareto distribution, named after the Italian economist\nVilfredo Pareto, is a power law probability distribution\nuseful in many real world problems.  Outside the field of\neconomics it is generally referred to as the Bradford\ndistribution. Pareto developed the distribution to describe\nthe distribution of wealth in an economy.  It has also found\nuse in insurance, web page access statistics, oil field sizes,\nand many other problems, including the download frequency for\nprojects in Sourceforge [1]_.  It is one of the so-called\n\"fat-tailed\" distributions.\n\n\nReferences\n----------\n.. [1] Francis Hunt and Paul Johnson, On the Pareto Distribution of\n       Sourceforge projects.\n.. [2] Pareto, V. (1896). Course of Political Economy. Lausanne.\n.. [3] Reiss, R.D., Thomas, M.(2001), Statistical Analysis of Extreme\n       Values, Birkhauser Verlag, Basel, pp 23-30.\n.. [4] Wikipedia, \"Pareto distribution\",\n       https://en.wikipedia.org/wiki/Pareto_distribution\n\nExamples\n--------\nDraw samples from the distribution:\n\n>>> a, m = 3., 2.  # shape and mode\n>>> s = (np.random.default_rng().pareto(a, 1000) + 1) * m\n\nDisplay the histogram of the samples, along with the probability\ndensity function:\n\n>>> import matplotlib.pyplot as plt\n>>> count, bins, _ = plt.hist(s, 100, density=True)\n>>> fit = a*m**a / bins**(a+1)\n>>> plt.plot(bins, max(count)*fit/max(fit), linewidth=2, color='r')\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2a8499a9a824467858676a2acf7c3710026c30961118697f300f9b9039810c4e",
            "fields": [
                {
                    "name": "a",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     Shape of the distribution. Must be positive. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  If size is ``None`` (default),     a single value is returned if ``a`` is a scalar.  Otherwise,     ``np.array(a).size`` samples are drawn. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.Generator.pareto",
                    "defaultValue": "numpy.random.Generator.pareto",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Generator.permutation",
            "description": "\nRandomly permute a sequence, or return a permuted range.\n\nParameters\n----------\nx : int or array_like\n    If `x` is an integer, randomly permute ``np.arange(x)``.\n    If `x` is an array, make a copy and shuffle the elements\n    randomly.\naxis : int, optional\n    The axis which `x` is shuffled along. Default is 0.\n\nReturns\n-------\nout : ndarray\n    Permuted sequence or array range.\n\nExamples\n--------\n>>> rng = np.random.default_rng()\n>>> rng.permutation(10)\narray([1, 7, 4, 3, 0, 9, 2, 5, 8, 6]) # random\n\n>>> rng.permutation([1, 4, 9, 12, 15])\narray([15,  1,  9,  4, 12]) # random\n\n>>> arr = np.arange(9).reshape((3, 3))\n>>> rng.permutation(arr)\narray([[6, 7, 8], # random\n       [0, 1, 2],\n       [3, 4, 5]])\n\n>>> rng.permutation(\"abc\")\nTraceback (most recent call last):\n    ...\nnumpy.AxisError: axis 0 is out of bounds for array of dimension 0\n\n>>> arr = np.arange(9).reshape((3, 3))\n>>> rng.permutation(arr, axis=1)\narray([[0, 2, 1], # random\n       [3, 5, 4],\n       [6, 8, 7]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c6a3cd97bcf8ca96cbf2714d13b1cf585252257cc26831c5d5ddcf19e56678b2",
            "fields": [
                {
                    "name": "x",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or array_like     If `x` is an integer, randomly permute ``np.arange(x)``.     If `x` is an array, make a copy and shuffle the elements     randomly. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "axis",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int, optional     The axis which `x` is shuffled along. Default is 0. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.Generator.permutation",
                    "defaultValue": "numpy.random.Generator.permutation",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Generator.permuted",
            "description": "\nRandomly permute `x` along axis `axis`.\n\nUnlike `shuffle`, each slice along the given axis is shuffled\nindependently of the others.\n\nParameters\n----------\nx : array_like, at least one-dimensional\n    Array to be shuffled.\naxis : int, optional\n    Slices of `x` in this axis are shuffled. Each slice\n    is shuffled independently of the others.  If `axis` is\n    None, the flattened array is shuffled.\nout : ndarray, optional\n    If given, this is the destinaton of the shuffled array.\n    If `out` is None, a shuffled copy of the array is returned.\n\nReturns\n-------\nndarray\n    If `out` is None, a shuffled copy of `x` is returned.\n    Otherwise, the shuffled array is stored in `out`,\n    and `out` is returned\n\nSee Also\n--------\nshuffle\npermutation\n\nNotes\n-----\nAn important distinction between methods ``shuffle``  and ``permuted`` is \nhow they both treat the ``axis`` parameter which can be found at \n:ref:`generator-handling-axis-parameter`.\n\nExamples\n--------\nCreate a `numpy.random.Generator` instance:\n\n>>> rng = np.random.default_rng()\n\nCreate a test array:\n\n>>> x = np.arange(24).reshape(3, 8)\n>>> x\narray([[ 0,  1,  2,  3,  4,  5,  6,  7],\n       [ 8,  9, 10, 11, 12, 13, 14, 15],\n       [16, 17, 18, 19, 20, 21, 22, 23]])\n\nShuffle the rows of `x`:\n\n>>> y = rng.permuted(x, axis=1)\n>>> y\narray([[ 4,  3,  6,  7,  1,  2,  5,  0],  # random\n       [15, 10, 14,  9, 12, 11,  8, 13],\n       [17, 16, 20, 21, 18, 22, 23, 19]])\n\n`x` has not been modified:\n\n>>> x\narray([[ 0,  1,  2,  3,  4,  5,  6,  7],\n       [ 8,  9, 10, 11, 12, 13, 14, 15],\n       [16, 17, 18, 19, 20, 21, 22, 23]])\n\nTo shuffle the rows of `x` in-place, pass `x` as the `out`\nparameter:\n\n>>> y = rng.permuted(x, axis=1, out=x)\n>>> x\narray([[ 3,  0,  4,  7,  1,  6,  2,  5],  # random\n       [ 8, 14, 13,  9, 12, 11, 15, 10],\n       [17, 18, 16, 22, 19, 23, 20, 21]])\n\nNote that when the ``out`` parameter is given, the return\nvalue is ``out``:\n\n>>> y is x\nTrue",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "224eb60867cead4f762e225cf200cb7cf68e9c9df5df286ce1dd04a50d1997ec",
            "fields": [
                {
                    "name": "x",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "array_like, at least one-dimensional     Array to be shuffled. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "axis",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int, optional     Slices of `x` in this axis are shuffled. Each slice     is shuffled independently of the others.  If `axis` is     None, the flattened array is shuffled. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "out",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "ndarray, optional     If given, this is the destinaton of the shuffled array.     If `out` is None, a shuffled copy of the array is returned. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.Generator.permuted",
                    "defaultValue": "numpy.random.Generator.permuted",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Generator.poisson",
            "description": "\nDraw samples from a Poisson distribution.\n\nThe Poisson distribution is the limit of the binomial distribution\nfor large N.\n\nParameters\n----------\nlam : float or array_like of floats\n    Expected number of events occurring in a fixed-time interval,\n    must be >= 0. A sequence must be broadcastable over the requested\n    size.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``lam`` is a scalar. Otherwise,\n    ``np.array(lam).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized Poisson distribution.\n\nNotes\n-----\nThe Poisson distribution\n\n.. math:: f(k; \\lambda)=\\frac{\\lambda^k e^{-\\lambda}}{k!}\n\nFor events with an expected separation :math:`\\lambda` the Poisson\ndistribution :math:`f(k; \\lambda)` describes the probability of\n:math:`k` events occurring within the observed\ninterval :math:`\\lambda`.\n\nBecause the output is limited to the range of the C int64 type, a\nValueError is raised when `lam` is within 10 sigma of the maximum\nrepresentable value.\n\nReferences\n----------\n.. [1] Weisstein, Eric W. \"Poisson Distribution.\"\n       From MathWorld--A Wolfram Web Resource.\n       http://mathworld.wolfram.com/PoissonDistribution.html\n.. [2] Wikipedia, \"Poisson distribution\",\n       https://en.wikipedia.org/wiki/Poisson_distribution\n\nExamples\n--------\nDraw samples from the distribution:\n\n>>> import numpy as np\n>>> rng = np.random.default_rng()\n>>> s = rng.poisson(5, 10000)\n\nDisplay histogram of the sample:\n\n>>> import matplotlib.pyplot as plt\n>>> count, bins, ignored = plt.hist(s, 14, density=True)\n>>> plt.show()\n\nDraw each 100 values for lambda 100 and 500:\n\n>>> s = rng.poisson(lam=(100., 500.), size=(100, 2))",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6b8b1c6171215c4ea0043620ece8d17114c10f3e906c0607f216cd1be4c54445",
            "fields": [
                {
                    "name": "lam",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     Expected number of events occurring in a fixed-time interval,     must be >= 0. A sequence must be broadcastable over the requested     size. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  If size is ``None`` (default),     a single value is returned if ``lam`` is a scalar. Otherwise,     ``np.array(lam).size`` samples are drawn. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.Generator.poisson",
                    "defaultValue": "numpy.random.Generator.poisson",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Generator.power",
            "description": "\nDraws samples in [0, 1] from a power distribution with positive\nexponent a - 1.\n\nAlso known as the power function distribution.\n\nParameters\n----------\na : float or array_like of floats\n    Parameter of the distribution. Must be non-negative.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``a`` is a scalar.  Otherwise,\n    ``np.array(a).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized power distribution.\n\nRaises\n------\nValueError\n    If a <= 0.\n\nNotes\n-----\nThe probability density function is\n\n.. math:: P(x; a) = ax^{a-1}, 0 \\le x \\le 1, a>0.\n\nThe power function distribution is just the inverse of the Pareto\ndistribution. It may also be seen as a special case of the Beta\ndistribution.\n\nIt is used, for example, in modeling the over-reporting of insurance\nclaims.\n\nReferences\n----------\n.. [1] Christian Kleiber, Samuel Kotz, \"Statistical size distributions\n       in economics and actuarial sciences\", Wiley, 2003.\n.. [2] Heckert, N. A. and Filliben, James J. \"NIST Handbook 148:\n       Dataplot Reference Manual, Volume 2: Let Subcommands and Library\n       Functions\", National Institute of Standards and Technology\n       Handbook Series, June 2003.\n       https://www.itl.nist.gov/div898/software/dataplot/refman2/auxillar/powpdf.pdf\n\nExamples\n--------\nDraw samples from the distribution:\n\n>>> rng = np.random.default_rng()\n>>> a = 5. # shape\n>>> samples = 1000\n>>> s = rng.power(a, samples)\n\nDisplay the histogram of the samples, along with\nthe probability density function:\n\n>>> import matplotlib.pyplot as plt\n>>> count, bins, ignored = plt.hist(s, bins=30)\n>>> x = np.linspace(0, 1, 100)\n>>> y = a*x**(a-1.)\n>>> normed_y = samples*np.diff(bins)[0]*y\n>>> plt.plot(x, normed_y)\n>>> plt.show()\n\nCompare the power function distribution to the inverse of the Pareto.\n\n>>> from scipy import stats  # doctest: +SKIP\n>>> rvs = rng.power(5, 1000000)\n>>> rvsp = rng.pareto(5, 1000000)\n>>> xx = np.linspace(0,1,100)\n>>> powpdf = stats.powerlaw.pdf(xx,5)  # doctest: +SKIP\n\n>>> plt.figure()\n>>> plt.hist(rvs, bins=50, density=True)\n>>> plt.plot(xx,powpdf,'r-')  # doctest: +SKIP\n>>> plt.title('power(5)')\n\n>>> plt.figure()\n>>> plt.hist(1./(1.+rvsp), bins=50, density=True)\n>>> plt.plot(xx,powpdf,'r-')  # doctest: +SKIP\n>>> plt.title('inverse of 1 + Generator.pareto(5)')\n\n>>> plt.figure()\n>>> plt.hist(1./(1.+rvsp), bins=50, density=True)\n>>> plt.plot(xx,powpdf,'r-')  # doctest: +SKIP\n>>> plt.title('inverse of stats.pareto(5)')",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1bf4fcffacce73d915bdcf9e0782402251eb04c2d069c4b27a9ae03ed27aa2a1",
            "fields": [
                {
                    "name": "a",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     Parameter of the distribution. Must be non-negative. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  If size is ``None`` (default),     a single value is returned if ``a`` is a scalar.  Otherwise,     ``np.array(a).size`` samples are drawn. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.Generator.power",
                    "defaultValue": "numpy.random.Generator.power",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Generator.random",
            "description": "\nReturn random floats in the half-open interval [0.0, 1.0).\n\nResults are from the \"continuous uniform\" distribution over the\nstated interval.  To sample :math:`Unif[a, b), b > a` multiply\nthe output of `random` by `(b-a)` and add `a`::\n\n  (b - a) * random() + a\n\nParameters\n----------\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  Default is None, in which case a\n    single value is returned.\ndtype : dtype, optional\n    Desired dtype of the result, only `float64` and `float32` are supported.\n    Byteorder must be native. The default value is np.float64.\nout : ndarray, optional\n    Alternative output array in which to place the result. If size is not None,\n    it must have the same shape as the provided size and must match the type of\n    the output values.\n\nReturns\n-------\nout : float or ndarray of floats\n    Array of random floats of shape `size` (unless ``size=None``, in which\n    case a single float is returned).\n\nExamples\n--------\n>>> rng = np.random.default_rng()\n>>> rng.random()\n0.47108547995356098 # random\n>>> type(rng.random())\n<class 'float'>\n>>> rng.random((5,))\narray([ 0.30220482,  0.86820401,  0.1654503 ,  0.11659149,  0.54323428]) # random\n\nThree-by-two array of random numbers from [-5, 0):\n\n>>> 5 * rng.random((3, 2)) - 5\narray([[-3.99149989, -0.52338984], # random\n       [-2.99091858, -0.79479508],\n       [-1.23204345, -1.75224494]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "898038d21b46f7388ae14360bfb3b02102cf868f72518c1059661cfef785f7b6",
            "fields": [
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  Default is None, in which case a     single value is returned. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dtype",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "dtype, optional     Desired dtype of the result, only `float64` and `float32` are supported.     Byteorder must be native. The default value is np.float64. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "out",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "ndarray, optional     Alternative output array in which to place the result. If size is not None,     it must have the same shape as the provided size and must match the type of     the output values. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.Generator.random",
                    "defaultValue": "numpy.random.Generator.random",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Generator.rayleigh",
            "description": "\nDraw samples from a Rayleigh distribution.\n\nThe :math:`\\chi` and Weibull distributions are generalizations of the\nRayleigh.\n\nParameters\n----------\nscale : float or array_like of floats, optional\n    Scale, also equals the mode. Must be non-negative. Default is 1.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``scale`` is a scalar.  Otherwise,\n    ``np.array(scale).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized Rayleigh distribution.\n\nNotes\n-----\nThe probability density function for the Rayleigh distribution is\n\n.. math:: P(x;scale) = \\frac{x}{scale^2}e^{\\frac{-x^2}{2 \\cdotp scale^2}}\n\nThe Rayleigh distribution would arise, for example, if the East\nand North components of the wind velocity had identical zero-mean\nGaussian distributions.  Then the wind speed would have a Rayleigh\ndistribution.\n\nReferences\n----------\n.. [1] Brighton Webs Ltd., \"Rayleigh Distribution,\"\n       https://web.archive.org/web/20090514091424/http://brighton-webs.co.uk:80/distributions/rayleigh.asp\n.. [2] Wikipedia, \"Rayleigh distribution\"\n       https://en.wikipedia.org/wiki/Rayleigh_distribution\n\nExamples\n--------\nDraw values from the distribution and plot the histogram\n\n>>> from matplotlib.pyplot import hist\n>>> rng = np.random.default_rng()\n>>> values = hist(rng.rayleigh(3, 100000), bins=200, density=True)\n\nWave heights tend to follow a Rayleigh distribution. If the mean wave\nheight is 1 meter, what fraction of waves are likely to be larger than 3\nmeters?\n\n>>> meanvalue = 1\n>>> modevalue = np.sqrt(2 / np.pi) * meanvalue\n>>> s = rng.rayleigh(modevalue, 1000000)\n\nThe percentage of waves larger than 3 meters is:\n\n>>> 100.*sum(s>3)/1000000.\n0.087300000000000003 # random",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9688cb2642b89b78edf08851455795db9e5cb3d48ab4f89089aedcae33d288cf",
            "fields": [
                {
                    "name": "scale",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats, optional     Scale, also equals the mode. Must be non-negative. Default is 1. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  If size is ``None`` (default),     a single value is returned if ``scale`` is a scalar.  Otherwise,     ``np.array(scale).size`` samples are drawn. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.Generator.rayleigh",
                    "defaultValue": "numpy.random.Generator.rayleigh",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Generator.shuffle",
            "description": "\nModify an array or sequence in-place by shuffling its contents.\n\nThe order of sub-arrays is changed but their contents remains the same.\n\nParameters\n----------\nx : ndarray or MutableSequence\n    The array, list or mutable sequence to be shuffled.\naxis : int, optional\n    The axis which `x` is shuffled along. Default is 0.\n    It is only supported on `ndarray` objects.\n\nReturns\n-------\nNone\n\nSee Also\n--------\npermuted\npermutation\n\nNotes\n-----\nAn important distinction between methods ``shuffle``  and ``permuted`` is \nhow they both treat the ``axis`` parameter which can be found at \n:ref:`generator-handling-axis-parameter`.\n\nExamples\n--------\n>>> rng = np.random.default_rng()\n>>> arr = np.arange(10)\n>>> arr\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n>>> rng.shuffle(arr)\n>>> arr\narray([2, 0, 7, 5, 1, 4, 8, 9, 3, 6]) # random\n\n>>> arr = np.arange(9).reshape((3, 3))\n>>> arr\narray([[0, 1, 2],\n       [3, 4, 5],\n       [6, 7, 8]])\n>>> rng.shuffle(arr)\n>>> arr\narray([[3, 4, 5], # random\n       [6, 7, 8],\n       [0, 1, 2]])\n\n>>> arr = np.arange(9).reshape((3, 3))\n>>> arr\narray([[0, 1, 2],\n       [3, 4, 5],\n       [6, 7, 8]])\n>>> rng.shuffle(arr, axis=1)\n>>> arr\narray([[2, 0, 1], # random\n       [5, 3, 4],\n       [8, 6, 7]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7bc7bc8d621ee6c60e97596af5650e6995a582a816f3f297bc135107add8bfe8",
            "fields": [
                {
                    "name": "x",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "ndarray or MutableSequence     The array, list or mutable sequence to be shuffled. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "axis",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int, optional     The axis which `x` is shuffled along. Default is 0.     It is only supported on `ndarray` objects. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.Generator.shuffle",
                    "defaultValue": "numpy.random.Generator.shuffle",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Generator.standard_cauchy",
            "description": "\nDraw samples from a standard Cauchy distribution with mode = 0.\n\nAlso known as the Lorentz distribution.\n\nParameters\n----------\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  Default is None, in which case a\n    single value is returned.\n\nReturns\n-------\nsamples : ndarray or scalar\n    The drawn samples.\n\nNotes\n-----\nThe probability density function for the full Cauchy distribution is\n\n.. math:: P(x; x_0, \\gamma) = \\frac{1}{\\pi \\gamma \\bigl[ 1+\n          (\\frac{x-x_0}{\\gamma})^2 \\bigr] }\n\nand the Standard Cauchy distribution just sets :math:`x_0=0` and\n:math:`\\gamma=1`\n\nThe Cauchy distribution arises in the solution to the driven harmonic\noscillator problem, and also describes spectral line broadening. It\nalso describes the distribution of values at which a line tilted at\na random angle will cut the x axis.\n\nWhen studying hypothesis tests that assume normality, seeing how the\ntests perform on data from a Cauchy distribution is a good indicator of\ntheir sensitivity to a heavy-tailed distribution, since the Cauchy looks\nvery much like a Gaussian distribution, but with heavier tails.\n\nReferences\n----------\n.. [1] NIST/SEMATECH e-Handbook of Statistical Methods, \"Cauchy\n      Distribution\",\n      https://www.itl.nist.gov/div898/handbook/eda/section3/eda3663.htm\n.. [2] Weisstein, Eric W. \"Cauchy Distribution.\" From MathWorld--A\n      Wolfram Web Resource.\n      http://mathworld.wolfram.com/CauchyDistribution.html\n.. [3] Wikipedia, \"Cauchy distribution\"\n      https://en.wikipedia.org/wiki/Cauchy_distribution\n\nExamples\n--------\nDraw samples and plot the distribution:\n\n>>> import matplotlib.pyplot as plt\n>>> s = np.random.default_rng().standard_cauchy(1000000)\n>>> s = s[(s>-25) & (s<25)]  # truncate distribution so it plots well\n>>> plt.hist(s, bins=100)\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "bf7ec14de67029103424ecb3feb530ed98af0a8beded8b86af8790e99f069547",
            "fields": [
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  Default is None, in which case a     single value is returned. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.Generator.standard_cauchy",
                    "defaultValue": "numpy.random.Generator.standard_cauchy",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Generator.standard_exponential",
            "description": "\nDraw samples from the standard exponential distribution.\n\n`standard_exponential` is identical to the exponential distribution\nwith a scale parameter of 1.\n\nParameters\n----------\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  Default is None, in which case a\n    single value is returned.\ndtype : dtype, optional\n    Desired dtype of the result, only `float64` and `float32` are supported.\n    Byteorder must be native. The default value is np.float64.\nmethod : str, optional\n    Either 'inv' or 'zig'. 'inv' uses the default inverse CDF method.\n    'zig' uses the much faster Ziggurat method of Marsaglia and Tsang.\nout : ndarray, optional\n    Alternative output array in which to place the result. If size is not None,\n    it must have the same shape as the provided size and must match the type of\n    the output values.\n\nReturns\n-------\nout : float or ndarray\n    Drawn samples.\n\nExamples\n--------\nOutput a 3x8000 array:\n\n>>> n = np.random.default_rng().standard_exponential((3, 8000))",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "597d9d6ccf6fe5d255e0b26bfcc74f7dab976a01d354b05276da23e8fe3ac5d2",
            "fields": [
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  Default is None, in which case a     single value is returned. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dtype",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "dtype, optional     Desired dtype of the result, only `float64` and `float32` are supported.     Byteorder must be native. The default value is np.float64. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "method",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "str, optional     Either 'inv' or 'zig'. 'inv' uses the default inverse CDF method.     'zig' uses the much faster Ziggurat method of Marsaglia and Tsang. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "out",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "ndarray, optional     Alternative output array in which to place the result. If size is not None,     it must have the same shape as the provided size and must match the type of     the output values. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.Generator.standard_exponential",
                    "defaultValue": "numpy.random.Generator.standard_exponential",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Generator.standard_gamma",
            "description": "\nDraw samples from a standard Gamma distribution.\n\nSamples are drawn from a Gamma distribution with specified parameters,\nshape (sometimes designated \"k\") and scale=1.\n\nParameters\n----------\nshape : float or array_like of floats\n    Parameter, must be non-negative.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``shape`` is a scalar.  Otherwise,\n    ``np.array(shape).size`` samples are drawn.\ndtype : dtype, optional\n    Desired dtype of the result, only `float64` and `float32` are supported.\n    Byteorder must be native. The default value is np.float64.\nout : ndarray, optional\n    Alternative output array in which to place the result. If size is\n    not None, it must have the same shape as the provided size and\n    must match the type of the output values.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized standard gamma distribution.\n\nSee Also\n--------\nscipy.stats.gamma : probability density function, distribution or\n    cumulative density function, etc.\n\nNotes\n-----\nThe probability density for the Gamma distribution is\n\n.. math:: p(x) = x^{k-1}\\frac{e^{-x/\\theta}}{\\theta^k\\Gamma(k)},\n\nwhere :math:`k` is the shape and :math:`\\theta` the scale,\nand :math:`\\Gamma` is the Gamma function.\n\nThe Gamma distribution is often used to model the times to failure of\nelectronic components, and arises naturally in processes for which the\nwaiting times between Poisson distributed events are relevant.\n\nReferences\n----------\n.. [1] Weisstein, Eric W. \"Gamma Distribution.\" From MathWorld--A\n       Wolfram Web Resource.\n       http://mathworld.wolfram.com/GammaDistribution.html\n.. [2] Wikipedia, \"Gamma distribution\",\n       https://en.wikipedia.org/wiki/Gamma_distribution\n\nExamples\n--------\nDraw samples from the distribution:\n\n>>> shape, scale = 2., 1. # mean and width\n>>> s = np.random.default_rng().standard_gamma(shape, 1000000)\n\nDisplay the histogram of the samples, along with\nthe probability density function:\n\n>>> import matplotlib.pyplot as plt\n>>> import scipy.special as sps  # doctest: +SKIP\n>>> count, bins, ignored = plt.hist(s, 50, density=True)\n>>> y = bins**(shape-1) * ((np.exp(-bins/scale))/  # doctest: +SKIP\n...                       (sps.gamma(shape) * scale**shape))\n>>> plt.plot(bins, y, linewidth=2, color='r')  # doctest: +SKIP\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "cf4995359fac1bfc3bc85ba8c3e3c558251e08b861c737b3d7882c109aa7df21",
            "fields": [
                {
                    "name": "shape",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     Parameter, must be non-negative. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  If size is ``None`` (default),     a single value is returned if ``shape`` is a scalar.  Otherwise,     ``np.array(shape).size`` samples are drawn. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dtype",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "dtype, optional     Desired dtype of the result, only `float64` and `float32` are supported.     Byteorder must be native. The default value is np.float64. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "out",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "ndarray, optional     Alternative output array in which to place the result. If size is     not None, it must have the same shape as the provided size and     must match the type of the output values. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.Generator.standard_gamma",
                    "defaultValue": "numpy.random.Generator.standard_gamma",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Generator.standard_normal",
            "description": "\nDraw samples from a standard Normal distribution (mean=0, stdev=1).\n\nParameters\n----------\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  Default is None, in which case a\n    single value is returned.\ndtype : dtype, optional\n    Desired dtype of the result, only `float64` and `float32` are supported.\n    Byteorder must be native. The default value is np.float64.\nout : ndarray, optional\n    Alternative output array in which to place the result. If size is not None,\n    it must have the same shape as the provided size and must match the type of\n    the output values.\n\nReturns\n-------\nout : float or ndarray\n    A floating-point array of shape ``size`` of drawn samples, or a\n    single sample if ``size`` was not specified.\n\nSee Also\n--------\nnormal :\n    Equivalent function with additional ``loc`` and ``scale`` arguments\n    for setting the mean and standard deviation.\n\nNotes\n-----\nFor random samples from :math:`N(\\mu, \\sigma^2)`, use one of::\n\n    mu + sigma * rng.standard_normal(size=...)\n    rng.normal(mu, sigma, size=...)\n\nExamples\n--------\n>>> rng = np.random.default_rng()\n>>> rng.standard_normal()\n2.1923875335537315 # random\n\n>>> s = rng.standard_normal(8000)\n>>> s\narray([ 0.6888893 ,  0.78096262, -0.89086505, ...,  0.49876311,  # random\n       -0.38672696, -0.4685006 ])                                # random\n>>> s.shape\n(8000,)\n>>> s = rng.standard_normal(size=(3, 4, 2))\n>>> s.shape\n(3, 4, 2)\n\nTwo-by-four array of samples from :math:`N(3, 6.25)`:\n\n>>> 3 + 2.5 * rng.standard_normal(size=(2, 4))\narray([[-4.49401501,  4.00950034, -1.81814867,  7.29718677],   # random\n       [ 0.39924804,  4.68456316,  4.99394529,  4.84057254]])  # random",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f54af81c9129f77de02d7319ff2bcd0ec150630958fdc3a910ddf782c3cde7f7",
            "fields": [
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  Default is None, in which case a     single value is returned. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dtype",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "dtype, optional     Desired dtype of the result, only `float64` and `float32` are supported.     Byteorder must be native. The default value is np.float64. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "out",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "ndarray, optional     Alternative output array in which to place the result. If size is not None,     it must have the same shape as the provided size and must match the type of     the output values. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.Generator.standard_normal",
                    "defaultValue": "numpy.random.Generator.standard_normal",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Generator.standard_t",
            "description": "\nDraw samples from a standard Student's t distribution with `df` degrees\nof freedom.\n\nA special case of the hyperbolic distribution.  As `df` gets\nlarge, the result resembles that of the standard normal\ndistribution (`standard_normal`).\n\nParameters\n----------\ndf : float or array_like of floats\n    Degrees of freedom, must be > 0.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``df`` is a scalar.  Otherwise,\n    ``np.array(df).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized standard Student's t distribution.\n\nNotes\n-----\nThe probability density function for the t distribution is\n\n.. math:: P(x, df) = \\frac{\\Gamma(\\frac{df+1}{2})}{\\sqrt{\\pi df}\n          \\Gamma(\\frac{df}{2})}\\Bigl( 1+\\frac{x^2}{df} \\Bigr)^{-(df+1)/2}\n\nThe t test is based on an assumption that the data come from a\nNormal distribution. The t test provides a way to test whether\nthe sample mean (that is the mean calculated from the data) is\na good estimate of the true mean.\n\nThe derivation of the t-distribution was first published in\n1908 by William Gosset while working for the Guinness Brewery\nin Dublin. Due to proprietary issues, he had to publish under\na pseudonym, and so he used the name Student.\n\nReferences\n----------\n.. [1] Dalgaard, Peter, \"Introductory Statistics With R\",\n       Springer, 2002.\n.. [2] Wikipedia, \"Student's t-distribution\"\n       https://en.wikipedia.org/wiki/Student's_t-distribution\n\nExamples\n--------\nFrom Dalgaard page 83 [1]_, suppose the daily energy intake for 11\nwomen in kilojoules (kJ) is:\n\n>>> intake = np.array([5260., 5470, 5640, 6180, 6390, 6515, 6805, 7515, \\\n...                    7515, 8230, 8770])\n\nDoes their energy intake deviate systematically from the recommended\nvalue of 7725 kJ? Our null hypothesis will be the absence of deviation,\nand the alternate hypothesis will be the presence of an effect that could be\neither positive or negative, hence making our test 2-tailed. \n\nBecause we are estimating the mean and we have N=11 values in our sample,\nwe have N-1=10 degrees of freedom. We set our significance level to 95% and \ncompute the t statistic using the empirical mean and empirical standard \ndeviation of our intake. We use a ddof of 1 to base the computation of our \nempirical standard deviation on an unbiased estimate of the variance (note:\nthe final estimate is not unbiased due to the concave nature of the square \nroot).\n\n>>> np.mean(intake)\n6753.636363636364\n>>> intake.std(ddof=1)\n1142.1232221373727\n>>> t = (np.mean(intake)-7725)/(intake.std(ddof=1)/np.sqrt(len(intake)))\n>>> t\n-2.8207540608310198\n\nWe draw 1000000 samples from Student's t distribution with the adequate\ndegrees of freedom.\n\n>>> import matplotlib.pyplot as plt\n>>> s = np.random.default_rng().standard_t(10, size=1000000)\n>>> h = plt.hist(s, bins=100, density=True)\n\nDoes our t statistic land in one of the two critical regions found at \nboth tails of the distribution?\n\n>>> np.sum(np.abs(t) < np.abs(s)) / float(len(s))\n0.018318  #random < 0.05, statistic is in critical region\n\nThe probability value for this 2-tailed test is about 1.83%, which is \nlower than the 5% pre-determined significance threshold. \n\nTherefore, the probability of observing values as extreme as our intake\nconditionally on the null hypothesis being true is too low, and we reject \nthe null hypothesis of no deviation. ",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "26eab66cbe77df7335997b6d4409789198a2a84c75e0e5a9d8772990de25d33e",
            "fields": [
                {
                    "name": "df",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     Degrees of freedom, must be > 0. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  If size is ``None`` (default),     a single value is returned if ``df`` is a scalar.  Otherwise,     ``np.array(df).size`` samples are drawn. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.Generator.standard_t",
                    "defaultValue": "numpy.random.Generator.standard_t",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Generator.triangular",
            "description": "\nDraw samples from the triangular distribution over the\ninterval ``[left, right]``.\n\nThe triangular distribution is a continuous probability\ndistribution with lower limit left, peak at mode, and upper\nlimit right. Unlike the other distributions, these parameters\ndirectly define the shape of the pdf.\n\nParameters\n----------\nleft : float or array_like of floats\n    Lower limit.\nmode : float or array_like of floats\n    The value where the peak of the distribution occurs.\n    The value must fulfill the condition ``left <= mode <= right``.\nright : float or array_like of floats\n    Upper limit, must be larger than `left`.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``left``, ``mode``, and ``right``\n    are all scalars.  Otherwise, ``np.broadcast(left, mode, right).size``\n    samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized triangular distribution.\n\nNotes\n-----\nThe probability density function for the triangular distribution is\n\n.. math:: P(x;l, m, r) = \\begin{cases}\n          \\frac{2(x-l)}{(r-l)(m-l)}& \\text{for $l \\leq x \\leq m$},\\\\\n          \\frac{2(r-x)}{(r-l)(r-m)}& \\text{for $m \\leq x \\leq r$},\\\\\n          0& \\text{otherwise}.\n          \\end{cases}\n\nThe triangular distribution is often used in ill-defined\nproblems where the underlying distribution is not known, but\nsome knowledge of the limits and mode exists. Often it is used\nin simulations.\n\nReferences\n----------\n.. [1] Wikipedia, \"Triangular distribution\"\n       https://en.wikipedia.org/wiki/Triangular_distribution\n\nExamples\n--------\nDraw values from the distribution and plot the histogram:\n\n>>> import matplotlib.pyplot as plt\n>>> h = plt.hist(np.random.default_rng().triangular(-3, 0, 8, 100000), bins=200,\n...              density=True)\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b44f9049de8aa2efedef127fd567d6af547f896b12096bc1bac8f2be4b96e90d",
            "fields": [
                {
                    "name": "left",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     Lower limit. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mode",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     The value where the peak of the distribution occurs.     The value must fulfill the condition ``left <= mode <= right``. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "right",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     Upper limit, must be larger than `left`. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  If size is ``None`` (default),     a single value is returned if ``left``, ``mode``, and ``right``     are all scalars.  Otherwise, ``np.broadcast(left, mode, right).size``     samples are drawn. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.Generator.triangular",
                    "defaultValue": "numpy.random.Generator.triangular",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Generator.uniform",
            "description": "\nDraw samples from a uniform distribution.\n\nSamples are uniformly distributed over the half-open interval\n``[low, high)`` (includes low, but excludes high).  In other words,\nany value within the given interval is equally likely to be drawn\nby `uniform`.\n\nParameters\n----------\nlow : float or array_like of floats, optional\n    Lower boundary of the output interval.  All values generated will be\n    greater than or equal to low.  The default value is 0.\nhigh : float or array_like of floats\n    Upper boundary of the output interval.  All values generated will be\n    less than high.  The high limit may be included in the returned array of \n    floats due to floating-point rounding in the equation \n    ``low + (high-low) * random_sample()``.  high - low must be \n    non-negative.  The default value is 1.0.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``low`` and ``high`` are both scalars.\n    Otherwise, ``np.broadcast(low, high).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized uniform distribution.\n\nSee Also\n--------\nintegers : Discrete uniform distribution, yielding integers.\nrandom : Floats uniformly distributed over ``[0, 1)``.\n\nNotes\n-----\nThe probability density function of the uniform distribution is\n\n.. math:: p(x) = \\frac{1}{b - a}\n\nanywhere within the interval ``[a, b)``, and zero elsewhere.\n\nWhen ``high`` == ``low``, values of ``low`` will be returned.\n\nExamples\n--------\nDraw samples from the distribution:\n\n>>> s = np.random.default_rng().uniform(-1,0,1000)\n\nAll values are within the given interval:\n\n>>> np.all(s >= -1)\nTrue\n>>> np.all(s < 0)\nTrue\n\nDisplay the histogram of the samples, along with the\nprobability density function:\n\n>>> import matplotlib.pyplot as plt\n>>> count, bins, ignored = plt.hist(s, 15, density=True)\n>>> plt.plot(bins, np.ones_like(bins), linewidth=2, color='r')\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f3ec790fcdc0dea2bbb8f3ab7012d72f0e4060d1538a10717b4f4d1650ad9946",
            "fields": [
                {
                    "name": "low",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats, optional     Lower boundary of the output interval.  All values generated will be     greater than or equal to low.  The default value is 0. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "high",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     Upper boundary of the output interval.  All values generated will be     less than high.  The high limit may be included in the returned array of      floats due to floating-point rounding in the equation      ``low + (high-low) * random_sample()``.  high - low must be      non-negative.  The default value is 1.0. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  If size is ``None`` (default),     a single value is returned if ``low`` and ``high`` are both scalars.     Otherwise, ``np.broadcast(low, high).size`` samples are drawn. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.Generator.uniform",
                    "defaultValue": "numpy.random.Generator.uniform",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Generator.vonmises",
            "description": "\nDraw samples from a von Mises distribution.\n\nSamples are drawn from a von Mises distribution with specified mode\n(mu) and dispersion (kappa), on the interval [-pi, pi].\n\nThe von Mises distribution (also known as the circular normal\ndistribution) is a continuous probability distribution on the unit\ncircle.  It may be thought of as the circular analogue of the normal\ndistribution.\n\nParameters\n----------\nmu : float or array_like of floats\n    Mode (\"center\") of the distribution.\nkappa : float or array_like of floats\n    Dispersion of the distribution, has to be >=0.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``mu`` and ``kappa`` are both scalars.\n    Otherwise, ``np.broadcast(mu, kappa).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized von Mises distribution.\n\nSee Also\n--------\nscipy.stats.vonmises : probability density function, distribution, or\n    cumulative density function, etc.\n\nNotes\n-----\nThe probability density for the von Mises distribution is\n\n.. math:: p(x) = \\frac{e^{\\kappa cos(x-\\mu)}}{2\\pi I_0(\\kappa)},\n\nwhere :math:`\\mu` is the mode and :math:`\\kappa` the dispersion,\nand :math:`I_0(\\kappa)` is the modified Bessel function of order 0.\n\nThe von Mises is named for Richard Edler von Mises, who was born in\nAustria-Hungary, in what is now the Ukraine.  He fled to the United\nStates in 1939 and became a professor at Harvard.  He worked in\nprobability theory, aerodynamics, fluid mechanics, and philosophy of\nscience.\n\nReferences\n----------\n.. [1] Abramowitz, M. and Stegun, I. A. (Eds.). \"Handbook of\n       Mathematical Functions with Formulas, Graphs, and Mathematical\n       Tables, 9th printing,\" New York: Dover, 1972.\n.. [2] von Mises, R., \"Mathematical Theory of Probability\n       and Statistics\", New York: Academic Press, 1964.\n\nExamples\n--------\nDraw samples from the distribution:\n\n>>> mu, kappa = 0.0, 4.0 # mean and dispersion\n>>> s = np.random.default_rng().vonmises(mu, kappa, 1000)\n\nDisplay the histogram of the samples, along with\nthe probability density function:\n\n>>> import matplotlib.pyplot as plt\n>>> from scipy.special import i0  # doctest: +SKIP\n>>> plt.hist(s, 50, density=True)\n>>> x = np.linspace(-np.pi, np.pi, num=51)\n>>> y = np.exp(kappa*np.cos(x-mu))/(2*np.pi*i0(kappa))  # doctest: +SKIP\n>>> plt.plot(x, y, linewidth=2, color='r')  # doctest: +SKIP\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b9fc82bc372f4d8333d5419ce8d281957e53d0593184d8c0f97311616e1f57b2",
            "fields": [
                {
                    "name": "mu",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     Mode (\"center\") of the distribution. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "kappa",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     Dispersion of the distribution, has to be >=0. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  If size is ``None`` (default),     a single value is returned if ``mu`` and ``kappa`` are both scalars.     Otherwise, ``np.broadcast(mu, kappa).size`` samples are drawn. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.Generator.vonmises",
                    "defaultValue": "numpy.random.Generator.vonmises",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Generator.wald",
            "description": "\nDraw samples from a Wald, or inverse Gaussian, distribution.\n\nAs the scale approaches infinity, the distribution becomes more like a\nGaussian. Some references claim that the Wald is an inverse Gaussian\nwith mean equal to 1, but this is by no means universal.\n\nThe inverse Gaussian distribution was first studied in relationship to\nBrownian motion. In 1956 M.C.K. Tweedie used the name inverse Gaussian\nbecause there is an inverse relationship between the time to cover a\nunit distance and distance covered in unit time.\n\nParameters\n----------\nmean : float or array_like of floats\n    Distribution mean, must be > 0.\nscale : float or array_like of floats\n    Scale parameter, must be > 0.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``mean`` and ``scale`` are both scalars.\n    Otherwise, ``np.broadcast(mean, scale).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized Wald distribution.\n\nNotes\n-----\nThe probability density function for the Wald distribution is\n\n.. math:: P(x;mean,scale) = \\sqrt{\\frac{scale}{2\\pi x^3}}e^\n                            \\frac{-scale(x-mean)^2}{2\\cdotp mean^2x}\n\nAs noted above the inverse Gaussian distribution first arise\nfrom attempts to model Brownian motion. It is also a\ncompetitor to the Weibull for use in reliability modeling and\nmodeling stock returns and interest rate processes.\n\nReferences\n----------\n.. [1] Brighton Webs Ltd., Wald Distribution,\n       https://web.archive.org/web/20090423014010/http://www.brighton-webs.co.uk:80/distributions/wald.asp\n.. [2] Chhikara, Raj S., and Folks, J. Leroy, \"The Inverse Gaussian\n       Distribution: Theory : Methodology, and Applications\", CRC Press,\n       1988.\n.. [3] Wikipedia, \"Inverse Gaussian distribution\"\n       https://en.wikipedia.org/wiki/Inverse_Gaussian_distribution\n\nExamples\n--------\nDraw values from the distribution and plot the histogram:\n\n>>> import matplotlib.pyplot as plt\n>>> h = plt.hist(np.random.default_rng().wald(3, 2, 100000), bins=200, density=True)\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a2a575a9a4e2e63b7c7b7c00096611da81b5874cec4c2919c38c171ea07a7231",
            "fields": [
                {
                    "name": "mean",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     Distribution mean, must be > 0. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "scale",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     Scale parameter, must be > 0. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  If size is ``None`` (default),     a single value is returned if ``mean`` and ``scale`` are both scalars.     Otherwise, ``np.broadcast(mean, scale).size`` samples are drawn. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.Generator.wald",
                    "defaultValue": "numpy.random.Generator.wald",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Generator.weibull",
            "description": "\nDraw samples from a Weibull distribution.\n\nDraw samples from a 1-parameter Weibull distribution with the given\nshape parameter `a`.\n\n.. math:: X = (-ln(U))^{1/a}\n\nHere, U is drawn from the uniform distribution over (0,1].\n\nThe more common 2-parameter Weibull, including a scale parameter\n:math:`\\lambda` is just :math:`X = \\lambda(-ln(U))^{1/a}`.\n\nParameters\n----------\na : float or array_like of floats\n    Shape parameter of the distribution.  Must be nonnegative.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``a`` is a scalar.  Otherwise,\n    ``np.array(a).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized Weibull distribution.\n\nSee Also\n--------\nscipy.stats.weibull_max\nscipy.stats.weibull_min\nscipy.stats.genextreme\ngumbel\n\nNotes\n-----\nThe Weibull (or Type III asymptotic extreme value distribution\nfor smallest values, SEV Type III, or Rosin-Rammler\ndistribution) is one of a class of Generalized Extreme Value\n(GEV) distributions used in modeling extreme value problems.\nThis class includes the Gumbel and Frechet distributions.\n\nThe probability density for the Weibull distribution is\n\n.. math:: p(x) = \\frac{a}\n                 {\\lambda}(\\frac{x}{\\lambda})^{a-1}e^{-(x/\\lambda)^a},\n\nwhere :math:`a` is the shape and :math:`\\lambda` the scale.\n\nThe function has its peak (the mode) at\n:math:`\\lambda(\\frac{a-1}{a})^{1/a}`.\n\nWhen ``a = 1``, the Weibull distribution reduces to the exponential\ndistribution.\n\nReferences\n----------\n.. [1] Waloddi Weibull, Royal Technical University, Stockholm,\n       1939 \"A Statistical Theory Of The Strength Of Materials\",\n       Ingeniorsvetenskapsakademiens Handlingar Nr 151, 1939,\n       Generalstabens Litografiska Anstalts Forlag, Stockholm.\n.. [2] Waloddi Weibull, \"A Statistical Distribution Function of\n       Wide Applicability\", Journal Of Applied Mechanics ASME Paper\n       1951.\n.. [3] Wikipedia, \"Weibull distribution\",\n       https://en.wikipedia.org/wiki/Weibull_distribution\n\nExamples\n--------\nDraw samples from the distribution:\n\n>>> rng = np.random.default_rng()\n>>> a = 5. # shape\n>>> s = rng.weibull(a, 1000)\n\nDisplay the histogram of the samples, along with\nthe probability density function:\n\n>>> import matplotlib.pyplot as plt\n>>> x = np.arange(1,100.)/50.\n>>> def weib(x,n,a):\n...     return (a / n) * (x / n)**(a - 1) * np.exp(-(x / n)**a)\n\n>>> count, bins, ignored = plt.hist(rng.weibull(5.,1000))\n>>> x = np.arange(1,100.)/50.\n>>> scale = count.max()/weib(x, 1., 5.).max()\n>>> plt.plot(x, weib(x, 1., 5.)*scale)\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "229252bceeca9eb012ffca005078db63a1170fcbe8c05641dd616e4fea66c521",
            "fields": [
                {
                    "name": "a",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     Shape parameter of the distribution.  Must be nonnegative. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  If size is ``None`` (default),     a single value is returned if ``a`` is a scalar.  Otherwise,     ``np.array(a).size`` samples are drawn. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.Generator.weibull",
                    "defaultValue": "numpy.random.Generator.weibull",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Generator.zipf",
            "description": "\nDraw samples from a Zipf distribution.\n\nSamples are drawn from a Zipf distribution with specified parameter\n`a` > 1.\n\nThe Zipf distribution (also known as the zeta distribution) is a\ndiscrete probability distribution that satisfies Zipf's law: the\nfrequency of an item is inversely proportional to its rank in a\nfrequency table.\n\nParameters\n----------\na : float or array_like of floats\n    Distribution parameter. Must be greater than 1.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``a`` is a scalar. Otherwise,\n    ``np.array(a).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized Zipf distribution.\n\nSee Also\n--------\nscipy.stats.zipf : probability density function, distribution, or\n    cumulative density function, etc.\n\nNotes\n-----\nThe probability density for the Zipf distribution is\n\n.. math:: p(k) = \\frac{k^{-a}}{\\zeta(a)},\n\nfor integers :math:`k \\geq 1`, where :math:`\\zeta` is the Riemann Zeta\nfunction.\n\nIt is named for the American linguist George Kingsley Zipf, who noted\nthat the frequency of any word in a sample of a language is inversely\nproportional to its rank in the frequency table.\n\nReferences\n----------\n.. [1] Zipf, G. K., \"Selected Studies of the Principle of Relative\n       Frequency in Language,\" Cambridge, MA: Harvard Univ. Press,\n       1932.\n\nExamples\n--------\nDraw samples from the distribution:\n\n>>> a = 4.0\n>>> n = 20000\n>>> s = np.random.default_rng().zipf(a, size=n)\n\nDisplay the histogram of the samples, along with\nthe expected histogram based on the probability\ndensity function:\n\n>>> import matplotlib.pyplot as plt\n>>> from scipy.special import zeta  # doctest: +SKIP\n\n`bincount` provides a fast histogram for small integers.\n\n>>> count = np.bincount(s)\n>>> k = np.arange(1, s.max() + 1)\n\n>>> plt.bar(k, count[1:], alpha=0.5, label='sample count')\n>>> plt.plot(k, n*(k**-a)/zeta(a), 'k.-', alpha=0.5,\n...          label='expected count')   # doctest: +SKIP\n>>> plt.semilogy()\n>>> plt.grid(alpha=0.4)\n>>> plt.legend()\n>>> plt.title(f'Zipf sample, a={a}, size={n}')\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "93cbe68d6049b112e3fa863d27c83f0f41e82cbf144cf457cb38baf0d94fe9b5",
            "fields": [
                {
                    "name": "a",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     Distribution parameter. Must be greater than 1. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  If size is ``None`` (default),     a single value is returned if ``a`` is a scalar. Otherwise,     ``np.array(a).size`` samples are drawn. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.Generator.zipf",
                    "defaultValue": "numpy.random.Generator.zipf",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "MT19937.__init__",
            "description": "No description found\nMT19937(seed=None)\n    \n    Container for the Mersenne Twister pseudo-random number generator.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b9470bfd052c7a341caaba2f60173f50f2ad35cb477e1f08d619eef119b797f9",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to object",
                    "type": "numpy.random.MT19937",
                    "parameterType": "ApplicationArgument",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": true
                },
                {
                    "name": "args",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "kwargs",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.MT19937.__init__",
                    "defaultValue": "numpy.random.MT19937.__init__",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "MT19937.jumped",
            "description": "\nReturns a new bit generator with the state jumped\n\nThe state of the returned bit generator is jumped as-if\n2**(128 * jumps) random numbers have been generated.\n\nParameters\n----------\njumps : integer, positive\n    Number of times to jump the state of the bit generator returned\n\nReturns\n-------\nbit_generator : MT19937\n    New instance of generator jumped iter times\n\nNotes\n-----\nThe jump step is computed using a modified version of Matsumoto's\nimplementation of Horner's method. The step polynomial is precomputed\nto perform 2**128 steps. The jumped state has been verified to match\nthe state produced using Matsumoto's original code.\n\nReferences\n----------\n.. [1] Matsumoto, M, Generating multiple disjoint streams of\n   pseudorandom number sequences.  Accessed on: May 6, 2020.\n   http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/JUMP/\n.. [2] Hiroshi Haramoto, Makoto Matsumoto, Takuji Nishimura, Fran\u00e7ois\n   Panneton, Pierre L'Ecuyer, \"Efficient Jump Ahead for F2-Linear\n   Random Number Generators\", INFORMS JOURNAL ON COMPUTING, Vol. 20,\n   No. 3, Summer 2008, pp. 385-390.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4755022c13d06c7dd43c1eaa9c4aec8805083107df0708d693cc6b924ffae917",
            "fields": [
                {
                    "name": "jumps",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "integer, positive     Number of times to jump the state of the bit generator returned ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.MT19937.jumped",
                    "defaultValue": "numpy.random.MT19937.jumped",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "PCG64.__init__",
            "description": "No description found\nPCG64(seed=None)\n    \n    BitGenerator for the PCG-64 pseudo-random number generator.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "33c532c29fb7979428922214fc45b33ac3aeb67a31371cfe5d018d922959eecf",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to object",
                    "type": "numpy.random.PCG64",
                    "parameterType": "ApplicationArgument",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": true
                },
                {
                    "name": "args",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "kwargs",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.PCG64.__init__",
                    "defaultValue": "numpy.random.PCG64.__init__",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "PCG64.advance",
            "description": "\nAdvance the underlying RNG as-if delta draws have occurred.\n\nParameters\n----------\ndelta : integer, positive\n    Number of draws to advance the RNG. Must be less than the\n    size state variable in the underlying RNG.\n\nReturns\n-------\nself : PCG64\n    RNG advanced delta steps\n\nNotes\n-----\nAdvancing a RNG updates the underlying RNG state as-if a given\nnumber of calls to the underlying RNG have been made. In general\nthere is not a one-to-one relationship between the number output\nrandom values from a particular distribution and the number of\ndraws from the core RNG.  This occurs for two reasons:\n\n* The random values are simulated using a rejection-based method\n  and so, on average, more than one value from the underlying\n  RNG is required to generate an single draw.\n* The number of bits required to generate a simulated value\n  differs from the number of bits generated by the underlying\n  RNG.  For example, two 16-bit integer values can be simulated\n  from a single draw of a 32-bit RNG.\n\nAdvancing the RNG state resets any pre-computed random numbers.\nThis is required to ensure exact reproducibility.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "86a1cb3b00b24559a8772f3305e4ffb6b83b6bcce5e8e6c4cad68a3d6678b9e1",
            "fields": [
                {
                    "name": "delta",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "integer, positive     Number of draws to advance the RNG. Must be less than the     size state variable in the underlying RNG. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.PCG64.advance",
                    "defaultValue": "numpy.random.PCG64.advance",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "PCG64.jumped",
            "description": "\nReturns a new bit generator with the state jumped.\n\nJumps the state as-if jumps * 210306068529402873165736369884012333109\nrandom numbers have been generated.\n\nParameters\n----------\njumps : integer, positive\n    Number of times to jump the state of the bit generator returned\n\nReturns\n-------\nbit_generator : PCG64\n    New instance of generator jumped iter times\n\nNotes\n-----\nThe step size is phi-1 when multiplied by 2**128 where phi is the\ngolden ratio.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "13c14e4f45c755243fcf55a57ff2814e14e8f67e2021de56000d91426ad6cefa",
            "fields": [
                {
                    "name": "jumps",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "integer, positive     Number of times to jump the state of the bit generator returned ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.PCG64.jumped",
                    "defaultValue": "numpy.random.PCG64.jumped",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "PCG64DXSM.__init__",
            "description": "No description found\nPCG64DXSM(seed=None)\n    \n    BitGenerator for the PCG-64 DXSM pseudo-random number generator.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "bfbbe3306b11b149d30308af2285dcda5c1cfb553a1856ad3018ccb6a922e153",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to object",
                    "type": "numpy.random.PCG64DXSM",
                    "parameterType": "ApplicationArgument",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": true
                },
                {
                    "name": "args",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "kwargs",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.PCG64DXSM.__init__",
                    "defaultValue": "numpy.random.PCG64DXSM.__init__",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "PCG64DXSM.advance",
            "description": "\nAdvance the underlying RNG as-if delta draws have occurred.\n\nParameters\n----------\ndelta : integer, positive\n    Number of draws to advance the RNG. Must be less than the\n    size state variable in the underlying RNG.\n\nReturns\n-------\nself : PCG64\n    RNG advanced delta steps\n\nNotes\n-----\nAdvancing a RNG updates the underlying RNG state as-if a given\nnumber of calls to the underlying RNG have been made. In general\nthere is not a one-to-one relationship between the number output\nrandom values from a particular distribution and the number of\ndraws from the core RNG.  This occurs for two reasons:\n\n* The random values are simulated using a rejection-based method\n  and so, on average, more than one value from the underlying\n  RNG is required to generate an single draw.\n* The number of bits required to generate a simulated value\n  differs from the number of bits generated by the underlying\n  RNG.  For example, two 16-bit integer values can be simulated\n  from a single draw of a 32-bit RNG.\n\nAdvancing the RNG state resets any pre-computed random numbers.\nThis is required to ensure exact reproducibility.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "cf213100abd9136e99a6fe21af2360ee7b3be4f3f5ea3c352038dd9c2b8c3057",
            "fields": [
                {
                    "name": "delta",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "integer, positive     Number of draws to advance the RNG. Must be less than the     size state variable in the underlying RNG. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.PCG64DXSM.advance",
                    "defaultValue": "numpy.random.PCG64DXSM.advance",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "PCG64DXSM.jumped",
            "description": "\nReturns a new bit generator with the state jumped.\n\nJumps the state as-if jumps * 210306068529402873165736369884012333109\nrandom numbers have been generated.\n\nParameters\n----------\njumps : integer, positive\n    Number of times to jump the state of the bit generator returned\n\nReturns\n-------\nbit_generator : PCG64DXSM\n    New instance of generator jumped iter times\n\nNotes\n-----\nThe step size is phi-1 when multiplied by 2**128 where phi is the\ngolden ratio.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a2b6f052b74c5671a2082c95b1ad3b8f83c40717f325cec2ccc694501511a050",
            "fields": [
                {
                    "name": "jumps",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "integer, positive     Number of times to jump the state of the bit generator returned ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.PCG64DXSM.jumped",
                    "defaultValue": "numpy.random.PCG64DXSM.jumped",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Philox.__init__",
            "description": "No description found\nPhilox(seed=None, counter=None, key=None)\n    \n    Container for the Philox (4x64) pseudo-random number generator.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6444069f06b1b5dc95da08e82f124219019b6f41d9dfe6a9feab9c038ea51e4e",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to object",
                    "type": "numpy.random.Philox",
                    "parameterType": "ApplicationArgument",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": true
                },
                {
                    "name": "args",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "kwargs",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.Philox.__init__",
                    "defaultValue": "numpy.random.Philox.__init__",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Philox.advance",
            "description": "\nAdvance the underlying RNG as-if delta draws have occurred.\n\nParameters\n----------\ndelta : integer, positive\n    Number of draws to advance the RNG. Must be less than the\n    size state variable in the underlying RNG.\n\nReturns\n-------\nself : Philox\n    RNG advanced delta steps\n\nNotes\n-----\nAdvancing a RNG updates the underlying RNG state as-if a given\nnumber of calls to the underlying RNG have been made. In general\nthere is not a one-to-one relationship between the number output\nrandom values from a particular distribution and the number of\ndraws from the core RNG.  This occurs for two reasons:\n\n* The random values are simulated using a rejection-based method\n  and so, on average, more than one value from the underlying\n  RNG is required to generate an single draw.\n* The number of bits required to generate a simulated value\n  differs from the number of bits generated by the underlying\n  RNG.  For example, two 16-bit integer values can be simulated\n  from a single draw of a 32-bit RNG.\n\nAdvancing the RNG state resets any pre-computed random numbers.\nThis is required to ensure exact reproducibility.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1fc0a5bcd61c889944aa44c9fdc4ba3d1abe35f56cff7fb5592ffa8b17e299b3",
            "fields": [
                {
                    "name": "delta",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "integer, positive     Number of draws to advance the RNG. Must be less than the     size state variable in the underlying RNG. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.Philox.advance",
                    "defaultValue": "numpy.random.Philox.advance",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Philox.jumped",
            "description": "\nReturns a new bit generator with the state jumped\n\nThe state of the returned bit generator is jumped as-if\n(2**128) * jumps random numbers have been generated.\n\nParameters\n----------\njumps : integer, positive\n    Number of times to jump the state of the bit generator returned\n\nReturns\n-------\nbit_generator : Philox\n    New instance of generator jumped iter times",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "12071de08494287c2774ed3d1219b6e8ae506b1e42e6647b8bedb44c139bb9bc",
            "fields": [
                {
                    "name": "jumps",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "integer, positive     Number of times to jump the state of the bit generator returned ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.Philox.jumped",
                    "defaultValue": "numpy.random.Philox.jumped",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "RandomState.__init__",
            "description": "No description found\nRandomState(seed=None)\n    \n    Container for the slow Mersenne Twister pseudo-random number generator.\n    Consider using a different BitGenerator with the Generator container\n    instead.\n    \n    `RandomState` and `Generator` expose a number of methods for generating\n    random numbers drawn from a variety of probability distributions. In\n    addition to the distribution-specific arguments, each method takes a\n    keyword argument `size` that defaults to ``None``. If `size` is ``None``,\n    then a single value is generated and returned. If `size` is an integer,\n    then a 1-D array filled with generated values is returned. If `size` is a\n    tuple, then an array with that shape is filled and returned.\n    \n    **Compatibility Guarantee**\n    \n    A fixed bit generator using a fixed seed and a fixed series of calls to\n    'RandomState' methods using the same parameters will always produce the\n    same results up to roundoff error except when the values were incorrect.\n    `RandomState` is effectively frozen and will only receive updates that\n    are required by changes in the the internals of Numpy. More substantial\n    changes, including algorithmic improvements, are reserved for\n    `Generator`.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2a43a5a34e72a20ef135249f94ecbaf5cb8829406ac8b23698288382e7ad4d19",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to object",
                    "type": "numpy.random.RandomState",
                    "parameterType": "ApplicationArgument",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": true
                },
                {
                    "name": "args",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "kwargs",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.__init__",
                    "defaultValue": "numpy.random.RandomState.__init__",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "RandomState.beta",
            "description": "\nDraw samples from a Beta distribution.\n\nThe Beta distribution is a special case of the Dirichlet distribution,\nand is related to the Gamma distribution.  It has the probability\ndistribution function\n\n.. math:: f(x; a,b) = \\frac{1}{B(\\alpha, \\beta)} x^{\\alpha - 1}\n                                                 (1 - x)^{\\beta - 1},\n\nwhere the normalization, B, is the beta function,\n\n.. math:: B(\\alpha, \\beta) = \\int_0^1 t^{\\alpha - 1}\n                             (1 - t)^{\\beta - 1} dt.\n\nIt is often seen in Bayesian inference and order statistics.\n\n.. note::\n    New code should use the ``beta`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\na : float or array_like of floats\n    Alpha, positive (>0).\nb : float or array_like of floats\n    Beta, positive (>0).\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``a`` and ``b`` are both scalars.\n    Otherwise, ``np.broadcast(a, b).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized beta distribution.\n\nSee Also\n--------\nrandom.Generator.beta: which should be used for new code.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1cf045b07f348f7297a40ba155f932b9a0f632ca409149625d45669323714b84",
            "fields": [
                {
                    "name": "a",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     Alpha, positive (>0). ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "b",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     Beta, positive (>0). ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  If size is ``None`` (default),     a single value is returned if ``a`` and ``b`` are both scalars.     Otherwise, ``np.broadcast(a, b).size`` samples are drawn. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.beta",
                    "defaultValue": "numpy.random.RandomState.beta",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "RandomState.binomial",
            "description": "\nDraw samples from a binomial distribution.\n\nSamples are drawn from a binomial distribution with specified\nparameters, n trials and p probability of success where\nn an integer >= 0 and p is in the interval [0,1]. (n may be\ninput as a float, but it is truncated to an integer in use)\n\n.. note::\n    New code should use the ``binomial`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\nn : int or array_like of ints\n    Parameter of the distribution, >= 0. Floats are also accepted,\n    but they will be truncated to integers.\np : float or array_like of floats\n    Parameter of the distribution, >= 0 and <=1.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``n`` and ``p`` are both scalars.\n    Otherwise, ``np.broadcast(n, p).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized binomial distribution, where\n    each sample is equal to the number of successes over the n trials.\n\nSee Also\n--------\nscipy.stats.binom : probability density function, distribution or\n    cumulative density function, etc.\nrandom.Generator.binomial: which should be used for new code.\n\nNotes\n-----\nThe probability density for the binomial distribution is\n\n.. math:: P(N) = \\binom{n}{N}p^N(1-p)^{n-N},\n\nwhere :math:`n` is the number of trials, :math:`p` is the probability\nof success, and :math:`N` is the number of successes.\n\nWhen estimating the standard error of a proportion in a population by\nusing a random sample, the normal distribution works well unless the\nproduct p*n <=5, where p = population proportion estimate, and n =\nnumber of samples, in which case the binomial distribution is used\ninstead. For example, a sample of 15 people shows 4 who are left\nhanded, and 11 who are right handed. Then p = 4/15 = 27%. 0.27*15 = 4,\nso the binomial distribution should be used in this case.\n\nReferences\n----------\n.. [1] Dalgaard, Peter, \"Introductory Statistics with R\",\n       Springer-Verlag, 2002.\n.. [2] Glantz, Stanton A. \"Primer of Biostatistics.\", McGraw-Hill,\n       Fifth Edition, 2002.\n.. [3] Lentner, Marvin, \"Elementary Applied Statistics\", Bogden\n       and Quigley, 1972.\n.. [4] Weisstein, Eric W. \"Binomial Distribution.\" From MathWorld--A\n       Wolfram Web Resource.\n       http://mathworld.wolfram.com/BinomialDistribution.html\n.. [5] Wikipedia, \"Binomial distribution\",\n       https://en.wikipedia.org/wiki/Binomial_distribution\n\nExamples\n--------\nDraw samples from the distribution:\n\n>>> n, p = 10, .5  # number of trials, probability of each trial\n>>> s = np.random.binomial(n, p, 1000)\n# result of flipping a coin 10 times, tested 1000 times.\n\nA real world example. A company drills 9 wild-cat oil exploration\nwells, each with an estimated probability of success of 0.1. All nine\nwells fail. What is the probability of that happening?\n\nLet's do 20,000 trials of the model, and count the number that\ngenerate zero positive results.\n\n>>> sum(np.random.binomial(9, 0.1, 20000) == 0)/20000.\n# answer = 0.38885, or 38%.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a74bef63e19cecc83702b1ba583a7785f5260eb835587541ed560b44a4ccbae5",
            "fields": [
                {
                    "name": "n",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or array_like of ints     Parameter of the distribution, >= 0. Floats are also accepted,     but they will be truncated to integers. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "p",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     Parameter of the distribution, >= 0 and <=1. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  If size is ``None`` (default),     a single value is returned if ``n`` and ``p`` are both scalars.     Otherwise, ``np.broadcast(n, p).size`` samples are drawn. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.binomial",
                    "defaultValue": "numpy.random.RandomState.binomial",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "RandomState.bytes",
            "description": "\nReturn random bytes.\n\n.. note::\n    New code should use the ``bytes`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\nlength : int\n    Number of random bytes.\n\nReturns\n-------\nout : bytes\n    String of length `length`.\n\nSee Also\n--------\nrandom.Generator.bytes: which should be used for new code.\n\nExamples\n--------\n>>> np.random.bytes(10)\nb' eh\\x85\\x022SZ\\xbf\\xa4' #random",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c60c3ee69b70b4a8c0f3faf779c226f33cca65626751927b0085bddd27046c40",
            "fields": [
                {
                    "name": "length",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int     Number of random bytes. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.bytes",
                    "defaultValue": "numpy.random.RandomState.bytes",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "RandomState.chisquare",
            "description": "\nDraw samples from a chi-square distribution.\n\nWhen `df` independent random variables, each with standard normal\ndistributions (mean 0, variance 1), are squared and summed, the\nresulting distribution is chi-square (see Notes).  This distribution\nis often used in hypothesis testing.\n\n.. note::\n    New code should use the ``chisquare`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\ndf : float or array_like of floats\n     Number of degrees of freedom, must be > 0.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``df`` is a scalar.  Otherwise,\n    ``np.array(df).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized chi-square distribution.\n\nRaises\n------\nValueError\n    When `df` <= 0 or when an inappropriate `size` (e.g. ``size=-1``)\n    is given.\n\nSee Also\n--------\nrandom.Generator.chisquare: which should be used for new code.\n\nNotes\n-----\nThe variable obtained by summing the squares of `df` independent,\nstandard normally distributed random variables:\n\n.. math:: Q = \\sum_{i=0}^{\\mathtt{df}} X^2_i\n\nis chi-square distributed, denoted\n\n.. math:: Q \\sim \\chi^2_k.\n\nThe probability density function of the chi-squared distribution is\n\n.. math:: p(x) = \\frac{(1/2)^{k/2}}{\\Gamma(k/2)}\n                 x^{k/2 - 1} e^{-x/2},\n\nwhere :math:`\\Gamma` is the gamma function,\n\n.. math:: \\Gamma(x) = \\int_0^{-\\infty} t^{x - 1} e^{-t} dt.\n\nReferences\n----------\n.. [1] NIST \"Engineering Statistics Handbook\"\n       https://www.itl.nist.gov/div898/handbook/eda/section3/eda3666.htm\n\nExamples\n--------\n>>> np.random.chisquare(2,4)\narray([ 1.89920014,  9.00867716,  3.13710533,  5.62318272]) # random",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "06b29635cbdceb8b334d6a2a891e5422d067a815a83ebd325fdfffad29af75ab",
            "fields": [
                {
                    "name": "df",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats      Number of degrees of freedom, must be > 0. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  If size is ``None`` (default),     a single value is returned if ``df`` is a scalar.  Otherwise,     ``np.array(df).size`` samples are drawn. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.chisquare",
                    "defaultValue": "numpy.random.RandomState.chisquare",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "RandomState.choice",
            "description": "\nGenerates a random sample from a given 1-D array\n\n.. versionadded:: 1.7.0\n\n.. note::\n    New code should use the ``choice`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\na : 1-D array-like or int\n    If an ndarray, a random sample is generated from its elements.\n    If an int, the random sample is generated as if it were ``np.arange(a)``\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  Default is None, in which case a\n    single value is returned.\nreplace : boolean, optional\n    Whether the sample is with or without replacement. Default is True,\n    meaning that a value of ``a`` can be selected multiple times.\np : 1-D array-like, optional\n    The probabilities associated with each entry in a.\n    If not given, the sample assumes a uniform distribution over all\n    entries in ``a``.\n\nReturns\n-------\nsamples : single item or ndarray\n    The generated random samples\n\nRaises\n------\nValueError\n    If a is an int and less than zero, if a or p are not 1-dimensional,\n    if a is an array-like of size 0, if p is not a vector of\n    probabilities, if a and p have different lengths, or if\n    replace=False and the sample size is greater than the population\n    size\n\nSee Also\n--------\nrandint, shuffle, permutation\nrandom.Generator.choice: which should be used in new code\n\nNotes\n-----\nSetting user-specified probabilities through ``p`` uses a more general but less\nefficient sampler than the default. The general sampler produces a different sample\nthan the optimized sampler even if each element of ``p`` is 1 / len(a).\n\nSampling random rows from a 2-D array is not possible with this function,\nbut is possible with `Generator.choice` through its ``axis`` keyword.\n\nExamples\n--------\nGenerate a uniform random sample from np.arange(5) of size 3:\n\n>>> np.random.choice(5, 3)\narray([0, 3, 4]) # random\n>>> #This is equivalent to np.random.randint(0,5,3)\n\nGenerate a non-uniform random sample from np.arange(5) of size 3:\n\n>>> np.random.choice(5, 3, p=[0.1, 0, 0.3, 0.6, 0])\narray([3, 3, 0]) # random\n\nGenerate a uniform random sample from np.arange(5) of size 3 without\nreplacement:\n\n>>> np.random.choice(5, 3, replace=False)\narray([3,1,0]) # random\n>>> #This is equivalent to np.random.permutation(np.arange(5))[:3]\n\nGenerate a non-uniform random sample from np.arange(5) of size\n3 without replacement:\n\n>>> np.random.choice(5, 3, replace=False, p=[0.1, 0, 0.3, 0.6, 0])\narray([2, 3, 0]) # random\n\nAny of the above can be repeated with an arbitrary array-like\ninstead of just integers. For instance:\n\n>>> aa_milne_arr = ['pooh', 'rabbit', 'piglet', 'Christopher']\n>>> np.random.choice(aa_milne_arr, 5, p=[0.5, 0.1, 0.1, 0.3])\narray(['pooh', 'pooh', 'pooh', 'Christopher', 'piglet'], # random\n      dtype='<U11')",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c2d2f45b71a50cf596e38321841a6c3a09a880d4df342e498baa7fc195d90753",
            "fields": [
                {
                    "name": "a",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "1-D array-like or int     If an ndarray, a random sample is generated from its elements.     If an int, the random sample is generated as if it were ``np.arange(a)`` ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  Default is None, in which case a     single value is returned. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "replace",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "boolean, optional     Whether the sample is with or without replacement. Default is True,     meaning that a value of ``a`` can be selected multiple times. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "p",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "1-D array-like, optional     The probabilities associated with each entry in a.     If not given, the sample assumes a uniform distribution over all     entries in ``a``. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.choice",
                    "defaultValue": "numpy.random.RandomState.choice",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "RandomState.dirichlet",
            "description": "\nDraw samples from the Dirichlet distribution.\n\nDraw `size` samples of dimension k from a Dirichlet distribution. A\nDirichlet-distributed random variable can be seen as a multivariate\ngeneralization of a Beta distribution. The Dirichlet distribution\nis a conjugate prior of a multinomial distribution in Bayesian\ninference.\n\n.. note::\n    New code should use the ``dirichlet`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\nalpha : sequence of floats, length k\n    Parameter of the distribution (length ``k`` for sample of\n    length ``k``).\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n)``, then\n    ``m * n * k`` samples are drawn.  Default is None, in which case a\n    vector of length ``k`` is returned.\n\nReturns\n-------\nsamples : ndarray,\n    The drawn samples, of shape ``(size, k)``.\n\nRaises\n------\nValueError\n    If any value in ``alpha`` is less than or equal to zero\n\nSee Also\n--------\nrandom.Generator.dirichlet: which should be used for new code.\n\nNotes\n-----\nThe Dirichlet distribution is a distribution over vectors\n:math:`x` that fulfil the conditions :math:`x_i>0` and\n:math:`\\sum_{i=1}^k x_i = 1`.\n\nThe probability density function :math:`p` of a\nDirichlet-distributed random vector :math:`X` is\nproportional to\n\n.. math:: p(x) \\propto \\prod_{i=1}^{k}{x^{\\alpha_i-1}_i},\n\nwhere :math:`\\alpha` is a vector containing the positive\nconcentration parameters.\n\nThe method uses the following property for computation: let :math:`Y`\nbe a random vector which has components that follow a standard gamma\ndistribution, then :math:`X = \\frac{1}{\\sum_{i=1}^k{Y_i}} Y`\nis Dirichlet-distributed\n\nReferences\n----------\n.. [1] David McKay, \"Information Theory, Inference and Learning\n       Algorithms,\" chapter 23,\n       http://www.inference.org.uk/mackay/itila/\n.. [2] Wikipedia, \"Dirichlet distribution\",\n       https://en.wikipedia.org/wiki/Dirichlet_distribution\n\nExamples\n--------\nTaking an example cited in Wikipedia, this distribution can be used if\none wanted to cut strings (each of initial length 1.0) into K pieces\nwith different lengths, where each piece had, on average, a designated\naverage length, but allowing some variation in the relative sizes of\nthe pieces.\n\n>>> s = np.random.dirichlet((10, 5, 3), 20).transpose()\n\n>>> import matplotlib.pyplot as plt\n>>> plt.barh(range(20), s[0])\n>>> plt.barh(range(20), s[1], left=s[0], color='g')\n>>> plt.barh(range(20), s[2], left=s[0]+s[1], color='r')\n>>> plt.title(\"Lengths of Strings\")",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8268a7909fb13f97cc76e3a38d6d79c33a38716c3f53ec1d12741104c8339b2d",
            "fields": [
                {
                    "name": "alpha",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "sequence of floats, length k     Parameter of the distribution (length ``k`` for sample of     length ``k``). ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n)``, then     ``m * n * k`` samples are drawn.  Default is None, in which case a     vector of length ``k`` is returned. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.dirichlet",
                    "defaultValue": "numpy.random.RandomState.dirichlet",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "RandomState.exponential",
            "description": "\nDraw samples from an exponential distribution.\n\nIts probability density function is\n\n.. math:: f(x; \\frac{1}{\\beta}) = \\frac{1}{\\beta} \\exp(-\\frac{x}{\\beta}),\n\nfor ``x > 0`` and 0 elsewhere. :math:`\\beta` is the scale parameter,\nwhich is the inverse of the rate parameter :math:`\\lambda = 1/\\beta`.\nThe rate parameter is an alternative, widely used parameterization\nof the exponential distribution [3]_.\n\nThe exponential distribution is a continuous analogue of the\ngeometric distribution.  It describes many common situations, such as\nthe size of raindrops measured over many rainstorms [1]_, or the time\nbetween page requests to Wikipedia [2]_.\n\n.. note::\n    New code should use the ``exponential`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\nscale : float or array_like of floats\n    The scale parameter, :math:`\\beta = 1/\\lambda`. Must be\n    non-negative.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``scale`` is a scalar.  Otherwise,\n    ``np.array(scale).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized exponential distribution.\n\nSee Also\n--------\nrandom.Generator.exponential: which should be used for new code.\n\nReferences\n----------\n.. [1] Peyton Z. Peebles Jr., \"Probability, Random Variables and\n       Random Signal Principles\", 4th ed, 2001, p. 57.\n.. [2] Wikipedia, \"Poisson process\",\n       https://en.wikipedia.org/wiki/Poisson_process\n.. [3] Wikipedia, \"Exponential distribution\",\n       https://en.wikipedia.org/wiki/Exponential_distribution",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7596c4066e2fff9fe7a5131e04f3b9f51e27f267a0329a0a1c4805bc5c0fad75",
            "fields": [
                {
                    "name": "scale",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     The scale parameter, :math:`\\beta = 1/\\lambda`. Must be     non-negative. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  If size is ``None`` (default),     a single value is returned if ``scale`` is a scalar.  Otherwise,     ``np.array(scale).size`` samples are drawn. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.exponential",
                    "defaultValue": "numpy.random.RandomState.exponential",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "RandomState.f",
            "description": "\nDraw samples from an F distribution.\n\nSamples are drawn from an F distribution with specified parameters,\n`dfnum` (degrees of freedom in numerator) and `dfden` (degrees of\nfreedom in denominator), where both parameters must be greater than\nzero.\n\nThe random variate of the F distribution (also known as the\nFisher distribution) is a continuous probability distribution\nthat arises in ANOVA tests, and is the ratio of two chi-square\nvariates.\n\n.. note::\n    New code should use the ``f`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\ndfnum : float or array_like of floats\n    Degrees of freedom in numerator, must be > 0.\ndfden : float or array_like of float\n    Degrees of freedom in denominator, must be > 0.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``dfnum`` and ``dfden`` are both scalars.\n    Otherwise, ``np.broadcast(dfnum, dfden).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized Fisher distribution.\n\nSee Also\n--------\nscipy.stats.f : probability density function, distribution or\n    cumulative density function, etc.\nrandom.Generator.f: which should be used for new code.\n\nNotes\n-----\nThe F statistic is used to compare in-group variances to between-group\nvariances. Calculating the distribution depends on the sampling, and\nso it is a function of the respective degrees of freedom in the\nproblem.  The variable `dfnum` is the number of samples minus one, the\nbetween-groups degrees of freedom, while `dfden` is the within-groups\ndegrees of freedom, the sum of the number of samples in each group\nminus the number of groups.\n\nReferences\n----------\n.. [1] Glantz, Stanton A. \"Primer of Biostatistics.\", McGraw-Hill,\n       Fifth Edition, 2002.\n.. [2] Wikipedia, \"F-distribution\",\n       https://en.wikipedia.org/wiki/F-distribution\n\nExamples\n--------\nAn example from Glantz[1], pp 47-40:\n\nTwo groups, children of diabetics (25 people) and children from people\nwithout diabetes (25 controls). Fasting blood glucose was measured,\ncase group had a mean value of 86.1, controls had a mean value of\n82.2. Standard deviations were 2.09 and 2.49 respectively. Are these\ndata consistent with the null hypothesis that the parents diabetic\nstatus does not affect their children's blood glucose levels?\nCalculating the F statistic from the data gives a value of 36.01.\n\nDraw samples from the distribution:\n\n>>> dfnum = 1. # between group degrees of freedom\n>>> dfden = 48. # within groups degrees of freedom\n>>> s = np.random.f(dfnum, dfden, 1000)\n\nThe lower bound for the top 1% of the samples is :\n\n>>> np.sort(s)[-10]\n7.61988120985 # random\n\nSo there is about a 1% chance that the F statistic will exceed 7.62,\nthe measured value is 36, so the null hypothesis is rejected at the 1%\nlevel.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ec060414539b1ba48386fb6a565480d303d2ae8070dd7bb423353c55e0624833",
            "fields": [
                {
                    "name": "dfnum",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     Degrees of freedom in numerator, must be > 0. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dfden",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of float     Degrees of freedom in denominator, must be > 0. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  If size is ``None`` (default),     a single value is returned if ``dfnum`` and ``dfden`` are both scalars.     Otherwise, ``np.broadcast(dfnum, dfden).size`` samples are drawn. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.f",
                    "defaultValue": "numpy.random.RandomState.f",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "RandomState.gamma",
            "description": "\nDraw samples from a Gamma distribution.\n\nSamples are drawn from a Gamma distribution with specified parameters,\n`shape` (sometimes designated \"k\") and `scale` (sometimes designated\n\"theta\"), where both parameters are > 0.\n\n.. note::\n    New code should use the ``gamma`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\nshape : float or array_like of floats\n    The shape of the gamma distribution. Must be non-negative.\nscale : float or array_like of floats, optional\n    The scale of the gamma distribution. Must be non-negative.\n    Default is equal to 1.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``shape`` and ``scale`` are both scalars.\n    Otherwise, ``np.broadcast(shape, scale).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized gamma distribution.\n\nSee Also\n--------\nscipy.stats.gamma : probability density function, distribution or\n    cumulative density function, etc.\nrandom.Generator.gamma: which should be used for new code.\n\nNotes\n-----\nThe probability density for the Gamma distribution is\n\n.. math:: p(x) = x^{k-1}\\frac{e^{-x/\\theta}}{\\theta^k\\Gamma(k)},\n\nwhere :math:`k` is the shape and :math:`\\theta` the scale,\nand :math:`\\Gamma` is the Gamma function.\n\nThe Gamma distribution is often used to model the times to failure of\nelectronic components, and arises naturally in processes for which the\nwaiting times between Poisson distributed events are relevant.\n\nReferences\n----------\n.. [1] Weisstein, Eric W. \"Gamma Distribution.\" From MathWorld--A\n       Wolfram Web Resource.\n       http://mathworld.wolfram.com/GammaDistribution.html\n.. [2] Wikipedia, \"Gamma distribution\",\n       https://en.wikipedia.org/wiki/Gamma_distribution\n\nExamples\n--------\nDraw samples from the distribution:\n\n>>> shape, scale = 2., 2.  # mean=4, std=2*sqrt(2)\n>>> s = np.random.gamma(shape, scale, 1000)\n\nDisplay the histogram of the samples, along with\nthe probability density function:\n\n>>> import matplotlib.pyplot as plt\n>>> import scipy.special as sps  # doctest: +SKIP\n>>> count, bins, ignored = plt.hist(s, 50, density=True)\n>>> y = bins**(shape-1)*(np.exp(-bins/scale) /  # doctest: +SKIP\n...                      (sps.gamma(shape)*scale**shape))\n>>> plt.plot(bins, y, linewidth=2, color='r')  # doctest: +SKIP\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1a269968134c003d350ec9dadd18c04ab755cddc4b83a20b3b7c69b7d2b5f73b",
            "fields": [
                {
                    "name": "shape",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     The shape of the gamma distribution. Must be non-negative. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "scale",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats, optional     The scale of the gamma distribution. Must be non-negative.     Default is equal to 1. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  If size is ``None`` (default),     a single value is returned if ``shape`` and ``scale`` are both scalars.     Otherwise, ``np.broadcast(shape, scale).size`` samples are drawn. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.gamma",
                    "defaultValue": "numpy.random.RandomState.gamma",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "RandomState.geometric",
            "description": "\nDraw samples from the geometric distribution.\n\nBernoulli trials are experiments with one of two outcomes:\nsuccess or failure (an example of such an experiment is flipping\na coin).  The geometric distribution models the number of trials\nthat must be run in order to achieve success.  It is therefore\nsupported on the positive integers, ``k = 1, 2, ...``.\n\nThe probability mass function of the geometric distribution is\n\n.. math:: f(k) = (1 - p)^{k - 1} p\n\nwhere `p` is the probability of success of an individual trial.\n\n.. note::\n    New code should use the ``geometric`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\np : float or array_like of floats\n    The probability of success of an individual trial.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``p`` is a scalar.  Otherwise,\n    ``np.array(p).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized geometric distribution.\n\nSee Also\n--------\nrandom.Generator.geometric: which should be used for new code.\n\nExamples\n--------\nDraw ten thousand values from the geometric distribution,\nwith the probability of an individual success equal to 0.35:\n\n>>> z = np.random.geometric(p=0.35, size=10000)\n\nHow many trials succeeded after a single run?\n\n>>> (z == 1).sum() / 10000.\n0.34889999999999999 #random",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f4555daffd7bd9c7357136f747ca793401b1c015a20006d3317f46d086fe6fef",
            "fields": [
                {
                    "name": "p",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     The probability of success of an individual trial. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  If size is ``None`` (default),     a single value is returned if ``p`` is a scalar.  Otherwise,     ``np.array(p).size`` samples are drawn. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.geometric",
                    "defaultValue": "numpy.random.RandomState.geometric",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "RandomState.get_state",
            "description": "\nReturn a tuple representing the internal state of the generator.\n\nFor more details, see `set_state`.\n\nParameters\n----------\nlegacy : bool, optional\n    Flag indicating to return a legacy tuple state when the BitGenerator\n    is MT19937, instead of a dict.\n\nReturns\n-------\nout : {tuple(str, ndarray of 624 uints, int, int, float), dict}\n    The returned tuple has the following items:\n\n    1. the string 'MT19937'.\n    2. a 1-D array of 624 unsigned integer keys.\n    3. an integer ``pos``.\n    4. an integer ``has_gauss``.\n    5. a float ``cached_gaussian``.\n\n    If `legacy` is False, or the BitGenerator is not MT19937, then\n    state is returned as a dictionary.\n\nSee Also\n--------\nset_state\n\nNotes\n-----\n`set_state` and `get_state` are not needed to work with any of the\nrandom distributions in NumPy. If the internal state is manually altered,\nthe user should know exactly what he/she is doing.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7b871f4e75c0aa51cdeaf2c23f135d15b7ae85ea102719745c4fdf403a138299",
            "fields": [
                {
                    "name": "legacy",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "bool, optional     Flag indicating to return a legacy tuple state when the BitGenerator     is MT19937, instead of a dict. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.get_state",
                    "defaultValue": "numpy.random.RandomState.get_state",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "RandomState.gumbel",
            "description": "\nDraw samples from a Gumbel distribution.\n\nDraw samples from a Gumbel distribution with specified location and\nscale.  For more information on the Gumbel distribution, see\nNotes and References below.\n\n.. note::\n    New code should use the ``gumbel`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\nloc : float or array_like of floats, optional\n    The location of the mode of the distribution. Default is 0.\nscale : float or array_like of floats, optional\n    The scale parameter of the distribution. Default is 1. Must be non-\n    negative.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``loc`` and ``scale`` are both scalars.\n    Otherwise, ``np.broadcast(loc, scale).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized Gumbel distribution.\n\nSee Also\n--------\nscipy.stats.gumbel_l\nscipy.stats.gumbel_r\nscipy.stats.genextreme\nweibull\nrandom.Generator.gumbel: which should be used for new code.\n\nNotes\n-----\nThe Gumbel (or Smallest Extreme Value (SEV) or the Smallest Extreme\nValue Type I) distribution is one of a class of Generalized Extreme\nValue (GEV) distributions used in modeling extreme value problems.\nThe Gumbel is a special case of the Extreme Value Type I distribution\nfor maximums from distributions with \"exponential-like\" tails.\n\nThe probability density for the Gumbel distribution is\n\n.. math:: p(x) = \\frac{e^{-(x - \\mu)/ \\beta}}{\\beta} e^{ -e^{-(x - \\mu)/\n          \\beta}},\n\nwhere :math:`\\mu` is the mode, a location parameter, and\n:math:`\\beta` is the scale parameter.\n\nThe Gumbel (named for German mathematician Emil Julius Gumbel) was used\nvery early in the hydrology literature, for modeling the occurrence of\nflood events. It is also used for modeling maximum wind speed and\nrainfall rates.  It is a \"fat-tailed\" distribution - the probability of\nan event in the tail of the distribution is larger than if one used a\nGaussian, hence the surprisingly frequent occurrence of 100-year\nfloods. Floods were initially modeled as a Gaussian process, which\nunderestimated the frequency of extreme events.\n\nIt is one of a class of extreme value distributions, the Generalized\nExtreme Value (GEV) distributions, which also includes the Weibull and\nFrechet.\n\nThe function has a mean of :math:`\\mu + 0.57721\\beta` and a variance\nof :math:`\\frac{\\pi^2}{6}\\beta^2`.\n\nReferences\n----------\n.. [1] Gumbel, E. J., \"Statistics of Extremes,\"\n       New York: Columbia University Press, 1958.\n.. [2] Reiss, R.-D. and Thomas, M., \"Statistical Analysis of Extreme\n       Values from Insurance, Finance, Hydrology and Other Fields,\"\n       Basel: Birkhauser Verlag, 2001.\n\nExamples\n--------\nDraw samples from the distribution:\n\n>>> mu, beta = 0, 0.1 # location and scale\n>>> s = np.random.gumbel(mu, beta, 1000)\n\nDisplay the histogram of the samples, along with\nthe probability density function:\n\n>>> import matplotlib.pyplot as plt\n>>> count, bins, ignored = plt.hist(s, 30, density=True)\n>>> plt.plot(bins, (1/beta)*np.exp(-(bins - mu)/beta)\n...          * np.exp( -np.exp( -(bins - mu) /beta) ),\n...          linewidth=2, color='r')\n>>> plt.show()\n\nShow how an extreme value distribution can arise from a Gaussian process\nand compare to a Gaussian:\n\n>>> means = []\n>>> maxima = []\n>>> for i in range(0,1000) :\n...    a = np.random.normal(mu, beta, 1000)\n...    means.append(a.mean())\n...    maxima.append(a.max())\n>>> count, bins, ignored = plt.hist(maxima, 30, density=True)\n>>> beta = np.std(maxima) * np.sqrt(6) / np.pi\n>>> mu = np.mean(maxima) - 0.57721*beta\n>>> plt.plot(bins, (1/beta)*np.exp(-(bins - mu)/beta)\n...          * np.exp(-np.exp(-(bins - mu)/beta)),\n...          linewidth=2, color='r')\n>>> plt.plot(bins, 1/(beta * np.sqrt(2 * np.pi))\n...          * np.exp(-(bins - mu)**2 / (2 * beta**2)),\n...          linewidth=2, color='g')\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "23acdcb521c6c4c7be7bd89588e9980371b445174e6b93ffa0ad42f2be567fdb",
            "fields": [
                {
                    "name": "loc",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats, optional     The location of the mode of the distribution. Default is 0. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "scale",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats, optional     The scale parameter of the distribution. Default is 1. Must be non-     negative. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  If size is ``None`` (default),     a single value is returned if ``loc`` and ``scale`` are both scalars.     Otherwise, ``np.broadcast(loc, scale).size`` samples are drawn. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.gumbel",
                    "defaultValue": "numpy.random.RandomState.gumbel",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "RandomState.hypergeometric",
            "description": "\nDraw samples from a Hypergeometric distribution.\n\nSamples are drawn from a hypergeometric distribution with specified\nparameters, `ngood` (ways to make a good selection), `nbad` (ways to make\na bad selection), and `nsample` (number of items sampled, which is less\nthan or equal to the sum ``ngood + nbad``).\n\n.. note::\n    New code should use the ``hypergeometric`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\nngood : int or array_like of ints\n    Number of ways to make a good selection.  Must be nonnegative.\nnbad : int or array_like of ints\n    Number of ways to make a bad selection.  Must be nonnegative.\nnsample : int or array_like of ints\n    Number of items sampled.  Must be at least 1 and at most\n    ``ngood + nbad``.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if `ngood`, `nbad`, and `nsample`\n    are all scalars.  Otherwise, ``np.broadcast(ngood, nbad, nsample).size``\n    samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized hypergeometric distribution. Each\n    sample is the number of good items within a randomly selected subset of\n    size `nsample` taken from a set of `ngood` good items and `nbad` bad items.\n\nSee Also\n--------\nscipy.stats.hypergeom : probability density function, distribution or\n    cumulative density function, etc.\nrandom.Generator.hypergeometric: which should be used for new code.\n\nNotes\n-----\nThe probability density for the Hypergeometric distribution is\n\n.. math:: P(x) = \\frac{\\binom{g}{x}\\binom{b}{n-x}}{\\binom{g+b}{n}},\n\nwhere :math:`0 \\le x \\le n` and :math:`n-b \\le x \\le g`\n\nfor P(x) the probability of ``x`` good results in the drawn sample,\ng = `ngood`, b = `nbad`, and n = `nsample`.\n\nConsider an urn with black and white marbles in it, `ngood` of them\nare black and `nbad` are white. If you draw `nsample` balls without\nreplacement, then the hypergeometric distribution describes the\ndistribution of black balls in the drawn sample.\n\nNote that this distribution is very similar to the binomial\ndistribution, except that in this case, samples are drawn without\nreplacement, whereas in the Binomial case samples are drawn with\nreplacement (or the sample space is infinite). As the sample space\nbecomes large, this distribution approaches the binomial.\n\nReferences\n----------\n.. [1] Lentner, Marvin, \"Elementary Applied Statistics\", Bogden\n       and Quigley, 1972.\n.. [2] Weisstein, Eric W. \"Hypergeometric Distribution.\" From\n       MathWorld--A Wolfram Web Resource.\n       http://mathworld.wolfram.com/HypergeometricDistribution.html\n.. [3] Wikipedia, \"Hypergeometric distribution\",\n       https://en.wikipedia.org/wiki/Hypergeometric_distribution\n\nExamples\n--------\nDraw samples from the distribution:\n\n>>> ngood, nbad, nsamp = 100, 2, 10\n# number of good, number of bad, and number of samples\n>>> s = np.random.hypergeometric(ngood, nbad, nsamp, 1000)\n>>> from matplotlib.pyplot import hist\n>>> hist(s)\n#   note that it is very unlikely to grab both bad items\n\nSuppose you have an urn with 15 white and 15 black marbles.\nIf you pull 15 marbles at random, how likely is it that\n12 or more of them are one color?\n\n>>> s = np.random.hypergeometric(15, 15, 15, 100000)\n>>> sum(s>=12)/100000. + sum(s<=3)/100000.\n#   answer = 0.003 ... pretty unlikely!",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "89d704e0441bdb6bbaf32ec5335b7d82d8b32b141876fe844396a7313eab0f56",
            "fields": [
                {
                    "name": "ngood",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or array_like of ints     Number of ways to make a good selection.  Must be nonnegative. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "nbad",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or array_like of ints     Number of ways to make a bad selection.  Must be nonnegative. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "nsample",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or array_like of ints     Number of items sampled.  Must be at least 1 and at most     ``ngood + nbad``. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  If size is ``None`` (default),     a single value is returned if `ngood`, `nbad`, and `nsample`     are all scalars.  Otherwise, ``np.broadcast(ngood, nbad, nsample).size``     samples are drawn. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.hypergeometric",
                    "defaultValue": "numpy.random.RandomState.hypergeometric",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "RandomState.laplace",
            "description": "\nDraw samples from the Laplace or double exponential distribution with\nspecified location (or mean) and scale (decay).\n\nThe Laplace distribution is similar to the Gaussian/normal distribution,\nbut is sharper at the peak and has fatter tails. It represents the\ndifference between two independent, identically distributed exponential\nrandom variables.\n\n.. note::\n    New code should use the ``laplace`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\nloc : float or array_like of floats, optional\n    The position, :math:`\\mu`, of the distribution peak. Default is 0.\nscale : float or array_like of floats, optional\n    :math:`\\lambda`, the exponential decay. Default is 1. Must be non-\n    negative.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``loc`` and ``scale`` are both scalars.\n    Otherwise, ``np.broadcast(loc, scale).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized Laplace distribution.\n\nSee Also\n--------\nrandom.Generator.laplace: which should be used for new code.\n\nNotes\n-----\nIt has the probability density function\n\n.. math:: f(x; \\mu, \\lambda) = \\frac{1}{2\\lambda}\n                               \\exp\\left(-\\frac{|x - \\mu|}{\\lambda}\\right).\n\nThe first law of Laplace, from 1774, states that the frequency\nof an error can be expressed as an exponential function of the\nabsolute magnitude of the error, which leads to the Laplace\ndistribution. For many problems in economics and health\nsciences, this distribution seems to model the data better\nthan the standard Gaussian distribution.\n\nReferences\n----------\n.. [1] Abramowitz, M. and Stegun, I. A. (Eds.). \"Handbook of\n       Mathematical Functions with Formulas, Graphs, and Mathematical\n       Tables, 9th printing,\" New York: Dover, 1972.\n.. [2] Kotz, Samuel, et. al. \"The Laplace Distribution and\n       Generalizations, \" Birkhauser, 2001.\n.. [3] Weisstein, Eric W. \"Laplace Distribution.\"\n       From MathWorld--A Wolfram Web Resource.\n       http://mathworld.wolfram.com/LaplaceDistribution.html\n.. [4] Wikipedia, \"Laplace distribution\",\n       https://en.wikipedia.org/wiki/Laplace_distribution\n\nExamples\n--------\nDraw samples from the distribution\n\n>>> loc, scale = 0., 1.\n>>> s = np.random.laplace(loc, scale, 1000)\n\nDisplay the histogram of the samples, along with\nthe probability density function:\n\n>>> import matplotlib.pyplot as plt\n>>> count, bins, ignored = plt.hist(s, 30, density=True)\n>>> x = np.arange(-8., 8., .01)\n>>> pdf = np.exp(-abs(x-loc)/scale)/(2.*scale)\n>>> plt.plot(x, pdf)\n\nPlot Gaussian for comparison:\n\n>>> g = (1/(scale * np.sqrt(2 * np.pi)) *\n...      np.exp(-(x - loc)**2 / (2 * scale**2)))\n>>> plt.plot(x,g)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b3c0ed3afeb044518a1ca8f132c11956fcc637703d29b8432fe4af95cd4d76f9",
            "fields": [
                {
                    "name": "loc",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats, optional     The position, :math:`\\mu`, of the distribution peak. Default is 0. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "scale",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats, optional     :math:`\\lambda`, the exponential decay. Default is 1. Must be non-     negative. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  If size is ``None`` (default),     a single value is returned if ``loc`` and ``scale`` are both scalars.     Otherwise, ``np.broadcast(loc, scale).size`` samples are drawn. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.laplace",
                    "defaultValue": "numpy.random.RandomState.laplace",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "RandomState.logistic",
            "description": "\nDraw samples from a logistic distribution.\n\nSamples are drawn from a logistic distribution with specified\nparameters, loc (location or mean, also median), and scale (>0).\n\n.. note::\n    New code should use the ``logistic`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\nloc : float or array_like of floats, optional\n    Parameter of the distribution. Default is 0.\nscale : float or array_like of floats, optional\n    Parameter of the distribution. Must be non-negative.\n    Default is 1.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``loc`` and ``scale`` are both scalars.\n    Otherwise, ``np.broadcast(loc, scale).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized logistic distribution.\n\nSee Also\n--------\nscipy.stats.logistic : probability density function, distribution or\n    cumulative density function, etc.\nrandom.Generator.logistic: which should be used for new code.\n\nNotes\n-----\nThe probability density for the Logistic distribution is\n\n.. math:: P(x) = P(x) = \\frac{e^{-(x-\\mu)/s}}{s(1+e^{-(x-\\mu)/s})^2},\n\nwhere :math:`\\mu` = location and :math:`s` = scale.\n\nThe Logistic distribution is used in Extreme Value problems where it\ncan act as a mixture of Gumbel distributions, in Epidemiology, and by\nthe World Chess Federation (FIDE) where it is used in the Elo ranking\nsystem, assuming the performance of each player is a logistically\ndistributed random variable.\n\nReferences\n----------\n.. [1] Reiss, R.-D. and Thomas M. (2001), \"Statistical Analysis of\n       Extreme Values, from Insurance, Finance, Hydrology and Other\n       Fields,\" Birkhauser Verlag, Basel, pp 132-133.\n.. [2] Weisstein, Eric W. \"Logistic Distribution.\" From\n       MathWorld--A Wolfram Web Resource.\n       http://mathworld.wolfram.com/LogisticDistribution.html\n.. [3] Wikipedia, \"Logistic-distribution\",\n       https://en.wikipedia.org/wiki/Logistic_distribution\n\nExamples\n--------\nDraw samples from the distribution:\n\n>>> loc, scale = 10, 1\n>>> s = np.random.logistic(loc, scale, 10000)\n>>> import matplotlib.pyplot as plt\n>>> count, bins, ignored = plt.hist(s, bins=50)\n\n#   plot against distribution\n\n>>> def logist(x, loc, scale):\n...     return np.exp((loc-x)/scale)/(scale*(1+np.exp((loc-x)/scale))**2)\n>>> lgst_val = logist(bins, loc, scale)\n>>> plt.plot(bins, lgst_val * count.max() / lgst_val.max())\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "02386c6c63e29cd6937e7ca35aec57979230d89f856adae5a26aeb1651f0b9ca",
            "fields": [
                {
                    "name": "loc",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats, optional     Parameter of the distribution. Default is 0. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "scale",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats, optional     Parameter of the distribution. Must be non-negative.     Default is 1. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  If size is ``None`` (default),     a single value is returned if ``loc`` and ``scale`` are both scalars.     Otherwise, ``np.broadcast(loc, scale).size`` samples are drawn. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.logistic",
                    "defaultValue": "numpy.random.RandomState.logistic",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "RandomState.lognormal",
            "description": "\nDraw samples from a log-normal distribution.\n\nDraw samples from a log-normal distribution with specified mean,\nstandard deviation, and array shape.  Note that the mean and standard\ndeviation are not the values for the distribution itself, but of the\nunderlying normal distribution it is derived from.\n\n.. note::\n    New code should use the ``lognormal`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\nmean : float or array_like of floats, optional\n    Mean value of the underlying normal distribution. Default is 0.\nsigma : float or array_like of floats, optional\n    Standard deviation of the underlying normal distribution. Must be\n    non-negative. Default is 1.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``mean`` and ``sigma`` are both scalars.\n    Otherwise, ``np.broadcast(mean, sigma).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized log-normal distribution.\n\nSee Also\n--------\nscipy.stats.lognorm : probability density function, distribution,\n    cumulative density function, etc.\nrandom.Generator.lognormal: which should be used for new code.\n\nNotes\n-----\nA variable `x` has a log-normal distribution if `log(x)` is normally\ndistributed.  The probability density function for the log-normal\ndistribution is:\n\n.. math:: p(x) = \\frac{1}{\\sigma x \\sqrt{2\\pi}}\n                 e^{(-\\frac{(ln(x)-\\mu)^2}{2\\sigma^2})}\n\nwhere :math:`\\mu` is the mean and :math:`\\sigma` is the standard\ndeviation of the normally distributed logarithm of the variable.\nA log-normal distribution results if a random variable is the *product*\nof a large number of independent, identically-distributed variables in\nthe same way that a normal distribution results if the variable is the\n*sum* of a large number of independent, identically-distributed\nvariables.\n\nReferences\n----------\n.. [1] Limpert, E., Stahel, W. A., and Abbt, M., \"Log-normal\n       Distributions across the Sciences: Keys and Clues,\"\n       BioScience, Vol. 51, No. 5, May, 2001.\n       https://stat.ethz.ch/~stahel/lognormal/bioscience.pdf\n.. [2] Reiss, R.D. and Thomas, M., \"Statistical Analysis of Extreme\n       Values,\" Basel: Birkhauser Verlag, 2001, pp. 31-32.\n\nExamples\n--------\nDraw samples from the distribution:\n\n>>> mu, sigma = 3., 1. # mean and standard deviation\n>>> s = np.random.lognormal(mu, sigma, 1000)\n\nDisplay the histogram of the samples, along with\nthe probability density function:\n\n>>> import matplotlib.pyplot as plt\n>>> count, bins, ignored = plt.hist(s, 100, density=True, align='mid')\n\n>>> x = np.linspace(min(bins), max(bins), 10000)\n>>> pdf = (np.exp(-(np.log(x) - mu)**2 / (2 * sigma**2))\n...        / (x * sigma * np.sqrt(2 * np.pi)))\n\n>>> plt.plot(x, pdf, linewidth=2, color='r')\n>>> plt.axis('tight')\n>>> plt.show()\n\nDemonstrate that taking the products of random samples from a uniform\ndistribution can be fit well by a log-normal probability density\nfunction.\n\n>>> # Generate a thousand samples: each is the product of 100 random\n>>> # values, drawn from a normal distribution.\n>>> b = []\n>>> for i in range(1000):\n...    a = 10. + np.random.standard_normal(100)\n...    b.append(np.product(a))\n\n>>> b = np.array(b) / np.min(b) # scale values to be positive\n>>> count, bins, ignored = plt.hist(b, 100, density=True, align='mid')\n>>> sigma = np.std(np.log(b))\n>>> mu = np.mean(np.log(b))\n\n>>> x = np.linspace(min(bins), max(bins), 10000)\n>>> pdf = (np.exp(-(np.log(x) - mu)**2 / (2 * sigma**2))\n...        / (x * sigma * np.sqrt(2 * np.pi)))\n\n>>> plt.plot(x, pdf, color='r', linewidth=2)\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9e306fa955ae9800597c7b8b28bea672270e33570c61758563dbacefebf3b0e6",
            "fields": [
                {
                    "name": "mean",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats, optional     Mean value of the underlying normal distribution. Default is 0. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "sigma",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats, optional     Standard deviation of the underlying normal distribution. Must be     non-negative. Default is 1. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  If size is ``None`` (default),     a single value is returned if ``mean`` and ``sigma`` are both scalars.     Otherwise, ``np.broadcast(mean, sigma).size`` samples are drawn. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.lognormal",
                    "defaultValue": "numpy.random.RandomState.lognormal",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "RandomState.logseries",
            "description": "\nDraw samples from a logarithmic series distribution.\n\nSamples are drawn from a log series distribution with specified\nshape parameter, 0 <= ``p`` < 1.\n\n.. note::\n    New code should use the ``logseries`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\np : float or array_like of floats\n    Shape parameter for the distribution.  Must be in the range [0, 1).\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``p`` is a scalar.  Otherwise,\n    ``np.array(p).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized logarithmic series distribution.\n\nSee Also\n--------\nscipy.stats.logser : probability density function, distribution or\n    cumulative density function, etc.\nrandom.Generator.logseries: which should be used for new code.\n\nNotes\n-----\nThe probability density for the Log Series distribution is\n\n.. math:: P(k) = \\frac{-p^k}{k \\ln(1-p)},\n\nwhere p = probability.\n\nThe log series distribution is frequently used to represent species\nrichness and occurrence, first proposed by Fisher, Corbet, and\nWilliams in 1943 [2].  It may also be used to model the numbers of\noccupants seen in cars [3].\n\nReferences\n----------\n.. [1] Buzas, Martin A.; Culver, Stephen J.,  Understanding regional\n       species diversity through the log series distribution of\n       occurrences: BIODIVERSITY RESEARCH Diversity & Distributions,\n       Volume 5, Number 5, September 1999 , pp. 187-195(9).\n.. [2] Fisher, R.A,, A.S. Corbet, and C.B. Williams. 1943. The\n       relation between the number of species and the number of\n       individuals in a random sample of an animal population.\n       Journal of Animal Ecology, 12:42-58.\n.. [3] D. J. Hand, F. Daly, D. Lunn, E. Ostrowski, A Handbook of Small\n       Data Sets, CRC Press, 1994.\n.. [4] Wikipedia, \"Logarithmic distribution\",\n       https://en.wikipedia.org/wiki/Logarithmic_distribution\n\nExamples\n--------\nDraw samples from the distribution:\n\n>>> a = .6\n>>> s = np.random.logseries(a, 10000)\n>>> import matplotlib.pyplot as plt\n>>> count, bins, ignored = plt.hist(s)\n\n#   plot against distribution\n\n>>> def logseries(k, p):\n...     return -p**k/(k*np.log(1-p))\n>>> plt.plot(bins, logseries(bins, a)*count.max()/\n...          logseries(bins, a).max(), 'r')\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2157fcdacac473db4fae12486ba6dfc5fa71eb5e447271e1773417dafff0e74f",
            "fields": [
                {
                    "name": "p",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     Shape parameter for the distribution.  Must be in the range [0, 1). ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  If size is ``None`` (default),     a single value is returned if ``p`` is a scalar.  Otherwise,     ``np.array(p).size`` samples are drawn. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.logseries",
                    "defaultValue": "numpy.random.RandomState.logseries",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "RandomState.multinomial",
            "description": "\nDraw samples from a multinomial distribution.\n\nThe multinomial distribution is a multivariate generalization of the\nbinomial distribution.  Take an experiment with one of ``p``\npossible outcomes.  An example of such an experiment is throwing a dice,\nwhere the outcome can be 1 through 6.  Each sample drawn from the\ndistribution represents `n` such experiments.  Its values,\n``X_i = [X_0, X_1, ..., X_p]``, represent the number of times the\noutcome was ``i``.\n\n.. note::\n    New code should use the ``multinomial`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\nn : int\n    Number of experiments.\npvals : sequence of floats, length p\n    Probabilities of each of the ``p`` different outcomes.  These\n    must sum to 1 (however, the last element is always assumed to\n    account for the remaining probability, as long as\n    ``sum(pvals[:-1]) <= 1)``.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  Default is None, in which case a\n    single value is returned.\n\nReturns\n-------\nout : ndarray\n    The drawn samples, of shape *size*, if that was provided.  If not,\n    the shape is ``(N,)``.\n\n    In other words, each entry ``out[i,j,...,:]`` is an N-dimensional\n    value drawn from the distribution.\n\nSee Also\n--------\nrandom.Generator.multinomial: which should be used for new code.\n\nExamples\n--------\nThrow a dice 20 times:\n\n>>> np.random.multinomial(20, [1/6.]*6, size=1)\narray([[4, 1, 7, 5, 2, 1]]) # random\n\nIt landed 4 times on 1, once on 2, etc.\n\nNow, throw the dice 20 times, and 20 times again:\n\n>>> np.random.multinomial(20, [1/6.]*6, size=2)\narray([[3, 4, 3, 3, 4, 3], # random\n       [2, 4, 3, 4, 0, 7]])\n\nFor the first run, we threw 3 times 1, 4 times 2, etc.  For the second,\nwe threw 2 times 1, 4 times 2, etc.\n\nA loaded die is more likely to land on number 6:\n\n>>> np.random.multinomial(100, [1/7.]*5 + [2/7.])\narray([11, 16, 14, 17, 16, 26]) # random\n\nThe probability inputs should be normalized. As an implementation\ndetail, the value of the last entry is ignored and assumed to take\nup any leftover probability mass, but this should not be relied on.\nA biased coin which has twice as much weight on one side as on the\nother should be sampled like so:\n\n>>> np.random.multinomial(100, [1.0 / 3, 2.0 / 3])  # RIGHT\narray([38, 62]) # random\n\nnot like:\n\n>>> np.random.multinomial(100, [1.0, 2.0])  # WRONG\nTraceback (most recent call last):\nValueError: pvals < 0, pvals > 1 or pvals contains NaNs",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "bf38beaf38f29b4a780623e8cee667e719bbf26a8d474afc86405abb3188dea7",
            "fields": [
                {
                    "name": "n",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int     Number of experiments. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "pvals",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "sequence of floats, length p     Probabilities of each of the ``p`` different outcomes.  These     must sum to 1 (however, the last element is always assumed to     account for the remaining probability, as long as     ``sum(pvals[:-1]) <= 1)``. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  Default is None, in which case a     single value is returned. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.multinomial",
                    "defaultValue": "numpy.random.RandomState.multinomial",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "RandomState.multivariate_normal",
            "description": "\nDraw random samples from a multivariate normal distribution.\n\nThe multivariate normal, multinormal or Gaussian distribution is a\ngeneralization of the one-dimensional normal distribution to higher\ndimensions.  Such a distribution is specified by its mean and\ncovariance matrix.  These parameters are analogous to the mean\n(average or \"center\") and variance (standard deviation, or \"width,\"\nsquared) of the one-dimensional normal distribution.\n\n.. note::\n    New code should use the ``multivariate_normal`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\nmean : 1-D array_like, of length N\n    Mean of the N-dimensional distribution.\ncov : 2-D array_like, of shape (N, N)\n    Covariance matrix of the distribution. It must be symmetric and\n    positive-semidefinite for proper sampling.\nsize : int or tuple of ints, optional\n    Given a shape of, for example, ``(m,n,k)``, ``m*n*k`` samples are\n    generated, and packed in an `m`-by-`n`-by-`k` arrangement.  Because\n    each sample is `N`-dimensional, the output shape is ``(m,n,k,N)``.\n    If no shape is specified, a single (`N`-D) sample is returned.\ncheck_valid : { 'warn', 'raise', 'ignore' }, optional\n    Behavior when the covariance matrix is not positive semidefinite.\ntol : float, optional\n    Tolerance when checking the singular values in covariance matrix.\n    cov is cast to double before the check.\n\nReturns\n-------\nout : ndarray\n    The drawn samples, of shape *size*, if that was provided.  If not,\n    the shape is ``(N,)``.\n\n    In other words, each entry ``out[i,j,...,:]`` is an N-dimensional\n    value drawn from the distribution.\n\nSee Also\n--------\nrandom.Generator.multivariate_normal: which should be used for new code.\n\nNotes\n-----\nThe mean is a coordinate in N-dimensional space, which represents the\nlocation where samples are most likely to be generated.  This is\nanalogous to the peak of the bell curve for the one-dimensional or\nunivariate normal distribution.\n\nCovariance indicates the level to which two variables vary together.\nFrom the multivariate normal distribution, we draw N-dimensional\nsamples, :math:`X = [x_1, x_2, ... x_N]`.  The covariance matrix\nelement :math:`C_{ij}` is the covariance of :math:`x_i` and :math:`x_j`.\nThe element :math:`C_{ii}` is the variance of :math:`x_i` (i.e. its\n\"spread\").\n\nInstead of specifying the full covariance matrix, popular\napproximations include:\n\n  - Spherical covariance (`cov` is a multiple of the identity matrix)\n  - Diagonal covariance (`cov` has non-negative elements, and only on\n    the diagonal)\n\nThis geometrical property can be seen in two dimensions by plotting\ngenerated data-points:\n\n>>> mean = [0, 0]\n>>> cov = [[1, 0], [0, 100]]  # diagonal covariance\n\nDiagonal covariance means that points are oriented along x or y-axis:\n\n>>> import matplotlib.pyplot as plt\n>>> x, y = np.random.multivariate_normal(mean, cov, 5000).T\n>>> plt.plot(x, y, 'x')\n>>> plt.axis('equal')\n>>> plt.show()\n\nNote that the covariance matrix must be positive semidefinite (a.k.a.\nnonnegative-definite). Otherwise, the behavior of this method is\nundefined and backwards compatibility is not guaranteed.\n\nReferences\n----------\n.. [1] Papoulis, A., \"Probability, Random Variables, and Stochastic\n       Processes,\" 3rd ed., New York: McGraw-Hill, 1991.\n.. [2] Duda, R. O., Hart, P. E., and Stork, D. G., \"Pattern\n       Classification,\" 2nd ed., New York: Wiley, 2001.\n\nExamples\n--------\n>>> mean = (1, 2)\n>>> cov = [[1, 0], [0, 1]]\n>>> x = np.random.multivariate_normal(mean, cov, (3, 3))\n>>> x.shape\n(3, 3, 2)\n\nHere we generate 800 samples from the bivariate normal distribution\nwith mean [0, 0] and covariance matrix [[6, -3], [-3, 3.5]].  The\nexpected variances of the first and second components of the sample\nare 6 and 3.5, respectively, and the expected correlation\ncoefficient is -3/sqrt(6*3.5) \u2248 -0.65465.\n\n>>> cov = np.array([[6, -3], [-3, 3.5]])\n>>> pts = np.random.multivariate_normal([0, 0], cov, size=800)\n\nCheck that the mean, covariance, and correlation coefficient of the\nsample are close to the expected values:\n\n>>> pts.mean(axis=0)\narray([ 0.0326911 , -0.01280782])  # may vary\n>>> np.cov(pts.T)\narray([[ 5.96202397, -2.85602287],\n       [-2.85602287,  3.47613949]])  # may vary\n>>> np.corrcoef(pts.T)[0, 1]\n-0.6273591314603949  # may vary\n\nWe can visualize this data with a scatter plot.  The orientation\nof the point cloud illustrates the negative correlation of the\ncomponents of this sample.\n\n>>> import matplotlib.pyplot as plt\n>>> plt.plot(pts[:, 0], pts[:, 1], '.', alpha=0.5)\n>>> plt.axis('equal')\n>>> plt.grid()\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "73ac9100fa790a01cb62664fb48204ae0d75723143b5c2bded9ae1bb3913565a",
            "fields": [
                {
                    "name": "mean",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "1-D array_like, of length N     Mean of the N-dimensional distribution. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "cov",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "2-D array_like, of shape (N, N)     Covariance matrix of the distribution. It must be symmetric and     positive-semidefinite for proper sampling. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Given a shape of, for example, ``(m,n,k)``, ``m*n*k`` samples are     generated, and packed in an `m`-by-`n`-by-`k` arrangement.  Because     each sample is `N`-dimensional, the output shape is ``(m,n,k,N)``.     If no shape is specified, a single (`N`-D) sample is returned. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "check_valid",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "{ 'warn', 'raise', 'ignore' }, optional     Behavior when the covariance matrix is not positive semidefinite. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "tol",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float, optional     Tolerance when checking the singular values in covariance matrix.     cov is cast to double before the check. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.multivariate_normal",
                    "defaultValue": "numpy.random.RandomState.multivariate_normal",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "RandomState.negative_binomial",
            "description": "\nDraw samples from a negative binomial distribution.\n\nSamples are drawn from a negative binomial distribution with specified\nparameters, `n` successes and `p` probability of success where `n`\nis > 0 and `p` is in the interval [0, 1].\n\n.. note::\n    New code should use the ``negative_binomial`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\nn : float or array_like of floats\n    Parameter of the distribution, > 0.\np : float or array_like of floats\n    Parameter of the distribution, >= 0 and <=1.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``n`` and ``p`` are both scalars.\n    Otherwise, ``np.broadcast(n, p).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized negative binomial distribution,\n    where each sample is equal to N, the number of failures that\n    occurred before a total of n successes was reached.\n\nSee Also\n--------\nrandom.Generator.negative_binomial: which should be used for new code.\n\nNotes\n-----\nThe probability mass function of the negative binomial distribution is\n\n.. math:: P(N;n,p) = \\frac{\\Gamma(N+n)}{N!\\Gamma(n)}p^{n}(1-p)^{N},\n\nwhere :math:`n` is the number of successes, :math:`p` is the\nprobability of success, :math:`N+n` is the number of trials, and\n:math:`\\Gamma` is the gamma function. When :math:`n` is an integer,\n:math:`\\frac{\\Gamma(N+n)}{N!\\Gamma(n)} = \\binom{N+n-1}{N}`, which is\nthe more common form of this term in the the pmf. The negative\nbinomial distribution gives the probability of N failures given n\nsuccesses, with a success on the last trial.\n\nIf one throws a die repeatedly until the third time a \"1\" appears,\nthen the probability distribution of the number of non-\"1\"s that\nappear before the third \"1\" is a negative binomial distribution.\n\nReferences\n----------\n.. [1] Weisstein, Eric W. \"Negative Binomial Distribution.\" From\n       MathWorld--A Wolfram Web Resource.\n       http://mathworld.wolfram.com/NegativeBinomialDistribution.html\n.. [2] Wikipedia, \"Negative binomial distribution\",\n       https://en.wikipedia.org/wiki/Negative_binomial_distribution\n\nExamples\n--------\nDraw samples from the distribution:\n\nA real world example. A company drills wild-cat oil\nexploration wells, each with an estimated probability of\nsuccess of 0.1.  What is the probability of having one success\nfor each successive well, that is what is the probability of a\nsingle success after drilling 5 wells, after 6 wells, etc.?\n\n>>> s = np.random.negative_binomial(1, 0.1, 100000)\n>>> for i in range(1, 11): # doctest: +SKIP\n...    probability = sum(s<i) / 100000.\n...    print(i, \"wells drilled, probability of one success =\", probability)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "000022aff0c34d49565d853084b162606d9c18eedad449c5eff870405d113273",
            "fields": [
                {
                    "name": "n",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     Parameter of the distribution, > 0. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "p",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     Parameter of the distribution, >= 0 and <=1. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  If size is ``None`` (default),     a single value is returned if ``n`` and ``p`` are both scalars.     Otherwise, ``np.broadcast(n, p).size`` samples are drawn. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.negative_binomial",
                    "defaultValue": "numpy.random.RandomState.negative_binomial",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "RandomState.noncentral_chisquare",
            "description": "\nDraw samples from a noncentral chi-square distribution.\n\nThe noncentral :math:`\\chi^2` distribution is a generalization of\nthe :math:`\\chi^2` distribution.\n\n.. note::\n    New code should use the ``noncentral_chisquare`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\ndf : float or array_like of floats\n    Degrees of freedom, must be > 0.\n\n    .. versionchanged:: 1.10.0\n       Earlier NumPy versions required dfnum > 1.\nnonc : float or array_like of floats\n    Non-centrality, must be non-negative.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``df`` and ``nonc`` are both scalars.\n    Otherwise, ``np.broadcast(df, nonc).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized noncentral chi-square distribution.\n\nSee Also\n--------\nrandom.Generator.noncentral_chisquare: which should be used for new code.\n\nNotes\n-----\nThe probability density function for the noncentral Chi-square\ndistribution is\n\n.. math:: P(x;df,nonc) = \\sum^{\\infty}_{i=0}\n                       \\frac{e^{-nonc/2}(nonc/2)^{i}}{i!}\n                       P_{Y_{df+2i}}(x),\n\nwhere :math:`Y_{q}` is the Chi-square with q degrees of freedom.\n\nReferences\n----------\n.. [1] Wikipedia, \"Noncentral chi-squared distribution\"\n       https://en.wikipedia.org/wiki/Noncentral_chi-squared_distribution\n\nExamples\n--------\nDraw values from the distribution and plot the histogram\n\n>>> import matplotlib.pyplot as plt\n>>> values = plt.hist(np.random.noncentral_chisquare(3, 20, 100000),\n...                   bins=200, density=True)\n>>> plt.show()\n\nDraw values from a noncentral chisquare with very small noncentrality,\nand compare to a chisquare.\n\n>>> plt.figure()\n>>> values = plt.hist(np.random.noncentral_chisquare(3, .0000001, 100000),\n...                   bins=np.arange(0., 25, .1), density=True)\n>>> values2 = plt.hist(np.random.chisquare(3, 100000),\n...                    bins=np.arange(0., 25, .1), density=True)\n>>> plt.plot(values[1][0:-1], values[0]-values2[0], 'ob')\n>>> plt.show()\n\nDemonstrate how large values of non-centrality lead to a more symmetric\ndistribution.\n\n>>> plt.figure()\n>>> values = plt.hist(np.random.noncentral_chisquare(3, 20, 100000),\n...                   bins=200, density=True)\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b07af86276e12bdb3e84cfb530081504083f13ff2e9cf491c3d4be7a77e60460",
            "fields": [
                {
                    "name": "df",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     Degrees of freedom, must be > 0.      .. versionchanged:: 1.10.0        Earlier NumPy versions required dfnum > 1. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "nonc",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     Non-centrality, must be non-negative. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  If size is ``None`` (default),     a single value is returned if ``df`` and ``nonc`` are both scalars.     Otherwise, ``np.broadcast(df, nonc).size`` samples are drawn. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.noncentral_chisquare",
                    "defaultValue": "numpy.random.RandomState.noncentral_chisquare",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "RandomState.noncentral_f",
            "description": "\nDraw samples from the noncentral F distribution.\n\nSamples are drawn from an F distribution with specified parameters,\n`dfnum` (degrees of freedom in numerator) and `dfden` (degrees of\nfreedom in denominator), where both parameters > 1.\n`nonc` is the non-centrality parameter.\n\n.. note::\n    New code should use the ``noncentral_f`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\ndfnum : float or array_like of floats\n    Numerator degrees of freedom, must be > 0.\n\n    .. versionchanged:: 1.14.0\n       Earlier NumPy versions required dfnum > 1.\ndfden : float or array_like of floats\n    Denominator degrees of freedom, must be > 0.\nnonc : float or array_like of floats\n    Non-centrality parameter, the sum of the squares of the numerator\n    means, must be >= 0.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``dfnum``, ``dfden``, and ``nonc``\n    are all scalars.  Otherwise, ``np.broadcast(dfnum, dfden, nonc).size``\n    samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized noncentral Fisher distribution.\n\nSee Also\n--------\nrandom.Generator.noncentral_f: which should be used for new code.\n\nNotes\n-----\nWhen calculating the power of an experiment (power = probability of\nrejecting the null hypothesis when a specific alternative is true) the\nnon-central F statistic becomes important.  When the null hypothesis is\ntrue, the F statistic follows a central F distribution. When the null\nhypothesis is not true, then it follows a non-central F statistic.\n\nReferences\n----------\n.. [1] Weisstein, Eric W. \"Noncentral F-Distribution.\"\n       From MathWorld--A Wolfram Web Resource.\n       http://mathworld.wolfram.com/NoncentralF-Distribution.html\n.. [2] Wikipedia, \"Noncentral F-distribution\",\n       https://en.wikipedia.org/wiki/Noncentral_F-distribution\n\nExamples\n--------\nIn a study, testing for a specific alternative to the null hypothesis\nrequires use of the Noncentral F distribution. We need to calculate the\narea in the tail of the distribution that exceeds the value of the F\ndistribution for the null hypothesis.  We'll plot the two probability\ndistributions for comparison.\n\n>>> dfnum = 3 # between group deg of freedom\n>>> dfden = 20 # within groups degrees of freedom\n>>> nonc = 3.0\n>>> nc_vals = np.random.noncentral_f(dfnum, dfden, nonc, 1000000)\n>>> NF = np.histogram(nc_vals, bins=50, density=True)\n>>> c_vals = np.random.f(dfnum, dfden, 1000000)\n>>> F = np.histogram(c_vals, bins=50, density=True)\n>>> import matplotlib.pyplot as plt\n>>> plt.plot(F[1][1:], F[0])\n>>> plt.plot(NF[1][1:], NF[0])\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "19f265a5139501ad8fcf2617ec559f670e8a5f56d0b8c0570fd28c9d2a5b06a2",
            "fields": [
                {
                    "name": "dfnum",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     Numerator degrees of freedom, must be > 0.      .. versionchanged:: 1.14.0        Earlier NumPy versions required dfnum > 1. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dfden",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     Denominator degrees of freedom, must be > 0. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "nonc",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     Non-centrality parameter, the sum of the squares of the numerator     means, must be >= 0. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  If size is ``None`` (default),     a single value is returned if ``dfnum``, ``dfden``, and ``nonc``     are all scalars.  Otherwise, ``np.broadcast(dfnum, dfden, nonc).size``     samples are drawn. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.noncentral_f",
                    "defaultValue": "numpy.random.RandomState.noncentral_f",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "RandomState.normal",
            "description": "\nDraw random samples from a normal (Gaussian) distribution.\n\nThe probability density function of the normal distribution, first\nderived by De Moivre and 200 years later by both Gauss and Laplace\nindependently [2]_, is often called the bell curve because of\nits characteristic shape (see the example below).\n\nThe normal distributions occurs often in nature.  For example, it\ndescribes the commonly occurring distribution of samples influenced\nby a large number of tiny, random disturbances, each with its own\nunique distribution [2]_.\n\n.. note::\n    New code should use the ``normal`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\nloc : float or array_like of floats\n    Mean (\"centre\") of the distribution.\nscale : float or array_like of floats\n    Standard deviation (spread or \"width\") of the distribution. Must be\n    non-negative.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``loc`` and ``scale`` are both scalars.\n    Otherwise, ``np.broadcast(loc, scale).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized normal distribution.\n\nSee Also\n--------\nscipy.stats.norm : probability density function, distribution or\n    cumulative density function, etc.\nrandom.Generator.normal: which should be used for new code.\n\nNotes\n-----\nThe probability density for the Gaussian distribution is\n\n.. math:: p(x) = \\frac{1}{\\sqrt{ 2 \\pi \\sigma^2 }}\n                 e^{ - \\frac{ (x - \\mu)^2 } {2 \\sigma^2} },\n\nwhere :math:`\\mu` is the mean and :math:`\\sigma` the standard\ndeviation. The square of the standard deviation, :math:`\\sigma^2`,\nis called the variance.\n\nThe function has its peak at the mean, and its \"spread\" increases with\nthe standard deviation (the function reaches 0.607 times its maximum at\n:math:`x + \\sigma` and :math:`x - \\sigma` [2]_).  This implies that\nnormal is more likely to return samples lying close to the mean, rather\nthan those far away.\n\nReferences\n----------\n.. [1] Wikipedia, \"Normal distribution\",\n       https://en.wikipedia.org/wiki/Normal_distribution\n.. [2] P. R. Peebles Jr., \"Central Limit Theorem\" in \"Probability,\n       Random Variables and Random Signal Principles\", 4th ed., 2001,\n       pp. 51, 51, 125.\n\nExamples\n--------\nDraw samples from the distribution:\n\n>>> mu, sigma = 0, 0.1 # mean and standard deviation\n>>> s = np.random.normal(mu, sigma, 1000)\n\nVerify the mean and the variance:\n\n>>> abs(mu - np.mean(s))\n0.0  # may vary\n\n>>> abs(sigma - np.std(s, ddof=1))\n0.1  # may vary\n\nDisplay the histogram of the samples, along with\nthe probability density function:\n\n>>> import matplotlib.pyplot as plt\n>>> count, bins, ignored = plt.hist(s, 30, density=True)\n>>> plt.plot(bins, 1/(sigma * np.sqrt(2 * np.pi)) *\n...                np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n...          linewidth=2, color='r')\n>>> plt.show()\n\nTwo-by-four array of samples from N(3, 6.25):\n\n>>> np.random.normal(3, 2.5, size=(2, 4))\narray([[-4.49401501,  4.00950034, -1.81814867,  7.29718677],   # random\n       [ 0.39924804,  4.68456316,  4.99394529,  4.84057254]])  # random",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "aaa04196d53054fd9ff3599948c15c42be36dbfa50a305ae5613d3f9c201e1ba",
            "fields": [
                {
                    "name": "loc",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     Mean (\"centre\") of the distribution. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "scale",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     Standard deviation (spread or \"width\") of the distribution. Must be     non-negative. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  If size is ``None`` (default),     a single value is returned if ``loc`` and ``scale`` are both scalars.     Otherwise, ``np.broadcast(loc, scale).size`` samples are drawn. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.normal",
                    "defaultValue": "numpy.random.RandomState.normal",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "RandomState.pareto",
            "description": "\nDraw samples from a Pareto II or Lomax distribution with\nspecified shape.\n\nThe Lomax or Pareto II distribution is a shifted Pareto\ndistribution. The classical Pareto distribution can be\nobtained from the Lomax distribution by adding 1 and\nmultiplying by the scale parameter ``m`` (see Notes).  The\nsmallest value of the Lomax distribution is zero while for the\nclassical Pareto distribution it is ``mu``, where the standard\nPareto distribution has location ``mu = 1``.  Lomax can also\nbe considered as a simplified version of the Generalized\nPareto distribution (available in SciPy), with the scale set\nto one and the location set to zero.\n\nThe Pareto distribution must be greater than zero, and is\nunbounded above.  It is also known as the \"80-20 rule\".  In\nthis distribution, 80 percent of the weights are in the lowest\n20 percent of the range, while the other 20 percent fill the\nremaining 80 percent of the range.\n\n.. note::\n    New code should use the ``pareto`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\na : float or array_like of floats\n    Shape of the distribution. Must be positive.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``a`` is a scalar.  Otherwise,\n    ``np.array(a).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized Pareto distribution.\n\nSee Also\n--------\nscipy.stats.lomax : probability density function, distribution or\n    cumulative density function, etc.\nscipy.stats.genpareto : probability density function, distribution or\n    cumulative density function, etc.\nrandom.Generator.pareto: which should be used for new code.\n\nNotes\n-----\nThe probability density for the Pareto distribution is\n\n.. math:: p(x) = \\frac{am^a}{x^{a+1}}\n\nwhere :math:`a` is the shape and :math:`m` the scale.\n\nThe Pareto distribution, named after the Italian economist\nVilfredo Pareto, is a power law probability distribution\nuseful in many real world problems.  Outside the field of\neconomics it is generally referred to as the Bradford\ndistribution. Pareto developed the distribution to describe\nthe distribution of wealth in an economy.  It has also found\nuse in insurance, web page access statistics, oil field sizes,\nand many other problems, including the download frequency for\nprojects in Sourceforge [1]_.  It is one of the so-called\n\"fat-tailed\" distributions.\n\nReferences\n----------\n.. [1] Francis Hunt and Paul Johnson, On the Pareto Distribution of\n       Sourceforge projects.\n.. [2] Pareto, V. (1896). Course of Political Economy. Lausanne.\n.. [3] Reiss, R.D., Thomas, M.(2001), Statistical Analysis of Extreme\n       Values, Birkhauser Verlag, Basel, pp 23-30.\n.. [4] Wikipedia, \"Pareto distribution\",\n       https://en.wikipedia.org/wiki/Pareto_distribution\n\nExamples\n--------\nDraw samples from the distribution:\n\n>>> a, m = 3., 2.  # shape and mode\n>>> s = (np.random.pareto(a, 1000) + 1) * m\n\nDisplay the histogram of the samples, along with the probability\ndensity function:\n\n>>> import matplotlib.pyplot as plt\n>>> count, bins, _ = plt.hist(s, 100, density=True)\n>>> fit = a*m**a / bins**(a+1)\n>>> plt.plot(bins, max(count)*fit/max(fit), linewidth=2, color='r')\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "981b08b11ea8b1d4a1f75f13e12903662d7911c86516bb0ea75c2c6094411db9",
            "fields": [
                {
                    "name": "a",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     Shape of the distribution. Must be positive. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  If size is ``None`` (default),     a single value is returned if ``a`` is a scalar.  Otherwise,     ``np.array(a).size`` samples are drawn. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.pareto",
                    "defaultValue": "numpy.random.RandomState.pareto",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "RandomState.permutation",
            "description": "\nRandomly permute a sequence, or return a permuted range.\n\nIf `x` is a multi-dimensional array, it is only shuffled along its\nfirst index.\n\n.. note::\n    New code should use the ``permutation`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\nx : int or array_like\n    If `x` is an integer, randomly permute ``np.arange(x)``.\n    If `x` is an array, make a copy and shuffle the elements\n    randomly.\n\nReturns\n-------\nout : ndarray\n    Permuted sequence or array range.\n\nSee Also\n--------\nrandom.Generator.permutation: which should be used for new code.\n\nExamples\n--------\n>>> np.random.permutation(10)\narray([1, 7, 4, 3, 0, 9, 2, 5, 8, 6]) # random\n\n>>> np.random.permutation([1, 4, 9, 12, 15])\narray([15,  1,  9,  4, 12]) # random\n\n>>> arr = np.arange(9).reshape((3, 3))\n>>> np.random.permutation(arr)\narray([[6, 7, 8], # random\n       [0, 1, 2],\n       [3, 4, 5]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "37d63a841c727d2b7011fb2f3f7eec058fe615c684094b29a8f9d561f3c87429",
            "fields": [
                {
                    "name": "x",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or array_like     If `x` is an integer, randomly permute ``np.arange(x)``.     If `x` is an array, make a copy and shuffle the elements     randomly. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.permutation",
                    "defaultValue": "numpy.random.RandomState.permutation",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "RandomState.poisson",
            "description": "\nDraw samples from a Poisson distribution.\n\nThe Poisson distribution is the limit of the binomial distribution\nfor large N.\n\n.. note::\n    New code should use the ``poisson`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\nlam : float or array_like of floats\n    Expected number of events occurring in a fixed-time interval,\n    must be >= 0. A sequence must be broadcastable over the requested\n    size.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``lam`` is a scalar. Otherwise,\n    ``np.array(lam).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized Poisson distribution.\n\nSee Also\n--------\nrandom.Generator.poisson: which should be used for new code.\n\nNotes\n-----\nThe Poisson distribution\n\n.. math:: f(k; \\lambda)=\\frac{\\lambda^k e^{-\\lambda}}{k!}\n\nFor events with an expected separation :math:`\\lambda` the Poisson\ndistribution :math:`f(k; \\lambda)` describes the probability of\n:math:`k` events occurring within the observed\ninterval :math:`\\lambda`.\n\nBecause the output is limited to the range of the C int64 type, a\nValueError is raised when `lam` is within 10 sigma of the maximum\nrepresentable value.\n\nReferences\n----------\n.. [1] Weisstein, Eric W. \"Poisson Distribution.\"\n       From MathWorld--A Wolfram Web Resource.\n       http://mathworld.wolfram.com/PoissonDistribution.html\n.. [2] Wikipedia, \"Poisson distribution\",\n       https://en.wikipedia.org/wiki/Poisson_distribution\n\nExamples\n--------\nDraw samples from the distribution:\n\n>>> import numpy as np\n>>> s = np.random.poisson(5, 10000)\n\nDisplay histogram of the sample:\n\n>>> import matplotlib.pyplot as plt\n>>> count, bins, ignored = plt.hist(s, 14, density=True)\n>>> plt.show()\n\nDraw each 100 values for lambda 100 and 500:\n\n>>> s = np.random.poisson(lam=(100., 500.), size=(100, 2))",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9f5eb740df188619b7d6644dda125a29963fb4d744d17d522b9ee6eb19e6e4fb",
            "fields": [
                {
                    "name": "lam",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     Expected number of events occurring in a fixed-time interval,     must be >= 0. A sequence must be broadcastable over the requested     size. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  If size is ``None`` (default),     a single value is returned if ``lam`` is a scalar. Otherwise,     ``np.array(lam).size`` samples are drawn. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.poisson",
                    "defaultValue": "numpy.random.RandomState.poisson",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "RandomState.power",
            "description": "\nDraws samples in [0, 1] from a power distribution with positive\nexponent a - 1.\n\nAlso known as the power function distribution.\n\n.. note::\n    New code should use the ``power`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\na : float or array_like of floats\n    Parameter of the distribution. Must be non-negative.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``a`` is a scalar.  Otherwise,\n    ``np.array(a).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized power distribution.\n\nRaises\n------\nValueError\n    If a <= 0.\n\nSee Also\n--------\nrandom.Generator.power: which should be used for new code.\n\nNotes\n-----\nThe probability density function is\n\n.. math:: P(x; a) = ax^{a-1}, 0 \\le x \\le 1, a>0.\n\nThe power function distribution is just the inverse of the Pareto\ndistribution. It may also be seen as a special case of the Beta\ndistribution.\n\nIt is used, for example, in modeling the over-reporting of insurance\nclaims.\n\nReferences\n----------\n.. [1] Christian Kleiber, Samuel Kotz, \"Statistical size distributions\n       in economics and actuarial sciences\", Wiley, 2003.\n.. [2] Heckert, N. A. and Filliben, James J. \"NIST Handbook 148:\n       Dataplot Reference Manual, Volume 2: Let Subcommands and Library\n       Functions\", National Institute of Standards and Technology\n       Handbook Series, June 2003.\n       https://www.itl.nist.gov/div898/software/dataplot/refman2/auxillar/powpdf.pdf\n\nExamples\n--------\nDraw samples from the distribution:\n\n>>> a = 5. # shape\n>>> samples = 1000\n>>> s = np.random.power(a, samples)\n\nDisplay the histogram of the samples, along with\nthe probability density function:\n\n>>> import matplotlib.pyplot as plt\n>>> count, bins, ignored = plt.hist(s, bins=30)\n>>> x = np.linspace(0, 1, 100)\n>>> y = a*x**(a-1.)\n>>> normed_y = samples*np.diff(bins)[0]*y\n>>> plt.plot(x, normed_y)\n>>> plt.show()\n\nCompare the power function distribution to the inverse of the Pareto.\n\n>>> from scipy import stats # doctest: +SKIP\n>>> rvs = np.random.power(5, 1000000)\n>>> rvsp = np.random.pareto(5, 1000000)\n>>> xx = np.linspace(0,1,100)\n>>> powpdf = stats.powerlaw.pdf(xx,5)  # doctest: +SKIP\n\n>>> plt.figure()\n>>> plt.hist(rvs, bins=50, density=True)\n>>> plt.plot(xx,powpdf,'r-')  # doctest: +SKIP\n>>> plt.title('np.random.power(5)')\n\n>>> plt.figure()\n>>> plt.hist(1./(1.+rvsp), bins=50, density=True)\n>>> plt.plot(xx,powpdf,'r-')  # doctest: +SKIP\n>>> plt.title('inverse of 1 + np.random.pareto(5)')\n\n>>> plt.figure()\n>>> plt.hist(1./(1.+rvsp), bins=50, density=True)\n>>> plt.plot(xx,powpdf,'r-')  # doctest: +SKIP\n>>> plt.title('inverse of stats.pareto(5)')",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a969e17d77d05a401cc06dc2a94f96affe409c02228b8bdb688fba49b66ce6ba",
            "fields": [
                {
                    "name": "a",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     Parameter of the distribution. Must be non-negative. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  If size is ``None`` (default),     a single value is returned if ``a`` is a scalar.  Otherwise,     ``np.array(a).size`` samples are drawn. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.power",
                    "defaultValue": "numpy.random.RandomState.power",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "RandomState.rand",
            "description": "\nRandom values in a given shape.\n\n.. note::\n    This is a convenience function for users porting code from Matlab,\n    and wraps `random_sample`. That function takes a\n    tuple to specify the size of the output, which is consistent with\n    other NumPy functions like `numpy.zeros` and `numpy.ones`.\n\nCreate an array of the given shape and populate it with\nrandom samples from a uniform distribution\nover ``[0, 1)``.\n\nParameters\n----------\nd0, d1, ..., dn : int, optional\n    The dimensions of the returned array, must be non-negative.\n    If no argument is given a single Python float is returned.\n\nReturns\n-------\nout : ndarray, shape ``(d0, d1, ..., dn)``\n    Random values.\n\nSee Also\n--------\nrandom\n\nExamples\n--------\n>>> np.random.rand(3,2)\narray([[ 0.14022471,  0.96360618],  #random\n       [ 0.37601032,  0.25528411],  #random\n       [ 0.49313049,  0.94909878]]) #random",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2054a5c592360a87892203b24c6da46f207084fc5b5dc7ec68e1039d15e49f11",
            "fields": [
                {
                    "name": "dn",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int, optional     The dimensions of the returned array, must be non-negative.     If no argument is given a single Python float is returned. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.rand",
                    "defaultValue": "numpy.random.RandomState.rand",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "RandomState.randint",
            "description": "\nReturn random integers from `low` (inclusive) to `high` (exclusive).\n\nReturn random integers from the \"discrete uniform\" distribution of\nthe specified dtype in the \"half-open\" interval [`low`, `high`). If\n`high` is None (the default), then results are from [0, `low`).\n\n.. note::\n    New code should use the ``integers`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\nlow : int or array-like of ints\n    Lowest (signed) integers to be drawn from the distribution (unless\n    ``high=None``, in which case this parameter is one above the\n    *highest* such integer).\nhigh : int or array-like of ints, optional\n    If provided, one above the largest (signed) integer to be drawn\n    from the distribution (see above for behavior if ``high=None``).\n    If array-like, must contain integer values\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  Default is None, in which case a\n    single value is returned.\ndtype : dtype, optional\n    Desired dtype of the result. Byteorder must be native.\n    The default value is int.\n\n    .. versionadded:: 1.11.0\n\nReturns\n-------\nout : int or ndarray of ints\n    `size`-shaped array of random integers from the appropriate\n    distribution, or a single such random int if `size` not provided.\n\nSee Also\n--------\nrandom_integers : similar to `randint`, only for the closed\n    interval [`low`, `high`], and 1 is the lowest value if `high` is\n    omitted.\nrandom.Generator.integers: which should be used for new code.\n\nExamples\n--------\n>>> np.random.randint(2, size=10)\narray([1, 0, 0, 0, 1, 1, 0, 0, 1, 0]) # random\n>>> np.random.randint(1, size=10)\narray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n\nGenerate a 2 x 4 array of ints between 0 and 4, inclusive:\n\n>>> np.random.randint(5, size=(2, 4))\narray([[4, 0, 2, 1], # random\n       [3, 2, 2, 0]])\n\nGenerate a 1 x 3 array with 3 different upper bounds\n\n>>> np.random.randint(1, [3, 5, 10])\narray([2, 2, 9]) # random\n\nGenerate a 1 by 3 array with 3 different lower bounds\n\n>>> np.random.randint([1, 5, 7], 10)\narray([9, 8, 7]) # random\n\nGenerate a 2 by 4 array using broadcasting with dtype of uint8\n\n>>> np.random.randint([1, 3, 5, 7], [[10], [20]], dtype=np.uint8)\narray([[ 8,  6,  9,  7], # random\n       [ 1, 16,  9, 12]], dtype=uint8)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9a2d69e95de928f58572f7536e97217067d8a7782cc3b8a6d01d5dc90e2f95c1",
            "fields": [
                {
                    "name": "low",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or array-like of ints     Lowest (signed) integers to be drawn from the distribution (unless     ``high=None``, in which case this parameter is one above the     *highest* such integer). ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "high",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or array-like of ints, optional     If provided, one above the largest (signed) integer to be drawn     from the distribution (see above for behavior if ``high=None``).     If array-like, must contain integer values ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  Default is None, in which case a     single value is returned. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dtype",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "dtype, optional     Desired dtype of the result. Byteorder must be native.     The default value is int.      .. versionadded:: 1.11.0 ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.randint",
                    "defaultValue": "numpy.random.RandomState.randint",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "RandomState.randn",
            "description": "\nReturn a sample (or samples) from the \"standard normal\" distribution.\n\n.. note::\n    This is a convenience function for users porting code from Matlab,\n    and wraps `standard_normal`. That function takes a\n    tuple to specify the size of the output, which is consistent with\n    other NumPy functions like `numpy.zeros` and `numpy.ones`.\n\n.. note::\n    New code should use the ``standard_normal`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nIf positive int_like arguments are provided, `randn` generates an array\nof shape ``(d0, d1, ..., dn)``, filled\nwith random floats sampled from a univariate \"normal\" (Gaussian)\ndistribution of mean 0 and variance 1. A single float randomly sampled\nfrom the distribution is returned if no argument is provided.\n\nParameters\n----------\nd0, d1, ..., dn : int, optional\n    The dimensions of the returned array, must be non-negative.\n    If no argument is given a single Python float is returned.\n\nReturns\n-------\nZ : ndarray or float\n    A ``(d0, d1, ..., dn)``-shaped array of floating-point samples from\n    the standard normal distribution, or a single such float if\n    no parameters were supplied.\n\nSee Also\n--------\nstandard_normal : Similar, but takes a tuple as its argument.\nnormal : Also accepts mu and sigma arguments.\nrandom.Generator.standard_normal: which should be used for new code.\n\nNotes\n-----\nFor random samples from :math:`N(\\mu, \\sigma^2)`, use:\n\n``sigma * np.random.randn(...) + mu``\n\nExamples\n--------\n>>> np.random.randn()\n2.1923875335537315  # random\n\nTwo-by-four array of samples from N(3, 6.25):\n\n>>> 3 + 2.5 * np.random.randn(2, 4)\narray([[-4.49401501,  4.00950034, -1.81814867,  7.29718677],   # random\n       [ 0.39924804,  4.68456316,  4.99394529,  4.84057254]])  # random",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f0d0c493ed2625bbedf5e90bfda1584685943750c983dd30520029dd1832916b",
            "fields": [
                {
                    "name": "dn",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int, optional     The dimensions of the returned array, must be non-negative.     If no argument is given a single Python float is returned. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.randn",
                    "defaultValue": "numpy.random.RandomState.randn",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "RandomState.random",
            "description": "\nReturn random floats in the half-open interval [0.0, 1.0). Alias for\n`random_sample` to ease forward-porting to the new random API.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5246209f172475d450f91a332c7af043d8eb823151930bb3e63e99f1de907479",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.random",
                    "defaultValue": "numpy.random.RandomState.random",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "RandomState.random_integers",
            "description": "\nRandom integers of type `np.int_` between `low` and `high`, inclusive.\n\nReturn random integers of type `np.int_` from the \"discrete uniform\"\ndistribution in the closed interval [`low`, `high`].  If `high` is\nNone (the default), then results are from [1, `low`]. The `np.int_`\ntype translates to the C long integer type and its precision\nis platform dependent.\n\nThis function has been deprecated. Use randint instead.\n\n.. deprecated:: 1.11.0\n\nParameters\n----------\nlow : int\n    Lowest (signed) integer to be drawn from the distribution (unless\n    ``high=None``, in which case this parameter is the *highest* such\n    integer).\nhigh : int, optional\n    If provided, the largest (signed) integer to be drawn from the\n    distribution (see above for behavior if ``high=None``).\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  Default is None, in which case a\n    single value is returned.\n\nReturns\n-------\nout : int or ndarray of ints\n    `size`-shaped array of random integers from the appropriate\n    distribution, or a single such random int if `size` not provided.\n\nSee Also\n--------\nrandint : Similar to `random_integers`, only for the half-open\n    interval [`low`, `high`), and 0 is the lowest value if `high` is\n    omitted.\n\nNotes\n-----\nTo sample from N evenly spaced floating-point numbers between a and b,\nuse::\n\n  a + (b - a) * (np.random.random_integers(N) - 1) / (N - 1.)\n\nExamples\n--------\n>>> np.random.random_integers(5)\n4 # random\n>>> type(np.random.random_integers(5))\n<class 'numpy.int64'>\n>>> np.random.random_integers(5, size=(3,2))\narray([[5, 4], # random\n       [3, 3],\n       [4, 5]])\n\nChoose five random numbers from the set of five evenly-spaced\nnumbers between 0 and 2.5, inclusive (*i.e.*, from the set\n:math:`{0, 5/8, 10/8, 15/8, 20/8}`):\n\n>>> 2.5 * (np.random.random_integers(5, size=(5,)) - 1) / 4.\narray([ 0.625,  1.25 ,  0.625,  0.625,  2.5  ]) # random\n\nRoll two six sided dice 1000 times and sum the results:\n\n>>> d1 = np.random.random_integers(1, 6, 1000)\n>>> d2 = np.random.random_integers(1, 6, 1000)\n>>> dsums = d1 + d2\n\nDisplay results as a histogram:\n\n>>> import matplotlib.pyplot as plt\n>>> count, bins, ignored = plt.hist(dsums, 11, density=True)\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "3ef74faff2bc6bb86c93335a9e312c8b612d5d9267ac008269ddafdb85034dfc",
            "fields": [
                {
                    "name": "low",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int     Lowest (signed) integer to be drawn from the distribution (unless     ``high=None``, in which case this parameter is the *highest* such     integer). ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "high",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int, optional     If provided, the largest (signed) integer to be drawn from the     distribution (see above for behavior if ``high=None``). ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  Default is None, in which case a     single value is returned. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.random_integers",
                    "defaultValue": "numpy.random.RandomState.random_integers",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "RandomState.random_sample",
            "description": "\nReturn random floats in the half-open interval [0.0, 1.0).\n\nResults are from the \"continuous uniform\" distribution over the\nstated interval.  To sample :math:`Unif[a, b), b > a` multiply\nthe output of `random_sample` by `(b-a)` and add `a`::\n\n  (b - a) * random_sample() + a\n\n.. note::\n    New code should use the ``random`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  Default is None, in which case a\n    single value is returned.\n\nReturns\n-------\nout : float or ndarray of floats\n    Array of random floats of shape `size` (unless ``size=None``, in which\n    case a single float is returned).\n\nSee Also\n--------\nrandom.Generator.random: which should be used for new code.\n\nExamples\n--------\n>>> np.random.random_sample()\n0.47108547995356098 # random\n>>> type(np.random.random_sample())\n<class 'float'>\n>>> np.random.random_sample((5,))\narray([ 0.30220482,  0.86820401,  0.1654503 ,  0.11659149,  0.54323428]) # random\n\nThree-by-two array of random numbers from [-5, 0):\n\n>>> 5 * np.random.random_sample((3, 2)) - 5\narray([[-3.99149989, -0.52338984], # random\n       [-2.99091858, -0.79479508],\n       [-1.23204345, -1.75224494]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "765b73089c82d9ef3432708c9684354a9c0df45e1b9b3fba34ff2582226e4fb1",
            "fields": [
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  Default is None, in which case a     single value is returned. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.random_sample",
                    "defaultValue": "numpy.random.RandomState.random_sample",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "RandomState.rayleigh",
            "description": "\nDraw samples from a Rayleigh distribution.\n\nThe :math:`\\chi` and Weibull distributions are generalizations of the\nRayleigh.\n\n.. note::\n    New code should use the ``rayleigh`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\nscale : float or array_like of floats, optional\n    Scale, also equals the mode. Must be non-negative. Default is 1.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``scale`` is a scalar.  Otherwise,\n    ``np.array(scale).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized Rayleigh distribution.\n\nSee Also\n--------\nrandom.Generator.rayleigh: which should be used for new code.\n\nNotes\n-----\nThe probability density function for the Rayleigh distribution is\n\n.. math:: P(x;scale) = \\frac{x}{scale^2}e^{\\frac{-x^2}{2 \\cdotp scale^2}}\n\nThe Rayleigh distribution would arise, for example, if the East\nand North components of the wind velocity had identical zero-mean\nGaussian distributions.  Then the wind speed would have a Rayleigh\ndistribution.\n\nReferences\n----------\n.. [1] Brighton Webs Ltd., \"Rayleigh Distribution,\"\n       https://web.archive.org/web/20090514091424/http://brighton-webs.co.uk:80/distributions/rayleigh.asp\n.. [2] Wikipedia, \"Rayleigh distribution\"\n       https://en.wikipedia.org/wiki/Rayleigh_distribution\n\nExamples\n--------\nDraw values from the distribution and plot the histogram\n\n>>> from matplotlib.pyplot import hist\n>>> values = hist(np.random.rayleigh(3, 100000), bins=200, density=True)\n\nWave heights tend to follow a Rayleigh distribution. If the mean wave\nheight is 1 meter, what fraction of waves are likely to be larger than 3\nmeters?\n\n>>> meanvalue = 1\n>>> modevalue = np.sqrt(2 / np.pi) * meanvalue\n>>> s = np.random.rayleigh(modevalue, 1000000)\n\nThe percentage of waves larger than 3 meters is:\n\n>>> 100.*sum(s>3)/1000000.\n0.087300000000000003 # random",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7dbac51dc5f903bdacfffbf274a66960c7bf31928aebc2ac4fdcdc78e52c0028",
            "fields": [
                {
                    "name": "scale",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats, optional     Scale, also equals the mode. Must be non-negative. Default is 1. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  If size is ``None`` (default),     a single value is returned if ``scale`` is a scalar.  Otherwise,     ``np.array(scale).size`` samples are drawn. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.rayleigh",
                    "defaultValue": "numpy.random.RandomState.rayleigh",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "RandomState.seed",
            "description": "\nReseed a legacy MT19937 BitGenerator\n\nNotes\n-----\nThis is a convenience, legacy function.\n\nThe best practice is to **not** reseed a BitGenerator, rather to\nrecreate a new one. This method is here for legacy reasons.\nThis example demonstrates best practice.\n\n>>> from numpy.random import MT19937\n>>> from numpy.random import RandomState, SeedSequence\n>>> rs = RandomState(MT19937(SeedSequence(123456789)))\n# Later, you want to restart the stream\n>>> rs = RandomState(MT19937(SeedSequence(987654321)))",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "63be381f1e50d1c5ebdf66957d7b98130f4b7e0999159bfdb132fc4cce6c46b3",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.seed",
                    "defaultValue": "numpy.random.RandomState.seed",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "RandomState.set_state",
            "description": "\nSet the internal state of the generator from a tuple.\n\nFor use if one has reason to manually (re-)set the internal state of\nthe bit generator used by the RandomState instance. By default,\nRandomState uses the \"Mersenne Twister\"[1]_ pseudo-random number\ngenerating algorithm.\n\nParameters\n----------\nstate : {tuple(str, ndarray of 624 uints, int, int, float), dict}\n    The `state` tuple has the following items:\n\n    1. the string 'MT19937', specifying the Mersenne Twister algorithm.\n    2. a 1-D array of 624 unsigned integers ``keys``.\n    3. an integer ``pos``.\n    4. an integer ``has_gauss``.\n    5. a float ``cached_gaussian``.\n\n    If state is a dictionary, it is directly set using the BitGenerators\n    `state` property.\n\nReturns\n-------\nout : None\n    Returns 'None' on success.\n\nSee Also\n--------\nget_state\n\nNotes\n-----\n`set_state` and `get_state` are not needed to work with any of the\nrandom distributions in NumPy. If the internal state is manually altered,\nthe user should know exactly what he/she is doing.\n\nFor backwards compatibility, the form (str, array of 624 uints, int) is\nalso accepted although it is missing some information about the cached\nGaussian value: ``state = ('MT19937', keys, pos)``.\n\nReferences\n----------\n.. [1] M. Matsumoto and T. Nishimura, \"Mersenne Twister: A\n   623-dimensionally equidistributed uniform pseudorandom number\n   generator,\" *ACM Trans. on Modeling and Computer Simulation*,\n   Vol. 8, No. 1, pp. 3-30, Jan. 1998.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a50bda491d047f49d6acd30c5423b7a5075909518137c89bb2ee40dfa9326eef",
            "fields": [
                {
                    "name": "state",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "{tuple(str, ndarray of 624 uints, int, int, float), dict}     The `state` tuple has the following items:      1. the string 'MT19937', specifying the Mersenne Twister algorithm.     2. a 1-D array of 624 unsigned integers ``keys``.     3. an integer ``pos``.     4. an integer ``has_gauss``.     5. a float ``cached_gaussian``.      If state is a dictionary, it is directly set using the BitGenerators     `state` property. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.set_state",
                    "defaultValue": "numpy.random.RandomState.set_state",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "RandomState.shuffle",
            "description": "\nModify a sequence in-place by shuffling its contents.\n\nThis function only shuffles the array along the first axis of a\nmulti-dimensional array. The order of sub-arrays is changed but\ntheir contents remains the same.\n\n.. note::\n    New code should use the ``shuffle`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\nx : ndarray or MutableSequence\n    The array, list or mutable sequence to be shuffled.\n\nReturns\n-------\nNone\n\nSee Also\n--------\nrandom.Generator.shuffle: which should be used for new code.\n\nExamples\n--------\n>>> arr = np.arange(10)\n>>> np.random.shuffle(arr)\n>>> arr\n[1 7 5 2 9 4 3 6 0 8] # random\n\nMulti-dimensional arrays are only shuffled along the first axis:\n\n>>> arr = np.arange(9).reshape((3, 3))\n>>> np.random.shuffle(arr)\n>>> arr\narray([[3, 4, 5], # random\n       [6, 7, 8],\n       [0, 1, 2]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f6cd7e6f73db1ec8bf6c96b6280ce49d02fead09c1deacb1fa83865d7ec5515d",
            "fields": [
                {
                    "name": "x",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "ndarray or MutableSequence     The array, list or mutable sequence to be shuffled. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.shuffle",
                    "defaultValue": "numpy.random.RandomState.shuffle",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "RandomState.standard_cauchy",
            "description": "\nDraw samples from a standard Cauchy distribution with mode = 0.\n\nAlso known as the Lorentz distribution.\n\n.. note::\n    New code should use the ``standard_cauchy`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  Default is None, in which case a\n    single value is returned.\n\nReturns\n-------\nsamples : ndarray or scalar\n    The drawn samples.\n\nSee Also\n--------\nrandom.Generator.standard_cauchy: which should be used for new code.\n\nNotes\n-----\nThe probability density function for the full Cauchy distribution is\n\n.. math:: P(x; x_0, \\gamma) = \\frac{1}{\\pi \\gamma \\bigl[ 1+\n          (\\frac{x-x_0}{\\gamma})^2 \\bigr] }\n\nand the Standard Cauchy distribution just sets :math:`x_0=0` and\n:math:`\\gamma=1`\n\nThe Cauchy distribution arises in the solution to the driven harmonic\noscillator problem, and also describes spectral line broadening. It\nalso describes the distribution of values at which a line tilted at\na random angle will cut the x axis.\n\nWhen studying hypothesis tests that assume normality, seeing how the\ntests perform on data from a Cauchy distribution is a good indicator of\ntheir sensitivity to a heavy-tailed distribution, since the Cauchy looks\nvery much like a Gaussian distribution, but with heavier tails.\n\nReferences\n----------\n.. [1] NIST/SEMATECH e-Handbook of Statistical Methods, \"Cauchy\n      Distribution\",\n      https://www.itl.nist.gov/div898/handbook/eda/section3/eda3663.htm\n.. [2] Weisstein, Eric W. \"Cauchy Distribution.\" From MathWorld--A\n      Wolfram Web Resource.\n      http://mathworld.wolfram.com/CauchyDistribution.html\n.. [3] Wikipedia, \"Cauchy distribution\"\n      https://en.wikipedia.org/wiki/Cauchy_distribution\n\nExamples\n--------\nDraw samples and plot the distribution:\n\n>>> import matplotlib.pyplot as plt\n>>> s = np.random.standard_cauchy(1000000)\n>>> s = s[(s>-25) & (s<25)]  # truncate distribution so it plots well\n>>> plt.hist(s, bins=100)\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "06fccfdbef53f55c43110a5112d766207033d998e1037674ac849f380af8e7de",
            "fields": [
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  Default is None, in which case a     single value is returned. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.standard_cauchy",
                    "defaultValue": "numpy.random.RandomState.standard_cauchy",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "RandomState.standard_exponential",
            "description": "\nDraw samples from the standard exponential distribution.\n\n`standard_exponential` is identical to the exponential distribution\nwith a scale parameter of 1.\n\n.. note::\n    New code should use the ``standard_exponential`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  Default is None, in which case a\n    single value is returned.\n\nReturns\n-------\nout : float or ndarray\n    Drawn samples.\n\nSee Also\n--------\nrandom.Generator.standard_exponential: which should be used for new code.\n\nExamples\n--------\nOutput a 3x8000 array:\n\n>>> n = np.random.standard_exponential((3, 8000))",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c02fc3dcadbb7780376ed69803c634d45672e243eecc47388f3a0a8125001477",
            "fields": [
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  Default is None, in which case a     single value is returned. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.standard_exponential",
                    "defaultValue": "numpy.random.RandomState.standard_exponential",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "RandomState.standard_gamma",
            "description": "\nDraw samples from a standard Gamma distribution.\n\nSamples are drawn from a Gamma distribution with specified parameters,\nshape (sometimes designated \"k\") and scale=1.\n\n.. note::\n    New code should use the ``standard_gamma`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\nshape : float or array_like of floats\n    Parameter, must be non-negative.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``shape`` is a scalar.  Otherwise,\n    ``np.array(shape).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized standard gamma distribution.\n\nSee Also\n--------\nscipy.stats.gamma : probability density function, distribution or\n    cumulative density function, etc.\nrandom.Generator.standard_gamma: which should be used for new code.\n\nNotes\n-----\nThe probability density for the Gamma distribution is\n\n.. math:: p(x) = x^{k-1}\\frac{e^{-x/\\theta}}{\\theta^k\\Gamma(k)},\n\nwhere :math:`k` is the shape and :math:`\\theta` the scale,\nand :math:`\\Gamma` is the Gamma function.\n\nThe Gamma distribution is often used to model the times to failure of\nelectronic components, and arises naturally in processes for which the\nwaiting times between Poisson distributed events are relevant.\n\nReferences\n----------\n.. [1] Weisstein, Eric W. \"Gamma Distribution.\" From MathWorld--A\n       Wolfram Web Resource.\n       http://mathworld.wolfram.com/GammaDistribution.html\n.. [2] Wikipedia, \"Gamma distribution\",\n       https://en.wikipedia.org/wiki/Gamma_distribution\n\nExamples\n--------\nDraw samples from the distribution:\n\n>>> shape, scale = 2., 1. # mean and width\n>>> s = np.random.standard_gamma(shape, 1000000)\n\nDisplay the histogram of the samples, along with\nthe probability density function:\n\n>>> import matplotlib.pyplot as plt\n>>> import scipy.special as sps  # doctest: +SKIP\n>>> count, bins, ignored = plt.hist(s, 50, density=True)\n>>> y = bins**(shape-1) * ((np.exp(-bins/scale))/  # doctest: +SKIP\n...                       (sps.gamma(shape) * scale**shape))\n>>> plt.plot(bins, y, linewidth=2, color='r')  # doctest: +SKIP\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "78d06f57acdcc7dff6cfb6fa6154f71a133d71429dc28c25d6dbbb6efb826835",
            "fields": [
                {
                    "name": "shape",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     Parameter, must be non-negative. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  If size is ``None`` (default),     a single value is returned if ``shape`` is a scalar.  Otherwise,     ``np.array(shape).size`` samples are drawn. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.standard_gamma",
                    "defaultValue": "numpy.random.RandomState.standard_gamma",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "RandomState.standard_normal",
            "description": "\nDraw samples from a standard Normal distribution (mean=0, stdev=1).\n\n.. note::\n    New code should use the ``standard_normal`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  Default is None, in which case a\n    single value is returned.\n\nReturns\n-------\nout : float or ndarray\n    A floating-point array of shape ``size`` of drawn samples, or a\n    single sample if ``size`` was not specified.\n\nSee Also\n--------\nnormal :\n    Equivalent function with additional ``loc`` and ``scale`` arguments\n    for setting the mean and standard deviation.\nrandom.Generator.standard_normal: which should be used for new code.\n\nNotes\n-----\nFor random samples from :math:`N(\\mu, \\sigma^2)`, use one of::\n\n    mu + sigma * np.random.standard_normal(size=...)\n    np.random.normal(mu, sigma, size=...)\n\nExamples\n--------\n>>> np.random.standard_normal()\n2.1923875335537315 #random\n\n>>> s = np.random.standard_normal(8000)\n>>> s\narray([ 0.6888893 ,  0.78096262, -0.89086505, ...,  0.49876311,  # random\n       -0.38672696, -0.4685006 ])                                # random\n>>> s.shape\n(8000,)\n>>> s = np.random.standard_normal(size=(3, 4, 2))\n>>> s.shape\n(3, 4, 2)\n\nTwo-by-four array of samples from :math:`N(3, 6.25)`:\n\n>>> 3 + 2.5 * np.random.standard_normal(size=(2, 4))\narray([[-4.49401501,  4.00950034, -1.81814867,  7.29718677],   # random\n       [ 0.39924804,  4.68456316,  4.99394529,  4.84057254]])  # random",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "fb1f35891ab99656c217774addbd146d0d15a51d4e0daac1ba8b44f0eef8d39f",
            "fields": [
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  Default is None, in which case a     single value is returned. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.standard_normal",
                    "defaultValue": "numpy.random.RandomState.standard_normal",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "RandomState.standard_t",
            "description": "\nDraw samples from a standard Student's t distribution with `df` degrees\nof freedom.\n\nA special case of the hyperbolic distribution.  As `df` gets\nlarge, the result resembles that of the standard normal\ndistribution (`standard_normal`).\n\n.. note::\n    New code should use the ``standard_t`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\ndf : float or array_like of floats\n    Degrees of freedom, must be > 0.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``df`` is a scalar.  Otherwise,\n    ``np.array(df).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized standard Student's t distribution.\n\nSee Also\n--------\nrandom.Generator.standard_t: which should be used for new code.\n\nNotes\n-----\nThe probability density function for the t distribution is\n\n.. math:: P(x, df) = \\frac{\\Gamma(\\frac{df+1}{2})}{\\sqrt{\\pi df}\n          \\Gamma(\\frac{df}{2})}\\Bigl( 1+\\frac{x^2}{df} \\Bigr)^{-(df+1)/2}\n\nThe t test is based on an assumption that the data come from a\nNormal distribution. The t test provides a way to test whether\nthe sample mean (that is the mean calculated from the data) is\na good estimate of the true mean.\n\nThe derivation of the t-distribution was first published in\n1908 by William Gosset while working for the Guinness Brewery\nin Dublin. Due to proprietary issues, he had to publish under\na pseudonym, and so he used the name Student.\n\nReferences\n----------\n.. [1] Dalgaard, Peter, \"Introductory Statistics With R\",\n       Springer, 2002.\n.. [2] Wikipedia, \"Student's t-distribution\"\n       https://en.wikipedia.org/wiki/Student's_t-distribution\n\nExamples\n--------\nFrom Dalgaard page 83 [1]_, suppose the daily energy intake for 11\nwomen in kilojoules (kJ) is:\n\n>>> intake = np.array([5260., 5470, 5640, 6180, 6390, 6515, 6805, 7515, \\\n...                    7515, 8230, 8770])\n\nDoes their energy intake deviate systematically from the recommended\nvalue of 7725 kJ? Our null hypothesis will be the absence of deviation,\nand the alternate hypothesis will be the presence of an effect that could be\neither positive or negative, hence making our test 2-tailed. \n\nBecause we are estimating the mean and we have N=11 values in our sample,\nwe have N-1=10 degrees of freedom. We set our significance level to 95% and \ncompute the t statistic using the empirical mean and empirical standard \ndeviation of our intake. We use a ddof of 1 to base the computation of our \nempirical standard deviation on an unbiased estimate of the variance (note:\nthe final estimate is not unbiased due to the concave nature of the square \nroot).\n\n>>> np.mean(intake)\n6753.636363636364\n>>> intake.std(ddof=1)\n1142.1232221373727\n>>> t = (np.mean(intake)-7725)/(intake.std(ddof=1)/np.sqrt(len(intake)))\n>>> t\n-2.8207540608310198\n\nWe draw 1000000 samples from Student's t distribution with the adequate\ndegrees of freedom.\n\n>>> import matplotlib.pyplot as plt\n>>> s = np.random.standard_t(10, size=1000000)\n>>> h = plt.hist(s, bins=100, density=True)\n\nDoes our t statistic land in one of the two critical regions found at \nboth tails of the distribution?\n\n>>> np.sum(np.abs(t) < np.abs(s)) / float(len(s))\n0.018318  #random < 0.05, statistic is in critical region\n\nThe probability value for this 2-tailed test is about 1.83%, which is \nlower than the 5% pre-determined significance threshold. \n\nTherefore, the probability of observing values as extreme as our intake\nconditionally on the null hypothesis being true is too low, and we reject \nthe null hypothesis of no deviation. ",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d224c6505297e022c302bc5deb77048095e815599765ab83144b8c125fb09ec6",
            "fields": [
                {
                    "name": "df",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     Degrees of freedom, must be > 0. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  If size is ``None`` (default),     a single value is returned if ``df`` is a scalar.  Otherwise,     ``np.array(df).size`` samples are drawn. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.standard_t",
                    "defaultValue": "numpy.random.RandomState.standard_t",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "RandomState.tomaxint",
            "description": "\nReturn a sample of uniformly distributed random integers in the interval\n[0, ``np.iinfo(np.int_).max``]. The `np.int_` type translates to the C long\ninteger type and its precision is platform dependent.\n\nParameters\n----------\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  Default is None, in which case a\n    single value is returned.\n\nReturns\n-------\nout : ndarray\n    Drawn samples, with shape `size`.\n\nSee Also\n--------\nrandint : Uniform sampling over a given half-open interval of integers.\nrandom_integers : Uniform sampling over a given closed interval of\n    integers.\n\nExamples\n--------\n>>> rs = np.random.RandomState() # need a RandomState object\n>>> rs.tomaxint((2,2,2))\narray([[[1170048599, 1600360186], # random\n        [ 739731006, 1947757578]],\n       [[1871712945,  752307660],\n        [1601631370, 1479324245]]])\n>>> rs.tomaxint((2,2,2)) < np.iinfo(np.int_).max\narray([[[ True,  True],\n        [ True,  True]],\n       [[ True,  True],\n        [ True,  True]]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "753f7ed1f5facacb1c0e870da0494b2f2525625a12f840d16fa89dd471ef275a",
            "fields": [
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  Default is None, in which case a     single value is returned. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.tomaxint",
                    "defaultValue": "numpy.random.RandomState.tomaxint",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "RandomState.triangular",
            "description": "\nDraw samples from the triangular distribution over the\ninterval ``[left, right]``.\n\nThe triangular distribution is a continuous probability\ndistribution with lower limit left, peak at mode, and upper\nlimit right. Unlike the other distributions, these parameters\ndirectly define the shape of the pdf.\n\n.. note::\n    New code should use the ``triangular`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\nleft : float or array_like of floats\n    Lower limit.\nmode : float or array_like of floats\n    The value where the peak of the distribution occurs.\n    The value must fulfill the condition ``left <= mode <= right``.\nright : float or array_like of floats\n    Upper limit, must be larger than `left`.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``left``, ``mode``, and ``right``\n    are all scalars.  Otherwise, ``np.broadcast(left, mode, right).size``\n    samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized triangular distribution.\n\nSee Also\n--------\nrandom.Generator.triangular: which should be used for new code.\n\nNotes\n-----\nThe probability density function for the triangular distribution is\n\n.. math:: P(x;l, m, r) = \\begin{cases}\n          \\frac{2(x-l)}{(r-l)(m-l)}& \\text{for $l \\leq x \\leq m$},\\\\\n          \\frac{2(r-x)}{(r-l)(r-m)}& \\text{for $m \\leq x \\leq r$},\\\\\n          0& \\text{otherwise}.\n          \\end{cases}\n\nThe triangular distribution is often used in ill-defined\nproblems where the underlying distribution is not known, but\nsome knowledge of the limits and mode exists. Often it is used\nin simulations.\n\nReferences\n----------\n.. [1] Wikipedia, \"Triangular distribution\"\n       https://en.wikipedia.org/wiki/Triangular_distribution\n\nExamples\n--------\nDraw values from the distribution and plot the histogram:\n\n>>> import matplotlib.pyplot as plt\n>>> h = plt.hist(np.random.triangular(-3, 0, 8, 100000), bins=200,\n...              density=True)\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "68952a5b1ccfc38450c4b65b17c7c716c551f9552ff7def97bee152fb30cf919",
            "fields": [
                {
                    "name": "left",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     Lower limit. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mode",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     The value where the peak of the distribution occurs.     The value must fulfill the condition ``left <= mode <= right``. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "right",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     Upper limit, must be larger than `left`. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  If size is ``None`` (default),     a single value is returned if ``left``, ``mode``, and ``right``     are all scalars.  Otherwise, ``np.broadcast(left, mode, right).size``     samples are drawn. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.triangular",
                    "defaultValue": "numpy.random.RandomState.triangular",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "RandomState.uniform",
            "description": "\nDraw samples from a uniform distribution.\n\nSamples are uniformly distributed over the half-open interval\n``[low, high)`` (includes low, but excludes high).  In other words,\nany value within the given interval is equally likely to be drawn\nby `uniform`.\n\n.. note::\n    New code should use the ``uniform`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\nlow : float or array_like of floats, optional\n    Lower boundary of the output interval.  All values generated will be\n    greater than or equal to low.  The default value is 0.\nhigh : float or array_like of floats\n    Upper boundary of the output interval.  All values generated will be\n    less than or equal to high.  The high limit may be included in the \n    returned array of floats due to floating-point rounding in the \n    equation ``low + (high-low) * random_sample()``.  The default value \n    is 1.0.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``low`` and ``high`` are both scalars.\n    Otherwise, ``np.broadcast(low, high).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized uniform distribution.\n\nSee Also\n--------\nrandint : Discrete uniform distribution, yielding integers.\nrandom_integers : Discrete uniform distribution over the closed\n                  interval ``[low, high]``.\nrandom_sample : Floats uniformly distributed over ``[0, 1)``.\nrandom : Alias for `random_sample`.\nrand : Convenience function that accepts dimensions as input, e.g.,\n       ``rand(2,2)`` would generate a 2-by-2 array of floats,\n       uniformly distributed over ``[0, 1)``.\nrandom.Generator.uniform: which should be used for new code.\n\nNotes\n-----\nThe probability density function of the uniform distribution is\n\n.. math:: p(x) = \\frac{1}{b - a}\n\nanywhere within the interval ``[a, b)``, and zero elsewhere.\n\nWhen ``high`` == ``low``, values of ``low`` will be returned.\nIf ``high`` < ``low``, the results are officially undefined\nand may eventually raise an error, i.e. do not rely on this\nfunction to behave when passed arguments satisfying that\ninequality condition. The ``high`` limit may be included in the\nreturned array of floats due to floating-point rounding in the\nequation ``low + (high-low) * random_sample()``. For example:\n\n>>> x = np.float32(5*0.99999999)\n>>> x\n5.0\n\n\nExamples\n--------\nDraw samples from the distribution:\n\n>>> s = np.random.uniform(-1,0,1000)\n\nAll values are within the given interval:\n\n>>> np.all(s >= -1)\nTrue\n>>> np.all(s < 0)\nTrue\n\nDisplay the histogram of the samples, along with the\nprobability density function:\n\n>>> import matplotlib.pyplot as plt\n>>> count, bins, ignored = plt.hist(s, 15, density=True)\n>>> plt.plot(bins, np.ones_like(bins), linewidth=2, color='r')\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "62e63932ac14cad8e84fa7b112729320ffdf130ddc74cd791e784e23c7fcccf6",
            "fields": [
                {
                    "name": "low",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats, optional     Lower boundary of the output interval.  All values generated will be     greater than or equal to low.  The default value is 0. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "high",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     Upper boundary of the output interval.  All values generated will be     less than or equal to high.  The high limit may be included in the      returned array of floats due to floating-point rounding in the      equation ``low + (high-low) * random_sample()``.  The default value      is 1.0. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  If size is ``None`` (default),     a single value is returned if ``low`` and ``high`` are both scalars.     Otherwise, ``np.broadcast(low, high).size`` samples are drawn. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.uniform",
                    "defaultValue": "numpy.random.RandomState.uniform",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "RandomState.vonmises",
            "description": "\nDraw samples from a von Mises distribution.\n\nSamples are drawn from a von Mises distribution with specified mode\n(mu) and dispersion (kappa), on the interval [-pi, pi].\n\nThe von Mises distribution (also known as the circular normal\ndistribution) is a continuous probability distribution on the unit\ncircle.  It may be thought of as the circular analogue of the normal\ndistribution.\n\n.. note::\n    New code should use the ``vonmises`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\nmu : float or array_like of floats\n    Mode (\"center\") of the distribution.\nkappa : float or array_like of floats\n    Dispersion of the distribution, has to be >=0.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``mu`` and ``kappa`` are both scalars.\n    Otherwise, ``np.broadcast(mu, kappa).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized von Mises distribution.\n\nSee Also\n--------\nscipy.stats.vonmises : probability density function, distribution, or\n    cumulative density function, etc.\nrandom.Generator.vonmises: which should be used for new code.\n\nNotes\n-----\nThe probability density for the von Mises distribution is\n\n.. math:: p(x) = \\frac{e^{\\kappa cos(x-\\mu)}}{2\\pi I_0(\\kappa)},\n\nwhere :math:`\\mu` is the mode and :math:`\\kappa` the dispersion,\nand :math:`I_0(\\kappa)` is the modified Bessel function of order 0.\n\nThe von Mises is named for Richard Edler von Mises, who was born in\nAustria-Hungary, in what is now the Ukraine.  He fled to the United\nStates in 1939 and became a professor at Harvard.  He worked in\nprobability theory, aerodynamics, fluid mechanics, and philosophy of\nscience.\n\nReferences\n----------\n.. [1] Abramowitz, M. and Stegun, I. A. (Eds.). \"Handbook of\n       Mathematical Functions with Formulas, Graphs, and Mathematical\n       Tables, 9th printing,\" New York: Dover, 1972.\n.. [2] von Mises, R., \"Mathematical Theory of Probability\n       and Statistics\", New York: Academic Press, 1964.\n\nExamples\n--------\nDraw samples from the distribution:\n\n>>> mu, kappa = 0.0, 4.0 # mean and dispersion\n>>> s = np.random.vonmises(mu, kappa, 1000)\n\nDisplay the histogram of the samples, along with\nthe probability density function:\n\n>>> import matplotlib.pyplot as plt\n>>> from scipy.special import i0  # doctest: +SKIP\n>>> plt.hist(s, 50, density=True)\n>>> x = np.linspace(-np.pi, np.pi, num=51)\n>>> y = np.exp(kappa*np.cos(x-mu))/(2*np.pi*i0(kappa))  # doctest: +SKIP\n>>> plt.plot(x, y, linewidth=2, color='r')  # doctest: +SKIP\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "887c38a7b3f27b2445a8bad6b2227bcc453e264a6aae1ea983df36ab41427b9f",
            "fields": [
                {
                    "name": "mu",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     Mode (\"center\") of the distribution. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "kappa",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     Dispersion of the distribution, has to be >=0. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  If size is ``None`` (default),     a single value is returned if ``mu`` and ``kappa`` are both scalars.     Otherwise, ``np.broadcast(mu, kappa).size`` samples are drawn. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.vonmises",
                    "defaultValue": "numpy.random.RandomState.vonmises",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "RandomState.wald",
            "description": "\nDraw samples from a Wald, or inverse Gaussian, distribution.\n\nAs the scale approaches infinity, the distribution becomes more like a\nGaussian. Some references claim that the Wald is an inverse Gaussian\nwith mean equal to 1, but this is by no means universal.\n\nThe inverse Gaussian distribution was first studied in relationship to\nBrownian motion. In 1956 M.C.K. Tweedie used the name inverse Gaussian\nbecause there is an inverse relationship between the time to cover a\nunit distance and distance covered in unit time.\n\n.. note::\n    New code should use the ``wald`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\nmean : float or array_like of floats\n    Distribution mean, must be > 0.\nscale : float or array_like of floats\n    Scale parameter, must be > 0.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``mean`` and ``scale`` are both scalars.\n    Otherwise, ``np.broadcast(mean, scale).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized Wald distribution.\n\nSee Also\n--------\nrandom.Generator.wald: which should be used for new code.\n\nNotes\n-----\nThe probability density function for the Wald distribution is\n\n.. math:: P(x;mean,scale) = \\sqrt{\\frac{scale}{2\\pi x^3}}e^\n                            \\frac{-scale(x-mean)^2}{2\\cdotp mean^2x}\n\nAs noted above the inverse Gaussian distribution first arise\nfrom attempts to model Brownian motion. It is also a\ncompetitor to the Weibull for use in reliability modeling and\nmodeling stock returns and interest rate processes.\n\nReferences\n----------\n.. [1] Brighton Webs Ltd., Wald Distribution,\n       https://web.archive.org/web/20090423014010/http://www.brighton-webs.co.uk:80/distributions/wald.asp\n.. [2] Chhikara, Raj S., and Folks, J. Leroy, \"The Inverse Gaussian\n       Distribution: Theory : Methodology, and Applications\", CRC Press,\n       1988.\n.. [3] Wikipedia, \"Inverse Gaussian distribution\"\n       https://en.wikipedia.org/wiki/Inverse_Gaussian_distribution\n\nExamples\n--------\nDraw values from the distribution and plot the histogram:\n\n>>> import matplotlib.pyplot as plt\n>>> h = plt.hist(np.random.wald(3, 2, 100000), bins=200, density=True)\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2ae4be3f3ea78f061fd91ddcefb1cb60c7ef5b2cc673df794ec6de1e542a7531",
            "fields": [
                {
                    "name": "mean",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     Distribution mean, must be > 0. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "scale",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     Scale parameter, must be > 0. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  If size is ``None`` (default),     a single value is returned if ``mean`` and ``scale`` are both scalars.     Otherwise, ``np.broadcast(mean, scale).size`` samples are drawn. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.wald",
                    "defaultValue": "numpy.random.RandomState.wald",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "RandomState.weibull",
            "description": "\nDraw samples from a Weibull distribution.\n\nDraw samples from a 1-parameter Weibull distribution with the given\nshape parameter `a`.\n\n.. math:: X = (-ln(U))^{1/a}\n\nHere, U is drawn from the uniform distribution over (0,1].\n\nThe more common 2-parameter Weibull, including a scale parameter\n:math:`\\lambda` is just :math:`X = \\lambda(-ln(U))^{1/a}`.\n\n.. note::\n    New code should use the ``weibull`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\na : float or array_like of floats\n    Shape parameter of the distribution.  Must be nonnegative.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``a`` is a scalar.  Otherwise,\n    ``np.array(a).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized Weibull distribution.\n\nSee Also\n--------\nscipy.stats.weibull_max\nscipy.stats.weibull_min\nscipy.stats.genextreme\ngumbel\nrandom.Generator.weibull: which should be used for new code.\n\nNotes\n-----\nThe Weibull (or Type III asymptotic extreme value distribution\nfor smallest values, SEV Type III, or Rosin-Rammler\ndistribution) is one of a class of Generalized Extreme Value\n(GEV) distributions used in modeling extreme value problems.\nThis class includes the Gumbel and Frechet distributions.\n\nThe probability density for the Weibull distribution is\n\n.. math:: p(x) = \\frac{a}\n                 {\\lambda}(\\frac{x}{\\lambda})^{a-1}e^{-(x/\\lambda)^a},\n\nwhere :math:`a` is the shape and :math:`\\lambda` the scale.\n\nThe function has its peak (the mode) at\n:math:`\\lambda(\\frac{a-1}{a})^{1/a}`.\n\nWhen ``a = 1``, the Weibull distribution reduces to the exponential\ndistribution.\n\nReferences\n----------\n.. [1] Waloddi Weibull, Royal Technical University, Stockholm,\n       1939 \"A Statistical Theory Of The Strength Of Materials\",\n       Ingeniorsvetenskapsakademiens Handlingar Nr 151, 1939,\n       Generalstabens Litografiska Anstalts Forlag, Stockholm.\n.. [2] Waloddi Weibull, \"A Statistical Distribution Function of\n       Wide Applicability\", Journal Of Applied Mechanics ASME Paper\n       1951.\n.. [3] Wikipedia, \"Weibull distribution\",\n       https://en.wikipedia.org/wiki/Weibull_distribution\n\nExamples\n--------\nDraw samples from the distribution:\n\n>>> a = 5. # shape\n>>> s = np.random.weibull(a, 1000)\n\nDisplay the histogram of the samples, along with\nthe probability density function:\n\n>>> import matplotlib.pyplot as plt\n>>> x = np.arange(1,100.)/50.\n>>> def weib(x,n,a):\n...     return (a / n) * (x / n)**(a - 1) * np.exp(-(x / n)**a)\n\n>>> count, bins, ignored = plt.hist(np.random.weibull(5.,1000))\n>>> x = np.arange(1,100.)/50.\n>>> scale = count.max()/weib(x, 1., 5.).max()\n>>> plt.plot(x, weib(x, 1., 5.)*scale)\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "bd432e5d050b114080c5b4acd9a1de496564e833cc9869cf54023b077d62a5dd",
            "fields": [
                {
                    "name": "a",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     Shape parameter of the distribution.  Must be nonnegative. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  If size is ``None`` (default),     a single value is returned if ``a`` is a scalar.  Otherwise,     ``np.array(a).size`` samples are drawn. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.weibull",
                    "defaultValue": "numpy.random.RandomState.weibull",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "RandomState.zipf",
            "description": "\nDraw samples from a Zipf distribution.\n\nSamples are drawn from a Zipf distribution with specified parameter\n`a` > 1.\n\nThe Zipf distribution (also known as the zeta distribution) is a\ndiscrete probability distribution that satisfies Zipf's law: the\nfrequency of an item is inversely proportional to its rank in a\nfrequency table.\n\n.. note::\n    New code should use the ``zipf`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\na : float or array_like of floats\n    Distribution parameter. Must be greater than 1.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``a`` is a scalar. Otherwise,\n    ``np.array(a).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized Zipf distribution.\n\nSee Also\n--------\nscipy.stats.zipf : probability density function, distribution, or\n    cumulative density function, etc.\nrandom.Generator.zipf: which should be used for new code.\n\nNotes\n-----\nThe probability density for the Zipf distribution is\n\n.. math:: p(k) = \\frac{k^{-a}}{\\zeta(a)},\n\nfor integers :math:`k \\geq 1`, where :math:`\\zeta` is the Riemann Zeta\nfunction.\n\nIt is named for the American linguist George Kingsley Zipf, who noted\nthat the frequency of any word in a sample of a language is inversely\nproportional to its rank in the frequency table.\n\nReferences\n----------\n.. [1] Zipf, G. K., \"Selected Studies of the Principle of Relative\n       Frequency in Language,\" Cambridge, MA: Harvard Univ. Press,\n       1932.\n\nExamples\n--------\nDraw samples from the distribution:\n\n>>> a = 4.0\n>>> n = 20000\n>>> s = np.random.zipf(a, n)\n\nDisplay the histogram of the samples, along with\nthe expected histogram based on the probability\ndensity function:\n\n>>> import matplotlib.pyplot as plt\n>>> from scipy.special import zeta  # doctest: +SKIP\n\n`bincount` provides a fast histogram for small integers.\n\n>>> count = np.bincount(s)\n>>> k = np.arange(1, s.max() + 1)\n\n>>> plt.bar(k, count[1:], alpha=0.5, label='sample count')\n>>> plt.plot(k, n*(k**-a)/zeta(a), 'k.-', alpha=0.5,\n...          label='expected count')   # doctest: +SKIP\n>>> plt.semilogy()\n>>> plt.grid(alpha=0.4)\n>>> plt.legend()\n>>> plt.title(f'Zipf sample, a={a}, size={n}')\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "fa60ac5b740633bf0bde1e37a9d5a2a6f56e53cd4d50e9541c29f2765fff7bd2",
            "fields": [
                {
                    "name": "a",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "float or array_like of floats     Distribution parameter. Must be greater than 1. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int or tuple of ints, optional     Output shape.  If the given shape is, e.g., ``(m, n, k)``, then     ``m * n * k`` samples are drawn.  If size is ``None`` (default),     a single value is returned if ``a`` is a scalar. Otherwise,     ``np.array(a).size`` samples are drawn. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.zipf",
                    "defaultValue": "numpy.random.RandomState.zipf",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "SFC64.__init__",
            "description": "No description found\nSFC64(seed=None)\n    \n    BitGenerator for Chris Doty-Humphrey's Small Fast Chaotic PRNG.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "20b6104be71fb993f16781d38845a4cf5681549727b2ffeaea4a8b3f44c0cf79",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to object",
                    "type": "numpy.random.SFC64",
                    "parameterType": "ApplicationArgument",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": true
                },
                {
                    "name": "args",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "kwargs",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.SFC64.__init__",
                    "defaultValue": "numpy.random.SFC64.__init__",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "SeedSequence.__init__",
            "description": "No description found\nSeedSequence(entropy=None, *, spawn_key=(), pool_size=4)\n    \n    SeedSequence mixes sources of entropy in a reproducible way to set the\n    initial state for independent and very probably non-overlapping\n    BitGenerators.\n    \n    Once the SeedSequence is instantiated, you can call the `generate_state`\n    method to get an appropriately sized seed. Calling `spawn(n) <spawn>` will\n    create ``n`` SeedSequences that can be used to seed independent\n    BitGenerators, i.e. for different threads.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "0cedd9487a31fa47f0cfe04057395bb1f50251620de52b4b482c69f9824302a8",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to object",
                    "type": "numpy.random.SeedSequence",
                    "parameterType": "ApplicationArgument",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": true
                },
                {
                    "name": "args",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "kwargs",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.SeedSequence.__init__",
                    "defaultValue": "numpy.random.SeedSequence.__init__",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "SeedSequence.generate_state",
            "description": "\nReturn the requested number of words for PRNG seeding.\n\nA BitGenerator should call this method in its constructor with\nan appropriate `n_words` parameter to properly seed itself.\n\nParameters\n----------\nn_words : int\ndtype : np.uint32 or np.uint64, optional\n    The size of each word. This should only be either `uint32` or\n    `uint64`. Strings (`'uint32'`, `'uint64'`) are fine. Note that\n    requesting `uint64` will draw twice as many bits as `uint32` for\n    the same `n_words`. This is a convenience for `BitGenerator`s that\n    express their states as `uint64` arrays.\n\nReturns\n-------\nstate : uint32 or uint64 array, shape=(n_words,)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7595e0d42b5b23c9aa8b0f35f6369199943a5a967619a3f45a930e6ce3f6fc8e",
            "fields": [
                {
                    "name": "n_words",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dtype",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "np.uint32 or np.uint64, optional     The size of each word. This should only be either `uint32` or     `uint64`. Strings (`'uint32'`, `'uint64'`) are fine. Note that     requesting `uint64` will draw twice as many bits as `uint32` for     the same `n_words`. This is a convenience for `BitGenerator`s that     express their states as `uint64` arrays. ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "contextlib.SeedSequence.generate_state",
                    "defaultValue": "contextlib.SeedSequence.generate_state",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "SeedSequence.spawn",
            "description": "\nSpawn a number of child `SeedSequence` s by extending the\n`spawn_key`.\n\nParameters\n----------\nn_children : int\n\nReturns\n-------\nseqs : list of `SeedSequence` s",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "357f38f4fa9000d4686f3e4e0085dc99218348c8ff2fd8219e5f67dee4b66132",
            "fields": [
                {
                    "name": "n_children",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int ",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.SeedSequence.spawn",
                    "defaultValue": "numpy.random.SeedSequence.spawn",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "numpy.random.beta",
            "description": "\nDraw samples from a Beta distribution.\n\nThe Beta distribution is a special case of the Dirichlet distribution,\nand is related to the Gamma distribution.  It has the probability\ndistribution function\n\n.. math:: f(x; a,b) = \\frac{1}{B(\\alpha, \\beta)} x^{\\alpha - 1}\n                                                 (1 - x)^{\\beta - 1},\n\nwhere the normalization, B, is the beta function,\n\n.. math:: B(\\alpha, \\beta) = \\int_0^1 t^{\\alpha - 1}\n                             (1 - t)^{\\beta - 1} dt.\n\nIt is often seen in Bayesian inference and order statistics.\n\n.. note::\n    New code should use the ``beta`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\na : float or array_like of floats\n    Alpha, positive (>0).\nb : float or array_like of floats\n    Beta, positive (>0).\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``a`` and ``b`` are both scalars.\n    Otherwise, ``np.broadcast(a, b).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized beta distribution.\n\nSee Also\n--------\nrandom.Generator.beta: which should be used for new code.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1a92fbcc161ef3df966cae683ba2d3b0c78b842207840b348c99a4cc29a576b3",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.beta",
                    "defaultValue": "numpy.random.RandomState.beta",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "numpy.random.binomial",
            "description": "\nDraw samples from a binomial distribution.\n\nSamples are drawn from a binomial distribution with specified\nparameters, n trials and p probability of success where\nn an integer >= 0 and p is in the interval [0,1]. (n may be\ninput as a float, but it is truncated to an integer in use)\n\n.. note::\n    New code should use the ``binomial`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\nn : int or array_like of ints\n    Parameter of the distribution, >= 0. Floats are also accepted,\n    but they will be truncated to integers.\np : float or array_like of floats\n    Parameter of the distribution, >= 0 and <=1.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``n`` and ``p`` are both scalars.\n    Otherwise, ``np.broadcast(n, p).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized binomial distribution, where\n    each sample is equal to the number of successes over the n trials.\n\nSee Also\n--------\nscipy.stats.binom : probability density function, distribution or\n    cumulative density function, etc.\nrandom.Generator.binomial: which should be used for new code.\n\nNotes\n-----\nThe probability density for the binomial distribution is\n\n.. math:: P(N) = \\binom{n}{N}p^N(1-p)^{n-N},\n\nwhere :math:`n` is the number of trials, :math:`p` is the probability\nof success, and :math:`N` is the number of successes.\n\nWhen estimating the standard error of a proportion in a population by\nusing a random sample, the normal distribution works well unless the\nproduct p*n <=5, where p = population proportion estimate, and n =\nnumber of samples, in which case the binomial distribution is used\ninstead. For example, a sample of 15 people shows 4 who are left\nhanded, and 11 who are right handed. Then p = 4/15 = 27%. 0.27*15 = 4,\nso the binomial distribution should be used in this case.\n\nReferences\n----------\n.. [1] Dalgaard, Peter, \"Introductory Statistics with R\",\n       Springer-Verlag, 2002.\n.. [2] Glantz, Stanton A. \"Primer of Biostatistics.\", McGraw-Hill,\n       Fifth Edition, 2002.\n.. [3] Lentner, Marvin, \"Elementary Applied Statistics\", Bogden\n       and Quigley, 1972.\n.. [4] Weisstein, Eric W. \"Binomial Distribution.\" From MathWorld--A\n       Wolfram Web Resource.\n       http://mathworld.wolfram.com/BinomialDistribution.html\n.. [5] Wikipedia, \"Binomial distribution\",\n       https://en.wikipedia.org/wiki/Binomial_distribution\n\nExamples\n--------\nDraw samples from the distribution:\n\n>>> n, p = 10, .5  # number of trials, probability of each trial\n>>> s = np.random.binomial(n, p, 1000)\n# result of flipping a coin 10 times, tested 1000 times.\n\nA real world example. A company drills 9 wild-cat oil exploration\nwells, each with an estimated probability of success of 0.1. All nine\nwells fail. What is the probability of that happening?\n\nLet's do 20,000 trials of the model, and count the number that\ngenerate zero positive results.\n\n>>> sum(np.random.binomial(9, 0.1, 20000) == 0)/20000.\n# answer = 0.38885, or 38%.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4882d4c1d1760bc03515fc617900916b881f55f3a50b45f52e5595671979fe3a",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.binomial",
                    "defaultValue": "numpy.random.RandomState.binomial",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "numpy.random.bytes",
            "description": "\nReturn random bytes.\n\n.. note::\n    New code should use the ``bytes`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\nlength : int\n    Number of random bytes.\n\nReturns\n-------\nout : bytes\n    String of length `length`.\n\nSee Also\n--------\nrandom.Generator.bytes: which should be used for new code.\n\nExamples\n--------\n>>> np.random.bytes(10)\nb' eh\\x85\\x022SZ\\xbf\\xa4' #random",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4bfc19f9f95451fb78a48d8aa34c9881fded5d1b793fc4946d1cdbfecf6c0a3d",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.bytes",
                    "defaultValue": "numpy.random.RandomState.bytes",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "numpy.random.chisquare",
            "description": "\nDraw samples from a chi-square distribution.\n\nWhen `df` independent random variables, each with standard normal\ndistributions (mean 0, variance 1), are squared and summed, the\nresulting distribution is chi-square (see Notes).  This distribution\nis often used in hypothesis testing.\n\n.. note::\n    New code should use the ``chisquare`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\ndf : float or array_like of floats\n     Number of degrees of freedom, must be > 0.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``df`` is a scalar.  Otherwise,\n    ``np.array(df).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized chi-square distribution.\n\nRaises\n------\nValueError\n    When `df` <= 0 or when an inappropriate `size` (e.g. ``size=-1``)\n    is given.\n\nSee Also\n--------\nrandom.Generator.chisquare: which should be used for new code.\n\nNotes\n-----\nThe variable obtained by summing the squares of `df` independent,\nstandard normally distributed random variables:\n\n.. math:: Q = \\sum_{i=0}^{\\mathtt{df}} X^2_i\n\nis chi-square distributed, denoted\n\n.. math:: Q \\sim \\chi^2_k.\n\nThe probability density function of the chi-squared distribution is\n\n.. math:: p(x) = \\frac{(1/2)^{k/2}}{\\Gamma(k/2)}\n                 x^{k/2 - 1} e^{-x/2},\n\nwhere :math:`\\Gamma` is the gamma function,\n\n.. math:: \\Gamma(x) = \\int_0^{-\\infty} t^{x - 1} e^{-t} dt.\n\nReferences\n----------\n.. [1] NIST \"Engineering Statistics Handbook\"\n       https://www.itl.nist.gov/div898/handbook/eda/section3/eda3666.htm\n\nExamples\n--------\n>>> np.random.chisquare(2,4)\narray([ 1.89920014,  9.00867716,  3.13710533,  5.62318272]) # random",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "daa66d2bc9474b0a337141270cff61f5d6d1996a0c76b37d589fb4037687d1aa",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.chisquare",
                    "defaultValue": "numpy.random.RandomState.chisquare",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "numpy.random.choice",
            "description": "\nGenerates a random sample from a given 1-D array\n\n.. versionadded:: 1.7.0\n\n.. note::\n    New code should use the ``choice`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\na : 1-D array-like or int\n    If an ndarray, a random sample is generated from its elements.\n    If an int, the random sample is generated as if it were ``np.arange(a)``\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  Default is None, in which case a\n    single value is returned.\nreplace : boolean, optional\n    Whether the sample is with or without replacement. Default is True,\n    meaning that a value of ``a`` can be selected multiple times.\np : 1-D array-like, optional\n    The probabilities associated with each entry in a.\n    If not given, the sample assumes a uniform distribution over all\n    entries in ``a``.\n\nReturns\n-------\nsamples : single item or ndarray\n    The generated random samples\n\nRaises\n------\nValueError\n    If a is an int and less than zero, if a or p are not 1-dimensional,\n    if a is an array-like of size 0, if p is not a vector of\n    probabilities, if a and p have different lengths, or if\n    replace=False and the sample size is greater than the population\n    size\n\nSee Also\n--------\nrandint, shuffle, permutation\nrandom.Generator.choice: which should be used in new code\n\nNotes\n-----\nSetting user-specified probabilities through ``p`` uses a more general but less\nefficient sampler than the default. The general sampler produces a different sample\nthan the optimized sampler even if each element of ``p`` is 1 / len(a).\n\nSampling random rows from a 2-D array is not possible with this function,\nbut is possible with `Generator.choice` through its ``axis`` keyword.\n\nExamples\n--------\nGenerate a uniform random sample from np.arange(5) of size 3:\n\n>>> np.random.choice(5, 3)\narray([0, 3, 4]) # random\n>>> #This is equivalent to np.random.randint(0,5,3)\n\nGenerate a non-uniform random sample from np.arange(5) of size 3:\n\n>>> np.random.choice(5, 3, p=[0.1, 0, 0.3, 0.6, 0])\narray([3, 3, 0]) # random\n\nGenerate a uniform random sample from np.arange(5) of size 3 without\nreplacement:\n\n>>> np.random.choice(5, 3, replace=False)\narray([3,1,0]) # random\n>>> #This is equivalent to np.random.permutation(np.arange(5))[:3]\n\nGenerate a non-uniform random sample from np.arange(5) of size\n3 without replacement:\n\n>>> np.random.choice(5, 3, replace=False, p=[0.1, 0, 0.3, 0.6, 0])\narray([2, 3, 0]) # random\n\nAny of the above can be repeated with an arbitrary array-like\ninstead of just integers. For instance:\n\n>>> aa_milne_arr = ['pooh', 'rabbit', 'piglet', 'Christopher']\n>>> np.random.choice(aa_milne_arr, 5, p=[0.5, 0.1, 0.1, 0.3])\narray(['pooh', 'pooh', 'pooh', 'Christopher', 'piglet'], # random\n      dtype='<U11')",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "bede5f99c43cb064f7c91e492819ecd15ea887c69d1df9af0d4d3812a553bd07",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.choice",
                    "defaultValue": "numpy.random.RandomState.choice",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "numpy.random.default_rng",
            "description": ">>> print(rng)\nGenerator(PCG64)\n>>> rfloat = rng.random()\n>>> rfloat\n0.22733602246716966\n>>> type(rfloat)\n<class 'float'>\n \nHere we use ``default_rng`` to generate 3 random integers between 0 \n(inclusive) and 10 (exclusive):\n    \n>>> import numpy as np\n>>> rng = np.random.default_rng(12345)\n>>> rints = rng.integers(low=0, high=10, size=3)\n>>> rints\narray([6, 2, 7])\n>>> type(rints[0])\n<class 'numpy.int64'>\n\nHere we specify a seed so that we have reproducible results:\n\n>>> import numpy as np\n>>> rng = np.random.default_rng(seed=42)\n>>> print(rng)\nGenerator(PCG64)\n>>> arr1 = rng.random((3, 3))\n>>> arr1\narray([[0.77395605, 0.43887844, 0.85859792],\n       [0.69736803, 0.09417735, 0.97562235],\n       [0.7611397 , 0.78606431, 0.12811363]])\n\nIf we exit and restart our Python interpreter, we'll see that we\ngenerate the same random numbers again:\n\n>>> import numpy as np\n>>> rng = np.random.default_rng(seed=42)\n>>> arr2 = rng.random((3, 3))\n>>> arr2\narray([[0.77395605, 0.43887844, 0.85859792],\n       [0.69736803, 0.09417735, 0.97562235],\n       [0.7611397 , 0.78606431, 0.12811363]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4a1cc48c6568ac432dbf77ff1302e81b28da1954597e7a8f88dc9766ede437b8",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random._generator.default_rng",
                    "defaultValue": "numpy.random._generator.default_rng",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "numpy.random.dirichlet",
            "description": "\nDraw samples from the Dirichlet distribution.\n\nDraw `size` samples of dimension k from a Dirichlet distribution. A\nDirichlet-distributed random variable can be seen as a multivariate\ngeneralization of a Beta distribution. The Dirichlet distribution\nis a conjugate prior of a multinomial distribution in Bayesian\ninference.\n\n.. note::\n    New code should use the ``dirichlet`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\nalpha : sequence of floats, length k\n    Parameter of the distribution (length ``k`` for sample of\n    length ``k``).\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n)``, then\n    ``m * n * k`` samples are drawn.  Default is None, in which case a\n    vector of length ``k`` is returned.\n\nReturns\n-------\nsamples : ndarray,\n    The drawn samples, of shape ``(size, k)``.\n\nRaises\n------\nValueError\n    If any value in ``alpha`` is less than or equal to zero\n\nSee Also\n--------\nrandom.Generator.dirichlet: which should be used for new code.\n\nNotes\n-----\nThe Dirichlet distribution is a distribution over vectors\n:math:`x` that fulfil the conditions :math:`x_i>0` and\n:math:`\\sum_{i=1}^k x_i = 1`.\n\nThe probability density function :math:`p` of a\nDirichlet-distributed random vector :math:`X` is\nproportional to\n\n.. math:: p(x) \\propto \\prod_{i=1}^{k}{x^{\\alpha_i-1}_i},\n\nwhere :math:`\\alpha` is a vector containing the positive\nconcentration parameters.\n\nThe method uses the following property for computation: let :math:`Y`\nbe a random vector which has components that follow a standard gamma\ndistribution, then :math:`X = \\frac{1}{\\sum_{i=1}^k{Y_i}} Y`\nis Dirichlet-distributed\n\nReferences\n----------\n.. [1] David McKay, \"Information Theory, Inference and Learning\n       Algorithms,\" chapter 23,\n       http://www.inference.org.uk/mackay/itila/\n.. [2] Wikipedia, \"Dirichlet distribution\",\n       https://en.wikipedia.org/wiki/Dirichlet_distribution\n\nExamples\n--------\nTaking an example cited in Wikipedia, this distribution can be used if\none wanted to cut strings (each of initial length 1.0) into K pieces\nwith different lengths, where each piece had, on average, a designated\naverage length, but allowing some variation in the relative sizes of\nthe pieces.\n\n>>> s = np.random.dirichlet((10, 5, 3), 20).transpose()\n\n>>> import matplotlib.pyplot as plt\n>>> plt.barh(range(20), s[0])\n>>> plt.barh(range(20), s[1], left=s[0], color='g')\n>>> plt.barh(range(20), s[2], left=s[0]+s[1], color='r')\n>>> plt.title(\"Lengths of Strings\")",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "50ab6a351a0b8a0b07730aac85564372550bd76000389fb29f3dce46c3552d52",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.dirichlet",
                    "defaultValue": "numpy.random.RandomState.dirichlet",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "numpy.random.exponential",
            "description": "\nDraw samples from an exponential distribution.\n\nIts probability density function is\n\n.. math:: f(x; \\frac{1}{\\beta}) = \\frac{1}{\\beta} \\exp(-\\frac{x}{\\beta}),\n\nfor ``x > 0`` and 0 elsewhere. :math:`\\beta` is the scale parameter,\nwhich is the inverse of the rate parameter :math:`\\lambda = 1/\\beta`.\nThe rate parameter is an alternative, widely used parameterization\nof the exponential distribution [3]_.\n\nThe exponential distribution is a continuous analogue of the\ngeometric distribution.  It describes many common situations, such as\nthe size of raindrops measured over many rainstorms [1]_, or the time\nbetween page requests to Wikipedia [2]_.\n\n.. note::\n    New code should use the ``exponential`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\nscale : float or array_like of floats\n    The scale parameter, :math:`\\beta = 1/\\lambda`. Must be\n    non-negative.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``scale`` is a scalar.  Otherwise,\n    ``np.array(scale).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized exponential distribution.\n\nSee Also\n--------\nrandom.Generator.exponential: which should be used for new code.\n\nReferences\n----------\n.. [1] Peyton Z. Peebles Jr., \"Probability, Random Variables and\n       Random Signal Principles\", 4th ed, 2001, p. 57.\n.. [2] Wikipedia, \"Poisson process\",\n       https://en.wikipedia.org/wiki/Poisson_process\n.. [3] Wikipedia, \"Exponential distribution\",\n       https://en.wikipedia.org/wiki/Exponential_distribution",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "743cb023ca67ff1bbeafd6f3c3f4305a09660408941fca34466636e742833b45",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.exponential",
                    "defaultValue": "numpy.random.RandomState.exponential",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "numpy.random.f",
            "description": "\nDraw samples from an F distribution.\n\nSamples are drawn from an F distribution with specified parameters,\n`dfnum` (degrees of freedom in numerator) and `dfden` (degrees of\nfreedom in denominator), where both parameters must be greater than\nzero.\n\nThe random variate of the F distribution (also known as the\nFisher distribution) is a continuous probability distribution\nthat arises in ANOVA tests, and is the ratio of two chi-square\nvariates.\n\n.. note::\n    New code should use the ``f`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\ndfnum : float or array_like of floats\n    Degrees of freedom in numerator, must be > 0.\ndfden : float or array_like of float\n    Degrees of freedom in denominator, must be > 0.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``dfnum`` and ``dfden`` are both scalars.\n    Otherwise, ``np.broadcast(dfnum, dfden).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized Fisher distribution.\n\nSee Also\n--------\nscipy.stats.f : probability density function, distribution or\n    cumulative density function, etc.\nrandom.Generator.f: which should be used for new code.\n\nNotes\n-----\nThe F statistic is used to compare in-group variances to between-group\nvariances. Calculating the distribution depends on the sampling, and\nso it is a function of the respective degrees of freedom in the\nproblem.  The variable `dfnum` is the number of samples minus one, the\nbetween-groups degrees of freedom, while `dfden` is the within-groups\ndegrees of freedom, the sum of the number of samples in each group\nminus the number of groups.\n\nReferences\n----------\n.. [1] Glantz, Stanton A. \"Primer of Biostatistics.\", McGraw-Hill,\n       Fifth Edition, 2002.\n.. [2] Wikipedia, \"F-distribution\",\n       https://en.wikipedia.org/wiki/F-distribution\n\nExamples\n--------\nAn example from Glantz[1], pp 47-40:\n\nTwo groups, children of diabetics (25 people) and children from people\nwithout diabetes (25 controls). Fasting blood glucose was measured,\ncase group had a mean value of 86.1, controls had a mean value of\n82.2. Standard deviations were 2.09 and 2.49 respectively. Are these\ndata consistent with the null hypothesis that the parents diabetic\nstatus does not affect their children's blood glucose levels?\nCalculating the F statistic from the data gives a value of 36.01.\n\nDraw samples from the distribution:\n\n>>> dfnum = 1. # between group degrees of freedom\n>>> dfden = 48. # within groups degrees of freedom\n>>> s = np.random.f(dfnum, dfden, 1000)\n\nThe lower bound for the top 1% of the samples is :\n\n>>> np.sort(s)[-10]\n7.61988120985 # random\n\nSo there is about a 1% chance that the F statistic will exceed 7.62,\nthe measured value is 36, so the null hypothesis is rejected at the 1%\nlevel.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2f5755d65e4d352fc801443c4362103d0684204d8066ebaf646bcdcaa1b57dbb",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.f",
                    "defaultValue": "numpy.random.RandomState.f",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "numpy.random.gamma",
            "description": "\nDraw samples from a Gamma distribution.\n\nSamples are drawn from a Gamma distribution with specified parameters,\n`shape` (sometimes designated \"k\") and `scale` (sometimes designated\n\"theta\"), where both parameters are > 0.\n\n.. note::\n    New code should use the ``gamma`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\nshape : float or array_like of floats\n    The shape of the gamma distribution. Must be non-negative.\nscale : float or array_like of floats, optional\n    The scale of the gamma distribution. Must be non-negative.\n    Default is equal to 1.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``shape`` and ``scale`` are both scalars.\n    Otherwise, ``np.broadcast(shape, scale).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized gamma distribution.\n\nSee Also\n--------\nscipy.stats.gamma : probability density function, distribution or\n    cumulative density function, etc.\nrandom.Generator.gamma: which should be used for new code.\n\nNotes\n-----\nThe probability density for the Gamma distribution is\n\n.. math:: p(x) = x^{k-1}\\frac{e^{-x/\\theta}}{\\theta^k\\Gamma(k)},\n\nwhere :math:`k` is the shape and :math:`\\theta` the scale,\nand :math:`\\Gamma` is the Gamma function.\n\nThe Gamma distribution is often used to model the times to failure of\nelectronic components, and arises naturally in processes for which the\nwaiting times between Poisson distributed events are relevant.\n\nReferences\n----------\n.. [1] Weisstein, Eric W. \"Gamma Distribution.\" From MathWorld--A\n       Wolfram Web Resource.\n       http://mathworld.wolfram.com/GammaDistribution.html\n.. [2] Wikipedia, \"Gamma distribution\",\n       https://en.wikipedia.org/wiki/Gamma_distribution\n\nExamples\n--------\nDraw samples from the distribution:\n\n>>> shape, scale = 2., 2.  # mean=4, std=2*sqrt(2)\n>>> s = np.random.gamma(shape, scale, 1000)\n\nDisplay the histogram of the samples, along with\nthe probability density function:\n\n>>> import matplotlib.pyplot as plt\n>>> import scipy.special as sps  # doctest: +SKIP\n>>> count, bins, ignored = plt.hist(s, 50, density=True)\n>>> y = bins**(shape-1)*(np.exp(-bins/scale) /  # doctest: +SKIP\n...                      (sps.gamma(shape)*scale**shape))\n>>> plt.plot(bins, y, linewidth=2, color='r')  # doctest: +SKIP\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "97b54b3086c6e0418601763c14ee4a7c6d12d3842499dee706f071f810ebba67",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.gamma",
                    "defaultValue": "numpy.random.RandomState.gamma",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "numpy.random.geometric",
            "description": "\nDraw samples from the geometric distribution.\n\nBernoulli trials are experiments with one of two outcomes:\nsuccess or failure (an example of such an experiment is flipping\na coin).  The geometric distribution models the number of trials\nthat must be run in order to achieve success.  It is therefore\nsupported on the positive integers, ``k = 1, 2, ...``.\n\nThe probability mass function of the geometric distribution is\n\n.. math:: f(k) = (1 - p)^{k - 1} p\n\nwhere `p` is the probability of success of an individual trial.\n\n.. note::\n    New code should use the ``geometric`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\np : float or array_like of floats\n    The probability of success of an individual trial.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``p`` is a scalar.  Otherwise,\n    ``np.array(p).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized geometric distribution.\n\nSee Also\n--------\nrandom.Generator.geometric: which should be used for new code.\n\nExamples\n--------\nDraw ten thousand values from the geometric distribution,\nwith the probability of an individual success equal to 0.35:\n\n>>> z = np.random.geometric(p=0.35, size=10000)\n\nHow many trials succeeded after a single run?\n\n>>> (z == 1).sum() / 10000.\n0.34889999999999999 #random",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8c77a062ed6de9f0f0cc21a053e89d24cda4fe4cfbe4ce7f654c89c006a00422",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.geometric",
                    "defaultValue": "numpy.random.RandomState.geometric",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "numpy.random.get_state",
            "description": "\nReturn a tuple representing the internal state of the generator.\n\nFor more details, see `set_state`.\n\nParameters\n----------\nlegacy : bool, optional\n    Flag indicating to return a legacy tuple state when the BitGenerator\n    is MT19937, instead of a dict.\n\nReturns\n-------\nout : {tuple(str, ndarray of 624 uints, int, int, float), dict}\n    The returned tuple has the following items:\n\n    1. the string 'MT19937'.\n    2. a 1-D array of 624 unsigned integer keys.\n    3. an integer ``pos``.\n    4. an integer ``has_gauss``.\n    5. a float ``cached_gaussian``.\n\n    If `legacy` is False, or the BitGenerator is not MT19937, then\n    state is returned as a dictionary.\n\nSee Also\n--------\nset_state\n\nNotes\n-----\n`set_state` and `get_state` are not needed to work with any of the\nrandom distributions in NumPy. If the internal state is manually altered,\nthe user should know exactly what he/she is doing.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e164a37d9d68ecd64d778ff3d0d00f200eab76cef75441eb4cb6e1f4e8d2695e",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.get_state",
                    "defaultValue": "numpy.random.RandomState.get_state",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "numpy.random.gumbel",
            "description": "\nDraw samples from a Gumbel distribution.\n\nDraw samples from a Gumbel distribution with specified location and\nscale.  For more information on the Gumbel distribution, see\nNotes and References below.\n\n.. note::\n    New code should use the ``gumbel`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\nloc : float or array_like of floats, optional\n    The location of the mode of the distribution. Default is 0.\nscale : float or array_like of floats, optional\n    The scale parameter of the distribution. Default is 1. Must be non-\n    negative.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``loc`` and ``scale`` are both scalars.\n    Otherwise, ``np.broadcast(loc, scale).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized Gumbel distribution.\n\nSee Also\n--------\nscipy.stats.gumbel_l\nscipy.stats.gumbel_r\nscipy.stats.genextreme\nweibull\nrandom.Generator.gumbel: which should be used for new code.\n\nNotes\n-----\nThe Gumbel (or Smallest Extreme Value (SEV) or the Smallest Extreme\nValue Type I) distribution is one of a class of Generalized Extreme\nValue (GEV) distributions used in modeling extreme value problems.\nThe Gumbel is a special case of the Extreme Value Type I distribution\nfor maximums from distributions with \"exponential-like\" tails.\n\nThe probability density for the Gumbel distribution is\n\n.. math:: p(x) = \\frac{e^{-(x - \\mu)/ \\beta}}{\\beta} e^{ -e^{-(x - \\mu)/\n          \\beta}},\n\nwhere :math:`\\mu` is the mode, a location parameter, and\n:math:`\\beta` is the scale parameter.\n\nThe Gumbel (named for German mathematician Emil Julius Gumbel) was used\nvery early in the hydrology literature, for modeling the occurrence of\nflood events. It is also used for modeling maximum wind speed and\nrainfall rates.  It is a \"fat-tailed\" distribution - the probability of\nan event in the tail of the distribution is larger than if one used a\nGaussian, hence the surprisingly frequent occurrence of 100-year\nfloods. Floods were initially modeled as a Gaussian process, which\nunderestimated the frequency of extreme events.\n\nIt is one of a class of extreme value distributions, the Generalized\nExtreme Value (GEV) distributions, which also includes the Weibull and\nFrechet.\n\nThe function has a mean of :math:`\\mu + 0.57721\\beta` and a variance\nof :math:`\\frac{\\pi^2}{6}\\beta^2`.\n\nReferences\n----------\n.. [1] Gumbel, E. J., \"Statistics of Extremes,\"\n       New York: Columbia University Press, 1958.\n.. [2] Reiss, R.-D. and Thomas, M., \"Statistical Analysis of Extreme\n       Values from Insurance, Finance, Hydrology and Other Fields,\"\n       Basel: Birkhauser Verlag, 2001.\n\nExamples\n--------\nDraw samples from the distribution:\n\n>>> mu, beta = 0, 0.1 # location and scale\n>>> s = np.random.gumbel(mu, beta, 1000)\n\nDisplay the histogram of the samples, along with\nthe probability density function:\n\n>>> import matplotlib.pyplot as plt\n>>> count, bins, ignored = plt.hist(s, 30, density=True)\n>>> plt.plot(bins, (1/beta)*np.exp(-(bins - mu)/beta)\n...          * np.exp( -np.exp( -(bins - mu) /beta) ),\n...          linewidth=2, color='r')\n>>> plt.show()\n\nShow how an extreme value distribution can arise from a Gaussian process\nand compare to a Gaussian:\n\n>>> means = []\n>>> maxima = []\n>>> for i in range(0,1000) :\n...    a = np.random.normal(mu, beta, 1000)\n...    means.append(a.mean())\n...    maxima.append(a.max())\n>>> count, bins, ignored = plt.hist(maxima, 30, density=True)\n>>> beta = np.std(maxima) * np.sqrt(6) / np.pi\n>>> mu = np.mean(maxima) - 0.57721*beta\n>>> plt.plot(bins, (1/beta)*np.exp(-(bins - mu)/beta)\n...          * np.exp(-np.exp(-(bins - mu)/beta)),\n...          linewidth=2, color='r')\n>>> plt.plot(bins, 1/(beta * np.sqrt(2 * np.pi))\n...          * np.exp(-(bins - mu)**2 / (2 * beta**2)),\n...          linewidth=2, color='g')\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f0ea0876e725bffef16a912ae924b7eb6d8d8c8cb05760c4472f70c4d230389f",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.gumbel",
                    "defaultValue": "numpy.random.RandomState.gumbel",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "numpy.random.hypergeometric",
            "description": "\nDraw samples from a Hypergeometric distribution.\n\nSamples are drawn from a hypergeometric distribution with specified\nparameters, `ngood` (ways to make a good selection), `nbad` (ways to make\na bad selection), and `nsample` (number of items sampled, which is less\nthan or equal to the sum ``ngood + nbad``).\n\n.. note::\n    New code should use the ``hypergeometric`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\nngood : int or array_like of ints\n    Number of ways to make a good selection.  Must be nonnegative.\nnbad : int or array_like of ints\n    Number of ways to make a bad selection.  Must be nonnegative.\nnsample : int or array_like of ints\n    Number of items sampled.  Must be at least 1 and at most\n    ``ngood + nbad``.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if `ngood`, `nbad`, and `nsample`\n    are all scalars.  Otherwise, ``np.broadcast(ngood, nbad, nsample).size``\n    samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized hypergeometric distribution. Each\n    sample is the number of good items within a randomly selected subset of\n    size `nsample` taken from a set of `ngood` good items and `nbad` bad items.\n\nSee Also\n--------\nscipy.stats.hypergeom : probability density function, distribution or\n    cumulative density function, etc.\nrandom.Generator.hypergeometric: which should be used for new code.\n\nNotes\n-----\nThe probability density for the Hypergeometric distribution is\n\n.. math:: P(x) = \\frac{\\binom{g}{x}\\binom{b}{n-x}}{\\binom{g+b}{n}},\n\nwhere :math:`0 \\le x \\le n` and :math:`n-b \\le x \\le g`\n\nfor P(x) the probability of ``x`` good results in the drawn sample,\ng = `ngood`, b = `nbad`, and n = `nsample`.\n\nConsider an urn with black and white marbles in it, `ngood` of them\nare black and `nbad` are white. If you draw `nsample` balls without\nreplacement, then the hypergeometric distribution describes the\ndistribution of black balls in the drawn sample.\n\nNote that this distribution is very similar to the binomial\ndistribution, except that in this case, samples are drawn without\nreplacement, whereas in the Binomial case samples are drawn with\nreplacement (or the sample space is infinite). As the sample space\nbecomes large, this distribution approaches the binomial.\n\nReferences\n----------\n.. [1] Lentner, Marvin, \"Elementary Applied Statistics\", Bogden\n       and Quigley, 1972.\n.. [2] Weisstein, Eric W. \"Hypergeometric Distribution.\" From\n       MathWorld--A Wolfram Web Resource.\n       http://mathworld.wolfram.com/HypergeometricDistribution.html\n.. [3] Wikipedia, \"Hypergeometric distribution\",\n       https://en.wikipedia.org/wiki/Hypergeometric_distribution\n\nExamples\n--------\nDraw samples from the distribution:\n\n>>> ngood, nbad, nsamp = 100, 2, 10\n# number of good, number of bad, and number of samples\n>>> s = np.random.hypergeometric(ngood, nbad, nsamp, 1000)\n>>> from matplotlib.pyplot import hist\n>>> hist(s)\n#   note that it is very unlikely to grab both bad items\n\nSuppose you have an urn with 15 white and 15 black marbles.\nIf you pull 15 marbles at random, how likely is it that\n12 or more of them are one color?\n\n>>> s = np.random.hypergeometric(15, 15, 15, 100000)\n>>> sum(s>=12)/100000. + sum(s<=3)/100000.\n#   answer = 0.003 ... pretty unlikely!",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "186aed003966e62f6832c14a9a566c9c9c637c2008bc9c8f5b0570a6a059cac9",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.hypergeometric",
                    "defaultValue": "numpy.random.RandomState.hypergeometric",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "numpy.random.laplace",
            "description": "\nDraw samples from the Laplace or double exponential distribution with\nspecified location (or mean) and scale (decay).\n\nThe Laplace distribution is similar to the Gaussian/normal distribution,\nbut is sharper at the peak and has fatter tails. It represents the\ndifference between two independent, identically distributed exponential\nrandom variables.\n\n.. note::\n    New code should use the ``laplace`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\nloc : float or array_like of floats, optional\n    The position, :math:`\\mu`, of the distribution peak. Default is 0.\nscale : float or array_like of floats, optional\n    :math:`\\lambda`, the exponential decay. Default is 1. Must be non-\n    negative.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``loc`` and ``scale`` are both scalars.\n    Otherwise, ``np.broadcast(loc, scale).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized Laplace distribution.\n\nSee Also\n--------\nrandom.Generator.laplace: which should be used for new code.\n\nNotes\n-----\nIt has the probability density function\n\n.. math:: f(x; \\mu, \\lambda) = \\frac{1}{2\\lambda}\n                               \\exp\\left(-\\frac{|x - \\mu|}{\\lambda}\\right).\n\nThe first law of Laplace, from 1774, states that the frequency\nof an error can be expressed as an exponential function of the\nabsolute magnitude of the error, which leads to the Laplace\ndistribution. For many problems in economics and health\nsciences, this distribution seems to model the data better\nthan the standard Gaussian distribution.\n\nReferences\n----------\n.. [1] Abramowitz, M. and Stegun, I. A. (Eds.). \"Handbook of\n       Mathematical Functions with Formulas, Graphs, and Mathematical\n       Tables, 9th printing,\" New York: Dover, 1972.\n.. [2] Kotz, Samuel, et. al. \"The Laplace Distribution and\n       Generalizations, \" Birkhauser, 2001.\n.. [3] Weisstein, Eric W. \"Laplace Distribution.\"\n       From MathWorld--A Wolfram Web Resource.\n       http://mathworld.wolfram.com/LaplaceDistribution.html\n.. [4] Wikipedia, \"Laplace distribution\",\n       https://en.wikipedia.org/wiki/Laplace_distribution\n\nExamples\n--------\nDraw samples from the distribution\n\n>>> loc, scale = 0., 1.\n>>> s = np.random.laplace(loc, scale, 1000)\n\nDisplay the histogram of the samples, along with\nthe probability density function:\n\n>>> import matplotlib.pyplot as plt\n>>> count, bins, ignored = plt.hist(s, 30, density=True)\n>>> x = np.arange(-8., 8., .01)\n>>> pdf = np.exp(-abs(x-loc)/scale)/(2.*scale)\n>>> plt.plot(x, pdf)\n\nPlot Gaussian for comparison:\n\n>>> g = (1/(scale * np.sqrt(2 * np.pi)) *\n...      np.exp(-(x - loc)**2 / (2 * scale**2)))\n>>> plt.plot(x,g)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "610ff0bc86c59b599162c00cb336242d90290ccd15b12d3768bdd3ac359930c2",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.laplace",
                    "defaultValue": "numpy.random.RandomState.laplace",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "numpy.random.logistic",
            "description": "\nDraw samples from a logistic distribution.\n\nSamples are drawn from a logistic distribution with specified\nparameters, loc (location or mean, also median), and scale (>0).\n\n.. note::\n    New code should use the ``logistic`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\nloc : float or array_like of floats, optional\n    Parameter of the distribution. Default is 0.\nscale : float or array_like of floats, optional\n    Parameter of the distribution. Must be non-negative.\n    Default is 1.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``loc`` and ``scale`` are both scalars.\n    Otherwise, ``np.broadcast(loc, scale).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized logistic distribution.\n\nSee Also\n--------\nscipy.stats.logistic : probability density function, distribution or\n    cumulative density function, etc.\nrandom.Generator.logistic: which should be used for new code.\n\nNotes\n-----\nThe probability density for the Logistic distribution is\n\n.. math:: P(x) = P(x) = \\frac{e^{-(x-\\mu)/s}}{s(1+e^{-(x-\\mu)/s})^2},\n\nwhere :math:`\\mu` = location and :math:`s` = scale.\n\nThe Logistic distribution is used in Extreme Value problems where it\ncan act as a mixture of Gumbel distributions, in Epidemiology, and by\nthe World Chess Federation (FIDE) where it is used in the Elo ranking\nsystem, assuming the performance of each player is a logistically\ndistributed random variable.\n\nReferences\n----------\n.. [1] Reiss, R.-D. and Thomas M. (2001), \"Statistical Analysis of\n       Extreme Values, from Insurance, Finance, Hydrology and Other\n       Fields,\" Birkhauser Verlag, Basel, pp 132-133.\n.. [2] Weisstein, Eric W. \"Logistic Distribution.\" From\n       MathWorld--A Wolfram Web Resource.\n       http://mathworld.wolfram.com/LogisticDistribution.html\n.. [3] Wikipedia, \"Logistic-distribution\",\n       https://en.wikipedia.org/wiki/Logistic_distribution\n\nExamples\n--------\nDraw samples from the distribution:\n\n>>> loc, scale = 10, 1\n>>> s = np.random.logistic(loc, scale, 10000)\n>>> import matplotlib.pyplot as plt\n>>> count, bins, ignored = plt.hist(s, bins=50)\n\n#   plot against distribution\n\n>>> def logist(x, loc, scale):\n...     return np.exp((loc-x)/scale)/(scale*(1+np.exp((loc-x)/scale))**2)\n>>> lgst_val = logist(bins, loc, scale)\n>>> plt.plot(bins, lgst_val * count.max() / lgst_val.max())\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "3180648c7bbf58a57ba99f9241885661c9d4dde18b7763d8650ed672d5e16a0a",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.logistic",
                    "defaultValue": "numpy.random.RandomState.logistic",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "numpy.random.lognormal",
            "description": "\nDraw samples from a log-normal distribution.\n\nDraw samples from a log-normal distribution with specified mean,\nstandard deviation, and array shape.  Note that the mean and standard\ndeviation are not the values for the distribution itself, but of the\nunderlying normal distribution it is derived from.\n\n.. note::\n    New code should use the ``lognormal`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\nmean : float or array_like of floats, optional\n    Mean value of the underlying normal distribution. Default is 0.\nsigma : float or array_like of floats, optional\n    Standard deviation of the underlying normal distribution. Must be\n    non-negative. Default is 1.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``mean`` and ``sigma`` are both scalars.\n    Otherwise, ``np.broadcast(mean, sigma).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized log-normal distribution.\n\nSee Also\n--------\nscipy.stats.lognorm : probability density function, distribution,\n    cumulative density function, etc.\nrandom.Generator.lognormal: which should be used for new code.\n\nNotes\n-----\nA variable `x` has a log-normal distribution if `log(x)` is normally\ndistributed.  The probability density function for the log-normal\ndistribution is:\n\n.. math:: p(x) = \\frac{1}{\\sigma x \\sqrt{2\\pi}}\n                 e^{(-\\frac{(ln(x)-\\mu)^2}{2\\sigma^2})}\n\nwhere :math:`\\mu` is the mean and :math:`\\sigma` is the standard\ndeviation of the normally distributed logarithm of the variable.\nA log-normal distribution results if a random variable is the *product*\nof a large number of independent, identically-distributed variables in\nthe same way that a normal distribution results if the variable is the\n*sum* of a large number of independent, identically-distributed\nvariables.\n\nReferences\n----------\n.. [1] Limpert, E., Stahel, W. A., and Abbt, M., \"Log-normal\n       Distributions across the Sciences: Keys and Clues,\"\n       BioScience, Vol. 51, No. 5, May, 2001.\n       https://stat.ethz.ch/~stahel/lognormal/bioscience.pdf\n.. [2] Reiss, R.D. and Thomas, M., \"Statistical Analysis of Extreme\n       Values,\" Basel: Birkhauser Verlag, 2001, pp. 31-32.\n\nExamples\n--------\nDraw samples from the distribution:\n\n>>> mu, sigma = 3., 1. # mean and standard deviation\n>>> s = np.random.lognormal(mu, sigma, 1000)\n\nDisplay the histogram of the samples, along with\nthe probability density function:\n\n>>> import matplotlib.pyplot as plt\n>>> count, bins, ignored = plt.hist(s, 100, density=True, align='mid')\n\n>>> x = np.linspace(min(bins), max(bins), 10000)\n>>> pdf = (np.exp(-(np.log(x) - mu)**2 / (2 * sigma**2))\n...        / (x * sigma * np.sqrt(2 * np.pi)))\n\n>>> plt.plot(x, pdf, linewidth=2, color='r')\n>>> plt.axis('tight')\n>>> plt.show()\n\nDemonstrate that taking the products of random samples from a uniform\ndistribution can be fit well by a log-normal probability density\nfunction.\n\n>>> # Generate a thousand samples: each is the product of 100 random\n>>> # values, drawn from a normal distribution.\n>>> b = []\n>>> for i in range(1000):\n...    a = 10. + np.random.standard_normal(100)\n...    b.append(np.product(a))\n\n>>> b = np.array(b) / np.min(b) # scale values to be positive\n>>> count, bins, ignored = plt.hist(b, 100, density=True, align='mid')\n>>> sigma = np.std(np.log(b))\n>>> mu = np.mean(np.log(b))\n\n>>> x = np.linspace(min(bins), max(bins), 10000)\n>>> pdf = (np.exp(-(np.log(x) - mu)**2 / (2 * sigma**2))\n...        / (x * sigma * np.sqrt(2 * np.pi)))\n\n>>> plt.plot(x, pdf, color='r', linewidth=2)\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1a57b6250701d6a6a3f5eb1f2efde539c036dd34a140a13e076ea0c509d9da88",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.lognormal",
                    "defaultValue": "numpy.random.RandomState.lognormal",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "numpy.random.logseries",
            "description": "\nDraw samples from a logarithmic series distribution.\n\nSamples are drawn from a log series distribution with specified\nshape parameter, 0 <= ``p`` < 1.\n\n.. note::\n    New code should use the ``logseries`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\np : float or array_like of floats\n    Shape parameter for the distribution.  Must be in the range [0, 1).\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``p`` is a scalar.  Otherwise,\n    ``np.array(p).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized logarithmic series distribution.\n\nSee Also\n--------\nscipy.stats.logser : probability density function, distribution or\n    cumulative density function, etc.\nrandom.Generator.logseries: which should be used for new code.\n\nNotes\n-----\nThe probability density for the Log Series distribution is\n\n.. math:: P(k) = \\frac{-p^k}{k \\ln(1-p)},\n\nwhere p = probability.\n\nThe log series distribution is frequently used to represent species\nrichness and occurrence, first proposed by Fisher, Corbet, and\nWilliams in 1943 [2].  It may also be used to model the numbers of\noccupants seen in cars [3].\n\nReferences\n----------\n.. [1] Buzas, Martin A.; Culver, Stephen J.,  Understanding regional\n       species diversity through the log series distribution of\n       occurrences: BIODIVERSITY RESEARCH Diversity & Distributions,\n       Volume 5, Number 5, September 1999 , pp. 187-195(9).\n.. [2] Fisher, R.A,, A.S. Corbet, and C.B. Williams. 1943. The\n       relation between the number of species and the number of\n       individuals in a random sample of an animal population.\n       Journal of Animal Ecology, 12:42-58.\n.. [3] D. J. Hand, F. Daly, D. Lunn, E. Ostrowski, A Handbook of Small\n       Data Sets, CRC Press, 1994.\n.. [4] Wikipedia, \"Logarithmic distribution\",\n       https://en.wikipedia.org/wiki/Logarithmic_distribution\n\nExamples\n--------\nDraw samples from the distribution:\n\n>>> a = .6\n>>> s = np.random.logseries(a, 10000)\n>>> import matplotlib.pyplot as plt\n>>> count, bins, ignored = plt.hist(s)\n\n#   plot against distribution\n\n>>> def logseries(k, p):\n...     return -p**k/(k*np.log(1-p))\n>>> plt.plot(bins, logseries(bins, a)*count.max()/\n...          logseries(bins, a).max(), 'r')\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "63012d4070a58590204721323d9a3805552e7128b47c00c4aa3d0fc41fdc7917",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.logseries",
                    "defaultValue": "numpy.random.RandomState.logseries",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "numpy.random.multinomial",
            "description": "\nDraw samples from a multinomial distribution.\n\nThe multinomial distribution is a multivariate generalization of the\nbinomial distribution.  Take an experiment with one of ``p``\npossible outcomes.  An example of such an experiment is throwing a dice,\nwhere the outcome can be 1 through 6.  Each sample drawn from the\ndistribution represents `n` such experiments.  Its values,\n``X_i = [X_0, X_1, ..., X_p]``, represent the number of times the\noutcome was ``i``.\n\n.. note::\n    New code should use the ``multinomial`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\nn : int\n    Number of experiments.\npvals : sequence of floats, length p\n    Probabilities of each of the ``p`` different outcomes.  These\n    must sum to 1 (however, the last element is always assumed to\n    account for the remaining probability, as long as\n    ``sum(pvals[:-1]) <= 1)``.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  Default is None, in which case a\n    single value is returned.\n\nReturns\n-------\nout : ndarray\n    The drawn samples, of shape *size*, if that was provided.  If not,\n    the shape is ``(N,)``.\n\n    In other words, each entry ``out[i,j,...,:]`` is an N-dimensional\n    value drawn from the distribution.\n\nSee Also\n--------\nrandom.Generator.multinomial: which should be used for new code.\n\nExamples\n--------\nThrow a dice 20 times:\n\n>>> np.random.multinomial(20, [1/6.]*6, size=1)\narray([[4, 1, 7, 5, 2, 1]]) # random\n\nIt landed 4 times on 1, once on 2, etc.\n\nNow, throw the dice 20 times, and 20 times again:\n\n>>> np.random.multinomial(20, [1/6.]*6, size=2)\narray([[3, 4, 3, 3, 4, 3], # random\n       [2, 4, 3, 4, 0, 7]])\n\nFor the first run, we threw 3 times 1, 4 times 2, etc.  For the second,\nwe threw 2 times 1, 4 times 2, etc.\n\nA loaded die is more likely to land on number 6:\n\n>>> np.random.multinomial(100, [1/7.]*5 + [2/7.])\narray([11, 16, 14, 17, 16, 26]) # random\n\nThe probability inputs should be normalized. As an implementation\ndetail, the value of the last entry is ignored and assumed to take\nup any leftover probability mass, but this should not be relied on.\nA biased coin which has twice as much weight on one side as on the\nother should be sampled like so:\n\n>>> np.random.multinomial(100, [1.0 / 3, 2.0 / 3])  # RIGHT\narray([38, 62]) # random\n\nnot like:\n\n>>> np.random.multinomial(100, [1.0, 2.0])  # WRONG\nTraceback (most recent call last):\nValueError: pvals < 0, pvals > 1 or pvals contains NaNs",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f93e8dee23846a58c72d98a514342e0bc9b293a6d27296c534d5b7445beb659c",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.multinomial",
                    "defaultValue": "numpy.random.RandomState.multinomial",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "numpy.random.multivariate_normal",
            "description": "\nDraw random samples from a multivariate normal distribution.\n\nThe multivariate normal, multinormal or Gaussian distribution is a\ngeneralization of the one-dimensional normal distribution to higher\ndimensions.  Such a distribution is specified by its mean and\ncovariance matrix.  These parameters are analogous to the mean\n(average or \"center\") and variance (standard deviation, or \"width,\"\nsquared) of the one-dimensional normal distribution.\n\n.. note::\n    New code should use the ``multivariate_normal`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\nmean : 1-D array_like, of length N\n    Mean of the N-dimensional distribution.\ncov : 2-D array_like, of shape (N, N)\n    Covariance matrix of the distribution. It must be symmetric and\n    positive-semidefinite for proper sampling.\nsize : int or tuple of ints, optional\n    Given a shape of, for example, ``(m,n,k)``, ``m*n*k`` samples are\n    generated, and packed in an `m`-by-`n`-by-`k` arrangement.  Because\n    each sample is `N`-dimensional, the output shape is ``(m,n,k,N)``.\n    If no shape is specified, a single (`N`-D) sample is returned.\ncheck_valid : { 'warn', 'raise', 'ignore' }, optional\n    Behavior when the covariance matrix is not positive semidefinite.\ntol : float, optional\n    Tolerance when checking the singular values in covariance matrix.\n    cov is cast to double before the check.\n\nReturns\n-------\nout : ndarray\n    The drawn samples, of shape *size*, if that was provided.  If not,\n    the shape is ``(N,)``.\n\n    In other words, each entry ``out[i,j,...,:]`` is an N-dimensional\n    value drawn from the distribution.\n\nSee Also\n--------\nrandom.Generator.multivariate_normal: which should be used for new code.\n\nNotes\n-----\nThe mean is a coordinate in N-dimensional space, which represents the\nlocation where samples are most likely to be generated.  This is\nanalogous to the peak of the bell curve for the one-dimensional or\nunivariate normal distribution.\n\nCovariance indicates the level to which two variables vary together.\nFrom the multivariate normal distribution, we draw N-dimensional\nsamples, :math:`X = [x_1, x_2, ... x_N]`.  The covariance matrix\nelement :math:`C_{ij}` is the covariance of :math:`x_i` and :math:`x_j`.\nThe element :math:`C_{ii}` is the variance of :math:`x_i` (i.e. its\n\"spread\").\n\nInstead of specifying the full covariance matrix, popular\napproximations include:\n\n  - Spherical covariance (`cov` is a multiple of the identity matrix)\n  - Diagonal covariance (`cov` has non-negative elements, and only on\n    the diagonal)\n\nThis geometrical property can be seen in two dimensions by plotting\ngenerated data-points:\n\n>>> mean = [0, 0]\n>>> cov = [[1, 0], [0, 100]]  # diagonal covariance\n\nDiagonal covariance means that points are oriented along x or y-axis:\n\n>>> import matplotlib.pyplot as plt\n>>> x, y = np.random.multivariate_normal(mean, cov, 5000).T\n>>> plt.plot(x, y, 'x')\n>>> plt.axis('equal')\n>>> plt.show()\n\nNote that the covariance matrix must be positive semidefinite (a.k.a.\nnonnegative-definite). Otherwise, the behavior of this method is\nundefined and backwards compatibility is not guaranteed.\n\nReferences\n----------\n.. [1] Papoulis, A., \"Probability, Random Variables, and Stochastic\n       Processes,\" 3rd ed., New York: McGraw-Hill, 1991.\n.. [2] Duda, R. O., Hart, P. E., and Stork, D. G., \"Pattern\n       Classification,\" 2nd ed., New York: Wiley, 2001.\n\nExamples\n--------\n>>> mean = (1, 2)\n>>> cov = [[1, 0], [0, 1]]\n>>> x = np.random.multivariate_normal(mean, cov, (3, 3))\n>>> x.shape\n(3, 3, 2)\n\nHere we generate 800 samples from the bivariate normal distribution\nwith mean [0, 0] and covariance matrix [[6, -3], [-3, 3.5]].  The\nexpected variances of the first and second components of the sample\nare 6 and 3.5, respectively, and the expected correlation\ncoefficient is -3/sqrt(6*3.5) \u2248 -0.65465.\n\n>>> cov = np.array([[6, -3], [-3, 3.5]])\n>>> pts = np.random.multivariate_normal([0, 0], cov, size=800)\n\nCheck that the mean, covariance, and correlation coefficient of the\nsample are close to the expected values:\n\n>>> pts.mean(axis=0)\narray([ 0.0326911 , -0.01280782])  # may vary\n>>> np.cov(pts.T)\narray([[ 5.96202397, -2.85602287],\n       [-2.85602287,  3.47613949]])  # may vary\n>>> np.corrcoef(pts.T)[0, 1]\n-0.6273591314603949  # may vary\n\nWe can visualize this data with a scatter plot.  The orientation\nof the point cloud illustrates the negative correlation of the\ncomponents of this sample.\n\n>>> import matplotlib.pyplot as plt\n>>> plt.plot(pts[:, 0], pts[:, 1], '.', alpha=0.5)\n>>> plt.axis('equal')\n>>> plt.grid()\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4e2d2fedbaf30e1e891db3ba8a6341ea1123d34c1c3079191df62c296a6d19bc",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.multivariate_normal",
                    "defaultValue": "numpy.random.RandomState.multivariate_normal",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "numpy.random.negative_binomial",
            "description": "\nDraw samples from a negative binomial distribution.\n\nSamples are drawn from a negative binomial distribution with specified\nparameters, `n` successes and `p` probability of success where `n`\nis > 0 and `p` is in the interval [0, 1].\n\n.. note::\n    New code should use the ``negative_binomial`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\nn : float or array_like of floats\n    Parameter of the distribution, > 0.\np : float or array_like of floats\n    Parameter of the distribution, >= 0 and <=1.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``n`` and ``p`` are both scalars.\n    Otherwise, ``np.broadcast(n, p).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized negative binomial distribution,\n    where each sample is equal to N, the number of failures that\n    occurred before a total of n successes was reached.\n\nSee Also\n--------\nrandom.Generator.negative_binomial: which should be used for new code.\n\nNotes\n-----\nThe probability mass function of the negative binomial distribution is\n\n.. math:: P(N;n,p) = \\frac{\\Gamma(N+n)}{N!\\Gamma(n)}p^{n}(1-p)^{N},\n\nwhere :math:`n` is the number of successes, :math:`p` is the\nprobability of success, :math:`N+n` is the number of trials, and\n:math:`\\Gamma` is the gamma function. When :math:`n` is an integer,\n:math:`\\frac{\\Gamma(N+n)}{N!\\Gamma(n)} = \\binom{N+n-1}{N}`, which is\nthe more common form of this term in the the pmf. The negative\nbinomial distribution gives the probability of N failures given n\nsuccesses, with a success on the last trial.\n\nIf one throws a die repeatedly until the third time a \"1\" appears,\nthen the probability distribution of the number of non-\"1\"s that\nappear before the third \"1\" is a negative binomial distribution.\n\nReferences\n----------\n.. [1] Weisstein, Eric W. \"Negative Binomial Distribution.\" From\n       MathWorld--A Wolfram Web Resource.\n       http://mathworld.wolfram.com/NegativeBinomialDistribution.html\n.. [2] Wikipedia, \"Negative binomial distribution\",\n       https://en.wikipedia.org/wiki/Negative_binomial_distribution\n\nExamples\n--------\nDraw samples from the distribution:\n\nA real world example. A company drills wild-cat oil\nexploration wells, each with an estimated probability of\nsuccess of 0.1.  What is the probability of having one success\nfor each successive well, that is what is the probability of a\nsingle success after drilling 5 wells, after 6 wells, etc.?\n\n>>> s = np.random.negative_binomial(1, 0.1, 100000)\n>>> for i in range(1, 11): # doctest: +SKIP\n...    probability = sum(s<i) / 100000.\n...    print(i, \"wells drilled, probability of one success =\", probability)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "494dce2f2816ee71540fdda956e24a001088e070117fec14736ef208efd5410c",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.negative_binomial",
                    "defaultValue": "numpy.random.RandomState.negative_binomial",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "numpy.random.noncentral_chisquare",
            "description": "\nDraw samples from a noncentral chi-square distribution.\n\nThe noncentral :math:`\\chi^2` distribution is a generalization of\nthe :math:`\\chi^2` distribution.\n\n.. note::\n    New code should use the ``noncentral_chisquare`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\ndf : float or array_like of floats\n    Degrees of freedom, must be > 0.\n\n    .. versionchanged:: 1.10.0\n       Earlier NumPy versions required dfnum > 1.\nnonc : float or array_like of floats\n    Non-centrality, must be non-negative.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``df`` and ``nonc`` are both scalars.\n    Otherwise, ``np.broadcast(df, nonc).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized noncentral chi-square distribution.\n\nSee Also\n--------\nrandom.Generator.noncentral_chisquare: which should be used for new code.\n\nNotes\n-----\nThe probability density function for the noncentral Chi-square\ndistribution is\n\n.. math:: P(x;df,nonc) = \\sum^{\\infty}_{i=0}\n                       \\frac{e^{-nonc/2}(nonc/2)^{i}}{i!}\n                       P_{Y_{df+2i}}(x),\n\nwhere :math:`Y_{q}` is the Chi-square with q degrees of freedom.\n\nReferences\n----------\n.. [1] Wikipedia, \"Noncentral chi-squared distribution\"\n       https://en.wikipedia.org/wiki/Noncentral_chi-squared_distribution\n\nExamples\n--------\nDraw values from the distribution and plot the histogram\n\n>>> import matplotlib.pyplot as plt\n>>> values = plt.hist(np.random.noncentral_chisquare(3, 20, 100000),\n...                   bins=200, density=True)\n>>> plt.show()\n\nDraw values from a noncentral chisquare with very small noncentrality,\nand compare to a chisquare.\n\n>>> plt.figure()\n>>> values = plt.hist(np.random.noncentral_chisquare(3, .0000001, 100000),\n...                   bins=np.arange(0., 25, .1), density=True)\n>>> values2 = plt.hist(np.random.chisquare(3, 100000),\n...                    bins=np.arange(0., 25, .1), density=True)\n>>> plt.plot(values[1][0:-1], values[0]-values2[0], 'ob')\n>>> plt.show()\n\nDemonstrate how large values of non-centrality lead to a more symmetric\ndistribution.\n\n>>> plt.figure()\n>>> values = plt.hist(np.random.noncentral_chisquare(3, 20, 100000),\n...                   bins=200, density=True)\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "852ef7f6b843dcd50288df08df876befe85624904fd933a322206497591a94fb",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.noncentral_chisquare",
                    "defaultValue": "numpy.random.RandomState.noncentral_chisquare",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "numpy.random.noncentral_f",
            "description": "\nDraw samples from the noncentral F distribution.\n\nSamples are drawn from an F distribution with specified parameters,\n`dfnum` (degrees of freedom in numerator) and `dfden` (degrees of\nfreedom in denominator), where both parameters > 1.\n`nonc` is the non-centrality parameter.\n\n.. note::\n    New code should use the ``noncentral_f`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\ndfnum : float or array_like of floats\n    Numerator degrees of freedom, must be > 0.\n\n    .. versionchanged:: 1.14.0\n       Earlier NumPy versions required dfnum > 1.\ndfden : float or array_like of floats\n    Denominator degrees of freedom, must be > 0.\nnonc : float or array_like of floats\n    Non-centrality parameter, the sum of the squares of the numerator\n    means, must be >= 0.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``dfnum``, ``dfden``, and ``nonc``\n    are all scalars.  Otherwise, ``np.broadcast(dfnum, dfden, nonc).size``\n    samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized noncentral Fisher distribution.\n\nSee Also\n--------\nrandom.Generator.noncentral_f: which should be used for new code.\n\nNotes\n-----\nWhen calculating the power of an experiment (power = probability of\nrejecting the null hypothesis when a specific alternative is true) the\nnon-central F statistic becomes important.  When the null hypothesis is\ntrue, the F statistic follows a central F distribution. When the null\nhypothesis is not true, then it follows a non-central F statistic.\n\nReferences\n----------\n.. [1] Weisstein, Eric W. \"Noncentral F-Distribution.\"\n       From MathWorld--A Wolfram Web Resource.\n       http://mathworld.wolfram.com/NoncentralF-Distribution.html\n.. [2] Wikipedia, \"Noncentral F-distribution\",\n       https://en.wikipedia.org/wiki/Noncentral_F-distribution\n\nExamples\n--------\nIn a study, testing for a specific alternative to the null hypothesis\nrequires use of the Noncentral F distribution. We need to calculate the\narea in the tail of the distribution that exceeds the value of the F\ndistribution for the null hypothesis.  We'll plot the two probability\ndistributions for comparison.\n\n>>> dfnum = 3 # between group deg of freedom\n>>> dfden = 20 # within groups degrees of freedom\n>>> nonc = 3.0\n>>> nc_vals = np.random.noncentral_f(dfnum, dfden, nonc, 1000000)\n>>> NF = np.histogram(nc_vals, bins=50, density=True)\n>>> c_vals = np.random.f(dfnum, dfden, 1000000)\n>>> F = np.histogram(c_vals, bins=50, density=True)\n>>> import matplotlib.pyplot as plt\n>>> plt.plot(F[1][1:], F[0])\n>>> plt.plot(NF[1][1:], NF[0])\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "3b85e460661fa5c3fe24d43af328d10bad40b265aba9346c9110ff636013f644",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.noncentral_f",
                    "defaultValue": "numpy.random.RandomState.noncentral_f",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "numpy.random.normal",
            "description": "\nDraw random samples from a normal (Gaussian) distribution.\n\nThe probability density function of the normal distribution, first\nderived by De Moivre and 200 years later by both Gauss and Laplace\nindependently [2]_, is often called the bell curve because of\nits characteristic shape (see the example below).\n\nThe normal distributions occurs often in nature.  For example, it\ndescribes the commonly occurring distribution of samples influenced\nby a large number of tiny, random disturbances, each with its own\nunique distribution [2]_.\n\n.. note::\n    New code should use the ``normal`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\nloc : float or array_like of floats\n    Mean (\"centre\") of the distribution.\nscale : float or array_like of floats\n    Standard deviation (spread or \"width\") of the distribution. Must be\n    non-negative.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``loc`` and ``scale`` are both scalars.\n    Otherwise, ``np.broadcast(loc, scale).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized normal distribution.\n\nSee Also\n--------\nscipy.stats.norm : probability density function, distribution or\n    cumulative density function, etc.\nrandom.Generator.normal: which should be used for new code.\n\nNotes\n-----\nThe probability density for the Gaussian distribution is\n\n.. math:: p(x) = \\frac{1}{\\sqrt{ 2 \\pi \\sigma^2 }}\n                 e^{ - \\frac{ (x - \\mu)^2 } {2 \\sigma^2} },\n\nwhere :math:`\\mu` is the mean and :math:`\\sigma` the standard\ndeviation. The square of the standard deviation, :math:`\\sigma^2`,\nis called the variance.\n\nThe function has its peak at the mean, and its \"spread\" increases with\nthe standard deviation (the function reaches 0.607 times its maximum at\n:math:`x + \\sigma` and :math:`x - \\sigma` [2]_).  This implies that\nnormal is more likely to return samples lying close to the mean, rather\nthan those far away.\n\nReferences\n----------\n.. [1] Wikipedia, \"Normal distribution\",\n       https://en.wikipedia.org/wiki/Normal_distribution\n.. [2] P. R. Peebles Jr., \"Central Limit Theorem\" in \"Probability,\n       Random Variables and Random Signal Principles\", 4th ed., 2001,\n       pp. 51, 51, 125.\n\nExamples\n--------\nDraw samples from the distribution:\n\n>>> mu, sigma = 0, 0.1 # mean and standard deviation\n>>> s = np.random.normal(mu, sigma, 1000)\n\nVerify the mean and the variance:\n\n>>> abs(mu - np.mean(s))\n0.0  # may vary\n\n>>> abs(sigma - np.std(s, ddof=1))\n0.1  # may vary\n\nDisplay the histogram of the samples, along with\nthe probability density function:\n\n>>> import matplotlib.pyplot as plt\n>>> count, bins, ignored = plt.hist(s, 30, density=True)\n>>> plt.plot(bins, 1/(sigma * np.sqrt(2 * np.pi)) *\n...                np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n...          linewidth=2, color='r')\n>>> plt.show()\n\nTwo-by-four array of samples from N(3, 6.25):\n\n>>> np.random.normal(3, 2.5, size=(2, 4))\narray([[-4.49401501,  4.00950034, -1.81814867,  7.29718677],   # random\n       [ 0.39924804,  4.68456316,  4.99394529,  4.84057254]])  # random",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5bedf5f41700f6552940ea9026020613e887ef02a327b5dc101eb42d36f232d9",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.normal",
                    "defaultValue": "numpy.random.RandomState.normal",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "numpy.random.pareto",
            "description": "\nDraw samples from a Pareto II or Lomax distribution with\nspecified shape.\n\nThe Lomax or Pareto II distribution is a shifted Pareto\ndistribution. The classical Pareto distribution can be\nobtained from the Lomax distribution by adding 1 and\nmultiplying by the scale parameter ``m`` (see Notes).  The\nsmallest value of the Lomax distribution is zero while for the\nclassical Pareto distribution it is ``mu``, where the standard\nPareto distribution has location ``mu = 1``.  Lomax can also\nbe considered as a simplified version of the Generalized\nPareto distribution (available in SciPy), with the scale set\nto one and the location set to zero.\n\nThe Pareto distribution must be greater than zero, and is\nunbounded above.  It is also known as the \"80-20 rule\".  In\nthis distribution, 80 percent of the weights are in the lowest\n20 percent of the range, while the other 20 percent fill the\nremaining 80 percent of the range.\n\n.. note::\n    New code should use the ``pareto`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\na : float or array_like of floats\n    Shape of the distribution. Must be positive.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``a`` is a scalar.  Otherwise,\n    ``np.array(a).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized Pareto distribution.\n\nSee Also\n--------\nscipy.stats.lomax : probability density function, distribution or\n    cumulative density function, etc.\nscipy.stats.genpareto : probability density function, distribution or\n    cumulative density function, etc.\nrandom.Generator.pareto: which should be used for new code.\n\nNotes\n-----\nThe probability density for the Pareto distribution is\n\n.. math:: p(x) = \\frac{am^a}{x^{a+1}}\n\nwhere :math:`a` is the shape and :math:`m` the scale.\n\nThe Pareto distribution, named after the Italian economist\nVilfredo Pareto, is a power law probability distribution\nuseful in many real world problems.  Outside the field of\neconomics it is generally referred to as the Bradford\ndistribution. Pareto developed the distribution to describe\nthe distribution of wealth in an economy.  It has also found\nuse in insurance, web page access statistics, oil field sizes,\nand many other problems, including the download frequency for\nprojects in Sourceforge [1]_.  It is one of the so-called\n\"fat-tailed\" distributions.\n\nReferences\n----------\n.. [1] Francis Hunt and Paul Johnson, On the Pareto Distribution of\n       Sourceforge projects.\n.. [2] Pareto, V. (1896). Course of Political Economy. Lausanne.\n.. [3] Reiss, R.D., Thomas, M.(2001), Statistical Analysis of Extreme\n       Values, Birkhauser Verlag, Basel, pp 23-30.\n.. [4] Wikipedia, \"Pareto distribution\",\n       https://en.wikipedia.org/wiki/Pareto_distribution\n\nExamples\n--------\nDraw samples from the distribution:\n\n>>> a, m = 3., 2.  # shape and mode\n>>> s = (np.random.pareto(a, 1000) + 1) * m\n\nDisplay the histogram of the samples, along with the probability\ndensity function:\n\n>>> import matplotlib.pyplot as plt\n>>> count, bins, _ = plt.hist(s, 100, density=True)\n>>> fit = a*m**a / bins**(a+1)\n>>> plt.plot(bins, max(count)*fit/max(fit), linewidth=2, color='r')\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "35fddb475442ffa17baee608bb89d94a2a8d869878a9bf2888a8bade09b74502",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.pareto",
                    "defaultValue": "numpy.random.RandomState.pareto",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "numpy.random.permutation",
            "description": "\nRandomly permute a sequence, or return a permuted range.\n\nIf `x` is a multi-dimensional array, it is only shuffled along its\nfirst index.\n\n.. note::\n    New code should use the ``permutation`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\nx : int or array_like\n    If `x` is an integer, randomly permute ``np.arange(x)``.\n    If `x` is an array, make a copy and shuffle the elements\n    randomly.\n\nReturns\n-------\nout : ndarray\n    Permuted sequence or array range.\n\nSee Also\n--------\nrandom.Generator.permutation: which should be used for new code.\n\nExamples\n--------\n>>> np.random.permutation(10)\narray([1, 7, 4, 3, 0, 9, 2, 5, 8, 6]) # random\n\n>>> np.random.permutation([1, 4, 9, 12, 15])\narray([15,  1,  9,  4, 12]) # random\n\n>>> arr = np.arange(9).reshape((3, 3))\n>>> np.random.permutation(arr)\narray([[6, 7, 8], # random\n       [0, 1, 2],\n       [3, 4, 5]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "720e3e04718dd680c90c047eb4ba9e9dfbb427c08b90984513ff9bc2be83ac71",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.permutation",
                    "defaultValue": "numpy.random.RandomState.permutation",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "numpy.random.poisson",
            "description": "\nDraw samples from a Poisson distribution.\n\nThe Poisson distribution is the limit of the binomial distribution\nfor large N.\n\n.. note::\n    New code should use the ``poisson`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\nlam : float or array_like of floats\n    Expected number of events occurring in a fixed-time interval,\n    must be >= 0. A sequence must be broadcastable over the requested\n    size.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``lam`` is a scalar. Otherwise,\n    ``np.array(lam).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized Poisson distribution.\n\nSee Also\n--------\nrandom.Generator.poisson: which should be used for new code.\n\nNotes\n-----\nThe Poisson distribution\n\n.. math:: f(k; \\lambda)=\\frac{\\lambda^k e^{-\\lambda}}{k!}\n\nFor events with an expected separation :math:`\\lambda` the Poisson\ndistribution :math:`f(k; \\lambda)` describes the probability of\n:math:`k` events occurring within the observed\ninterval :math:`\\lambda`.\n\nBecause the output is limited to the range of the C int64 type, a\nValueError is raised when `lam` is within 10 sigma of the maximum\nrepresentable value.\n\nReferences\n----------\n.. [1] Weisstein, Eric W. \"Poisson Distribution.\"\n       From MathWorld--A Wolfram Web Resource.\n       http://mathworld.wolfram.com/PoissonDistribution.html\n.. [2] Wikipedia, \"Poisson distribution\",\n       https://en.wikipedia.org/wiki/Poisson_distribution\n\nExamples\n--------\nDraw samples from the distribution:\n\n>>> import numpy as np\n>>> s = np.random.poisson(5, 10000)\n\nDisplay histogram of the sample:\n\n>>> import matplotlib.pyplot as plt\n>>> count, bins, ignored = plt.hist(s, 14, density=True)\n>>> plt.show()\n\nDraw each 100 values for lambda 100 and 500:\n\n>>> s = np.random.poisson(lam=(100., 500.), size=(100, 2))",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1497ec815ae6dacdbbe38caba1cd60e6d5851924620bdb2f596ba3d416a153f7",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.poisson",
                    "defaultValue": "numpy.random.RandomState.poisson",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "numpy.random.power",
            "description": "\nDraws samples in [0, 1] from a power distribution with positive\nexponent a - 1.\n\nAlso known as the power function distribution.\n\n.. note::\n    New code should use the ``power`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\na : float or array_like of floats\n    Parameter of the distribution. Must be non-negative.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``a`` is a scalar.  Otherwise,\n    ``np.array(a).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized power distribution.\n\nRaises\n------\nValueError\n    If a <= 0.\n\nSee Also\n--------\nrandom.Generator.power: which should be used for new code.\n\nNotes\n-----\nThe probability density function is\n\n.. math:: P(x; a) = ax^{a-1}, 0 \\le x \\le 1, a>0.\n\nThe power function distribution is just the inverse of the Pareto\ndistribution. It may also be seen as a special case of the Beta\ndistribution.\n\nIt is used, for example, in modeling the over-reporting of insurance\nclaims.\n\nReferences\n----------\n.. [1] Christian Kleiber, Samuel Kotz, \"Statistical size distributions\n       in economics and actuarial sciences\", Wiley, 2003.\n.. [2] Heckert, N. A. and Filliben, James J. \"NIST Handbook 148:\n       Dataplot Reference Manual, Volume 2: Let Subcommands and Library\n       Functions\", National Institute of Standards and Technology\n       Handbook Series, June 2003.\n       https://www.itl.nist.gov/div898/software/dataplot/refman2/auxillar/powpdf.pdf\n\nExamples\n--------\nDraw samples from the distribution:\n\n>>> a = 5. # shape\n>>> samples = 1000\n>>> s = np.random.power(a, samples)\n\nDisplay the histogram of the samples, along with\nthe probability density function:\n\n>>> import matplotlib.pyplot as plt\n>>> count, bins, ignored = plt.hist(s, bins=30)\n>>> x = np.linspace(0, 1, 100)\n>>> y = a*x**(a-1.)\n>>> normed_y = samples*np.diff(bins)[0]*y\n>>> plt.plot(x, normed_y)\n>>> plt.show()\n\nCompare the power function distribution to the inverse of the Pareto.\n\n>>> from scipy import stats # doctest: +SKIP\n>>> rvs = np.random.power(5, 1000000)\n>>> rvsp = np.random.pareto(5, 1000000)\n>>> xx = np.linspace(0,1,100)\n>>> powpdf = stats.powerlaw.pdf(xx,5)  # doctest: +SKIP\n\n>>> plt.figure()\n>>> plt.hist(rvs, bins=50, density=True)\n>>> plt.plot(xx,powpdf,'r-')  # doctest: +SKIP\n>>> plt.title('np.random.power(5)')\n\n>>> plt.figure()\n>>> plt.hist(1./(1.+rvsp), bins=50, density=True)\n>>> plt.plot(xx,powpdf,'r-')  # doctest: +SKIP\n>>> plt.title('inverse of 1 + np.random.pareto(5)')\n\n>>> plt.figure()\n>>> plt.hist(1./(1.+rvsp), bins=50, density=True)\n>>> plt.plot(xx,powpdf,'r-')  # doctest: +SKIP\n>>> plt.title('inverse of stats.pareto(5)')",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2254f48c11f66c1f41021c631c24c0dc9c93d54a1e21a44dc6a238f9d67547d8",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.power",
                    "defaultValue": "numpy.random.RandomState.power",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "numpy.random.rand",
            "description": "\nRandom values in a given shape.\n\n.. note::\n    This is a convenience function for users porting code from Matlab,\n    and wraps `random_sample`. That function takes a\n    tuple to specify the size of the output, which is consistent with\n    other NumPy functions like `numpy.zeros` and `numpy.ones`.\n\nCreate an array of the given shape and populate it with\nrandom samples from a uniform distribution\nover ``[0, 1)``.\n\nParameters\n----------\nd0, d1, ..., dn : int, optional\n    The dimensions of the returned array, must be non-negative.\n    If no argument is given a single Python float is returned.\n\nReturns\n-------\nout : ndarray, shape ``(d0, d1, ..., dn)``\n    Random values.\n\nSee Also\n--------\nrandom\n\nExamples\n--------\n>>> np.random.rand(3,2)\narray([[ 0.14022471,  0.96360618],  #random\n       [ 0.37601032,  0.25528411],  #random\n       [ 0.49313049,  0.94909878]]) #random",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a0e5973bca8c7191088227365a88c1ede535a7fce64b860cbc17d11c2e9c1db8",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.rand",
                    "defaultValue": "numpy.random.RandomState.rand",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "numpy.random.randint",
            "description": "\nReturn random integers from `low` (inclusive) to `high` (exclusive).\n\nReturn random integers from the \"discrete uniform\" distribution of\nthe specified dtype in the \"half-open\" interval [`low`, `high`). If\n`high` is None (the default), then results are from [0, `low`).\n\n.. note::\n    New code should use the ``integers`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\nlow : int or array-like of ints\n    Lowest (signed) integers to be drawn from the distribution (unless\n    ``high=None``, in which case this parameter is one above the\n    *highest* such integer).\nhigh : int or array-like of ints, optional\n    If provided, one above the largest (signed) integer to be drawn\n    from the distribution (see above for behavior if ``high=None``).\n    If array-like, must contain integer values\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  Default is None, in which case a\n    single value is returned.\ndtype : dtype, optional\n    Desired dtype of the result. Byteorder must be native.\n    The default value is int.\n\n    .. versionadded:: 1.11.0\n\nReturns\n-------\nout : int or ndarray of ints\n    `size`-shaped array of random integers from the appropriate\n    distribution, or a single such random int if `size` not provided.\n\nSee Also\n--------\nrandom_integers : similar to `randint`, only for the closed\n    interval [`low`, `high`], and 1 is the lowest value if `high` is\n    omitted.\nrandom.Generator.integers: which should be used for new code.\n\nExamples\n--------\n>>> np.random.randint(2, size=10)\narray([1, 0, 0, 0, 1, 1, 0, 0, 1, 0]) # random\n>>> np.random.randint(1, size=10)\narray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n\nGenerate a 2 x 4 array of ints between 0 and 4, inclusive:\n\n>>> np.random.randint(5, size=(2, 4))\narray([[4, 0, 2, 1], # random\n       [3, 2, 2, 0]])\n\nGenerate a 1 x 3 array with 3 different upper bounds\n\n>>> np.random.randint(1, [3, 5, 10])\narray([2, 2, 9]) # random\n\nGenerate a 1 by 3 array with 3 different lower bounds\n\n>>> np.random.randint([1, 5, 7], 10)\narray([9, 8, 7]) # random\n\nGenerate a 2 by 4 array using broadcasting with dtype of uint8\n\n>>> np.random.randint([1, 3, 5, 7], [[10], [20]], dtype=np.uint8)\narray([[ 8,  6,  9,  7], # random\n       [ 1, 16,  9, 12]], dtype=uint8)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4a7d55eeaa5779833d57845d4b6bd85c4e58f11c169e32b8b340a19cec5305ec",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.randint",
                    "defaultValue": "numpy.random.RandomState.randint",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "numpy.random.randn",
            "description": "\nReturn a sample (or samples) from the \"standard normal\" distribution.\n\n.. note::\n    This is a convenience function for users porting code from Matlab,\n    and wraps `standard_normal`. That function takes a\n    tuple to specify the size of the output, which is consistent with\n    other NumPy functions like `numpy.zeros` and `numpy.ones`.\n\n.. note::\n    New code should use the ``standard_normal`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nIf positive int_like arguments are provided, `randn` generates an array\nof shape ``(d0, d1, ..., dn)``, filled\nwith random floats sampled from a univariate \"normal\" (Gaussian)\ndistribution of mean 0 and variance 1. A single float randomly sampled\nfrom the distribution is returned if no argument is provided.\n\nParameters\n----------\nd0, d1, ..., dn : int, optional\n    The dimensions of the returned array, must be non-negative.\n    If no argument is given a single Python float is returned.\n\nReturns\n-------\nZ : ndarray or float\n    A ``(d0, d1, ..., dn)``-shaped array of floating-point samples from\n    the standard normal distribution, or a single such float if\n    no parameters were supplied.\n\nSee Also\n--------\nstandard_normal : Similar, but takes a tuple as its argument.\nnormal : Also accepts mu and sigma arguments.\nrandom.Generator.standard_normal: which should be used for new code.\n\nNotes\n-----\nFor random samples from :math:`N(\\mu, \\sigma^2)`, use:\n\n``sigma * np.random.randn(...) + mu``\n\nExamples\n--------\n>>> np.random.randn()\n2.1923875335537315  # random\n\nTwo-by-four array of samples from N(3, 6.25):\n\n>>> 3 + 2.5 * np.random.randn(2, 4)\narray([[-4.49401501,  4.00950034, -1.81814867,  7.29718677],   # random\n       [ 0.39924804,  4.68456316,  4.99394529,  4.84057254]])  # random",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2bbfd00b0f3a6a1418547002d6b540c6dfc573808ed8acc2b2174b8c6a55a754",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.randn",
                    "defaultValue": "numpy.random.RandomState.randn",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "numpy.random.random",
            "description": "\nReturn random floats in the half-open interval [0.0, 1.0). Alias for\n`random_sample` to ease forward-porting to the new random API.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5246209f172475d450f91a332c7af043d8eb823151930bb3e63e99f1de907479",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.random",
                    "defaultValue": "numpy.random.RandomState.random",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "numpy.random.random_integers",
            "description": "\nRandom integers of type `np.int_` between `low` and `high`, inclusive.\n\nReturn random integers of type `np.int_` from the \"discrete uniform\"\ndistribution in the closed interval [`low`, `high`].  If `high` is\nNone (the default), then results are from [1, `low`]. The `np.int_`\ntype translates to the C long integer type and its precision\nis platform dependent.\n\nThis function has been deprecated. Use randint instead.\n\n.. deprecated:: 1.11.0\n\nParameters\n----------\nlow : int\n    Lowest (signed) integer to be drawn from the distribution (unless\n    ``high=None``, in which case this parameter is the *highest* such\n    integer).\nhigh : int, optional\n    If provided, the largest (signed) integer to be drawn from the\n    distribution (see above for behavior if ``high=None``).\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  Default is None, in which case a\n    single value is returned.\n\nReturns\n-------\nout : int or ndarray of ints\n    `size`-shaped array of random integers from the appropriate\n    distribution, or a single such random int if `size` not provided.\n\nSee Also\n--------\nrandint : Similar to `random_integers`, only for the half-open\n    interval [`low`, `high`), and 0 is the lowest value if `high` is\n    omitted.\n\nNotes\n-----\nTo sample from N evenly spaced floating-point numbers between a and b,\nuse::\n\n  a + (b - a) * (np.random.random_integers(N) - 1) / (N - 1.)\n\nExamples\n--------\n>>> np.random.random_integers(5)\n4 # random\n>>> type(np.random.random_integers(5))\n<class 'numpy.int64'>\n>>> np.random.random_integers(5, size=(3,2))\narray([[5, 4], # random\n       [3, 3],\n       [4, 5]])\n\nChoose five random numbers from the set of five evenly-spaced\nnumbers between 0 and 2.5, inclusive (*i.e.*, from the set\n:math:`{0, 5/8, 10/8, 15/8, 20/8}`):\n\n>>> 2.5 * (np.random.random_integers(5, size=(5,)) - 1) / 4.\narray([ 0.625,  1.25 ,  0.625,  0.625,  2.5  ]) # random\n\nRoll two six sided dice 1000 times and sum the results:\n\n>>> d1 = np.random.random_integers(1, 6, 1000)\n>>> d2 = np.random.random_integers(1, 6, 1000)\n>>> dsums = d1 + d2\n\nDisplay results as a histogram:\n\n>>> import matplotlib.pyplot as plt\n>>> count, bins, ignored = plt.hist(dsums, 11, density=True)\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "3f29993f841540fdd1eee40a3a85cc982e69219415bfd4f5192188fe2d11209f",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.random_integers",
                    "defaultValue": "numpy.random.RandomState.random_integers",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "numpy.random.random_sample",
            "description": "\nReturn random floats in the half-open interval [0.0, 1.0).\n\nResults are from the \"continuous uniform\" distribution over the\nstated interval.  To sample :math:`Unif[a, b), b > a` multiply\nthe output of `random_sample` by `(b-a)` and add `a`::\n\n  (b - a) * random_sample() + a\n\n.. note::\n    New code should use the ``random`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  Default is None, in which case a\n    single value is returned.\n\nReturns\n-------\nout : float or ndarray of floats\n    Array of random floats of shape `size` (unless ``size=None``, in which\n    case a single float is returned).\n\nSee Also\n--------\nrandom.Generator.random: which should be used for new code.\n\nExamples\n--------\n>>> np.random.random_sample()\n0.47108547995356098 # random\n>>> type(np.random.random_sample())\n<class 'float'>\n>>> np.random.random_sample((5,))\narray([ 0.30220482,  0.86820401,  0.1654503 ,  0.11659149,  0.54323428]) # random\n\nThree-by-two array of random numbers from [-5, 0):\n\n>>> 5 * np.random.random_sample((3, 2)) - 5\narray([[-3.99149989, -0.52338984], # random\n       [-2.99091858, -0.79479508],\n       [-1.23204345, -1.75224494]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8486d29c0c4a4931c840e85bf2cbdace825e46885c9859b6935f9023cb9d67fa",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.random_sample",
                    "defaultValue": "numpy.random.RandomState.random_sample",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "numpy.random.ranf",
            "description": "This is an alias of `random_sample`. See `random_sample`  for the complete\ndocumentation.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "69750d759f7b65fc7ff4593df3e0b78a511d9d725d5688fb6db1cb4e6459246a",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.mtrand.ranf",
                    "defaultValue": "numpy.random.mtrand.ranf",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "numpy.random.rayleigh",
            "description": "\nDraw samples from a Rayleigh distribution.\n\nThe :math:`\\chi` and Weibull distributions are generalizations of the\nRayleigh.\n\n.. note::\n    New code should use the ``rayleigh`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\nscale : float or array_like of floats, optional\n    Scale, also equals the mode. Must be non-negative. Default is 1.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``scale`` is a scalar.  Otherwise,\n    ``np.array(scale).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized Rayleigh distribution.\n\nSee Also\n--------\nrandom.Generator.rayleigh: which should be used for new code.\n\nNotes\n-----\nThe probability density function for the Rayleigh distribution is\n\n.. math:: P(x;scale) = \\frac{x}{scale^2}e^{\\frac{-x^2}{2 \\cdotp scale^2}}\n\nThe Rayleigh distribution would arise, for example, if the East\nand North components of the wind velocity had identical zero-mean\nGaussian distributions.  Then the wind speed would have a Rayleigh\ndistribution.\n\nReferences\n----------\n.. [1] Brighton Webs Ltd., \"Rayleigh Distribution,\"\n       https://web.archive.org/web/20090514091424/http://brighton-webs.co.uk:80/distributions/rayleigh.asp\n.. [2] Wikipedia, \"Rayleigh distribution\"\n       https://en.wikipedia.org/wiki/Rayleigh_distribution\n\nExamples\n--------\nDraw values from the distribution and plot the histogram\n\n>>> from matplotlib.pyplot import hist\n>>> values = hist(np.random.rayleigh(3, 100000), bins=200, density=True)\n\nWave heights tend to follow a Rayleigh distribution. If the mean wave\nheight is 1 meter, what fraction of waves are likely to be larger than 3\nmeters?\n\n>>> meanvalue = 1\n>>> modevalue = np.sqrt(2 / np.pi) * meanvalue\n>>> s = np.random.rayleigh(modevalue, 1000000)\n\nThe percentage of waves larger than 3 meters is:\n\n>>> 100.*sum(s>3)/1000000.\n0.087300000000000003 # random",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9d84a3cc3fef1947925e7cf7c0353f0704e30f496c31f98c6a54d4c4d12e3d0b",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.rayleigh",
                    "defaultValue": "numpy.random.RandomState.rayleigh",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "numpy.random.sample",
            "description": "This is an alias of `random_sample`. See `random_sample`  for the complete\ndocumentation.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "50cc681dba30898f9fca5c3f60a83da711a6ac3c5f4694559c13a901c3d92bb0",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.mtrand.sample",
                    "defaultValue": "numpy.random.mtrand.sample",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "numpy.random.seed",
            "description": "\nReseed a legacy MT19937 BitGenerator\n\nNotes\n-----\nThis is a convenience, legacy function.\n\nThe best practice is to **not** reseed a BitGenerator, rather to\nrecreate a new one. This method is here for legacy reasons.\nThis example demonstrates best practice.\n\n>>> from numpy.random import MT19937\n>>> from numpy.random import RandomState, SeedSequence\n>>> rs = RandomState(MT19937(SeedSequence(123456789)))\n# Later, you want to restart the stream\n>>> rs = RandomState(MT19937(SeedSequence(987654321)))",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "63be381f1e50d1c5ebdf66957d7b98130f4b7e0999159bfdb132fc4cce6c46b3",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.seed",
                    "defaultValue": "numpy.random.RandomState.seed",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "numpy.random.set_state",
            "description": "\nSet the internal state of the generator from a tuple.\n\nFor use if one has reason to manually (re-)set the internal state of\nthe bit generator used by the RandomState instance. By default,\nRandomState uses the \"Mersenne Twister\"[1]_ pseudo-random number\ngenerating algorithm.\n\nParameters\n----------\nstate : {tuple(str, ndarray of 624 uints, int, int, float), dict}\n    The `state` tuple has the following items:\n\n    1. the string 'MT19937', specifying the Mersenne Twister algorithm.\n    2. a 1-D array of 624 unsigned integers ``keys``.\n    3. an integer ``pos``.\n    4. an integer ``has_gauss``.\n    5. a float ``cached_gaussian``.\n\n    If state is a dictionary, it is directly set using the BitGenerators\n    `state` property.\n\nReturns\n-------\nout : None\n    Returns 'None' on success.\n\nSee Also\n--------\nget_state\n\nNotes\n-----\n`set_state` and `get_state` are not needed to work with any of the\nrandom distributions in NumPy. If the internal state is manually altered,\nthe user should know exactly what he/she is doing.\n\nFor backwards compatibility, the form (str, array of 624 uints, int) is\nalso accepted although it is missing some information about the cached\nGaussian value: ``state = ('MT19937', keys, pos)``.\n\nReferences\n----------\n.. [1] M. Matsumoto and T. Nishimura, \"Mersenne Twister: A\n   623-dimensionally equidistributed uniform pseudorandom number\n   generator,\" *ACM Trans. on Modeling and Computer Simulation*,\n   Vol. 8, No. 1, pp. 3-30, Jan. 1998.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4bace7166c24b25996e6b085cf2f3408f1bc7a1bb335ee95587c9bff9137e620",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.set_state",
                    "defaultValue": "numpy.random.RandomState.set_state",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "numpy.random.shuffle",
            "description": "\nModify a sequence in-place by shuffling its contents.\n\nThis function only shuffles the array along the first axis of a\nmulti-dimensional array. The order of sub-arrays is changed but\ntheir contents remains the same.\n\n.. note::\n    New code should use the ``shuffle`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\nx : ndarray or MutableSequence\n    The array, list or mutable sequence to be shuffled.\n\nReturns\n-------\nNone\n\nSee Also\n--------\nrandom.Generator.shuffle: which should be used for new code.\n\nExamples\n--------\n>>> arr = np.arange(10)\n>>> np.random.shuffle(arr)\n>>> arr\n[1 7 5 2 9 4 3 6 0 8] # random\n\nMulti-dimensional arrays are only shuffled along the first axis:\n\n>>> arr = np.arange(9).reshape((3, 3))\n>>> np.random.shuffle(arr)\n>>> arr\narray([[3, 4, 5], # random\n       [6, 7, 8],\n       [0, 1, 2]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "89540c165abc1475f1d076528df033fc8ca1d8c6e6de201b96ba5fe0d8522d83",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.shuffle",
                    "defaultValue": "numpy.random.RandomState.shuffle",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "numpy.random.standard_cauchy",
            "description": "\nDraw samples from a standard Cauchy distribution with mode = 0.\n\nAlso known as the Lorentz distribution.\n\n.. note::\n    New code should use the ``standard_cauchy`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  Default is None, in which case a\n    single value is returned.\n\nReturns\n-------\nsamples : ndarray or scalar\n    The drawn samples.\n\nSee Also\n--------\nrandom.Generator.standard_cauchy: which should be used for new code.\n\nNotes\n-----\nThe probability density function for the full Cauchy distribution is\n\n.. math:: P(x; x_0, \\gamma) = \\frac{1}{\\pi \\gamma \\bigl[ 1+\n          (\\frac{x-x_0}{\\gamma})^2 \\bigr] }\n\nand the Standard Cauchy distribution just sets :math:`x_0=0` and\n:math:`\\gamma=1`\n\nThe Cauchy distribution arises in the solution to the driven harmonic\noscillator problem, and also describes spectral line broadening. It\nalso describes the distribution of values at which a line tilted at\na random angle will cut the x axis.\n\nWhen studying hypothesis tests that assume normality, seeing how the\ntests perform on data from a Cauchy distribution is a good indicator of\ntheir sensitivity to a heavy-tailed distribution, since the Cauchy looks\nvery much like a Gaussian distribution, but with heavier tails.\n\nReferences\n----------\n.. [1] NIST/SEMATECH e-Handbook of Statistical Methods, \"Cauchy\n      Distribution\",\n      https://www.itl.nist.gov/div898/handbook/eda/section3/eda3663.htm\n.. [2] Weisstein, Eric W. \"Cauchy Distribution.\" From MathWorld--A\n      Wolfram Web Resource.\n      http://mathworld.wolfram.com/CauchyDistribution.html\n.. [3] Wikipedia, \"Cauchy distribution\"\n      https://en.wikipedia.org/wiki/Cauchy_distribution\n\nExamples\n--------\nDraw samples and plot the distribution:\n\n>>> import matplotlib.pyplot as plt\n>>> s = np.random.standard_cauchy(1000000)\n>>> s = s[(s>-25) & (s<25)]  # truncate distribution so it plots well\n>>> plt.hist(s, bins=100)\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f059c78b68649fdedc3dcb6e3aee6d073ecc1165c14b78dcd0f66bc071ad4843",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.standard_cauchy",
                    "defaultValue": "numpy.random.RandomState.standard_cauchy",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "numpy.random.standard_exponential",
            "description": "\nDraw samples from the standard exponential distribution.\n\n`standard_exponential` is identical to the exponential distribution\nwith a scale parameter of 1.\n\n.. note::\n    New code should use the ``standard_exponential`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  Default is None, in which case a\n    single value is returned.\n\nReturns\n-------\nout : float or ndarray\n    Drawn samples.\n\nSee Also\n--------\nrandom.Generator.standard_exponential: which should be used for new code.\n\nExamples\n--------\nOutput a 3x8000 array:\n\n>>> n = np.random.standard_exponential((3, 8000))",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "3357483d9fc3c9315aff07ef6bb2094caea98b9e66a59a385c6007ec3a586913",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.standard_exponential",
                    "defaultValue": "numpy.random.RandomState.standard_exponential",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "numpy.random.standard_gamma",
            "description": "\nDraw samples from a standard Gamma distribution.\n\nSamples are drawn from a Gamma distribution with specified parameters,\nshape (sometimes designated \"k\") and scale=1.\n\n.. note::\n    New code should use the ``standard_gamma`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\nshape : float or array_like of floats\n    Parameter, must be non-negative.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``shape`` is a scalar.  Otherwise,\n    ``np.array(shape).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized standard gamma distribution.\n\nSee Also\n--------\nscipy.stats.gamma : probability density function, distribution or\n    cumulative density function, etc.\nrandom.Generator.standard_gamma: which should be used for new code.\n\nNotes\n-----\nThe probability density for the Gamma distribution is\n\n.. math:: p(x) = x^{k-1}\\frac{e^{-x/\\theta}}{\\theta^k\\Gamma(k)},\n\nwhere :math:`k` is the shape and :math:`\\theta` the scale,\nand :math:`\\Gamma` is the Gamma function.\n\nThe Gamma distribution is often used to model the times to failure of\nelectronic components, and arises naturally in processes for which the\nwaiting times between Poisson distributed events are relevant.\n\nReferences\n----------\n.. [1] Weisstein, Eric W. \"Gamma Distribution.\" From MathWorld--A\n       Wolfram Web Resource.\n       http://mathworld.wolfram.com/GammaDistribution.html\n.. [2] Wikipedia, \"Gamma distribution\",\n       https://en.wikipedia.org/wiki/Gamma_distribution\n\nExamples\n--------\nDraw samples from the distribution:\n\n>>> shape, scale = 2., 1. # mean and width\n>>> s = np.random.standard_gamma(shape, 1000000)\n\nDisplay the histogram of the samples, along with\nthe probability density function:\n\n>>> import matplotlib.pyplot as plt\n>>> import scipy.special as sps  # doctest: +SKIP\n>>> count, bins, ignored = plt.hist(s, 50, density=True)\n>>> y = bins**(shape-1) * ((np.exp(-bins/scale))/  # doctest: +SKIP\n...                       (sps.gamma(shape) * scale**shape))\n>>> plt.plot(bins, y, linewidth=2, color='r')  # doctest: +SKIP\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "837a559ac9eed2e3c53cdd191133b77627412b53dc320f79fb5d21c5530fd001",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.standard_gamma",
                    "defaultValue": "numpy.random.RandomState.standard_gamma",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "numpy.random.standard_normal",
            "description": "\nDraw samples from a standard Normal distribution (mean=0, stdev=1).\n\n.. note::\n    New code should use the ``standard_normal`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  Default is None, in which case a\n    single value is returned.\n\nReturns\n-------\nout : float or ndarray\n    A floating-point array of shape ``size`` of drawn samples, or a\n    single sample if ``size`` was not specified.\n\nSee Also\n--------\nnormal :\n    Equivalent function with additional ``loc`` and ``scale`` arguments\n    for setting the mean and standard deviation.\nrandom.Generator.standard_normal: which should be used for new code.\n\nNotes\n-----\nFor random samples from :math:`N(\\mu, \\sigma^2)`, use one of::\n\n    mu + sigma * np.random.standard_normal(size=...)\n    np.random.normal(mu, sigma, size=...)\n\nExamples\n--------\n>>> np.random.standard_normal()\n2.1923875335537315 #random\n\n>>> s = np.random.standard_normal(8000)\n>>> s\narray([ 0.6888893 ,  0.78096262, -0.89086505, ...,  0.49876311,  # random\n       -0.38672696, -0.4685006 ])                                # random\n>>> s.shape\n(8000,)\n>>> s = np.random.standard_normal(size=(3, 4, 2))\n>>> s.shape\n(3, 4, 2)\n\nTwo-by-four array of samples from :math:`N(3, 6.25)`:\n\n>>> 3 + 2.5 * np.random.standard_normal(size=(2, 4))\narray([[-4.49401501,  4.00950034, -1.81814867,  7.29718677],   # random\n       [ 0.39924804,  4.68456316,  4.99394529,  4.84057254]])  # random",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4b868bd49d8b8abae506f8e95c0f47416a5df645d18c79025f092df5d72402e0",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.standard_normal",
                    "defaultValue": "numpy.random.RandomState.standard_normal",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "numpy.random.standard_t",
            "description": "\nDraw samples from a standard Student's t distribution with `df` degrees\nof freedom.\n\nA special case of the hyperbolic distribution.  As `df` gets\nlarge, the result resembles that of the standard normal\ndistribution (`standard_normal`).\n\n.. note::\n    New code should use the ``standard_t`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\ndf : float or array_like of floats\n    Degrees of freedom, must be > 0.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``df`` is a scalar.  Otherwise,\n    ``np.array(df).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized standard Student's t distribution.\n\nSee Also\n--------\nrandom.Generator.standard_t: which should be used for new code.\n\nNotes\n-----\nThe probability density function for the t distribution is\n\n.. math:: P(x, df) = \\frac{\\Gamma(\\frac{df+1}{2})}{\\sqrt{\\pi df}\n          \\Gamma(\\frac{df}{2})}\\Bigl( 1+\\frac{x^2}{df} \\Bigr)^{-(df+1)/2}\n\nThe t test is based on an assumption that the data come from a\nNormal distribution. The t test provides a way to test whether\nthe sample mean (that is the mean calculated from the data) is\na good estimate of the true mean.\n\nThe derivation of the t-distribution was first published in\n1908 by William Gosset while working for the Guinness Brewery\nin Dublin. Due to proprietary issues, he had to publish under\na pseudonym, and so he used the name Student.\n\nReferences\n----------\n.. [1] Dalgaard, Peter, \"Introductory Statistics With R\",\n       Springer, 2002.\n.. [2] Wikipedia, \"Student's t-distribution\"\n       https://en.wikipedia.org/wiki/Student's_t-distribution\n\nExamples\n--------\nFrom Dalgaard page 83 [1]_, suppose the daily energy intake for 11\nwomen in kilojoules (kJ) is:\n\n>>> intake = np.array([5260., 5470, 5640, 6180, 6390, 6515, 6805, 7515, \\\n...                    7515, 8230, 8770])\n\nDoes their energy intake deviate systematically from the recommended\nvalue of 7725 kJ? Our null hypothesis will be the absence of deviation,\nand the alternate hypothesis will be the presence of an effect that could be\neither positive or negative, hence making our test 2-tailed. \n\nBecause we are estimating the mean and we have N=11 values in our sample,\nwe have N-1=10 degrees of freedom. We set our significance level to 95% and \ncompute the t statistic using the empirical mean and empirical standard \ndeviation of our intake. We use a ddof of 1 to base the computation of our \nempirical standard deviation on an unbiased estimate of the variance (note:\nthe final estimate is not unbiased due to the concave nature of the square \nroot).\n\n>>> np.mean(intake)\n6753.636363636364\n>>> intake.std(ddof=1)\n1142.1232221373727\n>>> t = (np.mean(intake)-7725)/(intake.std(ddof=1)/np.sqrt(len(intake)))\n>>> t\n-2.8207540608310198\n\nWe draw 1000000 samples from Student's t distribution with the adequate\ndegrees of freedom.\n\n>>> import matplotlib.pyplot as plt\n>>> s = np.random.standard_t(10, size=1000000)\n>>> h = plt.hist(s, bins=100, density=True)\n\nDoes our t statistic land in one of the two critical regions found at \nboth tails of the distribution?\n\n>>> np.sum(np.abs(t) < np.abs(s)) / float(len(s))\n0.018318  #random < 0.05, statistic is in critical region\n\nThe probability value for this 2-tailed test is about 1.83%, which is \nlower than the 5% pre-determined significance threshold. \n\nTherefore, the probability of observing values as extreme as our intake\nconditionally on the null hypothesis being true is too low, and we reject \nthe null hypothesis of no deviation. ",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a3d2d7d943f53a7ec4d9c7cd83fc106e808cbdf0c5fec7539146365d61e04c28",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.standard_t",
                    "defaultValue": "numpy.random.RandomState.standard_t",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "numpy.random.triangular",
            "description": "\nDraw samples from the triangular distribution over the\ninterval ``[left, right]``.\n\nThe triangular distribution is a continuous probability\ndistribution with lower limit left, peak at mode, and upper\nlimit right. Unlike the other distributions, these parameters\ndirectly define the shape of the pdf.\n\n.. note::\n    New code should use the ``triangular`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\nleft : float or array_like of floats\n    Lower limit.\nmode : float or array_like of floats\n    The value where the peak of the distribution occurs.\n    The value must fulfill the condition ``left <= mode <= right``.\nright : float or array_like of floats\n    Upper limit, must be larger than `left`.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``left``, ``mode``, and ``right``\n    are all scalars.  Otherwise, ``np.broadcast(left, mode, right).size``\n    samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized triangular distribution.\n\nSee Also\n--------\nrandom.Generator.triangular: which should be used for new code.\n\nNotes\n-----\nThe probability density function for the triangular distribution is\n\n.. math:: P(x;l, m, r) = \\begin{cases}\n          \\frac{2(x-l)}{(r-l)(m-l)}& \\text{for $l \\leq x \\leq m$},\\\\\n          \\frac{2(r-x)}{(r-l)(r-m)}& \\text{for $m \\leq x \\leq r$},\\\\\n          0& \\text{otherwise}.\n          \\end{cases}\n\nThe triangular distribution is often used in ill-defined\nproblems where the underlying distribution is not known, but\nsome knowledge of the limits and mode exists. Often it is used\nin simulations.\n\nReferences\n----------\n.. [1] Wikipedia, \"Triangular distribution\"\n       https://en.wikipedia.org/wiki/Triangular_distribution\n\nExamples\n--------\nDraw values from the distribution and plot the histogram:\n\n>>> import matplotlib.pyplot as plt\n>>> h = plt.hist(np.random.triangular(-3, 0, 8, 100000), bins=200,\n...              density=True)\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8e1f3888af6dd827d114ed82aa81b60804e4b3f0e989b88759cb134118d31754",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.triangular",
                    "defaultValue": "numpy.random.RandomState.triangular",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "numpy.random.uniform",
            "description": "\nDraw samples from a uniform distribution.\n\nSamples are uniformly distributed over the half-open interval\n``[low, high)`` (includes low, but excludes high).  In other words,\nany value within the given interval is equally likely to be drawn\nby `uniform`.\n\n.. note::\n    New code should use the ``uniform`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\nlow : float or array_like of floats, optional\n    Lower boundary of the output interval.  All values generated will be\n    greater than or equal to low.  The default value is 0.\nhigh : float or array_like of floats\n    Upper boundary of the output interval.  All values generated will be\n    less than or equal to high.  The high limit may be included in the \n    returned array of floats due to floating-point rounding in the \n    equation ``low + (high-low) * random_sample()``.  The default value \n    is 1.0.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``low`` and ``high`` are both scalars.\n    Otherwise, ``np.broadcast(low, high).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized uniform distribution.\n\nSee Also\n--------\nrandint : Discrete uniform distribution, yielding integers.\nrandom_integers : Discrete uniform distribution over the closed\n                  interval ``[low, high]``.\nrandom_sample : Floats uniformly distributed over ``[0, 1)``.\nrandom : Alias for `random_sample`.\nrand : Convenience function that accepts dimensions as input, e.g.,\n       ``rand(2,2)`` would generate a 2-by-2 array of floats,\n       uniformly distributed over ``[0, 1)``.\nrandom.Generator.uniform: which should be used for new code.\n\nNotes\n-----\nThe probability density function of the uniform distribution is\n\n.. math:: p(x) = \\frac{1}{b - a}\n\nanywhere within the interval ``[a, b)``, and zero elsewhere.\n\nWhen ``high`` == ``low``, values of ``low`` will be returned.\nIf ``high`` < ``low``, the results are officially undefined\nand may eventually raise an error, i.e. do not rely on this\nfunction to behave when passed arguments satisfying that\ninequality condition. The ``high`` limit may be included in the\nreturned array of floats due to floating-point rounding in the\nequation ``low + (high-low) * random_sample()``. For example:\n\n>>> x = np.float32(5*0.99999999)\n>>> x\n5.0\n\n\nExamples\n--------\nDraw samples from the distribution:\n\n>>> s = np.random.uniform(-1,0,1000)\n\nAll values are within the given interval:\n\n>>> np.all(s >= -1)\nTrue\n>>> np.all(s < 0)\nTrue\n\nDisplay the histogram of the samples, along with the\nprobability density function:\n\n>>> import matplotlib.pyplot as plt\n>>> count, bins, ignored = plt.hist(s, 15, density=True)\n>>> plt.plot(bins, np.ones_like(bins), linewidth=2, color='r')\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f0c8c642cd05780c3d7226d72bcaf7d2f8336852e985c691c849e6e91256f3fd",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.uniform",
                    "defaultValue": "numpy.random.RandomState.uniform",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "numpy.random.vonmises",
            "description": "\nDraw samples from a von Mises distribution.\n\nSamples are drawn from a von Mises distribution with specified mode\n(mu) and dispersion (kappa), on the interval [-pi, pi].\n\nThe von Mises distribution (also known as the circular normal\ndistribution) is a continuous probability distribution on the unit\ncircle.  It may be thought of as the circular analogue of the normal\ndistribution.\n\n.. note::\n    New code should use the ``vonmises`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\nmu : float or array_like of floats\n    Mode (\"center\") of the distribution.\nkappa : float or array_like of floats\n    Dispersion of the distribution, has to be >=0.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``mu`` and ``kappa`` are both scalars.\n    Otherwise, ``np.broadcast(mu, kappa).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized von Mises distribution.\n\nSee Also\n--------\nscipy.stats.vonmises : probability density function, distribution, or\n    cumulative density function, etc.\nrandom.Generator.vonmises: which should be used for new code.\n\nNotes\n-----\nThe probability density for the von Mises distribution is\n\n.. math:: p(x) = \\frac{e^{\\kappa cos(x-\\mu)}}{2\\pi I_0(\\kappa)},\n\nwhere :math:`\\mu` is the mode and :math:`\\kappa` the dispersion,\nand :math:`I_0(\\kappa)` is the modified Bessel function of order 0.\n\nThe von Mises is named for Richard Edler von Mises, who was born in\nAustria-Hungary, in what is now the Ukraine.  He fled to the United\nStates in 1939 and became a professor at Harvard.  He worked in\nprobability theory, aerodynamics, fluid mechanics, and philosophy of\nscience.\n\nReferences\n----------\n.. [1] Abramowitz, M. and Stegun, I. A. (Eds.). \"Handbook of\n       Mathematical Functions with Formulas, Graphs, and Mathematical\n       Tables, 9th printing,\" New York: Dover, 1972.\n.. [2] von Mises, R., \"Mathematical Theory of Probability\n       and Statistics\", New York: Academic Press, 1964.\n\nExamples\n--------\nDraw samples from the distribution:\n\n>>> mu, kappa = 0.0, 4.0 # mean and dispersion\n>>> s = np.random.vonmises(mu, kappa, 1000)\n\nDisplay the histogram of the samples, along with\nthe probability density function:\n\n>>> import matplotlib.pyplot as plt\n>>> from scipy.special import i0  # doctest: +SKIP\n>>> plt.hist(s, 50, density=True)\n>>> x = np.linspace(-np.pi, np.pi, num=51)\n>>> y = np.exp(kappa*np.cos(x-mu))/(2*np.pi*i0(kappa))  # doctest: +SKIP\n>>> plt.plot(x, y, linewidth=2, color='r')  # doctest: +SKIP\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b7bf4ef3f557fb76e1adf174486573cdafa52a68e4dfa4126795eac0db6ab193",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.vonmises",
                    "defaultValue": "numpy.random.RandomState.vonmises",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "numpy.random.wald",
            "description": "\nDraw samples from a Wald, or inverse Gaussian, distribution.\n\nAs the scale approaches infinity, the distribution becomes more like a\nGaussian. Some references claim that the Wald is an inverse Gaussian\nwith mean equal to 1, but this is by no means universal.\n\nThe inverse Gaussian distribution was first studied in relationship to\nBrownian motion. In 1956 M.C.K. Tweedie used the name inverse Gaussian\nbecause there is an inverse relationship between the time to cover a\nunit distance and distance covered in unit time.\n\n.. note::\n    New code should use the ``wald`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\nmean : float or array_like of floats\n    Distribution mean, must be > 0.\nscale : float or array_like of floats\n    Scale parameter, must be > 0.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``mean`` and ``scale`` are both scalars.\n    Otherwise, ``np.broadcast(mean, scale).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized Wald distribution.\n\nSee Also\n--------\nrandom.Generator.wald: which should be used for new code.\n\nNotes\n-----\nThe probability density function for the Wald distribution is\n\n.. math:: P(x;mean,scale) = \\sqrt{\\frac{scale}{2\\pi x^3}}e^\n                            \\frac{-scale(x-mean)^2}{2\\cdotp mean^2x}\n\nAs noted above the inverse Gaussian distribution first arise\nfrom attempts to model Brownian motion. It is also a\ncompetitor to the Weibull for use in reliability modeling and\nmodeling stock returns and interest rate processes.\n\nReferences\n----------\n.. [1] Brighton Webs Ltd., Wald Distribution,\n       https://web.archive.org/web/20090423014010/http://www.brighton-webs.co.uk:80/distributions/wald.asp\n.. [2] Chhikara, Raj S., and Folks, J. Leroy, \"The Inverse Gaussian\n       Distribution: Theory : Methodology, and Applications\", CRC Press,\n       1988.\n.. [3] Wikipedia, \"Inverse Gaussian distribution\"\n       https://en.wikipedia.org/wiki/Inverse_Gaussian_distribution\n\nExamples\n--------\nDraw values from the distribution and plot the histogram:\n\n>>> import matplotlib.pyplot as plt\n>>> h = plt.hist(np.random.wald(3, 2, 100000), bins=200, density=True)\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "007de22a10740b6646e468e85e876b9755d13357bcfe59de03885d4f12c4ee26",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.wald",
                    "defaultValue": "numpy.random.RandomState.wald",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "numpy.random.weibull",
            "description": "\nDraw samples from a Weibull distribution.\n\nDraw samples from a 1-parameter Weibull distribution with the given\nshape parameter `a`.\n\n.. math:: X = (-ln(U))^{1/a}\n\nHere, U is drawn from the uniform distribution over (0,1].\n\nThe more common 2-parameter Weibull, including a scale parameter\n:math:`\\lambda` is just :math:`X = \\lambda(-ln(U))^{1/a}`.\n\n.. note::\n    New code should use the ``weibull`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\na : float or array_like of floats\n    Shape parameter of the distribution.  Must be nonnegative.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``a`` is a scalar.  Otherwise,\n    ``np.array(a).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized Weibull distribution.\n\nSee Also\n--------\nscipy.stats.weibull_max\nscipy.stats.weibull_min\nscipy.stats.genextreme\ngumbel\nrandom.Generator.weibull: which should be used for new code.\n\nNotes\n-----\nThe Weibull (or Type III asymptotic extreme value distribution\nfor smallest values, SEV Type III, or Rosin-Rammler\ndistribution) is one of a class of Generalized Extreme Value\n(GEV) distributions used in modeling extreme value problems.\nThis class includes the Gumbel and Frechet distributions.\n\nThe probability density for the Weibull distribution is\n\n.. math:: p(x) = \\frac{a}\n                 {\\lambda}(\\frac{x}{\\lambda})^{a-1}e^{-(x/\\lambda)^a},\n\nwhere :math:`a` is the shape and :math:`\\lambda` the scale.\n\nThe function has its peak (the mode) at\n:math:`\\lambda(\\frac{a-1}{a})^{1/a}`.\n\nWhen ``a = 1``, the Weibull distribution reduces to the exponential\ndistribution.\n\nReferences\n----------\n.. [1] Waloddi Weibull, Royal Technical University, Stockholm,\n       1939 \"A Statistical Theory Of The Strength Of Materials\",\n       Ingeniorsvetenskapsakademiens Handlingar Nr 151, 1939,\n       Generalstabens Litografiska Anstalts Forlag, Stockholm.\n.. [2] Waloddi Weibull, \"A Statistical Distribution Function of\n       Wide Applicability\", Journal Of Applied Mechanics ASME Paper\n       1951.\n.. [3] Wikipedia, \"Weibull distribution\",\n       https://en.wikipedia.org/wiki/Weibull_distribution\n\nExamples\n--------\nDraw samples from the distribution:\n\n>>> a = 5. # shape\n>>> s = np.random.weibull(a, 1000)\n\nDisplay the histogram of the samples, along with\nthe probability density function:\n\n>>> import matplotlib.pyplot as plt\n>>> x = np.arange(1,100.)/50.\n>>> def weib(x,n,a):\n...     return (a / n) * (x / n)**(a - 1) * np.exp(-(x / n)**a)\n\n>>> count, bins, ignored = plt.hist(np.random.weibull(5.,1000))\n>>> x = np.arange(1,100.)/50.\n>>> scale = count.max()/weib(x, 1., 5.).max()\n>>> plt.plot(x, weib(x, 1., 5.)*scale)\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "08a8ce3772c88825f2611060c4f42ec317c361bd4632a57ca32e7ec859eba9d2",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.weibull",
                    "defaultValue": "numpy.random.RandomState.weibull",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "numpy.random.zipf",
            "description": "\nDraw samples from a Zipf distribution.\n\nSamples are drawn from a Zipf distribution with specified parameter\n`a` > 1.\n\nThe Zipf distribution (also known as the zeta distribution) is a\ndiscrete probability distribution that satisfies Zipf's law: the\nfrequency of an item is inversely proportional to its rank in a\nfrequency table.\n\n.. note::\n    New code should use the ``zipf`` method of a ``default_rng()``\n    instance instead; please see the :ref:`random-quick-start`.\n\nParameters\n----------\na : float or array_like of floats\n    Distribution parameter. Must be greater than 1.\nsize : int or tuple of ints, optional\n    Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n    ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n    a single value is returned if ``a`` is a scalar. Otherwise,\n    ``np.array(a).size`` samples are drawn.\n\nReturns\n-------\nout : ndarray or scalar\n    Drawn samples from the parameterized Zipf distribution.\n\nSee Also\n--------\nscipy.stats.zipf : probability density function, distribution, or\n    cumulative density function, etc.\nrandom.Generator.zipf: which should be used for new code.\n\nNotes\n-----\nThe probability density for the Zipf distribution is\n\n.. math:: p(k) = \\frac{k^{-a}}{\\zeta(a)},\n\nfor integers :math:`k \\geq 1`, where :math:`\\zeta` is the Riemann Zeta\nfunction.\n\nIt is named for the American linguist George Kingsley Zipf, who noted\nthat the frequency of any word in a sample of a language is inversely\nproportional to its rank in the frequency table.\n\nReferences\n----------\n.. [1] Zipf, G. K., \"Selected Studies of the Principle of Relative\n       Frequency in Language,\" Cambridge, MA: Harvard Univ. Press,\n       1932.\n\nExamples\n--------\nDraw samples from the distribution:\n\n>>> a = 4.0\n>>> n = 20000\n>>> s = np.random.zipf(a, n)\n\nDisplay the histogram of the samples, along with\nthe expected histogram based on the probability\ndensity function:\n\n>>> import matplotlib.pyplot as plt\n>>> from scipy.special import zeta  # doctest: +SKIP\n\n`bincount` provides a fast histogram for small integers.\n\n>>> count = np.bincount(s)\n>>> k = np.arange(1, s.max() + 1)\n\n>>> plt.bar(k, count[1:], alpha=0.5, label='sample count')\n>>> plt.plot(k, n*(k**-a)/zeta(a), 'k.-', alpha=0.5,\n...          label='expected count')   # doctest: +SKIP\n>>> plt.semilogy()\n>>> plt.grid(alpha=0.4)\n>>> plt.legend()\n>>> plt.title(f'Zipf sample, a={a}, size={n}')\n>>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e93da2f18db3867e8e96262f60403ffa7f883e4b3c302de7b838f825665c86e1",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.random.RandomState.zipf",
                    "defaultValue": "numpy.random.RandomState.zipf",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        }
    ],
    "linkDataArray": []
}