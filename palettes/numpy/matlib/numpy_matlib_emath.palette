{
    "modelData": {
        "filePath": "numpy_matlib_emath.palette",
        "fileType": "Palette",
        "shortDescription": "",
        "detailedDescription": "Wrapper functions to more user-friendly calling of certain math functions\nwhose output data-type is different than the input data-type in certain\ndomains of the input.\n\nFor example, for functions like `log` with branch cuts, the versions in this\nmodule provide the mathematically valid answers in the complex plane::\n\n  >>> import math\n  >>> np.emath.log(-math.exp(1)) == (1+1j*math.pi)\n  True\n\nSimilarly, `sqrt`, other base logarithms, `power` and trig functions are\ncorrectly handled.  See their respective docstrings for specific examples.",
        "repoService": "",
        "repoBranch": "",
        "repo": "",
        "generatorName": "dlg_paletteGen",
        "generatorVersion": "0.6.3",
        "generatorCommitHash": "",
        "schemaVersion": "AppRef",
        "readonly": true,
        "repositoryUrl": "matlib",
        "commitHash": "0.1",
        "downloadUrl": "",
        "signature": "5eb266cdb01cb61abbb892aa3680fe20b142e1d6a7ad9f7799fa110dc8a8e20d",
        "lastModifiedName": "wici",
        "lastModifiedEmail": "",
        "lastModifiedDatetime": 1755100313.738128,
        "numLGNodes": 9
    },
    "nodeDataArray": [
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "yhht8zdl",
            "name": "scimath.arccos",
            "description": "Compute the inverse cosine of x.\n    \n    Return the \"principal value\" (for a description of this, see\n    `numpy.arccos`) of the inverse cosine of `x`. For real `x` such that\n    `abs(x) <= 1`, this is a real number in the closed interval\n    :math:`[0, \\pi]`.  Otherwise, the complex principle value is returned.\n    \n    Parameters\n    ----------\n    x : array_like or scalar\n       The value(s) whose arccos is (are) required.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n       The inverse cosine(s) of the `x` value(s). If `x` was a scalar, so\n       is `out`, otherwise an array object is returned.\n    \n    See Also\n    --------\n    numpy.arccos\n    \n    Notes\n    -----\n    For an arccos() that returns ``NAN`` when real `x` is not in the\n    interval ``[-1,1]``, use `numpy.arccos`.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> np.set_printoptions(precision=4)\n    \n    >>> np.emath.arccos(1) # a scalar is returned\n    0.0\n    \n    >>> np.emath.arccos([1,2])\n    array([0.-0.j   , 0.-1.317j])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "83f4f52f8af8159c0ee2f0be3abb5ebc5f3d6f5442d3090ed89cebfe9449ca6c",
            "fields": [
                {
                    "id": "ebscqyb0",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "The value(s) whose arccos is (are) required.",
                    "type": "arraylike or scalar",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "scg_4chr",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.lib.scimath.arccos",
                    "defaultValue": "numpy.lib.scimath.arccos",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ypsl88hw",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bxki8667",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "zp46e79s",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9nk20k2j",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.lib.scimath",
                    "defaultValue": "numpy.lib.scimath",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lavia0nx",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "za4qhwso",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "tkanbo_s",
            "name": "scimath.arcsin",
            "description": "Compute the inverse sine of x.\n    \n    Return the \"principal value\" (for a description of this, see\n    `numpy.arcsin`) of the inverse sine of `x`. For real `x` such that\n    `abs(x) <= 1`, this is a real number in the closed interval\n    :math:`[-\\pi/2, \\pi/2]`.  Otherwise, the complex principle value is\n    returned.\n    \n    Parameters\n    ----------\n    x : array_like or scalar\n       The value(s) whose arcsin is (are) required.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n       The inverse sine(s) of the `x` value(s). If `x` was a scalar, so\n       is `out`, otherwise an array object is returned.\n    \n    See Also\n    --------\n    numpy.arcsin\n    \n    Notes\n    -----\n    For an arcsin() that returns ``NAN`` when real `x` is not in the\n    interval ``[-1,1]``, use `numpy.arcsin`.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> np.set_printoptions(precision=4)\n    \n    >>> np.emath.arcsin(0)\n    0.0\n    \n    >>> np.emath.arcsin([0,1])\n    array([0.    , 1.5708])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8d3d590a4edb6373108d37983edcba138c2c4b0a1ec127f1580bb923afca612e",
            "fields": [
                {
                    "id": "pq4ujg88",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "The value(s) whose arcsin is (are) required.",
                    "type": "arraylike or scalar",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0cep_uyb",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.lib.scimath.arcsin",
                    "defaultValue": "numpy.lib.scimath.arcsin",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3j9e69ov",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nm_07xcy",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "59bk3jma",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b2unitc3",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.lib.scimath",
                    "defaultValue": "numpy.lib.scimath",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6mp90ptq",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5coud3mq",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "l7c3bqpz",
            "name": "scimath.arctanh",
            "description": "Compute the inverse hyperbolic tangent of `x`.\n    \n    Return the \"principal value\" (for a description of this, see\n    `numpy.arctanh`) of ``arctanh(x)``. For real `x` such that\n    ``abs(x) < 1``, this is a real number.  If `abs(x) > 1`, or if `x` is\n    complex, the result is complex. Finally, `x = 1` returns``inf`` and\n    ``x=-1`` returns ``-inf``.\n    \n    Parameters\n    ----------\n    x : array_like\n       The value(s) whose arctanh is (are) required.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n       The inverse hyperbolic tangent(s) of the `x` value(s). If `x` was\n       a scalar so is `out`, otherwise an array is returned.\n    \n    \n    See Also\n    --------\n    numpy.arctanh\n    \n    Notes\n    -----\n    For an arctanh() that returns ``NAN`` when real `x` is not in the\n    interval ``(-1,1)``, use `numpy.arctanh` (this latter, however, does\n    return +/-inf for ``x = +/-1``).\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> np.set_printoptions(precision=4)\n    \n    >>> np.emath.arctanh(0.5)\n    0.5493061443340549\n    \n    >>> from numpy.testing import suppress_warnings\n    >>> with suppress_warnings() as sup:\n    ...     sup.filter(RuntimeWarning)\n    ...     np.emath.arctanh(np.eye(2))\n    array([[inf,  0.],\n           [ 0., inf]])\n    >>> np.emath.arctanh([1j])\n    array([0.+0.7854j])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c009b3e8775ef1c3726ad2d6c0c3750159e9ff2fa9dd023c90f4810a08fea173",
            "fields": [
                {
                    "id": "72lcs1a3",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "The value(s) whose arctanh is (are) required.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t3d2h2te",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.lib.scimath.arctanh",
                    "defaultValue": "numpy.lib.scimath.arctanh",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w4pzmnbu",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uz0afp2s",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "wet4izov",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kjl_cxd6",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.lib.scimath",
                    "defaultValue": "numpy.lib.scimath",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zze_9v2n",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l12m0z51",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "9b6drax_",
            "name": "scimath.log",
            "description": "Compute the natural logarithm of `x`.\n    \n    Return the \"principal value\" (for a description of this, see `numpy.log`)\n    of :math:`log_e(x)`. For real `x > 0`, this is a real number (``log(0)``\n    returns ``-inf`` and ``log(np.inf)`` returns ``inf``). Otherwise, the\n    complex principle value is returned.\n    \n    Parameters\n    ----------\n    x : array_like\n       The value(s) whose log is (are) required.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n       The log of the `x` value(s). If `x` was a scalar, so is `out`,\n       otherwise an array is returned.\n    \n    See Also\n    --------\n    numpy.log\n    \n    Notes\n    -----\n    For a log() that returns ``NAN`` when real `x < 0`, use `numpy.log`\n    (note, however, that otherwise `numpy.log` and this `log` are identical,\n    i.e., both return ``-inf`` for `x = 0`, ``inf`` for `x = inf`, and,\n    notably, the complex principle value if ``x.imag != 0``).\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> np.emath.log(np.exp(1))\n    1.0\n    \n    Negative arguments are handled \"correctly\" (recall that\n    ``exp(log(x)) == x`` does *not* hold for real ``x < 0``):\n    \n    >>> np.emath.log(-np.exp(1)) == (1 + np.pi * 1j)\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8c37c6fd6debd32c72acd52704b9b0427ba5fd8d53efa0f3da7215d567185c0d",
            "fields": [
                {
                    "id": "pepkgq_w",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "The value(s) whose log is (are) required.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "448_ohps",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.lib.scimath.log",
                    "defaultValue": "numpy.lib.scimath.log",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uk7lz895",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wbapsioq",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "7y9jrfeu",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v7lvsx61",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.lib.scimath",
                    "defaultValue": "numpy.lib.scimath",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "90kdp57t",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "azi_cii8",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "2gk2hr6o",
            "name": "scimath.log10",
            "description": "Compute the logarithm base 10 of `x`.\n    \n    Return the \"principal value\" (for a description of this, see\n    `numpy.log10`) of :math:`log_{10}(x)`. For real `x > 0`, this\n    is a real number (``log10(0)`` returns ``-inf`` and ``log10(np.inf)``\n    returns ``inf``). Otherwise, the complex principle value is returned.\n    \n    Parameters\n    ----------\n    x : array_like or scalar\n       The value(s) whose log base 10 is (are) required.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n       The log base 10 of the `x` value(s). If `x` was a scalar, so is `out`,\n       otherwise an array object is returned.\n    \n    See Also\n    --------\n    numpy.log10\n    \n    Notes\n    -----\n    For a log10() that returns ``NAN`` when real `x < 0`, use `numpy.log10`\n    (note, however, that otherwise `numpy.log10` and this `log10` are\n    identical, i.e., both return ``-inf`` for `x = 0`, ``inf`` for `x = inf`,\n    and, notably, the complex principle value if ``x.imag != 0``).\n    \n    Examples\n    --------\n    >>> import numpy as np\n    \n    (We set the printing precision so the example can be auto-tested)\n    \n    >>> np.set_printoptions(precision=4)\n    \n    >>> np.emath.log10(10**1)\n    1.0\n    \n    >>> np.emath.log10([-10**1, -10**2, 10**2])\n    array([1.+1.3644j, 2.+1.3644j, 2.+0.j    ])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "06b95b98734c9e77dbf64d2eb23d6c8a1e677653519210eee95f51dfb1465751",
            "fields": [
                {
                    "id": "a3uzml4v",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "The value(s) whose log base 10 is (are) required.",
                    "type": "arraylike or scalar",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2uc35wdy",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.lib.scimath.log10",
                    "defaultValue": "numpy.lib.scimath.log10",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "km01o9rp",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ogt_qjzf",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "v_366xlq",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7zjvcbcj",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.lib.scimath",
                    "defaultValue": "numpy.lib.scimath",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ia71d51p",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hpu5_ffs",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "7i1tlps0",
            "name": "scimath.log2",
            "description": "Compute the logarithm base 2 of `x`.\n    \n    Return the \"principal value\" (for a description of this, see\n    `numpy.log2`) of :math:`log_2(x)`. For real `x > 0`, this is\n    a real number (``log2(0)`` returns ``-inf`` and ``log2(np.inf)`` returns\n    ``inf``). Otherwise, the complex principle value is returned.\n    \n    Parameters\n    ----------\n    x : array_like\n       The value(s) whose log base 2 is (are) required.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n       The log base 2 of the `x` value(s). If `x` was a scalar, so is `out`,\n       otherwise an array is returned.\n    \n    See Also\n    --------\n    numpy.log2\n    \n    Notes\n    -----\n    For a log2() that returns ``NAN`` when real `x < 0`, use `numpy.log2`\n    (note, however, that otherwise `numpy.log2` and this `log2` are\n    identical, i.e., both return ``-inf`` for `x = 0`, ``inf`` for `x = inf`,\n    and, notably, the complex principle value if ``x.imag != 0``).\n    \n    Examples\n    --------\n    \n    We set the printing precision so the example can be auto-tested:\n    \n    >>> np.set_printoptions(precision=4)\n    \n    >>> np.emath.log2(8)\n    3.0\n    >>> np.emath.log2([-4, -8, 8])\n    array([2.+4.5324j, 3.+4.5324j, 3.+0.j    ])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d4128062fb1b1d670a5633da5d5648921e19f93dbfcc2aeccedffc8c58698387",
            "fields": [
                {
                    "id": "s7ifzgy3",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "The value(s) whose log base 2 is (are) required.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "smfeaiq1",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.lib.scimath.log2",
                    "defaultValue": "numpy.lib.scimath.log2",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fzs6o1yq",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_hq1l2zw",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "6ikdt12o",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xnbfsdq4",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.lib.scimath",
                    "defaultValue": "numpy.lib.scimath",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sn3chb1h",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "92ac6lqf",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ttpa_dxd",
            "name": "scimath.logn",
            "description": "Take log base n of x.\n    \n    If `x` contains negative inputs, the answer is computed and returned in the\n    complex domain.\n    \n    Parameters\n    ----------\n    n : array_like\n       The integer base(s) in which the log is taken.\n    x : array_like\n       The value(s) whose log base `n` is (are) required.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n       The log base `n` of the `x` value(s). If `x` was a scalar, so is\n       `out`, otherwise an array is returned.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> np.set_printoptions(precision=4)\n    \n    >>> np.emath.logn(2, [4, 8])\n    array([2., 3.])\n    >>> np.emath.logn(2, [-4, -8, 8])\n    array([2.+4.5324j, 3.+4.5324j, 3.+0.j    ])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "07ac4887a6f7d5f77ea8b3190a32b6d54fc37e683edd42ed7a3c62c4dea6e546",
            "fields": [
                {
                    "id": "5cvs8efx",
                    "encoding": "",
                    "name": "n",
                    "value": "",
                    "defaultValue": "",
                    "description": "The integer base(s) in which the log is taken.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4sjby7vj",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "The value(s) whose log base `n` is (are) required.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "60gxjwfj",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.lib.scimath.logn",
                    "defaultValue": "numpy.lib.scimath.logn",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yvj3a16o",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_dgtm__5",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "xtvnynb4",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zsu_8jh0",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.lib.scimath",
                    "defaultValue": "numpy.lib.scimath",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5wmdezo8",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pr_7fn1s",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "uv0ap44j",
            "name": "scimath.power",
            "description": "Return x to the power p, (x**p).\n    \n    If `x` contains negative values, the output is converted to the\n    complex domain.\n    \n    Parameters\n    ----------\n    x : array_like\n        The input value(s).\n    p : array_like of ints\n        The power(s) to which `x` is raised. If `x` contains multiple values,\n        `p` has to either be a scalar, or contain the same number of values\n        as `x`. In the latter case, the result is\n        ``x[0]**p[0], x[1]**p[1], ...``.\n    \n    Returns\n    -------\n    out : ndarray or scalar\n        The result of ``x**p``. If `x` and `p` are scalars, so is `out`,\n        otherwise an array is returned.\n    \n    See Also\n    --------\n    numpy.power\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> np.set_printoptions(precision=4)\n    \n    >>> np.emath.power(2, 2)\n    4\n    \n    >>> np.emath.power([2, 4], 2)\n    array([ 4, 16])\n    \n    >>> np.emath.power([2, 4], -2)\n    array([0.25  ,  0.0625])\n    \n    >>> np.emath.power([-2, 4], 2)\n    array([ 4.-0.j, 16.+0.j])\n    \n    >>> np.emath.power([2, 4], [2, 4])\n    array([ 4, 256])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "811c2d88846418f9bf4d1ef8036f85f0afdf351703171e86dce5dd2d760fe8a2",
            "fields": [
                {
                    "id": "obe7k140",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input value(s).",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "prypqmvn",
                    "encoding": "",
                    "name": "p",
                    "value": "",
                    "defaultValue": "",
                    "description": "The power(s) to which `x` is raised. If `x` contains multiple values,\n`p` has to either be a scalar, or contain the same number of values\nas `x`. In the latter case, the result is\n``x[0]**p[0], x[1]**p[1], ...``.",
                    "type": "arraylike of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7mgntys7",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.lib.scimath.power",
                    "defaultValue": "numpy.lib.scimath.power",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uvto1h7_",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d_lccbmt",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "jbumdbu1",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x07y9oql",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.lib.scimath",
                    "defaultValue": "numpy.lib.scimath",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "68y4y4yd",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oddehrmc",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "yo26d1hs",
            "name": "scimath.sqrt",
            "description": "Compute the square root of x.\n    \n    For negative input elements, a complex value is returned\n    (unlike `numpy.sqrt` which returns NaN).\n    \n    Parameters\n    ----------\n    x : array_like\n       The input value(s).\n    \n    Returns\n    -------\n    out : ndarray or scalar\n       The square root of `x`. If `x` was a scalar, so is `out`,\n       otherwise an array is returned.\n    \n    See Also\n    --------\n    numpy.sqrt\n    \n    Examples\n    --------\n    For real, non-negative inputs this works just like `numpy.sqrt`:\n    \n    >>> import numpy as np\n    \n    >>> np.emath.sqrt(1)\n    1.0\n    >>> np.emath.sqrt([1, 4])\n    array([1.,  2.])\n    \n    But it automatically handles negative inputs:\n    \n    >>> np.emath.sqrt(-1)\n    1j\n    >>> np.emath.sqrt([-1,4])\n    array([0.+1.j, 2.+0.j])\n    \n    Different results are expected because:\n    floating point 0.0 and -0.0 are distinct.\n    \n    For more control, explicitly use complex() as follows:\n    \n    >>> np.emath.sqrt(complex(-4.0, 0.0))\n    2j\n    >>> np.emath.sqrt(complex(-4.0, -0.0))\n    -2j",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f1d096211fd1c3735ca4aeeb728b62a92c62d94756e42e39c70d02410769531d",
            "fields": [
                {
                    "id": "rw8f55dg",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input value(s).",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sku228cx",
                    "encoding": "",
                    "name": "func_name",
                    "value": "numpy.lib.scimath.sqrt",
                    "defaultValue": "numpy.lib.scimath.sqrt",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2vie6qk5",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x7h82r_e",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "3ykg0m4_",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1h089_7a",
                    "encoding": "",
                    "name": "base_name",
                    "value": "numpy.lib.scimath",
                    "defaultValue": "numpy.lib.scimath",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9eo24ll8",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nbi_00vv",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        }
    ],
    "linkDataArray": []
}